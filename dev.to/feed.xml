<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Web Services 101: The client is downstream, the service is upstream</title>
      <author>scottshipp</author>
      <pubDate>Fri, 05 Nov 2021 15:57:50 +0000</pubDate>
      <link>https://dev.to/scottshipp/web-services-101-the-client-is-downstream-the-service-is-upstream-1gd1</link>
      <guid>https://dev.to/scottshipp/web-services-101-the-client-is-downstream-the-service-is-upstream-1gd1</guid>
      <description>&lt;p&gt;Sometimes I read a conversation between two devs online or I overhear one while filling up my water bottle that goes something like this:&lt;/p&gt;

&lt;p&gt;Dev 1: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"I think there's something wrong with the downstream service. It keeps timing out so we keep sending 500's to our clients and it's becoming a big issue."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dev 2:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"That service actually talks to like four others to return the response. I bet its some issue even further downstream."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This usage of "downstream" is actually wrong, and this is not a subjective observation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-updownstream-actually-mean"&gt;
  &lt;/a&gt;
  What does up/downstream actually mean?
&lt;/h2&gt;

&lt;p&gt;In web services, upstream and downstream are actually &lt;a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec1.html#sec1.3"&gt;defined by the HTTP specification&lt;/a&gt; as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;upstream/downstream&lt;/p&gt;

&lt;p&gt;Upstream and downstream describe the flow of a message: all messages flow from upstream to downstream. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, in any HTTP interaction, the requesting service is downstream. The service responding is upstream. &lt;/p&gt;

&lt;p&gt;This isn't just a random definition thrown into the opening portion of the specification and then ignored thereafter, either. You will find this specific usage of up/downstream throughout the specification. Consider the definition of a &lt;a href="https://httpstatuses.com/504"&gt;504 Gateway Timeout&lt;/a&gt; response for example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will also find the same usage in documentation for things like nginx.&lt;/p&gt;

&lt;p&gt;To visualize this, consider a series of service calls initiated by some external client, as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;client -&amp;gt; service A -&amp;gt; service B -&amp;gt; service C
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above is the request flow, but the response flow is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;client &amp;lt;- service A &amp;lt;- service B &amp;lt;- service C
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The response flow is the flow that is the basis for "upstream" and "downstream" in web services.&lt;/p&gt;

&lt;p&gt;For another take on this, check out &lt;a href="https://stackoverflow.com/questions/32364579/upstream-downstream-terminology-used-backwards-e-g-nginx"&gt;this old Stack Overflow question&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hope it helps!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>web</category>
    </item>
    <item>
      <title>Next JS Starter Kit with TypeScript and Tailwind CSS</title>
      <author>Remi W.</author>
      <pubDate>Fri, 05 Nov 2021 15:54:53 +0000</pubDate>
      <link>https://dev.to/ixartz/next-js-starter-kit-with-typescript-and-tailwind-css-3ng0</link>
      <guid>https://dev.to/ixartz/next-js-starter-kit-with-typescript-and-tailwind-css-3ng0</guid>
      <description>&lt;p&gt;I've just updated my Next JS Starter Template to the latest version, Next JS 12. The perfect starter kit to start your Next JS in seconds with TypeScript and Tailwind CSS 2. It was built for developer experience in mind with linter ESLint and Code formatter Prettier and VSCode.&lt;/p&gt;

&lt;p&gt;You can test the &lt;a href="https://github.com/ixartz/Next-js-Boilerplate"&gt;Next JS Starter Kit live demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can check out the repo at: &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Boilerplate/"&gt;Next JS Starter Template GitHub&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ixartz"&gt;
        ixartz
      &lt;/a&gt; / &lt;a href="https://github.com/ixartz/Next-js-Boilerplate"&gt;
        Next-js-Boilerplate
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🚀 Boilerplate and Starter for Next.js 12+, Tailwind CSS 2.0 and TypeScript ⚡️ Made with developer experience first: Next.js + TypeScript + ESLint + Prettier + Husky + Lint-Staged + VSCode + Netlify + PostCSS + Tailwind CSS
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Boilerplate and Starter for Next JS 12+, Tailwind CSS 2.0 and TypeScript &lt;a href="https://twitter.com/ixartz" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/22898de970db41d476e65546387c7b5147565904f1a4197980bb0e3eb30eb8ab/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f68747470732f747769747465722e636f6d2f636c6f7564706f7373652e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f7725323025343049786172747a" alt="Twitter"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;
  &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Boilerplate/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOL9mcNA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ixartz/Next-js-Boilerplatepublic/assets/images/nextjs-starter-banner.png%3Fraw%3Dtrue" alt="Next js starter banner"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;🚀 Boilerplate and Starter for Next.js, Tailwind CSS and TypeScript ⚡️ Made with developer experience first: Next.js, TypeScript, ESLint, Prettier, Husky, Lint-Staged, VSCode, Netlify, PostCSS, Tailwind CSS.&lt;/p&gt;

&lt;p&gt;Clone this project and use it to create your own &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; project. You can check a &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Boilerplate/" rel="nofollow"&gt;Next js templates demo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
Features&lt;/h3&gt;

&lt;p&gt;Developer experience first:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
🔥 &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; for Static Site Generator&lt;/li&gt;
&lt;li&gt;
🎨 Integrate with &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt; (w/ JIT mode)&lt;/li&gt;
&lt;li&gt;
💅 PostCSS for processing Tailwind CSS and integrated to &lt;code&gt;styled-jsx&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
🎉 Type checking &lt;a href="https://www.typescriptlang.org" rel="nofollow"&gt;TypeScript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
✅ Strict Mode for TypeScript and React 17&lt;/li&gt;
&lt;li&gt;
✏️ Linter with &lt;a href="https://eslint.org" rel="nofollow"&gt;ESLint&lt;/a&gt; (default NextJS, NextJS Core Web Vitals and Airbnb configuration)&lt;/li&gt;
&lt;li&gt;
🛠 Code Formatter with &lt;a href="https://prettier.io" rel="nofollow"&gt;Prettier&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🦊 Husky for Git Hooks&lt;/li&gt;
&lt;li&gt;
🚫 Lint-staged for running linters on Git staged files&lt;/li&gt;
&lt;li&gt;
🗂 VSCode configuration: Debug, Settings, Tasks and extension for PostCSS, ESLint, Prettier, TypeScript&lt;/li&gt;
&lt;li&gt;
🤖 SEO metadata, JSON-LD and…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ixartz/Next-js-Boilerplate"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#built-with-latest-technology"&gt;
  &lt;/a&gt;
  Built with latest technology
&lt;/h2&gt;

&lt;p&gt;Here is all the features included out of box:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;🔥 Next JS 12&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🎨 Integrate with Tailwind CSS 2 with JIT mode&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🎉 TypeScript&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;⚛️ React&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;✏️ ESLint for TypeScript&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;with Next JS default configuration and Next JS Core Web Vitals&lt;/li&gt;
&lt;li&gt;with Airbnb configuration&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🛠 Code Formatter with Prettier&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🦊 Husky for Git Hooks&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🚫 Lint-staged for running linters on Git staged files&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🗂 VSCode configuration: Debug, Settings, Tasks and extension for PostCSS, ESLint, Prettier, TypeScript&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🤖 SEO-friendly&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;⚙️ Bundler Analyzer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🖱️ One click deploy&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Vercel&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Or, Netlify&lt;/li&gt;
&lt;li&gt;Or, you can deploy manually to any hosting service&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ixartz"&gt;
        ixartz
      &lt;/a&gt; / &lt;a href="https://github.com/ixartz/Next-js-Boilerplate"&gt;
        Next-js-Boilerplate
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🚀 Boilerplate and Starter for Next.js 12+, Tailwind CSS 2.0 and TypeScript ⚡️ Made with developer experience first: Next.js + TypeScript + ESLint + Prettier + Husky + Lint-Staged + VSCode + Netlify + PostCSS + Tailwind CSS
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Boilerplate and Starter for Next JS 12+, Tailwind CSS 2.0 and TypeScript &lt;a href="https://twitter.com/ixartz" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/22898de970db41d476e65546387c7b5147565904f1a4197980bb0e3eb30eb8ab/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f68747470732f747769747465722e636f6d2f636c6f7564706f7373652e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f7725323025343049786172747a" alt="Twitter"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;
  &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Boilerplate/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOL9mcNA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ixartz/Next-js-Boilerplatepublic/assets/images/nextjs-starter-banner.png%3Fraw%3Dtrue" alt="Next js starter banner"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;🚀 Boilerplate and Starter for Next.js, Tailwind CSS and TypeScript ⚡️ Made with developer experience first: Next.js, TypeScript, ESLint, Prettier, Husky, Lint-Staged, VSCode, Netlify, PostCSS, Tailwind CSS.&lt;/p&gt;

&lt;p&gt;Clone this project and use it to create your own &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; project. You can check a &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Boilerplate/" rel="nofollow"&gt;Next js templates demo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
Features&lt;/h3&gt;

&lt;p&gt;Developer experience first:&lt;/p&gt;


&lt;ul&gt;
&lt;li&gt;
🔥 &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; for Static Site Generator&lt;/li&gt;
&lt;li&gt;
🎨 Integrate with &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt; (w/ JIT mode)&lt;/li&gt;
&lt;li&gt;
💅 PostCSS for processing Tailwind CSS and integrated to &lt;code&gt;styled-jsx&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
🎉 Type checking &lt;a href="https://www.typescriptlang.org" rel="nofollow"&gt;TypeScript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
✅ Strict Mode for TypeScript and React 17&lt;/li&gt;
&lt;li&gt;
✏️ Linter with &lt;a href="https://eslint.org" rel="nofollow"&gt;ESLint&lt;/a&gt; (default NextJS, NextJS Core Web Vitals and Airbnb configuration)&lt;/li&gt;
&lt;li&gt;
🛠 Code Formatter with &lt;a href="https://prettier.io" rel="nofollow"&gt;Prettier&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🦊 Husky for Git Hooks&lt;/li&gt;
&lt;li&gt;
🚫 Lint-staged for running linters on Git staged files&lt;/li&gt;
&lt;li&gt;
🗂 VSCode configuration: Debug, Settings, Tasks and extension for PostCSS, ESLint, Prettier, TypeScript&lt;/li&gt;
&lt;li&gt;
🤖 SEO metadata, JSON-LD and…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ixartz/Next-js-Boilerplate"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>nextjs</category>
      <category>tailwindcss</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Building a Voice Assistant</title>
      <author>Roopali Singh</author>
      <pubDate>Fri, 05 Nov 2021 15:18:02 +0000</pubDate>
      <link>https://dev.to/roopalisingh/building-a-voice-assistant-3g09</link>
      <guid>https://dev.to/roopalisingh/building-a-voice-assistant-3g09</guid>
      <description>&lt;p&gt;Hi there👋,&lt;/p&gt;

&lt;p&gt;In this guide we will be learning how to integrate &lt;strong&gt;voice user interface&lt;/strong&gt; in our web application.&lt;/p&gt;

&lt;p&gt;We are working with &lt;code&gt;React&lt;/code&gt;. To incorporate Voice User Interface (&lt;code&gt;VUI&lt;/code&gt;) we will use &lt;code&gt;Web Speech API&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For simplicity we will not be focusing on design.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Our aim is to build a &lt;strong&gt;voice assistant&lt;/strong&gt; which will recognize what we say and answer accordingly.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1-mD1R1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0z9i27b7t4jjbjyixtg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1-mD1R1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0z9i27b7t4jjbjyixtg1.png" alt="Loudspeaker image" width="880" height="513"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this we are using &lt;strong&gt;Web Speech API&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This API allows fine control and flexibility over the speech recognition capabilities in Chrome version 25 and later.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Web Speech API&lt;/code&gt; provides us with two functionality —&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Speech Recognition&lt;/strong&gt; which converts &lt;code&gt;speech to text&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Speech Synthesis&lt;/strong&gt; which converts &lt;code&gt;text to speech&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span&gt;1.&lt;/span&gt; We will start by installing two npm packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// for speech recognition&lt;/span&gt;
&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;speech&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;recognition&lt;/span&gt;
&lt;span class="c1"&gt;// for speech synthesis&lt;/span&gt;
&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;speech&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;kit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now before moving on to the next step, let's take a look at some important functions of &lt;code&gt;Speech Recognition&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Detecting browser support for Web Speech API&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;SpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;browserSupportsSpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Render some fallback function content&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Turning the microphone on&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;SpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startListening&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Turning the microphone off&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// It will first finish processing any speech in progress and&lt;/span&gt;
&lt;span class="c1"&gt;// then stop.&lt;/span&gt;
&lt;span class="nx"&gt;SpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stopListening&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// It will cancel the processing of any speech in progress.&lt;/span&gt;
&lt;span class="nx"&gt;SpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abortListening&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Consuming the microphone transcript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// To make the microphone transcript available in our component.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;transcript&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Resetting the microphone transcript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;resetTranscript&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Now we're ready to add Speech Recognition (&lt;code&gt;text to speech&lt;/code&gt;) in our web app 🚀&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;2.&lt;/span&gt; In the &lt;code&gt;App.js&lt;/code&gt; file, we will check the support for &lt;code&gt;react-speech-recognition&lt;/code&gt; and add two components &lt;strong&gt;StartButton&lt;/strong&gt; and &lt;strong&gt;Output&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;App.js&lt;/code&gt; file should look like this for now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;StartButton&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./StartButton&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Output&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Output&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SpeechRecognition&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-speech-recognition&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;// Checking the support&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;SpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;browserSupportsSpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Browser&lt;/span&gt; &lt;span class="nx"&gt;does&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;support&lt;/span&gt; &lt;span class="nx"&gt;Web&lt;/span&gt; &lt;span class="nx"&gt;Speech&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Speech&lt;/span&gt; &lt;span class="nx"&gt;Recognition&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
      &lt;span class="nx"&gt;Please&lt;/span&gt; &lt;span class="nx"&gt;download&lt;/span&gt; &lt;span class="nx"&gt;latest&lt;/span&gt; &lt;span class="nx"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StartButton&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Output&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;span&gt;3.&lt;/span&gt; Next we will move to the &lt;code&gt;StartButton.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Here we will add a toggle button to start and stop listening.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;StartButton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setListen&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;SpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startListening&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;continuous&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="nx"&gt;setListen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// The default value for continuous is false, meaning that&lt;/span&gt;
      &lt;span class="c1"&gt;// when the user stops talking, speech recognition will end. &lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;SpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abortListening&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;setListen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Stop Listening&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Start Listening&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;StartButton&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;span&gt;4.&lt;/span&gt; Now in the &lt;code&gt;Output.js&lt;/code&gt; file, we will use &lt;code&gt;useSpeechRecognition&lt;/code&gt; react hook.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useSpeechRecognition&lt;/code&gt; gives a component access to a transcript of speech picked up from the user's microphone.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSpeechRecognition&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-speech-recognition&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;outputMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOutputMessage&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;commands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;// here we will write various different commands and&lt;/span&gt;
    &lt;span class="c1"&gt;// callback functions for their responses.&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;transcript&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resetTranscript&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
                              &lt;span class="nx"&gt;useSpeechRecognition&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;commands&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;transcript&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;outputMessage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;span&gt;5.&lt;/span&gt; Before defining the commands, we will add &lt;code&gt;Speech Synthesis&lt;/code&gt; in our web app to convert the &lt;strong&gt;outputMessage to speech&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;App.js&lt;/code&gt; file, we will now check the support for the &lt;code&gt;speech synthesis&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSpeechSynthesis&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-speech-kit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;funtion&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;supported&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSpeechSynthesis&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;supported&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Browser&lt;/span&gt; &lt;span class="nx"&gt;does&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;support&lt;/span&gt; &lt;span class="nx"&gt;Web&lt;/span&gt; &lt;span class="nx"&gt;Speech&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Speech&lt;/span&gt; &lt;span class="nx"&gt;Synthesis&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
      &lt;span class="nx"&gt;Please&lt;/span&gt; &lt;span class="nx"&gt;download&lt;/span&gt; &lt;span class="nx"&gt;latest&lt;/span&gt; &lt;span class="nx"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;span&gt;6.&lt;/span&gt; Now in the &lt;code&gt;Output.js&lt;/code&gt; file, we will use &lt;code&gt;useSpeechSynthesis()&lt;/code&gt; react hook.&lt;/p&gt;

&lt;p&gt;But before moving on, we first take a look at some important functions of &lt;code&gt;Speech Synthesis&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;speak()&lt;/strong&gt;: Call to make the browser read some text.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;cancel()&lt;/strong&gt;: Call to make SpeechSynthesis stop reading.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We want to call the &lt;code&gt;speak()&lt;/code&gt; function each time the &lt;strong&gt;outputMessage&lt;/strong&gt; is changed.&lt;/p&gt;

&lt;p&gt;So we would add the following lines of code in &lt;code&gt;Output.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSpeechSynthesis&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-speech-kit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;outputMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOutputMessage&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cancel&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSpeechSynthesis&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// The speak() will get called each time outputMessage is changed &lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;outputMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;outputMessage&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;😃Whoa!&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Everything is now setup&lt;/em&gt; 🔥&lt;br&gt;
&lt;em&gt;The only thing left is to define our &lt;strong&gt;commands&lt;/strong&gt;&lt;/em&gt; 👩🎤&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p4INacFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1g6x38pv5jl8go4fime8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p4INacFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1g6x38pv5jl8go4fime8.png" alt="Naruto: Only commands left" width="833" height="411"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;7.&lt;/span&gt; Now we're back at our &lt;code&gt;Output.js&lt;/code&gt; file to complete our commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;commands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// In this, the words that match the splat(*) will be passed&lt;/span&gt;
    &lt;span class="c1"&gt;// into the callback,&lt;/span&gt;

    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am *&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resetTranscript&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;setOutputMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. Nice name`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="c1"&gt;// DATE AND TIME&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;What time is it&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resetTranscript&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;setOutputMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleTimeString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;matchInterim&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// The default value for matchInterim is false, meaning that&lt;/span&gt;
    &lt;span class="c1"&gt;// the only results returned by the recognizer are final and&lt;/span&gt;
    &lt;span class="c1"&gt;// will not change.&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This example would match both:&lt;/span&gt;
    &lt;span class="c1"&gt;// 'What is the date' and 'What is the date today'&lt;/span&gt;

    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;What is the date (today)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resetTranscript&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;setOutputMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="c1"&gt;// GOOGLING (search)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Search * on google&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gitem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resetTranscript&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="c1"&gt;// function to google the query(gitem)&lt;/span&gt;
      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toGoogle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`http://google.com/search?q=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;gitem&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_blank&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;toGoogle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="nx"&gt;setOutputMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Okay. Googling &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;gitem&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="c1"&gt;// CALCULATIONS&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Add * and *&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numa&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resetTranscript&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numa&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setOutputMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The answer is: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="c1"&gt;// CLEAR or STOP.&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;clear&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="na"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resetTranscript&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;isFuzzyMatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fuzzyMatchingThreshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="c1"&gt;// isFuzzyMatch is false by default.&lt;/span&gt;
    &lt;span class="c1"&gt;// It determines whether the comparison between speech and&lt;/span&gt;
    &lt;span class="c1"&gt;// command is based on similarity rather than an exact match.&lt;/span&gt;

    &lt;span class="c1"&gt;// fuzzyMatchingThreshold (default is 0.8) takes values between&lt;/span&gt;
    &lt;span class="c1"&gt;// 0 (will match anything) and 1 (needs an exact match).&lt;/span&gt;
    &lt;span class="c1"&gt;//  If the similarity of speech to command is higher than this&lt;/span&gt;
    &lt;span class="c1"&gt;// value, the callback will be invoked.&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;😃We have successfully built a &lt;code&gt;voice assistant&lt;/code&gt; using the &lt;code&gt;Web Speech API&lt;/code&gt; that do as we say 🔥🔥&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As of May 2021, browsers support for &lt;code&gt;Web Speech API&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chrome (desktop)&lt;/li&gt;
&lt;li&gt;Chrome (Android)&lt;/li&gt;
&lt;li&gt;Safari 14.1&lt;/li&gt;
&lt;li&gt;Microsoft Edge&lt;/li&gt;
&lt;li&gt;Android webview&lt;/li&gt;
&lt;li&gt;Samsung Internet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For all other browsers, you can integrate a &lt;code&gt;polyfill&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#heres-a-demo-that-i-have-made-with-some-styling"&gt;
  &lt;/a&gt;
  &lt;em&gt;Here's a demo that I have made with some styling:&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#i-call-it-aether"&gt;
  &lt;/a&gt;
  &lt;em&gt;I call it &lt;a href="https://the-aether.netlify.app/"&gt;Aether&lt;/a&gt;&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SGHJA4Pl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jge9d3nvpx2uvz4xkzcq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SGHJA4Pl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jge9d3nvpx2uvz4xkzcq.png" alt="Completed" width="694" height="357"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>speaking</category>
    </item>
    <item>
      <title>C++ from the beginning, input and output</title>
      <author>Chris Noring</author>
      <pubDate>Fri, 05 Nov 2021 15:06:44 +0000</pubDate>
      <link>https://dev.to/azure/c-from-the-beginning-input-and-output-5ad0</link>
      <guid>https://dev.to/azure/c-from-the-beginning-input-and-output-5ad0</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TLDR; this is part of the C++ from the beginning series. This part is about how to write a program that reads and writes to the console.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;Here's some useful links to learn more:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/cpp/cpp/?view=msvc-160&amp;amp;wt.mc_id=academic-0000-chnoring"&gt;C++ Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/cpp/standard-library/iostream?view=msvc-160&amp;amp;wt.mc_id=academic-0000-chnoring"&gt;Streaming IO, cout and cin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/cpp/standard-library/iomanip-functions?view=msvc-160&amp;amp;wt.mc_id=academic-0000-chnoring"&gt;Iomanip formatting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0why-console-programs"&gt;
  &lt;/a&gt;
   Why console programs
&lt;/h2&gt;

&lt;p&gt;Console programs are programs that work on the console, they have no user interface, but they are still heavily used and useful. No UI you say, how's that good? Well, console programs are fast, really fast. Additionally they are easier to script and used in the context of a build server, if you need to send in args automatically and listen to the input as part of a build step, if you are practicing CI/CD for example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0writing-to-the-console"&gt;
  &lt;/a&gt;
   Writing to the console
&lt;/h2&gt;

&lt;p&gt;Ok, we know why console programs can be a good idea sometimes. How would I output to the console? There are many libraries that does that for you but two common alternatives are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;iostream&lt;/strong&gt;, stream based library that's considered more C++.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;cstdio&lt;/strong&gt;, more C-style formatting. Has similar functionality to iostream but some say it has issues like not checking interpolation properly and yea iostream being more future safe.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#your-first-output"&gt;
  &lt;/a&gt;
  Your first output
&lt;/h3&gt;

&lt;p&gt;To create a program that output to the console, you need &lt;code&gt;iostream&lt;/code&gt; and you need &lt;code&gt;cout&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Print this"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how you use &lt;code&gt;cout&lt;/code&gt; and the stream operator that takes the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator meaning it writes to a stream that's going to console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%C2%A0mixing-types"&gt;
  &lt;/a&gt;
   Mixing types
&lt;/h3&gt;

&lt;p&gt;Ok, so you mostly likely want to combine numbers and strings, like saying for example the sum is 8. How would you do that? The answer is to use the stream operator &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; to separate the two different data types like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"The sum is "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Is that the only way to do things, what if I want to write something like, "this program has run for 8 days", a clear mixture of string, int and string again, do I have to use &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; many times? There are a few different options, as illustrated in the below code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"The sum is "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"This program has been running for "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"days"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The program has been running for %d days"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The program has been running for {0} days"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;&amp;lt; "string" &amp;lt;&amp;lt; number &amp;lt;&amp;lt; "string"&lt;/code&gt;. This is the version you've seen so far, separating different data types by &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"string" + to_string(number)&lt;/code&gt;. In this version you concatenate string by first converting your number using the function &lt;code&gt;to_string()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;printf&lt;/code&gt;. Here you use the library &lt;code&gt;cstdio&lt;/code&gt; a c-style library that interpolates, allows you to mix strings and numbers by using a placeholder {0}. The 0 says what position it has as an argument, example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;   &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Here's a number {0}, and another one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;format()&lt;/code&gt;. Here we are using a function introduced in C++ 20. Ensure you have upgraded C++ to be able to use this one. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#%C2%A0formatted-output"&gt;
  &lt;/a&gt;
   Formatted output
&lt;/h3&gt;

&lt;p&gt;There's a library &lt;code&gt;iomanip&lt;/code&gt; that enables you to format the output and with it you can do things such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;set alignment, you can decide on whether to align what you print to the left or to the right&lt;/li&gt;
&lt;li&gt;set width, you can have what you print take up N characters, thereby you can print output like a table&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's an example program using many of &lt;code&gt;iomanips&lt;/code&gt; features:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;iomanip&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;setw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class="s"&gt;"row1col1"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;setw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"row1col2"&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;setw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class="s"&gt;"row2col1"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;setw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"row2col2"&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have &lt;code&gt;setw()&lt;/code&gt;, set width, that's used to create two difference columns. Where you to run this, you get the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  row1col1            row1col2
  row2col1            row2col2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's more functionality than that, have a look at the "references" section at the top of the article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0reading-from-the-console"&gt;
  &lt;/a&gt;
   Reading from the console
&lt;/h2&gt;

&lt;p&gt;To read from the console, we can use &lt;code&gt;cin&lt;/code&gt; from &lt;code&gt;iostream&lt;/code&gt;. You use it like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"what's your name? "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Hi "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;cin &amp;gt;&amp;gt; name&lt;/code&gt;, waits for the user to type a string and then a return key. Then the value will be stored in &lt;code&gt;name&lt;/code&gt;. &lt;br&gt;
Lastly we type the value. To try this demo, take the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Save the above code in a file &lt;em&gt;app.cpp&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Compile the program with &lt;code&gt;g++ app.cpp&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run the program:
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   ./a.out &lt;span class="c"&gt;# macOS, Linux&lt;/span&gt;
   a.out.exe &lt;span class="c"&gt;# windows &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You should see the program running like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   what's your name? chris
   Hi chris
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#multiple-inputs"&gt;
  &lt;/a&gt;
  Multiple inputs
&lt;/h3&gt;

&lt;p&gt;Imagine you have a situation where you need to collect multiple inputs. In the below program we have a calculation program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"--Add two numbers--&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"First number: "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Second number: "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;no2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"The sum is: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;no2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, you ask for one number, then the next. But what if you want to collect everything on one row? We can do that, just change the code to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"--Add two numbers--&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Input numbers (separated by space): "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;no2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"The sum is: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;no2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the row &lt;code&gt;cin &amp;gt;&amp;gt; no &amp;gt;&amp;gt; no2;&lt;/code&gt; where you separate the user input by &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;. The reason we do it like that is that &lt;code&gt;cin&lt;/code&gt; only takes the first value until the first space.&lt;/p&gt;

&lt;p&gt;Another approach we could use is &lt;code&gt;getline()&lt;/code&gt; that reads the whole row, like in the below code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s_numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"--Add numbers--&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Input numbers (separated by space): "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;getline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s_numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// add code to split and convert numbers to int&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"The sum is: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;getline()&lt;/code&gt; reads the whole line, regardless of whether you use a space character or not. However, now you are in a situation where you need to parse &lt;code&gt;s_numbers&lt;/code&gt; because that line is stored as a string. How to fix? &lt;/p&gt;

&lt;p&gt;First we need a split function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;stringstream&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First thing we do is to read &lt;code&gt;line&lt;/code&gt;, that came from user input, into a &lt;code&gt;stringstream&lt;/code&gt; object. Imagine the user did an input that looks like so "1 2 3 4";&lt;/p&gt;

&lt;p&gt;Now we iterate over the stringstream object using a while construct. This enables us to read every substring in that user string, so for each iteration you get "1" "2" "3" "4". However we need to convert that to an int, which we do with &lt;code&gt;stoi()&lt;/code&gt;, that takes a string and turns it into an int. Additionally we need to add each value to &lt;code&gt;numbers&lt;/code&gt; of type &lt;code&gt;vector&lt;/code&gt; (vector is a dynamic list that can take any number of items).&lt;/p&gt;

&lt;p&gt;Ok, we solved half the problem. We now need to summarise the values in the vector, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, so we have something loops through the vector and we end up with an integer. Now for the full program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;sstream&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;stringstream&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s_numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"--Add numbers--&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Input numbers (separated by space): "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;getline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s_numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;s_numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;' '&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Sum is: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You were taken through &lt;code&gt;cin&lt;/code&gt; and &lt;code&gt;getline&lt;/code&gt; and as you saw, sometimes it's easier to just use &lt;code&gt;cin&lt;/code&gt; with a few operators &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; if the number of inputs are know. However, if we need to the user to write an unknown number of inputs, we need to write more code and use constructs like stringstream and vector to be able to handle it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;That was it for this article. Input and output using iostream and iomanip can take you far and with stringstream and vector you can go even further and create programs that are flexible too.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Creating a platform like Forem With PHP</title>
      <author>Posandu </author>
      <pubDate>Fri, 05 Nov 2021 15:03:28 +0000</pubDate>
      <link>https://dev.to/posandu/creating-a-platform-like-forem-with-php-30fm</link>
      <guid>https://dev.to/posandu/creating-a-platform-like-forem-with-php-30fm</guid>
      <description>&lt;p&gt;Hello all! I'm here to notify you about a platform like Forem created with PHP. it's not ready yet, but I need help developing it. You can contribute to the code that is hosted on &lt;a href="https://github.com/Posandu/blogg"&gt;Github&lt;/a&gt;. &lt;br&gt;
Some of it's features will be,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Articles&lt;/li&gt;
&lt;li&gt;Custom Pages&lt;/li&gt;
&lt;li&gt;Notifications&lt;/li&gt;
&lt;li&gt;Pages&lt;/li&gt;
&lt;li&gt;Reactions
As I said, it's not done yet. Here are some screenshots if you would like to see.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMCVvTMj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/140531400-8c611914-6126-4b79-8ee9-1bec5dcfcbf9.png" alt="" width="880" height="606"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--38eTNdFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/140531449-a051dcde-69f9-4ad9-9b84-0e27d4c5cc82.png" alt="" width="880" height="523"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qEmGjRtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/140531614-8091d338-fb28-42eb-bc62-ca5e9d3f349a.png" alt="" width="880" height="598"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;** &lt;em&gt;Changes may happen *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And BTW this post was also written in the platform I create.&lt;/p&gt;

</description>
      <category>meta</category>
      <category>php</category>
      <category>discuss</category>
      <category>news</category>
    </item>
    <item>
      <title>How to use git cherry-pick</title>
      <author>Lucia Cerchie</author>
      <pubDate>Fri, 05 Nov 2021 14:56:37 +0000</pubDate>
      <link>https://dev.to/cerchie/how-to-use-git-cherry-pick-1906</link>
      <guid>https://dev.to/cerchie/how-to-use-git-cherry-pick-1906</guid>
      <description>&lt;p&gt;&lt;em&gt;This is a blog post explaining how to use my &lt;code&gt;git cherry-pick&lt;/code&gt; tutorial. It has a bit more info on &lt;code&gt;git cherry-pick&lt;/code&gt; than the README in my project, but you can jump ahead and just use the &lt;a href="https://github.com/Cerchie/git-cherry-pick-tutorial/edit/main/README.md"&gt;tutorial&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-what-is-raw-git-cherrypick-endraw-"&gt;
  &lt;/a&gt;
  First, what is &lt;code&gt;git cherry-pick&lt;/code&gt; ?
&lt;/h2&gt;

&lt;p&gt;The description from the &lt;a href="https://git-scm.com/docs/git-cherry-pick"&gt;documentation&lt;/a&gt; says:&lt;/p&gt;

&lt;p&gt;"Given one or more existing commits, apply the change each one introduces, recording a new commit for each."&lt;/p&gt;

&lt;p&gt;Well, what does that mean? I think of it as basically re-writing over your old commits, but learning-by-doing is best!&lt;/p&gt;

&lt;p&gt;Let's get started:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tutorial"&gt;
  &lt;/a&gt;
  Tutorial
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git clone https://github.com/Cerchie/git-cherry-pick-tutorial&lt;/code&gt; this repo. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;on line 5 in &lt;code&gt;cherry-pick.txt&lt;/code&gt;, add "This sentence represents the last commit in the tutorial." and &lt;code&gt;git add .&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;run &lt;code&gt;git log&lt;/code&gt; to find the number for the 'wrong' commit:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;commit 01ec7674c359004493950a17fbe0a42d6b08c2de
Author: Lucia Cerchie &amp;lt;lucia@stepzen.com&amp;gt;
Date:   Thu Jul 29 13:29:03 2021 -0700

    cherry-pick me
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;git cherry-pick 01ec7674c359004493950a17fbe0a42d6b08c2de -x&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;You may need to resolve some conflicts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional"&gt;
  &lt;/a&gt;
  Optional:
&lt;/h3&gt;

&lt;p&gt;Learn how to cherry-pick multiple commits!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Remove your addition to line 5, save, and &lt;code&gt;git add .&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make an addition, like "This sentence represents a middle commit", save, and &lt;code&gt;git add .&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make another addition, like "This sentence represents the latest commit", save, and &lt;code&gt;git add .&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;run &lt;code&gt;git log&lt;/code&gt; to find the number for the first commit, and the latest commit. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, if you want to include the first commit you made (the removal of your addition to line 5) run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git cherry-pick commit_number_first_commit^..commit_number_of_last_commit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you &lt;em&gt;don't&lt;/em&gt; want to include it, run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git cherry-pick commit_number_first_commit..commit_number_of_last_commit&lt;/code&gt;, without the carat. &lt;/p&gt;

&lt;p&gt;source: &lt;a href="https://stackoverflow.com/questions/1670970/how-to-cherry-pick-multiple-commits"&gt;https://stackoverflow.com/questions/1670970/how-to-cherry-pick-multiple-commits&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this tutorial was helpful! If you ran into trouble or if I provide more accurate or clear information, let me know in the comments!&lt;/p&gt;

</description>
      <category>git</category>
      <category>productivity</category>
      <category>discuss</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>🚀10 Trending projects on GitHub for web developers - 5th November 2021</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 05 Nov 2021 14:54:30 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-5th-november-2021-1aki</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-5th-november-2021-1aki</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-unocss"&gt;
  &lt;/a&gt;
  1. UnoCSS
&lt;/h3&gt;

&lt;p&gt;The instant on-demand atomic CSS engine.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/antfu"&gt;
        antfu
      &lt;/a&gt; / &lt;a href="https://github.com/antfu/unocss"&gt;
        unocss
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The instant on-demand atomic CSS engine.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
UnoCSS&lt;/h1&gt;
&lt;p&gt;The instant on-demand Atomic CSS engine.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/unocss" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/eb4fbfb77a0d1a25d9628a56b4a48c1b5aab597f19a214e66e833f34dc0cbcf7/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f756e6f6373733f636f6c6f723d613162383538266c6162656c3d" alt="NPM version"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 I highly recommend reading this blog post - &lt;a href="https://antfu.me/posts/reimagine-atomic-css" rel="nofollow"&gt;&lt;strong&gt;Reimagine Atomic CSS&lt;/strong&gt;&lt;/a&gt; for the story behind this tool.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6&gt;
Try it!&lt;/h6&gt;
&lt;p&gt;&lt;a href="https://unocss.antfu.me/" rel="nofollow"&gt;🤹‍♂️ Online Playground&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;p&gt;Inspired by &lt;a href="http://windicss.org/" rel="nofollow"&gt;Windi CSS&lt;/a&gt;, &lt;a href="https://tailwindcss.com/" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt;, &lt;a href="https://github.com/tw-in-js/twind"&gt;Twind&lt;/a&gt; but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/antfu/unocss#configurations"&gt;Fully customizable&lt;/a&gt; - no core utilities, all functionalities are provided via presets.&lt;/li&gt;
&lt;li&gt;No parsing, no AST, no scanning, it's &lt;strong&gt;INSTANT&lt;/strong&gt; (200x faster than Windi CSS or Tailwind JIT)&lt;/li&gt;
&lt;li&gt;&amp;lt;3kb min+gzip - zero deps and browser friendly.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/antfu/unocss#shortcuts"&gt;Shortcuts&lt;/a&gt; - aliasing utilities, dynamically.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/antfu/unocss/tree/main/packages/preset-attributify/"&gt;Attributify Mode&lt;/a&gt; - group utilities in attributes&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/antfu/unocss/tree/main/packages/preset-icons/"&gt;Pure CSS Icons&lt;/a&gt; - use any icon as a single class.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/antfu/unocss#css-scoping"&gt;CSS Scoping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code-splitting for CSS - ships minimal CSS for MPA.&lt;/li&gt;
&lt;li&gt;Library friendly - ships atomic styles with your component libraries and safely scoped.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
Benchmark&lt;/h6&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;
&lt;pre&gt;&lt;code&gt;11/5/2021, 4:26:57 AM
1656 utilities | x50 runs (min build time)
none                              8.30 ms / delta.      0.00 ms
unocss       v0.4.15             13.58 ms / delta.      5.28&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/antfu/unocss"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#2-notifire"&gt;
  &lt;/a&gt;
  2. Notifire
&lt;/h3&gt;

&lt;p&gt;The ultimate library for managing multi-channel notifications with a single API.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/notifirehq"&gt;
        notifirehq
      &lt;/a&gt; / &lt;a href="https://github.com/notifirehq/notifire"&gt;
        notifire
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🚀 Open-source notification infrastructure for products
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a href="https://discord.gg/9wcGSf22PM" rel="nofollow"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kpsH-F2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/8877285/139603641-66966234-84f4-42aa-9c31-9d296fab7ba1.png"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Read &lt;a href="https://github.com/notifirehq/notifire/discussions/70"&gt;here&lt;/a&gt; our plans for the upcoming weeks.&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://notifire.co" rel="nofollow"&gt;
    &lt;img width="200" src="https://camo.githubusercontent.com/3ca722f7a9be6a1c65edd8297eaf978e70917c3a9344f182adcbe19a7df78474/68747470733a2f2f75706c6f6164732d73736c2e776562666c6f772e636f6d2f3631333062346432396262306162303965313461653965652f3631333065363933316637353564663330323230336663635f536964654c6f676f2532302d253230424c61636b2d702d3830302e706e67"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;
Notification management simplified.&lt;/h1&gt;
&lt;div&gt;
The ultimate library for managing multi-channel notifications with a single API
&lt;/div&gt;
  &lt;p&gt;
    &lt;br&gt;
    &lt;a href="https://docs.notifire.co" rel="nofollow"&gt;&lt;strong&gt;Explore the docs »&lt;/strong&gt;&lt;/a&gt;
    &lt;br&gt;
  &lt;br&gt;
    &lt;a href="https://github.com/notifirehq/notifire/issues"&gt;Report Bug&lt;/a&gt;
    ·
    &lt;a href="https://github.com/notifirehq/notifire/discussions"&gt;Request Feature&lt;/a&gt;
    ·
    &lt;a href="https://blog.notifire.co/" rel="nofollow"&gt;Read our blog&lt;/a&gt;
  &lt;/p&gt;
&lt;h2&gt;
⭐️ Why&lt;/h2&gt;
&lt;p&gt;Building a notification system is hard, at first it seems like just sending an email but in reality it's just the beginning. In today's world users expect multi channel communication experience over email, sms, push, direct and more... An ever growing list of providers are popping up each day, and notifications are spread around the code. Notifire's goal is to simplify notifications and provide developers the tools to create meaningful communication between the system and it's users.&lt;/p&gt;
&lt;h2&gt;
✨ Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
🌈 Single API for all messaging providers (Email, SMS, Push, Direct)&lt;/li&gt;
&lt;li&gt;
💅 Easily manage notification over multiple channels&lt;/li&gt;
&lt;li&gt;
🚀 Equipped with a templating engine for advanced layouts and designs&lt;/li&gt;
&lt;li&gt;
🛡 Built-in protection for missing…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/notifirehq/notifire"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-react-notion-x"&gt;
  &lt;/a&gt;
  3. React Notion X
&lt;/h3&gt;

&lt;p&gt;Fast and accurate React renderer for Notion. TypeScript batteries included.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/NotionX"&gt;
        NotionX
      &lt;/a&gt; / &lt;a href="https://github.com/NotionX/react-notion-x"&gt;
        react-notion-x
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Fast and accurate React renderer for Notion. TS batteries included. ⚡️
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/NotionX/react-notion-x/master/media/notion-ts.png"&gt;&lt;img alt="React Notion X" src="https://res.cloudinary.com/practicaldev/image/fetch/s--s1QzaHxy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/NotionX/react-notion-x/master/media/notion-ts.png" width="689"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h1&gt;
React Notion X&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Fast and accurate React renderer for Notion. TS batteries included. ⚡️&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/notion-client" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c472cebb09daf04587bcd5241ab41641eee7c76d219dc926937b6fd477bc122d/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6e6f74696f6e2d636c69656e742e737667" alt="NPM"&gt;&lt;/a&gt; &lt;a href="https://travis-ci.com/NotionX/react-notion-x" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7c7a606efc642965df48fd2a10dfeff914ee6e6a01c1c80a17dc6022f39c430c/68747470733a2f2f7472617669732d63692e636f6d2f4e6f74696f6e582f72656163742d6e6f74696f6e2d782e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt; &lt;a href="https://prettier.io" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ead313e18d0b714b50839b1e910575a53dd05d564c45d12b046739c42806ea07/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64655f7374796c652d70726574746965722d627269676874677265656e2e737667" alt="Prettier Code Formatting"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Advice&lt;/h2&gt;
&lt;p&gt;If you just want to publish a website using Notion, then we highly recommend using &lt;a href="https://s.super.so/x" rel="nofollow"&gt;Super.so&lt;/a&gt; — a hosted solution with great perf that takes care of all the details for you.&lt;/p&gt;
&lt;p&gt;If you want want more control over your website via React, we recommend using this amazing &lt;a href="https://github.com/transitive-bullshit/nextjs-notion-starter-kit"&gt;Next.js template&lt;/a&gt;, which is free and uses &lt;code&gt;react-notion-x&lt;/code&gt; under the hood.&lt;/p&gt;
&lt;p&gt;And if you want even more control, then you're in the right place! 👇👇&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
🚀 &lt;strong&gt;Simple&lt;/strong&gt; - TypeScript + React.&lt;/li&gt;
&lt;li&gt;
⚡ &lt;strong&gt;Fast&lt;/strong&gt; - 10-100x faster than Notion
&lt;ul&gt;
&lt;li&gt;95-100% Lighthouse scores.&lt;/li&gt;
&lt;li&gt;Heavier components like PDFs and collection views can be loaded lazily via &lt;code&gt;next/dynamic&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
💯 &lt;strong&gt;Tests&lt;/strong&gt; - Comes with a comprehensive &lt;a href="https://www.notion.so/Notion-Test-Suite-067dd719a912471ea9a3ac10710e7fdf" rel="nofollow"&gt;test suite&lt;/a&gt; covering most of Notion's functionality.&lt;/li&gt;
&lt;li&gt;
🔥 &lt;strong&gt;Solid&lt;/strong&gt; - Used in production by &lt;a href="https://www.potion.so" rel="nofollow"&gt;Potion&lt;/a&gt; and thousands of websites.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;First you'll…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/NotionX/react-notion-x"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-oh-my-posh"&gt;
  &lt;/a&gt;
  4. Oh My Posh
&lt;/h3&gt;

&lt;p&gt;A prompt theme engine for any shell.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/JanDeDobbeleer"&gt;
        JanDeDobbeleer
      &lt;/a&gt; / &lt;a href="https://github.com/JanDeDobbeleer/oh-my-posh"&gt;
        oh-my-posh
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A prompt theme engine for any shell.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
A prompt theme engine for any shell&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9624db1cf097dbb73e7f485bd72cc9ec07e991d2060dd65cd59eb3a33ba4cb9b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f6a616e6465646f6262656c6565722f6f682d6d792d706f73682f52656c656173653f6c6162656c3d4275696c64"&gt;&lt;img src="https://camo.githubusercontent.com/9624db1cf097dbb73e7f485bd72cc9ec07e991d2060dd65cd59eb3a33ba4cb9b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f6a616e6465646f6262656c6565722f6f682d6d792d706f73682f52656c656173653f6c6162656c3d4275696c64" alt="Release Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest"&gt;&lt;img src="https://camo.githubusercontent.com/9e8516878551aceb6f79acd1966c75206f3303e1d4362219e6c370e71dd6639b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f6a616e6465646f6262656c6565722f6f682d6d792d706f73683f6c6162656c3d52656c65617365" alt="Release"&gt;&lt;/a&gt;
&lt;a href="https://ohmyposh.dev/docs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e5cdea8402295dc44944f618522ba13c9351ea5470dd4d3ef5663b3efc7985d2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446f63732d6f686d79706f73682e6465762d626c7565" alt="Documentation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.powershellgallery.com/packages/oh-my-posh/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/908d7c7cc54cdaad998af91904ea05bfed2e92a4027112636724d1866422ce8b/68747470733a2f2f696d672e736869656c64732e696f2f706f7765727368656c6c67616c6c6572792f64742f6f682d6d792d706f73683f636f6c6f723d70696e6b266c6162656c3d506f7765725368656c6c253230446f776e6c6f616473" alt="PS Gallery"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/23f43438b3eca1ce0b0cce673c2f1c7518d58675f3e6cf9ce0dd2e766b84236d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f646f776e6c6f6164732f6a616e6465646f6262656c6565722f6f682d6d792d706f73682f746f74616c3f636f6c6f723d70696e6b266c6162656c3d476974487562253230446f776e6c6f616473"&gt;&lt;img src="https://camo.githubusercontent.com/23f43438b3eca1ce0b0cce673c2f1c7518d58675f3e6cf9ce0dd2e766b84236d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f646f776e6c6f6164732f6a616e6465646f6262656c6565722f6f682d6d792d706f73682f746f74616c3f636f6c6f723d70696e6b266c6162656c3d476974487562253230446f776e6c6f616473" alt="GitHub Downloads"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What started as the offspring of &lt;a href="https://github.com/JanDeDobbeleer/oh-my-posh2"&gt;oh-my-posh2&lt;/a&gt; for PowerShell resulted in a cross platform
highly customizable and extensible prompt theme engine. After 4 years of working on oh-my-posh
a modern and more efficient tool was needed to suit my personal needs.&lt;/p&gt;
&lt;h2&gt;
❤ Support ❤
&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.patreon.com/jandedobbeleer" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/75155ad404ca28c31b9196e1139e62c0495ee3019330db851d01870d96fe9a9c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f537570706f72742d4265636f6d652532306125323050617472656f6e212d7265642e737667" alt="Patreon"&gt;&lt;/a&gt;
&lt;a href="https://liberapay.com/jandedobbeleer" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e838c696854773e1a25b48dab178cf6315240b9e71304a94c5d797492bfd590b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c69626572617061792d446f6e6174652d2532336636633931352e737667" alt="Liberapay"&gt;&lt;/a&gt;
&lt;a href="https://ko-fi.com/jandedobbeleer" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2ec7aa0742d0914ebba8681a3bef96a9c0f0cc833d5f56b9bdc6c63b0dd6295b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4b6f2d2d66692d4275792532306d6525323061253230636f66666565212d2532333436623739382e737667" alt="Ko-Fi"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Shell independent&lt;/li&gt;
&lt;li&gt;Git status indications&lt;/li&gt;
&lt;li&gt;Failed command indication&lt;/li&gt;
&lt;li&gt;Admin indication&lt;/li&gt;
&lt;li&gt;Current session indications&lt;/li&gt;
&lt;li&gt;Language info&lt;/li&gt;
&lt;li&gt;Shell info&lt;/li&gt;
&lt;li&gt;Configurable&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://ohmyposh.dev/docs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e5cdea8402295dc44944f618522ba13c9351ea5470dd4d3ef5663b3efc7985d2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446f63732d6f686d79706f73682e6465762d626c7565" alt="Documentation"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Roadmap&lt;/h2&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 CI&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Github Releases&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Create documentation for manual installation&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Create documentation on the different segments&lt;/li&gt;
&lt;li&gt;Create easy installation packages
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Powershell&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Brew&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Scoop&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Winget&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Swap V2 with V3&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Thanks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/chrisbenti/PS-Config"&gt;Chris Benti&lt;/a&gt; for providing the first influence to start oh-my-posh&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dahlbyk/posh-git"&gt;Keith Dahlby&lt;/a&gt; for creating posh-git and making life more enjoyable&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;Robby Russel&lt;/a&gt; for creating oh-my-zsh, without him this would probably not be here&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/justjanne"&gt;Janne Mareike Koschinski&lt;/a&gt; for providing information on how to get certain information
using Go (and the amazing &lt;a href="https://github.com/justjanne/powerline-go"&gt;README&lt;/a&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/JanDeDobbeleer/oh-my-posh"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-under-the-hood-react"&gt;
  &lt;/a&gt;
  5. Under the hood: React
&lt;/h3&gt;

&lt;p&gt;Entire React code base explanation by visual block schemes. Each scheme is clickable and can be opened in a new tab, use that to zoom it and be able to read from it&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Bogdan-Lyashenko"&gt;
        Bogdan-Lyashenko
      &lt;/a&gt; / &lt;a href="https://github.com/Bogdan-Lyashenko/Under-the-hood-ReactJS"&gt;
        Under-the-hood-ReactJS
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Entire React code base explanation by visual block schemes (Stack version) 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Under the hood: React&lt;/h1&gt;
&lt;p&gt;&lt;em&gt; This repository contains an explanation of inner work of React. In fact, I was debugging through the entire code base and put all the logic on visual block-schemes, analyzed them, summarized and explained main concepts and approaches. I've already finished with Stack version and now I work with the next, Fiber version.  &lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
I wanted to automate process of "learning and documenting" a complex codebase as much as possible, so I started &lt;a href="https://codecrumbs.io/" rel="nofollow"&gt;Codecrumbs project&lt;/a&gt;. It will help to build projects like "Under the hood ReactJs" in a shorter time and in a simpler way!&lt;/h3&gt;
&lt;p&gt;Each scheme is clickable and can be opened in a new tab, use that to zoom it and be able to read from it. Keep the article and a scheme you are reading about at that moment in separate windows (tabs), that will help to match text and code flow easier.&lt;/p&gt;
&lt;p&gt;We…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Bogdan-Lyashenko/Under-the-hood-ReactJS"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-awesome-actions"&gt;
  &lt;/a&gt;
  6. Awesome Actions
&lt;/h3&gt;

&lt;p&gt;A curated list of awesome actions to use on GitHub&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/sdras"&gt;
        sdras
      &lt;/a&gt; / &lt;a href="https://github.com/sdras/awesome-actions"&gt;
        awesome-actions
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A curated list of awesome actions to use on GitHub
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;br&gt;
    &lt;a rel="noopener noreferrer" href="https://github.com/sdras/awesome-actionsawesome-actions.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--roYv4mSj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/sdras/awesome-actionsawesome-actions.png" width="150"&gt;&lt;/a&gt;
  &lt;br&gt;
&lt;/p&gt;
&lt;h1&gt;
Awesome Actions &lt;a href="https://github.com/sindresorhus/awesome"&gt;&lt;img src="https://camo.githubusercontent.com/abb97269de2982c379cbc128bba93ba724d8822bfbe082737772bd4feb59cb54/68747470733a2f2f63646e2e7261776769742e636f6d2f73696e647265736f726875732f617765736f6d652f643733303566333864323966656437386661383536353265336136336531353464643865383832392f6d656469612f62616467652e737667" alt="Awesome"&gt;&lt;/a&gt; &lt;a href="https://github.com/sdras/awesome-actions/actions?workflow=Lint+Awesome+List"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ubjiaxx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/sdras/awesome-actions/workflows/Lint%2520Awesome%2520List/badge.svg" alt="GitHub Actions status | sdras/awesome-actions"&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;A curated list of awesome things related to GitHub Actions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Actions are triggered by GitHub platform events directly in a repo and run on-demand workflows either on Linux, Windows or macOS virtual machines or inside a container in response. With GitHub Actions you can automate your workflow from idea to production.&lt;/p&gt;

&lt;h2&gt;
Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/sdras/awesome-actions#official-resources"&gt;Official Resources&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#workflow-examples"&gt;Workflow Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#official-actions"&gt;Official Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#create-your-actions"&gt;Create your Actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sdras/awesome-actions#community-resources"&gt;Community Resources&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#github-tools-and-management"&gt;GitHub Tools and Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#collection-of-actions"&gt;Collection of Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#utility"&gt;Utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#static-analysis"&gt;Static Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#dynamic-analysis"&gt;Dynamic Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#monitoring"&gt;Monitoring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#pull-requests"&gt;Pull Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#github-pages"&gt;GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#notifications-and-messages"&gt;Notifications and Messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#deployment"&gt;Deployment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#external-services"&gt;External Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#frontend-tools"&gt;Frontend Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#machine-learning-ops"&gt;Machine Learning Ops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#build"&gt;Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#database"&gt;Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#localization"&gt;Localization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#cheat-sheet"&gt;Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdras/awesome-actions#tutorials"&gt;Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Official Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/features/actions"&gt;Official Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/en/actions"&gt;Official Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/actions"&gt;Official Actions organization&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/actions/virtual-environments"&gt;actions/virtual-environments&lt;/a&gt; - GitHub Actions virtual environments.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/actions/runner"&gt;actions/runner&lt;/a&gt; - The Runner for GitHub Actions.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.blog/2018-10-17-action-demos/" rel="nofollow"&gt;GitHub Blog Announcement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
Workflow Examples&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/actions/starter-workflows"&gt;actions/starter-workflows&lt;/a&gt; - Starter workflow management.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/actions/example-services"&gt;actions/example-services&lt;/a&gt; - Example workflows using service containers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Official Actions&lt;/h3&gt;
&lt;h4&gt;
Workflow Tool Actions&lt;/h4&gt;
&lt;p&gt;Tool actions for your workflow.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/actions/checkout"&gt;actions/checkout&lt;/a&gt; -…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/sdras/awesome-actions"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-data-science-for-beginners-a-curriculum"&gt;
  &lt;/a&gt;
  7. Data Science for Beginners - A Curriculum
&lt;/h3&gt;

&lt;p&gt;Azure Cloud Advocates at Microsoft are pleased to offer a 10-week, 20-lesson curriculum all about Data Science. Each lesson includes pre-lesson and post-lesson quizzes, written instructions to complete the lesson, a solution, and an assignment&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/microsoft"&gt;
        microsoft
      &lt;/a&gt; / &lt;a href="https://github.com/microsoft/Data-Science-For-Beginners"&gt;
        Data-Science-For-Beginners
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      10 Weeks, 20 Lessons, Data Science for All!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Data Science for Beginners - A Curriculum&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/Data-Science-For-Beginners/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/ec923b89171e0b3edf95b19f394d5c4c6f5c711f62e8ea2b3a541efc702c8d8a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6963726f736f66742f446174612d536369656e63652d466f722d426567696e6e6572732e737667" alt="GitHub license"&gt;&lt;/a&gt;
&lt;a href="https://GitHub.com/microsoft/Data-Science-For-Beginners/graphs/contributors/"&gt;&lt;img src="https://camo.githubusercontent.com/b32d7dc96708b1c66534c0fb10253d29872079b588fb669526a12cb49e987ca1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f6d6963726f736f66742f446174612d536369656e63652d466f722d426567696e6e6572732e737667" alt="GitHub contributors"&gt;&lt;/a&gt;
&lt;a href="https://GitHub.com/microsoft/Data-Science-For-Beginners/issues/"&gt;&lt;img src="https://camo.githubusercontent.com/c31fcd2749b441bcec13e0b7a556450c7031201f3a5f5270513787a4cf119e74/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6d6963726f736f66742f446174612d536369656e63652d466f722d426567696e6e6572732e737667" alt="GitHub issues"&gt;&lt;/a&gt;
&lt;a href="https://GitHub.com/microsoft/Data-Science-For-Beginners/pulls/"&gt;&lt;img src="https://camo.githubusercontent.com/c9815f6532b20d37e7275c71d14af33726a395bdcdb33bc664602c6c7c7d7681/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f6d6963726f736f66742f446174612d536369656e63652d466f722d426567696e6e6572732e737667" alt="GitHub pull-requests"&gt;&lt;/a&gt;
&lt;a href="http://makeapullrequest.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0ff11ed110cfa69f703ef0dcca3cee6141c0a8ef465e8237221ae245de3deb3d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265" alt="PRs Welcome"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://GitHub.com/microsoft/Data-Science-For-Beginners/watchers/"&gt;&lt;img src="https://camo.githubusercontent.com/83e01408f1c103e93e81ea470ba23ee6bd6386690c4df359869e19985ddfd0c0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f77617463686572732f6d6963726f736f66742f446174612d536369656e63652d466f722d426567696e6e6572732e7376673f7374796c653d736f6369616c266c6162656c3d5761746368" alt="GitHub watchers"&gt;&lt;/a&gt;
&lt;a href="https://GitHub.com/microsoft/Data-Science-For-Beginners/network/"&gt;&lt;img src="https://camo.githubusercontent.com/4978516c1b43d3a03066948864b118e1f259e9f540cb623214d2fe45e3ad05f2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f6d6963726f736f66742f446174612d536369656e63652d466f722d426567696e6e6572732e7376673f7374796c653d736f6369616c266c6162656c3d466f726b" alt="GitHub forks"&gt;&lt;/a&gt;
&lt;a href="https://GitHub.com/microsoft/Data-Science-For-Beginners/stargazers/"&gt;&lt;img src="https://camo.githubusercontent.com/23ccf444f4f98ab03e16ef16e3f40038967ff2eb6fee432efa10f2d6cfe9635a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6d6963726f736f66742f446174612d536369656e63652d466f722d426567696e6e6572732e7376673f7374796c653d736f6369616c266c6162656c3d53746172" alt="GitHub stars"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Cloud Advocates at Microsoft are pleased to offer a 10-week, 20-lesson curriculum all about Data Science. Each lesson includes pre-lesson and post-lesson quizzes, written instructions to complete the lesson, a solution, and an assignment. Our project-based pedagogy allows you to learn while building, a proven way for new skills to 'stick'.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hearty thanks to our authors:&lt;/strong&gt; &lt;a href="https://www.twitter.com/paladique" rel="nofollow"&gt;Jasmine Greenaway&lt;/a&gt;, &lt;a href="http://soshnikov.com" rel="nofollow"&gt;Dmitry Soshnikov&lt;/a&gt;, &lt;a href="https://twitter.com/nitya" rel="nofollow"&gt;Nitya Narasimhan&lt;/a&gt;, &lt;a href="https://twitter.com/JalenMcG" rel="nofollow"&gt;Jalen McGee&lt;/a&gt;, &lt;a href="https://twitter.com/jenlooper" rel="nofollow"&gt;Jen Looper&lt;/a&gt;, &lt;a href="https://twitter.com/maudstweets" rel="nofollow"&gt;Maud Levy&lt;/a&gt;, &lt;a href="https://twitter.com/TiffanySouterre" rel="nofollow"&gt;Tiffany Souterre&lt;/a&gt;, &lt;a href="https://www.twitter.com/geektrainer" rel="nofollow"&gt;Christopher Harrison&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;🙏 Special thanks 🙏 to our &lt;a href="https://studentambassadors.microsoft.com/" rel="nofollow"&gt;Microsoft Student Ambassador&lt;/a&gt; authors, reviewers and content contributors,&lt;/strong&gt; notably Aaryan Arora, &lt;a href="https://github.com/AdityaGarg00"&gt;Aditya Garg&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/alondra-sanchez-molina/" rel="nofollow"&gt;Alondra Sanchez&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/ankitasingh007" rel="nofollow"&gt;Ankita Singh&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/anupam--mishra/" rel="nofollow"&gt;Anupam Mishra&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/arpitadas01/" rel="nofollow"&gt;Arpita Das&lt;/a&gt;, ChhailBihari Dubey, &lt;a href="https://www.linkedin.com/in/dibrinsofor" rel="nofollow"&gt;Dibri Nsofor&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/dishita-bhasin-7065281bb" rel="nofollow"&gt;Dishita Bhasin&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/majd-s/" rel="nofollow"&gt;Majd Safi&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/max-blum-6036a1186/" rel="nofollow"&gt;Max Blum&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/miguelmque/" rel="nofollow"&gt;Miguel Correa&lt;/a&gt;, &lt;a href="https://twitter.com/iftu119" rel="nofollow"&gt;Mohamma Iftekher (Iftu) Ebne Jalal&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/nawrin-tabassum" rel="nofollow"&gt;Nawrin Tabassum&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/raymond-wp/" rel="nofollow"&gt;Raymond Wangsa Putra&lt;/a&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/microsoft/Data-Science-For-Beginners"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#8-perflink"&gt;
  &lt;/a&gt;
  8. Perflink
&lt;/h3&gt;

&lt;p&gt;Low friction JavaScript benchmarks that you can share via URL&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/lukejacksonn"&gt;
        lukejacksonn
      &lt;/a&gt; / &lt;a href="https://github.com/lukejacksonn/perflink"&gt;
        perflink
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Low friction JavaScript benchmarks that you can share via URL
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Perflink&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;JavaScript performance benchmarks you can share via URL&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The motivation here was to create a single page app like &lt;a href="https://jsperf.com" rel="nofollow"&gt;jsperf&lt;/a&gt; – which is commonly used to compare performance characteristics of different Javascript code snippets – but with improved usability and portability of results. It is a frontend only static web app with no build step and is hosted on Github pages.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1457604/78142792-49dc2e80-7425-11ea-95a5-2003b2b027f1.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EBzm4e0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/1457604/78142792-49dc2e80-7425-11ea-95a5-2003b2b027f1.gif" alt="perflink"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
🧪 Benchmarks run in isolated web workers&lt;/li&gt;
&lt;li&gt;
🌍 Supports imports with worker type module&lt;/li&gt;
&lt;li&gt;
🗂 Saves test suites to local storage&lt;/li&gt;
&lt;li&gt;
🎨 Syntax highlighted textarea inputs&lt;/li&gt;
&lt;li&gt;
🔗 Serializable state encoded into shareable URLs&lt;/li&gt;
&lt;li&gt;
⏱ Adaptive timing for more accurate results&lt;/li&gt;
&lt;li&gt;
🗜 Super light weight – almost no dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;To use the web interface simply visit &lt;a href="https://perf.link" rel="nofollow"&gt;https://perf.link&lt;/a&gt; and write out some test cases. When you are ready hit "Run Test". The code will be evaluated and benchmarked – against all other test cases – the results of…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/lukejacksonn/perflink"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#9-nextthemes"&gt;
  &lt;/a&gt;
  9. next-themes
&lt;/h3&gt;

&lt;p&gt;Perfect Next.js dark mode in 2 lines of code. Support System preference and any other theme with no flashing&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pacocoursey"&gt;
        pacocoursey
      &lt;/a&gt; / &lt;a href="https://github.com/pacocoursey/next-themes"&gt;
        next-themes
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Perfect Next.js dark mode in 2 lines of code. Support System preference and any other theme with no flashing
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
next-themes &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/992524f4cad01cb42f2afb1d8a5794c3646502c7f111f35e9619116f0c71ad72/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e7a69702f6e6578742d7468656d6573"&gt;&lt;img src="https://camo.githubusercontent.com/992524f4cad01cb42f2afb1d8a5794c3646502c7f111f35e9619116f0c71ad72/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e7a69702f6e6578742d7468656d6573" alt="next-themes minzip package size"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/424a53503bb443f2ded037e3992f22c929b033e4cacc93815fe6d23f02862e27/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6e6578742d7468656d65732e7376673f636f6c6f72423d677265656e"&gt;&lt;img src="https://camo.githubusercontent.com/424a53503bb443f2ded037e3992f22c929b033e4cacc93815fe6d23f02862e27/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6e6578742d7468656d65732e7376673f636f6c6f72423d677265656e" alt="Version"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;An abstraction for themes in your Next.js app.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
✅ Perfect dark mode in 2 lines of code&lt;/li&gt;
&lt;li&gt;
✅ System setting with prefers-color-scheme&lt;/li&gt;
&lt;li&gt;
✅ Themed browser UI with color-scheme&lt;/li&gt;
&lt;li&gt;
✅ No flash on load (both SSR and SSG)&lt;/li&gt;
&lt;li&gt;
✅ Sync theme across tabs and windows&lt;/li&gt;
&lt;li&gt;
✅ Disable flashing when changing themes&lt;/li&gt;
&lt;li&gt;
✅ Force pages to specific themes&lt;/li&gt;
&lt;li&gt;
✅ Class or data attribute selector&lt;/li&gt;
&lt;li&gt;
✅ &lt;code&gt;useTheme&lt;/code&gt; hook&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out the &lt;a href="https://next-themes-example.vercel.app/" rel="nofollow"&gt;Live Example&lt;/a&gt; to try it for yourself.&lt;/p&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;$ npm install next-themes
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
$ yarn add next-themes&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Use&lt;/h2&gt;
&lt;p&gt;You'll need a &lt;a href="https://nextjs.org/docs/advanced-features/custom-app" rel="nofollow"&gt;Custom &lt;code&gt;App&lt;/code&gt;&lt;/a&gt; to use next-themes. The simplest &lt;code&gt;_app&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;// pages/_app.js&lt;/span&gt;

&lt;span class="pl-k"&gt;function&lt;/span&gt; &lt;span class="pl-v"&gt;MyApp&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt; Component&lt;span class="pl-kos"&gt;,&lt;/span&gt; pageProps &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;Component&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;...&lt;span class="pl-s1"&gt;pageProps&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;

&lt;span class="pl-k"&gt;export&lt;/span&gt; &lt;span class="pl-k"&gt;default&lt;/span&gt; &lt;span class="pl-v"&gt;MyApp&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Adding dark mode support takes 2 lines of code:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-v"&gt;ThemeProvider&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'next-themes'&lt;/span&gt;
&lt;span class="pl-k"&gt;function&lt;/span&gt; &lt;span class="pl-v"&gt;MyApp&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt; Component&lt;span class="pl-kos"&gt;,&lt;/span&gt; pageProps &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/pacocoursey/next-themes"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#10-omatsuri"&gt;
  &lt;/a&gt;
  10. Omatsuri
&lt;/h3&gt;

&lt;p&gt;Omatsuri is a progressive web application with 12 open source frontend focused tools.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/rtivital"&gt;
        rtivital
      &lt;/a&gt; / &lt;a href="https://github.com/rtivital/omatsuri"&gt;
        omatsuri
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      PWA with 12 open source frontend focused tools
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Omatsuri app&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/rtivital/omatsuri./src/assets/logo-text.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sNx9PDhR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rtivital/omatsuri./src/assets/logo-text.svg" alt="Logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Omatsuri is a progressive web application with 12 open source frontend focused tools. Omatsuri translates to «festival» from Japanese (お祭り) and here we have a small festival of applications. It was built with strong respect to your privacy – you will never see ads and it does not include analytics services (or actually any services at all). You are highly encouraged to explore source code and use it in your projects.&lt;/p&gt;
&lt;h2&gt;
Quick links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rtivital/omatsuri./CONTRIBUTING.md"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rtivital/omatsuri./CHANGELOG.md"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Key features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fast non-blocking computations with web workers&lt;/li&gt;
&lt;li&gt;No tracking, no ads, no other server connections – everything runs in browser only&lt;/li&gt;
&lt;li&gt;Full offline support&lt;/li&gt;
&lt;li&gt;Dark theme support&lt;/li&gt;
&lt;li&gt;All-in-one application for everyday tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Included Applications&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CSS Triangle Generator&lt;/li&gt;
&lt;li&gt;Color Shades Generator&lt;/li&gt;
&lt;li&gt;Gradient Generator&lt;/li&gt;
&lt;li&gt;Page Dividers Generator&lt;/li&gt;
&lt;li&gt;SVG compressor&lt;/li&gt;
&lt;li&gt;SVG to JSX converter&lt;/li&gt;
&lt;li&gt;Base64 encoder&lt;/li&gt;
&lt;li&gt;Realistic Fake Data Generator&lt;/li&gt;
&lt;li&gt;HTML/CSS Symbols Collection&lt;/li&gt;
&lt;li&gt;Lorem/Samuel/Poke Ipsum Generator&lt;/li&gt;
&lt;li&gt;CSS Cursor Properties&lt;/li&gt;
&lt;li&gt;JavaScript Events Keycodes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Local development&lt;/h2&gt;
&lt;p&gt;To…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/rtivital/omatsuri"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#stargazing"&gt;
  &lt;/a&gt;
  Stargazing 📈
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 7 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/ML-For-Beginners"&gt;Machine Learning for beginner&lt;/a&gt; +1,131 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +773 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/awesome"&gt;Awesome&lt;/a&gt; +579 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/csswizardry/ct"&gt;ct.css&lt;/a&gt; +537 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vercel/next.js"&gt;Next.js&lt;/a&gt; +504 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 7 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/aralroca/fragstore"&gt;Fragstore&lt;/a&gt; +152%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/csswizardry/ct"&gt;ct.css&lt;/a&gt; +74%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/CharlesStover/use-mui"&gt;use-mui&lt;/a&gt; +42%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/keiya01/react-performance-testing"&gt;React Peformance Testing&lt;/a&gt; +24%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vizzuhq/vizzu-lib"&gt;Vizzu&lt;/a&gt; +22%&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 30 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/louislam/uptime-kuma"&gt;Uptime Kuma&lt;/a&gt; +4,925 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt; +4,206 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +4,070 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/awesome"&gt;Awesome&lt;/a&gt; +2,994 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +2,596 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 30 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/KilledByAPixel/LittleJS"&gt;LittleJS&lt;/a&gt; +160%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/csswizardry/ct"&gt;ct&lt;/a&gt; +157%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ebs-integrator/ebs-design"&gt;EBS Design&lt;/a&gt; +152%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/louislam/uptime-kuma"&gt;Uptime Kuma&lt;/a&gt; +121%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NitzanHen/agrippa"&gt;Agrippa&lt;/a&gt; +113%&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For all for the latest rankings please checkout &lt;a href="https://stargazing.dev"&gt;Stargazing.dev&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/stargazing_dev"&gt;follow me&lt;/a&gt; on Twitter where I regularly post about HTML, CSS and JavaScript.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>How to make a basic login form and registration form using HTML and CSS?</title>
      <author>keshavs759</author>
      <pubDate>Fri, 05 Nov 2021 14:36:04 +0000</pubDate>
      <link>https://dev.to/keshavs759/how-to-make-a-basic-login-form-and-registration-form-using-html-and-css-5b99</link>
      <guid>https://dev.to/keshavs759/how-to-make-a-basic-login-form-and-registration-form-using-html-and-css-5b99</guid>
      <description>&lt;br&gt;
&lt;br&gt;


&lt;p&gt;A login page is a web page or website entry page that requires user identification and authentication, which is often accomplished by providing a username and password combination. Logins might give you access to the full site or just a section of it. Logging in allows the website to track the user's activity and habits in addition to providing site access.&lt;/p&gt;

&lt;p&gt;Following is the code for a simple login form/login page and a registration form/page in HTML with CSS code. It is a basic login page + Registration page written completely using HTML. You can use this login form and registration form on your website without any restrictions.&lt;/p&gt;

&lt;p&gt;I recommend you to watch this video along with the code, it will help you to understand the code better,&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xDv96OAsCK4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also Read:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vidyasheela.com/post/how-to-make-resonsive-404-page-not-found-in-html-and-css"&gt;How to make a Responsive 404 pages not found in HTML and CSS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vidyasheela.com/post/how-to-make-a-responsive-contact-us-page-template-using-html-and-css"&gt;How to make a responsive contact us page template using HTML and CSS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vidyasheela.com/post/free-best-login-page-templates-written-in-html-css-and-js-"&gt;Free Best Login Page Templates (Written in HTML, CSS, and JS)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Code for a Login form:&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/_vidyasheela/embed/bGRQYao?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;Code for a Registration form:&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/_vidyasheela/embed/xxrQPge?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Download the source code: &lt;a href="https://vidyasheela.com/component/free-login-form-and-registration-form-template-html"&gt; Download Link&lt;/a&gt;&lt;/strong&gt;

&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;You can download several website templates, webpages and widgets for free from here:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vidyasheela.com/website-components.php"&gt;https://vidyasheela.com/website-components.php&lt;/a&gt;&lt;/p&gt;



</description>
      <category>html</category>
      <category>javascript</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>sifting thru the types</title>
      <author>Matthew</author>
      <pubDate>Fri, 05 Nov 2021 14:33:21 +0000</pubDate>
      <link>https://dev.to/mtfoley/sifting-thru-the-types-5e2p</link>
      <guid>https://dev.to/mtfoley/sifting-thru-the-types-5e2p</guid>
      <description>&lt;p&gt;Flow state is a rare treat for me these days. The last time I can remember being in that zone was working on a &lt;a href="https://github.com/graphql/graphiql"&gt;GraphiQL&lt;/a&gt; implementation for Open Sauced, &lt;a href="https://explore.opensauced.pizza"&gt;https://explore.opensauced.pizza&lt;/a&gt;. The Open Sauced project makes use of &lt;a href="https://onegraph.com"&gt;OneGraph&lt;/a&gt;, to handle authentication and persisted query features in working with the &lt;a href="https://docs.github.com/en/graphql"&gt;GitHub GraphQL API&lt;/a&gt;. This was the first I had worked on any kind of GraphiQL implementation, so for those of you at the point I was at then, GraphiQL is an Open Source project that can be used to interact with a GraphQL API in an ad-hoc and dynamic way, allowing a developer to iterate quickly on features from a data retrieval standpoint. This post is about the &lt;a href="https://github.com/open-sauced/explore.opensauced.pizza/pull/2"&gt;PR #2&lt;/a&gt; in the repo.&lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/0vortex"&gt;@0vortex&lt;/a&gt;
 had laid a lot of the groundwork for this implementation and as he brought myself and &lt;a class="mentioned-user" href="https://dev.to/bdougieyo"&gt;@bdougieyo&lt;/a&gt;
 up to speed on the where things were at, the problem to solve was having too much stuff to interact with.  OneGraph brings a lot of value to the table in working with GraphQL, and this is evident in the number and breadth of APIs that it works with. For some reference, take a look at this image (or play with their GraphiQL tool). &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--73HJaY3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qutuu4v0j37sf7asndp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--73HJaY3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qutuu4v0j37sf7asndp.png" alt="OneGraph GraphiQL Screenshot" width="444" height="539"&gt;&lt;/a&gt;&lt;br&gt;
The vision for &lt;a href="https://explore.opensauced.pizza"&gt;https://explore.opensauced.pizza&lt;/a&gt; was to have a rapid prototyping tool &lt;em&gt;specific to Open Sauced&lt;/em&gt;, and that's why having all these other services in the explorer tool is too much. We also wanted to let users quickly reproduce the queries we use in Open Sauced so that when a feature calls for an adjustment - this way, when its time to iterate on an existing feature, there's very little friction to finding that starting point. For reference, here's what the Explorer portion on our implementation looks like.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tLy3SbIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2y50grwgdnhzdn5cegl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tLy3SbIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2y50grwgdnhzdn5cegl.png" alt="explore.opensauced.pizza screenshot" width="444" height="212"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before I forget to explain this part, the flow state came from the fun challenge of chopping up OneGraph's GraphQL schema, on the client side. I searched around, and I really couldn't find any practical examples of this.  So now I got to venture into data science-y territory of manipulating a dataset iteratively :-) &lt;/p&gt;

&lt;p&gt;When you look at a GraphQL result of an introspection query (where a GraphQL endpoint describes itself), it's mainly a long flat list of "types". These types refer to each other in different ways, and the GraphiQL tool uses all of this data to build up a dynamic UI to work with valid GraphQL queries. Also, a GraphQL schema gets validated in handling all of the cross references and such. In order to get things the way we wanted it, we needed to modify the schema to only include the pieces we absolutely needed. I tried unsuccessfully to take the approach of picking the parts of the schema I wanted and followed the links outward to extrapolate the required parts. Don't remember exactly why but it DID NOT WORK. So I settled on the opposite - tear out the parts I didn't want and work with whatever was left. This explains the wicked long regex I used!&lt;/p&gt;

&lt;p&gt;Normally, the way GraphiQL React components would work with the schema would be something like this line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;buildClientSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But instead, the way the changes read:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// To modify schema, we follow this process:&lt;/span&gt;
&lt;span class="c1"&gt;// 1) Remove all the types we don't want, based on regex match&lt;/span&gt;
&lt;span class="c1"&gt;// 2) Strip out all of the dependencies that matched the same regex&lt;/span&gt;
&lt;span class="c1"&gt;// 3) Remove types of kind=OBJECT that have had their fields emptied out (to satisfy schema validation)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;types&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nodeBlackListFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stripPrefixedDeps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emptyObjectFilterFn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;__schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;filteredTypes&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;buildClientSchema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filteredData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now utility functions that make this work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blacklistRe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;adroll|airtable|apollo|asana|box|brex|bundlephobia|chargebee|clearbit|cloudflare|contentful|crunchbase|descuri|devTo|dribbble|dropbox|eggheadio|emailNode|eventil|facebookBusiness|fedex|firebase|google|googleAds|hubspot|immigrationGraph|intercom|logdna|mailchimp|meetup|mixpanel|mux|netlify|notion|npm|openCollective|orbit|productHunt|quickbooks|rss|salesforce|slack|spotify|stripe|trello|twilio|twitchTv|twitter|ups|usps|ynab|youTube|youTubeSearch|youTubeVideo|zeit|zendesk&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;typeBlackListFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;blacklistRe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;blacklistRe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ofType&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;blacklistRe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Filter function for picking things that are not blacklisted&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodeBlackListFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;blacklistRe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;blacklistRe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Strips out dependencies that are blacklisted&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stripPrefixedDeps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fields&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;typeBlackListFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;inputFields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputFields&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputFields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;typeBlackListFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputFields&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;possibleTypes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;possibleTypes&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;possibleTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;typeBlackListFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;possibleTypes&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// Removes OBJECT types that have had all of their fields stripped out.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emptyObjectFilterFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;OBJECT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There was one other feature in the same PR, that I'll talk about next week!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>graphql</category>
      <category>opensource</category>
      <category>node</category>
    </item>
    <item>
      <title>Learning how to use Static Analysis tools</title>
      <author>JLi</author>
      <pubDate>Fri, 05 Nov 2021 14:33:17 +0000</pubDate>
      <link>https://dev.to/jli/learning-how-to-use-static-analysis-tools-jie</link>
      <guid>https://dev.to/jli/learning-how-to-use-static-analysis-tools-jie</guid>
      <description>&lt;p&gt;So this week we learned about static analysis tools such as formatters and linters. I also got a little prior experience with using these analysis tools because of my Hacktoberfest PRs, two of the repositories I made PRs had these tools and also had bots on their repo that automatically checked that these tools were ran.&lt;/p&gt;

&lt;p&gt;For my LENNAH SSG, I decided to use &lt;a href="https://www.clangpowertools.com/"&gt;Clang&lt;/a&gt; for both the formatter and linter. I chose to use clang because it had both the formatter and linter in one package for C++ and it look extremely user friendly, especially their Visual Studio extension. Clang also has commands you can use in the command line to run both the formatter and linter if you don't want to use extensions. However, this took me a bit of time figuring out how to do, so I will give a quick explanation on how to set it up to simply the process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-running-clang-for-command-line"&gt;
  &lt;/a&gt;
  Installing + Running Clang for Command Line
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Download the build &lt;a href="https://llvm.org/builds/"&gt;here&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hFAXi36p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwtgyri2hqxprry0rit2.png" alt="Image description" width="588" height="146"&gt;
&lt;/li&gt;
&lt;li&gt;Then when running the installer make sure to add LLVM to the system PATH
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XZJlbVhG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/49960519/140510707-8ca0c68e-737e-400f-8109-d271897849af.png" alt="image" width="494" height="383"&gt;
&lt;/li&gt;
&lt;li&gt;Once installed, in the terminal go to the project folder and then you can use the following commands to format or find lint.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;clang-format &lt;span class="nt"&gt;-style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;file LennahSSG/&lt;span class="k"&gt;*&lt;/span&gt;.cpp LennahSSG/&lt;span class="k"&gt;*&lt;/span&gt;.h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;clang-tidy &lt;span class="nt"&gt;--config&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt; LennahSSG/&lt;span class="k"&gt;*&lt;/span&gt;.cpp LennahSSG/&lt;span class="k"&gt;*&lt;/span&gt;.h &lt;span class="nt"&gt;--extra-arg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;-std&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;c++17 &lt;span class="nt"&gt;--extra-arg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;-xc&lt;/span&gt;++ &lt;span class="nt"&gt;--&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#installing-clang-extension-for-visual-studio"&gt;
  &lt;/a&gt;
  Installing Clang Extension for Visual Studio
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open Visual Studio and go to the Extensions drop down at the top.&lt;/li&gt;
&lt;li&gt;Open Manage Extensions and search for Clang Power Tools.&lt;/li&gt;
&lt;li&gt;Then download and restart Visual Studio.&lt;/li&gt;
&lt;li&gt;You will have new buttons in the top of your bar that will allow you to format, tidy, and use other features Clang provides.
For more information you can check out their &lt;a href="https://clangpowertools.com/blog/get-started-with-clang-power-tools.html"&gt;getting started guide on their website&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#formatting-and-removing-lint-from-lennah"&gt;
  &lt;/a&gt;
  Formatting and Removing Lint from LENNAH
&lt;/h3&gt;

&lt;p&gt;When I ran the formatter and linter I found out that there were a good handful of simple changes that actually made my code nicer to read. The biggest change was the use of additional whitespace before lines. Specifically for parts where I am outputting to a file using &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; whenever I made a new line it wouldn't line up with the first line. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;    &lt;span class="n"&gt;outputFile&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But after the formatter it made the readability much better and more satisfying to look at:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;    &lt;span class="n"&gt;outputFile&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
               &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
               &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This was a small change but something I didn't really think much about because of how Visual Studio's base spacing worked. I think this is a really nice fix that improves the code greatly, even though it is just simple spacing. &lt;/p&gt;

&lt;p&gt;As for the Linter, there was only one piece of lint in my code and it was an extra boolean variable that I forgot to remove from a previous iteration of a function. That was very nice because it was just a small variable surrounded by many other variables so it would have taken me a long time to notice that, were it not for the Linter.&lt;/p&gt;

&lt;p&gt;This was a great learning experience for setting up Static Analysis tools, and it really shows how powerful they can be. I will always be using these tools, especially the extensions, from now on because they are so easy to use and they make quality of life so much better. The way I have been writing code before is like using Microsoft Word without spell/grammar check, literally making it so much harder for myself. So be sure to do yourself a solid and look into static analysis tools for your own projects if you haven't already. Until next time take care!&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>cpp</category>
    </item>
    <item>
      <title>3 things to note when you design an App</title>
      <author>Kiran S Baliga</author>
      <pubDate>Fri, 05 Nov 2021 14:30:29 +0000</pubDate>
      <link>https://dev.to/kiransbaliga/3-things-to-note-when-you-design-an-app-5g9b</link>
      <guid>https://dev.to/kiransbaliga/3-things-to-note-when-you-design-an-app-5g9b</guid>
      <description>&lt;p&gt;We all are self taught developer. We all use different methods.. but for sure we practice by building what we learned. Let it be a simple web app or an mobile app. If you just put a little extra effort to make your design better with these tips, your app is going to standout.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#let-me-demonstrate"&gt;
  &lt;/a&gt;
  let me demonstrate...
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SSblyVX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5mazajrpt8hvmm3tckt8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SSblyVX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5mazajrpt8hvmm3tckt8.jpg" alt="calculator" width="880" height="454"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes! Both are simple calculator apps. It is one of the most basic apps in your phones. But If you were to download one which one are you gonna choose the first or second? and why?&lt;/p&gt;

&lt;p&gt;As you can guess my point, I would and many other choose the second one, why did I chose that? its aesthetically pleasing. simply put, it looks good.&lt;/p&gt;

&lt;p&gt;Now what about this one? (I know this was discussed by so many but still..)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JUzElo23--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7r5kwrvig2otstk8dqox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JUzElo23--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7r5kwrvig2otstk8dqox.png" width="880" height="933"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Individually if you look the google app's logo, its great. It matches with the google logo. But when it is together in your screen, its so unpleasant. &lt;/p&gt;

&lt;p&gt;Meanwhile apple's simple and distinctive logos makes us easier to select an app. And if we talk about apple.. there is so much. Apple is very strong in terms of its UI / UX designs.&lt;br&gt;
this article wont be enough to write about it and I am not even an I-phone or Mac user.. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-how-can-you-improve-your-ui"&gt;
  &lt;/a&gt;
  So how can you improve your UI?
&lt;/h2&gt;

&lt;p&gt;While you always build your apps you must create a balance between UI and UX.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-1"&gt;
  &lt;/a&gt;
  Tip 1
&lt;/h2&gt;

&lt;p&gt;Most of you already does this.. if not you should really!!&lt;/p&gt;

&lt;p&gt;Before you start coding always develop a prototype design. design its UI components.&lt;br&gt;
There are so many tools to help you workflow like Figma, Adobe Xd&lt;br&gt;
I recommend &lt;a href="https://www.figma.com"&gt;Figma&lt;/a&gt; cause its free and runs on your browser.&lt;br&gt;
It's really easy to &lt;a href="https://www.youtube.com/watch?v=lg7w3Ntfqy0"&gt;learn figma&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I-1gOX6o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.sequoiacap.com/img/c/figma-gif.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I-1gOX6o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.sequoiacap.com/img/c/figma-gif.gif" alt="figma" width="600" height="407"&gt;&lt;/a&gt;&lt;br&gt;
Basically before you build an app, build it UI cleanly with all the components and selecting proper colours, effects like blur, transparency etc.. This is going to save you lot of time because you have this as a reference while you code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-2"&gt;
  &lt;/a&gt;
  Tip 2
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#fonts"&gt;
  &lt;/a&gt;
  Fonts
&lt;/h3&gt;

&lt;p&gt;Always try to stay consistent with your fonts. Maintain the same font size throughout the app.&lt;/p&gt;

&lt;p&gt;Choose a headline size both contrasting with the body text and fitting on average 2–3 lines.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rVbnaE1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AMi5ylDkTglOfUK8apXqQyg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rVbnaE1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AMi5ylDkTglOfUK8apXqQyg.png" alt="font" width="880" height="572"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-3"&gt;
  &lt;/a&gt;
  Tip 3
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#colours"&gt;
  &lt;/a&gt;
  Colours
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The colors must ensure a clear visual Hierarchy of UI elements. The user should be able to tell which elements of your UI are interactive and how they relate to the other elements on the screen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Text and icons should be legible relative to the background they are placed on. Ensure that white text is not placed on a light background and vice versa, for example&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Strategically use the color you have picked for your brand to reinforce your brand visually without overdoing it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O382tpVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/282/1%2A33kejA69um5oRyg9gKQO2A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O382tpVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/282/1%2A33kejA69um5oRyg9gKQO2A.png" alt="netflix" width="282" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it with these simple tips you can make your app look good.&lt;/p&gt;

&lt;p&gt;What about you? What all do you do when you design an app?&lt;br&gt;
let me know... I would love to hear it...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#carpe-diem"&gt;
  &lt;/a&gt;
  &lt;em&gt;carpe diem&lt;/em&gt;✨&lt;br&gt;&lt;br&gt;
&lt;/h2&gt;

&lt;pre&gt;
    ❤️ &lt;a href="https://kiransbaliga.me"&gt;Portfolio&lt;/a&gt;  |  📷&lt;a href="https://www.instagram.com/kiransbaliga"&gt;Instagram &lt;/a&gt;  |  💼&lt;a href="https://www.linkedin.com/in/kiransbaliga"&gt;LinkedIn&lt;/a&gt;   |  🐥&lt;a href="https://twitter.com/kiransbaliga"&gt;Twitter&lt;/a&gt;    
&lt;/pre&gt;

</description>
      <category>ux</category>
      <category>design</category>
      <category>discuss</category>
      <category>flutter</category>
    </item>
    <item>
      <title>Using the Twitter API with NodeJS</title>
      <author>Saji Wang</author>
      <pubDate>Fri, 05 Nov 2021 14:22:32 +0000</pubDate>
      <link>https://dev.to/codesphere/using-the-twitter-api-with-nodejs-4p3c</link>
      <guid>https://dev.to/codesphere/using-the-twitter-api-with-nodejs-4p3c</guid>
      <description>&lt;p&gt;There was a &lt;a href="https://www.pewresearch.org/internet/2018/04/09/bots-in-the-twittersphere/"&gt;study&lt;/a&gt; done by Pew Research a number of years ago that found that ⅔ of all tweets with links to popular websites. To the average Twitter user that probably doesn't come as a surprise.&lt;/p&gt;

&lt;p&gt;Twitter is incredibly easy to automate, in fact, today I'm going to show you just how easy it is to use the Twitter API with NodeJS to read, search, and post tweets.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#setup-your-twitter-dev%C2%A0account"&gt;
  &lt;/a&gt;
  Setup Your Twitter Dev Account
&lt;/h3&gt;

&lt;p&gt;Because of the sheer volume of Twitter bots, Twitter requires an application before you can use their API. While you can start using your API key as soon as you submit the application, some features might be restricted until it is reviewed.&lt;/p&gt;

&lt;p&gt;Apply here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.twitter.com/en/apply-for-access"&gt;https://developer.twitter.com/en/apply-for-access&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once your application is complete, navigate to your developer dashboard and create a new application. Once, you generate your application, go to settings and make sure to turn on Read and Write Permissions:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--adhR4acK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u499mgv65ww1cq3kk0v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--adhR4acK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u499mgv65ww1cq3kk0v.png" alt="app permissions" width="880" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, head to the keys menu, and generate and copy your API and Access tokens. We'll use them to authenticate next.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#setting-up-our%C2%A0script"&gt;
  &lt;/a&gt;
  Setting Up Our Script
&lt;/h3&gt;

&lt;p&gt;Since we're going to be using NodeJS to work with the Twitter API, create a new NPM project with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And go through the standard questions. Next, we are going to install a great wrapper for the Twitter Developer API. While this isn't necessary, it will make authentication much cleaner.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install twitter-api-v2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once that's done, we can create and authenticate our client like so:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And of course, fill in the relevant API keys and tokens for your app.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#pulling-and-posting%C2%A0tweets"&gt;
  &lt;/a&gt;
  Pulling and Posting Tweets
&lt;/h3&gt;

&lt;p&gt;Now let's showcase some of the API calls you can make.&lt;br&gt;
To get data about a tweet from its ID:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the tweet.fields you can put all the specific data you want. To get a full list of all the parameters you can use:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.twitter.com/en/docs/api-reference-index"&gt;https://developer.twitter.com/en/docs/api-reference-index&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To tweet something out programmatically:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And there you go!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QMJs0zuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rh1gv04j9ssvpyuvzyeb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QMJs0zuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rh1gv04j9ssvpyuvzyeb.png" alt="tweet" width="880" height="148"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use Cases
&lt;/h3&gt;

&lt;p&gt;Virtually anything that you might do normally on Twitter can be done through the API. That means that any automation you might want to do is completely possible. This includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Automated Run Accounts&lt;/li&gt;
&lt;li&gt;Automatically retweet certain articles based on hashtags(Aggregation accounts)&lt;/li&gt;
&lt;li&gt;Track trendings topics for algorithmic trading&lt;/li&gt;
&lt;li&gt;Sentiment Analysis on tweets&lt;/li&gt;
&lt;li&gt;Data analysis for your company's Twitter campaigns&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;So what are you going to build? Let us know down below!&lt;/p&gt;

&lt;p&gt;If you're looking for a place to host your Twitter bot, try coding, debugging, and deploying on &lt;a href="https://link.codesphere.com/FG"&gt;Codesphere&lt;/a&gt;, the most intuitive cloud provider on the market.&lt;/p&gt;

</description>
      <category>node</category>
      <category>twitter</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
