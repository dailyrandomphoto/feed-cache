<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>React basics: Passing data between components</title>
      <author>Chris Bongers</author>
      <pubDate>Thu, 14 Oct 2021 06:07:34 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/react-basics-passing-data-between-components-1m6n</link>
      <guid>https://dev.to/dailydevtips1/react-basics-passing-data-between-components-1m6n</guid>
      <description>&lt;p&gt;Passing data between components in React is a very powerful concept.&lt;/p&gt;

&lt;p&gt;In this article, we'll look at the following two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sending data from a parent to a child&lt;/li&gt;
&lt;li&gt;Sending data from a child to parent&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this concept, we'll need to use the &lt;code&gt;useState&lt;/code&gt; hook. You haven't seen that hook until now. I will write about it in detail another time.&lt;/p&gt;

&lt;p&gt;Our result of today will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S57ZJfxt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633416020523/rI8ACJ_Nh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S57ZJfxt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633416020523/rI8ACJ_Nh.gif" alt="React basics: Passing data between components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sending-data-from-a-parent-to-a-child-component-in-react"&gt;
  &lt;/a&gt;
  Sending data from a parent to a child component in React
&lt;/h2&gt;

&lt;p&gt;The most effortless data flow in React is passing data top-down so from a parent component to the child components.&lt;/p&gt;

&lt;p&gt;Let's use our current example as a starting point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rebelchris/react-basics/tree/list"&gt;Download the GitHub repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this repo, we build a simple bookshelf with a couple of books on it.&lt;/p&gt;

&lt;p&gt;In the last example, we looped our books, but we want to pass these books as an object.&lt;/p&gt;

&lt;p&gt;We can pass them to our bookshelf by setting the params like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Bookshelf&lt;/span&gt; &lt;span class="na"&gt;books&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Bookshelf&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then all we need to do is change our bookshelf code to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Book&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Bookshelf&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Book&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This separates our data a bit more, and we can create multiple bookshelves with their own set of books now.&lt;/p&gt;

&lt;p&gt;The cool part about doing this is that it can also be done on a specific action.&lt;/p&gt;

&lt;p&gt;Let's head back to our &lt;code&gt;App.js&lt;/code&gt; file and set a new state to show you what I mean by that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setBooks&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note we named this &lt;code&gt;books&lt;/code&gt; as well, so rename the top data set as &lt;code&gt;booksData&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we can add a button that `onClick will load our books.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;jsx&lt;br&gt;
&amp;lt;button onClick={() =&amp;gt; setBooks(booksData)}&amp;gt;Load the books&amp;lt;/button&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And there you go now our books are only loaded when we click the button.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sending-data-from-a-child-to-a-parent-component-in-react"&gt;
  &lt;/a&gt;
  Sending data from a child to a parent component in React
&lt;/h2&gt;

&lt;p&gt;Now that we can send data from our parent component to our child let's see how it would work the other way around.&lt;/p&gt;

&lt;p&gt;What we want to achieve is that we have an option to know which book was clicked.&lt;/p&gt;

&lt;p&gt;However, for this approach, the parent component must have a way to receive this data.&lt;/p&gt;

&lt;p&gt;Let's open up our &lt;code&gt;Bookshelf.js&lt;/code&gt; code as this acts as our parent for the actual books.&lt;br&gt;
Add a new state to keep track of the current book.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;jsx&lt;br&gt;
const [currentBook, setCurrentBook] = useState('');&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then we can show the current book if it's set:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;jsx&lt;br&gt;
{currentBook &amp;amp;&amp;amp; &amp;lt;h1&amp;gt;Currently reading: {currentBook}&amp;lt;/h1&amp;gt;}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And the last thing we want to do is pass the set function to our book component like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;jsx&lt;br&gt;
&amp;lt;Book&lt;br&gt;
  setCurrentBook={setCurrentBook}&lt;br&gt;
  title={book.title}&lt;br&gt;
  key={book.id}&lt;br&gt;
/&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Inside the book component, we need to accept this function as a parameter.&lt;br&gt;
And we can add an &lt;code&gt;onClick&lt;/code&gt; handler to invoke this function and pass the title back.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;jsx&lt;br&gt;
export default function Book({ title, setCurrentBook }) {&lt;br&gt;
  return &amp;lt;div onClick={() =&amp;gt; setCurrentBook(title)}&amp;gt;{title}&amp;lt;/div&amp;gt;;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There you go. We can now bind data in two ways.&lt;br&gt;
From parent to child, and the other way around.&lt;/p&gt;

&lt;p&gt;You can find the complete code on &lt;a href="https://github.com/rebelchris/react-basics/tree/data"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>13 of Darkest Design Patterns You Can Find on Internet</title>
      <author>OpenReplay Tech Blog</author>
      <pubDate>Thu, 14 Oct 2021 05:24:35 +0000</pubDate>
      <link>https://dev.to/asayerio_techblog/13-of-darkest-design-patterns-you-can-find-on-internet-b1o</link>
      <guid>https://dev.to/asayerio_techblog/13-of-darkest-design-patterns-you-can-find-on-internet-b1o</guid>
      <description>&lt;p&gt;&lt;em&gt;by author &lt;a href="https://blog.openreplay.com/authors/craig-buckler"&gt;Craig Buckler&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The worst web design patterns are not just for Halloween: &lt;em&gt;they stay with us for years!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some dark patterns are unintentional but most trick you into doing something you didn't intend. You'll eventually see though the manipulation but it's often too late. As a developer, you have the ghost-busting skills to prevent these spooky problems...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-nefarious-notifications"&gt;
  &lt;/a&gt;
  1. Nefarious Notifications
&lt;/h2&gt;

&lt;p&gt;Newsletter sign-ups, push notifications, "lets chat" widgets, and survey prompts &lt;em&gt;could&lt;/em&gt; be useful but implementations are awful.&lt;/p&gt;

&lt;p&gt;Why do sites prompt you to subscribe the moment you access for the first time? You have no idea whether the content is relevant or useful. Unsurprisingly, most people click "no" when faced with the prompt.&lt;/p&gt;

&lt;p&gt;There's nothing wrong with these notifications but users are more likely to appreciate the suggestion after they've engaged with the site first. Perhaps show a prompt at the end of the article or after a few visits. And never prompt users to sign-up for a newsletter when they click a link in the newsletter!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-broken-browsers"&gt;
  &lt;/a&gt;
  2. Broken Browsers
&lt;/h2&gt;

&lt;p&gt;Even those with minimal technology experience understand the browser's back button. Why do sites break standard web functionality by opening new tabs or expiring pages? There is no technical reason to break browser controls. Doing so leads to design problems, fragile systems, and confused users.&lt;/p&gt;

&lt;p&gt;Further "features" to avoid:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;disabling the right-click/long-tap menu&lt;/li&gt;
&lt;li&gt;disabling copy or adding further text&lt;/li&gt;
&lt;li&gt;disabling bookmarking by not updating the URL in a Single Page App.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#3-diabolical-disabling-of-password-paste"&gt;
  &lt;/a&gt;
  3. Diabolical Disabling of Password Paste
&lt;/h2&gt;

&lt;p&gt;Disabling paste for any reason is unnecessary but it's especially problematic on password fields. Yet you'll encounter this issue on large sites such as major international banks.&lt;/p&gt;

&lt;p&gt;The practice is probably implemented for "security" reasons. If the user cannot paste, they cannot reuse a password. The practice also stops people using a password manager so it's impossible to use more secure long random strings.&lt;/p&gt;

&lt;p&gt;Never disable paste: it's less work and improves system security.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-phantom-password-policies"&gt;
  &lt;/a&gt;
  4. Phantom Password Policies
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;"Your password must be between 7 and 12 characters and requires at one uppercase character, two non-consecutive numbers, and a ! or $ symbol."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Companies apply these rules for two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The system is insecurely storing the password as plain text in a database with specific character restrictions, or&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A security "expert" suggested that it stops people using easy passwords such as "password". This is correct - but it also stops people using more complex passwords and provides a handy template for brute-force cracking bots.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A long minimum length is the best way to enforce strong passwords because each character exponentially increases complexity and cracking time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-spooky-scrolljacking"&gt;
  &lt;/a&gt;
  5. Spooky Scroll-Jacking
&lt;/h2&gt;

&lt;p&gt;Showing animations or other effects as the page scrolls can be an engaging experience but be wary of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Over-using animations. Animating everything is a distraction and highlights nothing. One or two subtle effects to show important messages is preferable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Breaking the context. Scrolling should not lead to an unexpected actions such as content disappearing, modal dialogs, form submissions, redirects to other pages, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Animation can also cause motion sickness so use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion"&gt;CSS &lt;code&gt;prefers-reduced-motion&lt;/code&gt; media query&lt;/a&gt; to disable effects according to the user's preferences.&lt;/p&gt;

&lt;p&gt;There's also a special place in hell for infinite-scrolling pages! Auto-loading seemingly random content without the user's consent wastes bandwidth, makes it difficult to bookmark pages, and makes it impossible to reach contact information in the page footer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-creepy-content-jump"&gt;
  &lt;/a&gt;
  6. Creepy Content Jump
&lt;/h2&gt;

&lt;p&gt;Reading articles on a smartphone can be a frustrating experience. You're engrossed in the text when it jumps off-screen and you lose your place. You may even click the wrong button or link the moment the page moves. Some readers will give up and leave.&lt;/p&gt;

&lt;p&gt;Content jumps occur when an image or iframe loads above the viewport scroll point. The browser inserts the content once it has determined the dimensions and the page height grows. A 300 pixel height image loaded above the current position pushes the content down 300 pixels.&lt;/p&gt;

&lt;p&gt;Google's Cumulative Layout Shift (CLS) metric measures content jumps and penalizes sites accordingly. Technical solutions include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Adding &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes to HTML &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; elements or using the CSS &lt;code&gt;aspect-ratio&lt;/code&gt; property to reserve space before an asset loads.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setting dimensions of container elements which enclose slower-loading ads, images, and social media widgets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optimizing web fonts and using similarly-sized fallbacks to minimize layout shifts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Requesting larger assets earlier using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload"&gt;preload&lt;/a&gt; in your HTML &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not inserting elements at the top of the page unless they're triggered by a user action.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Considering CSS &lt;a href="https://developer.mozilla.org/docs/Web/CSS/CSS_Containment"&gt;containment&lt;/a&gt; to optimize the rendering of content blocks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-alarming-app-installs"&gt;
  &lt;/a&gt;
  7. Alarming App Installs
&lt;/h2&gt;

&lt;p&gt;Some sites and social networks often prompt you to install their app when clicking an email alert about a new message, follower, article, transaction, etc. The link opens in a web page with two buttons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A massive "Download Our App" button which leads to an AppStore where you must approve, download, install, and launch the app before logging in, accessing the system, then returning to the original alert to start again.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A microscopic "continue in mobile web" link which performs the action.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There's nothing wrong in having an app which offers more functionality or a slicker UI than the website (even though some just collect more personal data!) But promoting that app at the start of every interaction is frustrating. Some users may install it to stop the nagging but others will unsubscribe.&lt;/p&gt;

&lt;p&gt;Consider offering the app infrequently at appropriate times. Perhaps give up if the user shows zero interest after a dozen prompts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-strange-shopping-cart-additions"&gt;
  &lt;/a&gt;
  8. Strange Shopping Cart Additions
&lt;/h2&gt;

&lt;p&gt;A list of related or recommended products can be useful … adding them to the user's cart without their consent is not!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At best, a small proportion of users will notice the extra item and decide it's useful enough to buy.&lt;/li&gt;
&lt;li&gt;A larger proportion will remove it.&lt;/li&gt;
&lt;li&gt;Some will not notice and a proportion of those will demand a refund.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These activities increase sales at the expense of customer support, goodwill, and ongoing return purchases. Dealing with complaints and refunds can wipe out any short-term profitability gains.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-supernatural-stock-scarcity"&gt;
  &lt;/a&gt;
  9. Supernatural Stock Scarcity
&lt;/h2&gt;

&lt;p&gt;It's useful to know when an item's in-stock but some sites stretch the credibility to breaking point. The more information they give, the less believable their claims:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"BUY NOW! 1 item in stock, 26 were bought today, and 423 people are viewing!"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can even encounter these high-pressure tactics when buying infinitely-available digital products.&lt;/p&gt;

&lt;p&gt;Users soon become suspicious when items remain in stock for many days. Will they reconsider their purchase when they cannot trust the marketing messages?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-creepy-cookie-cancellations"&gt;
  &lt;/a&gt;
  10. Creepy Cookie Cancellations
&lt;/h2&gt;

&lt;p&gt;The EU's General Data Protection Regulation (GDPR) requires sites to show opt-out options for non-essential cookies and other tracking technologies. Other countries have similar rules.&lt;/p&gt;

&lt;p&gt;Most site visitors click "agree" and move on. Opting out should be just as easy yet some sites require you to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;wade through pages/tabs of jargon before finding the options&lt;/li&gt;
&lt;li&gt;click hundreds of opt-out checkboxes, and&lt;/li&gt;
&lt;li&gt;wait for up to a minute while they "process your preferences" (manually, perhaps?)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These dark patterns are on the fringes of legality so be wary of fines or increased lawyer costs. Making it difficult to opt-out also gives the impression you have something to hide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-woeful-web-performance"&gt;
  &lt;/a&gt;
  11. Woeful Web Performance
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://httparchive.org/reports/page-weight"&gt;httparchive.org&lt;/a&gt; reports that the average web page takes seven seconds to load on a desktop device, twenty seconds on mobile, makes 70 HTTP requests, and downloads more 2MB of data. &lt;a href="https://www.websitecarbon.com/"&gt;websitecarbon.com&lt;/a&gt; claims that every page view emits 1.3g of CO² into the atmosphere.&lt;/p&gt;

&lt;p&gt;No one wants a slow site but adding features is often a higher priority than addressing performance. Given it's possible to create a &lt;a href="https://js13kgames.com/games/q1k3/index.html"&gt;playable Quake clone in 13Kb&lt;/a&gt;, you have to question why two paragraphs of text on an "About us" page requires 154 times more code?&lt;/p&gt;

&lt;p&gt;Addressing performance requires a combination of techniques but there is one rule to remember: &lt;em&gt;don't send so much stuff!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-scary-social-media"&gt;
  &lt;/a&gt;
  12. Scary Social Media
&lt;/h2&gt;

&lt;p&gt;Social media widgets such as "Like" buttons look innocent but each one adds hundreds of kilobytes of JavaScript code to the page. It affects performance and is a security risk given they run with the same permissions as the site's own JavaScript. The widgets track users even if they're not clicked -- &lt;em&gt;which they're not&lt;/em&gt;. Fewer than 1% of people will click one.&lt;/p&gt;

&lt;p&gt;The widgets are also unnecessary. Social media sites provide standard "sharing" links which are lightweight and have no performance, security, or privacy risk:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Email: &lt;code&gt;mailto:?subject=[title]&amp;amp;body=[url]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Twitter: &lt;code&gt;https://twitter.com/share?url=[url]&amp;amp;text=[title]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Facebook: &lt;code&gt;https://www.facebook.com/sharer.php?u=[url]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;LinkedIn: &lt;code&gt;https://www.linkedin.com/shareArticle?url=[url]&amp;amp;title=[title]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Reddit: &lt;code&gt;https://reddit.com/submit?url=[url]&amp;amp;title=[title]&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;[url]&lt;/code&gt; is the current page URL and &lt;code&gt;[title]&lt;/code&gt; is the main heading. You could open them in popup windows like the real widgets but it's up to you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-chilling-captchas"&gt;
  &lt;/a&gt;
  13. Chilling CAPTCHAs
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Completely Automated Public Turing test to tell Computers and Humans Apart&lt;/strong&gt; help to prevent bots from accessing or scraping web systems. You may be asked to enter indecipherable text or click squares which contain buses. &lt;em&gt;(Does a coach count? What about a toy bus? Is there a bus in the distance out of shot?!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;CAPTCHAs have three problems:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They're difficult for able-bodied humans with 20:20 vision. How do those with visual or other impairments cope?&lt;/li&gt;
&lt;li&gt;They must become more difficult as AI techniques improve.&lt;/li&gt;
&lt;li&gt;They place the onus for security on users -- &lt;em&gt;not the site owners who benefit most!&lt;/em&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CAPTCHAs are overkill on most websites. Better alternatives include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hidden honeypot fields which block form submission when bots add data.&lt;/li&gt;
&lt;li&gt;Checking that keyboard events such as &lt;code&gt;input&lt;/code&gt; or &lt;code&gt;keydown&lt;/code&gt; fire appropriately.&lt;/li&gt;
&lt;li&gt;Checking the time it takes to complete and submit a form -- a human will take more time than a bot.&lt;/li&gt;
&lt;li&gt;A two-stage submission process which asks the user to confirm their data before it's sent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These methods are easy for humans but halt the majority of bots. It becomes necessary to reprogram them with techniques specific to your site.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-weird-wide-web"&gt;
  &lt;/a&gt;
  The Weird Wide Web
&lt;/h2&gt;

&lt;p&gt;The web is a fantastic resource but dubious practices can taint user experience. Sites use dark patterns because they work -- but they're only effective over the short-term. Visitors eventually become wise to the techniques and go elsewhere.&lt;/p&gt;

&lt;p&gt;Avoid confusing people, build trust in your brand, and you'll retain customers without having to resort to dark patterns.&lt;/p&gt;

&lt;p&gt;Happy Halloween!&lt;/p&gt;

</description>
      <category>design</category>
      <category>webdev</category>
      <category>halloween</category>
    </item>
    <item>
      <title>Create Flask app in 3 lines of code</title>
      <author>Siddhartha Roy</author>
      <pubDate>Thu, 14 Oct 2021 05:04:43 +0000</pubDate>
      <link>https://dev.to/sid86dev/create-flask-app-in-2-lines-of-code-1ic3</link>
      <guid>https://dev.to/sid86dev/create-flask-app-in-2-lines-of-code-1ic3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#createflask"&gt;
  &lt;/a&gt;
  createflask
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8XgGB-E4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/pypi/pyversions/createflask" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8XgGB-E4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/pypi/pyversions/createflask" alt="PyPI - Python Version"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-pip-install-createflask-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;pip install createflask&lt;/code&gt;
&lt;/h3&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#create-your-flask-development-environment-with-2-simple-commands"&gt;
  &lt;/a&gt;
  Create your flask development environment with 2 simple commands.
&lt;/h4&gt;
&lt;/blockquote&gt;



&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  setup
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;createflask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;createapp&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createapp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'app'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X-zmx0MQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/5lFK1NdhoCtH.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X-zmx0MQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/5lFK1NdhoCtH.png%3Fo%3D1" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pypi.org/project/createflask/"&gt;https://pypi.org/project/createflask/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>flask</category>
      <category>programming</category>
      <category>automation</category>
    </item>
    <item>
      <title>Making the most boring website ever with TypeScript, NestJs, React and others. Part 4. </title>
      <author>NordicBeaver</author>
      <pubDate>Thu, 14 Oct 2021 05:03:50 +0000</pubDate>
      <link>https://dev.to/nordicbeaver/making-the-most-boring-website-ever-with-typescript-nestjs-react-and-others-part-4-250j</link>
      <guid>https://dev.to/nordicbeaver/making-the-most-boring-website-ever-with-typescript-nestjs-react-and-others-part-4-250j</guid>
      <description>&lt;p&gt;&lt;em&gt;This series is about making a generic website for a local business with TypeScript, NodeJs, NestJs, Prisma, React and NextJs. I'm trying to make my videos quite short, about 10 minutes each (except for the first one), while putting as much content there as I can. &lt;a href="https://www.youtube.com/playlist?list=PL7b0cPjh8z6K_4qLNu_QdE3RpiU6omViC"&gt;Here&lt;/a&gt; is the full playlist.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This time we'll do Appointments and a way to manage them in the admin panel. We'll also talk about separation between models and DTOs and how hard it can be to work with datetimes.&lt;/p&gt;

&lt;p&gt;Enjoy :)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hUyOLBUJwY0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Explaining Like I'm Five: Connecting Front and Backend Systems</title>
      <author>Akira</author>
      <pubDate>Thu, 14 Oct 2021 04:21:09 +0000</pubDate>
      <link>https://dev.to/akiramakes/explaining-like-im-five-connecting-front-and-backend-systems-3jo2</link>
      <guid>https://dev.to/akiramakes/explaining-like-im-five-connecting-front-and-backend-systems-3jo2</guid>
      <description>&lt;p&gt;A large missing for myself and probably others is an accurate mental model of how frontend and backend systems interplay with each other. As a result, a lot of mental "soup" comes into play when it comes time to get your React/Vue/Angular talking to a backend system. This becomes especially problematic when you layer something as complex as an OAuth Auth Code Grant or other Auth systems on top of that. &lt;/p&gt;

&lt;p&gt;So how can one think of frontend and backend systems communicating accurately while cutting out jargon and confusion? &lt;/p&gt;

&lt;p&gt;Let's borrow from Richard Feynman, a theoretical physicist whose genius lied not only in his discoveries in the various fields of physics, but in his ability to explain deeply technical concepts to everyday people.  He developed a technique where someone explains something to themselves in simple terms to discover gaps in their knowledge; an "Explain Like I'm Five", if you will. &lt;/p&gt;

&lt;p&gt;Before reading ahead, pause and try your best to explain how a frontend and backend system communicate to yourself as if you are five years old.  Don't use jargon (a five year old doesn't know what an API is), and keep this grounded in daily examples a five year old uses (mom's smartphone, a toy train, playing outside). &lt;/p&gt;

&lt;p&gt;// &lt;/p&gt;

&lt;p&gt;What did you come up with? Here's what I said: &lt;/p&gt;

&lt;p&gt;When your mom comes to pick you up from school, first she has to get in her car.  When she gets in her car, she does a couple of things: she opens the door, puts the key in the starter, turns on the engine, and then cranks up the radio to her favorite tunes!  All of that is like how a frontend and backend work together. If your mom is a website's 'frontend', she is making her car, the websites 'backend' do things for her so that she can move on to the next stage of her journey for picking you up. For example, she tells the car to turn 'on' by putting her key in the ignition and turning it.  She tells the radio to turn 'on' by pushing the on button and turning it up.  In the same way, a website's frontend tells the backend what it wants, and the backend responds by giving the frontend what it wants.  If the car didn't turn on, then it would be broken, right? The same can be said about the website frontend and backend - if the request from the frontend isn't fulfilled, something is probably wrong with the backend.  Or if your mom tried to turn on her car with a banana instead of a key, that would be like the frontend of a website being broken so that the backend doesn't understand what she wants from it. &lt;/p&gt;

&lt;p&gt;How was that? A little wordy and bizarre, but it showed me a huge gap in my own understanding: the fact that the implementation of that front and back end system communicating to me, is still a little fuzzy. The magic that happens to make the car actually turn &lt;em&gt;on&lt;/em&gt; when the key is turned to me, still seems like a black box. But at least now I know what to drill - that very same implementation. And from drilling that implementation, I can refine my mental model. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>api</category>
      <category>programming</category>
      <category>mentalmodels</category>
    </item>
    <item>
      <title>I Design, You Build! - Frontend Challenge #3</title>
      <author>Zernonia</author>
      <pubDate>Thu, 14 Oct 2021 02:18:13 +0000</pubDate>
      <link>https://dev.to/zernonia/i-design-you-build-frontend-challenge-3-gda</link>
      <guid>https://dev.to/zernonia/i-design-you-build-frontend-challenge-3-gda</guid>
      <description>&lt;h2&gt;
  &lt;a href="#appreciation"&gt;
  &lt;/a&gt;
  Appreciation
&lt;/h2&gt;

&lt;p&gt;What an overwhelming response from the first two challenges! I know I said it before, but I really enjoy seeing every submission, and appreciate every feedback given. If you haven't give the challenge a try, I &lt;strong&gt;strongly encourage&lt;/strong&gt; you to join us in this fun challenge! 🤩✨&lt;/p&gt;

&lt;p&gt;I know everyone is in different level of HTML/CSS/Javascript, but don't worry, I will try to mix in different difficulties in the coming challenge, so stay tuned! 🔔&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#challenge"&gt;
  &lt;/a&gt;
  Challenge
&lt;/h2&gt;

&lt;p&gt;There's a few 1 pager (or should I say 1 section 😆) design previously, how about let's make a Homepage for a Modern Interior Furniture Store?&lt;/p&gt;

&lt;p&gt;So, in this challenge, we will be creating a &lt;strong&gt;minimalistic E-commerce Website&lt;/strong&gt; with the touch of modern UI. Create a homepage following the design. Fulfill Target and/or Extra below:&lt;/p&gt;

&lt;p&gt;Target:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🎯 Target : User can see the similar design&lt;/li&gt;
&lt;li&gt;🎯 Target : Responsive design&lt;/li&gt;
&lt;li&gt;🎯 Target : Filter products&lt;/li&gt;
&lt;li&gt;🎯 Target : Multiple showcase (use arrow button to navigate)&lt;/li&gt;
&lt;li&gt;🎯 Target : On mobile, when I select the hamburger menu, I can see a navigation (use your own creativity)&lt;/li&gt;
&lt;li&gt;🎯 Target : On mobile, I can slide the products to left-right.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extra:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🌟 Extra : Add animation to the filtering&lt;/li&gt;
&lt;li&gt;🌟 Extra : Add animation when scrolling down the page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;📃 Icon : &lt;a href="https://icones.js.org/collection/all"&gt;https://icones.js.org/collection/all&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📃 Hosting: &lt;a href="https://vercel.com/"&gt;https://vercel.com/&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠ It will defeat the purpose of learning if you just copy and paste someone else's answer 😭!&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#start-coding"&gt;
  &lt;/a&gt;
  Start Coding!
&lt;/h2&gt;

&lt;p&gt;If you are ready to take on the challenge, then&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Help 💖 this design on &lt;a href="https://dribbble.com/shots/16649336-SHPX-Modern-Interior-Furniture-Store-Design"&gt;Dribbble&lt;/a&gt;, and follow me! Please... 😳&lt;/li&gt;
&lt;li&gt;Bookmark this post so that you can submit it easier.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Right-click&lt;/strong&gt; &lt;a href="https://www.figma.com/file/e7u4jp5OqyHybDZzRCTMvi/SHPX?node-id=0%3A1"&gt;here&lt;/a&gt; and open &lt;strong&gt;Open link in a New Tab&lt;/strong&gt; to see the Figma Design.&lt;/li&gt;
&lt;li&gt;Enjoy coding! 🤩&lt;/li&gt;
&lt;li&gt;Come back to submit!&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;All the &lt;strong&gt;images&lt;/strong&gt; and &lt;strong&gt;assets&lt;/strong&gt; are free to use, and can be exported from the Figma Design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/file/e7u4jp5OqyHybDZzRCTMvi/SHPX?node-id=0%3A1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kih-yIBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwacxb8wvrum5zy2swxm.png" alt="Zernonia Frontend Challenge #3"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#submission"&gt;
  &lt;/a&gt;
  Submission
&lt;/h2&gt;

&lt;p&gt;Once you've completed, come back to this post, and submit your solution using the following &lt;code&gt;template&lt;/code&gt; in the comment section. You are encouraged to &lt;strong&gt;comment&lt;/strong&gt; and &lt;strong&gt;upvotes&lt;/strong&gt; other's answer!&lt;/p&gt;

&lt;p&gt;Thank you!💘&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Feedback: This is awesome!

Demo: &amp;lt;url&amp;gt;
Github: &amp;lt;url&amp;gt;
Tech-Stack: Vue, TailwindCSS
Learning Outcome: 
  1. 
  2.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;I share these design freely so that anyone who wanted to practice or challenge Web design be able to do so without paying other platform (&lt;em&gt;ahem) to get their **Figma Design&lt;/em&gt;*🎨 file. &lt;/p&gt;

&lt;p&gt;You are free to use the Design you've created in your portfolio. No copyright claims or anything.&lt;/p&gt;

&lt;p&gt;But if you are loving my work, you are most welcomed to follow me on &lt;code&gt;Dev.to&lt;/code&gt; and &lt;a href="https://twitter.com/zernonia"&gt;Twitter&lt;/a&gt; 😄&lt;/p&gt;

&lt;p&gt;Also, check out my own &lt;a href="https://zernonia.com"&gt;Website&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-your-time-and-attention-hope-youll-enjoy"&gt;
  &lt;/a&gt;
  Thank you for your time and attention! Hope you'll enjoy!
&lt;/h3&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>idesignyoubuild</category>
    </item>
    <item>
      <title>Props in react </title>
      <author>Lupita Rivera</author>
      <pubDate>Thu, 14 Oct 2021 02:01:18 +0000</pubDate>
      <link>https://dev.to/lupitalee/props-in-react-1ogp</link>
      <guid>https://dev.to/lupitalee/props-in-react-1ogp</guid>
      <description>&lt;p&gt;This short blog post will attempt to clearly summarize the concept of props in a way that the newest of programming students can understand.&lt;/p&gt;

&lt;p&gt;Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”).&lt;br&gt;
props(stands for properties)and return React elements describing what should appear on the screen.&lt;/p&gt;

&lt;p&gt;Props can be strings, objects, arrays or functions&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jsXxbnYC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghsf5tzjnnukc23k8ya4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jsXxbnYC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghsf5tzjnnukc23k8ya4.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;following the &lt;a href="https://reactjs.org/docs/components-and-props.html"&gt;React Docs&lt;/a&gt; Props are Read-Only, immutable and the Component cannot change its own props. &lt;br&gt;
They are also able to be passed between your components, generally from parent to child.&lt;/p&gt;

&lt;p&gt;on the other hand you can pass props from CHILD component back up to the PARENT component. how you might ask ?&lt;/p&gt;

&lt;p&gt;We have 2 components:&lt;br&gt;
Parent: App.js&lt;br&gt;
Child: Child.js&lt;/p&gt;

&lt;p&gt;Use the following steps:&lt;br&gt;
-Create a function inside your parent component, pass it a parameter and log that parameter using console.log .&lt;/p&gt;

&lt;p&gt;-Pass the function name as props into your child component render.&lt;/p&gt;

&lt;p&gt;-Invoke the function from props inside your child component.&lt;/p&gt;

&lt;p&gt;-Pass in your data as an argument inside the invocation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parent-component"&gt;
  &lt;/a&gt;
  Parent Component
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--maYodH7e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwvmx2gc7k1rh5uq7p8u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--maYodH7e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwvmx2gc7k1rh5uq7p8u.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#child-component"&gt;
  &lt;/a&gt;
  Child Component
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rMF4rQNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cu7u4t2deg019pog8bsl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rMF4rQNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cu7u4t2deg019pog8bsl.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading — I hope this provided some good value&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>Easiest Way to Send Emails With JavaScript by SilvenLEAF</title>
      <author>SilvenLEAF</author>
      <pubDate>Thu, 14 Oct 2021 01:56:41 +0000</pubDate>
      <link>https://dev.to/silvenleaf/easiest-way-to-send-emails-with-javascript-by-silvenleaf-252b</link>
      <guid>https://dev.to/silvenleaf/easiest-way-to-send-emails-with-javascript-by-silvenleaf-252b</guid>
      <description>&lt;p&gt;Ahoy there Sweetlings! Let's send some emails! But in a SUPER FUN Way!! For a Sweeter fun, let's add TypeScript as well! Even if you don't know it, don't worry, we will be going from Level 0!! As long as you know the basics for JavaScript, hop on!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-0-begin-the-project"&gt;
  &lt;/a&gt;
  Step 0: Begin the Project
&lt;/h2&gt;

&lt;p&gt;Create a folder and open it in your favorite editor (mine VS Code). Then type this command on your project terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It'll create a package.json file to track all the packages that you'd download and so on)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-step-adding-typescript"&gt;
  &lt;/a&gt;
  Bonus Step: Adding TypeScript
&lt;/h2&gt;

&lt;p&gt;For those who are a bit lost on how to set up the environment and run the TypeScript files, check this one out &lt;strong&gt;&lt;a href="https://dev.to/silvenleaf/typescript-setup-by-silvenleaf-1aen"&gt;TypeScript SETUP by SilvenLEAF&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well anyway, in short (for details, checkout the above link)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install typescript
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i typescript 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;init our tsconfig
(make sure you already have typescript globally installed, if not type &lt;strong&gt;npm i -g typescript&lt;/strong&gt;. And don't get it confused with the previous normal &lt;strong&gt;npm i typescript&lt;/strong&gt; command)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tsc &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It'll create a &lt;strong&gt;.tsconfig&lt;/strong&gt; file)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install &lt;strong&gt;ts-node&lt;/strong&gt; and &lt;strong&gt;ts-node-dev&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i ts-node ts-node-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's create an &lt;strong&gt;app.ts&lt;/strong&gt; file and send some freaking emails!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-sending-emails"&gt;
  &lt;/a&gt;
  Step 1: Sending Emails
&lt;/h2&gt;

&lt;p&gt;First install the required packages with this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i nodemailer @types/nodemailer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(By the way, &lt;strong&gt;"npm i X"&lt;/strong&gt; is the short version for &lt;strong&gt;"npm install X"&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Now let's send some freaking emails! Inside the &lt;strong&gt;app.ts&lt;/strong&gt; file, write these&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nodemailer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;// let's create the transport (it's the postman/delivery-man who will send your emails)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myTransport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTransport&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gmail&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOUR_GMAIL_ACCOUNT@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your gmail account which you'll use to send the emails&lt;/span&gt;
    &lt;span class="na"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOUR_GMAIL_PASSWORD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// the password for your gmail account&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;






&lt;span class="c1"&gt;// defining the content of the email (I mean, what will be on the email)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mailOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SilvenLEAF&amp;lt;YOUR_GMAIL_ACCOUNT@gmail.com&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// from where the email is going, you can type anything or any name here, it'll be displayed as the sender to the person who receives it&lt;/span&gt;
  &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user1@gmail.com,user2@crazy.com,user3@anything.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// the email address(es) where you want to send the emails to. If it's more than one person/email, seperate them with a comma, like here how I seperated the 3 users with a comma&lt;/span&gt;

  &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sending Some Freaking Email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your email subject (optional but better to have it)&lt;/span&gt;
  &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Hello there my sweetling! Let's send some freaking emails!`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your email body in plain text format (optional) &lt;/span&gt;

  &lt;span class="c1"&gt;// your email body in html format (optional)&lt;/span&gt;
  &lt;span class="c1"&gt;// if you want to send a customly and amazingly designed html body&lt;/span&gt;
  &lt;span class="c1"&gt;// instead of a boring plain text, then use this "html" property&lt;/span&gt;
  &lt;span class="c1"&gt;// instead of "text" property&lt;/span&gt;
  &lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;h1 style="color: red;text-align:center"&amp;gt;Hello there my sweetling!&amp;lt;/h1&amp;gt;
         &amp;lt;p style="text-align:center"&amp;gt;Let's send some &amp;lt;span style="color: red"&amp;gt;freaking&amp;lt;/span&amp;gt; emails!&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;






&lt;span class="c1"&gt;// sending the email&lt;/span&gt;
&lt;span class="nx"&gt;myTransport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Email is failed to send!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Email is successfully sent!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yohoooo! We just created the email sender file. Now, let's run it. Type this following command in your terminal to run this typescript file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ts-node app.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It's the TypeScript version of &lt;strong&gt;node app.js&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Yahoooo! We just send a freaking email to some freaking users!! Yay! But really? You must have seen a crazy error like this right?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1oAAvUc5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y4qey6y8gmw7qhihp5u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1oAAvUc5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y4qey6y8gmw7qhihp5u.png" alt="Failed to send"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because Google blocked that request! So in order to make it work, we need to allow it first to send emails from that email account. How? Google &lt;strong&gt;"less secure apps"&lt;/strong&gt; and open the first link.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fs6zE-BY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71g2jait16s2ols1me5f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fs6zE-BY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71g2jait16s2ols1me5f.png" alt="Google Less Secure Apps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you'll see something like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ohXk3e3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7yxu67f0h5cm01tco7t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ohXk3e3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7yxu67f0h5cm01tco7t.png" alt="Less Secure Apps"&gt;&lt;/a&gt;&lt;br&gt;
Make the toggle button on (Allow less secure apps: ON)&lt;/p&gt;

&lt;p&gt;Now run that email sender file once again! And HURRAH!!! You just sent a freaking email!! Congrats Sweetling!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's NEXT?
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#1-improved-ai-bot-that-can-do-anything"&gt;
  &lt;/a&gt;
  1. Improved AI BOT that can do anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-insane-stuff-with-javascripttypescript"&gt;
  &lt;/a&gt;
  2. Insane stuff with JavaScript/TypeScript
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-debugging-typescript-with-vs-code-debugger"&gt;
  &lt;/a&gt;
  3. Debugging TypeScript with VS Code Debugger
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#4-how-to-automate-anything"&gt;
  &lt;/a&gt;
  4. How to automate anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#5-sequelize-hooks"&gt;
  &lt;/a&gt;
  5. Sequelize Hooks
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#6-automate-creating-db-schemas"&gt;
  &lt;/a&gt;
  6. Automate creating DB Schemas
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#7-how-to-create-an-android-app-with-no-xp"&gt;
  &lt;/a&gt;
  7. How to create an Android APP with NO XP
&lt;/h4&gt;

&lt;p&gt;(including apk generating)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#got-any-doubt"&gt;
  &lt;/a&gt;
  Got any doubt?
&lt;/h1&gt;

&lt;p&gt;Drop a comment or Feel free to reach out to me @SilveLEAF on Twitter or &lt;a href="https://www.linkedin.com/in/silvenleaf/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wanna know more about me? Come here! &lt;br&gt;
&lt;a href="https://SilvenLEAF.github.io"&gt;SilvenLEAF.github.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>node</category>
      <category>react</category>
    </item>
    <item>
      <title>TypeScript SETUP by SilvenLEAF</title>
      <author>SilvenLEAF</author>
      <pubDate>Thu, 14 Oct 2021 01:56:29 +0000</pubDate>
      <link>https://dev.to/silvenleaf/typescript-setup-by-silvenleaf-1aen</link>
      <guid>https://dev.to/silvenleaf/typescript-setup-by-silvenleaf-1aen</guid>
      <description>&lt;p&gt;Ahoy there! Let's set up the environment for playing with TypeScript and learn how to run those TypeScript files! &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-0-install-typescript"&gt;
  &lt;/a&gt;
  Step 0: Install TypeScript
&lt;/h1&gt;

&lt;p&gt;First let's install TypeScript globally if you don't have it yet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-g&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(By the way, &lt;strong&gt;"npm i X"&lt;/strong&gt; is the short-hand for &lt;strong&gt;"npm install X"&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Now, let's create your project folder and open it in your beloved editor (mine VS Code)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-init-tsconfig"&gt;
  &lt;/a&gt;
  Step 1: init tsconfig
&lt;/h2&gt;

&lt;p&gt;Let's init the tsconfig file, type the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tsc &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(This &lt;strong&gt;"tsc"&lt;/strong&gt; command will only work if you have typescript globally installed)&lt;/p&gt;

&lt;p&gt;It'll create a &lt;strong&gt;"tsconfig.json"&lt;/strong&gt; file. Now, what does it do you ask? TypeScript is the superset of JavaScript and how we want to compile it will be defined by this tsconfig file. The best part is, it'll give you &lt;strong&gt;linting&lt;/strong&gt; (the red lines whenever there is an error in your code or logic) and also explicitly tell you what mistakes you are doing and in some cases possible solutions as well. Amazing right?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-run-typescript-files"&gt;
  &lt;/a&gt;
  Step 2: run TypeScript files
&lt;/h2&gt;

&lt;p&gt;Now you created a TypeScript file, wrote your code, for example an &lt;strong&gt;app.ts&lt;/strong&gt; file with this content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;console.log&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello there TypeScript! You are AMAIZING!!'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now how to run this file? If it were a JavaScript file, like app.js, you might run &lt;strong&gt;"node app.js"&lt;/strong&gt; or &lt;strong&gt;"nodemon app.js"&lt;/strong&gt;, right? So let's find the TypeScript versions for those!&lt;/p&gt;

&lt;p&gt;Let's install the packages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i ts-node ts-node-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;"ts-node"&lt;/strong&gt; is the TypeScript version for &lt;strong&gt;"node"&lt;/strong&gt; and &lt;strong&gt;"ts-node-dev"&lt;/strong&gt; is the TypeScript version for &lt;strong&gt;"nodemon"&lt;/strong&gt;. So to run the TypeScript file use either of these commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ts-node app.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(Which is basically &lt;strong&gt;"node app.js"&lt;/strong&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ts-node-dev app.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(Which is basically &lt;strong&gt;"nodemon app.js"&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;YIPPIE!! You just set up the environment for coding in TypeScript and also learnt how to run those FILES!! YOOOHOOOO!!! But now what?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's NEXT?
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#1-improved-ai-bot-that-can-do-anything"&gt;
  &lt;/a&gt;
  1. Improved AI BOT that can do anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-insane-stuff-with-javascripttypescript"&gt;
  &lt;/a&gt;
  2. Insane stuff with JavaScript/TypeScript
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-debugging-typescript-with-vs-code-debugger"&gt;
  &lt;/a&gt;
  3. Debugging TypeScript with VS Code Debugger
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#4-how-to-automate-anything"&gt;
  &lt;/a&gt;
  4. How to automate anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#5-sequelize-hooks"&gt;
  &lt;/a&gt;
  5. Sequelize Hooks
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#6-automate-creating-db-schemas"&gt;
  &lt;/a&gt;
  6. Automate creating DB Schemas
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#7-how-to-create-an-android-app-with-no-xp"&gt;
  &lt;/a&gt;
  7. How to create an Android APP with NO XP
&lt;/h4&gt;

&lt;p&gt;(including apk generating)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#got-any-doubt"&gt;
  &lt;/a&gt;
  Got any doubt?
&lt;/h1&gt;

&lt;p&gt;Drop a comment or Feel free to reach out to me @SilveLEAF on Twitter or &lt;a href="https://www.linkedin.com/in/silvenleaf/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wanna know more about me? Come here! &lt;br&gt;
&lt;a href="https://SilvenLEAF.github.io"&gt;SilvenLEAF.github.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>node</category>
      <category>express</category>
    </item>
    <item>
      <title>Kubernetes Best Practices Validation in Azure Pipelines with Datree</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Thu, 14 Oct 2021 01:04:25 +0000</pubDate>
      <link>https://dev.to/n3wt0n/kubernetes-best-practices-validation-in-azure-pipelines-with-datree-33i3</link>
      <guid>https://dev.to/n3wt0n/kubernetes-best-practices-validation-in-azure-pipelines-with-datree-33i3</guid>
      <description>&lt;p&gt;In this third article dedicated to &lt;strong&gt;&lt;em&gt;Datree&lt;/em&gt;&lt;/strong&gt; we will explore how to use the tool with Azure Pipelines to validate and secure our Kubernetes deployments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aM7EVflmEt4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/aM7EVflmEt4"&gt;Link to the video: https://youtu.be/aM7EVflmEt4&lt;/a&gt;. The part about &lt;strong&gt;&lt;em&gt;Azure Pipelines&lt;/em&gt;&lt;/strong&gt; starts at minute &lt;a href="https://youtu.be/aM7EVflmEt4?t=993"&gt;16:33&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-basics"&gt;
  &lt;/a&gt;
  The Basics
&lt;/h3&gt;

&lt;p&gt;While I will not cover how to install and use the service in general (&lt;em&gt;check the video and the first article of this series if you want to know more about it&lt;/em&gt;), there are few things worth remembering and that will be useful later on in this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Datree is a &lt;strong&gt;CLI&lt;/strong&gt; tool, which works on Linux, MacOS and Windows&lt;/li&gt;
&lt;li&gt;The Centralized Policy Management uses a &lt;strong&gt;Token&lt;/strong&gt; as &lt;em&gt;connection&lt;/em&gt; between the scans and the account&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#datree-in-azure-pipelines"&gt;
  &lt;/a&gt;
  Datree in Azure Pipelines
&lt;/h3&gt;

&lt;p&gt;Alright, let's do this. First thing we have to do, as we would in a local environment, is to &lt;strong&gt;install the CLI&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;curl https://get.datree.io | /bin/bash&lt;/span&gt;
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Install&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Datree'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case the pipeline is running on Linux, so I can use the bash script for installing it.&lt;/p&gt;

&lt;p&gt;This step will take only few seconds to execute.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is necessary if you are using the &lt;em&gt;Microsoft Hosted Agents&lt;/em&gt;. If you are instead on &lt;em&gt;Self-hosted Agents&lt;/em&gt; you can install the CLI directly on the agent machine so you can skip this step. However, you'd need to manually take care of updating the CLI&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, we can &lt;strong&gt;invoke the validation&lt;/strong&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;datree test ~/.datree/k8s-demo.yaml&lt;/span&gt;
  &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;DATREE_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$(DATREE_TOKEN)&lt;/span&gt;
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Run&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;datree&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;scan'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, nothing different from what we would normally do.&lt;/p&gt;

&lt;p&gt;Since we don't have access to the config file in our CI environment, we need to &lt;strong&gt;pass the Token as environment variable&lt;/strong&gt;. Best practice is to save it as a protected variable in Pipelines, and retrieve it using &lt;code&gt;$(YOUR_SECRET_NAME)&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the example above the Token is passed as environment variable directly in the task to minimize exposure. If you have multiple scans in the same workflow, you can also add it as job, stage, or pipeline environment variable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And this is basically all you need.&lt;/p&gt;

&lt;p&gt;So the &lt;strong&gt;full pipeline&lt;/strong&gt; will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Pipeline to show Datree scan&lt;/span&gt;

&lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;

&lt;span class="na"&gt;pool&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;vmImage&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

&lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;curl https://get.datree.io | /bin/bash&lt;/span&gt;
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Install&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Datree'&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;datree test ~/.datree/k8s-demo.yaml&lt;/span&gt;
  &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;DATREE_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$(DATREE_TOKEN)&lt;/span&gt;
  &lt;span class="na"&gt;displayName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Run&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;datree&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;scan'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course you can also integrate this into your own CI or PR validation pipelines rather than keeping it separate if you wish so.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#execution-and-results"&gt;
  &lt;/a&gt;
  Execution and Results
&lt;/h3&gt;

&lt;p&gt;First thing to notice is that, as Ive said before, the &lt;strong&gt;installation step is very quick&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CWTAC7nl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jln3krt0kink37mfs8ye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CWTAC7nl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jln3krt0kink37mfs8ye.png" alt="Installation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is why it is probably a good idea to leave it there even on Self-hosted agents so you don't have to worry about updating it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6rL3wqKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju4vviy66ne9uiupxmt2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6rL3wqKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju4vviy66ne9uiupxmt2.png" alt="Execution"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the validation scan is also very quick.&lt;/p&gt;

&lt;p&gt;Second thing to notice is that by design &lt;strong&gt;if a validation fails it will break the build/run&lt;/strong&gt;. This is to ensure the enforcement of the policies and best practices.&lt;/p&gt;

&lt;p&gt;Finally, let's take a look at the results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1cS0StW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt7fy319ele9srkhlkqv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1cS0StW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt7fy319ele9srkhlkqv.png" alt="Results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the &lt;strong&gt;output is exactly the same&lt;/strong&gt; as when executing the CLI on any local environment, or anywhere else for what batters, keeping the experience very consistent.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#offer"&gt;
  &lt;/a&gt;
  Offer
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Datree is free&lt;/strong&gt; to use up to 1000 scans per month, and you can pay for more scans and enhanced support. However...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FKp3WlAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d21dd4pybgm67x8js18f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FKp3WlAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d21dd4pybgm67x8js18f.png" alt="A Month for Free"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;You can get 1 month of the Premium plan for FREE is you use this link&lt;/em&gt;&lt;/strong&gt;: &lt;a href="https://app.datree.io/?utm_source=coder-dave&amp;amp;medium=youtube"&gt;https://app.datree.io/?utm_source=coder-dave&amp;amp;medium=youtube&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;So, what do you think about Datree? Is it something you will adopt as part of your workflow? Let me know in the comment section below, I'd really like to know it.&lt;/p&gt;

&lt;p&gt;You may also want to watch &lt;a href="https://youtu.be/4Oa5HneTuKs"&gt;this video&lt;/a&gt; in which show you how to deploy to Kubernetes in Azure Pipelines starting from scratch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
📧 &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aM7EVflmEt4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>devops</category>
      <category>azuredevops</category>
      <category>kubernetes</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Cannot read property 'jwtoken' of undefined</title>
      <author>SuvamRay</author>
      <pubDate>Thu, 14 Oct 2021 00:42:00 +0000</pubDate>
      <link>https://dev.to/suvamray/cannot-read-property-jwtoken-of-undefined-jik</link>
      <guid>https://dev.to/suvamray/cannot-read-property-jwtoken-of-undefined-jik</guid>
      <description>&lt;div class="ltag__stackexchange--container"&gt;
  &lt;div class="ltag__stackexchange--title-container"&gt;
    
      &lt;div class="ltag__stackexchange--title"&gt;
        &lt;h1&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Gn-iPj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackoverflow-logo-b42691ae545e4810b105ee957979a853a696085e67e43ee14c5699cf3e890fb4.svg" alt=""&gt;
            &lt;a href="https://stackoverflow.com/questions/69563747/cannot-read-property-jwtoken-of-undefined" rel="noopener noreferrer"&gt;
               Cannot read property 'jwtoken' of undefined
            &lt;/a&gt;
        &lt;/h1&gt;
        &lt;div class="ltag__stackexchange--post-metadata"&gt;
          &lt;span&gt;Oct 14 '21&lt;/span&gt;
            &lt;span&gt;Comments: 1&lt;/span&gt;
            &lt;span&gt;Answers: 0&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;a class="ltag__stackexchange--score-container" href="https://stackoverflow.com/questions/69563747/cannot-read-property-jwtoken-of-undefined" rel="noopener noreferrer"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9mJpuJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-up-eff2e2849e67d156181d258e38802c0b57fa011f74164a7f97675ca3b6ab756b.svg" alt=""&gt;
        &lt;div class="ltag__stackexchange--score-number"&gt;
          0
        &lt;/div&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wif5Zq3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/stackexchange-arrow-down-4349fac0dd932d284fab7e4dd9846f19a3710558efde0d2dfd05897f3eeb9aba.svg" alt=""&gt;
      &lt;/a&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--body"&gt;
    
&lt;p&gt;here I generate the token at backend in express
..............&lt;/p&gt;
&lt;div class="snippet" data-lang="js"&gt;
&lt;div class="snippet-code"&gt;
&lt;pre class="snippet-code-js lang-js prettyprint-override"&gt;&lt;code&gt;router.post("/login",async(req,res)=&amp;gt;{
    const {email,password}=req.body;
    if(!email || !password){
        return res.status(401).send({error:"please filled the data properly"});
    }
    try {
        const loginUser=await User.findOne({email:email});
        if(!loginUser){
            return res.status(400).send({error:"not found"});
        }
        const isMatch = await bcrypt.compare(password,loginUser.password);    
        if(isMatch){
            const token=await loginUser.generateToken();
            res.cookie("jwtoken",token,{
                expires:new Date(Date.now()+15000000),
                httpOnly:true,
                //secure:true  //it&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
    
  &lt;/div&gt;
  &lt;div class="ltag__stackexchange--btn--container"&gt;
    
      &lt;a href="https://stackoverflow.com/questions/69563747/cannot-read-property-jwtoken-of-undefined" rel="noopener noreferrer"&gt;Open Full Question&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;


</description>
    </item>
    <item>
      <title>what are arrow functions</title>
      <author>Lupita Rivera</author>
      <pubDate>Thu, 14 Oct 2021 00:13:35 +0000</pubDate>
      <link>https://dev.to/lupitalee/what-are-arrow-functions-15me</link>
      <guid>https://dev.to/lupitalee/what-are-arrow-functions-15me</guid>
      <description>&lt;p&gt;before we jump into what is an arrow function lets talk about functions in JavaScript. before ES6 every time we wrote a function we use the word Function Keyword,&lt;/p&gt;

&lt;p&gt;ex,&lt;br&gt;
&lt;code&gt;const divide = function (x,y){&lt;br&gt;
return x/y;&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;we could had an Anonymous function&lt;br&gt;
or a name function &lt;/p&gt;

&lt;p&gt;ex,&lt;br&gt;
&lt;code&gt;function divide(){&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;but we still using the &lt;code&gt;function&lt;/code&gt; keyword. and that could get kinda lengthy in our code specially when we are using more complex code and always passing in the function keyword.&lt;/p&gt;

&lt;p&gt;so this is where arrow functions come in.&lt;/p&gt;

&lt;p&gt;Arrow function is one of the features introduced in the ES6 version of JavaScript. It allows you to create functions in a cleaner way compared to regular function expression.&lt;/p&gt;

&lt;p&gt;but theres also on some situations they do behave differently. we will talk about that as we go but for now what this really means is that makes the function shorter in a way of writing a function.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  SYNTAX
&lt;/h2&gt;

&lt;p&gt;ex, from the divide function from above lets write in as an arrow function &lt;/p&gt;

&lt;p&gt;&lt;code&gt;const divide = (x,y) =&amp;gt; {&lt;br&gt;
return x/y;&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implicit-return"&gt;
  &lt;/a&gt;
  Implicit Return
&lt;/h3&gt;

&lt;p&gt;we can also write as an implicit return  that means i wont need the return keyword and we get rid of the curly braces and replace it with  parenthesis &lt;/p&gt;

&lt;p&gt;ex,&lt;br&gt;
&lt;code&gt;cont divide = (x,y) =&amp;gt; (x / y)&lt;/code&gt; whatever expression is inside of the parenthesis will be automatically returned, it's an explicit return. &lt;/p&gt;

&lt;p&gt;but we can also write it even shorter &lt;code&gt;cont divide = (x,y) =&amp;gt; x / y&lt;/code&gt;  by taking out the parenthesis. you can only do this if you have a single expression, you cannot pass a &lt;code&gt;if else statement&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;but this is not the only difference between arrow functions and regular functions. if we go to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"&gt;MDN&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-differences"&gt;
  &lt;/a&gt;
  other differences:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#use-of-this-keyword"&gt;
  &lt;/a&gt;
  Use of this keyword
&lt;/h3&gt;

&lt;p&gt;unlike Regular functions, arrow function does not have their own "this" keyword. like a regular function expression does.&lt;br&gt;
the keyword this is going to change is going to be set in a given function depending on how the function is called.&lt;/p&gt;

&lt;p&gt;but with an arrow function the keyword this is not going to change relative to the context or the parent that the function is define in.&lt;/p&gt;

&lt;p&gt;ex, &lt;/p&gt;

&lt;p&gt;&lt;code&gt;const person ={&lt;br&gt;
    name: "Lupita",&lt;br&gt;
    sayHi: function () {&lt;br&gt;
console.log(this.name, "says hi!")&lt;br&gt;
    }&lt;br&gt;
}&lt;/code&gt;&lt;br&gt;
&lt;code&gt;person.sayHi()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;okay when i call person.sayHi the value of &lt;code&gt;this&lt;/code&gt; is going to be determined by how I'm calling it, I'm calling it sayHi() on person the object person will be the value of this - this.name should be Lupita. so when i run the code i get &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Lupita says hi!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However if i use an arrow function instead &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kDEF-8sL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q45tn95d4o8d2kkc01zf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kDEF-8sL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q45tn95d4o8d2kkc01zf.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we just get &lt;code&gt;says hi!&lt;/code&gt; so whats going on here is that the value of this is not being changed , not being set when im calling person.sayHi() like a normal function would. if we look at just &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const person ={&lt;br&gt;
    name: "Lupita",&lt;br&gt;
    sayHi:()=&amp;gt; {&lt;br&gt;
console.log(this)&lt;br&gt;
console.log(this.name, "says hi!")&lt;br&gt;
    }&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8i_Jqb8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrq3ax02h4bhou1kszm6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8i_Jqb8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrq3ax02h4bhou1kszm6.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we see here this is just set to the window objet, just as if this function where defined on its own no inside of the person object. and it doesn't matter how i call that function &lt;br&gt;
if its an arrow function the value of this is not going to be set to that person object unless i where to bind it. but it's own an arrow function does not  get a new or diff value for this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-a-new-keyword"&gt;
  &lt;/a&gt;
  Using a new keyword
&lt;/h2&gt;

&lt;p&gt;Regular functions created using function declarations or expressions are constructible and callable. Regular functions are constructible; they can be called using the new keyword.&lt;/p&gt;

&lt;p&gt;However, the arrow functions are only callable and not constructible, i.e., arrow functions can never be used as constructor functions.&lt;/p&gt;

&lt;p&gt;ex,&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#regular-function"&gt;
  &lt;/a&gt;
  regular function
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clWPKJRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ljdzd91c360k4nr1jsv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clWPKJRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ljdzd91c360k4nr1jsv.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;as you can see it returns 5, &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#arrow-function"&gt;
  &lt;/a&gt;
  Arrow function
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DDkcwNhJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nufeeoy1bsi3s1uqzdm4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DDkcwNhJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nufeeoy1bsi3s1uqzdm4.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So this is basically Arrow functions. If you want further reference, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"&gt;MDN&lt;/a&gt;&lt;br&gt;
is a good place to check.&lt;/p&gt;

&lt;p&gt;Thank you for reading :)&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
