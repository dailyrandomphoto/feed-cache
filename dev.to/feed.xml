<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Protecting API keys in Flutter</title>
      <author>Aadityasiva</author>
      <pubDate>Thu, 22 Apr 2021 05:00:43 +0000</pubDate>
      <link>https://dev.to/aadityasivas/protecting-api-keys-in-flutter-619</link>
      <guid>https://dev.to/aadityasivas/protecting-api-keys-in-flutter-619</guid>
      <description>&lt;p&gt;It is always a fear that one day you might end up leaking your API key in a public git repository. In flutter is there are many ways of hiding the API key some are not working and some don't work properly in this article I will be showing you one way to work with API keys in flutter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-see-how-we-can-do-it"&gt;
  &lt;/a&gt;
  Let's see how we can do it
&lt;/h2&gt;

&lt;p&gt;We will be using &lt;a href="https://pub.dev/packages/flutter_dotenv"&gt;this package&lt;/a&gt;&lt;br&gt;
If you are using it in a project &lt;strong&gt;with null safety&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;dependencies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;flutter_dotenv&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^4.0.0-nullsafety.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are using it in a project &lt;strong&gt;without null safety&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;dependencies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;flutter_dotenv&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^3.1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then create a file in the root directory called &lt;code&gt;.env&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For those of you who don't know &lt;strong&gt;what a &lt;code&gt;.env&lt;/code&gt; file is&lt;/strong&gt; it is basically a file in which we store secret variables.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the &lt;code&gt;.env&lt;/code&gt; file you can add your secret API keys in this format&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SUPER_SECRET_API_KEY=This is a super secret API key 
THIS_CAN_BE_CALLED_ANYTHING=This here can be anything like ut4ihyeFn49
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: Never commit these .env files in your version control.&lt;br&gt;
If you are using git version control system add the &lt;code&gt;.env&lt;/code&gt; file to &lt;code&gt;.gitignore&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After making this &lt;code&gt;.env&lt;/code&gt; file add it as an asset in the &lt;code&gt;pubspec.yaml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;assets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flutter pub get
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your &lt;code&gt;main.dart&lt;/code&gt; file load the &lt;code&gt;.env&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter_dotenv/flutter_dotenv.dart'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;DotEnv&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Future&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;DotEnv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;load&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;fileName:&lt;/span&gt; &lt;span class="s"&gt;".env"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//...runapp&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in your code you can load the variables from the &lt;code&gt;.env&lt;/code&gt; file anywhere like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter_dotenv/flutter_dotenv.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'SUPER_SECRET_API_KEY'&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;That's it, thanks for reading hope this short article helps!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>flutter</category>
      <category>security</category>
    </item>
    <item>
      <title>There's nothing wrong with Inline Styles </title>
      <author>Shubham Jain</author>
      <pubDate>Thu, 22 Apr 2021 04:47:28 +0000</pubDate>
      <link>https://dev.to/shubhamjain/there-s-nothing-wrong-with-inline-styles-26o7</link>
      <guid>https://dev.to/shubhamjain/there-s-nothing-wrong-with-inline-styles-26o7</guid>
      <description>&lt;p&gt;A frequent criticism leveled against TailwindCSS is that it's just a fancy way to write inline styles. Usually, people counter by saying you can't create a design system with inline styles or limit the number of options.&lt;/p&gt;

&lt;p&gt;However, I would say the idea is not far from the truth—TailwindCSS is just a nicer/shorter way to write inline styles, one that supports media queries and pseudo-elements as well.&lt;/p&gt;

&lt;p&gt;The earliest implementation of Tailwind's approach I saw was in &lt;a href="https://acss.io/"&gt;AtomicCSS&lt;/a&gt;. A framework I laughed off when I first came across it.&lt;/p&gt;

&lt;p&gt;Tailwind introduces some design system ideas over pure inline styles, but overall the underlying ideas are the same. I see no reason why I won't be as productive with AtomicCSS as I am with Tailwind. &lt;/p&gt;

&lt;p&gt;Once you let go off the notion that inline styles are &lt;em&gt;inherently&lt;/em&gt; bad, you will become more accepting to Tailwind's ideas. &lt;/p&gt;

&lt;p&gt;In the ideal world, we will have a frozen set of design components and we will never have to write CSS except on very rare occasions. The components are updated rarely and there's no ambiguity about what belongs where.&lt;/p&gt;

&lt;p&gt;But the real world doesn't work that way. Here's what I have seen happen at companies:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You write the same styles again and again (flex, font-sizes, spacing).&lt;/li&gt;
&lt;li&gt;You end up creating tens of container components that do the same thing. &lt;/li&gt;
&lt;li&gt;You try to generalize components, only for a new requirement to come in which throws your assumptions out the window. &lt;/li&gt;
&lt;li&gt;You create a Card component, but having to fulfill more and more requirements, you have made it so generic that in the end, it's just a white box with box-shadows.&lt;/li&gt;
&lt;li&gt;You want to reuse the style of the X component, but realize that your new component is called Y. So, you can't help copying the same styles again. &lt;/li&gt;
&lt;li&gt;The stylesheet has grown to more than a megabyte, most of it is composed of the same styling applied repeatedly.&lt;/li&gt;
&lt;li&gt;You want to use Modal component, but you see that it gives way too much padding. So, you write more styles to override them.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These problems are quite universal. Unless your team is really small, writing CSS the way people idolize is extremely hard. Often, it never works. &lt;/p&gt;

&lt;p&gt;If the problem is so universal, maybe we ought to approach things differently.&lt;/p&gt;

&lt;p&gt;Inline styles solve it perfectly. You can use the styles you want without worrying about components. If you see a common component emerging, just extract it. The team won't waste time writing CSS for stupidly simple things, thinking names, and discussing how to modularize the CSS code. The evolution would be organic. &lt;/p&gt;

&lt;p&gt;Is it ideal? NO, of course. But, seeing the real-world scenarios, it's much better than alternatives.&lt;/p&gt;

&lt;p&gt;It's just like refactoring. Time and time again, I have seen programmers who write duct-taped code, and try to clean it up later are much more productive than the ones who spend an entirety discussing the right approach. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/davidwalshblog/status/1098960128794128384"&gt;https://twitter.com/davidwalshblog/status/1098960128794128384&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even when I am not using TailwindCSS, I approach building frontend by writing solely using inline CSS. Once I have everything ready, I create the classes. Because then, I have a much better idea of how to organize my CSS.&lt;/p&gt;

&lt;p&gt;Inline styling is a tool that's needlessly been demonized. It's often much better than alternatives. And that's why TailwindCSS is winning. &lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tailwindcss</category>
      <category>opinion</category>
    </item>
    <item>
      <title>Time Saving - Seven Absolutely Essential Tools for Front End Developers</title>
      <author>koshti Rahul</author>
      <pubDate>Thu, 22 Apr 2021 04:43:46 +0000</pubDate>
      <link>https://dev.to/gnral_opll/time-saving-seven-absolutely-essential-tools-for-front-end-developers-k2c</link>
      <guid>https://dev.to/gnral_opll/time-saving-seven-absolutely-essential-tools-for-front-end-developers-k2c</guid>
      <description>&lt;p&gt;There has been a great improvement in the kind of web development tools that are available to front end developers these days. These are well-tested frameworks and libraries that improve workflows as well as the quality of your deliverable. These tools also present a wide range of opportunities for responsive designing like advanced plugins, code-streamlining processes, browser add-ons, etc. However, the large number of these tools can make it complicated for a front end web developer website to select the best ones. Here is a shortlist of the tools that you will love.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-sublime-text-"&gt;
  &lt;/a&gt;
  1. Sublime Text :
&lt;/h1&gt;

&lt;p&gt;Here’s a well-designed, extremely efficient, and agile code editor that will make your life simple. Apart from its comprehensive range of features functions, it also provides a myriad of keyboard shortcuts. This means that you can now simultaneously edit your code or quickly navigate to files, lines, and symbols. If you are spending a large amount of time with your editor, this will certainly lead to time saving.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-twitter-bootstrap-"&gt;
  &lt;/a&gt;
  2. Twitter Bootstrap :
&lt;/h1&gt;

&lt;p&gt;This is one of the most widely used user-interface frameworks. If you are a UI developer and designer, you will be impressed by Bootstrap’s extensive UI package. It has been developed by Twitter’s team. As a user interface developers, you need to perform various critical tasks. Bootstrap helps you with modal object building, stylesheet normalizing, adding Javascript plugins, and more.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-chrome-developer-tools-"&gt;
  &lt;/a&gt;
  3. Chrome Developer Tools :
&lt;/h1&gt;

&lt;p&gt;This platform can help front end developers with editing their HTML as well as CSS in real-time. It can also be used to debug Javascript. In addition to that, it also lets you have a glance of your website’s performance. This tool is bundled as well as available&lt;/p&gt;

&lt;p&gt;Read More :: &lt;a href="https://cmsinstallation.blogspot.com/2021/04/seven-absolutely-essential-tools-for.html"&gt;https://cmsinstallation.blogspot.com/2021/04/seven-absolutely-essential-tools-for.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>design</category>
      <category>html</category>
      <category>programming</category>
    </item>
    <item>
      <title>Time Saving - Sublime Text 3 Plugins That Every Developer Must Use</title>
      <author>koshti Rahul</author>
      <pubDate>Thu, 22 Apr 2021 04:07:49 +0000</pubDate>
      <link>https://dev.to/gnral_opll/sublime-text-3-plugins-that-every-developer-must-use-a2e</link>
      <guid>https://dev.to/gnral_opll/sublime-text-3-plugins-that-every-developer-must-use-a2e</guid>
      <description>&lt;p&gt;Sublime Text 3 is one of the most popular free IDE for your code, its easy to use and configure.&lt;br&gt;
Sublime Text is a shareware cross-platform source code editor with a Python application programming interface (API). It natively supports many programming languages and markup languages, and functions can be added by users with plugins, typically community-built and maintained under free-software licenses.&lt;/p&gt;

&lt;p&gt;Today we are going to see some useful extension of sublime.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-package-control"&gt;
  &lt;/a&gt;
  1. Package Control
&lt;/h1&gt;

&lt;p&gt;When you just installed Sublime Text 3 you should immediately install Package Control Plugin. It is the most basic plugin that will allow you to easily and without any problems install, delete, redact other plugins. As I said earlier, after installing this plugin you don’t have to do this anymore. &lt;/p&gt;

&lt;p&gt;Use command ctrl+shift+p (for Windows or Linux) or cmd+shift+p (For Mac)&lt;br&gt;
Type “Install Package Control” and press enter&lt;br&gt;
sublime text 3 plugins,sublime text 3 plugin tutorial,sublime text 3 vue js plugin,sublime text 3 todo plugin,sublime text 3 plugins for php developme&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-emmet"&gt;
  &lt;/a&gt;
  2. Emmet
&lt;/h1&gt;

&lt;p&gt;This plugin is second in popularity and one of the most useful too. Emmet helps you to write a lot less, It lets you use abbreviations that automatically deflate into fully functional code&lt;/p&gt;

&lt;p&gt;Everything that you will need is to use Package Control as we said earlier. Write “Install Package Control” again and then write Emmet and press enter&lt;/p&gt;

&lt;p&gt;sublime text 3 plugins,sublime text 3 plugin tutorial,sublime text 3 vue js plugin,sublime text 3 todo plugin,sublime text 3 plugins for php developme&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-alignment"&gt;
  &lt;/a&gt;
  3. Alignment
&lt;/h1&gt;

&lt;p&gt;Alignment is a useful tool for aligning multiple sections or multi-line sections, which means is you can align multiple selections, or lines, via delimiter such as =. Simply type ctrl + alt + a on Windows, or cmd + ctrl + a on a Mac. And again use “Install Package Control” command to install it.&lt;/p&gt;

&lt;p&gt;Read More :: &lt;a href="https://cmsinstallation.blogspot.com/2021/04/sublime-text-3-plugins-that-every.html"&gt;https://cmsinstallation.blogspot.com/2021/04/sublime-text-3-plugins-that-every.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>html</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>3 Smart Things Worth Spending Your Money on as a Developer</title>
      <author>Programming Facts</author>
      <pubDate>Thu, 22 Apr 2021 03:54:21 +0000</pubDate>
      <link>https://dev.to/programmingfac1/3-smart-things-worth-spending-your-money-on-as-a-developer-2db9</link>
      <guid>https://dev.to/programmingfac1/3-smart-things-worth-spending-your-money-on-as-a-developer-2db9</guid>
      <description>&lt;p&gt;Have you ever thought about how much money you wasted on useless stuff trying to learn to code?&lt;/p&gt;

&lt;p&gt;We live in a society where people want us to buy their products. They show up in our socials’ homes screaming: “buy it!”. It’s so easy, for beginners, in particular, to get caught up in a spending loop buying resources they don’t really need.&lt;/p&gt;

&lt;p&gt;I’ve found myself in this position so many times. My Udemy account is full of courses I never even opened. I’ve bought so many coding books I’ve never even read.&lt;/p&gt;

&lt;p&gt;It just feels there is always more to know, and unless I buy 100 JavaScript courses, I won’t fill this gap.&lt;/p&gt;

&lt;p&gt;So is there a solution to all of this?&lt;/p&gt;

&lt;p&gt;My answer is: yes. You just need to set your priorities straight for your money and ask yourself a couple of questions before buying anything.&lt;/p&gt;

&lt;p&gt;Read More :: &lt;a href="https://cmsinstallation.blogspot.com/2021/04/3-smart-things-worth-spending-your.html"&gt;https://cmsinstallation.blogspot.com/2021/04/3-smart-things-worth-spending-your.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>design</category>
      <category>programming</category>
      <category>php</category>
    </item>
    <item>
      <title>My first python project!</title>
      <author>Hachikoi</author>
      <pubDate>Thu, 22 Apr 2021 02:56:01 +0000</pubDate>
      <link>https://dev.to/8koi/my-first-python-project-1ki9</link>
      <guid>https://dev.to/8koi/my-first-python-project-1ki9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tick-tack-toe"&gt;
  &lt;/a&gt;
  Tick Tack Toe
&lt;/h1&gt;

&lt;p&gt;From a course I bought in Udemy&lt;br&gt;
I think I covered any possible type error that the user could make, please tell me if I´m missing something!!&lt;/p&gt;

&lt;p&gt;What it does?&lt;br&gt;
-Ask the user to choose between X or O as a marker &lt;br&gt;
-Random to choose who is first&lt;br&gt;
-Verifies it´s an empty space&lt;br&gt;
-Then places the marker in a place that the player chooses&lt;br&gt;
-Verifies is someone has won&lt;br&gt;
-So on, so on&lt;br&gt;
-At the end ask if they want to play again&lt;/p&gt;

&lt;p&gt;I first try it without any help for 4 days,&lt;br&gt;
then finished whit some kind of walkthrough they give and then I mixed what I like and what they used to optimize my project! Whit a total of 7 days and approx. 800 written lines of code!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pro-tip"&gt;
  &lt;/a&gt;
  Pro tip:
&lt;/h3&gt;

&lt;p&gt;To upload code just go to the programs you use, select all the code + tab + control c&lt;br&gt;
Then just paste it here!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  code
&lt;/h2&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import random

def final_display(display1,numepad):  #Yei! すき！好き！スキ！1-9r
    print(''*3)
    print(display1[:3],'°-°',numepad[:3])
    print('---------------',' + ','---------')
    print(display1[3:6],'°_°',numepad[3:6])
    print('---------------',' + ','---------')
    print(display1[6:],'°_°',numepad[6:])
    print('---------------',' + ','---------')

def choice_xy():
    print("Welcome to my tic tac toe game!~")
    choice = input("Do you want X or O?: ")
    while choice.lower() not in ['x','o']:
        choice = input("I said X or O?... ")
    if choice.lower() == 'x':
        return 'X','O'

    else:
        return 'O','X'

def place_symbol(display2,symbol,where):  #just places the correct symbol
    display2[where] = symbol

def win_check(board,mark):
    #Checks for all the Rows
    #then all the Columns
    #at least if the diagonals are equial to each other and the Marker
    if board[0] == mark and board[1] == mark and board[2] == mark:
        return True
    elif board[3] == mark and board[4] == mark and board[5] == mark:
        return True
    elif board[6] == mark and board[7] == mark and board[8] == mark:
        return True
    elif board[0] == mark and board[3] == mark and board[6] == mark:
        return True
    elif board[1] == mark and board[4] == mark and board[7] == mark:
        return True
    elif board[2] == mark and board[5] == mark and board[8] == mark:
        return True
    elif board[6] == mark and board[4] == mark and board[2] == mark:
        return True
    elif board[0] == mark and board[4] == mark and board[8] == mark:
        return True
    else:
        return False

def random_turn():
    turn = random.randint(1,2)
    if turn == 1:
        #print('Player 1')
        return turn
    else:
        #print('Player 2')
        return turn

def available_check(display3,position3):
    #Returns bool to check is the space is available
    return not display3[position3-1].isupper()
    #True == Occupied, False == Empty

def full_display(display7):
    #Checks if the display is full == True
    counter = 0
    for i in [1,2,3,4,5,6,7,8,9]:
        if display7[i-1] in 'X' or display7[i-1] in 'O':
            counter += 1
    return counter == 9

def where_put_it():  #Ask where to put the marker and verifies is in 1-9
    where = input('Where do you want to make your move?(1-9) ')
    while where not in ('1','2','3','4','5','6','7','8','9'):
        where = input('違う Invalid move, try again .... ')
    where2 = int(where)
    return where2

def play_again_ask():   #If wanna play again, returns True
    choice = input('Wanna play again?(Yes or No): ')
    while choice.lower() not in ['yes', 'no']:
        choice = input('あのさ。。Yes or No: ')
    if choice.lower() == 'yes':
        return 'yes'
    else:   #Just can be 'yes' or 'no'
        return 'no'

def pc_gaming():
    display0_0 = [' ',' ',' ',
                  ' ',' ',' ',
                  ' ',' ',' ']
    numepad = [1, 2, 3,
               4, 5, 6,
               7, 8, 9]
    player1S,player2S = choice_xy()
    if random_turn() == 1:
        turnCast = 1
        print('Player 1 goose first~')
    else:
        turnCast = 2
        print('Player 2 goose first~')

    while not full_display(display0_0):
        if turnCast % 2 == 0:
            print('Player 2´s turn~')
            final_display(display0_0, numepad)
            castPosition = where_put_it()-1  # Checks is in 1-9
            ##################
            while display0_0[castPosition].isupper():
                print('-Occupied field-')
                castPosition = where_put_it()-1
            place_symbol(display0_0,player2S,castPosition)
            if win_check(display0_0,player2S):
                final_display(display0_0, numepad)
                print('Player 2 WINS!')
                break

        elif turnCast % 2 != 0:
            print('Player 1´s turn~')
            final_display(display0_0,numepad)
            castPosition = where_put_it()-1  # Checks is in 1-9
            ##############
            while display0_0[castPosition].isupper():
                print('-Occupied field-')
                castPosition = where_put_it()-1
            place_symbol(display0_0,player1S,castPosition)
            if win_check(display0_0,player1S):
                final_display(display0_0, numepad)
                print('Player 1 WINS!')
                break

        turnCast += 1
    if not(win_check(display0_0,player1S) and win_check(display0_0,player1S)) and full_display(display0_0):
        print('Nobody wins...')

pc_gaming()
response = play_again_ask()
if response.lower == 'yes':
    pc_gaming()
else:
    print('Thanks for playing!')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Scientific Programming School</title>
      <author>Scientific Programming School</author>
      <pubDate>Thu, 22 Apr 2021 02:55:06 +0000</pubDate>
      <link>https://dev.to/scientificschool/scientific-programming-school-123e</link>
      <guid>https://dev.to/scientificschool/scientific-programming-school-123e</guid>
      <description>&lt;p&gt;The ‘&lt;strong&gt;Learn Scientific Programming&lt;/strong&gt;’ project in 2016 started as an eLearning blog to demonstrate the use of scientific programming languages in processing Big data. In the year 2020, we founded a next generation learning platform for creating and delivering interactive and adaptive courses on the advanced topics of Linux, Devops, HPC  Scientific programming languages and Data Sciences: &lt;strong&gt;Scientific Programming School&lt;/strong&gt; &lt;a href="https://scientificprogramming.io/"&gt;https://scientificprogramming.io/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>Ludo CSS Grid!</title>
      <author>Victor Navarrete</author>
      <pubDate>Thu, 22 Apr 2021 02:33:28 +0000</pubDate>
      <link>https://dev.to/vitoconavarrete/ludo-css-grid-4c84</link>
      <guid>https://dev.to/vitoconavarrete/ludo-css-grid-4c84</guid>
      <description>&lt;p&gt;Siempre me ha llamado la atención los juegovideos, aunque soy algo nulo en motores gráficos y solo me limito a lo que pueda realizar con canvas y svg animado, html, etc.. he estado trabajando en la ui de un juego ludo solo con css, para experimentar con mis habilidades css y como aplico algunos css de terceros en el proyecto.&lt;/p&gt;

&lt;p&gt;Ahora que he logrado algo bien satisfactorio mejore la grilla para que tenga las posiciones tal cual en el tablero y sea en teoría funcional , no solo una grilla imitando un tablero.&lt;/p&gt;

&lt;p&gt;He estado revisando react y vue, para agregar interactividad y hacerlo funcional.. además de que pueda de responder de forma dinámica a los cambios en los datos... después de un tiempo lo hice con angularjs.. si, el primer angular que solo es para front js.. basado en uso del dom como jquery etc. puede no ser una opción mas moderna, pero me ha dado la libertad de crear estructuras de datos comprensibles y mantenibles para poder hacer las interacciones y reglas del juego.&lt;/p&gt;

&lt;p&gt;Aún todo esto va en desarrollo y parte de la ui la deje en Codepen&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/vitoconavarrete/embed/NWdMGNm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Mi proyecto avanza y  poco a poco subo actualizaciones, acá puedes ver ciertos avances aun no funcionales &lt;a href="https://loodo.netlify.app/"&gt;Versión online&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Espero dejarlo funcional con las siguientes características: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;juego funcional&lt;/li&gt;
&lt;li&gt;usuarios, rooms e interacción realtime (websocket)&lt;/li&gt;
&lt;li&gt;invitaciones a amigos por para jugar o visualizar un juego&lt;/li&gt;
&lt;li&gt;chat&lt;/li&gt;
&lt;li&gt;videochat&lt;/li&gt;
&lt;li&gt;y otras ideas extras &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Todo esto es un pasatiempo, para probarme simplemente que puedo. si alguien tiene sugerencias de como implementar alguno de mis grandes items, los leo con entusiasmo.&lt;/p&gt;

&lt;p&gt;Saludos!! ✌️&lt;/p&gt;

</description>
      <category>ludo</category>
      <category>css</category>
      <category>ui</category>
      <category>hobby</category>
    </item>
    <item>
      <title>We Are Looking for a Data Scientist Remote in USA</title>
      <author>mariacris431</author>
      <pubDate>Thu, 22 Apr 2021 01:40:48 +0000</pubDate>
      <link>https://dev.to/mariacris431/we-are-looking-for-a-data-scientist-remote-in-usa-24ei</link>
      <guid>https://dev.to/mariacris431/we-are-looking-for-a-data-scientist-remote-in-usa-24ei</guid>
      <description>&lt;p&gt;Hi everyone! Iaso AI is looking for a Senior Data Scientist. "We are a growing machine learning medical platform.We are working on tough and exciting problems, and need experienced senior level engineers with diverse backgrounds to make our vision a reality".&lt;/p&gt;

&lt;p&gt;Skills and experience needed: 3+ years of experience in: Data science, Python.&lt;br&gt;
1+ year of experience in Machine learning, AWS. &lt;/p&gt;

&lt;p&gt;Compensation: USD$120K to 180K per year.&lt;/p&gt;

&lt;p&gt;Location: Remote job from United States Residents &lt;/p&gt;

&lt;p&gt;Language: English Conversational&lt;/p&gt;

&lt;p&gt;You can apply easily using the following link: &lt;a href="https://jobs.torre.co/3ar0udy"&gt;https://jobs.torre.co/3ar0udy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't have a torre.co account yet, I can help you set it up and then submit the application for you.&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>datascientist</category>
      <category>python</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Different Flavours of Events</title>
      <author>Valerii Udodov</author>
      <pubDate>Thu, 22 Apr 2021 01:25:49 +0000</pubDate>
      <link>https://dev.to/vudodov/different-flavours-of-events-2ceo</link>
      <guid>https://dev.to/vudodov/different-flavours-of-events-2ceo</guid>
      <description>&lt;p&gt;It has been a while since the word &lt;em&gt;event&lt;/em&gt; became a buzzword in the tech community. And ultimately turned into an obfuscated term. It is used in a mixture of technical contexts which often overlap and create a whole new level of confusion. Check this out, there are Event Stores, event streams, event buses, domain events, and so forth and so on. Moreover, you'll find events in the heart of different modeling technics (e.g. event modeling and event storming).&lt;/p&gt;

&lt;p&gt;In all these contexts &lt;em&gt;event&lt;/em&gt; might or might not be the same thing. And it is up to us to decide, but the decision comes with some consequences. We will try to remove ambiguity from the term, reduce boundaries opaqueness, and in the end we will discuss the consequences I mentioned above.&lt;/p&gt;

&lt;p&gt;Here's a quick agenda... First, we'll define the meaning and distinguishable properties of &lt;em&gt;events&lt;/em&gt; and what they share disregard where they are used. We'll go over some of the major event application areas and focus on the differences between them. Finally, we'll talk about boundaries between those areas. And how easy it is to create an event-driven ball of mud.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#events-%E2%8A%86-messages"&gt;
  &lt;/a&gt;
  Events ⊆ Messages
&lt;/h2&gt;

&lt;p&gt;Let's first figure out where the term &lt;em&gt;event&lt;/em&gt; takes its roots and what all &lt;em&gt;events&lt;/em&gt; have in common.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#messages"&gt;
  &lt;/a&gt;
  Messages 📨
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Message&lt;/em&gt; is a generic term for an independent, data blob usually with some meta-data attached to it, sent from the sender to the receiver. Think of messages on your mobile phone or emails in your inbox. Messages tend to have fixed pre-defined schema for the payload and meta-data it is carrying. However, the message payload is not mandatory and might be empty, which makes a message simply a signal. Message Name (or/and any other meta-data) is what helps the receiver to distinguish one message from another and adjust the expectation on how data inside will look and what to do with it.&lt;/p&gt;




&lt;p&gt;ℹ️ Let's stop here for a second and destroy one of the myths around messages.&lt;/p&gt;

&lt;p&gt;To do that we need to get back to the mobile messengers ✉️📲. Why are they so popular? Don't you think they had to die a long time ago together with ICQ (if you old enough to remember it 👴)? Appears message-based communication has a very strong advantage against any other type of communication. &lt;em&gt;Asynchronicity&lt;/em&gt;. It does not require you to respond or take any action immediately. &lt;br&gt;
You know when you ask a question, you see someone read it ✔, but they don't respond 😡. Asynchronicity...&lt;/p&gt;

&lt;p&gt;The myth is that messages by their nature bring asynchronicity in communication. That's not true, messages don't guaranty asynchronicity... The communication topology (dispatching mechanism) is what guarantees it.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#events"&gt;
  &lt;/a&gt;
  Events
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0LwnHyjy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kj0xlcug4u7y4cnysdfq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0LwnHyjy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kj0xlcug4u7y4cnysdfq.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All events are messages, but the opposite is not necessarily true. Hence events are a subset of messages and do inherit all major message properties. Similarly to messages events have two major responsibilities, &lt;strong&gt;signalize the receiver&lt;/strong&gt; (we usually call receiving system: consumer) and together with the signal &lt;strong&gt;carry information&lt;/strong&gt; to enrich the signal if necessary.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#the-name"&gt;
  &lt;/a&gt;
  The Name
&lt;/h4&gt;

&lt;p&gt;One of major distinguishing characteristic for events is that they happened. Event is a &lt;strong&gt;fact that happened&lt;/strong&gt; in the sending system (we usually call the sending system: emitter). Thus event names are always in the past tense. This claim implies and emphasizes that you can't change an event or influence it in any way if it has already happened (unless you can travel in time). All you can do as a consumer is either receive and consume it or not.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#destination-unknown"&gt;
  &lt;/a&gt;
  Destination unknown
&lt;/h4&gt;

&lt;p&gt;Events don't have a destination. Another important factor is that the emitter does not know who is going to consume events if ever would. Events are just emitted... and thereafter the &lt;em&gt;dispatcher&lt;/em&gt; delivers events to all consumers. It is the consumer's responsibility to let the &lt;em&gt;dispatcher&lt;/em&gt; know its interest in certain events. There might be a single consumer, multiple or none, it doesn't matter from the emitter perspective.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dispatching"&gt;
  &lt;/a&gt;
  Dispatching
&lt;/h2&gt;

&lt;p&gt;So far we went through major shared characteristics of events. We figured that events themselves don't guarantee asynchronicity, they are immutable and don't have a final address. Further properties are defined by both the dispatching mechanism and application areas. Let's go over some of the most popular ones...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h3&gt;

&lt;p&gt;The first application area we'll look at is a database.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The fundamental idea of Event Sourcing is that of ensuring every change to the state of an application is captured in an event object, and that these event objects are themselves stored in the sequence they were applied for the same lifetime as the application state itself.&lt;br&gt;
-- &lt;a href="https://martinfowler.com/eaaDev/EventSourcing.html"&gt;Martin Fowler, Event Sourcing&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#the-principle"&gt;
  &lt;/a&gt;
  The principle
&lt;/h4&gt;

&lt;p&gt;Instead of saving the current state of the system in a bunch of tables or documents, save everything that happens in the system in a series of events. The approach is known as Event Sourcing and the place to store events is known as an Event Store. &lt;br&gt;
Event Store is not necessarily a separate database (while it might be), it well maybe just a separate table in your database. Event Store acts as a source of truth for the system state. &lt;br&gt;
One of the biggest advantages of Event Sourcing against e.g. the relational database is that at any given point in time we can answer not only the question "What is the current system state?", but also "How did we get there?", which is pretty valuable if you ever tried to fix production bugs 🐞..&lt;/p&gt;



&lt;p&gt;📚 Story time&lt;br&gt;
Think of "Hansel and Gretel" 👦👧 by Brothers Grimm. Hansel takes a slice of bread and leaves a trail of bread crumbs for them to follow home. Why does he leave them? Because he needs to know how did he get to where he is now.&lt;br&gt;
Your application probably has &lt;em&gt;100 x n&lt;/em&gt; ways to get from arbitrary state A to arbitrary state B. Wouldn't it be helpful to know which exact route brought the system to the current state?&lt;/p&gt;





&lt;p&gt;💭 I use the word &lt;em&gt;system&lt;/em&gt; a lot, but in the context of this article, it is interchangeable to domain or application, or service...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A system is a group of interacting or interrelated elements that act according to a set of rules to form a unified whole. A system, surrounded and influenced by its environment, is described by its boundaries, structure and purpose and expressed in its functioning.&lt;br&gt;
-- &lt;a href="https://en.wikipedia.org/wiki/System"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;


&lt;/blockquote&gt;

&lt;p&gt;Usually, Event Sourcing implies the usage of &lt;a href="https://valerii-udodov.com/tags/cqrs/"&gt;the Command Query Responsibility Segregation (CQRS) pattern&lt;/a&gt;. It would be challenging to use Event Sourcing without CQRS, so usually if there's an Event Sourcing in use, CQRS is a given. &lt;/p&gt;



&lt;p&gt;🔍 If we zoom out for a second and think of data storage in general... &lt;/p&gt;

&lt;p&gt;We'd be able to claim that data storage is (most of the time) used to obviously store and occasionally access the data. The ratio between reads and writes heavily dependent on the problematic domain and always varies. Not even from application to application, but from time to time in a single application. And since the ratio is changing, at certain times either reads or writes start dominating and become a bottleneck. However, Event Sourcing has conceptual built-in segregation between "read" and "write". Thus both read parts and write parts can scale independently...&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#writes"&gt;
  &lt;/a&gt;
  Writes 🖊️
&lt;/h4&gt;

&lt;p&gt;As you can guess by now, all "writes" are done through saving events in the Event Store. Since the Event Store is a source of truth for the whole system, all validations must be done against the replayed state from the Event Store. Worth mentioning another key element of event sourcing- &lt;em&gt;event streams&lt;/em&gt;. An &lt;em&gt;event stream&lt;/em&gt; is a special name for a group of events that have happened to a single whole. Events belong to the stream. Events in the stream are ordered strictly by time. Similarly, how your Facebook profile represents a series of events that happened to you since your birthday, an event stream represents a series of events that have been happening to some business entity.&lt;/p&gt;



&lt;p&gt;ℹ️ It is not necessary, but very common to use a third-party framework to facilitate events emission and dispatching. And depending on your preference of framework you'll find additional functionality such as snapshoting, dashboards, projection re-play, etc. This stuff is out of scope of current article. Maybe later 🤷‍♂️.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#reads"&gt;
  &lt;/a&gt;
  Reads 👓
&lt;/h4&gt;

&lt;p&gt;Now "reads" have technically nothing to do with the Event Store itself, but more with the dispatching framework that is in charge. You see, we usually don't read directly from the Event Store to show the data to the user. User data is usually stored in independent "flat" views or &lt;em&gt;projections&lt;/em&gt; of events. Similarly how the GitHub projects a series of commits in the Pull Request file view as a final view of all your changes applied to files. Projections show the final/desired look based on the events in the Event Store. It is a common practice to keep your projections/view data in a &lt;a href="https://en.wikipedia.org/wiki/Denormalization"&gt;denormalized&lt;/a&gt; shape, tuned for a specific output.&lt;/p&gt;

&lt;p&gt;The projecting process is usually not happening inline, but asynchronously in the background process(daemon 👿), moving your system from strongly consistent to eventually consistent. It is a fair expectation to have from the event sourcing framework to facilitate emission, distribution, and dispatching of events to special objects that will build desired &lt;em&gt;projections&lt;/em&gt;. These objects are usually called &lt;em&gt;projectors&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3i9BzAkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p731oa5kbr8krizv2l8q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3i9BzAkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p731oa5kbr8krizv2l8q.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#asynchronous-services"&gt;
  &lt;/a&gt;
  Asynchronous services
&lt;/h3&gt;

&lt;p&gt;The second application area is service communication, to be more precise asynchronous service communication.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i69Nunod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/695594250315010050/SZXk1Z6b_normal.jpg" alt="Mathias Verraes profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Mathias Verraes
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @mathiasverraes
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      There are only two hard problems in distributed systems:  2. Exactly-once delivery 1. Guaranteed order of messages 2. Exactly-once delivery
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:40 PM - 14 Aug 2015
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=632260618599403520" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=632260618599403520" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=632260618599403520" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;You can construct your event bus leveraging message brokers. Major cloud providers have either dedicated event bus as a service or queueing and messaging services that you can employ to build your bus in the cloud. Of course, there are some message brokers on the market that are dedicated to this purpose.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#asynchronicity"&gt;
  &lt;/a&gt;
  Asynchronicity
&lt;/h4&gt;

&lt;p&gt;Nowadays McDonald's still has counters opened for service. The experience might be pretty frustrating though, especially during lunchtime. First, you have to wait in the queue, make an order and wait again while the staff will get your order ready 🍔. &lt;br&gt;
At the same time, everyone behind you is just waiting for your order completion. Funny enough the kitchen might not be even 50% busy. Of course, we can increase the number of counters. But fortunately, there's another way to look at this problem. Terminals. &lt;br&gt;
The queues at the terminals move heaps faster. The major reason is that after you complete your order, you don't wait for it at the terminal blocking rest of the queue. Instead, you receive an order number, you can take a seat and use the number to validate whether your order is ready or not.&lt;br&gt;
The first example with counters illustrates blocking synchronous environment. While the second example demonstrates an asynchronous approach where every actor in the process performs the task independently. And since the order collection increases the pace, the bottleneck moves from the order collection to the kitchen. What that essentially means is that your order is now dependent on the kitchen performance rather than on the number of counters, which kinda makes sense, isn't it?&lt;/p&gt;

&lt;p&gt;With an event-driven approach to services communication we can perform the same trick, but with downstream services. Our upstream service no longer needs to wait for downstream services to finish execution before proceeding. The upstream service just emits an event and that is where the responsibility of the upstream service ends.&lt;br&gt;
Further, the dispatcher (event bus) picks up the message and delivers it to all subscribed services.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ai7z7-vy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3nyebj5mtyxfu49o7ij.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ai7z7-vy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3nyebj5mtyxfu49o7ij.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dependency-inversion"&gt;
  &lt;/a&gt;
  Dependency Inversion
&lt;/h4&gt;

&lt;p&gt;Together with asynchronicity services become loosely coupled. This is something that will improve services boundaries hence integrity.&lt;/p&gt;

&lt;p&gt;Let's get back to our imaginary upstream service for a minute. It does not need to be aware of downstream services that depend on it. We simply flip the "who knows what" in the right way.&lt;/p&gt;




&lt;p&gt;💭 The truth is, asynchronicity is not necessary for building loosely coupled services, although it won't hurt. &lt;br&gt;
Your upstream might produce event feeds with a help of &lt;a href="https://en.wikipedia.org/wiki/Atom_(Web_standard)"&gt;Atom&lt;/a&gt; or any similar web feed technology. Downstream services will have to do polling and check for updates and if something changed, pull new events from the feed and remember the last read update.&lt;/p&gt;




&lt;p&gt;Imagine a car insurance application. Usually, your insurance policy depends on where you live. Hence when you change an address, the insurance policy changes as well. You can imagine there might be a billion extra things that need to happen after that... a new insurance statement must be generated, a monthly premium has to be re-calculated, five hundred notifications need to be sent, and so forth, and so on...&lt;/p&gt;

&lt;p&gt;Now let's dig a bit deeper and imagine that we have a separate service for every such action. We have an address service, which UI can leverage to change an address. The payment service, the statement service, the email notification service, who knows what else? the fax service 📠? etc. &lt;br&gt;
Now the question is, does our address service need to know about all this stuff? Do we need to wait for all these processes to finish before releasing UI and allowing a user to move on? &lt;br&gt;
The question is of course rhetorical. The only thing that the address service needs to do is validate and change an address and finally emit an event "The address has been changed to this and that". That's it. Rest is on other services to process that event and of course on an event bus to dispatch properly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#streaming"&gt;
  &lt;/a&gt;
  Streaming
&lt;/h3&gt;

&lt;p&gt;I like to refer to &lt;em&gt;event streaming&lt;/em&gt; as to a more intense variation of event-driven architecture, EDA on steroids if you will. In general, it has nothing that we have not discussed yet. An event is still an event, it has all quirks and features we discussed before, events still have to be delivered in a strict order to all consumers. The standing-out characteristic is that every next delivered event decreases the value of the previous event. It happens due to shifted priorities. Delivery and processing time gains priority over pretty much everything else- over the lifetime of an event, its value after delivery, occasionally even over consistency in delivery (yup, sometimes it is acceptable to lose an event or two).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AS17NXCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4k2wpp1xdmp21s5eo37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AS17NXCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4k2wpp1xdmp21s5eo37.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Think of the map where you can track your Uber Eats courier after you submit an order. As long as you know where your food is now, at this very moment, you don't care where it was a second ago, even less you care where it was a minute ago, but you want those updates to keep coming and be accurate. Moreover, after your food has been delivered, you probably don't care about any of that data anymore at all.&lt;/p&gt;

&lt;p&gt;Thus &lt;em&gt;event streaming&lt;/em&gt; and &lt;em&gt;event stream processing&lt;/em&gt; are technics I'd use when strong consistency is not an option, hence we need to leverage events to provide a constant data flow and keep processing incoming data as soon as possible, bringing the eventuality to a bare minimum. You might meet it by different names "real-time processing", "complex event processing", "event stream processing".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boundary-trap"&gt;
  &lt;/a&gt;
  Boundary trap ⚠️
&lt;/h3&gt;

&lt;p&gt;There's a trap...&lt;/p&gt;

&lt;p&gt;It is right in between the event-sourced service and the outside world. Imagine that we have a service that represents a single whole and it uses event sourcing. Now let's add a few more services and finally an event bus between them. Do you see where I'm going?&lt;br&gt;
It is very tempting to broadcast your internal service events out to all other services through the event bus. And it might be a good idea, butt 🍑... often it is not.&lt;/p&gt;




&lt;p&gt;🎥 There is a great talk that &lt;a href="https://twitter.com/vladikk?lang=en"&gt;Vladik Khononov&lt;/a&gt; did a while ago. &lt;a href="https://www.youtube.com/watch?v=ev5k51AxZbI"&gt;The Dark Side Of Events&lt;/a&gt;. I'm encouraging you to watch it if this topic is relevant for you.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#public-and-private-events"&gt;
  &lt;/a&gt;
  Public and Private events
&lt;/h4&gt;

&lt;p&gt;As the first rule of the fight club says "A class should have only one reason to change". You might know it as a &lt;a href="https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html"&gt;Single Responsibility Principle (SRP)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sharing your database entities is usually considered a boo-boo approach. And we can find tones of articles explaining why. Well, most of the arguments are still valid, and bringing events onboard does not change this fact much.&lt;/p&gt;

&lt;p&gt;The event represents a contract. A contract between emitting system and consuming system. Hopefully, most systems do evolve with time. And if they do unavoidably the contracts will follow. In other words, we will be changing events every now and then. That's a given. Once that will start to happen, we will start using words like "breaking changes", "backward compatibility", "versioning" much more often.&lt;/p&gt;

&lt;p&gt;If we want to share something, we better design and build it for that purpose (in this case sharing 🤓). By doing so, any internal change won't end up in potentially contract-breaking change. And vice versa if your consumers need the contract to change, you can do it without changing your database. Sounds obvious, huh?&lt;/p&gt;

&lt;p&gt;This is where the terms &lt;em&gt;private event&lt;/em&gt; and &lt;em&gt;public event&lt;/em&gt; are coming from. Private events are emitted and consumed inside our system/application/domain, where we have full control over the execution environment. Whereas our public events live outside and are caused by private events. We might or might not have control over consuming services outside. Sometimes private and public events also differ in carried payload, therefore slight transformation might be required just before emission outside.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g4rqpSnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xaytepf3tqmuqezz6iok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g4rqpSnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xaytepf3tqmuqezz6iok.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#accumulation"&gt;
  &lt;/a&gt;
  Accumulation
&lt;/h5&gt;

&lt;p&gt;Nevertheless, sometimes it is not enough just to have private events causing public events. If we want to keep our private events granular and each or some private events will cause public events, that would make a lot of unnecessary noise outside. Moreover, it won't give much value to downstream services. As they are probably not interested in every change that occurs in our service.&lt;/p&gt;

&lt;p&gt;This is where the accumulation strategy comes into play. Event accumulation is a process of gradual data accumulation from series of private events to build a single public event. Once the "trigger" private event happens, the public event is released and emitted and accumulation might start all over again.&lt;/p&gt;

&lt;p&gt;Accumulation functionality might sit right on the boundary between the service and the outside. You might know it as an adapter pattern from the &lt;a href="https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)"&gt;Hexagonal Architecture&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;Sometimes the term Event-driven architecture is used exclusively for describing asynchronous services communication. However, I like to use this term to describe the family of approaches, technics, and patterns that engage events in one way or another.&lt;/p&gt;

&lt;p&gt;We ran through some of the Event-driven architecture representatives. I've tried to keep myself as close as possible to the original article line. However, I had to slightly touch base on some conjoint topics. Although I had to limit myself, otherwise I would never finish this article.&lt;/p&gt;

&lt;p&gt;That said more to come, so stay tuned. And follow &lt;a href="https://valerii-udodov.com/"&gt;my blog&lt;/a&gt;&lt;/p&gt;

</description>
      <category>eventdriven</category>
      <category>eventsourcing</category>
      <category>eventstreaming</category>
      <category>architecture</category>
    </item>
    <item>
      <title>List of Tools for DEV</title>
      <author>Walter Nascimento</author>
      <pubDate>Thu, 22 Apr 2021 00:58:17 +0000</pubDate>
      <link>https://dev.to/walternascimentobarroso/list-of-tools-for-dev-4f0f</link>
      <guid>https://dev.to/walternascimentobarroso/list-of-tools-for-dev-4f0f</guid>
      <description>&lt;p&gt;&lt;a href="https://medium.com/walternascimentobarroso-pt/lista-de-ferramentas-para-dev-331da4c979cb"&gt;[Clique aqui para ler em português]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many very interesting sites on the internet, and many help a lot for developers, this is a list of all the sites and tools that I find useful at this moment, and as I find others I will update.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#free-online-courses"&gt;
  &lt;/a&gt;
  Free Online Courses
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://freecourses.github.io/category/html"&gt;https://freecourses.github.io/category/html&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wysiwyg-website-creation"&gt;
  &lt;/a&gt;
  WYSIWYG Website Creation
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://pingendo.com/"&gt;Pingendo Bootstrap 4 builder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.layoutit.com/pt"&gt;LayoutIt! — Interface Builder for CSS Grid and Bootstrap&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#share-text"&gt;
  &lt;/a&gt;
  Share text
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://dontpad.com/"&gt;https://dontpad.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-annotations"&gt;
  &lt;/a&gt;
  Create annotations
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.notion.so/"&gt;https://www.notion.so/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://evernote.com/intl/pt-br"&gt;https://evernote.com/intl/pt-br&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#share-code"&gt;
  &lt;/a&gt;
  Share Code
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://codepen.io"&gt;https://codepen.io&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-diagrams"&gt;
  &lt;/a&gt;
  Create diagrams
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://app.diagrams.net/"&gt;https://app.diagrams.net/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#rest-requests"&gt;
  &lt;/a&gt;
  Rest Requests
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://insomnia.rest/"&gt;https://insomnia.rest/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.postman.com/"&gt;https://www.postman.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#chat-tools"&gt;
  &lt;/a&gt;
  Chat Tools
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://rocket.chat/pt-br/"&gt;https://rocket.chat/pt-br/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://slack.com/intl/pt-br/"&gt;https://slack.com/intl/pt-br/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#css-editing-tools"&gt;
  &lt;/a&gt;
  CSS editing tools
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://bennettfeely.com/clippy/"&gt;https://bennettfeely.com/clippy/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.gradient-animator.com/"&gt;https://www.gradient-animator.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#improving-the-use-of-vscode"&gt;
  &lt;/a&gt;
  Improving the use of VScode
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://vscodecandothat.com"&gt;VS Code Can Do That?&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vscode-extensions"&gt;
  &lt;/a&gt;
  VScode extensions
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments"&gt;https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2"&gt;https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv"&gt;https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig"&gt;https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost"&gt;https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=lukinco.lukin-vscode-theme"&gt;https://marketplace.visualstudio.com/items?itemName=lukinco.lukin-vscode-theme&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-debug"&gt;https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-debug&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-intellisense"&gt;https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-intellisense&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=WakaTime.vscode-wakatime"&gt;https://marketplace.visualstudio.com/items?itemName=WakaTime.vscode-wakatime&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vscode-settings-file"&gt;
  &lt;/a&gt;
  Vscode settings file
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
 




&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;If you have any questions, complaints or tips, you can leave them here in the comments. I will be happy to answer!&lt;/p&gt;

&lt;p&gt;😊😊 See you! 😊😊&lt;/p&gt;

</description>
      <category>tools</category>
      <category>list</category>
      <category>dev</category>
      <category>web</category>
    </item>
    <item>
      <title>What is localStorage?</title>
      <author>Ellaine Tolentino</author>
      <pubDate>Thu, 22 Apr 2021 00:48:53 +0000</pubDate>
      <link>https://dev.to/tolentinoel/what-is-localstorage-3ffh</link>
      <guid>https://dev.to/tolentinoel/what-is-localstorage-3ffh</guid>
      <description>&lt;p&gt;I have encountered utilizing localStorage in one of my projects back when I was in coding bootcamp. I knew of its existence when we were taught of using it to persist data for JWT authentication and that is all I knew of it.&lt;/p&gt;

&lt;p&gt;Little did I know there is more usage of localStorage than tokens! &lt;br&gt;
Let's take a quick look together and learn a little bit of &lt;strong&gt;what is localStorage?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods:
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;setItem(key, value)&lt;/code&gt;.&lt;/td&gt;
&lt;td&gt;Sets the key-value pair you want to store.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;removeItem(name)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;remove the name-value pair identified by name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getItem(name)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;get the value for a given name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;key(index)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;get the name of the value in the given numeric position.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;clear()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;remove all values.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;to get the number of key-value pairs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The localStorage can store only strings for its values. It automatically converts non-string data into a string before storing it.&lt;/p&gt;

&lt;p&gt;An example of that is this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TUvOw1-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qy6btiyhz7q750gan18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TUvOw1-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qy6btiyhz7q750gan18.png" alt="Retrieving data from localStorage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you retrieve data from a Storage object, you’ll always get the data as a string. Same with &lt;em&gt;sessionStorage&lt;/em&gt; and &lt;em&gt;Cookies&lt;/em&gt;. You can also store objects in the localStorage. We would just have to use &lt;code&gt;JSON.stringify()&lt;/code&gt; to store the object.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--72GGOh2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixjmf51zp96k1zemn5nt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--72GGOh2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixjmf51zp96k1zemn5nt.png" alt="Storing objects in localStorage"&gt;&lt;/a&gt;&lt;br&gt;
Like as you can see, once stored, the whole object turns into a string even when trying to get the data back. But this data can be converted back to an object by using &lt;code&gt;JSON.parse()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Just like this;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n_t6Y9JL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m25hnh51mpjfnm2z18iu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n_t6Y9JL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m25hnh51mpjfnm2z18iu.png" alt="JSON parse"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#capacity-amp-usage"&gt;
  &lt;/a&gt;
  Capacity &amp;amp; Usage
&lt;/h2&gt;

&lt;p&gt;Some say that most modern web browsers allow you to store up to 5MB, while others say it's close to unlimited.&lt;/p&gt;

&lt;p&gt;When it comes to storing data, localStorage keeps it until the browser is closed or until you run the &lt;code&gt;localStorage.clear()&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;On my previous project, I used &lt;code&gt;localStorage.clear()&lt;/code&gt; when the user logs out of the web app and clears out any token stored in the browser.&lt;br&gt;
Check it out here on our handleLogout function;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i0L6n-cC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/meuvnjox8g7raltpa756.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i0L6n-cC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/meuvnjox8g7raltpa756.png" alt="handleLogout function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have also used localStorage in one of my React app projects to manage the theme of the page! Since storing the theme of the app didn't need any security requirement, I tried and stored values in there.&lt;/p&gt;

&lt;p&gt;Part of the component that toggles the theme is an &lt;code&gt;onClick eventListener&lt;/code&gt; that triggers a switchTheme function that contains an if statement &amp;amp; it looks like this;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tI2SD1k0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gya5fcxwyv6qoll3mvhq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tI2SD1k0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gya5fcxwyv6qoll3mvhq.png" alt="switchTheme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See that the main use of the localStorage is to really just store key-value pairs which can be used on many other things.&lt;/p&gt;

&lt;p&gt;So that is it! I hope you had fun glancing through this blog about localStorage and hopefully helped you in some way in persisting data other than cookies or state.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-you-have-any-other-experience-of-using-localstorage-in-a-different-way-let-me-know-in-the-comments-below-i-would-love-to-try-them-out"&gt;
  &lt;/a&gt;
  Do you have any other experience of using localStorage in a different way? Let me know in the comments below! I would love to try them out!
&lt;/h3&gt;

</description>
      <category>localstorage</category>
      <category>react</category>
      <category>codenewbie</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
