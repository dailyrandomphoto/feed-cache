<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Additional Hooks in React - useRef()</title>
      <author>Olena Drugalya</author>
      <pubDate>Sat, 23 Jan 2021 19:23:37 +0000</pubDate>
      <link>https://dev.to/olenadrugalya/additional-hooks-in-react-useref-82d</link>
      <guid>https://dev.to/olenadrugalya/additional-hooks-in-react-useref-82d</guid>
      <description>&lt;p&gt;This blog post continues the series about &lt;a href="https://reactjs.org/docs/hooks-reference.html"&gt;React Hooks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It covers one of additional hooks in React - &lt;strong&gt;useRef()&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-useref" class="anchor"&gt;
  &lt;/a&gt;
  What is useRef()?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;useRef()&lt;/strong&gt; is JavaScript function, which creates and returns a mutable JavaScript object. &lt;br&gt;
This hook accepts some value and returns an object with the given value. &lt;/p&gt;

&lt;p&gt;Let's look at it more closely below.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-and-when-use-useref" class="anchor"&gt;
  &lt;/a&gt;
  How and when use useRef()
&lt;/h2&gt;

&lt;p&gt;To use this hook, you need to import it first from React library like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can use this hook without import as well like this - &lt;code&gt;React.useRef()&lt;/code&gt;, for me it's just more convenient to import and destructure first this function and then use it when need in the code.&lt;/p&gt;

&lt;p&gt;Afterwards we can set up this hook like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the basic setup above I called a constant &lt;strong&gt;refBox&lt;/strong&gt; not occasionally,  but because we can consider it as a box, which contains an object. The object created by &lt;code&gt;useRef()&lt;/code&gt;has a mutable value in its &lt;code&gt;.current&lt;/code&gt; property. This value is created by &lt;code&gt;initial value&lt;/code&gt; passed to the hook.&lt;br&gt;
NOTE: Mutating the &lt;code&gt;.current&lt;/code&gt; property &lt;strong&gt;doesn’t&lt;/strong&gt; cause a re-render. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#use-cases" class="anchor"&gt;
  &lt;/a&gt;
  Use cases
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Getting access to DOM nodes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The most popular use case for &lt;code&gt;useRef()&lt;/code&gt; is getting access to DOM nodes. If you pass the value you get from &lt;code&gt;useRef()&lt;/code&gt; as a ref prop on any React element, React will set the &lt;code&gt;.current&lt;/code&gt; property of an element to the corresponding DOM node. This allows you to do things like grab input values or set focus, for example in the Form below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;//Here we create ref for input field &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nameRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;//Here variable Name contains the current value of input field &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nameRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Name:
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
          &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
          &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nameRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;//here we add ref property to input &lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      //Here we add an event which gets input focus when user clicks the button
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;nameRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Focus Name Input
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;2.Storing Values &lt;/p&gt;

&lt;p&gt;A unique way to implement a &lt;code&gt;useRef()&lt;/code&gt; hook is to use it to store values instead of DOM references. These values can either be a &lt;code&gt;state&lt;/code&gt; that does not need to change too often or a &lt;code&gt;state&lt;/code&gt; that should not trigger full re-rendering of the component.  This can be used when you want to implement toggle function, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toggled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleToggle&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;toggled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;toggled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;onMouseMove&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleToggle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;useRef()&lt;/strong&gt; hook is a very handy option for both interacting with DOM elements and storing mutating information in your app without triggering a re-render. However, it is suggested to only use the useRef() when necessary.&lt;/p&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to connect on &lt;a href="https://www.linkedin.com/in/olenadrugalya/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/OlenaDrugalya"&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/J3J42JOOA"&gt;&lt;img height="12" width="30%" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS7c42cU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi1.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Best Programming Languages in 2021👩‍💻</title>
      <author>Purvesh Shende</author>
      <pubDate>Sat, 23 Jan 2021 18:15:34 +0000</pubDate>
      <link>https://dev.to/purveshshende2/best-programming-languages-in-2021-3hki</link>
      <guid>https://dev.to/purveshshende2/best-programming-languages-in-2021-3hki</guid>
      <description>&lt;p&gt;It’s a new year, a time when many technologists are considering which new skills and programming languages to learn. So here I’m with this blog.&lt;/p&gt;

&lt;p&gt;Follow me!⬇️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-python-" class="anchor"&gt;
  &lt;/a&gt;
  #1 Python –
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUjWmL8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kuuw2kxptcafcbbvt8co.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUjWmL8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kuuw2kxptcafcbbvt8co.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Currently the most popular  programming language on this planet 🌎 is Python .It was designed for readability, and has some similarities to the English language. Python is an interpreted, high-level ,general-purpose  and object-oriented programming language. It is free , open source and python has a huge community support. Python is the most  easy language in implementation in AI, Machine learning and data science.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#common-uses-of-python-" class="anchor"&gt;
  &lt;/a&gt;
  Common uses of python –
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Machine Learning and Artificial Intelligence&lt;/li&gt;
&lt;li&gt;Internet of things&lt;/li&gt;
&lt;li&gt;Data Science and Data Visualization.&lt;/li&gt;
&lt;li&gt;Desktop GUI&lt;/li&gt;
&lt;li&gt;Web Development&lt;/li&gt;
&lt;li&gt;Game Development&lt;/li&gt;
&lt;li&gt;Business Applications 
&amp;amp; many more..&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#companies-that-love-python-" class="anchor"&gt;
  &lt;/a&gt;
  Companies that love ❤️ Python –
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Google &lt;/li&gt;
&lt;li&gt;Facebook &lt;/li&gt;
&lt;li&gt;Instagram&lt;/li&gt;
&lt;li&gt;Spotify&lt;/li&gt;
&lt;li&gt;Netflix 
&amp;amp; many more ..&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-javascript-" class="anchor"&gt;
  &lt;/a&gt;
  #2 JavaScript –
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--agYcPYTi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ms4gn7iyunaccfxzr81t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--agYcPYTi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ms4gn7iyunaccfxzr81t.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
One of the top and most popular  programming  language is JavaScript. Java and JavaScript are exactly opposite just  like a cat has nothing to do with catfish,JavaScript has nothing to do with java. It doesn’t require compilation and is interpreted with object-oriented capabilities. Also, it works with various other programming languages. And this is the reason for its vast use all around the world.&lt;br&gt;
JavaScript use in developing great backend and frontend webapps as well as Native apps using frameworks like React Native, JavaScript allows users to interact with web pages.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#common-uses-of-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Common uses of JavaScript–
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Adding interactive behavior to web pages&lt;/li&gt;
&lt;li&gt;Creating web and mobile apps&lt;/li&gt;
&lt;li&gt;Building web servers and developing server applications&lt;/li&gt;
&lt;li&gt;Game development&lt;/li&gt;
&lt;li&gt;Flying Robots &amp;amp; many more..&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#companies-that-love-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Companies that love ❤️ JavaScript–
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft &lt;/li&gt;
&lt;li&gt;Netflix &lt;/li&gt;
&lt;li&gt;PayPal&lt;/li&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;li&gt;Uber 
&amp;amp; Many more&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-java-" class="anchor"&gt;
  &lt;/a&gt;
  #3 Java –
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A_LpCUL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bjcu4hm5cz8gvvm3nvuy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A_LpCUL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bjcu4hm5cz8gvvm3nvuy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most popular programming language in the world is Java. It is a class-based, object-oriented programming language and is designed to have as few implementation dependencies as possible. A general-purpose programming language made for developers to write once run anywhere that is compiled Java code can run on all platforms that support Java and that’s the region more than 3 billion devices run Java. Java works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.) It has a huge community support.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#common-uses-of-java" class="anchor"&gt;
  &lt;/a&gt;
  Common uses of Java–
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Android Apps&lt;/li&gt;
&lt;li&gt;Server Apps at the Financial Services Industry&lt;/li&gt;
&lt;li&gt;Java Web applications&lt;/li&gt;
&lt;li&gt;Software Tools&lt;/li&gt;
&lt;li&gt;Embedded Space&lt;/li&gt;
&lt;li&gt;Big Data technologies
&amp;amp; Many more ..&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#companies-that-love-java" class="anchor"&gt;
  &lt;/a&gt;
  Companies that love ❤️ Java–
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Google &lt;/li&gt;
&lt;li&gt;Intel&lt;/li&gt;
&lt;li&gt;Netflix&lt;/li&gt;
&lt;li&gt;LinkedIn&lt;/li&gt;
&lt;li&gt;Amazon&lt;/li&gt;
&lt;li&gt;Phillips
&amp;amp; many more..&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-kotlin-" class="anchor"&gt;
  &lt;/a&gt;
  #4 Kotlin –
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4a5vaNI9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jkp7rlovi9p3d0fzmoz6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4a5vaNI9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jkp7rlovi9p3d0fzmoz6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;whenever there is a talk of android app development – the name of ‘Kotlin’ undoubtedly comes first! Though, a huge inclination of developers towards Kotlin is noticed after Google declared it as its preferred language for Android application development. Kotlin is a statically typed general-purpose programming language that supports object-oriented as well as functional programming feature.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#common-uses-of-kotlin" class="anchor"&gt;
  &lt;/a&gt;
  Common uses of Kotlin–
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;App development&lt;/li&gt;
&lt;li&gt;Server side &amp;amp; Client side web development &lt;/li&gt;
&lt;li&gt;support for other platforms such as embedded systems, macOS and iOS is coming.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#companies-that-love-kotlin" class="anchor"&gt;
  &lt;/a&gt;
  Companies that love ❤️ Kotlin–
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;li&gt;Amazon&lt;/li&gt;
&lt;li&gt;Netflix&lt;/li&gt;
&lt;li&gt;Pinterest&lt;/li&gt;
&lt;li&gt;Uber&lt;/li&gt;
&lt;li&gt;Foursquare&lt;/li&gt;
&lt;li&gt;Trello&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-c-" class="anchor"&gt;
  &lt;/a&gt;
  #5 c++ –
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pVxwdoQF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cgcec4lh18xcng0ajcw4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pVxwdoQF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cgcec4lh18xcng0ajcw4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
C ++ one of the most popular programming language in the competitive world as well as development world . C++ is a cross-platform language that can be used to create high-performance applications. C++ was developed by Bjarne Stroustrup, as an extension to the C language. C++ gives programmers a high level of control over system resources and memory.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#common-uses-of-c-" class="anchor"&gt;
  &lt;/a&gt;
  Common uses of C++ –
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Games&lt;/li&gt;
&lt;li&gt;GUI Based Applications&lt;/li&gt;
&lt;li&gt;Database Software&lt;/li&gt;
&lt;li&gt;Operating Systems&lt;/li&gt;
&lt;li&gt;Browsers&lt;/li&gt;
&lt;li&gt;Banking Applications&lt;/li&gt;
&lt;li&gt;Cloud/Distributed System&lt;/li&gt;
&lt;li&gt;Embedded Systems
&amp;amp; many more..&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#companies-that-love-c-" class="anchor"&gt;
  &lt;/a&gt;
  Companies that love ❤️ C++ –
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Apple &lt;/li&gt;
&lt;li&gt;Google &lt;/li&gt;
&lt;li&gt;Maya&lt;/li&gt;
&lt;li&gt;Infosys&lt;/li&gt;
&lt;li&gt;Mozilla Firefox 
&amp;amp; many more ..&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-go-" class="anchor"&gt;
  &lt;/a&gt;
  #6 Go –
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ja06YByK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i89jgqjsxlbrmmmwhq3l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ja06YByK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i89jgqjsxlbrmmmwhq3l.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go also known as Golang is an open source, compiled and statically typed programming language developed by Google Go is a general-purpose programming language with a simple syntax and is backed by a robust standard library. One of the key areas where Go shines is the creation of highly available and scalable web apps ,command-line applications, desktop apps and even mobile applications.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#common-uses-of-go-" class="anchor"&gt;
  &lt;/a&gt;
  Common uses of Go –
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Command line applications&lt;/li&gt;
&lt;li&gt;Desktop apps&lt;/li&gt;
&lt;li&gt;Mobile apps&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#companies-that-love-go-" class="anchor"&gt;
  &lt;/a&gt;
  Companies that love ❤️ Go –
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Google &lt;/li&gt;
&lt;li&gt;Uber &lt;/li&gt;
&lt;li&gt;Twitch&lt;/li&gt;
&lt;li&gt;Dailymotion
&amp;amp; Many more ..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you❤️ for reading my blog. Feel free to connect on &lt;a href="https://www.linkedin.com/in/purvesh-shende-a08293170/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/purveshshende2"&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;

&lt;p&gt;Images By &lt;a href="https://icons8.com/"&gt;Icon8&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>javascript</category>
      <category>java</category>
    </item>
    <item>
      <title>Let's Build a Proof of Concept Dynamic Image Generator with Elixir &amp; Phoenix</title>
      <author>Elliot Jackson</author>
      <pubDate>Sat, 23 Jan 2021 17:23:08 +0000</pubDate>
      <link>https://dev.to/elliotekj/let-s-build-a-proof-of-concept-dynamic-image-generator-with-elixir-phoenix-23om</link>
      <guid>https://dev.to/elliotekj/let-s-build-a-proof-of-concept-dynamic-image-generator-with-elixir-phoenix-23om</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-problem" class="anchor"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;GIFs are great but sometimes it could be nice to have a little bit of dynamism on a site without having a GIF changing in a loop and distracting the user or just without adding the file size of a GIF to the page load.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution" class="anchor"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;

&lt;p&gt;What we're going to build is a small &lt;a href="https://www.phoenixframework.org/"&gt;Phoenix&lt;/a&gt; web app that has a single endpoint, &lt;code&gt;/quote.png&lt;/code&gt;, that will return an image of a random quote and attribution from an array of user defined quotes. Demo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5YQ7kQRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hu2yw0w9jwyp3v8vha4f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5YQ7kQRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hu2yw0w9jwyp3v8vha4f.gif" alt="Example quote generation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-how" class="anchor"&gt;
  &lt;/a&gt;
  The how
&lt;/h2&gt;

&lt;p&gt;The first question is how we'll get the list of quotes and attributions from the user. In a "real" app this would probably be backed by a database and a nice UI for adding quotes. Remember that this is only a proof of concept though so we'll go with the simplest method I could think of: putting them in the query string.&lt;/p&gt;

&lt;p&gt;The syntax for an array in a query string is &lt;code&gt;key[]=value&amp;amp;key[]=value2&lt;/code&gt; so if we create an array of quotes and an array of attributions we'll end up with something like this (&lt;code&gt;q&lt;/code&gt; for quotes and &lt;code&gt;a&lt;/code&gt; for attributions to help keep a long URL a bit shorter):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/quote.png?q[]=It%27s%20awesome&amp;amp;a[]=Mum&amp;amp;q[]=Pretty%20fun&amp;amp;a[]=Bob&amp;amp;q[]=Great%20stuff&amp;amp;a[]=Alice&amp;amp;q[]=Average%20at%20best&amp;amp;a[]=Theo
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we know how the data is going to be passed into our endpoint, let's start doing something with it!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 First you'll need to install Phoenix. The project maintains &lt;a href="https://hexdocs.pm/phoenix/installation.html"&gt;a very good installation page &lt;/a&gt; so I won't repeat its contents. You can skip the node.js and Postgres sections if you don't already have them installed, we won't be needing them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you have Phoenix installed, create a new project and install the dependencies when prompted. We won't need a DB or Webpack so we can skip those with flags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mix phx.new image_gen_poc &lt;span class="nt"&gt;--no-ecto&lt;/span&gt; &lt;span class="nt"&gt;--no-webpack&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Open the project in your editor of choice and let's get to it!&lt;/p&gt;

&lt;p&gt;We'll start be defining the endpoint. Go to &lt;code&gt;image_gen_poc/lib/image_gen_poc_web/router.ex&lt;/code&gt; and update line 19 to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;"/quote.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;PageController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:index&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can see above that the new &lt;code&gt;/quote.png&lt;/code&gt; endpoint is handled by the &lt;code&gt;index&lt;/code&gt; function in the &lt;code&gt;PageController&lt;/code&gt; so that's where we'll go next.&lt;/p&gt;

&lt;p&gt;First things first we need to extract our quotes and attributions from the URL which can be done very easily with Elixir's pattern matching:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# image_gen_poc/lib/image_gen_poc_web/controllers/page_controller.ex&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;ImageGenPocWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;PageController&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;ImageGenPocWeb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:controller&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;"q"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"a"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;attributions&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

    &lt;span class="c1"&gt;# ...&lt;/span&gt;

  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The array of quotes (&lt;code&gt;q&lt;/code&gt;) is assigned to &lt;code&gt;quotes&lt;/code&gt; and the array of attributions (&lt;code&gt;a&lt;/code&gt;) is assigned to &lt;code&gt;attributions&lt;/code&gt;. Before we go any further let's make sure this is all working so far. We'll &lt;code&gt;require Logger&lt;/code&gt; then update our &lt;code&gt;index&lt;/code&gt; function as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;ImageGenPocWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;PageController&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;ImageGenPocWeb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:controller&lt;/span&gt;
  &lt;span class="kn"&gt;require&lt;/span&gt; &lt;span class="no"&gt;Logger&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;"q"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"a"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;attributions&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attributions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; into your project directory and start the server with &lt;code&gt;mix phx.server&lt;/code&gt;. Now go to your browser and paste the following URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://localhost:4000/quote.png?q[]=It%27s%20awesome&amp;amp;a[]=Mum&amp;amp;q[]=Pretty%20fun&amp;amp;a[]=Bob&amp;amp;q[]=Great%20stuff&amp;amp;a[]=Alice&amp;amp;q[]=Average%20at%20best&amp;amp;a[]=Theo
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Coming back to your terminal you should see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[info] GET /quote.png
[debug] Processing with ImageGenPocWeb.PageController.index/2
  Parameters: %{"a" =&amp;gt; ["Mum", "Bob", "Alice", "Theo"], "q" =&amp;gt; ["It's awesome", "Pretty fun", "Great stuff", "Average at best"]}
  Pipelines: [:browser]
[info] It's awesomePretty funGreat stuffAverage at best
[info] MumBobAliceTheo
[info] Sent 200 in 1ms
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's working, great!&lt;/p&gt;

&lt;p&gt;Next we need to get a quote and its matching attribution.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;"q"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"a"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;attributions&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;random_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;attribution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attributions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kn"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attribution&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we were only dealing with one list we could have just used &lt;code&gt;Enum.random/1&lt;/code&gt; directly on it but as we need to get a value from the same random index in 2 sperate lists we're just using it to generate an index. We can then use &lt;code&gt;Enum.at/2&lt;/code&gt; to get a value from the same random index in 2 different lists.&lt;/p&gt;

&lt;p&gt;Going back to your browser and refreshing the page should now output something like this in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[info] GET /quote.png
[debug] Processing with ImageGenPocWeb.PageController.index/2
  Parameters: %{"a" =&amp;gt; ["Mum", "Bob", "Alice", "Theo"], "q" =&amp;gt; ["It's awesome", "Pretty fun", "Great stuff", "Average at best"]}
  Pipelines: [:browser]
[info] Great stuff
[info] Alice
[info] Sent 200 in 3ms
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The quote and attribution match so the next job is to generate the image! We're going to hand the work involved in this off to &lt;a href="https://imagemagick.org/index.php"&gt;ImageMagick&lt;/a&gt; via &lt;a href="https://hexdocs.pm/elixir/System.html#cmd/3"&gt;&lt;code&gt;System.cmd/2&lt;/code&gt;&lt;/a&gt;. Installing ImageMagick on macOS is just a case of &lt;code&gt;brew install imagemagick&lt;/code&gt;, for other OSs check out their &lt;a href="https://imagemagick.org/script/download.php"&gt;downloads page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;System.cmd/2&lt;/code&gt; returns a tuple containing the collected result of the command and the exit status code (&lt;code&gt;0&lt;/code&gt; means the command was successful) which we'll pattern match.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;"q"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"a"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;attributions&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;random_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;attribution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attributions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="no"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"convert"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;"-background"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"#333333"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"-fill"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"white"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"-font"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"Helvetica"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"-pointsize"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"56"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"label:&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="kn"&gt;quote&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# [1]&lt;/span&gt;
      &lt;span class="s2"&gt;"-fill"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"grey"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"-font"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"Helvetica-Oblique"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"-pointsize"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"32"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"label:- &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;attribution&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;#[2]&lt;/span&gt;
      &lt;span class="s2"&gt;"-append"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"-background"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"#333333"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"-gravity"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"center"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"-extent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"800x400"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"png:-"&lt;/span&gt; &lt;span class="c1"&gt;# [3]&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There's a lot of ImageMagick config going on there and we're going to ignore most of it as this isn't really an ImageMagick tutorial. I've numbered the lines that are of interest to us:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first label is passed the value of &lt;code&gt;quote&lt;/code&gt;, the quote will be escaped automatically so we don't have to worry about it containing spaces or anything.&lt;/li&gt;
&lt;li&gt;Similarly, the value of &lt;code&gt;attribution&lt;/code&gt; is passed to the second label.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;png:-&lt;/code&gt; tells ImageMagick to output the generated image data as a PNG to STDOUT. This is what's collected in &lt;code&gt;output&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We now have the image data in &lt;code&gt;output&lt;/code&gt;, all that's left to do is return it to the client. Replace &lt;code&gt;render/2&lt;/code&gt; with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;"q"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"a"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;attributions&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

  &lt;span class="c1"&gt;# ...&lt;/span&gt;

  &lt;span class="n"&gt;conn&lt;/span&gt;
  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;put_resp_content_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;send_resp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;put_resp_content_type/2&lt;/code&gt; assigns the appropriate &lt;code&gt;Content-Type&lt;/code&gt; header for the PNG we'll be returning, then we send the response back with a status code of 200 and the image data.&lt;/p&gt;

&lt;p&gt;If you now go back to your browser and refresh it you should see a quotation image like the one at the start of this article generated. Keep refreshing and it should change randomly!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5YQ7kQRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hu2yw0w9jwyp3v8vha4f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5YQ7kQRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hu2yw0w9jwyp3v8vha4f.gif" alt="Example quote generation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading! You'll find the source code &lt;a href="https://github.com/elliotekj/image-gen-proof-of-concept"&gt;here&lt;/a&gt; if you need it and if you have any questions, feel free to ask below 💬&lt;/p&gt;

</description>
      <category>phoenix</category>
      <category>elixir</category>
      <category>imagemagick</category>
    </item>
    <item>
      <title>How to Be Productive, Feel Less Overwhelmed, and Get Things Done</title>
      <author>Life.Tech.Psych</author>
      <pubDate>Sat, 23 Jan 2021 16:36:24 +0000</pubDate>
      <link>https://dev.to/lifetechpsych/how-to-be-productive-feel-less-overwhelmed-and-get-things-done-57b7</link>
      <guid>https://dev.to/lifetechpsych/how-to-be-productive-feel-less-overwhelmed-and-get-things-done-57b7</guid>
      <description>&lt;p&gt;This guide is based on 5 years of applying techniques from Behavioral Psychology and research on productivity. I've used it as a developer, mentor and creator. &lt;/p&gt;

&lt;p&gt;And it works.&lt;/p&gt;

&lt;p&gt;If you remember only one lesson from this post, it's this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The productivity techniques that work are built on principles. Not quick hacks. Or fancy tools.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you understand and apply this, you'll be able to keep a clear head and stay focused. And it'll come in handy especially when things blow up out of proportion.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-this-post-will-cover" class="anchor"&gt;
  &lt;/a&gt;
  What this post will cover
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Part I: Process &amp;gt;&amp;gt; Tools&lt;/li&gt;
&lt;li&gt;Part II: What to do when you can't stop procrastinating&lt;/li&gt;
&lt;li&gt;Part III: Put sanity over execution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's jump into it.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
Part I: Process &amp;gt;&amp;gt; Tools
&lt;/h2&gt;

&lt;p&gt;Whenever you feel overwhelmed, it’s because the process you have in place is failing you. Not the tools.&lt;/p&gt;

&lt;p&gt;And a sound process will beat fancy tools, any day.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UAoL2v2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dclkelavsd1tuygh9ayz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UAoL2v2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dclkelavsd1tuygh9ayz.png" alt="The more chaotic you feel, the less efficient your process is. Conversely, you could have way more to do than everyone around yet operate more efficiently due to a well-designed process."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before I understood this, I struggled with consistent productivity. Keyword here is consistent.&lt;/p&gt;

&lt;p&gt;Anyone can be productive once in a while but it takes a certain level of finesse to do it consistently.&lt;/p&gt;

&lt;p&gt;Back then, I did a lot of things. But constantly felt like I was missing something. My approach was speed and execution over anything else. This works in the short term but it's not sustainable longterm.&lt;/p&gt;

&lt;p&gt;Before I got here, I seriously struggled with productivity. I knew life hacks here and there; and tried every tool under the sun including the popular ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://evernote.com/"&gt;Evernote&lt;/a&gt;: Your notes. Organized. Effortless.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://keep.google.com/"&gt;Google Keep&lt;/a&gt;: Quickly capture what’s on your mind.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.onenote.com/"&gt;One Note&lt;/a&gt;: The digital note-taking app for your devices.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.any.do/"&gt;Any.Do&lt;/a&gt;: To do list app with Calendar, Planner &amp;amp; Reminders.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://todoist.com/"&gt;Todoist&lt;/a&gt;: The to do list to organize work &amp;amp; life.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oh and I tried &lt;a href="https://trello.com/en-US"&gt;Trello&lt;/a&gt; at least 3x because everyone swore it was the greatest app ever. &lt;/p&gt;

&lt;p&gt;But I couldn’t stand it. &lt;/p&gt;

&lt;p&gt;Every few months, I’d jump between apps. &lt;/p&gt;

&lt;p&gt;Once in a while, I'd ditch digital and go all paper. But then forget my notebook at home or hate to carry it around because it couldn’t fit in my pocket. &lt;/p&gt;

&lt;p&gt;Nothing worked – I still felt overwhelmed with tasks to complete. But overtime, I learned that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The best tool used with the wrong process feels like a failed tool.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So I shifted my approach to focus on processes. And it worked. My productivity and time management skills skyrocketed.&lt;/p&gt;

&lt;p&gt;It doesn't matter what app you prefer to use, &lt;strong&gt;these 4 simple processes I share can be used in your favorite todo app&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Mine happens to be Google Keep. But as you read through, I want you to replace “Google Keep” with “Todoist”, “One Note”, or whatever app you love the most.&lt;/p&gt;

&lt;p&gt;Focus on the big picture of how things fit because this is the most important aspect of using any tool.&lt;/p&gt;

&lt;p&gt;Make sense?&lt;/p&gt;

&lt;p&gt;Let’s get to it!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-find-your-single-source-of-truth" class="anchor"&gt;
  &lt;/a&gt;
  1) Find your single source of truth
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EMfEvpdn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oml4kwro1bdemis04cwn.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EMfEvpdn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oml4kwro1bdemis04cwn.jpeg" alt="Unsplash / @timonrets – First, find your main productivity tool. Next revolve other tools around it."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I use Google Keep as my single source of truth that feeds into other productivity tools. This means it’s my first stop.&lt;/p&gt;

&lt;p&gt;First stop for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Grocery list&lt;/li&gt;
&lt;li&gt;Journaling&lt;/li&gt;
&lt;li&gt;Workout plans&lt;/li&gt;
&lt;li&gt;Strategy for finances&lt;/li&gt;
&lt;li&gt;Netflix shows to checkout&lt;/li&gt;
&lt;li&gt;Any random thought that crosses my mind&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these have their own labels so capturing things usually takes a few taps on my phone or three clicks on a chrome tab that’s always open with Google Keep.&lt;/p&gt;

&lt;p&gt;From there I move to Calendar for fixed appointments and to eyeball how much time meetings consume per week.&lt;/p&gt;

&lt;p&gt;Then Trello for team tracking collaborations.&lt;/p&gt;

&lt;p&gt;Next, I switch between Notes for personal writing or Google docs for collaborations. What’s interesting here is that most of my write ups start in Keep on my phone.&lt;/p&gt;

&lt;p&gt;Including this write-up.&lt;/p&gt;

&lt;p&gt;When it starts getting longer I switch to my laptop and copy out the content from Google Keep web into Notes or Google Doc.&lt;/p&gt;

&lt;p&gt;Any time it feels like I need special formatting or the itch to write in my favorite font &lt;a href="https://fonts.google.com/specimen/Montserrat#pairings"&gt;(Montserrat font)&lt;/a&gt;, it’s a sign that I need to switch to a writing tool.&lt;/p&gt;

&lt;p&gt;Switching to another tool isn’t necessarily a bad thing.&lt;/p&gt;

&lt;p&gt;But not many believe that.&lt;/p&gt;

&lt;p&gt;If finding your single source of truth is the only idea you put to action right away, you'll see a dramatic change.&lt;/p&gt;

&lt;p&gt;But if you miss this, you'll struggle with staying afloat when you start feeling overwhelmed. Trust me, things will get overwhelming.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-stop-chasing-the-everything-app" class="anchor"&gt;
  &lt;/a&gt;
  2) Stop chasing the everything app
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qsk0vl5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3eho5ndlr3ekzgcthqii.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qsk0vl5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3eho5ndlr3ekzgcthqii.jpeg" alt="Unsplash / @miikola – We rush so fast to the newest productivity and time management tools. But using tools alone won't cut it."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one is a little controversial.&lt;/p&gt;

&lt;p&gt;And in the past, some have contested my stance especially after a new tool becomes popular (e.g. &lt;a href="https://www.notion.so/login"&gt;Notion&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Most people try to hack their favorite productivity app to become a writing app, a collaboration tool, a calendar app, an EVERYTHING tool.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The fact is that no one tool will address everything.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I made this mistake for so long.&lt;/p&gt;

&lt;p&gt;Trust me, you’re better off picking up a single source of truth and then building others around it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It’s fine to use Keep and Trello.&lt;/li&gt;
&lt;li&gt;It’s fine to have Notion and Notes.&lt;/li&gt;
&lt;li&gt;It’s fine to use a todo reminder and calendar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One doesn’t have to replace the other. They can complement each other.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-its-not-paper-or-digital-its-paper-and-digital" class="anchor"&gt;
  &lt;/a&gt;
  3) It's not paper OR digital; it's paper AND digital
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bzoEBMXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8y43j4gwry6af73rkdm8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bzoEBMXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8y43j4gwry6af73rkdm8.jpeg" alt="Unsplash / @gerandeklerk – Mix paper and digital to get the best of your productivity."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once in a while I get the itch to write on paper.&lt;/p&gt;

&lt;p&gt;That feeling is especially strong when I’m planning big goals. I love to map out everything in front of me.&lt;/p&gt;

&lt;p&gt;And writing with my favorite pen keeps the ideas flowing.&lt;/p&gt;

&lt;p&gt;In paper situations, I scribble all on paper then when I get done, I take a screenshot and add it under the relevant label in Keep.&lt;/p&gt;

&lt;p&gt;Example, if you saw my “big ideas” label you’d see a lot of screenshots in there.&lt;/p&gt;

&lt;p&gt;I also do this when white-boarding with colleagues on a coding project or brainstorming sessions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get done.&lt;/li&gt;
&lt;li&gt;Take picture.&lt;/li&gt;
&lt;li&gt;Add to specific label.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then I trash the paper.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QQBPRahv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7j7prw5uaibn80b8eane.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QQBPRahv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7j7prw5uaibn80b8eane.jpg" alt="A screenshot I pulled from my Google Keep showing what I wrote while brainstorming on techniques from Behavioral Psychology for entrepreneurs to reduce their procrastination tendencies."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Multiple years of writing on paper has taught me that the paper I write on only feels good in the moment.&lt;/p&gt;

&lt;p&gt;A few weeks later and it looks like I’ve got paper trash all over the place.&lt;/p&gt;

&lt;p&gt;So I screenshot and trash ASAP.&lt;/p&gt;

&lt;p&gt;This process satisfies both my digital access to my planner (beats small notebooks any day). But it also lets me scratch my paper itch whenever it comes up.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm not loyal to only digital or only paper. That's nonsense.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'm more interested in what helps me reduce my overwhelming workload. And using both work well.&lt;/p&gt;

&lt;p&gt;You may want only paper or only digital. That's okay. Just remember you don't have to feel you must only use one to be productive.&lt;/p&gt;

&lt;p&gt;Some recommend &lt;a href="https://getrocketbook.com/"&gt;Rocketbook (a smart notebook)&lt;/a&gt;. It is a reusable notebook that lets you write, upload to the cloud, and then wipe the page clean!&lt;/p&gt;

&lt;p&gt;I’ve never used it but wanted to highlight this in case you find it useful.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-review-often-weekly-monthly-yearly" class="anchor"&gt;
  &lt;/a&gt;
  4) Review often – weekly, monthly, yearly
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n5h71elO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/io9pedgjom44g5pcmi1b.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n5h71elO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/io9pedgjom44g5pcmi1b.jpeg" alt="Unsplash / @rpnickson – To build strong time management skills, you need frequent reviews."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every morning on weekdays I go through Keep on my laptop to see things that should be top of mind that day.&lt;/p&gt;

&lt;p&gt;This is key to proactively prevent me from getting to a place where I feel overwhelmed with tasks because too many things slipped through.&lt;/p&gt;

&lt;p&gt;During the day, I add things to Keep either from my phone or laptop. The cycle continues until Friday.&lt;/p&gt;

&lt;p&gt;Every Friday, I go through my Keep to clean up any tasks that fell through or that should move into other tools.&lt;/p&gt;

&lt;p&gt;Then repeat.&lt;/p&gt;

&lt;p&gt;Following this gets you right in the heart of smashing things efficiently but sometimes, procrastination blocks your progress.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;
•   •   •  
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
Part II: What to do when you can't stop procrastinating
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qb2IP09E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4ob3dm6awb8y6yeaw1yl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qb2IP09E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4ob3dm6awb8y6yeaw1yl.png" alt="You start by reducing perfectionism. Next clarify your next tiny action. And finally modify your behavior when you don't feel like doing any work"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you know that &lt;a href="https://www.inc.com/marla-tabaka/why-set-yourself-up-for-failure-ditch-new-years-resolution-do-this-instead.html"&gt;80% of us fail to fulfill our New Year’s resolutions&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;That's crazy.&lt;/p&gt;

&lt;p&gt;Sadly, procrastination plays a big role in this.&lt;/p&gt;

&lt;p&gt;But no worries, you can beat procrastination through these three techniques: reducing your “perfect” goals, clarifying your next actions, and modifying your steps through Behavioral Psychology.&lt;/p&gt;

&lt;p&gt;Let's dig into these one by one.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-reduce-your-first-move-from-a-to-b" class="anchor"&gt;
  &lt;/a&gt;
  1) Reduce your first move from “A+” to “B”.
&lt;/h2&gt;

&lt;p&gt;If you're a perfectionist, you'll procrastinate. If your goal is too big to take a first step, you'll procrastinate.&lt;/p&gt;

&lt;p&gt;If you're a procrastinating perfectionist, you'll feel paralyzed and frustrated many times because your big goals remain in your head with zero actions in reality.&lt;/p&gt;

&lt;p&gt;You'll take zero actions because you want all your steps to be perfect.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To fix your procrastination as a perfectionist, start with a “B” goal instead of “A+”. This means you should go back and change your first step to be “good enough” instead of “perfect”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-clarify-the-next-tiny-action" class="anchor"&gt;
  &lt;/a&gt;
  2) Clarify the next, tiny action.
&lt;/h2&gt;

&lt;p&gt;Whenever it’s not crystal clear what you’re supposed to work on next, your mind will stop you from moving forward.&lt;/p&gt;

&lt;p&gt;Example your todo list has:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Build the best portfolio page to get a job. Then create amazing landing page to show off to everyone.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SzrKTv_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tht4rifina7qnrb25v7u.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SzrKTv_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tht4rifina7qnrb25v7u.jpeg" alt="Unsplash / @i_am_nah – Anytime you create vague tasks, you open the doors to procrastination."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What does “best” mean?&lt;/li&gt;
&lt;li&gt;What &lt;a href="https://lifetechpsych.com/beginner-programming-projects"&gt;type of programming projects&lt;/a&gt; should I have in my portfolio?&lt;/li&gt;
&lt;li&gt;Is it smart to build my app from scratch or use an existing template?&lt;/li&gt;
&lt;li&gt;Which language should I learn? How long? When? How?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you have too many floating thoughts in your head, your mind runs away from any actions and falls back into procrastination.&lt;/p&gt;

&lt;p&gt;The cure is to spend 90 seconds and answer:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the smallest, next action for the task I want to achieve?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you’re building a portfolio, the next tiniest action is open up a document and write up a rough plan. Not to open visual studio and &lt;a href="https://lifetechpsych.com/how-long-cplusplus"&gt;struggle with the quirks in C++&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you're writing a book on lessons for new programmers, your tiniest action isn’t to write chapter one. It’s to come up with the first DRAFT of your outline for the all book chapters.&lt;/li&gt;
&lt;li&gt;And if you’re completely new to programming, your best bet is to &lt;a href="https://lifetechpsych.com/free-learn-to-code"&gt;start with places where you can learn to code&lt;/a&gt; so you narrow down on one option. Not to jump around aimlessly and still feel lost after several months.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The tinier the next action, the more likely you are to get it done.&lt;/p&gt;

&lt;p&gt;Stack multiple small actions and you, my friend, are gold.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-modify-through-techniques-from-behavioral-psychology" class="anchor"&gt;
  &lt;/a&gt;
  3) Modify through techniques from Behavioral Psychology
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ujI5w_6F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bhun4jrms55m09kexqss.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ujI5w_6F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bhun4jrms55m09kexqss.jpeg" alt="Unsplash/@acharki95 – Procrastination is a psychological issue that needs psychological techniques."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some days are just lazy days.&lt;/p&gt;

&lt;p&gt;You know you should ignore how you feel and get to work but it's not happening.&lt;/p&gt;

&lt;p&gt;You can use these principles of from Behavioral Psychology.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Deadline effect&lt;/strong&gt;: Go to &lt;a href="https://tomato-timer.com/"&gt;www.tomato-timer.com&lt;/a&gt;, click 5 minutes and start working on your tiniest next action as fast as you can. Most times you’ll end up going beyond 5 mins. That’s perfect because &lt;a href="https://www.psychologistworld.com/memory/zeigarnik-effect-interruptions-memory"&gt;Zeigarnik effect&lt;/a&gt; has kicked in and you'll feel like completing the work you already started.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Negative reinforcement&lt;/strong&gt; until you work: If somehow you didn't do anything and the timer ends, restart it. Additional tip is to go to setting and set the sound that is most annoying to you. Do this at least 5x and every time “punish” yourself by watching the timer count down!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Revisit your motivation&lt;/strong&gt;: If after 5x, you can’t do anything, it means your motivation is off and you have a deeper question to answer:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;“What will I gain by I work on this?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sometimes, looking to &lt;a href="https://lifetechpsych.com/developer-stories"&gt;how other developers have transformed their lives&lt;/a&gt; can give you the needed push.&lt;/p&gt;

&lt;p&gt;If you still have no answer to what you’ll gain, abandon the task as it's time to find something else that has more intrinsic motivation.&lt;/p&gt;

&lt;p&gt;But no matter how much you get done, it's important to recognize that productivity is not about working non-stop.&lt;/p&gt;

&lt;p&gt;You need balance to consistently move forward.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;
•   •   •  
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
Part III: Put sanity over execution
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jPsDYPGC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x61eeu6c7eyricocqc94.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jPsDYPGC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x61eeu6c7eyricocqc94.jpeg" alt="Unsplash/@darthxuan – You can dominate your work and reduce stress if you have a well-built process that bakes in self care."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Getting things done is not always about doing more. Sometimes you don't need faster, better.&lt;/p&gt;

&lt;p&gt;You need the sanity from self care.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Self-care is never a selfish act. Anytime we can listen to true self and give the care it requires, we do it not only for ourselves, but for the many others whose lives we touch.” - Parker Palmer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you don't prioritize self care, you'll definitely burn out. Trust me, developer burn out is real.&lt;/p&gt;

&lt;p&gt;Burn out too many times and you start to think maybe you're not cut out for the work.&lt;/p&gt;

&lt;p&gt;You are.&lt;/p&gt;

&lt;p&gt;Your approach is simply what's killing you.&lt;/p&gt;

&lt;p&gt;Here are simple ways to start caring more for yourself. These little activities don't come close to the hype that people expect when they hear 'productivity'.&lt;/p&gt;

&lt;p&gt;But you need them.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#have-a-different-spot-for-work-and-relaxation" class="anchor"&gt;
  &lt;/a&gt;
  Have a different spot for work and relaxation
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---PRDpn07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1xavq780umjnsgjcje91.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---PRDpn07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1xavq780umjnsgjcje91.jpeg" alt="Unsplash/@katiebarrett – Having a dedicated place to relax will help you fully unplug."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've found that relaxing in the same spot and later trying to work doesn't cut it.&lt;/p&gt;

&lt;p&gt;Same applies when flipped around: working in the same spot and later trying to switch to relaxation mode is hard.&lt;/p&gt;

&lt;p&gt;You don't need separate rooms for this.&lt;/p&gt;

&lt;p&gt;You only need to intentionally create a physical difference so you can switch out from one to the other. Not doing this kept me spinning in cycles for several weeks.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recharge-through-a-daily-shower" class="anchor"&gt;
  &lt;/a&gt;
  Recharge through a daily shower
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ULE7JJvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4j7tajs1xmjdo2wixcig.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ULE7JJvk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4j7tajs1xmjdo2wixcig.jpeg" alt="Unsplash/@phammi – A daily shower is simple yet powerful enough to reset."&gt;&lt;/a&gt;&lt;br&gt;
This is straightforward. Early showers are better but if you can't do that have one at night before the day runs out. You'll feel like you've accomplished something already.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cooking-as-therapy" class="anchor"&gt;
  &lt;/a&gt;
  Cooking as therapy
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SqGMt0VX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cfw40pd9nq6cj99vp9yi.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SqGMt0VX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cfw40pd9nq6cj99vp9yi.jpeg" alt="Unsplash/@brookelark – Cooking is one of the most gratifying ways to reboot yourself"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I don't cook as much as I'd love to. But following instructions on a recipe and coming up with something new feels magical.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“No one who cooks, cooks alone. Even at her most solitary, a cook in the kitchen is surrounded by generations of cooks past, the advice and menus of cooks present, the wisdom of cookbook writers.” — Laurie Colwin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pick any meal – whether it comes out good or not doesn't matter.&lt;/p&gt;

&lt;p&gt;It's the process of unplugging from the world that helps. Pair the cooking with jazz music and you're automatically teleported to another universe.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-any-amount-of-sunshine" class="anchor"&gt;
  &lt;/a&gt;
  Get any amount of sunshine
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0J1sixIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8k4w2s1cjkodsrckk5fv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0J1sixIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8k4w2s1cjkodsrckk5fv.jpeg" alt="Unsplash/@frankiefoto – Sometimes, stepping out to bright light is the productivity kick you need."&gt;&lt;/a&gt;&lt;br&gt;
I've never believed that the weather has an impact on one's mood but it does.&lt;/p&gt;

&lt;p&gt;Stay in doors too much and things will start to feel gloomy. Cabin fever sets in and you pack your living space back and forth like a mad raccoon.&lt;/p&gt;

&lt;p&gt;But you don't need to step out to fix this issue. I've realized that my cabin fever completely disappears if I open up windows early in the day.&lt;/p&gt;

&lt;p&gt;No need for huge windows or long walks outside. Just a few minutes of quiet, alone sunshine is all it takes.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-out" class="anchor"&gt;
  &lt;/a&gt;
  Closing out
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sfJ_YcN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b1nnql5zwb99fwkbaaz5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sfJ_YcN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b1nnql5zwb99fwkbaaz5.jpeg" alt="Unsplash/@attentieattentie – Small, hidden steps prepare you for any big battle out there."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“While it may seem small, the ripple effects of small things is extraordinary.”&lt;/em&gt; – Matt Bevin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Think about what you’ve read so far.&lt;/p&gt;

&lt;p&gt;You’ll notice that each sound simplistic because they are minor tweaks by themselves.&lt;/p&gt;

&lt;p&gt;But combining all of them together transformed how I got on top of things. You can achieve this type of change too if you follow the principles.&lt;/p&gt;

&lt;p&gt;Remember:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Principles &amp;gt;&amp;gt; tools&lt;/li&gt;
&lt;li&gt;Beat procrastination or it'll control you&lt;/li&gt;
&lt;li&gt;Put self care and sanity over constant execution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;    &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading" class="anchor"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://lifetechpsych.ck.page/"&gt;Get email tips/mentoring&lt;/a&gt;&lt;/strong&gt;: I share weekly tips and mentor new programmers and junior devs to focus on what matters (e.g. resume tips, portfolio review, etc). Feel free to join. &lt;em&gt;Note no video/audio calls for mentorship (strictly email or Twitter)&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://twitter.com/LifeTechPsych"&gt;Follow on Twitter&lt;/a&gt;&lt;/strong&gt;: If you're on Twitter, my DM is open. I've answered a lot of questions so feel free to ask away. I may get to you later than you expect but I definitely answer all questions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Heads Up&lt;/em&gt; - I love research so I tend to back my advice and approach with concepts from Behavioral Psychology and Neuroscience.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>computerscience</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Using Blockonomics Bitcoin Payments API</title>
      <author>Ayush Jain</author>
      <pubDate>Sat, 23 Jan 2021 16:24:58 +0000</pubDate>
      <link>https://dev.to/aj54/using-blockonomics-bitcoin-payments-api-5021</link>
      <guid>https://dev.to/aj54/using-blockonomics-bitcoin-payments-api-5021</guid>
      <description>&lt;p&gt;In this tutorial, we are going to use Blockonomics Payment API to receive Bitcoin payments on our website.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-blockonomics" class="anchor"&gt;
  &lt;/a&gt;
  What is Blockonomics?
&lt;/h1&gt;

&lt;p&gt;Blockonomics is a decentralized Bitcoin payment solution that provides you with specialized transactional tools to enhance your BTC use. With Blockonomics, you can generate Bitcoins by accepting it on your online stores, as well as utilitarian features such as creating P2P invoices, sending emails via Bitcoin, and tracking your wallet addresses. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-were-building" class="anchor"&gt;
  &lt;/a&gt;
  What we’re building
&lt;/h1&gt;

&lt;p&gt;We will create an online shop that will accept Bitcoin payments using &lt;a href="https://www.blockonomics.co/views/api.html#payments"&gt;Blockonomics Payment API&lt;/a&gt;. Let’s get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack" class="anchor"&gt;
  &lt;/a&gt;
  Tech Stack
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;HTML/CSS&lt;/li&gt;
&lt;li&gt;Javascript&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setting-up" class="anchor"&gt;
  &lt;/a&gt;
  Setting Up
&lt;/h2&gt;

&lt;p&gt;Before getting started, you can set up the local version of this tutorial using &lt;a href="https://github.com/AJ-54/Blockonomics"&gt;github repository&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/AJ-54/Blockonomics.git
pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Make sure you have your Blockonomics API Key handy. To get one for free, &lt;a href="https://www.blockonomics.co/register#"&gt;create your account&lt;/a&gt; and get to &lt;a href="https://www.blockonomics.co/merchants#/page3"&gt;this&lt;/a&gt; page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Inside Blockonomics folder, go to  &lt;code&gt;settings.py&lt;/code&gt; file and place your &lt;strong&gt;API KEY&lt;/strong&gt; to the &lt;code&gt;API_KEY&lt;/code&gt; variable&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py migrate
python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, if you go to &lt;a href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt;, you will be able to see the same screen like that of &lt;a href="https://blockonomics.herokuapp.com"&gt;https://blockonomics.herokuapp.com&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-order-hook-url" class="anchor"&gt;
  &lt;/a&gt;
  The Order Hook URL
&lt;/h3&gt;

&lt;p&gt;To use the Bitcoin payments API, you need to set up the order hook URL at your &lt;a href="https://www.blockonomics.co/merchants#/page3"&gt;merchant page&lt;/a&gt; on the Blockonomics website. Every time a transaction carried on the address associated with your API key changes its status, Blockonomics will use the order hook URL provided by you to notify you about the status update. Also, new transaction notifications are also provided using the same order hook URL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-logic" class="anchor"&gt;
  &lt;/a&gt;
  The Logic
&lt;/h2&gt;

&lt;p&gt;In order to integrate Blockonomics payment API, you should know how the process works. Firstly, you need the Blockonomics account and your API Key. Next, you should use a unique Bitcoin address every time you do a transaction. You can request a new address using the &lt;a href="https://www.blockonomics.co/views/api.html#newaddress"&gt;New Address API&lt;/a&gt;. Once the buyer uses that Bitcoin address to transfer the amount, you will get the status update from Blockonomics on the &lt;code&gt;Order Hook URL&lt;/code&gt; provided by you. Thus, your backend logic must process the requests received at that endpoint to classify the transactions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#payments-app" class="anchor"&gt;
  &lt;/a&gt;
  Payments App
&lt;/h2&gt;

&lt;p&gt;I have created a core Django application called &lt;code&gt;payments&lt;/code&gt; which is responsible for everything. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understanding-models" class="anchor"&gt;
  &lt;/a&gt;
  Understanding Models
&lt;/h3&gt;

&lt;p&gt;To store the information about the transactions, I created an &lt;code&gt;Invoice&lt;/code&gt; table. The table looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Invoice(models.Model):
    STATUS_CHOICES = ((-1,"Not Started"),(0,'Unconfirmed'),
   (1,"Partially Confirmed"), (2,"Confirmed"))

    product = models.ForeignKey("Product", on_delete=models.CASCADE)
    status = models.IntegerField(choices=STATUS_CHOICES, default=-1)
    order_id = models.CharField(max_length=250)
    address = models.CharField(max_length=250, blank=True, null=True)
    btcvalue = models.IntegerField(blank=True, null=True)
    received = models.IntegerField(blank=True, null=True)
    txid = models.CharField(max_length=250, blank=True, null=True)
    rbf = models.IntegerField(blank=True, null=True)
    created_at = models.DateField(auto_now=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Invoice&lt;/code&gt; table stores the &lt;code&gt;product&lt;/code&gt; for which the invoice is created, the &lt;code&gt;address&lt;/code&gt; is the Bitcoin address used for this transaction. The &lt;code&gt;btcvalue&lt;/code&gt; is the amount that you have charged from the buyer and &lt;code&gt;received&lt;/code&gt; is the amount you receive from the buyer. Both these values will be in satoshi. The most important field is &lt;code&gt;status&lt;/code&gt; which describes the current status of this transaction. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-payment-invoice" class="anchor"&gt;
  &lt;/a&gt;
  Creating Payment Invoice
&lt;/h3&gt;

&lt;p&gt;Once the user clicks on the price button, we process the request inside &lt;code&gt;create_payment&lt;/code&gt; view. The job here is to create a new object in the &lt;code&gt;Invoice&lt;/code&gt; table and then redirect the request to the &lt;code&gt;track_invoice&lt;/code&gt; view.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def exchanged_rate(amount):
    url = "https://www.blockonomics.co/api/price?currency=USD"
    r = requests.get(url)
    response = r.json()
    return amount/response['price']

def create_payment(request, pk):

    product_id = pk
    product = Product.objects.get(id=product_id)
    url = 'https://www.blockonomics.co/api/new_address'
    headers = {'Authorization': "Bearer " + settings.API_KEY}
    r = requests.post(url, headers=headers)
    print(r.json())
    if r.status_code == 200:
        address = r.json()['address']
        bits = exchanged_rate(product.price)
        order_id = uuid.uuid1()
        invoice = Invoice.objects.create(order_id=order_id,
                                address=address,btcvalue=bits*1e8, product=product)
        return HttpResponseRedirect(reverse('payments:track_payment', kwargs={'pk':invoice.id}))
    else:
        print(r.status_code, r.text)
        return HttpResponse("Some Error, Try Again!")
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#order-hook-url-endpoint" class="anchor"&gt;
  &lt;/a&gt;
  Order Hook URL Endpoint
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;receive_payment&lt;/code&gt; view is the endpoint for receiving status updates from Blockonomics. It is used to sync our &lt;code&gt;Invoice&lt;/code&gt; table in the database with recent transactions and their status updates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def receive_payment(request):

    if (request.method != 'GET'):
        return 

    txid  = request.GET.get('txid')
    value = request.GET.get('value')
    status = request.GET.get('status')
    addr = request.GET.get('addr')

    invoice = Invoice.objects.get(address = addr)

    invoice.status = int(status)
    if (int(status) == 2):
        invoice.received = value
    invoice.txid = txid
    invoice.save()
    return HttpResponse(200)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tracking-payment-invoice" class="anchor"&gt;
  &lt;/a&gt;
  Tracking Payment Invoice
&lt;/h3&gt;

&lt;p&gt;You can track any invoice if you know the invoice ID. The &lt;code&gt;track_invoice&lt;/code&gt; view fetches the latest data of that invoice ID from our database and passes it to the frontend. It also passes whether the user has paid the required amount, if yes then the &lt;code&gt;paid&lt;/code&gt; variable is also passed to the frontend. At this point, you can add your business logic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def track_invoice(request, pk):
    invoice_id = pk
    invoice = Invoice.objects.get(id=invoice_id)
    data = {
            'order_id':invoice.order_id,
            'bits':invoice.btcvalue/1e8,
            'value':invoice.product.price,
            'addr': invoice.address,
            'status':Invoice.STATUS_CHOICES[invoice.status+1][1],
            'invoice_status': invoice.status,
        }
    if (invoice.received):
        data['paid'] =  invoice.received/1e8
        if (int(invoice.btcvalue) &amp;lt;= int(invoice.received)):
            data['path'] = invoice.product.product_image.url
    else:
        data['paid'] = 0  

    return render(request,'invoice.html',context=data)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#invoice-page-front-end" class="anchor"&gt;
  &lt;/a&gt;
  Invoice Page Front End
&lt;/h3&gt;

&lt;p&gt;In the frontend, we have displayed all the data we get from &lt;code&gt;track_invoice&lt;/code&gt; view. But, when the transaction status gets updated, how will the buyer know about it? &lt;br&gt;
To address this issue, we can either continuously pool our database to get the recent status of this invoice or we can use the WebSocket provided by Blockonomics. It is &lt;strong&gt;HIGHLY&lt;/strong&gt; recommended to use WebSocket as continuous polling may have serious effects on system performance. Blockonomics pushes the status update through websocket as well, so your frontend will instantaneously know the changes, so you know that your page is now outdated. At this point, you can either reload the page to get recent data from &lt;code&gt;track_invoice&lt;/code&gt; view or use AJAX calls to do the same. It is recommended to use a time out of 1 second, because &lt;code&gt;receive_payment&lt;/code&gt; view will take some time to update the database with details and once you wait for a while, you are assured that your database is updated and thus you can perform the action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var socket = new WebSocket("wss://www.blockonomics.co/payment/"+ address);
socket.onmessage = function(event){
  response = JSON.parse(event.data);
  //This condition ensures that we reload only when we get a 
  //new payment status and don't go into a loop
    if (parseInt(response.status) &amp;gt; parseInt(status))
    setTimeout(function(){window.location.reload() }, 1000); 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-end" class="anchor"&gt;
  &lt;/a&gt;
  The End
&lt;/h2&gt;

&lt;p&gt;The video tutorial explaining the entire demo is attached below. In case you have queries, feel free to use the comment section!&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xGeD1UUXpMk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>django</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>🚀 React performance quick wins 🚀 - 7 easy ways to improve your React performance - part 2</title>
      <author>Marco Kühbauch</author>
      <pubDate>Sat, 23 Jan 2021 16:24:51 +0000</pubDate>
      <link>https://dev.to/mkuehb/react-performance-quick-wins-7-easy-ways-to-improve-your-react-performance-part-2-4j3c</link>
      <guid>https://dev.to/mkuehb/react-performance-quick-wins-7-easy-ways-to-improve-your-react-performance-part-2-4j3c</guid>
      <description>&lt;p&gt;In part 1 of this react performance quickwins series, we already learned about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;a href="https://marcokuehbauch.com/blog/7-easy-ways-to-improve-your-react-performance-part-1/#keys"&gt;Always use a key when mapping (and not index)&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
   &lt;a href="https://marcokuehbauch.com/blog/7-easy-ways-to-improve-your-react-performance-part-1/#fragments"&gt;Use React.Fragments instead of divs as parent element&lt;/a&gt;
  &lt;/li&gt;
  &lt;a href="https://marcokuehbauch.com/blog/7-easy-ways-to-improve-your-react-performance-part-1/#useState"&gt;One useState hook instead of multiple for connected data&lt;/a&gt;
&lt;/ul&gt;

&lt;p&gt;The second part of this series brings you another &lt;strong&gt;4 great quickwins&lt;/strong&gt; you can apply directly to your code and improve your performance&lt;/p&gt;

&lt;p&gt;This Post is Part 2 of a series.&lt;/p&gt;

&lt;p&gt;Part 1: &lt;a href="https://marcokuehbauch.com/blog/7-easy-ways-to-improve-your-react-performance-part-1"&gt;🚀 React performance quick wins 🚀 - 7 easy ways to improve your React performance - part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you can learn from Part 2 of this React performance quick wins series:&lt;/strong&gt;&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;&lt;a href="#avoid-anonymous-funcs"&gt;Avoid anonymous functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#defining-objects"&gt;Define objects outside of your component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lazy-suspense"&gt;React.lazy and React.Suspense&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#virtualized-lists"&gt;Virtualized lists&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#avoid-anonymous-functions" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Avoid anonymous functions
&lt;/h2&gt;

&lt;p&gt;It's easy to use an anonymous function when you want to add a quick callback function to a component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But if you're on the lookout for a quick performance win, that's something you can avoid.&lt;/p&gt;

&lt;p&gt;Anonymous functions aren’t assigned an identifier like const/let/var. This means they &lt;strong&gt;are not persistent&lt;/strong&gt; whenever this functional component gets rendered again. So JavaScript has to &lt;strong&gt;create them again and again&lt;/strong&gt; on every re-render.&lt;/p&gt;

&lt;p&gt;This becomes a problem, if you're rendering a loooot of elements, like a lot of table cells, which all make use of an anonymous function.&lt;/p&gt;

&lt;p&gt;There is an easy way to solve this. You can simply change it to a &lt;strong&gt;named function&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it for quickwin number 4: avoid anonymous functions!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#define-objects-outside-of-your-component" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Define objects outside of your component
&lt;/h2&gt;

&lt;p&gt;Here comes quickwin number 5. Something similar as described above can be applied to objects.&lt;/p&gt;

&lt;p&gt;If you define an object as a object literal and pass it in as props, this object will have to be recreated on every rerender.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;textAlign&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;14px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      This is the text of my component.
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Instead define your object outside of the component. Now it is created once on the initial render and not being touched on every rerender.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DIV_STYLES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;14px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;textAlign&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;DIV_STYLES&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is the text of my component.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Performance quickwin whoop whoop! 🚀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reactlazy-and-reactsuspense" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;React.lazy and React.Suspense
&lt;/h2&gt;

&lt;p&gt;With &lt;code&gt;React.lazy&lt;/code&gt; you can "lazy load" your components. This means your component is only rendered when it is truly needed and not loaded unnecessarily.&lt;/p&gt;

&lt;p&gt;The less you need to load, the better your performance!&lt;/p&gt;

&lt;p&gt;This can easily be combined with React.Suspense for rendering some fallback content.&lt;/p&gt;

&lt;p&gt;I wrote a whole Today-I-learned post about this topic, check it out here: &lt;a href="https://marcokuehbauch.com/today-I-learned/react-suspense-lazy-loading"&gt;Today I learned: React Suspense lazy-loading&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's also a great way to improve your react performance without too much effort.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtualized-lists" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Virtualized lists
&lt;/h2&gt;

&lt;p&gt;If you've ever worked with long lists or tables with a lot of rows in React you know how much this can impact your performance. You have to render a lot of content, usually a lot of divs.&lt;/p&gt;

&lt;p&gt;We already learned that too much DOM nodes is not a good idea. Also updates and rerenders can be really painful because they take just way too long.&lt;/p&gt;

&lt;p&gt;With virtualized lists only the list items get rendered, that are actually in the viewport. That's pretty cool. But how does this work? Don't worry, you won't have to build this yourself. There are already amazing tools out there which do the job for you.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://github.com/bvaughn/react-virtualized"&gt;react-virtualized&lt;/a&gt; by Brian Vaughn.&lt;/p&gt;

&lt;p&gt;It's pretty easy to use and you don't need to worry about displaying long lists and tables anymore.&lt;/p&gt;

&lt;p&gt;So that's it, these are my &lt;strong&gt;7 easy ways to improve your React performance&lt;/strong&gt;. Did you already know all of them? Do you have any additional tips? Let me know!&lt;/p&gt;

&lt;p&gt;Just send me an &lt;a href="//mailto:marcokuehbauch@gmail.com"&gt;email&lt;/a&gt; or message me on &lt;a href="https://twitter.com/Mkuehb"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>performance</category>
      <category>javascript</category>
    </item>
    <item>
      <title>My beloved Python cheat sheet</title>
      <author>rickavmaniac</author>
      <pubDate>Sat, 23 Jan 2021 15:45:42 +0000</pubDate>
      <link>https://dev.to/rickavmaniac/my-beloved-python-cheat-sheet-4kpk</link>
      <guid>https://dev.to/rickavmaniac/my-beloved-python-cheat-sheet-4kpk</guid>
      <description>&lt;p&gt;Here is my cheat sheet I created along my learning journey. If you have any recommendations (addition/subtraction) let me know.&lt;/p&gt;

&lt;p&gt;Naming conventions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Variable lower_snake
&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Mike'&lt;/span&gt;

&lt;span class="c1"&gt;# Class and module CamelCase
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InvoiceDetail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="c1"&gt;# Constant
&lt;/span&gt;&lt;span class="n"&gt;MAX_USER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="c1"&gt;# All uppercase
&lt;/span&gt;
&lt;span class="c1"&gt;# Indentation : 4 spaces
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Small number'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Data type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Mike'&lt;/span&gt; &lt;span class="c1"&gt;# string
&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="c1"&gt;# int
&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;199.99&lt;/span&gt; &lt;span class="c1"&gt;# float
&lt;/span&gt;&lt;span class="n"&gt;is_active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="c1"&gt;# boolean
&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'green'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# list
&lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'iPad Pro'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'price'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;199.99&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# dict
&lt;/span&gt;&lt;span class="n"&gt;MAX_USER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="c1"&gt;# Constant
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Type conversion&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Convert to string
&lt;/span&gt;&lt;span class="n"&gt;my_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;199.99&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# "199.99"
&lt;/span&gt;
&lt;span class="c1"&gt;# Convert to number
&lt;/span&gt;&lt;span class="n"&gt;my_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'21.99'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 21
&lt;/span&gt;&lt;span class="n"&gt;my_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'21.99'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 21.99
&lt;/span&gt;
&lt;span class="c1"&gt;# Get type
&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;class 'str'&amp;gt;
&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;class 'float'&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# True
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Strings methods&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Mike'&lt;/span&gt;

&lt;span class="c1"&gt;# Convert to lower case
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# mike
&lt;/span&gt;
&lt;span class="c1"&gt;# Convert to upper case
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# MIKE
&lt;/span&gt;
&lt;span class="c1"&gt;# Convert first char to Capital letter
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Mike
&lt;/span&gt;
&lt;span class="c1"&gt;# Convert first char of all words to Capital letter
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'mike taylor'&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Mike Taylor
&lt;/span&gt;
&lt;span class="c1"&gt;# Chain methods
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Mike
&lt;/span&gt;
&lt;span class="c1"&gt;# String length
&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 4
&lt;/span&gt;
&lt;span class="c1"&gt;# String concatenation
&lt;/span&gt;&lt;span class="n"&gt;full_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;

&lt;span class="c1"&gt;# String format
&lt;/span&gt;&lt;span class="n"&gt;full_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;# Remove leading and trailing characters (like space or \n)
&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;' this is a text with white space '&lt;/span&gt;
&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 'this is a test with white space'
&lt;/span&gt;
&lt;span class="c1"&gt;# Get string first character
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# M
&lt;/span&gt;
&lt;span class="c1"&gt;# Get string last character
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# e
&lt;/span&gt;
&lt;span class="c1"&gt;# Get partial string
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# ik
&lt;/span&gt;
&lt;span class="c1"&gt;# Replace
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'M'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'P'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Pike
&lt;/span&gt;
&lt;span class="c1"&gt;# Find
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 2
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Commons fonctions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Print to console
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Print multiple string
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'World'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Hello World
&lt;/span&gt;
&lt;span class="c1"&gt;# Multiple print
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="s"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# ----------
&lt;/span&gt;
&lt;span class="c1"&gt;# Variable pretty printer (for debug)
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;
&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# will output var with formatting
&lt;/span&gt;
&lt;span class="c1"&gt;# Get keyboard input
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'What is your name? '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Random (between 0 and 1)
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# 0.26230234411558273
&lt;/span&gt;
&lt;span class="c1"&gt;# Random beween x and y
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Conditionals&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'x is 4'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'x is between 6 and 10'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'x is 5 or greater than 10'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#In or not in
&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'green'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'yellow'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;'blue'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;'white'&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="c1"&gt;# Ternary
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'y = 10'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'y != 10'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="c1"&gt;# ShortHand Ternary
&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Valid'&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;is_valid&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;"Not valid"&lt;/span&gt; &lt;span class="c1"&gt;# 'Valid'
&lt;/span&gt;
&lt;span class="c1"&gt;# Falsy
&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="c1"&gt;# Truthy
&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Interations&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# iterating over a sequence (list, string, etc.)
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# With index
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Range
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;#0..9
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#5..9
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# While loop
&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# exit loop
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="c1"&gt;# Jump to next while
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;

    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# For loop dic
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;my_dict&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# List comprehension: 
# values = [(expression) for (value) in (collection)]
&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# List comprehension filtering
# values = [expression for value in collection if condition]
&lt;/span&gt;&lt;span class="n"&gt;even_squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;List and Tuple&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Create a list
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'orange'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'apple'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'melon'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Append to List
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'banana'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# List length
&lt;/span&gt;&lt;span class="n"&gt;nb_items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Remove from list
&lt;/span&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c1"&gt;#remove apple
&lt;/span&gt;
&lt;span class="c1"&gt;# List access
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# first item
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# last item
&lt;/span&gt;
&lt;span class="c1"&gt;# Slice
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# first 3
&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;  &lt;span class="c1"&gt;# last 2
&lt;/span&gt;&lt;span class="n"&gt;copy_fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt; &lt;span class="c1"&gt;# copy
&lt;/span&gt;
&lt;span class="c1"&gt;# List length
&lt;/span&gt;&lt;span class="n"&gt;nb_entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="c1"&gt;#Create list from string
&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'red, green, blue'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;', '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Array concact
&lt;/span&gt;&lt;span class="n"&gt;color1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;color2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'green'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'yellow'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;color3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;color2&lt;/span&gt;

&lt;span class="c1"&gt;# Concat by unpacking
&lt;/span&gt;&lt;span class="n"&gt;color3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;color1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;color2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Multiple assignment
&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'iPhone'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;599&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;#Create a Tuple (kind of read only list)
&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'green'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Dictionaries&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Create a empty dict
&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="c1"&gt;#Create a dict with key/value
&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'iPadPro'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;#Access dic value by key
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# iPadPro
&lt;/span&gt;
&lt;span class="c1"&gt;# Adding a new key/value
&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'description'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Modern mobile device"&lt;/span&gt;

&lt;span class="c1"&gt;# Get dict keys
&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# ['id', 'name', 'description']
&lt;/span&gt;
&lt;span class="c1"&gt;# Get dic values
&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# ['100', 'iPadPro', 'Modern mobile device']
&lt;/span&gt;
&lt;span class="c1"&gt;# Create a list of dict
&lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'iPadPro'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'iPhone 12'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Charger'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Access list of dict
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Charger
&lt;/span&gt;
&lt;span class="c1"&gt;# Search list dict
&lt;/span&gt;&lt;span class="n"&gt;items_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# [{'id': 300, 'name': 'Charger'}]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Functions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Create a function
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Function with argument (with default value)
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'no name'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Hello &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="c1"&gt;# Function with argument (with optional value)
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Hello &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Call a function
&lt;/span&gt;&lt;span class="n"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Hello Mike
&lt;/span&gt;
&lt;span class="c1"&gt;# Call using keyword argument
&lt;/span&gt;&lt;span class="n"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="c1"&gt;# Function returning a value
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;

&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 30
&lt;/span&gt;
&lt;span class="c1"&gt;# Arbitrary numbers of arguments *args
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Hello &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Arbitrary numbers of keywords arguments **kwargs
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Lambda function
&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 30
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Date and time&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;

&lt;span class="c1"&gt;# Return the current date and time.
&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Create a date time object
&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Dec 31 2020
&lt;/span&gt;
&lt;span class="c1"&gt;# Add to date/time (weeks, days, hours, minutes, seconds) 
&lt;/span&gt;&lt;span class="n"&gt;new_year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Jan 1 2021
&lt;/span&gt;
&lt;span class="c1"&gt;# Format a date to string
&lt;/span&gt;&lt;span class="n"&gt;new_year&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'%Y/%m/%d %H %M %S'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 2021/01/01 00 00 00 
&lt;/span&gt;&lt;span class="n"&gt;new_year&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'%A, %b %d'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Friday, Jan 01
&lt;/span&gt;
&lt;span class="c1"&gt;# Extract from date
&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_year&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="c1"&gt;# 2021
&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_year&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="c1"&gt;# 01
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;File&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Reading a file and storing its lines
&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'demo.txt'&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Writing to a file
&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'settings.txt'&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MAX_USER = 100"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# CSV
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="n"&gt;csv_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'export.csv'&lt;/span&gt;
&lt;span class="n"&gt;csv_columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# ['id', 'name']
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csvfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csvfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fieldnames&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;csv_columns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writeheader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;iten&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#catching-an-exception" class="anchor"&gt;
  &lt;/a&gt;
  Catching an exception
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;age_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Your age? '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter a numeric value"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Your age is saved!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;OOP&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Create a class
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="c1"&gt;# Create new object instance
&lt;/span&gt;&lt;span class="n"&gt;product_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Constructor with attributes
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;

&lt;span class="c1"&gt;# Create instance with attributes
&lt;/span&gt;&lt;span class="n"&gt;product_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'iPadPro'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;699.99&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;product_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'iPhone12'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;799.99&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# iPadPro
&lt;/span&gt;
&lt;span class="c1"&gt;# instance method
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;display_price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Price : &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display_price&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# class method
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ... 
&lt;/span&gt;    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Product'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# default name, default price
&lt;/span&gt;
&lt;span class="n"&gt;product_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 

&lt;span class="c1"&gt;# static method
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ... 
&lt;/span&gt;    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;trunc_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nb_char&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;nb_char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'...'&lt;/span&gt; 

&lt;span class="n"&gt;product_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trunc_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'This is a blog'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# This i... 
&lt;/span&gt;
&lt;span class="c1"&gt;# Python Inheritance
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebProduct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;web_code&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;web_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;web_code&lt;/span&gt;

&lt;span class="c1"&gt;# Private scope (naming convention only)
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;

&lt;span class="c1"&gt;# Getter and setter
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_price&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

&lt;span class="c1"&gt;# Mixins
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Mixin1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Mixin1"&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Mixin2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Mixin2"&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mixin2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mixin1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Mixin2
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>python</category>
      <category>django</category>
      <category>flask</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Noob's guide to CA, TLS, SSL, HTTPS, Sym + Asym Encryption &amp; MITM attack !</title>
      <author>Tilak Madichetti</author>
      <pubDate>Sat, 23 Jan 2021 15:22:45 +0000</pubDate>
      <link>https://dev.to/tilakmaddy_68/noob-s-guide-to-ca-tls-ssl-https-sym-asym-encryption-mitm-attack-5d30</link>
      <guid>https://dev.to/tilakmaddy_68/noob-s-guide-to-ca-tls-ssl-https-sym-asym-encryption-mitm-attack-5d30</guid>
      <description>&lt;p&gt;None of the above words have to make sense to you just yet.  Go and grab a 🍺, give a &lt;strong&gt;HUGE&lt;/strong&gt; ❤️ as we dive right in to it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Encryption&lt;/strong&gt; is a way to convert data into special text (that is un-processable by itself) so that only the &lt;em&gt;encryptor&lt;/em&gt; and the person who is intended to receive the data can convert it back &lt;em&gt;(decrypt)&lt;/em&gt; to original form.&lt;/p&gt;

&lt;p&gt;This conversion happens with the help of a 🔑! which is just some random string text again :) So&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// this is shared between the encryptor and the decryptor &lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;encryptedMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;functionThatEncrypts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plainMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;plainMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;functionThatDecrypts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;encryptedMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Notice in the above example we used the same &lt;code&gt;key&lt;/code&gt; to encrypt and decrypt the message. This is called &lt;strong&gt;Symmetric encryption&lt;/strong&gt; and when we have two separate keys its called &lt;strong&gt;Asymmetric encryption&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also the functions used to encrypt and decrypt both generally come from the same standard like Advanced Encryption Standard &lt;a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard"&gt;&lt;strong&gt;AES&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;




&lt;p&gt;Now think of a scenario where two computers that &lt;strong&gt;knew each other beforehand&lt;/strong&gt; have to share some secret data . How can they do it ?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Decide on a common &lt;code&gt;key&lt;/code&gt; while being &lt;strong&gt;offline&lt;/strong&gt; to use and not share it with anyone else&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then use that key to encrypt and decrypt data while talking &lt;strong&gt;online&lt;/strong&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a result no-one &lt;strong&gt;online and offline&lt;/strong&gt; can make out what they are talking ! This is a secure connection 🙌 powered by &lt;strong&gt;Symmetric encryption&lt;/strong&gt; &lt;/p&gt;




&lt;p&gt;But more often in real life two computers have to talk for the first time &lt;strong&gt;online&lt;/strong&gt; . So if they share to decide on a common key they would have to first transfer the common key in plain text &lt;strong&gt;online&lt;/strong&gt; !&lt;/p&gt;

&lt;p&gt;That's crazy because the internet is like an open connection and any person sniffing on the network can make out what your &lt;em&gt;apparently secret&lt;/em&gt; key is ! 🔐 &lt;/p&gt;

&lt;p&gt;And then use it to imitate &lt;code&gt;Computer A&lt;/code&gt; to &lt;code&gt;Computer B&lt;/code&gt; and &lt;code&gt;Computer B&lt;/code&gt; to &lt;code&gt;Computer A&lt;/code&gt; whilst getting to see the entire chat 💭 that's going on. And worse, the attacker can &lt;strong&gt;manipulate packets&lt;/strong&gt; coming from &lt;code&gt;Computer A&lt;/code&gt; and send  to &lt;code&gt;Computer B&lt;/code&gt; for his benefit ! like asking for credit card details via supplying wrong HTML to legitimately requested webpages. 💥 ٩(๏_๏)۶ 💥&lt;/p&gt;

&lt;p&gt;The above is called &lt;strong&gt;MITM - Man in the Middle attack&lt;/strong&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#solution-for-the-above-problem-" class="anchor"&gt;
  &lt;/a&gt;
  Solution for the above problem -
&lt;/h3&gt;

&lt;p&gt;Send the secret key via a  rocket to the other computer's location which each time you wanna make a request !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fD-i6n2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/415v3y8j4qs8nei39f48.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fD-i6n2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/415v3y8j4qs8nei39f48.gif" alt="Rocket"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But it's a little expensive !&lt;/p&gt;

&lt;p&gt;So we use &lt;strong&gt;Asymmetric encryption&lt;/strong&gt; to address the issue.&lt;/p&gt;

&lt;p&gt;This involves 2 kinds of keys - One for encryption which is publicly available and the other for decryption which is private.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important part&lt;/strong&gt; is that any data which is encrypted using public key can only be decrypted using the private key 🔑&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;publicKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;privateKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;AES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generateKeyPair&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;encryptedText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;functionThatEncrypts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plainText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;publicKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;plainText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;functionThatDecrypts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;encryptedText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we'll learn how we can use that functionality to transport a common key that both the computers agree to, &lt;strong&gt;online&lt;/strong&gt; except this time it will be encrypted so it cannot be intercepted by any man in the middle !&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Computer A&lt;/code&gt; initiates a connection to &lt;code&gt;Computer B&lt;/code&gt; by sending a plain text hello ! 👋 This of course contains information like srcIP, srcPort, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Computer B&lt;/code&gt; then sends its &lt;strong&gt;public key&lt;/strong&gt; to &lt;code&gt;Computer A&lt;/code&gt; as a response packet&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Computer A&lt;/code&gt; now uses the public key to encrypt another key 🔑 of its own which will later work as the common key. This encrypted data is known an &lt;code&gt;Premaster Secret&lt;/code&gt; and will be sent to &lt;code&gt;Computer B&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// On side of Computer A&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;finalKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// generated by Computer A&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;publicKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;receiveFromComputerB&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Step 2&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;premasterSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;functionThatEncrypts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;finalKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;publicKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;sendToComputerB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;premasterSecret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Remember: Our goal is to share a common key without the fear of being intercepted - so in this way we can get back to talking with &lt;strong&gt;Symmetric encryption&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;Computer B&lt;/code&gt; can decrypt it using its &lt;strong&gt;private key&lt;/strong&gt;. And no other computer (even &lt;code&gt;Computer A&lt;/code&gt;) at this point can decrypt the premaster secret.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// On side of Computer B&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;premasterSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;receiveFromComputerA&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;privateKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;....&lt;/span&gt; &lt;span class="c1"&gt;// generated as a pair along with public key&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;finalKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;functionThatDecrypts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;premasterSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;*Now both computers share a common key * &lt;code&gt;finalKey&lt;/code&gt; !&lt;/p&gt;

&lt;p&gt;The above 3 step process is called the &lt;strong&gt;Transport Layer Security Handshake&lt;/strong&gt;. (TLS)&lt;/p&gt;




&lt;p&gt;Buuuu......t we are not done yet because clearly in &lt;code&gt;Step 2&lt;/code&gt; the public key transfer to &lt;code&gt;Computer A&lt;/code&gt; can be intercepted by a man in the middle who can totally represent himself falsely to &lt;code&gt;Computer A&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hence &lt;code&gt;Computer A&lt;/code&gt; needs to be able to verify if the public key that it receives is actually from &lt;code&gt;Computer B&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#solution-ssl-secure-socket-layer" class="anchor"&gt;
  &lt;/a&gt;
  Solution -  SSL (Secure socket layer)
&lt;/h3&gt;

&lt;p&gt;Yes ! &lt;code&gt;Computer B&lt;/code&gt; needs to send the &lt;strong&gt;pubilcKey&lt;/strong&gt; through  a privately signed SSL certificate and not directly. The reason is &lt;code&gt;Computer A&lt;/code&gt; on the receiving end can get the certificate verified through a &lt;strong&gt;Certificate Authority&lt;/strong&gt; (CA) which is a 3rd party service that helps verify server profiles on the internet ! Details of which I will not dive into in this blog coz it's a noob's blog.&lt;/p&gt;

&lt;p&gt;So now when &lt;strong&gt;SSL&lt;/strong&gt; is used, the HTTP requests become secure by a million times and its called &lt;strong&gt;HTTPS&lt;/strong&gt;. &lt;/p&gt;




&lt;p&gt;That ends my blog. I have covered all the terms included in the title - so its definitely not a clickbait which means you owe me one or more of these suckers 👍 that float on the left side of your screen&lt;/p&gt;

&lt;p&gt;Thanks for reading !&lt;/p&gt;

&lt;p&gt;Feel free to comment down below any of your questions and I will try my best to answer them. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>security</category>
      <category>tutorial</category>
      <category>encryption</category>
    </item>
    <item>
      <title>Git Setup for OpenSource/Public Development</title>
      <author>Steven Cooney</author>
      <pubDate>Sat, 23 Jan 2021 15:13:41 +0000</pubDate>
      <link>https://dev.to/theyorkshiredev/git-setup-for-opensource-public-development-ml1</link>
      <guid>https://dev.to/theyorkshiredev/git-setup-for-opensource-public-development-ml1</guid>
      <description>&lt;p&gt;If you intend to develop in the public domain on opensource projects, you will need to set up Git. I'm going to outline my git configuration and discuss my approach.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#email-address" class="anchor"&gt;
  &lt;/a&gt;
  Email Address
&lt;/h1&gt;

&lt;p&gt;When setting up Git, one of the first things you set up is your email address. Often not much thought is given to this step, however, if you use your private email address you are advertising your email address. Consequently, your email address could become subject to spam by a malicious actor who scrapes email address from git history.&lt;/p&gt;

&lt;p&gt;For example, below is a screenshot of Wes Bos' &lt;a href="https://github.com/wesbos/awesome-uses"&gt;awesome-uses&lt;/a&gt; repository. You can see several of the contributors have exposed their email addresses when committing to the project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3t9iQ4YA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/amdaogbra2n4bh8zkxuf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3t9iQ4YA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/amdaogbra2n4bh8zkxuf.png" alt="Image of Git Log"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-configuration" class="anchor"&gt;
  &lt;/a&gt;
  My Configuration
&lt;/h2&gt;

&lt;p&gt;I use the no-reply address for my GitHub account as my git email. On GitHub, you can find your no-reply email address in &lt;em&gt;Settings&lt;/em&gt; &amp;gt; &lt;em&gt;Emails&lt;/em&gt; &amp;gt; under "Keep my email addresses private".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O6j7l8xM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0h8sp2cn5mk2d3q8d5p5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O6j7l8xM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0h8sp2cn5mk2d3q8d5p5.png" alt="GitHub Email Settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can then set your git email using this address:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.email "30004860+TheYorkshireDev@users.noreply.github.com"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To avoid my email address from being exposed when performing actions through GitHub UI such as edits or merges, I check "Keep my email addresses private".&lt;/p&gt;

&lt;p&gt;Finally, I check "Block command line pushes that expose my email" which blocks pushes with commits that include personal email addresses.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#username" class="anchor"&gt;
  &lt;/a&gt;
  Username
&lt;/h1&gt;

&lt;p&gt;When setting up Git, alongside email, you need to set your name. I would recommend using your first and surname for this option, which most people will probably do automatically. It is worth noting if you are thinking of using a pseudonym in Git, it can violate some open source projects contribution guidelines. One such example is the Docker project, so to err on the side of caution, it might be worth sticking to your real name.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#commit-signing" class="anchor"&gt;
  &lt;/a&gt;
  Commit Signing
&lt;/h1&gt;

&lt;p&gt;The final thing I have configured for open source development is commit signing. I'm not going to go over the advantages and disadvantages of commit signing in this post, for more details check out &lt;a href="https://softwareengineering.stackexchange.com/a/212216"&gt;this StackExchange post&lt;/a&gt; and sub-links. Not everyone agrees on an approach to commit signing, but I tend to sign all my commits.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generate-gpg-key" class="anchor"&gt;
  &lt;/a&gt;
  Generate GPG Key
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Use the &lt;code&gt;no-reply&lt;/code&gt; email address when generating a GPG key.&lt;/p&gt;

&lt;p&gt;I recommend following GitHub's official guide for &lt;a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/generating-a-new-gpg-key"&gt;generating GPG keys&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-a-gpg-key-to-your-github-account" class="anchor"&gt;
  &lt;/a&gt;
  Add a GPG key to your GitHub Account
&lt;/h2&gt;

&lt;p&gt;You will need to have noted down your public key to upload to GitHub. If you didn't, run the following to retrieve it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gpg --armor --export &amp;lt;EMAIL_ADDRESS&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Again, I recommend following GitHub's official guide for &lt;a href="https://docs.github.com/en/github/authenticating-to-github/adding-a-new-gpg-key-to-your-github-account"&gt;adding a GPG key to your GitHub account&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-local-environment" class="anchor"&gt;
  &lt;/a&gt;
  Configure Local Environment
&lt;/h2&gt;

&lt;p&gt;The following commands configure Git to always sign commits with the GPG key you have just generated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You want the GPG key id you have just generated, run &lt;code&gt;gpg --list-secret-keys --keyid-format LONG&lt;/code&gt; to find it again if you didn't note it down.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.signingKey &amp;lt;REPLACE\_THIS\_WITH\_YOUR\_KEY\_ID&amp;gt;

git config --global commit.gpgSign true
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To verify commit signing is configured, run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo "test" | gpg --clearsign
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;What's your Git configuration? Do you have any feedback? Reach out and let's discuss.&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>opensource</category>
    </item>
    <item>
      <title>7 React Projects You Should Build in 2021</title>
      <author>Reed Barger</author>
      <pubDate>Sat, 23 Jan 2021 15:03:04 +0000</pubDate>
      <link>https://dev.to/reedbarger/7-react-projects-you-should-build-in-2021-p20</link>
      <guid>https://dev.to/reedbarger/7-react-projects-you-should-build-in-2021-p20</guid>
      <description>&lt;p&gt;React is a JavaScript library that is ideal for creating impressive apps. There are countless projects that you can make with React, but here are seven that are on my list to build in 2021.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why have I selected these seven projects in particular?&lt;/em&gt; I picked them because they build off of one another. They require you to know similar, essential concepts like authentication, working with an API and database, using a React router for adding pages to your app, and playing media like audio or video. &lt;/p&gt;

&lt;p&gt;Plus, many applications can be (and often are) integrated into one another. Social media apps can include chat apps, music or video apps can include e-commerce apps, and so on.&lt;/p&gt;

&lt;p&gt;In other words, &lt;strong&gt;building any of these projects&lt;/strong&gt; will give you the skills and knowledge required to build the rest of the apps on the list, including your own personal projects.&lt;/p&gt;

&lt;p&gt;Along with each project, I have provided several real-world examples which you can use to find inspiration, plus some ideas about what tools I would possibly use to build each app.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to see how to build each of these apps for yourself, &lt;a href="http://bit.ly/react-projects"&gt;check out my course series&lt;/a&gt;, where you'll learn how to create an impressive React project at the end of every month.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#1-realtime-chat-app" class="anchor"&gt;
  &lt;/a&gt;
  1. Realtime Chat App
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Real-world examples&lt;/strong&gt;: Slack, Messenger, Discord, Crisp Chat&lt;/p&gt;

&lt;p&gt;Virtually all of use some kind of realtime chat app, whether it's a mobile application like WhatsApp or Viber or a productivity tool like Slack or Discord. It could also be part of a chat widget within a website where customers can directly talk with the site owners. &lt;/p&gt;

&lt;p&gt;All chat apps allow users to send messages to others in realtime, to react to messages, and they show when users are online or offline. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-a-realtime-chat-app" class="anchor"&gt;
  &lt;/a&gt;
  How to build a realtime chat app:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Build your project with create-react-app or Next.js. &lt;/li&gt;
&lt;li&gt;Use a service like Firebase or GraphQL subscriptions to create and get messages in realtime to users.&lt;/li&gt;
&lt;li&gt;Add reactions to message with emoji using the npm package emoji-mart&lt;/li&gt;
&lt;li&gt;Deploy to the web using Firebase Tools&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-social-media-app" class="anchor"&gt;
  &lt;/a&gt;
  2. Social Media App
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Real-world examples&lt;/strong&gt;: Facebook, Twitter, Instagram&lt;/p&gt;

&lt;p&gt;The app you're likely most familiar with is a social media application. In many ways it's similar to a chat app, but expanded to a larger community of users. &lt;/p&gt;

&lt;p&gt;These users can interact with each other in different ways: they can follow one another to receive their posts, add media like images and video to share with others, and enable users to interact with posts such as liking or commenting on them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-a-social-media-app" class="anchor"&gt;
  &lt;/a&gt;
  How to build a social media app:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Build your frontend with create-react-app, and backend using a Node API&lt;/li&gt;
&lt;li&gt;Use a database like Postgres or MongoDB, along with an ORM like Prisma (Postgres) or Mongoose (MongoDB)&lt;/li&gt;
&lt;li&gt;Use social authentication with Google, Facebook or Twitter, using Passport or a simpler service like Auth0&lt;/li&gt;
&lt;li&gt;Deploy the backend to Heroku, frontend to Netlify&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-ecommerce-app" class="anchor"&gt;
  &lt;/a&gt;
  3. E-Commerce App
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Real-world examples:&lt;/strong&gt; Shopify, Etsy, Dev.to Storefront&lt;/p&gt;

&lt;p&gt;Storefronts where we can buy digital or physical products online are everywhere. E-commerce apps add the ability for users to add and remove items from a shopping cart, view their cart, and checkout using a credit card, as well as other payment options like Google Pay and Apple Pay. &lt;/p&gt;

&lt;p&gt;If you're looking for inspiration, checkout out some simpler storefronts like a Shopify storefront, rather than looking at a massive retailer like Amazon or Walmart.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-an-ecommerce-app" class="anchor"&gt;
  &lt;/a&gt;
  How to build an e-commerce app:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create the app with create-react-app or Next.js&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;stripe&lt;/code&gt; NPM package, plus &lt;code&gt;use-shopping-cart&lt;/code&gt; to easily handle payments directly with Stripe Checkout&lt;/li&gt;
&lt;li&gt;Build a Node API to handle creating sessions with Stripe&lt;/li&gt;
&lt;li&gt;Deploy the backend to Heroku, frontend to Netlify (or deploy both on Heroku)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-video-sharing-app" class="anchor"&gt;
  &lt;/a&gt;
  4. Video Sharing App
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Real-world examples:&lt;/strong&gt; YouTube, TikTok, Snapchat&lt;/p&gt;

&lt;p&gt;A video sharing app is probably the most broad category, as video is used across so many different apps and in many different ways. &lt;/p&gt;

&lt;p&gt;You have video sharing apps like YouTube, which allow you to search any browser and look for any video that you could imagine that users have created. Also, tik tok and Snapchat give us the ability to watch videos from other users that are recorded in a much shorter, more accessible format, and are more oriented around interactions like likes and views.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-a-video-sharing-app" class="anchor"&gt;
  &lt;/a&gt;
  How to build a video sharing app:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create the app with create-react-app, and create the backend with Node/Express&lt;/li&gt;
&lt;li&gt;Use Cloudinary for image and video uploads to the Cloudinary API&lt;/li&gt;
&lt;li&gt;Use a database like Postgres or MongoDB, along with an ORM like Prisma (Postgres) or Mongoose (MongoDB)&lt;/li&gt;
&lt;li&gt;Deploy the backend to Heroku, frontend to Netlify (or deploy both on Heroku)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-blogging-portfolio-app" class="anchor"&gt;
  &lt;/a&gt;
  5. Blogging / Portfolio App
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Real-world examples:&lt;/strong&gt; Medium, Dev.to, HashNode&lt;/p&gt;

&lt;p&gt;This app example is perhaps the most practical. The most immediately practical choice for you to build a blogging or portfolio app is something that showcases your skills. It allows you to show off what you can do as a developer, while also allowing you to include posts and content that reflect what you know. &lt;/p&gt;

&lt;p&gt;Making these applications with tools like Gatsby or Nextjs (which are both React frameworks) is now easier than ever.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-a-blogging-or-portfolio-app" class="anchor"&gt;
  &lt;/a&gt;
  How to build a blogging or portfolio app:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create the app with Gatsby or Next.js&lt;/li&gt;
&lt;li&gt;Use markdown for blog posts with a special markdown transformer plugin such as &lt;code&gt;remark&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Deploy the site to Netlify or Vercel&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-forum-app" class="anchor"&gt;
  &lt;/a&gt;
  6. Forum App
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Real-world examples:&lt;/strong&gt; Reddit, StackOverflow, freeCodeCamp Forum&lt;/p&gt;

&lt;p&gt;A forum application is where we go when we want to get help, and as programmers we visit forums like Reddit and Stack Overflow to get our coding questions answered. &lt;/p&gt;

&lt;p&gt;Forums also combine many elements of chat and social media apps through posts, comments, and reactions. A forum is more of a more organized version of a social media app where users can more easily find answers to questions they're looking for. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-a-forum-app" class="anchor"&gt;
  &lt;/a&gt;
  How to build a forum app:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Build your frontend with create-react-app, and backend using a Node API&lt;/li&gt;
&lt;li&gt;Use a database like Postgres or MongoDB, along with an ORM like Prisma (Postgres) or Mongoose (MongoDB)&lt;/li&gt;
&lt;li&gt;Use social authentication with Google, Facebook or Twitter, using Passport or a simpler service like Auth0&lt;/li&gt;
&lt;li&gt;Deploy the backend to Heroku, frontend to Netlify&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-music-streaming-app" class="anchor"&gt;
  &lt;/a&gt;
  7. Music Streaming App
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Real-world examples:&lt;/strong&gt; Spotify, Soundcloud, Pandora&lt;/p&gt;

&lt;p&gt;Just as React applications are perfect for serving video content, they're also great for streaming media like music. &lt;/p&gt;

&lt;p&gt;Music apps have a similar structure to video sharing apps and may or may not allow users to upload their own music. They do allow users to listen to music, like songs, comment on them, and perhaps even purchase music. &lt;/p&gt;

&lt;p&gt;In this way, a streaming music app can combine elements of a video sharing app as well as an e-commerce app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-a-music-streaming-app" class="anchor"&gt;
  &lt;/a&gt;
  How to build a music streaming app:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create the app with create-react-app, and create the backend with Node/Express&lt;/li&gt;
&lt;li&gt;Use Cloudinary for image and video uploads to the Cloudinary API&lt;/li&gt;
&lt;li&gt;Use a database like Postgres or MongoDB, along with an ORM like Prisma (Postgres) or Mongoose (MongoDB)&lt;/li&gt;
&lt;li&gt;Deploy the backend to Heroku, frontend to Netlify (or deploy both on Heroku)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#want-to-build-realworld-apps-like-youtube-instagram-and-twitter-with-react-heres-how" class="anchor"&gt;
  &lt;/a&gt;
  Want to build real-world apps like YouTube, Instagram, and Twitter with React? Here's how.
&lt;/h2&gt;

&lt;p&gt;At the end of every month, I will be releasing an exclusive course, showing you exactly how to build a complete app clone with React from start to finish. &lt;/p&gt;

&lt;p&gt;Want to be notified when the next course drops? &lt;strong&gt;&lt;a href="http://bit.ly/react-projects"&gt;Join the waitlist here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>career</category>
      <category>beginners</category>
    </item>
    <item>
      <title>React PWA Performance Study Case</title>
      <author>TK</author>
      <pubDate>Sat, 23 Jan 2021 14:45:48 +0000</pubDate>
      <link>https://dev.to/teekay/react-pwa-performance-study-case-111</link>
      <guid>https://dev.to/teekay/react-pwa-performance-study-case-111</guid>
      <description>&lt;p&gt;This article was originally published at &lt;a href="https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/"&gt;TK's blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the last quarter, I started working in a new team with different business goals. It was a great team, really fun to work with, and we did a lot of amazing work that I'm proud of.&lt;/p&gt;

&lt;p&gt;One of the projects we managed in the last 4 months was web performance improvements for the application we were working on. This post intends to share the improvements we made and the things we learned throughout this process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#context" class="anchor"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;Before we start a conversation about web performance, it's important to show the context behind this work.&lt;/p&gt;

&lt;p&gt;The first thing I want to mention is the fact that the application (PWA) we started to work on had (actually it still has) most parts of the codebase written 2 years ago. It's a React PWA using Webpack 3, Babel 6, react-redux 5, and so on. A small number of hooks. Most classes components.&lt;/p&gt;

&lt;p&gt;The project didn't have real ownership of a team or responsible engineer to take care of the codebase. Different teams need to add features here and there in the PWA but don't actually own the codebase. Effect: the codebase grows in features, bugs, and tech debt, but it is not improved nor refactored.&lt;/p&gt;

&lt;p&gt;With this context, we already had a lot of space to improve the codebase. This project was our focus and started to be our own responsibility as well.&lt;/p&gt;

&lt;p&gt;My colleague and I became "Service Owners" for this project. The idea of the "Service Owners" is someone (or two people in this case) to be the focal point to clear doubts, manage the tech debts, issues, bugs, etc. Basically, someone that takes care of a project.&lt;/p&gt;

&lt;p&gt;Our team was focused on providing the best experience for house owners (landlords): to ease their understanding of the product, register new houses or apartments, and manage the rental and sale of theirs houses.&lt;/p&gt;

&lt;p&gt;Together with the product manager and designer, we created a roadmap of features we wanted to ship that quarter. At the same time, performance is a critical piece of the puzzle to provide a good experience for users. We can start with the basic two "metrics": page-load and time to interactivity. There's a correlation (and sometimes causality) between these metrics and user experience.&lt;/p&gt;

&lt;p&gt;We also wanted to ship A/B tests and make sure that performance was not a variable that could affect the results of these tests. Basically, we wanted to prevent performance regressions to not influence the tests (but we needed metrics - we'll talk about it soon!).&lt;/p&gt;

&lt;p&gt;Our team was not a performance expert team. But the company has a team called Core UX, mainly focused on Web Performance. A team that had experience with frontend performance in the first 3 quarters of 2020.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-process" class="anchor"&gt;
  &lt;/a&gt;
  The Process
&lt;/h2&gt;

&lt;p&gt;Our first idea was to understand the metrics we wanted to track and take care of and do "discovery" tasks to understand potential issues and how we could improve the user experience and app performance. Along with that, we also tried to have a channel with the web performance team to discuss, learn from them, ask questions, and try to find performance issues and fix them.&lt;/p&gt;

&lt;p&gt;So we opened a new Slack channel to ease this whole idea and have a bi-weekly meeting with them to show what we were working on, what they were working on, discuss possibilities to improve performance, and have time to ask questions and open discussions.&lt;/p&gt;

&lt;p&gt;With this open relationship, we could learn faster and prioritize low-hanging fruit kind of tasks to have faster results with little or no effort at all. We'll discuss this in-depth later in the Performance Improvements section.&lt;/p&gt;

&lt;p&gt;The whole process was documented: the meetings, our learning, our discoveries, and the performance fixes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metrics-amp-measure" class="anchor"&gt;
  &lt;/a&gt;
  Metrics &amp;amp; Measure
&lt;/h2&gt;

&lt;p&gt;We had the first discussion about the metrics we wanted to track and my team started to learn more about them. For us that didn't have much familiarity, at first, it was a bunch of acronyms we didn't truly understand. FCP, LCP, FID? What's that?&lt;/p&gt;

&lt;p&gt;To understand these terms, I like to first understand the user experience metrics, because it's all linked together.&lt;/p&gt;

&lt;p&gt;So, for user experience metrics, I like this User-centric performance metrics article by Google where it defines these metrics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Perceived load speed&lt;/strong&gt;: how quickly a page can load and render all of its visual elements to the screen.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Load &amp;amp; Runtime responsiveness&lt;/strong&gt;: how quickly a page can load and execute any required JavaScript code in order for components to respond quickly to user interaction&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Visual stability&lt;/strong&gt;: do elements on the page shift in ways that users don't expect and potentially interfere with their interactions?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Smoothness&lt;/strong&gt;: do transitions and animations render at a consistent frame rate and flow fluidly from one state to the next?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I like this because it's very relatable. As website users, we can understand these metrics (and possible frustration when using some "bad-performance" kind of websites).&lt;/p&gt;

&lt;p&gt;This is also interesting because we can map the user-centric metrics to the performance metrics we commonly see.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;First contentful paint (FCP)&lt;/strong&gt;: measures the time from when the page starts loading to when any part of the page's content is rendered on the screen.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Largest contentful paint (LCP)&lt;/strong&gt;: measures the time from when the page starts loading to when the largest text block or image element is rendered on the screen.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;First input delay (FID)&lt;/strong&gt;: measures the time from when a user first interacts with your site (i.e. when they click a link, tap a button, or use a custom, JavaScript-powered control) to the time when the browser is actually able to respond to that interaction.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Time to Interactive (TTI)&lt;/strong&gt;: measures the time from when the page starts loading to when it's visually rendered, its initial scripts (if any) have loaded, and it's capable of reliably responding to user input quickly.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Total blocking time (TBT)&lt;/strong&gt;: measures the total amount of time between FCP and TTI where the main thread was blocked for long enough to prevent input responsiveness.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cumulative layout shift (CLS)&lt;/strong&gt;: measures the cumulative score of all unexpected layout shifts that occur between when the page starts loading and when its lifecycle state changes to hidden.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I built a simple table to map the performance metrics to the user-centric metrics to be easier to understand each acronym.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qjSfDOJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/metrics-table.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qjSfDOJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/metrics-table.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/159d4b09-dfb0-45fd-846c-f2782ce512ff/Screen_Shot_2021-01-03_at_20.49.50.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As I said earlier, this relation is very interesting and makes us focus not only on bits and bytes but also on the user experience as a whole.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tooling-audit-amp-knowledge-sharing" class="anchor"&gt;
  &lt;/a&gt;
  Tooling, Audit &amp;amp; Knowledge Sharing
&lt;/h2&gt;

&lt;p&gt;After having a better understanding of user experience and performance metrics, we wanted to start tracking them. There is a difference between Lab and Field metrics. According to Google:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Lab metrics:&lt;/strong&gt; using tools to simulate a page load in a consistent, controlled environment.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Field metrics&lt;/strong&gt;: on real users actually loading and interacting with the page.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#lab-metrics" class="anchor"&gt;
  &lt;/a&gt;
  Lab Metrics
&lt;/h3&gt;

&lt;p&gt;For the lab metrics, we set up the Lighthouse in our CI using &lt;a href="https://github.com/GoogleChrome/lighthouse-ci"&gt;Lighthouse CI&lt;/a&gt;. So, for every Pull Request (PR) opened, we run the Lighthouse to gather performance-related data and lock PRs until we fix the performance issue.&lt;/p&gt;

&lt;p&gt;With this tool, we can validate various aspects of the PWA (accessibility, SEO, best practices, and performance), but also add assertions to break PRs when it surpasses a budget threshold we set.&lt;/p&gt;

&lt;p&gt;For example, we can add assertions related to JavaScript and images sizes (in bytes):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;assertions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s"&gt;'resource-summary:script:size'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'error'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;maxNumericValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="s"&gt;'resource-summary:image:size'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'error'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;maxNumericValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="s"&gt;'resource-summary:total:size'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'error'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;maxNumericValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This JavaScript object is part of the configuration we can use to gather different info about performance. To better understand the configuration for Lighthouse CI, take a look at this docs: &lt;a href="https://github.com/GoogleChrome/lighthouse-ci/blob/master/docs/configuration.md"&gt;Lighthouse CI Configuration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another very cool tool we are using for lab metrics is Speed Curve. It's super simple to set up and start gathering data. This tool works better for "unlogged pages" because we add the URL of the website, and based on the website load and interaction, it will collect performance metrics.&lt;/p&gt;

&lt;p&gt;The Speed Curve dashboard is very flexible to show (or hide) the metrics we want to focus on. In our case, we wanted to see the evolution of the JavaScript total size, First Contentful Paint, Largest Contentful Paint, Cumulative Layout Shift, JS Total Blocking Time, Backend (TTFB) Time, and Lighthouse Performance Score.&lt;/p&gt;

&lt;p&gt;This is working very cool for our landing and home pages.&lt;/p&gt;

&lt;p&gt;The last tool we set up is an in-house tool the performance team built. This is a tool to analyze the app bundles and it has 3 main features now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Bundle Analyze Report&lt;/strong&gt;: collects and saves the bundle analyzer HTML results.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bundle Budgets&lt;/strong&gt;: sets up a budget configuration to add a threshold for the bundle sizes. It breaks the PR if the size of a bundle surpasses the threshold.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bundle Changes:&lt;/strong&gt; shows the bundle size changes between the PR and the master (or main) branch. It helps us easily answer "did it increase/decrease the bundle size for X?"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This tool is run in our CI pipeline for every PR and the result is shown in the Github PR (it uses &lt;a href="https://github.com/danger/danger-js"&gt;Danger&lt;/a&gt; behind it).&lt;/p&gt;

&lt;p&gt;These tools are very interesting because&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it helps us prevent performance regressions&lt;/li&gt;
&lt;li&gt;it also creates awareness about web performance, its metrics, and share knowledge&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#field-metrics" class="anchor"&gt;
  &lt;/a&gt;
  Field Metrics
&lt;/h3&gt;

&lt;p&gt;For now, we are using &lt;a href="https://www.instana.com/"&gt;Instana&lt;/a&gt; to collect Real User performance-related data.&lt;/p&gt;

&lt;p&gt;The next step for Real User Monitoring (RUM) is to track more user behavior in our application to gather &lt;a href="https://github.com/GoogleChrome/web-vitals"&gt;web vitals metrics&lt;/a&gt; in the PWA flow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance-improvements" class="anchor"&gt;
  &lt;/a&gt;
  Performance Improvements
&lt;/h2&gt;

&lt;p&gt;In this section, I want to detail the process behind each discovery and fixes we did to improve performance and user experience in our application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#landing-page" class="anchor"&gt;
  &lt;/a&gt;
  Landing Page
&lt;/h3&gt;

&lt;p&gt;We started with our landing page. The first action was to analyze the JavaScript bundle size using &lt;a href="https://www.npmjs.com/package/webpack-bundle-analyzer"&gt;Webpack Bundle Analyzer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Side note&lt;/strong&gt;: 2 years ago, the team responsible for the landing page decided to use a tool to develop the landing page with react but in the build time, we remove the react from the application to reduce the bundle size served in the landing page.&lt;/p&gt;

&lt;p&gt;And this is what we got:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eGLqXKo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/react-on-lp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eGLqXKo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/react-on-lp.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cd107b20-f219-4091-824a-2b342b93e3bc/react-on-lp.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can analyze a lot of things here, but one that got our attention was the React library in our landing page bundle. As I wrote above, in the side note, React is not being used in production, and we are unintentionally serving it in production making our users download the library without the need to do this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// components/XYZ.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;A_CONSTANT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A_CONSTANT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We had a constant inside a React component file. And we were importing that constant in the landing page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// landing.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;A_CONSTANT&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;components/XYZ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So importing this constant, we were also importing React.&lt;/p&gt;

&lt;p&gt;A possible simple fix was to separate this constant outside the React component file and import it from this new file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// components/XYZ/constants.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;A_CONSTANT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A_CONSTANT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And import the constant from the new file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// landing.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;A_CONSTANT&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;components/XYZ/constants&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's see the bundle size impact after this change:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vHWAPs5e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/befor-after-react.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vHWAPs5e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/befor-after-react.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/56801d97-3bb8-451a-ae99-3671b5e4ac37/Screenshot_from_2021-01-08_13-57-35.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We reduced 95KB! It's interesting to think we can have a huge impact on a small change after carefully analyzing our bundles. This will be the process behind each improvement we did for the rest of this article:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Analyze the bundles&lt;/li&gt;
&lt;li&gt;Fix the performance issue&lt;/li&gt;
&lt;li&gt;Gather results &amp;amp; keep track of the metrics&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We run again the bundle analyzer and we got this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ofvGjnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/lp-with-appboy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ofvGjnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/lp-with-appboy.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f30bde19-e5fb-4789-a544-94ab096428bb/lp-with-appboy.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first things that got our attention were the &lt;code&gt;appboy.min.js&lt;/code&gt; and the &lt;code&gt;transit.js&lt;/code&gt; libraries. The &lt;code&gt;appboy&lt;/code&gt; is the Braze, a library we use for communication, and the &lt;code&gt;transit&lt;/code&gt; is a library to transform JSON format data into our app state.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Braze&lt;/code&gt; library was very similar to the React library. It was an &lt;code&gt;import&lt;/code&gt; statement in a file that the landing page was using but not really using the &lt;code&gt;Braze&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// braze.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;braze&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;appboy-web-sdk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;aFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;brazeInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;braze&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something with braze&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It was importing Braze in the file and using the instance as a default value for a function. The simple solution was to remove the import statement and enforce that every place that was using the &lt;code&gt;aFunction&lt;/code&gt; function passes the braze instance. So we don't need to import Braze and add a default value to the parameter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// braze.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;aFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;brazeInstance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something with braze&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Running the bundle analyzer again, we got an astonishing result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ibbYlmBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/before-after-appboy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ibbYlmBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/before-after-appboy.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c262280c-8c22-44f0-9399-ecff7c10b6f9/Screenshot_from_2021-01-08_14-40-51.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The AnnounceYourHouse landing page was reduced to 90 KB. We could remove almost 50% of the main landing bundle.&lt;/p&gt;

&lt;p&gt;We also improved a lot the bundle size of the PriceSuggestion landing page. From 115 KB to 4 KB was an amazing result.&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;transit&lt;/code&gt; library, we did a temporary workaround solution. It was importing the library to transform the string JSON saved in the local storage to get info from a single attribute from this object.&lt;/p&gt;

&lt;p&gt;The temporary solution was to verify if the string included the info we wanted and remove the need to use the &lt;code&gt;transit&lt;/code&gt; library.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K4lwXFzP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/befor-after-transit-js.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K4lwXFzP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/befor-after-transit-js.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f8e6c07e-88bb-40a2-abc4-18385c17efef/Screenshot_from_2021-01-08_14-56-55.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We could improved a lot the bundle size of the main landing. Removing almost 50% of the bundle.&lt;/p&gt;

&lt;p&gt;As we saw in the metrics section, we had set up the Speed Curve to track the performance of some pages in all this journey. So, for every improvement we made in our application, we keep track of the metrics in these tools.&lt;/p&gt;

&lt;p&gt;The total size of the landing page reduced drastically: -2.16 MB.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rKuQKCiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/speed-curve-total-size.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rKuQKCiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/speed-curve-total-size.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f7646c93-432a-4051-ab0e-57f5edd7f10f/Screenshot_from_2021-01-08_15-07-17.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Lighthouse Performance score was from 73 to 97:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xu-vpTUH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/speed-curve-lighthouse-score.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xu-vpTUH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/speed-curve-lighthouse-score.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f096f09f-5d8b-4517-942d-126e85a90571/Screenshot_from_2021-01-08_15-07-25.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Largest Contentful Paint was improved in 1s:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R94ZV4cc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/speed-curve-lcp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R94ZV4cc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/speed-curve-lcp.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3d5eaa7d-0f99-47e8-bc69-948ac021e73c/Screenshot_from_2021-01-08_15-07-38.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vendor-chunk" class="anchor"&gt;
  &lt;/a&gt;
  Vendor Chunk
&lt;/h3&gt;

&lt;p&gt;When running &lt;code&gt;npm run bundle:analyzer&lt;/code&gt;, we also notice a big dependency in our vendor chunk.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mlRQ0TEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/vendor-icons.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mlRQ0TEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/vendor-icons.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/568a2178-ad58-4155-b7c1-3a626a41d726/vendor-icons.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the vendor chunk, we noticed all the icons from Material UI. Every time a user enters the website, and if the chunk is not cached in the browser, it would need to download the whole chunk. If it's a big chunk to download, it has an impact on the performance and consequently on the user experience.&lt;/p&gt;

&lt;p&gt;This is a &lt;a href="https://material-ui.com/guides/minimizing-bundle-size/"&gt;common problem&lt;/a&gt; when importing a Material UI icon in a React component.&lt;/p&gt;

&lt;p&gt;One of our components was using an internal component library that used the "named import" style to import the Material UI icon. This, without a proper babel plugin, also adds the rest of the unused icons to the vendor chunk.&lt;/p&gt;

&lt;p&gt;We came up with two solutions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fix the import from this internal component library we had stopping the use of named import.&lt;/li&gt;
&lt;li&gt;Add the babel plugin and configure the app to not add unused modules.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As this internal component library was the first and the deprecated version of our design system, we didn't want to keep maintaining it. The best approach was to not use this library anymore and move all the codebase to use the new design system library (and we're working on it!).&lt;/p&gt;

&lt;p&gt;This performance project was not our main project in the quarter so we had less time to focus on it in the sprint. The babel plugin was a more straightforward and simple solution for us at that moment.&lt;/p&gt;

&lt;p&gt;We basically needed to add this new babel plugin &lt;code&gt;babel-plugin-transform-imports&lt;/code&gt; and configure the &lt;code&gt;babelrc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-plugin-transform-imports&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@material-ui/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;transform&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@material-ui/core/esm/${member}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preventFullImport&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@material-ui/icons&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;transform&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@material-ui/icons/esm/${member}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preventFullImport&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And with it, we prevent the full import of the library in the vendor chunk.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vRc2o2K2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/before-after-material-ui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vRc2o2K2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/before-after-material-ui.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d41287ca-d648-4d2b-a3bf-8194e9446f3a/Screenshot_from_2021-01-09_14-54-29.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The vendor became way smaller. We also had some impact in the main chunk (the next chunk will talk soon).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NwzxjDeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/results-material-ui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NwzxjDeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/results-material-ui.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/57e50ef0-d333-4dfd-9f66-b7036e1ba01b/Screenshot_from_2021-01-09_14-57-40.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this simple analysis and configuration, we could reduce the vendor chunk by more than 50% (it's still 2.83 MB and could be improved. We will see later!) and the main chunk by 28%.&lt;/p&gt;

&lt;p&gt;A huge improvement for the whole app as these chunks were downloaded on each page, if not cached in the browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#main-chunk" class="anchor"&gt;
  &lt;/a&gt;
  Main Chunk
&lt;/h3&gt;

&lt;p&gt;The main chunk has some common modules among all parts of the application. But after running the bundle analyzer, we got this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8TW0vOAe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/main-chunk-before.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8TW0vOAe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/main-chunk-before.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2fe3d453-421b-4eb0-9d64-1742f8cc4c5b/main-chunk-before.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main chunk is the bottom-left block in the bundle. One thing that got our attention was some containers and components in the bundle. Why are there some components that are specific to only one page but we are making our users download the whole main chunk?&lt;/p&gt;

&lt;p&gt;The issue was simple: our code splitting was not working properly.&lt;/p&gt;

&lt;p&gt;Our initial idea was to make sure all routes had dynamic import for our components to code split in each router entry point. And this was the problem: not all routes entry points had loadable components, so they were joined in the main chunk instead of creates their own chunk for that specific route and page.&lt;/p&gt;

&lt;p&gt;In this application we were using, at that time, &lt;code&gt;react-loadable&lt;/code&gt;, so the idea was to simply create these loadables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Loadable&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-loadable&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Loadable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* webpackChunkName: "component" */&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And use them for each route entry point.&lt;/p&gt;

&lt;p&gt;Running bundle analyzer, we got this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SSpMybTk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/main-chunk-after.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SSpMybTk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/main-chunk-after.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1fad56c0-444c-48ec-af23-ca0b68dd8f07/main-chunk-after.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main chunk is way smaller and Webpack created more page-specific chunks as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dox9iSyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/results-code-splitting.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dox9iSyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/results-code-splitting.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5e7f1216-8cc6-44ba-8b04-ac4b2c1190af/Screenshot_from_2021-01-10_11-06-20.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The result was huge. The main chunk got more than 50% smaller and the vendor chunk also decreased by 29%.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#caching-biggest-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Caching Biggest Dependencies
&lt;/h3&gt;

&lt;p&gt;Reading this article, you probably saw some big dependencies in our bundle like firebase, braze, immutable, and so on.&lt;/p&gt;

&lt;p&gt;Every time we do a new product release, our build system generate a new bundle with the chunks. If anything related to the vendor chunk changes, Webpack will generate a new hash for the chunk. So the browser will not have a cached version for this chunk and it will make the user download it again.&lt;/p&gt;

&lt;p&gt;But sometimes, or most of the time, we don't really change these biggest dependencies (only when the dependency is upgraded), and we are making our users paying for that huge chunk.&lt;/p&gt;

&lt;p&gt;Our idea was to split these biggest dependencies in its own chunk and make sure the browser has a cached version of this chunk and the user doesn't need to download it again until it is needed.&lt;/p&gt;

&lt;p&gt;As we were using Webpack 3 at that time, we needed to use the &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; to split these dependencies in its own chunk.&lt;/p&gt;

&lt;p&gt;We created a list of all biggest dependencies:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--33NuPF3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/biggest-deps-table.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--33NuPF3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/biggest-deps-table.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/07f6542d-3789-47b6-bd0a-291cb34efd87/Screenshot_from_2021-01-10_11-49-40.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was mapped as a list data structure in our Webpack config as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;VENDOR_LIBRARIES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@firebase&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@braze&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;braze&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;transit-js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;transit-js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@material-ui(?!&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;/icons)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;material-ui&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;amplitude-js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;amplitude-js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;immutable&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;immutable&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;raven-js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;raven-js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Along with &lt;code&gt;CommonsChunkPlugin&lt;/code&gt;, we just needed to iterate through this list to create each chunk.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bMyVPOF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/biggest-deps-later.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bMyVPOF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/biggest-deps-later.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/bb6e4f3d-97ea-44a9-8acf-3ea97f496f9d/biggest-deps-later.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see that the vendor chunk got way smaller and some new chunks were created.&lt;/p&gt;

&lt;p&gt;Running the application, we can also test the download of each separate chunk.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jtiV31t8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/biggest-deps-network.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jtiV31t8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/biggest-deps-network.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1d3bdce9-8a52-4279-a2f3-696f7cd7c00e/biggest-deps-network.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we got a really cool result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5IJWe4Ur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/results-biggest-deps.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5IJWe4Ur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/results-biggest-deps.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ce24451d-a86d-4e3d-b13b-1f7b4fc247b3/Screenshot_from_2021-01-10_11-56-28.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The user still needs to download the dependencies, but after download the first time, the browser will cache them and they won't need to be downloaded again until we bump their version. If we change the vendor chunk, Webpack only generates a new hash for the vendor and doesn't change the other dependencies.&lt;/p&gt;

&lt;p&gt;We saw some nice improvements in the Speed Curve dashboard:&lt;/p&gt;

&lt;p&gt;As expected, we saw a huge improvement in the JavaScript size: -1.43 MB&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3jtXst5d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/speed-curve-total-size-home.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3jtXst5d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/speed-curve-total-size-home.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/16068b39-79fd-4a3b-ac49-a61d28df2943/Screenshot_from_2021-01-10_12-08-01.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Decreasing the JavaScript size also had an impact on the total time the user is blocked to interact with the page: -1.2s&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P6mLKoz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/speed-curve-js-total-blocking-time-home.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P6mLKoz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/speed-curve-js-total-blocking-time-home.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/30925afe-a367-4cd8-bffb-5543520dcf71/Screenshot_from_2021-01-10_12-08-11.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The speed index is a metric to show how quickly the contents of a page are visibly populated. We improved the page to load 2.2s faster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Acbrrc2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/speed-curve-speed-index-home.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Acbrrc2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/speed-curve-speed-index-home.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b0cc1509-fe1e-4d31-9a1e-14d58022e62d/Screenshot_from_2021-01-10_12-08-23.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the largest contentful paint went from 6s to 3.75s.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZTL0nGo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/speed-curve-lcp-home.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZTL0nGo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://leandrotk.github.io/2021/01/optimizing-the-performance-of-a-react-progressive-web-app/assets/speed-curve-lcp-home.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2d90d438-313b-44cc-aaeb-f1f0c126c2b3/Screenshot_from_2021-01-10_12-08-31.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap" class="anchor"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;To recap what we saw in this article, let's see the list of things we did in this journey:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Measure&lt;/strong&gt;: metrics as the foundation of performance improvements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Lock&lt;/strong&gt;: prevent regressions &amp;amp; scale the performance knowledge.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Analyze&lt;/strong&gt;: with data and metrics, analyze the possible problems.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Improvements&lt;/strong&gt;: code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Impact&lt;/strong&gt;: measure the before and the later picture.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would also recommend talking to more experienced people in this performance domain if it is possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps" class="anchor"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;We have more things to do, but we didn't have time to focus on those things in the last quarter. This is a list of things that come to my mind now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;More metrics&lt;/strong&gt;: rum for logged pages, ux metrics (engagement, bounce rate), business metrics (conversion).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Manage requests&lt;/strong&gt;: server requests caching.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;More Analysis&lt;/strong&gt;: backend, chunks, prefetching, etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Removable Dependencies&lt;/strong&gt;: analyze big dependencies that can be removable or replaced&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Webpack Upgrade&lt;/strong&gt;: bump to v5 - cache, optimization, code-splitting, tree shaking.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Webpack Optimization&lt;/strong&gt;: the need to build faster.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Keep studying&lt;/strong&gt;: learn more to discover more opportunities.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;I have some resources I used along the way while doing this project. I hope it can be helpful to you too: &lt;a href="https://github.com/leandrotk/web-performance-studies"&gt;Web Performance Studies&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>frontend</category>
    </item>
    <item>
      <title>SQL interview questions and answers for full-stack developers</title>
      <author>Devinterview-io</author>
      <pubDate>Sat, 23 Jan 2021 14:18:42 +0000</pubDate>
      <link>https://dev.to/devinterview/sql-interview-questions-and-answers-for-full-stack-developers-2hmj</link>
      <guid>https://dev.to/devinterview/sql-interview-questions-and-answers-for-full-stack-developers-2hmj</guid>
      <description>&lt;p&gt;SQL is a domain-specific language used in programming and designed for managing data held in a relational database management system, or for stream processing in a relational data stream management system. Here is a list of coding interview questions on SQL to help you get ready for your next technical interview in 2021.&lt;/p&gt;

&lt;p&gt;👉 You can check all 56 &lt;a href="https://devinterview.io/dev/sql-interview-questions"&gt;SQL tech interview questions here&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-define-a-temp-table" class="anchor"&gt;
  &lt;/a&gt;
  🔹 1. Define a temp table
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;In a nutshell, a temp table is a temporary storage structure. What does that mean? Basically, you can use a temp table to store data temporarily so you can manipulate and change it before it reaches its destination format.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/dhaval1406/SQL"&gt;github.com/dhaval1406&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#2-what-is-a-view" class="anchor"&gt;
  &lt;/a&gt;
  🔹 2. What is a view?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;view&lt;/strong&gt; is simply a virtual table that is made up of elements of multiple physical or “real” tables. Views are most commonly used to join multiple tables together, or control access to any tables existing in background server processes.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/dhaval1406/SQL"&gt;github.com/dhaval1406&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#3-what-is-primary-key" class="anchor"&gt;
  &lt;/a&gt;
  🔹 3. What is PRIMARY KEY?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;PRIMARY KEY&lt;/strong&gt; constraint is a unique identifier for a row within a database table. Every table should have a primary key constraint to uniquely identify each row and only one primary key constraint can be created for each table. The primary key constraints are used to enforce entity integrity.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/dhaval1406/SQL"&gt;github.com/dhaval1406&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#4-what-is-blocking" class="anchor"&gt;
  &lt;/a&gt;
  🔹 4. What is blocking?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;SQL Server blocking occurs when one connection holds a lock on a record and other connection tries to fetch the record or update the record.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/chetansomani/SQL-Interview-Questions"&gt;github.com/chetansomani&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#5-what-is-normalization" class="anchor"&gt;
  &lt;/a&gt;
  🔹 5. What is Normalization?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;It is the process of eliminating redundant data and maintaining data dependencies.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/dhaval1406/SQL"&gt;github.com/dhaval1406&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#6-what-is-the-difference-between-where-clause-and-having-clause" class="anchor"&gt;
  &lt;/a&gt;
  🔹 6. What is the difference between WHERE clause and HAVING clause?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  WHERE clause can only be applied on a static non-aggregated column&lt;/li&gt;
&lt;li&gt;  we will need to use HAVING for aggregated columns.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/dhaval1406/SQL"&gt;github.com/dhaval1406&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#7-what-is-default" class="anchor"&gt;
  &lt;/a&gt;
  🔹 7. What is DEFAULT?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Default&lt;/strong&gt; allows to add values to the column if the value of that column is not set. Default can be defined on number and datetime fields. They cannot be defined on timestamp and IDENTITY columns.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/chetansomani/SQL-Interview-Questions"&gt;github.com/chetansomani&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#8-what-is-foreign-key" class="anchor"&gt;
  &lt;/a&gt;
  🔹 8. What is FOREIGN KEY?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;FOREIGN KEY&lt;/strong&gt; constraint prevents any actions that would destroy links between tables with the corresponding data values. A foreign key in one table points to a primary key in another table. Foreign keys prevent actions that would leave rows with foreign key values when there are no primary keys with that value. The foreign key constraints are used to enforce referential integrity.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/dhaval1406/SQL"&gt;github.com/dhaval1406&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#9-whats-the-difference-between-a-local-temp-table-and-a-global-temp-table" class="anchor"&gt;
  &lt;/a&gt;
  🔹 9. What’s the difference between a local temp table and a global temp table?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Local tables&lt;/strong&gt; are accessible to a current user connected to the server. These tables disappear once the user has disconnected from the server.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Global temp&lt;/strong&gt; tables, on the other hand, are available to all users regardless of the connection. These tables stay active until all the global connections are closed.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/dhaval1406/SQL"&gt;github.com/dhaval1406&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#10-how-can-a-column-with-a-default-value-be-added-to-an-existing-table" class="anchor"&gt;
  &lt;/a&gt;
  🔹 10. How can a column with a default value be added to an existing table?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;Consider:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ALTER TABLE SomeTable
        ADD SomeCol Bit NULL --Or NOT NULL.
 CONSTRAINT D_SomeTable_SomeCol --When Omitted a Default-Constraint Name is autogenerated.
    DEFAULT (0)--Optional Default-Constraint.
WITH VALUES --Add if Column is Nullable and you want the Default Value for Existing Records.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Keep in mind that if the column is nullable, then null will be the value used for existing rows.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/chetansomani/SQL-Interview-Questions"&gt;github.com/chetansomani&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#11-is-table-size-reduced-when-you-delete-data-from-the-table" class="anchor"&gt;
  &lt;/a&gt;
  🔹 11. Is table size reduced, when you delete data from the table?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;No the table size is not reduced, indeed the sql server marks those rows as free rows. Once you insert the new data, the free rows will get updated and then the size of the table is changed based on the data insertion. If the data is not inserted, then after a while, the rows are eliminated.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/chetansomani/SQL-Interview-Questions"&gt;github.com/chetansomani&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#12-define-acid-properties" class="anchor"&gt;
  &lt;/a&gt;
  🔹 12. Define ACID Properties
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Atomicity&lt;/strong&gt;: It ensures all-or-none rule for database modifications.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Consistency&lt;/strong&gt;: Data values are consistent across the database.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Isolation&lt;/strong&gt;: Two transactions are said to be independent of one another.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Durability&lt;/strong&gt;: Data is not lost even at the time of server failure.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/chetansomani/SQL-Interview-Questions"&gt;github.com/chetansomani&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#13-discuss-inner-join-on-vs-where-clause" class="anchor"&gt;
  &lt;/a&gt;
  🔹 13. Discuss INNER JOIN ON vs WHERE clause
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;&lt;span class="h5"&gt;Problem&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;You can do:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
    table1.this, table2.that, table2.somethingelse
FROM
    table1, table2
WHERE
    table1.foreignkey = table2.primarykey
    AND (some other conditions)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Or else:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
    table1.this, table2.that, table2.somethingelse
FROM
    table1 INNER JOIN table2
    ON table1.foreignkey = table2.primarykey
WHERE
    (some other conditions)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;What syntax would you choose and why?&lt;/p&gt;



&lt;p&gt;&lt;code&gt;INNER JOIN&lt;/code&gt; is ANSI syntax which you should use. INNER JOIN helps human readability, and that's a top priority. It can also be easily replaced with an OUTER JOIN whenever a need arises.&lt;/p&gt;

&lt;p&gt;Implicit joins (with multiple &lt;code&gt;FROM&lt;/code&gt; tables) become much much more confusing, hard to read, and hard to maintain once you need to start adding more tables to your query.&lt;/p&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://stackoverflow.com/questions/3800551/select-first-row-in-each-group-by-group"&gt;stackoverflow.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#14-what-is-the-difference-between-inner-join-and-outer-join" class="anchor"&gt;
  &lt;/a&gt;
  🔹 14. What is the difference between “INNER JOIN” and “OUTER JOIN”?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;p&gt;&lt;span class="h5"&gt;Problem&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Also how do LEFT JOIN, RIGHT JOIN and FULL JOIN fit in?&lt;/p&gt;



&lt;p&gt;Assuming you're joining on columns with no duplicates, which is a very common case:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  An &lt;strong&gt;inner join&lt;/strong&gt; of A and B gives the result of A intersect B, i.e. the inner part of a Venn diagram intersection.&lt;/li&gt;
&lt;li&gt;  An &lt;strong&gt;outer join&lt;/strong&gt; of A and B gives the results of A union B, i.e. the outer parts of a Venn diagram union.&lt;/li&gt;
&lt;li&gt;  A &lt;strong&gt;left outer join&lt;/strong&gt; will give all rows in A, plus any common rows in B.&lt;/li&gt;
&lt;li&gt;  A &lt;strong&gt;right outer join&lt;/strong&gt; will give all rows in B, plus any common rows in A.&lt;/li&gt;
&lt;li&gt;  A &lt;strong&gt;full outer join&lt;/strong&gt; will give you the union of A and B, i.e. all the rows in A and all the rows in B. If something in A doesn't have a corresponding datum in B, then the B portion is null, and vice versa.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/chetansomani/SQL-Interview-Questions"&gt;github.com/chetansomani&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;








&lt;h2&gt;
  &lt;a href="#15-what-is-the-difference-between-join-and-union" class="anchor"&gt;
  &lt;/a&gt;
  🔹 15. What is the difference between JOIN and UNION?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#answer" class="anchor"&gt;
  &lt;/a&gt;
  Answer:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  SQL JOIN allows us to “lookup” records on other table based on the given conditions between two tables.&lt;/li&gt;
&lt;li&gt;  UNION operation allows us to add 2 similar data sets to create resulting data set that contains all the data from the source data sets. Union does not require any condition for joining.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;span&gt;&lt;em&gt;Source:&lt;/em&gt; &lt;span&gt;&lt;a href="https://github.com/dhaval1406/SQL"&gt;github.com/dhaval1406&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;   &lt;/p&gt;









&lt;p&gt;Thanks 🙌 for reading and good luck on your next tech interview!&lt;br&gt;&lt;br&gt;
Explore 3800+ dev interview question here 👉 &lt;a href="https://devinterview.io/"&gt;Devinterview.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sql</category>
      <category>database</category>
      <category>webdev</category>
      <category>career</category>
    </item>
  </channel>
</rss>
