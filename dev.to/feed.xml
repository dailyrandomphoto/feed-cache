<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Redirecting GitHub Pages</title>
      <author>Christian Heilmann</author>
      <pubDate>Tue, 03 Aug 2021 17:14:50 +0000</pubDate>
      <link>https://dev.to/codepo8/redirecting-github-pages-gph</link>
      <guid>https://dev.to/codepo8/redirecting-github-pages-gph</guid>
      <description>&lt;p&gt;Today I finished moving the &lt;a href="https://aka.ms/devtools-for-code"&gt;Edge Tools for VS Code extension&lt;/a&gt; documentation to its &lt;a href="https://docs.microsoft.com/en-us/microsoft-edge/visual-studio-code/microsoft-edge-devtools-extension"&gt;official space in the Microsoft docs&lt;/a&gt;. That meant I needed to redirect the documentation I hosted with GitHub pages in a docs folder/branch of the &lt;a href="https://github.com/microsoft/vscode-edge-devtools"&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are plugins available for that, but I didn't want to install any extra features on the repository, so I chose a simpler approach. &lt;/p&gt;

&lt;p&gt;You can define HTML templates for your GitHub pages in a folder called &lt;code&gt;_layouts&lt;/code&gt; and connect them using the Markdown frontmatter. So if you create a file called &lt;code&gt;test.md&lt;/code&gt; you can define a template called &lt;code&gt;forward&lt;/code&gt;. You can also add a &lt;code&gt;target&lt;/code&gt; to redirect to, in this case &lt;code&gt;https://example.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;test.md:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;--------&lt;/span&gt;
layout: forward
&lt;span class="gh"&gt;target: https://example.com
--------
&lt;/span&gt;... rest of your markdown ... 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your &lt;code&gt;forward.html&lt;/code&gt; template in the &lt;code&gt;_layouts&lt;/code&gt; folder can use a meta redirect to the target. In its most basic form this can be:&lt;/p&gt;

&lt;p&gt;forward.html:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"refresh"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"0;url={{ page.target }}"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"canonical"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ page.target }}"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Redirecting&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Document has moved, if you aren't automatically redirected 
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ page.target }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;go here&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That means that if someone goes to the test document in your GitHub pages, they will get redirected to example.com&lt;/p&gt;

&lt;p&gt;You can see this in action &lt;a href="https://github.com/codepo8/github-redirection-demo/"&gt;in this GitHub demo repo&lt;/a&gt; I quickly put together. I've added quite a few more options to redirect, such as definition of the time and displaying different titles and text. You can read it all and &lt;a href="https://codepo8.github.io/github-redirection-demo/"&gt;try out the demos in the README&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>github</category>
      <category>markdown</category>
      <category>jekyll</category>
      <category>redirection</category>
    </item>
    <item>
      <title>Important Algorithm Concepts | Algorithm Stability, In-place Algorithms, and Comparison Algorithms</title>
      <author>Danny Adams</author>
      <pubDate>Tue, 03 Aug 2021 16:38:59 +0000</pubDate>
      <link>https://dev.to/doabledanny/important-algorithm-concepts-algorithm-stability-in-place-algorithms-and-comparison-algorithms-11ac</link>
      <guid>https://dev.to/doabledanny/important-algorithm-concepts-algorithm-stability-in-place-algorithms-and-comparison-algorithms-11ac</guid>
      <description>&lt;p&gt;This article was originally posted on &lt;a href="https://www.doabledanny.com/algorithm-concepts"&gt;DoableDanny.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article, we will discuss some important properties of algorithms that can help you to decide which algorithm is best suited to the job.&lt;/p&gt;

&lt;p&gt;In this article we will define and discuss:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Algorithm stability&lt;/li&gt;
&lt;li&gt;In-place and out-of-place algorithms&lt;/li&gt;
&lt;li&gt;Comparison and non-comparison sorts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t worry if you’ve never heard these terms before, I’ll explain them fully as we go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-stability-in-sorting-algorithms-and-why-is-it-important"&gt;
  &lt;/a&gt;
  What is stability in sorting algorithms and why is it important?
&lt;/h2&gt;

&lt;p&gt;Stable means that two elements with equal values will appear in the same order in the sorted output as they appear in the unsorted input array.&lt;/p&gt;

&lt;p&gt;For example, if we wanted to sort:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[“Cherries“, “Blackberries”, “Apples”, “Bananas”]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;into alphabetical order by first letter, with a stable sorting algorithm, the output would be:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[“Apples”, “Blackberries”, “Bananas”, “Cherries”]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As you can see, “Blackberries” and “Bananas” remained in the same relative positions in the input and output array because the algorithm is stable.&lt;br&gt;
Stable sorting algorithms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bubble Sort&lt;/li&gt;
&lt;li&gt;Merge Sort&lt;/li&gt;
&lt;li&gt;Radix Sort&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the algorithm was unstable, then “Bananas” and “Blackberries” may be interchanged (&lt;code&gt;[“Apples”, “Bananas”, “Blackberries”, “Cherries”]&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Unstable sorting algorithms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selection Sort&lt;/li&gt;
&lt;li&gt;Heap Sort&lt;/li&gt;
&lt;li&gt;Quick Sort&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why is it important to know if an algorithm is stable?&lt;/p&gt;

&lt;p&gt;Suppose we have an array of first and last names and we needed to sort by first name, then by last name, e.g.:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[“Danny Adams”, “Bill Gates”, “Dan Jenkins”, “Dylan Grub”]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First, we could sort by first name using either a stable or unstable algorithm because we don’t need to preserve relative positions. Let’s say we use an unstable sorting algorithm, and we get back:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[“Bill Gates”, “Dylan Grub”, “Dan Jenkins”, “Danny Adams”]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The array is now in order by first name – great. But now we need to be careful: the relative positions need to be respected when we sort by last name; we don’t want “Bill Gates” to get swapped with “Dylan Grub” – this could happen if we used an unstable sorting algorithm.&lt;/p&gt;

&lt;p&gt;Using a stable algorithm to sort by last name, we’d safely end up with:&lt;br&gt;
&lt;code&gt;[“Bill Gates”, “Danny Adams”, “Dylan Grub”, “Dan Jenkins”]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Happy days.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-inplace-sorting-algorithm"&gt;
  &lt;/a&gt;
  What is an In-place sorting algorithm?
&lt;/h2&gt;

&lt;p&gt;An in-place sorting algorithm is an algorithm which transforms input using no auxiliary data structure; however, a small amount of extra storage space is allowed for auxiliary variables.&lt;/p&gt;

&lt;p&gt;In simple terms, “in-place” just means that the input is overwritten (via swapping or replacement) by the output as the algorithm executes.&lt;/p&gt;

&lt;p&gt;The advantage of in-place algorithms is that they take up less space in memory. The input is overwritten, and so no extra data structures are required; this doesn’t include constant time variables, which will never take up much space, such as the i in for-loops.&lt;/p&gt;

&lt;p&gt;In-place algorithms have constant space complexity. Out-of-place algorithms have greater than constant space complexity, e.g.: linear time or quadratic time.&lt;/p&gt;

&lt;p&gt;In-place algorithms: Bubble Sort, Selection Sort, Insertion Sort, Heap Sort.&lt;/p&gt;

&lt;p&gt;Out-of-place: Merge Sort.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-comparison-algorithm"&gt;
  &lt;/a&gt;
  What is a comparison algorithm?
&lt;/h2&gt;

&lt;p&gt;A comparison sorting algorithm is an algorithm that only reads the list of elements through a single abstract comparison operation (usually a “less than” or “equal to”) that determines which of the two elements should occur first in the final sorted output array.&lt;/p&gt;

&lt;p&gt;Comparison sorting algorithms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bubble Sort&lt;/li&gt;
&lt;li&gt;Selection Sort&lt;/li&gt;
&lt;li&gt;Insertion Sort&lt;/li&gt;
&lt;li&gt;Merge Sort&lt;/li&gt;
&lt;li&gt;Quick Sort&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example of a non-comparison-type sorting algorithm would be Radix Sort. It avoids comparison by creating and distributing elements into buckets according to their radix. Radix Sort exploits the face that information about the size of a number is encoded in the number of digits; more digits equals a bigger number.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-you-want-to-master-algorithms"&gt;
  &lt;/a&gt;
  If you Want to Master Algorithms...
&lt;/h2&gt;

&lt;p&gt;If you want to further your knowledge of algorithms and data structures, check out: &lt;a href="https://ad.admitad.com/g/05dgete24sfa55577a70b3e3b7aadc/?ulp=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fjs-algorithms-and-data-structures-masterclass%2F"&gt;JavaScript Algorithms and Data Structures Masterclass by Colt Steele&lt;/a&gt;. It’s the best Udemy course I’ve ever taken 👌.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article, you can say thanks by subscribing to my &lt;a href="https://www.youtube.com/channel/UC0URylW_U4i26wN231yRqvA"&gt;YouTube channel&lt;/a&gt; or signing up to &lt;a href="https://www.doabledanny.com/blog/"&gt;my blog&lt;/a&gt; to be notified of new posts 🙏&lt;/p&gt;

&lt;p&gt;Also, feel free to connect with me on &lt;a href="https://twitter.com/DoableDanny"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Thanks for reading,&lt;/p&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>SOLID: Dependency Inversion Principle</title>
      <author>Victor Manuel Pinzon</author>
      <pubDate>Tue, 03 Aug 2021 16:35:50 +0000</pubDate>
      <link>https://dev.to/victorpinzon1988eng/solid-dependency-inversion-principle-5f8m</link>
      <guid>https://dev.to/victorpinzon1988eng/solid-dependency-inversion-principle-5f8m</guid>
      <description>&lt;p&gt;This is the last article about the SOLID principles and in my opinion the most important one. Dependency Inversion is the foundation for one of the most useful features implemented by so many frameworks nowadays, which is Dependency Injection. This SOLID principle gives your architecture the necessary flexibility to achieve separation of concerns between layers and it's a concept that every developer should know. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definition"&gt;
  &lt;/a&gt;
  Definition
&lt;/h2&gt;

&lt;p&gt;Robert C. Martin defines DI as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A. High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;br&gt;
B. Abstractions should not depend upon details. Details should depend on abstractions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#high-and-lowlevel-modules"&gt;
  &lt;/a&gt;
  High and Low-level modules:
&lt;/h2&gt;

&lt;p&gt;To fully understand the dependency inversion principle, we should first understand the concept of high and low-level modules. &lt;/p&gt;

&lt;p&gt;A software module is a coding unit that contains one or more routines. Regularly a module has just one responsibility in the whole system. You build a system using multiple modules, which can be grouped in different layers.  Let's have a graphic example of this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--75l_rRtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfy3ksx5f6u3u52aw0lm.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--75l_rRtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfy3ksx5f6u3u52aw0lm.jpeg" alt="Calculator System Design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, there are five different modules, we have the Calculator module, as well as the Add, Subtract, Multiply and Divide module. &lt;/p&gt;

&lt;p&gt;When we talk about high-level modules, we're talking about modules that are directly used or instantiated by the presentation layer. In our example, there is just one high-level module which is the Calculator class. Low-level modules, on the other hand, help the high-level modules to accomplish their work, typically we refer to these modules as dependencies. In our example, the low-level modules are the Add, Subtract, Multiply, and Divide classes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependencies-and-coupling"&gt;
  &lt;/a&gt;
  Dependencies and Coupling
&lt;/h2&gt;

&lt;p&gt;As mentioned in the previous paragraph, dependencies are established when a module uses another module to complete its work. For instance, the Calculator module needs the Add module to achieve its goal, so a dependency is established.&lt;/p&gt;

&lt;p&gt;Coupling is the degree of interdependence between two modules, it's a measure of how closely connected they are. When this connection is strong and we cannot change one part of the dependency without affecting the other part, we say there is a tight coupling. On the other hand, if we can change one part of the dependency without affecting the other part, we say there is a loose coupling.&lt;/p&gt;

&lt;p&gt;We should always avoid tight coupling because it violates the Open/Closed Principle by not allowing to modify one side of the dependency without affecting the other one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-the-dependency-inversion-principle"&gt;
  &lt;/a&gt;
  Applying The Dependency Inversion Principle
&lt;/h2&gt;

&lt;p&gt;There is one fundamental flaw with the Calculator System design, there is a tight coupling between Calculator and the rest of the low-level modules. We cannot modify any of the operation modules without modifying the Calculator module. Additionally, if we want to add another operation, square root, for example, we also have to modify the Calculator class which violates the Open/Closed Principle. So, how do we fix this design issue? Easy, applying the Dependency Inversion Principle.&lt;/p&gt;

&lt;p&gt;The first segment of our principle says "High-level modules should not depend on low-level modules. Both should depend on abstractions". In our current design, the Calculator module depends on the Add, Subtract, Divide and Multiply module. To comply with the DI, we must define an abstraction named "CalculatorOperation". Both, high and low-level modules will depend on this abstraction.&lt;/p&gt;

&lt;p&gt;The second segment of the DIP principle says "Abstractions should not depend upon on details. Details should depend on abstractions". To accomplish this rule, we must define the abstraction as an interface (abstraction), not as a class (detail).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e6uxFkyR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56xle6db4bhlr5hdonqz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e6uxFkyR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56xle6db4bhlr5hdonqz.jpeg" alt="Calculator System Design with Dependency Inversion Applied"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now there is loose coupling between the Calculator module and the Operations modules. Now you can change one side of the dependency without affecting the other side. You can also add more operations, as long as they implement the Operation abstraction, without affecting the Calculator module.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coding-example"&gt;
  &lt;/a&gt;
  Coding example
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#bad-design"&gt;
  &lt;/a&gt;
  Bad Design
&lt;/h4&gt;

&lt;p&gt;Each calculator operation is represented as a low-level module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddOperation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Adds two numbers.
     * @param numA          First number.
     * @param numB          Second number.
     * @return              Result.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SubtractOperation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Subtracts two numbers.
     * @param numA          First number.
     * @param numB          Second number.
     * @return              Result.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;subtract&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MultiplyOperation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Multiplies two numbers.
     * @param numA          First number.
     * @param numB          Second number.
     * @return              Result.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DivideOperation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Divides two numbers.
     * @param numA          First number.
     * @param numB          Second number.
     * @return              Result.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;divide&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The violation of the Dependency Inversion Principle is noticeable in the Calculator class. If we want to add a new calculator operation, we must modify the Calculator class, which violates the Open/Closed principle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Calculator&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;Operation&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="no"&gt;ADD&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;SUBTRACT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;MULTIPLY&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;DIVIDE&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;


    &lt;span class="cm"&gt;/**
     * Performs a two numbers operation.
     * @param numA              First number.
     * @param numB              Second number.
     * @param operation         Type of operation.
     * @return                  Operation's result.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Operation&lt;/span&gt; &lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;

        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;

            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;ADD:&lt;/span&gt;
                &lt;span class="nc"&gt;AddOperation&lt;/span&gt; &lt;span class="n"&gt;addOp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;AddOperation&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;addOp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;SUBTRACT:&lt;/span&gt;
                &lt;span class="nc"&gt;SubtractOperation&lt;/span&gt; &lt;span class="n"&gt;subOp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;SubtractOperation&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subOp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subtract&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;MULTIPLY:&lt;/span&gt;
                &lt;span class="nc"&gt;MultiplyOperation&lt;/span&gt; &lt;span class="n"&gt;multOp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;MultiplyOperation&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multOp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;multiply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;DIVIDE:&lt;/span&gt;
                &lt;span class="nc"&gt;DivideOperation&lt;/span&gt; &lt;span class="n"&gt;divOp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DivideOperation&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;divOp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;divide&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To solve this issue and comply with the DIP and OCP, we must add an abstraction and modify the dependencies, so both, high and low-level modules depend on the abstraction.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#good-design"&gt;
  &lt;/a&gt;
  Good Design
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numbA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddOperation&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numbA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numbA&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;   
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SubtractOperation&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numbA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numbA&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MultiplyOperation&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numbA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numbA&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DivideOperation&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numbA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numbA&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the Calculator class complies with the Dependency Inversion Principle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Calculator&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Performs a two numbers operation.
     * @param numA              First number.
     * @param numB              Second number.
     * @param operation         Type of operation.
     * @return                  Operation's result.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calculate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;We've gone through the five SOLID principles, you've seen the benefits and disadvantages of each one. Remember that SOLID principles were thought to help you achieve flexibility, readability, and reusability. Some of these principles are the cornerstone of multiple frameworks and architectures and you will benefit from implementing them. But, also remember that excessive or incorrect use of these principles will overcomplicate your code. You must evaluate each use case and decide which is best for your solution.&lt;/p&gt;

&lt;p&gt;If you like to read more about DIP, you can have a look at &lt;a href="https://martinfowler.com/articles/dipInTheWild.html"&gt;Martin Fowler’s Blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>oop</category>
      <category>programming</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Python Functions.</title>
      <author>Acar Emmanuel</author>
      <pubDate>Tue, 03 Aug 2021 16:28:12 +0000</pubDate>
      <link>https://dev.to/manuel_a/python-functions-4bg9</link>
      <guid>https://dev.to/manuel_a/python-functions-4bg9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-function"&gt;
  &lt;/a&gt;
  What is a function?
&lt;/h2&gt;

&lt;p&gt;Simply put, a function in general terms is a sequence of statements that performs a computation. When you define a function , you give it a name followed by these sequence of statements.&lt;br&gt;
Later on, you &lt;em&gt;call&lt;/em&gt; the function by the defined name to perform what it was assigned to do.&lt;br&gt;
If you have worked with python before you have probably worked with a function already! Chances are high that you did not know it even , take an example when you are trying to find the type of a value,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="c1"&gt;# Output is &amp;lt;class 'int'&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tada! Easy right? Right there was among the functions you used along the way. It is one of many inbuilt functions that come along with python.&lt;br&gt;
The name of the function right there is &lt;em&gt;type&lt;/em&gt; and the expression in the parenthesis is called the argument of the function. An argument is a value that we pass into the function as an input and in this case the result of the &lt;em&gt;type&lt;/em&gt; function is the type of the argument - an integer.&lt;br&gt;
Briefly the main take away is that a function takes an argument and returns a return value.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-take-a-dive-into-inbuilt-functions"&gt;
  &lt;/a&gt;
  Let's take a dive into in-built functions;
&lt;/h2&gt;

&lt;p&gt;Python comes bundled with a lot of in- built functions. We will only look at a few of them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The max and min function. These return the largest and smallest value respectively.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;        &lt;span class="n"&gt;numbers&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# returns 78
&lt;/span&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# returns 0
&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Type conversion function.
These take values of one type and convert them to the type specified by that particular function but of course only when it can. Otherwise, an error is returned. 
Let's visualize it;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;      &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'32'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;#returns 32
&lt;/span&gt;      &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
       &lt;span class="s"&gt;""" Returns value error. ValueError: 
          invalid literal for int() with base 10: 'Hello' """&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.455966696&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# returns 3
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#returns 32.0
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'3.14159'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#returns 3.14159
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# returns '40'
&lt;/span&gt;      &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;23.9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# returns '23.9'
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Random numbers.
These are used to avoid a deterministic approach to things for example when designing a game you probably would not want your users to guess the next move so why not make them random. Not only that, how about the issue of security and privacy? Imagine a One Time Pin(OTP) or internet banking password that can be easily guessed because it follows a certain known pattern , why not do it the random way using python's inbuilt random function.
For example when you want to generate 10 random numbers,check below.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;   &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
   &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
       &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="c1"&gt;# returns 10 random numbers.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The random function returns  a float betwen 0.00 and 1.00(including 0.00 but not 1.00).&lt;br&gt;
Each time you run the above function a different set of 10 random numbers are generated as values of x.&lt;br&gt;
Other functions that handle random numbers are &lt;em&gt;randint&lt;/em&gt; and &lt;em&gt;choice&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# returns any number from 5 to 9
&lt;/span&gt;     &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
     &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#returns any value
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Math function.
There are set of in built functions in python that simplifies mathematical computations.
We import the math library to be able to use these functions e.g. sqrt,log,sin,tan.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;   &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
   &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;degrees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;
   &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;radians&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;degrees&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;360.0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;
   &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;radians&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#userdefined-functions"&gt;
  &lt;/a&gt;
  User-defined functions.
&lt;/h2&gt;

&lt;p&gt;You most likely have been waiting for this one. On top of Python's in-built functions. We can as well create our own functions.&lt;br&gt;
To do this we use the &lt;strong&gt;def&lt;/strong&gt; keyword followed by the function  name and parameters if any.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;   &lt;span class="c1"&gt;#defining a function in python
&lt;/span&gt;   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#may or may not have 
&lt;/span&gt;                                   &lt;span class="c1"&gt;#parameters
&lt;/span&gt;         &lt;span class="c1"&gt;# function statements here
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take an example of a function that prints the name of movies and takes no parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;movie_titles&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
       &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Coming 2 America"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Out of Death"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"War room"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="n"&gt;movie_title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# function call
&lt;/span&gt;
    &lt;span class="c1"&gt;#Output is the movie titles above
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See also an example of a function that takes parameters. This one counts the number of items in a list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;   &lt;span class="nb"&gt;list&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;

   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"The number of items in the list is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;count_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;)

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arguments-and-parameters"&gt;
  &lt;/a&gt;
  Arguments and parameters.
&lt;/h2&gt;

&lt;p&gt;Parameters are the variables that are defined during function declaration. They are found inside the the parenthesis.&lt;br&gt;
On the other hand, arguments are the actual values that are assigned to the parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;added&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;added&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# returns 8. 5 and 3 are the arguments of the function.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fruitful-and-void-functions"&gt;
  &lt;/a&gt;
  Fruitful and void functions.
&lt;/h2&gt;

&lt;p&gt;"Fruitful" functions are those that have a return value. For example the above function which adds two numbers. When you assign it to &lt;em&gt;x&lt;/em&gt; we get a return value of 8.&lt;br&gt;
On the other hand, void functions are those that gives an output but do not have a return value.This is demonstrated by the previous example that was printing movie titles. When we assign the &lt;em&gt;movie_list()&lt;/em&gt; function to let's say &lt;em&gt;movies&lt;/em&gt; we get None simply because there is no return value.&lt;/p&gt;

&lt;p&gt;That's the end of today's article  I hope you learnt something.&lt;/p&gt;

</description>
      <category>python</category>
      <category>functions</category>
      <category>procedural</category>
      <category>programming</category>
    </item>
    <item>
      <title>Install matplotlib In A Docker Container</title>
      <author>Adam Gordon Bell</author>
      <pubDate>Tue, 03 Aug 2021 16:26:09 +0000</pubDate>
      <link>https://dev.to/adamgordonbell/install-matplotlib-in-a-docker-container-51b1</link>
      <guid>https://dev.to/adamgordonbell/install-matplotlib-in-a-docker-container-51b1</guid>
      <description>&lt;p&gt;&lt;code&gt;matplotlib&lt;/code&gt; is an excellent library for creating graphs and visualizations in Python. For example, I used it to generate the performance graphs in &lt;a href="https://dev.to/blog/python-timsort-merge"&gt;my merging article&lt;/a&gt;, and internally, we use it now and again for visualizing any metrics we produce. It is a bit hard to install inside a docker container, though.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-matplotlib-in-alpine-linux"&gt;
  &lt;/a&gt;
  Installing Matplotlib in Alpine Linux
&lt;/h2&gt;

&lt;p&gt;On Alpine, or an Alpine-based docker image, it's &lt;em&gt;possible&lt;/em&gt; to install &lt;code&gt;matplotlib&lt;/code&gt;; however it will involve compiling it from source as pip does not provide any pre-compiled binaries -- this will take quite a bit of time. If you don't mind compiling from source, you will need to have its dependencies in place to make this work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt; FROM python:3.6-alpine
 RUN apk add g++ jpeg-dev zlib-dev libjpeg make
 RUN pip3 install matplotlib
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installing-matplotlib-in-ubuntu"&gt;
  &lt;/a&gt;
  Installing Matplotlib in Ubuntu
&lt;/h2&gt;

&lt;p&gt;On Ubuntu, or a Ubuntu-based docker image, the process is much simpler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt; FROM ubuntu:20.10
 RUN apt-get update &amp;amp;&amp;amp; apt-get install -y python3 python3-pip
 RUN pip3 install matplotlib
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In either case, after you've installed it, you can quickly generate great graphs and visualizations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy.interpolate&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;splprep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;splev&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.patches&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PathPatch&lt;/span&gt;

&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"X value"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Y value"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'1.png'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qPVotpAj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/assets/images/python-matplotlib-docker/1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qPVotpAj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/assets/images/python-matplotlib-docker/1.png" alt="Simple Graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appendix-alpine-vs-ubuntu-pip-install"&gt;
  &lt;/a&gt;
  Appendix: Alpine vs Ubuntu Pip Install
&lt;/h2&gt;

&lt;p&gt;Why is the Ubuntu process fast and simple and the Alpine process slow? The reason is &lt;code&gt;glibc&lt;/code&gt;. The pip wheels for &lt;code&gt;matplotlib&lt;/code&gt; are compiled c/c++ programs that dynamically link to &lt;code&gt;glibc&lt;/code&gt; and Alpine does not have &lt;code&gt;glibc&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;Alpine tries to stay small and so uses &lt;code&gt;musl-libc&lt;/code&gt; instead. Unfortunately, this means compiling from source on Alpine, which can be a lengthy process.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/49037742/why-does-it-take-ages-to-install-pandas-on-alpine-linux/58210701#58210701"&gt;ThisGuyCantEven&lt;/a&gt; on Stack Overflow has more details:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pip looks first for a wheel with the correct binaries, if it can't find one, it tries to compile the binaries from the c/c++ source and links them against &lt;code&gt;musl&lt;/code&gt;. In many cases, this won't even work unless you have the python headers from python3-dev or build tools like make.&lt;/p&gt;

&lt;p&gt;Now the silver lining, as others have mentioned, there are &lt;code&gt;apk&lt;/code&gt; packages with the proper binaries provided by the community, using these will save you the (sometimes lengthy) process of building the binaries.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>python</category>
      <category>docker</category>
      <category>linux</category>
    </item>
    <item>
      <title>Study Notes for Kent C. Dodds' Javascript Testing Course</title>
      <author>Annie Taylor Chen</author>
      <pubDate>Tue, 03 Aug 2021 16:19:13 +0000</pubDate>
      <link>https://dev.to/annietaylorchen/study-notes-for-kent-c-dodds-javascript-testing-course-43n3</link>
      <guid>https://dev.to/annietaylorchen/study-notes-for-kent-c-dodds-javascript-testing-course-43n3</guid>
      <description>&lt;p&gt;This is a mini guide for developers who are new to testing. The lessons are mainly learnt from Kent C. Dodds' &lt;a href="https://testingjavascript.com/"&gt;Javascript Testing course&lt;/a&gt;. Kent C. Dodds is the library author for &lt;a href="https://testing-library.com/"&gt;Testing Library&lt;/a&gt;, which is the official recommendation for Create React App.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-testing-strategies-for-frontend-apps"&gt;
  &lt;/a&gt;
  General testing strategies for frontend apps
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Static test/format - Eslint and Prettier&lt;br&gt;
To  eliminate type errors and make code looks easy to read and formatted consistently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unit test - Jest + React testing library&lt;br&gt;
Test individual key-components&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Integration and Snapshot tests - Jest + MSW&lt;br&gt;
Render the login pages with different responses from the metadata endpoint and see that buttons and forms are created properly&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;End to End (e2e) test - Cypress + BrowserStack&lt;br&gt;
Implement cypress tests that run our login flow. Run the tests with BrowserStack to get coverage in different browsers. Integrate to GitHub to require approval before release&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Acceptance tests/Visual Regression Test - Percy from BrowserStack (without AI) or Applitools (with AI)&lt;br&gt;
Get screenshots from different brands&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Synthetic tests and monitoring - Datadog&lt;br&gt;
Implement synthetic tests in Datadog that runs our authentication flows from different locations. Add real user monitoring in Datadog&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#notes-from-the-course"&gt;
  &lt;/a&gt;
  Notes from the course:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#0-tests-types-configuration"&gt;
  &lt;/a&gt;
  0. Tests types, configuration
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What are unit, static, integration and e2e tests?&lt;br&gt;
The explanation and code samples here:&lt;br&gt;
&lt;a href="https://kentcdodds.com/blog/unit-vs-integration-vs-e2e-tests"&gt;https://kentcdodds.com/blog/unit-vs-integration-vs-e2e-tests&lt;/a&gt;&lt;br&gt;
this post also talks about different levels of tests and the pitfalls. The more tests you have, the higher the trophy you get at, the slower the tests will run (because of too many tests) and more money it will cost. Manual testing can always be expensive. Use strategies that suit your business needs and budget.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do I use Node debugger and Chrome dev tool while running my tests?&lt;br&gt;
Add a debugger in your code where you want to pause.&lt;br&gt;
Add a script like this&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;"test:debug": "node --inspect-brk ./node_modules/jest/bin/jest.js --runInBand --watch"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;It means we are using node’s inspect break, it would mean node will stop process, and we pass the jest binary to node, since jest will run all the tests in parallel, we want to use “runInBand” to run it one by one.&lt;br&gt;
 Then go to “chrome://inspect” in your chrome browser, and you will see the the inspect appearing in “Remote Target” section. Click on the “Inspect”, you will have a browser pop up where you can check call stacks etc.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-static"&gt;
  &lt;/a&gt;
  1. Static
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How to configure Eslint and Prettier?&lt;br&gt;
In the eslintrc files, the rules can be found on &lt;a href="https://eslint.org/docs/user-guide/configuring"&gt;https://eslint.org/docs/user-guide/configuring&lt;/a&gt;&lt;br&gt;
In the prettierrc, the rules for formatting can be found on &lt;a href="https://prettier.io/playground/"&gt;https://prettier.io/playground/&lt;/a&gt;, click the “show options” in the bottom left, then copy the config JSON.&lt;br&gt;
It is also recommended to use the extensions within your VSCode IDE so you can see errors while you code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What do those ignore files such as eslintignore do?&lt;br&gt;
So the linter won’t check errors for the files listed here. For instance, if you run build we will have a dist folder, and we don’t want the linter to check for errors here.&lt;br&gt;
You can configure it in package json like this:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;”lint”: “eslint --ignore-path .gitignore . “&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;It means when you run npm run lint the linter will seek ignore path, which is specified in our gitignore file and don’t check those, otherwise check the rest in the repo.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What are rc files?&lt;br&gt;
In short:&lt;br&gt;
They're not specific to node.&lt;br&gt;
They're just another file&lt;br&gt;
As far as formats, they can be almost anything — it just depends on what you'll use to parse and read them. YAML, JSON, and ini are probably the most common (at least that I've seen).&lt;br&gt;
In most cases they seem to follow the convention .[program or binary name]rc&lt;br&gt;
package.json files can contain external metadata appropriate for config, it just depends on whether or not your project will expect a .rc file or expect it in package.json (or both, as in the case of babel)&lt;br&gt;
&lt;a href="https://stackoverflow.com/questions/36212256/what-are-rc-files-in-nodejs"&gt;https://stackoverflow.com/questions/36212256/what-are-rc-files-in-nodejs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is monkey patch?&lt;br&gt;
A monkey patch is a way for a program to extend or modify supporting system software locally (affecting only the running instance of the program).&lt;br&gt;
Application includes : Replace methods / classes / attributes / functions at runtime, e.g. to stub out a function during testing;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Monkey_patch"&gt;https://en.wikipedia.org/wiki/Monkey_patch&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What are githooks and husky?&lt;br&gt;
Git hooks are scripts that Git executes before or after events such as: commit, push, and receive. Git hooks are a built-in feature - no need to download anything. Git hooks are run locally.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://githooks.com/"&gt;https://githooks.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Husky is a JavaScript library that makes Git hooks easier. It offers the possibility of integrating them directly into our JavaScript projects, saving us from having to deal with startup guidelines or startup scripts on repository initialization.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/better-programming/a-complete-pre-commit-workflow-cea6e34f0032"&gt;https://medium.com/better-programming/a-complete-pre-commit-workflow-cea6e34f0032&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How can I automatically format the code according to prettier and lint rules before the commit?&lt;br&gt;
Use  husky and lint-staged libs.&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/husky"&gt;https://www.npmjs.com/package/husky&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/lint-staged"&gt;https://www.npmjs.com/package/lint-staged&lt;/a&gt;&lt;br&gt;
Note you might need to use husky@4 if you want to use the “free” version. New version is supposed to be faster and more conformed to the rules, but there might be a license issue for commercial project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do I run all scripts at one go?&lt;br&gt;
Try &lt;a href="https://www.npmjs.com/package/npm-run-all"&gt;https://www.npmjs.com/package/npm-run-all&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What do the ** and * means in the test file path in config file?&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;rootDir&amp;gt;/src/**/__tests__/**/*.{js,jsx,ts,tsx}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Globstar allows ** on its own as a name component to recursively match any number of layers of non-hidden directories. Also supported by the JS libraries and Python's glob.&lt;br&gt;
a/&lt;em&gt;/c would match a/b/c, a/f/c, a/c/c etc&lt;br&gt;
a/&lt;/em&gt;*/c would match a/b/c, a/b/f/t/c&lt;br&gt;
Here it means we want to find the “&lt;strong&gt;test&lt;/strong&gt;” folder, in src folder, but we don’t care where it is located or nested, then we look for any file that has the js, jsx, ts, or tsx extenstion within this folder (which would be our test files).&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Glob_(programming)"&gt;https://en.wikipedia.org/wiki/Glob_(programming)&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Typescript vs propTypes?&lt;br&gt;
Typescript validates types at compile time, whereas PropTypes are checked at runtime.&lt;br&gt;
If you’re using TS then it’s not necessary to use propTypes, and you can convert them. Read more in this guide&lt;br&gt;
&lt;a href="https://davemn.com/2020-07/typescript-vs-proptypes"&gt;https://davemn.com/2020-07/typescript-vs-proptypes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compile time vs runtime?&lt;br&gt;
Compile-time is the time at which the source code is converted into an executable code while the run time is the time at which the executable code is started running. Both the compile-time and runtime refer to different types of error.&lt;br&gt;
&lt;a href="https://stackoverflow.com/questions/846103/runtime-vs-compile-time"&gt;https://stackoverflow.com/questions/846103/runtime-vs-compile-time&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#2-unit-testing"&gt;
  &lt;/a&gt;
  2. Unit Testing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How do I do UI test if I have different framework or compiler rather than React?&lt;br&gt;
Try use Dom Testing Library. You need to render the components first before testing. Otherwise you can use the specific library that were built on it, but caters to specific framework or compiler, which will make it easier.&lt;br&gt;
&lt;a href="https://testing-library.com/docs/dom-testing-library/intro"&gt;https://testing-library.com/docs/dom-testing-library/intro&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is there any new update on using React Testing Library?&lt;br&gt;
a. use screen instead of extracting variables from render methods.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Old way
const { getByTestId } = render(&amp;lt;ResetPasswordForm queryParameters={route} /&amp;gt;)
expect(getByTestId('password-input')).toBeEmpty() 
// New way   
render(&amp;lt;ResetPasswordForm queryParameters={route} /&amp;gt;)         
expect(screen.getByTestId('password-input')).toBeEmpty()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;b. use “userEvent” instead of “fireEvent”, “change” becomes “type” because userEvent mimics real user usage better&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Old way
fireEvent.change(
      getByTestId('email-input'), {
        target: {
          value: brokenEmail
        }
      }
    )
// New way
userEvent.type(
      getByTestId('email-input'), 
      brokenEmail
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;c. “wait” becomes “waitFor”&lt;/p&gt;

&lt;p&gt;d. new mock server is encouraged to be used&lt;br&gt;
&lt;a href="https://mswjs.io/"&gt;https://mswjs.io/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What are common mistakes I should avoid using React Testing Library?&lt;br&gt;
&lt;a href="https://kentcdodds.com/blog/common-mistakes-with-react-testing-library"&gt;https://kentcdodds.com/blog/common-mistakes-with-react-testing-library&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to test accessibility issues?&lt;br&gt;
Use &lt;a href="https://github.com/nickcolley/jest-axe"&gt;Jest-axe ​GitHub - nickcolley/jest-axe: Custom Jest matcher for aXe for testing accessibility ♿️🃏​&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, this covers only 30% of real accessibility issues and to improve those you have to manually test with assistive technology that real people use (such as screen reader) and involve disabled people in the user research.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I got a lot of wrapping in act() warning, how it fix that?&lt;br&gt;
It depends on your situation. You shouldn’t just simply wrap things in act() to get away with the warning. Read more in this post:&lt;br&gt;
&lt;a href="https://kentcdodds.com/blog/fix-the-not-wrapped-in-act-warning"&gt;https://kentcdodds.com/blog/fix-the-not-wrapped-in-act-warning&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There seems to be various ways of querying elements, which way is the best?&lt;br&gt;
There is indeed some priority you should consider when using the query methods. Mostly you should try to mimic the user’s real usage as much as possible. Read more here:&lt;br&gt;
&lt;a href="https://testing-library.com/docs/queries/about/#priority"&gt;https://testing-library.com/docs/queries/about/#priority&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why I can’t use that getByRole and aria-label to get my password input fields if I toggle between password and text types (so password can be visible)?&lt;br&gt;
It’s an aria-query error so you have to specify the attribute type in input. In this case you can use data-testid instead.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-snapshot-and-integration-test"&gt;
  &lt;/a&gt;
  3. Snapshot and Integration Test
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What is snapshot testing?&lt;br&gt;
Snapshot tests are a very useful tool whenever you want to make sure your UI does not change unexpectedly. A typical snapshot test case renders a UI component, takes a snapshot, then compares it to a reference snapshot file stored alongside the test.&lt;br&gt;
In Jest, you can use toMatchSnapshot function. If you have prettier you can use toMatchInlineSnapshot function instead.&lt;br&gt;
&lt;a href="https://jestjs.io/docs/en/snapshot-testing#snapshot-testing-with-jest"&gt;https://jestjs.io/docs/en/snapshot-testing#snapshot-testing-with-jest&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do we make effective (and not meaningless and annoying) snapshot tests?&lt;br&gt;
&lt;a href="https://kentcdodds.com/blog/effective-snapshot-testing"&gt;https://kentcdodds.com/blog/effective-snapshot-testing&lt;/a&gt;&lt;br&gt;
According to Justin mentioned by Kent, “Most developers, upon seeing a snapshot test fail, will sooner just nuke the snapshot and record a fresh passing one instead of agonizing over what broke it.” So big snapshot test without telling why is not a good idea.&lt;br&gt;
&lt;a href="https://github.com/kentcdodds/jest-glamor-react"&gt;GitHub - kentcdodds/jest-glamor-react: Jest utilities for Glamor and React&lt;/a&gt;​ is a nice tool to have if you are using css in js with react.&lt;br&gt;
And if you use styled-components, try &lt;a href="https://www.npmjs.com/package/jest-styled-components"&gt;https://www.npmjs.com/package/jest-styled-components&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do I generate test data such as fake user name or posts etc?&lt;br&gt;
Try this library: &lt;a href="https://github.com/jackfranklin/test-data-bot"&gt;​GitHub - jackfranklin/test-data-bot​&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do I pass the params or query in url in my tests?&lt;br&gt;
Before it’s recommended to use history library but now the new way is to use window.history.pushState and BrowserRouter from react-router-dom.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.history.pushState({}, '', '/search?clientId=client-one');

    customRender(
      &amp;lt;BrowserRouter&amp;gt;
        &amp;lt;Login /&amp;gt;
      &amp;lt;/BrowserRouter&amp;gt;
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Why can’t I use the toBeNull() to test elements that should NOT show up in the dom?
Now it’s recommended to write like this instead, we use query for things that will NOT be in the dom, and get for things that will be in the dom.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;expect(screen.getByRole('alert')).toBeInTheDocument()
expect(screen.queryByRole('alert')).not.toBeInTheDocument()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How to debug the network request failed error?&lt;br&gt;
First check if you set up the test environment properly, and if you’re running the right test script.&lt;br&gt;
If there are still problems, follow the steps here:&lt;br&gt;
&lt;a href="https://mswjs.io/docs/recipes/debugging-uncaught-requests"&gt;https://mswjs.io/docs/recipes/debugging-uncaught-requests&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test runs alright locally, but getting CI test errors such as network request failure?&lt;br&gt;
It’s complicated, but it’s likely to be caused by network request related issues. The last time we had this problem it was caused by one of the inline-svg library which doesn’t fetch properly. Also the testing environment should be setting locally for msw to work properly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the difference between jest.mock() and MSW?&lt;br&gt;
Answered by Artem who is the main contributor behind MSW lib:&lt;br&gt;
jest.mock helps you to mock an entire implementation of something. This means you become in charge of that something, reducing its integrity. That something (i.e. a request library) no longer behaves as it usually does, it listens to your mock and abides it unquestioningly. In the case of API, when you mock axois or fetch, you become in charge of them.&lt;br&gt;
In NodeJS MSW doesn't mock request clients, but monkey patches request issuing modules. That means that your app still makes a real request, it hits all the logic it should, only to get intercepted by MSW and then give you the control over how to respond to a request.&lt;br&gt;
I find it fair to compare jest.mock with NodeJS API of MSW, as jest runs in NodeJS. Apart from using MSW with jest and any other testing framework, you can reuse the mocks you write in a browser. In fact, you'd be using identical mocks, no need to rewrite/tweak/configure. MSW is a tool you adopt to be in charge of your network and does so without deviating your app, and it's a tool you can benefit from on many levels: when testing, developing or debugging.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-e2e-testing"&gt;
  &lt;/a&gt;
  4. E2E Testing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cypress vs Selenium?&lt;br&gt;
&lt;a href="https://applitools.medium.com/cypress-vs-selenium-webdriver-better-or-just-different-2dc76906607d"&gt;https://applitools.medium.com/cypress-vs-selenium-webdriver-better-or-just-different-2dc76906607d&lt;/a&gt;&lt;br&gt;
Annie: I personally would prefer Cypress because it’s still Javascript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I installed cypress but see the lint error, how to fix that?&lt;br&gt;
Install eslint-plugin-cypress then configure a eslintrc.js file within cypress folder. For example:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
  root: true,
  plugins: ['eslint-plugin-cypress'],
  extends: ['plugin:cypress/recommended'],
  env: { 'cypress/globals': true },
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How do I configure cypress?&lt;br&gt;
Check here for options: &lt;a href="https://docs.cypress.io/guides/references/configuration.html#Folders-Files"&gt;https://docs.cypress.io/guides/references/configuration.html#Folders-Files&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The cy.get.('.236r8yf0yyhsleho') with generated class names are annoying, is there any human-friendly way to select those?&lt;br&gt;
Install @testing-library/cypress in your dependencies, import in the cypress/support/index.js file import '@testing-library/cypress/add-commands, then you can use regex to select text. Since it’s asynchronous we mostly use findByXXXX series.&lt;br&gt;
Another trick is to add const user = cy, then you will see it from a user perspective instead of cypress robot. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do I avoid the repeated part of the code, such as login, or register?&lt;br&gt;
You can abstract those into functions and add to Cypress commands in cypress/support/commands.js, then use it in the test such as&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; cy.createUser().then( user =&amp;gt; { the rest of the cypress tests…})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How to solve the Babel env error undefined?&lt;br&gt;
Check out the solution here: ​&lt;a href="https://github.com/cypress-io/cypress/issues/6755"&gt;react-app presets in babel configuration throw error because missing &lt;code&gt;NODE_ENV&lt;/code&gt; or &lt;code&gt;BABEL_ENV&lt;/code&gt; environment variables · Issue #6755 · cypress-io/cypress​&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to test dark mode?&lt;br&gt;
See the mvp and solution in this repo:&lt;br&gt;
​&lt;a href="https://github.com/AnnieTaylorCHEN/test-cypress-darkmode"&gt;GitHub - AnnieTaylorCHEN/test-cypress-darkmode: an MVP to test cypress loading darkmode with styled components​&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cypress browser doesn’t run properly (such as not connecting to the internet) when VPN is on, why?&lt;br&gt;
&lt;a href="https://github.com/cypress-io/cypress/issues/672"&gt;Cypress cannot load pages behind a corporate proxy · Issue #672 · cypress-io/cypress​&lt;/a&gt;&lt;br&gt;
According to the above thread, isnce Cypress acts as a reverse proxy to the browser (which also ends up terminating traffic amongst other things), when it makes the external requests to 3rd party servers, it needs to respect the system proxy settings. That's why this is failing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-nodejs-test"&gt;
  &lt;/a&gt;
  5. Nodejs Test
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Any way to improve error message for jest test when there is a function with multiple cases?&lt;br&gt;
Try abstract it with &lt;a href="https://github.com/atlassian/jest-in-case"&gt;​GitHub - atlassian/jest-in-case: Jest utility for creating variations of the same test​&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What are Spies, Mocks and Stub?&lt;br&gt;
Spies: Creates fake functions which we can use to track executions. This means we can tell/ find out whether the function has been executed/ how many times its been called etc. We can also use spies on existing functions and get the same capability, to track those functions executions.&lt;br&gt;
Stubs: Enables us to replace functions. This gives us more control. We can return whatever we want or have our functions work in a way that suites us to be able to test multiple scenarios.&lt;br&gt;
Mocks: They are fake methods, that have pre-programmed behavior and pre-programmed expectations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Basic introduction to testing with Chai and Sinon?&lt;br&gt;
​&lt;a href="https://scotch.io/tutorials/how-to-test-nodejs-apps-using-mocha-chai-and-sinonjs"&gt;How to Test NodeJS Apps using Mocha, Chai and SinonJS​&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#faq"&gt;
  &lt;/a&gt;
  FAQ
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Why should I bother with testing?&lt;br&gt;
To give you more confidence that your app will run smoothly, that your users won’t be angry on weekends while nobody is there to answer phone for customer support and nobody is there to fix the bug.&lt;br&gt;
It also helps you to focus and think more about your app, its structure, the code robustness etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do I cover all the test cases?&lt;br&gt;
It is advised not to go after 100% coverage but cover the most cases, especially in the UI testing. It is also suggested to use user-centered testing strategy that focuses on testing how the user will use the app, instead of implementation details. If the app pass most tests and it’s running well, you can give it a rest until later you find some edge case.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do I know what to test?&lt;br&gt;
Probably most asked and most difficult for beginners. Some developers said just to write more tests, explore the options and you will become more experienced. Some said you can see it from a user’s perspective, what’s important for them? How will they use the app? What possible errors they might bump into during their usage, at which stage? What is crucial for the business that failure costs more loss?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What are implementation details and why we should not focus on testing on that?&lt;br&gt;
There are two distinct reasons that it's important to avoid testing implementation details. Tests which test implementation details:&lt;br&gt;
Can break when you refactor application code. False negatives&lt;br&gt;
May not fail when you break application code. False positives&lt;br&gt;
&lt;a href="https://kentcdodds.com/blog/testing-implementation-details"&gt;https://kentcdodds.com/blog/testing-implementation-details&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why don’t we use Enzyme any more?&lt;br&gt;
It doesn’t encourage the best practice.&lt;br&gt;
You can read the above post, and Kent also said : “With shallow rendering, I can refactor my component's implementation and my tests break. With shallow rendering, I can break my application and my tests say everything's still working.”&lt;br&gt;
&lt;a href="https://kentcdodds.com/blog/why-i-never-use-shallow-rendering"&gt;https://kentcdodds.com/blog/why-i-never-use-shallow-rendering&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to get good at testing quickly?&lt;br&gt;
There is no quick track, you just have to practice a lot! Mostly it comes from your experiences, so ultimately you just have to write more tests, fail more, and learn from that.&lt;br&gt;
Documentation&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;Jest - &lt;a href="https://jestjs.io/docs/en/getting-started"&gt;https://jestjs.io/docs/en/getting-started&lt;/a&gt;&lt;br&gt;
Jest Cheat Sheet - &lt;a href="https://github.com/sapegin/jest-cheat-sheet"&gt;​GitHub - sapegin/jest-cheat-sheet: Jest cheat sheet​&lt;/a&gt;&lt;br&gt;
Jest Dom - ​&lt;a href="https://github.com/testing-library/jest-dom"&gt;GitHub - testing-library/jest-dom: Custom jest matchers to test the state of the DOM​&lt;/a&gt;&lt;br&gt;
Testing Library / React Testing Library - &lt;a href="https://testing-library.com/docs/"&gt;https://testing-library.com/docs/&lt;/a&gt;&lt;br&gt;
Cypress: &lt;a href="https://docs.cypress.io/guides/overview/why-cypress.html#In-a-nutshell"&gt;https://docs.cypress.io/guides/overview/why-cypress.html#In-a-nutshell&lt;/a&gt;&lt;br&gt;
BrowserStack - &lt;a href="https://www.browserstack.com/docs/"&gt;https://www.browserstack.com/docs/&lt;/a&gt;&lt;br&gt;
Applitools - &lt;a href="https://applitools.com/"&gt;Applitools: Automated Visual Testing with Visual AI&lt;/a&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>jest</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>I'm a developer and I got scammed. Then I got mad.</title>
      <author>Rishi U</author>
      <pubDate>Tue, 03 Aug 2021 15:59:22 +0000</pubDate>
      <link>https://dev.to/ricky11/i-m-a-developer-and-i-got-scammed-then-i-got-mad-598k</link>
      <guid>https://dev.to/ricky11/i-m-a-developer-and-i-got-scammed-then-i-got-mad-598k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#cathay-pacific-cx-%F0%9F%9B%A9"&gt;
  &lt;/a&gt;
  Cathay Pacific (CX) 🛩
&lt;/h2&gt;

&lt;p&gt;It was a slow and groggy Monday as I satisfyingly hit delete on most of the trash that fills my inbox. An email from Cathay Pacific Airlines was next in line, surprisingly this one actually made it to through Office 365's spam filter, hence the email was legit, see for yourself&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F7tsfM5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9v852vam7xegrwipe61.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F7tsfM5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9v852vam7xegrwipe61.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#red-flags"&gt;
  &lt;/a&gt;
  Red Flags ⛳
&lt;/h2&gt;

&lt;p&gt;Hindsight is 20/20, so hold that thought for one second. Cathay often sends promotions like this and at first glance, I was intrigued, an email from CX was welcoming, and I can't remember the last time I've been on a plane.&lt;/p&gt;

&lt;p&gt;Sure I'll take the survey, besides feedback is great! We love getting all kinds of criticism at Sinosend and the extra miles will sure come in handy one day. 😷&lt;/p&gt;

&lt;p&gt;So right about now you're probably thinking to yourself:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why didn't you notice the blatantly obvious domain?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ss0fRZsp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l96kzdf5h7l8s8gqwit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ss0fRZsp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l96kzdf5h7l8s8gqwit.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Look I hear you, yes I should have but I didn't.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Didn't you hover over the "Take the survey" button to reveal this scammy URL?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Umm.. no I didn't, indeed it was painfully obvious&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I95IB4Jv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xru2buyhwvffdbftrmkt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I95IB4Jv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xru2buyhwvffdbftrmkt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I didn't take a screenshot of the form, but I am sad to say that I eagerly provided personal details such as full name, date of birth, identity data and others.&lt;/p&gt;

&lt;p&gt;Then I hit "send" and that is when it hits me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#realization-i-just-fd-up"&gt;
  &lt;/a&gt;
  Realization I just F'd up 😲
&lt;/h2&gt;

&lt;p&gt;A pseudo error shows up "Data cant be sent", it was at this point I know I had been phished, or is it phishing, I'm not entirely sure, but something got my blood boiling. The nerve of this guy to pretend to be someone else, a company like CX, my home airline of Hong Kong, how many other people have received this email, hundreds maybe thousands... it was then I went pure nerd 🤓&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tracert-amp-devtools-are-your-friends"&gt;
  &lt;/a&gt;
  Tracert &amp;amp; Devtools are your friends
&lt;/h2&gt;

&lt;p&gt;Remember the domain name, the root was amrlink.net, a quick search of this showed that this was a company in Bangladesh that claimed to be ISP. I called the number on their website and asked to speak to a technician or someone in the fraud department. I wasn't surprised that the person at the other end didn't want to entertain the conversation and promptly hung up the phone. This got me nowhere, but now I had the scammers origin.&lt;/p&gt;

&lt;p&gt;I opened Chrome developer tools and hit the network tab. Here is where you will find all the incoming and outgoing requests under XHR/FETCH. There is a treasure of information here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--47phBh2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afxopn151sf3tn2q69vl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--47phBh2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afxopn151sf3tn2q69vl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now I had the IP address 45.251.57.89, this is where all the personal information I submitted was being funneled. I knew that there was nothing I could do to claim my data back as once it's been POSTED it's stored on an SQL database somewhere, but I could do the next best thing and stop these guys from collecting other peoples data.&lt;/p&gt;

&lt;p&gt;The next step is to run a tracert in the windows terminal, you can easily do this on a Mac or Linux machine with a number of other command-line tools.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i-GZ8tuc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75hdcm44eb7346m8hn65.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i-GZ8tuc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75hdcm44eb7346m8hn65.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay now we're getting somewhere, this takes me to a company called hrctech.net. Their website looked like a legit ISP in Bangladesh with a tonne of clients listed on their home page. But I needed to be sure so I picked up the phone and called them. I got connected to someone in sales and it took me a few mins to get routed through to the correct person in support. I spoke to a very friendly staff member who gave me his personal email and asked me to send him any evidence I had and that he would be in touch if I was right.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I should probably let the airline know -- me.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you've ever called up Cathay Pacific's hotline you're greeted with a lovely jingle followed by:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🎵 Welcome to the Marco Polo Club &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had tried looking on their site for a number to CX legal, fraud, any department that might be interested in saving their customers data from being used in a deceptive phishing scam, but all I could find was a feedback form. This hotline will have to do. These days ain't nobody booking flights so I got through almost instantly, a godsend.&lt;/p&gt;

&lt;p&gt;I explained to the kind attendant that this was going to be a weird request and that a phishing scam was taking place right about now and the email was probably sent to hundreds if not thousands of people around the world. I continued to explain to her that I have been in touch with the ISP hosting the website and they could potentially do something about this. I asked if I could add someone on the email loop or if they would like to have the contact details of the ISP, or perhaps get law enforcement involved. The reply that I got was :-&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please fill out the feedback form and we will get back to you&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Okay, that got me nowhere fast, perhaps CX gets this kind of scam complaints all too often, if only they were proactive they may be able to thwart the regularity of these scams. A notice on their website does state to be wary of emails claiming to be from Cathay Pacific, but this in my humble opinion, is a very passive approach. After all, this isn't their first rodeo, they were fined in 2020 for a data breach that happened way back in 2018 that exposed the personal details of 9 million people, maybe my email address was one of them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ok, forget the airline -- me 30 seconds later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had to move fast and decided to send the email to the ISP outlining what I had found and screenshots of the POST requests, and a link to the form which captured users' data. Believe me, when I say this, I was not expecting a reply, but what I got instead was a Whatsapp message with the following contents :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aj3wB7Bv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgjkv10dhct5egombg5i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aj3wB7Bv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgjkv10dhct5egombg5i.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-these-little-wins-that-count"&gt;
  &lt;/a&gt;
  It's these little wins that count
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fgPg6bwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9pq2jmq32elmfscb3h97.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fgPg6bwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9pq2jmq32elmfscb3h97.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#boom-mic-drop"&gt;
  &lt;/a&gt;
  Boom! Mic Drop
&lt;/h1&gt;

&lt;p&gt;A quick refresh of the criminals website and this is what showed up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TBehoost--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a95sx4ghi1lggry4ijjl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TBehoost--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a95sx4ghi1lggry4ijjl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-can-do-this-too"&gt;
  &lt;/a&gt;
  You can do this too!
&lt;/h2&gt;

&lt;p&gt;Thank you to the folks over at Hrctech, you guys are amazing in your action and professionalism, as it turned out one of their customers hosting accounts was compromised. While we may have shut down one site today, there will be another set-up tomorrow. You can do this too, with a little bit of network knowledge like I shared above you can find out where and who may be responsible. Email your local cyber police or contact the ISP directly, more often than not they are willing to listen.&lt;/p&gt;

&lt;p&gt;Thanks for reading. I work at &lt;a href="https://sinosend.com"&gt;https://sinosend.com&lt;/a&gt; a nice place to send business documents securely.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Demystifying The Flask Application factory pattern</title>
      <author>Mwenda Harun Mbaabu</author>
      <pubDate>Tue, 03 Aug 2021 15:47:17 +0000</pubDate>
      <link>https://dev.to/grayhat/application-factory-pattern-3aoj</link>
      <guid>https://dev.to/grayhat/application-factory-pattern-3aoj</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h3yMaeF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27kt8mmz5042el2o6414.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h3yMaeF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27kt8mmz5042el2o6414.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The application factory pattern in combination with Blueprints and the current_app proxy, provide a scalable, consistent and pluggable structural foundation for many Flask applications.&lt;/p&gt;

&lt;p&gt;In this tutorial, I'll give you a quick high level overview and a few examples of using this pattern.&lt;/p&gt;

&lt;p&gt;It's common to see many Flask applications start out with the following structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we have a &lt;strong&gt;views.py&lt;/strong&gt; file containing the application routes, static and templates directories for our static assets and HTML templates respectively, along with an &lt;strong&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/strong&gt; file to create the app object and register our routes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-minimal-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;A minimal app&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In it's most simple form, a Flask application can be created with the following few lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/__init__.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To avoid circular dependency issues, we must import views after creating the &lt;strong&gt;app&lt;/strong&gt; variable, along with any other objects we need to import that reference the app object.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#importing-the-app-object"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Importing the app object&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Many other files in the application will need access to the app object created in the &lt;strong&gt;init&lt;/strong&gt;.py file, such as registering routes, logging or accessing config values.&lt;/p&gt;

&lt;p&gt;To do so, we must import it first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/views.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ENV"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now have access to the app object for logging, accessing config values and registering the index route.&lt;/p&gt;

&lt;p&gt;While this solution works, it's not particularly elegant or scalable, especially when it comes to writing tests for the app.&lt;/p&gt;

&lt;p&gt;A better solution is to create a function in the &lt;strong&gt;init&lt;/strong&gt;.py file that builds the application object and returns it, often referred to as an application factory.&lt;/p&gt;

&lt;p&gt;The application factory&lt;br&gt;
As your Flask application grows, you'll often find the need to register blueprints, dynamically load configuration, add request handlers etc..&lt;/p&gt;

&lt;p&gt;The application factory is a function that wraps the creating of the app object and returns it.&lt;/p&gt;

&lt;p&gt;Here's an example, we'll go back and refactor our own &lt;strong&gt;init&lt;/strong&gt;.py file shortly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;""" Application factory

    Args:
        testing (bool): Will load TestingConfig if True, defaults fo False
    Returns:
        The Flask application object
    """&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Dynamically load config based on the testing argument or FLASK_ENV environment variable
&lt;/span&gt;    &lt;span class="n"&gt;flask_env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"FLASK_ENV"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestingConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;flask_env&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"development"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProductionConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;flask_env&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"testing"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestingConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProductionConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Import and register blueprints
&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.blueprints.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.blueprints.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unlike the previous example, we're now unable to directly reference the app variable throughout the aplication, so what now?&lt;/p&gt;

&lt;p&gt;We should take advantage of Flask's Blueprint feature, replacing any @app.route decorators with the newly created blueprint, along with another Flask feature - current_app. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessing-the-currentapp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Accessing the current_app&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Having wrapped the app object inside of the create_app function, we still need a way to access it other than calling the function itself.&lt;/p&gt;

&lt;p&gt;Flask provides an import called current_app, which acts as a proxy to the current application and can be used as if you were calling app itself - Neat!&lt;/p&gt;

&lt;p&gt;Let's recreate the views.py file above using a Blueprint and referencing the current_app proxy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"view"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ENV"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello world!"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we didn't have to change much. We can even reference the app object by renaming the import.&lt;/p&gt;

&lt;p&gt;Before we can access the route, we need to register the new Blueprint with the application. We'll do this in the create_app function. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#registering-the-blueprint-in-the-application-factory"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Registering the Blueprint in the application factory&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;I'll now refactor the &lt;strong&gt;init&lt;/strong&gt;.py file to include the create_app function and register the Blueprint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Here's a good place to load different configurations based on arguments passed to the create_app function or from environment variables
&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestingConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the app gives us the same output as before, however in a much more modular, scalable and testable way.&lt;/p&gt;

&lt;p&gt;The create_app function can now easily be imported to your Python tests, called and take arguments, providing a dynamic way to load different configurations or trigger different behaviour etc..&lt;/p&gt;

&lt;p&gt;In conclusion, application factories such as the create_app function shown in this article, combined with the excellent Blueprint feature are the building blocks of robust and scalable Flask applications. &lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>programming</category>
    </item>
    <item>
      <title>The 2 simple use cases of improving user experience of forms just using HTML</title>
      <author>Stas Melnikov</author>
      <pubDate>Tue, 03 Aug 2021 15:46:03 +0000</pubDate>
      <link>https://dev.to/melnik909/the-2-simple-use-cases-of-improving-user-experience-of-forms-just-using-html-1001</link>
      <guid>https://dev.to/melnik909/the-2-simple-use-cases-of-improving-user-experience-of-forms-just-using-html-1001</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-showhide-password-pattern"&gt;
  &lt;/a&gt;
  The show/hide password pattern
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vTrkwlGS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/54375969/5654c4c7e7954c349c336abe5e7c3ef0/1.jpg%3Ftoken-time%3D1629158400%26token-hash%3Da55AdGf9N1gjMZc0hXK7gvhtu5NWeun1AnQG4xYqiLQ%253D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTrkwlGS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/54375969/5654c4c7e7954c349c336abe5e7c3ef0/1.jpg%3Ftoken-time%3D1629158400%26token-hash%3Da55AdGf9N1gjMZc0hXK7gvhtu5NWeun1AnQG4xYqiLQ%253D" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the last years, the hide/show button pattern became very popular. But a lot of people use it wrong. The mistake is in choosing the right HTML element. &lt;/p&gt;

&lt;p&gt;People think users will interact with an element only using a mouse. Just click one time, two, etc. But the value of this pattern is more important.&lt;/p&gt;

&lt;p&gt;Firstly, users use the keyboard quickly focusing from the field to the button using the tab key. Then they push the enter key for showing or hiding the password. &lt;/p&gt;

&lt;p&gt;Secondly, screen readers have to detect this element is interactive. Then users can use it.&lt;/p&gt;

&lt;p&gt;So only one element meets all these requirements — the button element. Use it and your users will be happy to use your interface.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#showing-the-correct-virtual-keyboard-when-you-ask-to-enter-a-code"&gt;
  &lt;/a&gt;
  Showing the correct virtual keyboard when you ask to enter a code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aQk_ZAAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/54375684/ffe486076c174da29946eb5b3fe99d1f/1.jpg%3Ftoken-time%3D1629158400%26token-hash%3DBsLdISRPEFuilBqpLQxPa0Cv62j1L50bKIM6KICYInA%253D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aQk_ZAAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/54375684/ffe486076c174da29946eb5b3fe99d1f/1.jpg%3Ftoken-time%3D1629158400%26token-hash%3DBsLdISRPEFuilBqpLQxPa0Cv62j1L50bKIM6KICYInA%253D" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to make UX of forms more simple and user-friendly you should right choose the type attribute. That's important because the attribute helps browsers show the most appropriate virtual keyboard. Thus users can more quickly fill forms. For example, if users fill in a phone number type="tel" shows the keyboard with digits and other special symbols.&lt;/p&gt;

&lt;p&gt;But there are cases when existing values can't be applied. For example, when you sign in you want to ask users to enter a numeric code. &lt;/p&gt;

&lt;p&gt;In these cases, you can use the special inputmode attribute that helps browsers display a correct keyboard as well. In the cases with a numeric code, you should use the numeric value. Then browsers will display the keyboard with digits only and users will fill the field quickly as well as with the type attribute.``&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br&gt;
😊 If you like this post, please, &lt;a href="https://twitter.com/intent/tweet?text=Stas%20Melnikov%20told%20about%20how%20we%20can%20improve%20UX%20of%20forms%20using%20only%20HTML%20on%20%40ThePracticalDev%20www.dev.to/melnik909/the-2-simple-use-cases-of-improving-user-experience-of-forms-just-using-html-1001"&gt;share on Twitter&lt;/a&gt;&lt;br&gt;
🖐 I make free written accessibility review so that you don't make common mistakes. If you're interested in that chat me on &lt;a href="mailto:melnik909@ya.ru"&gt;melnik909@ya.ru&lt;/a&gt; or dev.to direct. Please, specify the subject of the email "Stas, need help" &lt;/p&gt;

&lt;p&gt;🥇 If you want to be first who take my tips get &lt;a href="https://www.patreon.com/melnik909"&gt;my paid subscription on Patreon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎁 Make a gift yourself or friends who like frontends: 👕 &lt;a href="https://www.redbubble.com/i/t-shirt/Front-End-developer-by-melnik909/79109127.FPE53"&gt;T-Shirt&lt;/a&gt;, 🎁 &lt;a href="https://www.redbubble.com/i/sticker/Front-End-developer-by-melnik909/79109127.EJUG5"&gt;Stickers&lt;/a&gt;, 🥽 &lt;a href="https://www.redbubble.com/i/mask/Front-End-developer-by-melnik909/79109127.6BSL1"&gt;Masks&lt;/a&gt;, 🧩 &lt;a href="https://www.redbubble.com/i/magnet/Front-End-developer-by-melnik909/79109127.TBCTK"&gt;Magnets&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.S.&lt;/strong&gt; This post was written with the support of my sponsors: Ben Rinehart, Sergio Kagiema, Jesse Willard, Tanya Ten.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>a11y</category>
      <category>ux</category>
    </item>
    <item>
      <title>How does a QR code work ?</title>
      <author>Clément Gaudinière</author>
      <pubDate>Tue, 03 Aug 2021 15:45:11 +0000</pubDate>
      <link>https://dev.to/clementgaudiniere/how-does-a-qr-code-work-c2a</link>
      <guid>https://dev.to/clementgaudiniere/how-does-a-qr-code-work-c2a</guid>
      <description>&lt;p&gt;Hello everyone, as you have seen in the title, today we are going to go back to the origins of the QR code. Nowadays, QR codes are used all the time, they allow you to link something physical to something digital. For example, you can simply scan a QR code to access a link, rather than copying the whole link.&lt;br&gt;
That's why it's important to understand how they work, and why not in a future article how to create one !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-long-has-it-been-around-"&gt;
  &lt;/a&gt;
  How long has it been around ?
&lt;/h3&gt;

&lt;p&gt;Firstly, since when have qr codes existed ? They have been around longer than you might think, in fact they were invented in 1994 by the company Denso-Wave.  They were used to track the transport of spare parts in Toyota factories. Denso Wave made the qr code free in 1999, but it was not really used until the rise of smartphones, about ten years later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#principle"&gt;
  &lt;/a&gt;
  Principle
&lt;/h3&gt;

&lt;p&gt;Now we will discuss the principle of qr code. To do this, we will use this qr code, which refers to the dev.to link :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KAFV_IaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwa4yvpw7zw3t6yvluxf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KAFV_IaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwa4yvpw7zw3t6yvluxf.jpg" alt="dev.to qr code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To begin with, a qr code is made up of large white and black squares in three of its corners. These squares are called modules. Some of these modules must not be covered or modified, otherwise the code cannot be scanned. These are the position markers. They tell the scanner where the edges of the QR Code are. The modules are shown here with a red overlay :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--opMpw-Zj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pt3dptdhcvprogwgqust.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--opMpw-Zj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pt3dptdhcvprogwgqust.jpg" alt="dev.to qr code modul"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we're going to take a slightly longer link and generate a qr code, so I've chosen to generate the qr code from youtube.com :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_3OvmKzl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q91gcktivq21vyot29m3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3OvmKzl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q91gcktivq21vyot29m3.jpg" alt="youtube.com qr code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One can notice inside this new qr code an alignment marker, in red in the image below :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fSA9CNfK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fodfz4iz1h4fmubrq3pz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fSA9CNfK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fodfz4iz1h4fmubrq3pz.jpg" alt="youtube.com qr code alignment marker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It acts as a reference point for the scanner, ensuring that everything lines up correctly. On larger codes there are several reference points.&lt;/p&gt;

&lt;p&gt;In this qr code, from the systemid.com website :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iHZUCCsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87alze5i0mznkzv3igu1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iHZUCCsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87alze5i0mznkzv3igu1.jpg" alt="systemid.com qr code legende"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Red stripes can be observed which are called timing patterns. They define the positioning of the rows and columns. In addition, the green sections indicate to the reader the format of the QR Code, whether it is a website, a text or other. Finally, the blue modules represent the version number, i.e. the more modules there are, the higher the version.Until v40 which represents 177 * 177 modules. Once all these modules are deconstructed we are left with the grey part :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BPPwNpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf7da0l25f1izdwkugeb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BPPwNpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jf7da0l25f1izdwkugeb.jpg" alt="systemid.com qr code grey part"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The remaining modules are grouped in 8 groups, thus forming a byte. (A byte was composed of 8 bits).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#error-correction"&gt;
  &lt;/a&gt;
  Error correction
&lt;/h3&gt;

&lt;p&gt;QR codes are practical, they are so fast that it sometimes takes less than a second to flash one, their secret ? They don't need to be scanned in full to be read. So if part of the code is damaged it doesn't matter, and the QR code can be read. But how does it do that ? The qr code has a self-correcting error system based on the Reed-Solomon code which is a so-called perfect code invented by mathematicians Irving S. Reed and Gustave Solomon. The fact that part of the code can be covered without preventing its correct reading allows us to make the Qr code more attractive by integrating graphic elements :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BodX2zDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drnruuwj5on2uccnatws.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BodX2zDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drnruuwj5on2uccnatws.jpg" alt="custom qr code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to create your own qr code, I recommend the &lt;a href="https://www.unitag.io/qrcode"&gt;Unitag.io&lt;/a&gt;  website, which allows you to manage many customization effects. &lt;/p&gt;

&lt;p&gt;In a next tutorial, we will see how to create a QR code generator in javascript. I hope this tutorial has helped you understand the different processes behind QR codes, if you have any questions, feel free to ask me in the comments. 👍&lt;/p&gt;

</description>
      <category>qrcodes</category>
      <category>flashcodes</category>
      <category>tech</category>
      <category>programming</category>
    </item>
    <item>
      <title>Kubernetes Deployment Made Easy</title>
      <author>Prashant Ghildiyal</author>
      <pubDate>Tue, 03 Aug 2021 15:40:49 +0000</pubDate>
      <link>https://dev.to/pghildiyal/kubernetes-deployment-made-easy-1f0f</link>
      <guid>https://dev.to/pghildiyal/kubernetes-deployment-made-easy-1f0f</guid>
      <description>&lt;p&gt;You can check out our dashboard and Opensource repo here:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/devtron-labs"&gt;
        devtron-labs
      &lt;/a&gt; / &lt;a href="https://github.com/devtron-labs/devtron"&gt;
        devtron
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Software Delivery Workflow For Kubernetes
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;The world is changing, and the pandemic accelerated organisational transformation. The challenge is no longer capturing the largest share of voice, but disruptive sustainable growth - delicately balanced on the three fundamental principles of cost, security, and stability! Devtron Labs not only balances the three principles effectively but provide the solution in an OpenSource environment&lt;/p&gt;

&lt;p&gt;On July 24th, One of our contributors, Prakarsh from Devtron Labs curated a session at the &lt;a href="https://youtu.be/ekxHV2Gje-E?t=7854"&gt;AWS UG OSTech Conference 2021&lt;/a&gt; organized by AWS User Group, Jaipur. With over ten years of professional experience, Prakarsh now holds the position of a kubernetes solution architect at Devtron. He discussed how Devtron makes kubernetes deployment extremely smooth. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#devtron-the-inception"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Devtron: The Inception&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;While there were many solutions in the Kubernetes vertical, none of them provided end-to-end software delivery. To address this challenge, Devtron was born. Devtron seamlessly integrates with the majority of the solutions in the marketplace. Being highly flexible, it also provides multiple abstractions so that users don’t need to go in-depth into Kubernetes. Using Devtron’s complete automated workflow (which operates numerous verticalized tools such as Helm Charts, Clair, etc.), users can quickly deploy various applications. In addition, Devtron also offers next-level user management giving complete control to the users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solutions-provided"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Solutions Provided:&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Devtron is a complete consumer-focused tool built to take care of divergent needs such as monitoring, deployment, GitOps, observability, among many others, to make it a convenient experience for all users. It integrates multiple services within the Kubernetes and Cloud Native Computing Foundation(CNCF) universe to provide various microservices. &lt;/p&gt;

&lt;p&gt;Some of the microservices like argocd, argo-rollout, clair, lens etc are readily available for deployment. In addition to that, all the original microservices created by Devtron are also available for the community to use and contribute. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feature-exhibition"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Feature Exhibition:&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;One of the vital features includes exceptionally integrated Helm Charts within Devtron. With one click, users can add any helm chart they need and deploy it on their cluster. In addition, Devtron also supports multiple deployment strategies such as Blue-Green/Canary Deployment, which is uncommon. Users can also use Multiple Clusters and access Devtron’s Multi-Cloud support enabling multiple clusters available from numerous cloud providers, all managed from a single Devtron setup.&lt;/p&gt;

&lt;p&gt;Integrated Observability and  Uniform Access Management enables users to create groups for their environment and control access. Some other features include Centralized Caching, Hibernation, and Hierarchical Security Policies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#devtron-handson"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Devtron: Hands-On&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Deployment:&lt;/strong&gt; Devtron can be used to deploy any containerised application on a Kubernetes cluster without writing any kubernetes manifest at all. The users can simply connect various Kubernetes clusters on the Devtron UI (User Interface). This will allow the users to create multiple environments within the Kubernetes cluster. Each of these environments is mapped to a namespace within the cluster. Any Kubernetes cluster, be it on-premise or through cloud providers, can be connected. Devtron supports it all!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User Access Management:&lt;/strong&gt;Users can define a group and add/remove users to manage permissions efficiently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chart Store:&lt;/strong&gt;Using the Helm Chart section, it is easy to import any helm chart available in the market. It is simply a matter of selecting a helm chart and hitting the deployment key besides being highly customizable, allowing users to edit and deploy using integrated GitOps, so no hassle to manage and store helm values.&lt;/p&gt;

&lt;p&gt;To access information on helm charts, users can find the &lt;a href="https://github.com/devtron-labs/devtron#bulb-why-devtron"&gt;ReadMe file&lt;/a&gt; to dig further. Helm charts can also be grouped for frequent use removing all the hassle of deploying them individually.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Security:&lt;/strong&gt;Security is integrated within the Devtron UI, allowing users to scan all images they build through Clair integrated within devtron. The users can also control security policy at the organization, cluster, environment and application level. Hence, it is easy to enforce a policy that prohibits any user deploying a critically vulnerable application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deploying microservice using Devtron:&lt;/strong&gt; To deploy microservices through Devtron, one simply has to create an application by selecting the Name and the Project. Then, the user can either create an application from scratch or clone configs from any of the existing applications that he has access to Devtron also supports building images from multiple git repositories. For a detailed tutorial, watch here:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ekxHV2Gje-E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps-encouraging-the-community"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Next Steps: Encouraging the Community&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The Devtron project is an entirely open-source project that anyone can contribute to. Devtron is due to release a feature called “Bring your own charts” and will be including a lot of community contributed charts with due credits. All the DevOps and open source enthusiasts can contribute their charts.  If contributors have a chart in mind and want to contribute, they can check the chart contribution guideline &lt;a href="https://github.com/devtron-labs/devtron/tree/main/contrib-chart"&gt;here&lt;/a&gt;.  Furthermore, you can check the open issues in the &lt;a href="https://github.com/devtron-labs/devtron/issues"&gt;Devtron Github Issues&lt;/a&gt; and ask the moderators if you would like to pick an issue and contribute.&lt;/p&gt;

&lt;p&gt;You can Join our &lt;a href="https://discord.gg/jsRG5qx2gp"&gt;Discord here&lt;/a&gt; to connect with us.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>opensource</category>
      <category>go</category>
    </item>
    <item>
      <title>Por quê Leitora Incomum?</title>
      <author>Fernanda Souza</author>
      <pubDate>Tue, 03 Aug 2021 15:34:20 +0000</pubDate>
      <link>https://dev.to/leitoraincomum/por-que-leitora-incomum-35ec</link>
      <guid>https://dev.to/leitoraincomum/por-que-leitora-incomum-35ec</guid>
      <description>&lt;p&gt;Sim, é isso mesmo, vamos falar nesse primeiro post aqui no &lt;strong&gt;&lt;em&gt;Dev.to&lt;/em&gt;&lt;/strong&gt; sobre o meu nome de usuário nas redes sociais que tem rendido curiosidade de algumas pessoas desde que passei a falar mais sobre minhas aventuras como graduanda de &lt;strong&gt;Análise e Desenvolvimento de Sistemas&lt;/strong&gt;, mesmo que algumas achem meio óbvio, não é tanto assim.&lt;/p&gt;

&lt;p&gt;Impossível falar sobre isso sem falar sobre mim, sobre a minha trajetória de vida pois sempre fui considerada uma pessoa incomum. Segundo o dicionário temos a seguinte definição de incomum:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Algo que não é comum; anormal, extraordinário, fora do comum, invulgar.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E foi assim mesmo que fui denominada e me senti durante boa parte da vida, sempre fora do comum, anormal aos ambientes em que eu estava e isso fez com que eu demorasse a encontrar meu espaço nesse mundo.&lt;/p&gt;

&lt;p&gt;E quais eram as razões de ser considerada incomum? Pensem numa menina apaixonada por saladas desde que começou a engatinhar, por fliperamas e jogos desde que aprendeu a andar e que começou a ler de tanto insistir com a mãe com quatro anos, sem ter pisado na escola ainda. Não bastando tudo isso tão cedo, eu estava no bairro de Itaquera (aquele mesmo do estádio do Corinthians) na Zona Leste, periferia de São Paulo. Tudo isso não era direcionado para aquelas pessoas de jeito nenhum no fim dos anos 80 ou anos 90, a gente tinha que subverter o comum para ocupar esses espaços e a minha mãe lutou até onde pode comigo para que isso fosse possível.&lt;/p&gt;

&lt;p&gt;Na vida adulta, eu logo parei um pouco com a parte de games quando casei e me tornei mãe do Arthur, mas ainda restou um hábito incomum nas minhas leituras. Eu até gosto de livros de fantasia e ficção científica, mas são os dramas e terrores psicológicos que realmente me prendem, além de biografias e textos sobre situações reais. E foi para encontrar com quem falar desses hábitos de leitura que em novembro de 2011, surgiu o &lt;a href="//www.leitoraincomum.com.br"&gt;www.leitoraincomum.com.br&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Escrever as resenhas para aprimorar a escrita, era só uma pequena parte do blog, eu queria ver se conseguiria me conectar com pessoas com gostos parecidos com os meus ou que pelo menos conversassem comigo de mente aberta sobre isso. E assim, o blog caminhou até o fim de 2015, quando entrei na graduação de &lt;strong&gt;Gestão de Tecnologia da Informação&lt;/strong&gt; e comecei a ter que escolher para onde ia a dedicação tanto com leituras quanto com a escrita, pois sim a gente lê bastante em cursos de tecnologia.&lt;/p&gt;

&lt;p&gt;Foi também aí que comecei a falar mais de outras coisas que eu gosto como séries, filmes e jogos, pois foi a fase que Arthur começou a se apaixonar pelo mundo de jogos também. E em 2018 começou o questionamento se ainda fazia sentido manter o &lt;strong&gt;leitora&lt;/strong&gt; no apelido, afinal eu definitivamente não ia ser só uma pessoa falando de livros na internet, falaria de mais coisas que fazem parte de quem eu sou.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AMIBERvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2ntkqavl1w945cazzdw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AMIBERvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2ntkqavl1w945cazzdw.png" alt='Imagem dividida em três fotos, a esquerda uma criança negra com o cabelo crespo partido ao meio e preso em dois pufs, segurando uma colher de pau na direita e usando um vestidinho branco, logo abaixo dessa escrito "Baby Fê". Ao meio, uma moça negra com o cabelo penteado e amarrado para festa com um topete, usando beca de formatura preta com babado branco e detalhe vermelho, com a bochecha apoiada na mão e sorrindo, logo abaixo escrito "Jovem Fê". A direita, uma mulher negra de cabelo com tranças longas azuis com duas mexas rosa, usando óculos de grau, olhando de lado e no fundo prateleiras com um sapo de pelúcia, usando uma camiseta branca com uma jaqueta verde por cima, abaixo escrito "Atual Fê"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E no início de 2020, após muito refletir e quando eu troquei de curso na faculdade, percebi que sim vai fazer sentido sempre ser a &lt;strong&gt;Leitora Incomum&lt;/strong&gt;, pois eu leio por amor, leio pra aprender algo, leio códigos para consertar erros, amo livrarias e cheirar livros, etc. Ser leitora é uma parte de absolutamente tudo que eu faço, até das músicas que escuto e sempre estou conectada nas letras, no que elas significam independente do idioma. O incomum, ficará sempre em respeito a minha história desde a baby Fê até a idosa Fê. É também uma forma de sempre manter todas as versões da minha história em tudo que eu faço.&lt;/p&gt;

&lt;p&gt;Espero que tenham gostado de saber mais sobre isso.&lt;/p&gt;

</description>
      <category>devlive</category>
      <category>career</category>
      <category>softskills</category>
      <category>braziliandevs</category>
    </item>
  </channel>
</rss>
