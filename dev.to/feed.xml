<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>15 Recommended Books For Computer Science Students</title>
      <author>Astrodevil</author>
      <pubDate>Mon, 17 Jan 2022 10:53:51 +0000</pubDate>
      <link>https://dev.to/astrodevil/15-recommended-books-for-computer-science-students-32pl</link>
      <guid>https://dev.to/astrodevil/15-recommended-books-for-computer-science-students-32pl</guid>
      <description>&lt;p&gt;We are in the modern world where the digitization of education is already going on. Now lots of blogs, articles are there on the internet to learn from. But Book has its own value, the author puts his all knowledge experience and time to write one whole book. The knowledge and details you get from a book are very precious.&lt;/p&gt;

&lt;p&gt;In this article, I am going to discuss 15 Recommended Books For Computer Science Students&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-clean-code-a-handbook-of-agile-software-craftsmanship"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://amzn.to/3F96hkA"&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3F96hkA"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cGzwDG5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641891220161/uLyxG3zNT.jpeg" alt="cc.jpg" width="378" height="500"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Because it's more approachable, especially for inexperienced developers, Clean Code is one of the most regularly seen books on a programmer's desk. Clean Code focuses on tactical ideas, such as how to build classes and functions, rather than high-level procedures.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-head-first-java"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://amzn.to/3Fem9Ct"&gt;Head First Java&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3Fem9Ct"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ETB7emK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642410737622/8H298dREE.jpeg" alt="510l5fQkfoL.jpg" width="432" height="500"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Learning a difficult new language, especially an object-oriented computer programming language like Java, is no simple undertaking. You could believe the issue is with your mind. It appears to have its own mind, one that doesn't always want to take in the dry, technical information you're required to learn. This book is like bible for java beginners.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-java-the-complete-reference"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://amzn.to/3GCVnF8"&gt;Java: The Complete Reference&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3GCVnF8"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ye4rSAEG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642411110679/WMXzl9Q-J.png" alt="image.png" width="500" height="275"&gt;&lt;br&gt;
&lt;/a&gt; &lt;br&gt;
In "Java: The Complete Reference, Eighth Edition," popular programming author Herb Schildt covers all you need to know about writing, building, debugging, and running Java programmes. This comprehensive volume covers the whole Java language, including syntax, keywords, and core programming concepts, and has been updated for Java Platform, Standard Edition 7 (Java SE 7). You'll also learn about the key components of the Java API library. Swing, JavaBeans, servlets, and applets are all addressed, with real-world examples to demonstrate how they function. Try-with-resources, strings in switch, type inference with the diamond operator, NIO.2, and the Fork/Join Framework are all covered in detail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-cracking-the-coding-interview"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://amzn.to/3ftNW7l"&gt;Cracking the Coding Interview&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3ftNW7l"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pufESEKi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642415984437/csfrM0fqU.png" alt="image.png" width="312" height="416"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Cracking the Coding Interview is well worth your time and money if you're ready to start interviewing with FAANG firms. Everything from the interview procedure to unique scenarios, pre-interview preparation to behavior questions, Big O to technical questions, and 189 real-world programming problems are covered.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-introduction-to-algorithms"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://amzn.to/3I8MDqM"&gt;Introduction to Algorithms&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3I8MDqM"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ReAJNZMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642411866958/BmiIkLEHg.png" alt="image.png" width="373" height="475"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This book examines a wide range of algorithms in depth while making their creation and analysis accessible to readers of all levels. Each chapter is self-contained and can be utilized as a study unit on its own. The algorithms are given in English and pseudocode that anyone who has done some programming may understand. Without losing the depth of information or mathematical rigor, the explanations have been kept simple.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-data-structures-and-algorithms-made-easy"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://amzn.to/3GEnUKs"&gt;Data Structures And Algorithms Made Easy&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3GEnUKs"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gZJ5irpL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642415939523/K2h6xcVUK.png" alt="image.png" width="291" height="416"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;"Data Structures And Algorithms Made Easy: Data Structures and Algorithmic Puzzles" addresses questions about complex data structures and algorithms. Because each problem has several solutions and the book is written in C/C++, it may be used as an interview and test preparation tool for computer scientists.&lt;br&gt;
Easy Data Structures and Algorithms: Data Structures and Algorithmic Puzzles is a collection of solutions to a variety of difficult problems involving data structures and algorithms. Any expert in computer science will find it useful. It may be used as a reference manual for computer science professionals. This book will assist you in preparing for campus interviews, exams, and employment. In a word, this book presents solutions to a wide range of challenging data structures.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-the-algorithm-design-manual"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://amzn.to/3qzqrA1"&gt;The Algorithm Design Manual&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3qzqrA1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X46M8t3s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642415902363/TzCVeT6QW.png" alt="image.png" width="299" height="416"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The "mystery" of building algorithms and measuring their usefulness and efficiency is removed in this substantially extended and updated third edition of the best-selling classic. The book currently serves as the fundamental textbook for algorithm design classes, while also serving as the foremost practical reference guide on algorithms for programmers, researchers, and students, with updates to the first and second editions.&lt;/p&gt;

&lt;p&gt;The user-friendly format The Algorithm Design Manual makes combinatorial algorithms technology accessible to anybody, with a focus on design rather than analysis. The first section, Techniques, explains how to develop and analyse computer algorithms in a clear and understandable manner. The second section, Resources, has a library of algorithmic resources, implementations, and a wide bibliography for browsing and reference.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-eloquent-javascript"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://amzn.to/3A7p6DR"&gt;Eloquent JavaScript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3A7p6DR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--59-YLaNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642413043180/IEVC-sVu4.png" alt="image.png" width="500" height="464"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Eloquent JavaScript goes beyond the cut-and-paste scripts found in recipe books to teach you how to write elegant and effective code. Variables, control structures, functions, and data structures are among the first programming concepts you'll study. After that, you'll dive into JavaScript's higher-order functions, closures, and object-oriented programming.&lt;/p&gt;

&lt;p&gt;You'll learn how to: Understand the principles of programming and best practises. By combining the capabilities of functional and object-oriented programming, regular expressions may be used to quickly analyse and edit text. Errors and browser incompatibilities should be handled compassionately. Handle browser events and DOM modifications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-let-us-c"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://amzn.to/3nzuWsx"&gt;Let Us C&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3nzuWsx"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LbEuTt0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642415822343/HyKx24Kbc.png" alt="image.png" width="216" height="312"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The book's simplicity and storytelling style set it out from the packed shelves of C Programming books. These two characteristics have been present in all six prior versions of this book. Today's C programmer must not only learn the language's complexity and nuances, but also deal with its use in systems such as Windows and Linux. This book does an excellent job of covering all three areas of C programming.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-head-first-design-patterns"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://amzn.to/3qyzxNo"&gt;Head First Design Patterns&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3qyzxNo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XclPfbC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642415773733/Q_v0m-FWne.png" alt="image.png" width="359" height="416"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This book teaches you the patterns that matter, when and why to use them, how to apply them to your own ideas, and the object-oriented design concepts that underpin them. Join the hundreds of thousands of developers who have used Head First Design Patterns to enhance their object-oriented design abilities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-the-basics-of-bitcoins-and-blockchains"&gt;
  &lt;/a&gt;
  11. &lt;a href="https://amzn.to/3FExyeS"&gt;The Basics of Bitcoins and Blockchains&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3FExyeS"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qsIb9Suy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642414306694/jfw2Yxacu.png" alt="image.png" width="269" height="416"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Learn about the history and fundamentals of cryptocurrencies and blockchains: There is a wealth of information available about bitcoin and blockchains. However, most of this information may be incomprehensible to the untrained. The Basics of Bitcoins and Blockchains seeks to give an easy-to-understand introduction to this new money and the groundbreaking technology that underlies it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-database-system-concepts"&gt;
  &lt;/a&gt;
  12. &lt;a href="https://amzn.to/3nxBat8"&gt;Database System Concepts&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3nxBat8"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f8E8_TwC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642414662145/UaK8fkAyS.png" alt="image.png" width="312" height="416"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Database System Concepts is a classic and essential work in database education. It presents the fundamental concepts of database management in an easy-to-understand manner, allowing students to begin working with databases straight away.&lt;/p&gt;

&lt;p&gt;The text is aimed towards junior/senior undergraduate database courses or first-year graduate database courses. It also includes additional information that may be utilized as a supplement or as a prelude to a more advanced course.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-python-crash-course"&gt;
  &lt;/a&gt;
  13. &lt;a href="https://amzn.to/3A6wXkT"&gt;Python Crash Course&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3A6wXkT"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vOW729ow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642415222287/Q7V-MSOlq.png" alt="image.png" width="315" height="416"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Look no further if you need to learn Python as soon as possible. Python Crash Course is designed to get novice Python programmers up and running quickly.&lt;br&gt;
Learn the fundamentals of programming quickly using a project-based approach, so you can focus on what you want to build: websites, data visualization, online apps, or even programming a Raspberry Pi. Python Crash Course is the world's best-selling Python book.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-designing-dataintensive-applications-the-big-ideas-behind-reliable-scalable-and-maintainable-systems"&gt;
  &lt;/a&gt;
  14. &lt;a href="https://amzn.to/3rsQeZQ"&gt;Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3rsQeZQ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PDgFGVRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642415371081/U60Ei_rpmE.png" alt="image.png" width="320" height="416"&gt;&lt;br&gt;
&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;"Foundations of data systems" provides an excellent overview of data systems. This section begins by discussing desired database qualities such as dependability, scalability, and maintainability. Database concepts such as the classic relational model, the document model, and graph-based models are investigated. The implementation of data storage and retrieval in databases is then thoroughly explained.&lt;br&gt;
You will learn about SStables, LSM trees, and B-Trees, as well as how they are employed in databases. Data warehousing and column-oriented databases are thoroughly discussed. The distinctions between OLTP and OLAP are presented in a tabular manner. There is a nice introduction to message brokers, protocolbuf, thrift, and avro.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-objectoriented-programming-with-c"&gt;
  &lt;/a&gt;
  15. &lt;a href="https://amzn.to/3GE7SjP"&gt;Object-Oriented Programming with C++&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3GE7SjP"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eqh9Df4j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642415714814/sxl5Smsoz.png" alt="image.png" width="315" height="416"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The book's goal is to provide a comprehensive enrichment of knowledge in the domain of object-oriented programming using C++ as the implementation language. The author has utilized simple language to convey important principles of object-oriented programming and to aid readers' comprehension. The same ideas have been implemented in solved examples written in the C++ programming language. The book retains its original style of straightforward writing and includes plenty of solved examples, programming exercises, and additional practice problems.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-you-my-content-connect-me-on-twitter-or-supports-me-by-buying-me-a-coffee"&gt;
  &lt;/a&gt;
  If You ❤️ My Content! Connect Me on  &lt;a href="https://mobile.twitter.com/Astrodevil_"&gt;Twitter&lt;/a&gt; or Supports Me By Buying Me A Coffee☕👇🏼
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/Astrodevil"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rZDB_RRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-orange.png" alt="Buy Me A Coffee" width="545" height="153"&gt; &lt;/a&gt;&lt;/p&gt;

</description>
      <category>books</category>
      <category>beginners</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>What is .env ? How to Set up and test a .env file in Node?</title>
      <author>nermineslimane</author>
      <pubDate>Mon, 17 Jan 2022 10:30:31 +0000</pubDate>
      <link>https://dev.to/nermineslimane/what-is-env-how-to-set-up-and-test-a-env-file-in-node-18bl</link>
      <guid>https://dev.to/nermineslimane/what-is-env-how-to-set-up-and-test-a-env-file-in-node-18bl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-environment-variables-"&gt;
  &lt;/a&gt;
  What are environment variables ?
&lt;/h2&gt;

&lt;p&gt;Environment variables offer information on the process's operating environment (producton, development, build pipeline, and so on). Environment variables in Node are used to store sensitive data such as passwords, API credentials, and other information that should not be written directly in code. Environment variables must be used to configure any variables or configuration details that may differ between environments.&lt;/p&gt;

&lt;p&gt;Environment variables are already included in the Node.js ecosystem, which gives them a significant benefit over alternative configuration choices such as a config.js or config.json file. Environment variables, especially when used in conjunction with automation, such as a build pipeline, allow you to avoid doing unpleasant things like scripting configuration files.&lt;/p&gt;

&lt;p&gt;Now let's dive in some coding and practice !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-set-up-and-read-a-env-file-"&gt;
  &lt;/a&gt;
  How to Set up and read a .env file ?
&lt;/h2&gt;

&lt;p&gt;The dotenv package for handling environment variables is the most popular option in the Node.js community. You can create an.env file in the application's root directory that contains key/value pairs defining the project's required environment variables. The dotenv library reads this.env file and appends it to process.env. Please do not save your.env file on your computer.&lt;/p&gt;

&lt;p&gt;In five easy steps, we'll update.gitignore, create a.env file, and read it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add .env to gitignore &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ivjSWsHX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8g18ljfiwnzbgij33x84.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ivjSWsHX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8g18ljfiwnzbgij33x84.png" alt="Image description" width="406" height="111"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Commit the changes to your repository
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .gitignore
git commit -m "Adding .env to .gitignore"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Install npm package &lt;a href="https://www.npmjs.com/package/dotenv"&gt;&lt;code&gt;dotenv&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;It's time to use our env variables&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Add some variable to your .env file, for exemple we're going to add a status for our nodejs app and define two different ports, one for development status and one for production &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eR_2y69p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dhw6zxqs0czsyel6hy1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eR_2y69p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dhw6zxqs0czsyel6hy1.png" alt="Image description" width="328" height="130"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then in our entry point we're testing if the &lt;code&gt;STATUS&lt;/code&gt;is production we're going to use the &lt;code&gt;PROD_PORT&lt;/code&gt; else we're using the &lt;code&gt;DEV_PORT&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T7uZnBle--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dfus3kwiabm7m59e50mt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T7uZnBle--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dfus3kwiabm7m59e50mt.png" alt="Image description" width="832" height="196"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the application
Change the status variable in your .env and see what happens &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uCS_a9KM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ampvva436evn5ds1eurt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uCS_a9KM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ampvva436evn5ds1eurt.png" alt="Image description" width="461" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is excellent practice to document the.env file with an example. The.env file should be particular to the environment and not checked into version control. This.env.example file documents the application's necessary variables and can be committed to version control. This serves as a helpful reference and speeds up the onboarding process for new team members by reducing the amount of time spent digging through the coding to figure out what needs to be set up.&lt;/p&gt;

&lt;p&gt;This is an example of a .env.example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Environment variables.
STATUS=production
#Development port
DEV_PORT=7000
#Production port
PROD_PORT=8000

#DB CONFIG
HOST=db.host
USER=root
PASSWORD=db.password
DB=db.name
DIALECT=mysql

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks for reading and if you have any questions, use the comment function !&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Copy any code snippet in a click as never before 😲</title>
      <author>Basharath</author>
      <pubDate>Mon, 17 Jan 2022 10:22:45 +0000</pubDate>
      <link>https://dev.to/basharath/never-seen-way-of-copying-text-or-code-snippets-2mb8</link>
      <guid>https://dev.to/basharath/never-seen-way-of-copying-text-or-code-snippets-2mb8</guid>
      <description>&lt;p&gt;We often copy text or code snippets or any other kind of resource quite commonly while browsing the web. Copying sometimes got to be tedious work in certain situations.&lt;/p&gt;

&lt;p&gt;Using keyboard shortcuts quite often for various tasks is found to be a great time-saver in the long run. But certain people who are not much used to a keyboard, like using the mouse for all their small to big activities in the browser.&lt;/p&gt;

&lt;p&gt;Copying and pasting text with the shortcuts &lt;code&gt;Ctrl + C&lt;/code&gt; and &lt;code&gt;Ctrl + V&lt;/code&gt;  are the world's highly used shortcuts and these shortcuts are known almost to all the people who use a computer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do you remember yourself copying text with &lt;code&gt;Ctrl + C C C C C C C&lt;/code&gt;, typing C multiple times to make sure the text gets copied?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sometimes we tend to put a bit more time even with copy shortcuts. When you want to copy text just so frequently, let's say you want to shift a formatted text from one place to the other and that can be copied only as paragraphs and not as a whole, in such situations, copying and pasting text with even shortcuts is going to be a very tedious job. Not just this case but in any case that involves frequent copying and pasting text gets tedious even with shortcuts.&lt;/p&gt;

&lt;p&gt;So keeping in mind various contexts involved in copying text, a small and compact chrome extension is made to &lt;em&gt;&lt;a href="https://chrome.google.com/webstore/detail/copy-text-easily/fagmaopcbeobbfhkeodicjekiniefdlo"&gt;Copy Text Easily&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using Copy Text Easily(CTE) extension effectively has the potential to save a lot of time in the long run for those who involve in copying text just so frequently. e.g., Students copying reference details to their journals, etc.&lt;/p&gt;

&lt;p&gt;Let's see all the features which this Copy Text Easily extension provides.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#copy-text-easily-extension"&gt;
  &lt;/a&gt;
  Copy Text Easily extension
&lt;/h2&gt;

&lt;p&gt;Before getting started to use this Copy Text Extension, you need to first install it from the chrome store. You can install the extension from this link &lt;a href="https://chrome.google.com/webstore/detail/copy-text-easily/fagmaopcbeobbfhkeodicjekiniefdlo"&gt;Copy Text Easily Extension&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cte-chrome-extension-has-got-three-modes-for-copying-text"&gt;
  &lt;/a&gt;
  CTE chrome extension has got three modes for copying text
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Paragraph(default)&lt;/li&gt;
&lt;li&gt;Sentence&lt;/li&gt;
&lt;li&gt;Custom&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-paragraph-mode"&gt;
  &lt;/a&gt;
  1. Paragraph mode:
&lt;/h3&gt;

&lt;p&gt;In paragraph mode, you can copy the blocks of text by hovering on any block of text you want. A small preview of the text that you are going to copy will be displayed for convenience. Just clicking on the block of text will get the text copied. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--riKQ8_TB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iv4gqxos1znnd3emwvyf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--riKQ8_TB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iv4gqxos1znnd3emwvyf.gif" alt="copy-code-stackoverflow-copy-text-easily" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This mode is very useful for copying blocks of code or code snippets on StackOverflow, GitHub, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-sentence-mode"&gt;
  &lt;/a&gt;
  2. Sentence mode:
&lt;/h3&gt;

&lt;p&gt;This is a very unique way to copy sentences from a paragraph. By hovering the mouse on and off the paragraph, you can see different sentences getting selected to copy the text. Whichever sentence you want can be seen in the preview box and just clicking once will get that particular sentence copied to your clipboard. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KlpRvPJ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ub6oa1geu2f29l1qyz8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KlpRvPJ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ub6oa1geu2f29l1qyz8.gif" alt="sentence-mode-copy-text-easily" width="880" height="427"&gt;&lt;/a&gt;&lt;br&gt;
This mode is very useful while working with sentences related to writing works. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-custom-mode"&gt;
  &lt;/a&gt;
  3. Custom mode:
&lt;/h3&gt;

&lt;p&gt;This is the customized mode to copy any text you want just by selecting. Yes, just selecting a text will copy the text to the clipboard. This is useful in situations when you can want to copy a very specific text when it is not possible with the above previous modes. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KDuNlo54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyl96bylov4totzqmmqx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KDuNlo54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyl96bylov4totzqmmqx.gif" alt="custom-mode-copy-text-easily" width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default, the extension will be active on the active browser tab, and the mouse hovering will result in the preview of text hovered. So to avoid that there's an option to activate this extension on demand by pressing any of &lt;code&gt;Ctrl&lt;/code&gt;, &lt;code&gt;Alt&lt;/code&gt;, &lt;code&gt;Shift&lt;/code&gt; keys. You can select the key at your convenience from the extension keypress options. &lt;/p&gt;

&lt;p&gt;There's even an option to enable or disable the whole extension and the keypress mode. &lt;/p&gt;

&lt;p&gt;Coming to privacy, this extension fully runs on your browser locally and doesn't communicate with the outside world. It is packed in under 15KB of pure JavaScript code without any libraries or frameworks. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you face any problems with this extension you can try the below methods:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Reload the page whichever is having a problem&lt;/li&gt;
&lt;li&gt; Check if the extension is enabled&lt;/li&gt;
&lt;li&gt; Check if you have enabled the extension to work only on keypress&lt;/li&gt;
&lt;li&gt; Sometimes 'Shift' and 'Alt' keys might have problems, so try to select the 'Ctrl' key if you have problems&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And that is all about this simple chrome extension to copy the text in a hassle-free manner.&lt;/p&gt;

&lt;p&gt;I'll be sharing interesting tips, tricks and hacks about web development and technology on &lt;a href="https://twitter.com/wahVinci"&gt;Twitter @wahVinci&lt;/a&gt; and &lt;a href="https://www.instagram.com/dev_apt/"&gt;Instagram @dev_apt&lt;/a&gt;, follow if you are interested.&lt;/p&gt;

&lt;p&gt;P.S: This extension is made by me and soon I'm going to make a tutorial to create one, until then support me by following and sharing this article on Twitter.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Imgur API Image Uploader using JavaScript (+ HTML)
</title>
      <author>Shaswat Raj</author>
      <pubDate>Mon, 17 Jan 2022 10:20:18 +0000</pubDate>
      <link>https://dev.to/sh20raj/imgur-api-image-uploader-using-javascript-html-4b1c</link>
      <guid>https://dev.to/sh20raj/imgur-api-image-uploader-using-javascript-html-4b1c</guid>
      <description>&lt;p&gt;Source :- &lt;a href="https://compile.blog/imgur-api-image-uploader/"&gt;https://compile.blog/imgur-api-image-uploader/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See Example :- &lt;a href="https://gurimg.sh20raj.repl.co/"&gt;https://gurimg.sh20raj.repl.co/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imgur is great for hosting images for free.&lt;/p&gt;

&lt;p&gt;There are other platforms like FileStack, Cloudinary, and UploadCare; but among all Imgur is the best for uploading images because it’s free for non-commercial usage.&lt;/p&gt;

&lt;p&gt;And, there is a simple way to set up the Imgur API to upload images directly from the local disk.&lt;/p&gt;

&lt;p&gt;Here’s how to do it:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#imgur-api-image-uploader"&gt;
  &lt;/a&gt;
  Imgur API Image Uploader
&lt;/h1&gt;

&lt;p&gt;Let’s break it into simple baby steps:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-1-get-the-imgur-api"&gt;
  &lt;/a&gt;
  Step #1 – Get the Imgur API
&lt;/h1&gt;

&lt;p&gt;First of all, you will have to &lt;a href="https://api.imgur.com/oauth2/addclient"&gt;register your application&lt;/a&gt; with the Imgur API. Go to the &lt;a href="https://api.imgur.com/oauth2/addclient"&gt;API page&lt;/a&gt; and register an application. It should look like the below screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y2pG9aRk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://compile.blog/wp-content/uploads/2021/03/add-client-imgur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y2pG9aRk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://compile.blog/wp-content/uploads/2021/03/add-client-imgur.png" alt="Imgur Api" width="716" height="890"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fill in the following details in the respective fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application name: whatever you would like to name it&lt;/li&gt;
&lt;li&gt;Authorization type: OAuth 2 authorization with a callback URL&lt;/li&gt;
&lt;li&gt;Authorization callback URL: -&lt;a href="https://www.getpostman.com/oauth2/callback"&gt;https://www.getpostman.com/oauth2/callback&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Application website: your website address (it’s optional)&lt;/li&gt;
&lt;li&gt;Email: your email address&lt;/li&gt;
&lt;li&gt;Description: however you’d like to describe your app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As soon as you submit, you will be presented with the Client ID and Client Secret, save both somewhere.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9GvrNrgi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://compile.blog/wp-content/uploads/2021/03/imgur-client-id-and-secret.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9GvrNrgi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://compile.blog/wp-content/uploads/2021/03/imgur-client-id-and-secret.png" alt="SS" width="718" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It should look much like the screenshot above.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-2-create-the-uploader"&gt;
  &lt;/a&gt;
  Step #2 – Create the Uploader
&lt;/h1&gt;

&lt;p&gt;Well, most of the work is done by now.&lt;/p&gt;

&lt;p&gt;You just have to create an HTML file, copy the below code and save.&lt;/p&gt;

&lt;p&gt;And yes, don’t forget to replace the YOUR_CLIENT_ID with the real Client ID that you saved in the Step #1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Imgur API Image Uploader&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;img src="https://i.imgur.com/U7afLiO.png" id="img" height="200px"&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;input type="file" id="file"&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;strong&amp;gt;
        &amp;lt;p id="url"&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/strong&amp;gt;

    &amp;lt;script&amp;gt;
        const file = document.getElementById("file")
        const img = document.getElementById("img")
        const url = document.getElementById("url")
        file.addEventListener("change", ev =&amp;gt; {
            const formdata = new FormData()
            formdata.append("image", ev.target.files[0])
            fetch("https://api.imgur.com/3/image/", {
                method: "post",
                headers: {
                    Authorization: "Client-ID YOUR_CLIENT_ID"
                },
                body: formdata
            }).then(data =&amp;gt; data.json()).then(data =&amp;gt; {
                img.src = data.data.link
                url.innerText = data.data.link
            })
        })
    &amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila! Your Imgur API Image Uploader is ready.&lt;/p&gt;

&lt;p&gt;Try opening the HTML file in your browser and test it out by uploading any image, it should return you the URL of the uploaded image.&lt;/p&gt;

&lt;p&gt;That’s it.&lt;/p&gt;

&lt;p&gt;And yes, either you can run the HTML file in the browser directly from the local disk, or you can upload it on Netlify or Github Pages.&lt;/p&gt;

&lt;p&gt;If you’ve got any related query, feel free to let me in the comments.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>api</category>
      <category>imgur</category>
      <category>sh20raj</category>
    </item>
    <item>
      <title>How to work with configs in Mezon Framework</title>
      <author>alexdodonov</author>
      <pubDate>Mon, 17 Jan 2022 10:17:02 +0000</pubDate>
      <link>https://dev.to/alexdodonov/how-to-work-with-configs-in-mezon-framework-1e74</link>
      <guid>https://dev.to/alexdodonov/how-to-work-with-configs-in-mezon-framework-1e74</guid>
      <description>&lt;p&gt;&lt;a href=""&gt;Mezon&lt;/a&gt; has it's own routine for working with configs. It can be accesed with a set of functions, wich are described below.&lt;/p&gt;

&lt;p&gt;This is the way how to start using it in your project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require mezon/conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or get it directly from &lt;a href="https://github.com/alexdodonov/mezon-conf"&gt;repo&lt;/a&gt;;&lt;/p&gt;

&lt;p&gt;Getting access to the key in config can be done with &lt;code&gt;Conf::getValue($route, $defaultValue = false)&lt;/code&gt; function. It returns config value with route $route and return $defaultValue if this key was not found. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'res/images/favicon'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'http://yoursite.com/res/images/favicon.ico'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Setting values for the config key can be done by calling &lt;code&gt;Conf::setConfigValue($route, $value)&lt;/code&gt; or &lt;code&gt;Conf::addConfigValue($route, $value)&lt;/code&gt; function. The main difference between these two functions is that the first one sets scalar key, and the second one adds element to the array in config. Here is small example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;setConfigValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'res/value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Value!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'res/value'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// displays 'Value!' string&lt;/span&gt;

&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;addConfigValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'res/value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Value 1!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;addConfigValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'res/value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Value 2!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'res/value'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// displays array( [0] =&amp;gt; 'Value 1!' , [1] =&amp;gt; 'Value 2!' )&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You also can use typed versions of these methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getValueAsArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getValueAsObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getValueAsString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;setConfigArrayValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;setConfigObjectValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;setConfigStringValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can set multyple values to the config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// here $settings is an associative array&lt;/span&gt;
&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;setConfigValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$settings&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or you can read config from JSON:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;loadConfigFromJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$pathToConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are not shure that the key exists, then you can check it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;setConfigValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'res/value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Value!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;configKeyExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'res'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;configKeyExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'res2'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;configKeyExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'res/value'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also able to delete config key&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;setConfigValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'res/value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Value!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;deleteConfigValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'res/value'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;configKeyExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'res/value'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;configKeyExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'res'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// also false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or clear the entire config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Conf&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all you need to know about config read/write.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-more"&gt;
  &lt;/a&gt;
  Learn more
&lt;/h2&gt;

&lt;p&gt;More information can be found here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/mezonphp"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/alexdodonov/mezon"&gt;Mezon Framework&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will be great if you will contribute something to &lt;a href="https://github.com/alexdodonov/mezon-conf"&gt;this project&lt;/a&gt;. Documentation, sharing the project in your social media, bug fixing, refactoring, or even submitting issue with question or feature request. Thanks anyway )&lt;/p&gt;

</description>
      <category>config</category>
      <category>mezon</category>
      <category>php</category>
      <category>ini</category>
    </item>
    <item>
      <title>Taking localization to i18next level</title>
      <author>Štěpán Granát</author>
      <pubDate>Mon, 17 Jan 2022 10:01:36 +0000</pubDate>
      <link>https://dev.to/tolgee_i18n/taking-localization-to-i18next-level-146a</link>
      <guid>https://dev.to/tolgee_i18n/taking-localization-to-i18next-level-146a</guid>
      <description>&lt;p&gt;The i18next library is one of the most popular choices for formatting translations in React applications. We decided, that we want to improve the experience by offering an easy integration with Tolgee. Localization is now uniquely accessible as your translations can be managed through opensource platform, without wasting precious Dev time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-i18next"&gt;
  &lt;/a&gt;
  Why i18next?
&lt;/h2&gt;

&lt;p&gt;The i18next is very versatile and extensible and supports basically all features that you need from i18n library.&lt;/p&gt;

&lt;p&gt;I was attracted to i18next mostly because it's React extension supports React elements interpolation through &lt;a href="https://react.i18next.com/latest/trans-component"&gt;Trans&lt;/a&gt; component.&lt;/p&gt;

&lt;p&gt;It's basically a way how to use custom elements in translations - it's really helpful when you for example need to have a link in the middle of translation. Normally you would need to have 3 separate translations and use them like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key_1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key_2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key_3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we use Trans component we can do this with one translation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Trans&lt;/span&gt; &lt;span class="na"&gt;i18nKey&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"key_1"&lt;/span&gt; &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;while translation looking like &lt;code&gt;Text 1 &amp;lt;Link&amp;gt;Text 2&amp;lt;/Link&amp;gt; Text 3&lt;/code&gt;.&lt;br&gt;
We'll get correct result with link inside. This way you can use any React elements and they will just get injected by the translation as child.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#additional-tools-for-i18next"&gt;
  &lt;/a&gt;
  Additional tools for i18next
&lt;/h3&gt;

&lt;p&gt;There is also a quite rich family of additional plugins and tools, which can be very useful. One of them is ICU support for i18next, which comes in handy as that is go to format for Tolgee.&lt;/p&gt;

&lt;p&gt;Another very useful utilities are &lt;a href="https://www.i18next.com/how-to/extracting-translations"&gt;static extraction tools&lt;/a&gt;, which can scan your code and reliably find all keys that you are using in your project. This can help you make sure that everything is translated or eliminate unused keys.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-integrate-with-tolgee"&gt;
  &lt;/a&gt;
  How to integrate with Tolgee
&lt;/h2&gt;

&lt;p&gt;We provide package &lt;a href="https://www.npmjs.com/package/@tolgee/i18next"&gt;&lt;code&gt;@tolgee/i18next&lt;/code&gt;&lt;/a&gt;, which provides a "bridge" for integration.&lt;/p&gt;

&lt;p&gt;So we'll need to install it, together with i18next, ICU parser and tolgee UI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install i18next i18next-icu @tolgee/i18next @tolgee/ui
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;i18next&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i18next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ICU&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i18next-icu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;withTolgee&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tolgee/i18next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UI&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tolgee/ui&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;withTolgee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://app.tolgee.io&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;...,&lt;/span&gt;
  &lt;span class="na"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ICU&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;supportedLngs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can manage your tranlsations through Tolgee platform, so anyone can do translate (not just Devs!). You also have the power of in-context translatins, so when you add new key, you can add initial translation directly through your app and quickly take screenshot, so everyone knows where the translation is located.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;withTolgee&lt;/code&gt; function is using i18next plugin system of backends, processors and also attaches event listeners and modifies default settings. We use our &lt;a href="https://dev.to/tolgee_i18n/using-invisible-text-for-better-localization-5d80"&gt;invisible text technique&lt;/a&gt; for marking each translation through i18next processor, so in-context functionality works as expected.&lt;/p&gt;

&lt;p&gt;TLDR: Tolgee acts as a translations source, using i18next for formatting and language management, while keeping in-context localization working.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-want-to-try-this"&gt;
  &lt;/a&gt;
  I want to try this!
&lt;/h3&gt;

&lt;p&gt;We have example applications for &lt;a href="https://github.com/tolgee/react-i18next-example"&gt;React&lt;/a&gt; and &lt;a href="https://github.com/tolgee/vue-i18next-example"&gt;Vue&lt;/a&gt; and play around with them. If you connect them with Tolgee platform, you can see in-context localization in action. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---BQ7T7DQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrufzokuxp04tqbb8pin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---BQ7T7DQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrufzokuxp04tqbb8pin.png" alt="In-context example" width="880" height="346"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read more in our &lt;a href="https://dev.to/docs/web/using_with_i18next/installation"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PS: Check &lt;a href="https://tolgee.io/"&gt;Tolgee.io&lt;/a&gt; and give us &lt;a href="https://github.com/tolgee/server"&gt;github stars&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Original article was published on &lt;a href="https://tolgee.io/blog"&gt;our blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Striver's SDE Sheet Journey - #15 Majority Element (&gt;N/2 times)</title>
      <author>sachin26</author>
      <pubDate>Mon, 17 Jan 2022 09:34:46 +0000</pubDate>
      <link>https://dev.to/sachin26/strivers-sde-sheet-journey-15-majority-element-n2-times-44j6</link>
      <guid>https://dev.to/sachin26/strivers-sde-sheet-journey-15-majority-element-n2-times-44j6</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;Problem Statement&lt;/u&gt; :-&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Given an array nums of size n, return the majority element.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt; :  &lt;code&gt;nums = [2,2,1,1,1,2,2]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Result&lt;/strong&gt; : &lt;code&gt;2&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-1"&gt;
  &lt;/a&gt;
  &lt;u&gt;Solution 1&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;using sorting,we can easily find the majority element in an array.&lt;/em&gt;&lt;br&gt;
lets understand this approach step by step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-1&lt;/strong&gt; sort the array &lt;code&gt;nums&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;stpe-2&lt;/strong&gt; initialize three variables &lt;code&gt;max = 0&lt;/code&gt;, &lt;code&gt;count = 1&lt;/code&gt;, &lt;code&gt;majEle = 0&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-3&lt;/strong&gt; run a loop from &lt;code&gt;i=1&lt;/code&gt; to &lt;code&gt;n-1&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; increase counting if the adjacent elements are the same..&lt;br&gt;
if &lt;code&gt;nums[i] == nums[i+1]&lt;/code&gt; then &lt;code&gt;count++&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; if not &lt;code&gt;nums[i] == nums[i+1]&lt;/code&gt;, start recounting for new majority element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; if &lt;code&gt;count &amp;gt; max&lt;/code&gt; then re-assign new &lt;code&gt;max&lt;/code&gt; &amp;amp; &lt;code&gt;majEle&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;majorityElement&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;majEle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]){&lt;/span&gt;
                &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;

            &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;

             &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;majEle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;majEle&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Time Complexity&lt;/strong&gt; : &lt;em&gt;O(nlogn) + O(n)&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Space Complexity&lt;/strong&gt; : &lt;em&gt;O(1)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-2"&gt;
  &lt;/a&gt;
  &lt;u&gt;Solution 2&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;by using &lt;a href="https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm#:~:text=Boyer%E2%80%93Moore%20majority%20vote%20algorithm,-From%20Wikipedia%2C%20the"&gt;&lt;strong&gt;Boyer–Moore majority vote algorithm&lt;/strong&gt;&lt;/a&gt;, we can solve this problem in &lt;strong&gt;O(n)&lt;/strong&gt; time complexity&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;in this algorithm, we increase or decrease the count of the majority element, in the last, we will get our majority element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-1&lt;/strong&gt; initialise two variables &lt;code&gt;majEle = nums[0]&lt;/code&gt;, &lt;code&gt;count = 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step-2&lt;/strong&gt; run a loop from &lt;code&gt;i=1&lt;/code&gt; to &lt;code&gt;n&lt;/code&gt;, then&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; if we found the &lt;code&gt;majEle&lt;/code&gt;, increase the &lt;code&gt;count&lt;/code&gt; by &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;2.&lt;/strong&gt; if not &lt;code&gt;majEle&lt;/code&gt;, decrease the &lt;code&gt;count&lt;/code&gt; by &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;3.&lt;/strong&gt; if count become &lt;code&gt;0&lt;/code&gt; then, re-initialse &lt;code&gt;majEle&lt;/code&gt; &amp;amp; &lt;code&gt;count&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;majorityElement&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;majEle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++){&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;majEle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;

            &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;majEle&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;--;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;majEle&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Thank you for reading this article. save it for future use.&lt;br&gt;
if you found something, let me in the comment section.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>dsa</category>
      <category>java</category>
    </item>
    <item>
      <title>AWS open source news and updates #96</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 17 Jan 2022 09:08:28 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-96-ig8</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-96-ig8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#jan-17th-2022-instalment-96"&gt;
  &lt;/a&gt;
  Jan 17th, 2022 - Instalment #96
&lt;/h2&gt;

&lt;p&gt;Newsletter #96. &lt;/p&gt;

&lt;p&gt;Welcome to another great round up of open source projects, news and great content. This week, we have new open source projects such as Event Catalog (that helps you to discover, explore and document your Event Driven Architectures), AWS Powertools for Lambda TypeScript edition, flowdog (an application/framework for inspection and manipulation of network traffic in AWS VPCs), ai-doorbell (a serverless AI enabled door bell) and many more. For your reading pleasure we have content on the following topics, Kubernetes, Babelfish, Redis, Smithy, Amazon EMR, TorcheServe, Deep Graph Library, ParallelCluster, Galaxy, Apache Flink, OpenSearch and more. Make sure you check out the new SaaS workshop, we have a new video that I think you will enjoy and we have a couple of new events, one of which you can catch later today.&lt;/p&gt;

&lt;p&gt;Before diving in though, make sure you check out the AWS Community Builder application (below) and if you missed it, news about a great book which should be on your reading list. With that....&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CDK Book&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are looking for something to read, then I have a recommendation for you. Towards the end of 2021, &lt;a href="https://aws-oss.beachgeek.co.uk/195"&gt;The CDK Book&lt;/a&gt; came out, written by Matthew Bonig, Thorsten Höger, Sathyajith Bhat and Matt Coulter. This is a must read interesting in automation and writing infrastructure as code, this book has been written by DevOps engineers for DevOps engineers. With a foreword from Elad Ben-Israel, this provides a hands on (plenty of examples and code, across more than just TypeScript) guide, as well as sharing current good practices as well as how you might use this in more enterprise use cases. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Community Builders&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The application form to join AWS Community Builders will be open until January 24th, and I would love to see more of the great open source builders sign up for this great program. Application form is &lt;a href="https://aws-oss.beachgeek.co.uk/18a"&gt;here&lt;/a&gt; If you want more info, check out this great write up from an existing AWS Community Builder, Stephen Sennett, &lt;a href="https://aws-oss.beachgeek.co.uk/18b"&gt;How to become an AWS Community Builder&lt;/a&gt;  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Matt Lewis, Matt Morgan, Aidan Steele, Lars Jacobsson, Cameron Senese, Yehor Shytikov, David Boyne, Damon Cortesi, Matt Muller, Asher Yermiyahu, Viji Sarathy, Kishore Dhamodaran, Jared Keating, Neha Gupta, Ramesh Kumar Venkatraman, Sheetal Joshi, Apurup Chevuru, Mike Stefaniak, Carlos Manzanedo Rueda, Brandon Wagner, Karthik Basavaraj, Suman Debnath, Hubert Asamer and Jan Metzner.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-open-source-projects"&gt;
  &lt;/a&gt;
  Latest open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;eventcatalog&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/18d"&gt;eventcatalog&lt;/a&gt; another fantastic project from David Boyne. Event Catalog helps you to discover, explore and document your Event Driven Architectures powered by Markdown. EventCatalog as a website generator that allows you to document your event architectures with markdown files. As with all David's projects, next level documentation and there are example/demo output so you can see what you are likely to get if you were to run it yourself. Awesome stuff. If you do find it useful, make sure you do not skip the Sponsor link...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7g3V6bbC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boyney123/eventcatalog/master/website/static/img/eventcatalog-screen1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7g3V6bbC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boyney123/eventcatalog/master/website/static/img/eventcatalog-screen1.png" alt="demo" width="880" height="471"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cloud-map-mcs-controller&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/18c"&gt;cloud-map-mcs-controller&lt;/a&gt; is an open source project that implements the upstream multi-cluster services API (mcs-api) specification. The repository also provides a detailed work instruction and associated artefacts required for the end-end implementation of the AWS Cloud Map MCS Controller across multiple EKS clusters in support of seamless, multi-cluster workload deployments. This blog post, Kubernetes Multi-cluster Service Discovery using the AWS Cloud Map MCS Controller, from Cameron Senese will help you learn all about the mcs-api, and how to deploy the AWS MCS Controller in support of seamless, multi-cluster workload deployments on Amazon EKS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uRTwDX49--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.bytequalia.com/content/images/2022/01/solution-overview-v0.01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uRTwDX49--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.bytequalia.com/content/images/2022/01/solution-overview-v0.01.png" alt="arch" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-lambda-powertools-typescript&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/18e"&gt;aws-lambda-powertools-typescript&lt;/a&gt; this generated a lot of excitement a few weeks back when it was announced. TypeScript developers no longer need to feel left out. AWS Lambda Powertools TypeScript provides a suite of utilities for AWS Lambda functions running on the Node.js runtime, to ease the adoption of best practices such as tracing, structured logging, custom metrics, and more. AWS Lambda Powertools for TypeScript is currently released as a beta developer preview and is intended strictly for feedback purposes only. Check out the blog section for a couple of great, early reviews of this project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cdk-lambda-powertools-python-layer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/18f"&gt;cdk-lambda-powertools-python-layer&lt;/a&gt; Have you checked out the CDK Constructs Hub yet? Whilst browsing last week, I found this community developed construct that will create AWS Lambda Layer with AWS Powertools for Python library. With this construct you don't have to care about packaging and dependency management, just create a construct and add it to your function. Nice!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;flink-industrial-anomaly-detector&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/18z"&gt;flink-industrial-anomaly-detector&lt;/a&gt; this ready to go open sourced solution provides a solid foundation for some advanced streaming analytics projects you might have. In this particular case, the streaming data is coming from an industrial use case. Sensor data, such as pressure and temperature, is ingested with a local edge gateway and streamed to the cloud runing in-stream analytics using Apache Flink. &lt;br&gt;
Hubert Asamer and Jan Metzner have put this detailed blog post &lt;a href="https://aws-oss.beachgeek.co.uk/18y"&gt;Detect Real-Time Anomalies and Failures in Industrial Processes Using Apache Flink&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---YVDys6M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2022/01/07/Figure-2-Detailed-system-architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---YVDys6M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2022/01/07/Figure-2-Detailed-system-architecture.png" alt="arch" width="880" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;flowdog&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/190"&gt;flowdog&lt;/a&gt; this the first of two projects from Aidan Steele. Flowdog is an application/framework for inspection and manipulation of network traffic in AWS VPCs. Packets routed to or from the Internet, between VPCs, between subnets can all be programmatically inspected or modified in great detail. What can you do with this? Aidan provides some examples, which demonstrate that anything is possible in the world of software-defined networking. From the docs, I really enjoyed the "Rickrolling" example. As Aidan says..&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;AWS Workspaces is managed computers in the cloud for employees. Sometimes they want to watch YouTube. But here's a script that means they can only watch The One Video.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O6swKrqE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FI5eZihaAAEpFK5%3Fformat%3Djpg%26name%3Dmedium" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O6swKrqE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FI5eZihaAAEpFK5%3Fformat%3Djpg%26name%3Dmedium" alt="example" width="880" height="711"&gt;&lt;/a&gt;&lt;br&gt;
Or maybe you want a more subtle rickroll. There's another sample that intercepts requests to the STS API and returns a friendly commitment in the response payload.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ms8Ize8s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FI5ejaAaIAIOyrk%3Fformat%3Djpg%26name%3Dmedium" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ms8Ize8s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FI5ejaAaIAIOyrk%3Fformat%3Djpg%26name%3Dmedium" alt="example" width="880" height="264"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;ipv6-ghost-ship&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/191"&gt;ipv6-ghost-ship&lt;/a&gt; what might you do if IP addresses were (almost) infinite? Well how about this fun/silly project from Aidan Steele, which changes the prefix of your instance ever 30 seconds. Make sure you read the Twitter thread...(I don't want to spoil it, but you really must)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;eks-gitops-crossplane-flux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/18p"&gt;eks-gitops-crossplane-flux&lt;/a&gt; this repository contains software artifacts to deploy Crossplane server and Flux to an existing Amazon EKS cluster and then leverage the GitOps workflow to manage both provisioning a remote EKS cluster with Crossplane and subsequently manage application deployments to it using Flux. Viji Sarathy has put together a supporting blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/18q"&gt;GitOps model for provisioning and bootstrapping Amazon EKS clusters using Crossplane and Flux&lt;/a&gt; to help you get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fBP5Dr5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2022/01/06/GitOpsEKS.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fBP5Dr5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2022/01/06/GitOpsEKS.jpg" alt="arch" width="880" height="617"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ai-doorbell&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/198"&gt;ai-doorbell&lt;/a&gt; nice new project from AWS Community Builder Lars Jacobsson, that will help you build a serverless, smart AI enabled door bell. To walk you through the build, Lars has put together this blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/199"&gt;The serverless architecture of a talking doorbell&lt;/a&gt; as well as rather funny demo video of the finished thing.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/DYGVGh5M-wg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#workshop"&gt;
  &lt;/a&gt;
  Workshop
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Amazon EKS SaaS Workshop&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check out the new Amazon EKS SaaS Workshop. Amazon EKS introduces a range of constructs that you can use to realise multi-tenancy in your SaaS solution. In this workshop, dig into the code and architecture of a working Amazon EKS SaaS application, exploring the various strategies to apply when building a SaaS application with Amazon EKS. Identity, tenant isolation, routing, data partitioning, and onboarding are among the SaaS constructs you create in this workshop. This workshop provides a hands-on view into all the moving parts of a real Amazon EKS SaaS solution that addresses specific considerations associated with bringing it to life on AWS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qIVk6wjC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.us-east-1.prod.workshops.aws/public/596a58f6-65df-49e9-bce8-94bf5e3cf488/static/30/arch-overview.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qIVk6wjC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.us-east-1.prod.workshops.aws/public/596a58f6-65df-49e9-bce8-94bf5e3cf488/static/30/arch-overview.png" alt="arch" width="880" height="576"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the code for this workshop in the GitHub repository, &lt;a href="https://aws-oss.beachgeek.co.uk/192"&gt;aws-saas-factory-eks-reference-architecture&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-community-blog-posts"&gt;
  &lt;/a&gt;
  AWS and Community blog posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;AWS Lambda Powertools&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We had a couple of posts last week from AWS Community Builders/Heroes on the recently announced AWS Lambda Powertools for TypeScript. (in fact, it is a tale of two Matt's or Matt^2!)&lt;/p&gt;

&lt;p&gt;First up is AWS Community Builder Matt Morgan, kicks the tyres of this project and walks you through his evaluation in his post, &lt;a href="https://aws-oss.beachgeek.co.uk/196"&gt;First Look at Lambda Powertools TypeScript&lt;/a&gt;. Following that is AWS Data Hero Matt Lewis, with his post &lt;a href="https://aws-oss.beachgeek.co.uk/197"&gt;Test Drive AWS Lambda Powertools for Typescript&lt;/a&gt; where he takes his turn in kicking the AWS Lambda Powertools for TypeScript tyres. Make sure you check out both posts, including some of the comments in the first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenSearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS Data Hero Matt Lewis' second post this week (see above) on how to quickly get up and running with OpenSearch in &lt;a href="https://aws-oss.beachgeek.co.uk/19a"&gt;Streaming Data to OpenSearch&lt;/a&gt;. This post shows you how to configure Cognito to protect OpenSearch Dashboards, and set up a custom CloudWatch Metrics dashboard for monitoring the HTTP Status Codes that are returned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smithy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Smithy is an open sourced interface definition language and set of tools that allows developers to build clients and servers in multiple languages. Smithy models define a service as a collection of resources, operations, and shapes. A Smithy model enables API providers to generate clients and servers in various programming languages, API documentation, test automation, and example code. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/18n"&gt;Developer Preview: Ruby SDK code generation using Smithy&lt;/a&gt; Matt Muller shares news of the developer preview of smithy-ruby, a toolchain that can be used to code generate a “white label” Ruby SDK for your service API using Smithy modelling. This is a really interesting project that deserves more attention, so make sure you read this - especially if you are planning/building your own APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--agrTu1Ji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0716d9708d321ffb6a00818614779e779925365c/2022/01/07/Screen-Shot-2021-05-17-at-1.26.28-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--agrTu1Ji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0716d9708d321ffb6a00818614779e779925365c/2022/01/07/Screen-Shot-2021-05-17-at-1.26.28-PM.png" alt="demo" width="347" height="623"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Babelfish&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the post, &lt;a href="https://aws-oss.beachgeek.co.uk/18t"&gt;Get started with Babelfish for Aurora PostgreSQL&lt;/a&gt;, Neha Gupta and Ramesh Kumar Venkatraman show you the steps involved in creating Babelfish for Aurora PostgreSQL and how to connect to the Babelfish database to query the server properties and its version information using different clients like sqlcmd and the SSMS Query Editor. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rOcD_6AP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/12/20/DBBLOG-1915-image031.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rOcD_6AP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/12/20/DBBLOG-1915-image031.jpg" alt="babelfish" width="515" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A couple of posts this week. First off we have Asher Yermiyahu with the first in a series of posts related to AWS contributions to open source Redis clients. In the first one, &lt;a href="https://aws-oss.beachgeek.co.uk/18r"&gt;New cluster-mode support in redis-py&lt;/a&gt; learn about how AWS has teamed up with the open-source community that supports redis-py to add cluster-mode support to this popular client. [hands on]&lt;/p&gt;

&lt;p&gt;Following that we have Kishore Dhamodaran and Jared Keating who have written about the recently announced support for auto scaling your Amazon ElastiCache for Redis clusters in the post, &lt;a href="https://aws-oss.beachgeek.co.uk/18s"&gt;Scale your Amazon ElastiCache for Redis clusters with Auto Scaling&lt;/a&gt; [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LHcDtgn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/12/27/DBBLOG-1960-image025.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LHcDtgn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/12/27/DBBLOG-1960-image025.jpg" alt="graph" width="880" height="551"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There were a bunch of interesting posts related to Kubernetes. We had Sheetal Joshi, Apurup Chevuru, and Mike Stefaniak put together this, &lt;a href="https://aws-oss.beachgeek.co.uk/18v"&gt;Amazon EKS launches IPv6 support&lt;/a&gt; where you will learn how to create an IPv6 EKS cluster within a dual-stack Amazon Virtual Private Cloud (VPC). As part of this walkthrough you will deploy a sample IPv6-only service and understand IPv4 and IPv6 ingress and egress functionality. Nice [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_K6r7cJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2022/01/03/ipv6-pod-networking.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_K6r7cJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2022/01/03/ipv6-pod-networking.png" alt="arch" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next up was, &lt;a href="https://aws-oss.beachgeek.co.uk/18w"&gt;Efficiently Scaling kOps clusters with Amazon EC2 Spot Instances&lt;/a&gt; from Carlos Manzanedo Rueda and Brandon Wagner where they show you how you can leverage recently released tools to optimise your usage of Amazon EC2 Spot Instances on Kubernetes Operations (kOps) clusters. [hands on]&lt;/p&gt;

&lt;p&gt;Finally, if you were looking for guidance on how to mount Amazon EFS file systems cross-account using Amazon EKS, then Karthik Basavaraj and Suman Debnath have you covered in their post &lt;a href="https://aws-oss.beachgeek.co.uk/18x"&gt;Mount Amazon EFS file systems cross-account from Amazon EKS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, another plug for the new &lt;a href="https://aws-oss.beachgeek.co.uk/185"&gt;EKS News&lt;/a&gt; which brings you all the latest updates, news and service announcements, notable blogs and stuff you really need to know about. Make sure you sign up for it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other posts worth checking out&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last week, these posts also caught my eye.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/18j"&gt;Custom AMIs with ParallelCluster 3&lt;/a&gt; looks at how you can use features of ParallelCluster 3 (an AWS open sourced cluster management tool) for building on your existing AMIs when creating your clusters [hands on]&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/18k"&gt;How to set up Galaxy for research on AWS using Amazon Lightsail&lt;/a&gt; will help you to deploy the open-source Galaxy Project (a well-known toolkit for researchers to complete tasks and common tooling on public and private datasets) on AWS [hands on]&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/18l"&gt;Optimize your inference jobs using dynamic batch inference with TorchServe on Amazon SageMaker&lt;/a&gt; shows you a number of options for running your model inferencing using the open source project, TorchServe [hands on]&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/18m"&gt;Graph-based recommendation system with Neptune ML: An illustration on social network link prediction challenges&lt;/a&gt; shows you how you can use Neptune ML (powered by the Deep Graph Library an open-source, high-performance, and scalable Python package for DL on graphs) and GNNs to help you make recommendations on graph data [hands on]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U0yoKakf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/01/04/ML-6681-image002.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U0yoKakf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2022/01/04/ML-6681-image002.png" alt="example" width="880" height="594"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/18o"&gt;Introducing server-side caching item eviction for AWS AppSync&lt;/a&gt; look at how developers can leverage a new capability to evict specific entries from AppSync’s server-side cache [hands on]&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/18u"&gt;Automating SAP installation with open-source tools&lt;/a&gt; walks you how you can use open-source common tools like Jenkins and Ansible to automate your SAP installation. [hands on]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Following the announcement of updates in MySQL database versions 5.7 and 8.0, we have updated Amazon Relational Database Service (Amazon RDS) for MySQL to support MySQL minor versions 5.7.36, and 8.0.27. We recommend that you upgrade to the latest minor versions to fix known security vulnerabilities in prior versions of MySQL, and to benefit from the numerous bug fixes, performance improvements, and new functionality added by the MySQL community. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Magento&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you deploy Magento on AWS, then you will be interested in this update which I received from Yehor Shytikov. He let me know of a number of updates to some open source projects (&lt;a href="https://aws-oss.beachgeek.co.uk/18g"&gt;TerraformMagentoCloud&lt;/a&gt; and &lt;a href="https://aws-oss.beachgeek.co.uk/18h"&gt;Magento-AWS-Linux-2-Installation&lt;/a&gt;) that help set up Magento on AWS infrastructure with auto-scaling using AWS Cloud and Terraform. A new minimal branch helps you to deploy in a minimal infrastructure without redundant complexity like Varnish cache server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can now publish the Redis engine log from your Amazon ElastiCache for Redis clusters to Amazon CloudWatch Logs and Amazon Kinesis Data Firehose. The Redis engine log provides visibility into the internal operations of the Redis engine, giving additional insight into Redis operations and helping you troubleshoot Redis issues. You can choose to send these logs in either JSON or text format to Amazon CloudWatch Logs and Amazon Kinesis Data Firehose. This feature is available for Amazon ElastiCache clusters with Redis version 6.2 and is supported in all commercial Amazon Web Services Regions. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SQL Explorer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon EMR Studio is an integrated development environment (IDE) that makes it easy for data scientists and data engineers to develop, visualise, and debug big data and analytics applications written in R, Python, Scala, and PySpark. SQL Explorer is a new feature in your EMR Studio Workspace that allows you to browse the data catalog and run SQL queries on EMR clusters from EMR Studio. This release of SQL Explorer in EMR Studio supports running SQL queries on Amazon EMR on EC2 clusters running Presto version 0.254.1 or higher. &lt;/p&gt;

&lt;p&gt;Presto is a fast SQL query engine designed for interactive analytic queries over large datasets from multiple sources. In SQL explorer, you can connect to Amazon EMR on EC2 clusters with Presto installed to view and browse the data catalog. Supported data catalogs include AWS Glue Data Catalog and self-hosted Hive Metastore version 3.1.2 or higher. SQL Explorer also provides you an Editor to run SQL queries, view the query results in a table, and download query results in a csv format. You also have the ability to run multiple SQL statements via different Editor tabs. SQL explorer is supported for Amazon EMR versions 6.4.0+.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Toolkit for JetBrains&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The AWS Toolkit for JetBrains now provides developers with convenient IDE functionality to connect to Amazon ECS containers and issue commands using Amazon ECS Exec. This allows developers to directly interact with containers, such as running commands in or get a shell to an ECS container running on an Amazon EC2 instance or on AWS Fargate, without leaving their IDE. ECS Exec uses the AWS Systems Manager (SSM) Session Manager under the hood to establish a connection with the running container.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#videos-of-the-week"&gt;
  &lt;/a&gt;
  Videos of the week
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Amazon EMR Studio - Real-time Collaboration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Real-time collaboration is a new feature in EMR Studio that allows multiple users to share a single notebook workspace. This makes it easy for data scientists and data engineers to collaborate in real-time across teams using EMR Studio as they develop, visualise, and debug big data and analytics applications written in R, Python, Scala, and PySpark. In this video, Damon Cortesi shows you how you can both use the same workspace to collaborate on the same notebook. You can follow along in the session using the code in the GitHub repo, &lt;a href="https://aws-oss.beachgeek.co.uk/18i"&gt;emr-studio-samples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Q6NNDoLEUpo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;If you have an event you want me to publish here, please contact me and I will include it in this listing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lakehouse Automation w/ Redshift+Apache Airflow &amp;amp; New AWS ML services&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;January 17th, 9:00am PST&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;During this meetup, join hosts Chris Fregly and Antje Barth and speaker Gary Stafford, who do a presentation and brief demonstration, based on his recent video demonstration, AWS Lakehouse Automation: Loading and unloading data from Amazon Redshift using Apache Airflow, we will learn how to use Amazon Managed Workflows for Apache Airflow (Amazon MWAA) to programmatically load, unload, test, catalog, query, and monitor data using DevOps-like DataOps practices.&lt;/p&gt;

&lt;p&gt;Find out more about this and &lt;a href="https://www.meetup.com/data-science-on-aws/events/282788878/?_xtd=gqFyqTI2NzgyNDA2OaFwo2FwaQ&amp;amp;from=ref"&gt;register here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Startup Showcase Season&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;January 26th, 10:00am PDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Join AWS and theCUBE as eight innovative companies within the AWS Partner ecosystem highlight their latest developments in the open source community.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/194"&gt;Register via this link&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>Web Development Trends</title>
      <author>Krishlee</author>
      <pubDate>Mon, 17 Jan 2022 08:55:53 +0000</pubDate>
      <link>https://dev.to/itsmekrishlee/web-development-trends-321l</link>
      <guid>https://dev.to/itsmekrishlee/web-development-trends-321l</guid>
      <description>&lt;p&gt;12 Web Development Trends That Would Rule 2022:&lt;br&gt;
Web development is one of the technology sectors that has defined the road to ultimate success for every business during the last decade. The most important aspect of web development is its ever-changing capabilities, which enable you to establish solid connections with targeted customers.&lt;/p&gt;

&lt;p&gt;No matter how modern, well-built, and efficient your web App maybe, if you fail to update it with the present trends, you may lose your users. In other words, your business may fall behind its competitors who are offering better experiences. Take a look at our curated list of trends given by our skilled web Application development team.&lt;/p&gt;

&lt;p&gt;Progressive Web Apps (PWAs):-&lt;br&gt;
Progressive web apps (PWAs) are not a new thing in the field of web app development trends. It has the power to function offline. Hence, many companies used it in their applications, for instance, Google Maps. More such examples are companies like Starbucks, Uber, Pinterest, and Twitter. They use PWA to improve user experience. &lt;/p&gt;

&lt;p&gt;Another great advantage of using PWAs is you can extend your reach to smartphones and tablet users. As there are more than 5 billion mobile phone users today, this will be an added benefit for you.&lt;/p&gt;

&lt;p&gt;Dark Mode UI:-&lt;br&gt;
In recent times, low light and dark settings are becoming one of the most desirable trends in web development. The dark mode is loved by users as it comes incredibly handy when using an App during the day. Besides, it allows a visitor to adjust the display and make it dark at night. Due to this reason, many businesses are transitioning their applications to a dark or light mode UX. Apart from these, dark mode UI provides these advantages,&lt;/p&gt;

&lt;p&gt;Reduces blue-light and eye strain&lt;br&gt;
Saves battery life especially in devices that use an OLED or AMOLED screen&lt;br&gt;
Accessibility for people with visual impairments&lt;br&gt;
Single Page Application (SPA):-&lt;br&gt;
Single-page applications (SPAs) are nothing but JavaScript-based applications. They load an HTML page in a user’s browser and dynamically update content without requiring a page refresh. Java development professionals and many tech giants including Twitter, Facebook, and Google adopted SPAs.&lt;/p&gt;

&lt;p&gt;SPAs are cost-effective and take up less server space while providing users with information on a single page which makes it a valuable web application development trends among startups. Moreover, it offers better SEO optimization features, reusability, caching, and less complex implementation &amp;amp; debugging.&lt;/p&gt;

&lt;p&gt;Voice Search:-&lt;br&gt;
Since Google launched voice search in 2011, it gained widespread popularity. This functionality will be one of the widely spread web development trends in 2022. Alexa and Siri have already reached thousands of houses and will surely continue to grow rapidly. These voice-activated helpers automate our life’s little chores.&lt;/p&gt;

&lt;p&gt;New products such as Google Home and Apple HomePod are entering the market to meet consumer demand. If you need to incorporate this feature into your existing App, our skilled App development team can come to your rescue.&lt;/p&gt;

&lt;p&gt;Accelerated Mobile Pages (AMP):-&lt;br&gt;
Accelerated Mobile Pages (AMP) is a dynamic technology that can improve page functioning while also retaining consumers. We can say PWA and AMP are very similar. Although it is one of the newer trends in web applications development, AMP pages are loaded for about 2 seconds. On the flip side, non-AMP pages take up to 22 seconds.&lt;/p&gt;

&lt;p&gt;Accelerated_Mobile_Pages&lt;/p&gt;

&lt;p&gt;Despite the fact that we now have 5G internet technology and many firms choose to create native Apps to better user experience, the AMP plugin helps businesses save money on UX and reach their target audiences.&lt;/p&gt;

&lt;p&gt;AI-Powered Chatbots:-&lt;br&gt;
Chatbots help a business to maintain good customer relationships and enable to&lt;/p&gt;

&lt;p&gt;Increase Customer Engagement &lt;br&gt;
Reduce Customer Service Costs&lt;br&gt;
Monitor Consumer Data to Gain Insights&lt;br&gt;
Devise a Conversational Marketing Strategy&lt;br&gt;
Balance Automation with Human Touch&lt;br&gt;
Improve Lead Generation&lt;br&gt;
Meet Customer Expectations&lt;br&gt;
Achieve Scalability of Support&lt;br&gt;
AI Bot&lt;/p&gt;

&lt;p&gt;This technology is expected to be implemented in almost all web apps that interact with customers. Hence, we can’t exclude this from web app development trends to look out for in 2022. You can connect with our competent Python development team to incorporate this feature into your App effectively.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.softsuave.com/blog/web-application-development-trends/"&gt;https://www.softsuave.com/blog/web-application-development-trends/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>devops</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Data Structures and Algorithms in JavaScript</title>
      <author>Pieter van Zyl</author>
      <pubDate>Mon, 17 Jan 2022 08:55:00 +0000</pubDate>
      <link>https://dev.to/pietervanzyldev/data-structures-and-algorithms-in-javascript-1kd0</link>
      <guid>https://dev.to/pietervanzyldev/data-structures-and-algorithms-in-javascript-1kd0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-and-hello-"&gt;
  &lt;/a&gt;
  Welcome and Hello !
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#a-little-bit-about-me"&gt;
  &lt;/a&gt;
  A little bit About Me
&lt;/h4&gt;

&lt;p&gt;My name is Pieter van Zyl &lt;br&gt;
I'm a South African, &lt;strong&gt;Full-Stack Developer&lt;/strong&gt; working as a consultant. &lt;br&gt;
My team focuses on Full stack Machine Learning Solutions for clients. E.g. Forecasting Models, Integrated with a custom dashboard.&lt;/p&gt;

&lt;p&gt;In this Series I'll refresh my Data Structures and Algorithms Fundamentals (Day 1 - 5)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-structures"&gt;
  &lt;/a&gt;
  Data Structures
&lt;/h2&gt;

&lt;p&gt;Array&lt;br&gt;
Linked List&lt;br&gt;
Doubly Linked list &lt;br&gt;
Circular list&lt;br&gt;
Stack&lt;br&gt;
Queue&lt;br&gt;
Binary Tree&lt;br&gt;
Binary Search Tree&lt;br&gt;
Heap and Priority Queue&lt;br&gt;
Graphs&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#algorithms"&gt;
  &lt;/a&gt;
  Algorithms
&lt;/h2&gt;

&lt;p&gt;Binary Search&lt;br&gt;
Dynamic Programming&lt;br&gt;
Graph&lt;/p&gt;

&lt;p&gt;I'll edit this and add links as I create posts for each topic.&lt;br&gt;
You can expect to see posts on each topic and after the initial recap, I will also be doing leetcode/hackerrank/geekforgeek practice problems, to test my knowledge.&lt;/p&gt;

&lt;p&gt;I'll be live on Twitch and Youtube, throughout this period documenting my journey.&lt;/p&gt;

</description>
      <category>career</category>
      <category>algorithms</category>
      <category>computerscience</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Git Series - Part I</title>
      <author>Siddhi Bhanushali </author>
      <pubDate>Mon, 17 Jan 2022 08:54:30 +0000</pubDate>
      <link>https://dev.to/siddhi244/git-series-part-i-8pg</link>
      <guid>https://dev.to/siddhi244/git-series-part-i-8pg</guid>
      <description>&lt;p&gt;Learning git is always a plus point. It has many advantages ,some of them are as follows : &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can contribute to open source projects. &lt;/li&gt;
&lt;li&gt;You can collaborate with your friends to make a project. &lt;/li&gt;
&lt;li&gt;Contributing to open source will open new doors of opportunities for you. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this part , I will be covering how you can push your code to github from your local computer/laptop. So let's get started.&lt;br&gt;
You have to install git inorder to run these commands.  &lt;a href="https://git-scm.com/"&gt;Link to install Git&lt;/a&gt;&lt;br&gt;
After that you need to open a github account and make a empty repository over there so that you can push the code there.&lt;br&gt;
Now think of a buffet system. The first step is to clean the place and arrange the food on the tables. The same step is followed here , first we have to make it a git repository and then we can start pushing the code. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-initializing-a-git-repository"&gt;
  &lt;/a&gt;
  1. Initializing a git repository
&lt;/h2&gt;

&lt;p&gt;Now if you want to convert your local project/folder into a git repository, you have to first initialize it to a git repository.  The command for it is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-adding-the-code-to-staging-area"&gt;
  &lt;/a&gt;
  2. Adding the code to staging area.
&lt;/h2&gt;

&lt;p&gt;Consider the same example of buffet system . After arranging food we ask the people to form a line. So this is what we are doing here as well. We are asking our code to stay in the staging area. The command for this is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;.&lt;/code&gt; here represents that we are  adding all the files in staging area, you can explicitly mention the file name as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-check-the-status-of-your-files"&gt;
  &lt;/a&gt;
  3. Check the status of your files
&lt;/h2&gt;

&lt;p&gt;If we consider the example of buffet system again , so before taking the food we check the status, if it's available yet or not. So sometimes we need to check the status of our files , if they are all  in staging area or not. The command for the same is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-permanently-save-your-changes"&gt;
  &lt;/a&gt;
  4. Permanently save your changes
&lt;/h2&gt;

&lt;p&gt;Now if you consider the buffet example, it's time to add food to our plates. So in this step we are saving the files permanently to our git history. This is called commiting the code.  The command for the same is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "initial commit"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;-m&lt;/code&gt; means the commit message . You always have to specify a commit message while committing the code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-specify-the-destination-where-you-have-to-push-the-code"&gt;
  &lt;/a&gt;
  5. Specify the destination where you have to push the code.
&lt;/h2&gt;

&lt;p&gt;If you consider the buffet example, if you don't know which food is served where then how will you eat the food, you need to know the destination.  Same happens with our code, if you want to push code ,you need to specify where? The command for the same is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add origin &amp;lt;url of the repository on github&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;origin&lt;/code&gt; is just a name for the destination url.&lt;br&gt;
So here we are specifying the destination.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#6-its-time-to-push-the-code"&gt;
  &lt;/a&gt;
  6. It's time to push the code
&lt;/h2&gt;

&lt;p&gt;Now it's time to eat our food . Yeah🎊🎊. Finally we reached to our last step wherein we will be pushing our code to the destination. The command for the same is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are pushing the code to origin which is our destination and we are pushing it on master branch. I will be talking more about branches in the next part of the series. &lt;/p&gt;

&lt;p&gt;So, these were the steps to follow so that you can make a new repository and push the code from your local computer.  On the next parts of the series we will be talking about branches, issues, pull requests and how to contribute to an existing project. Your feedbacks are much appreciated.  &lt;/p&gt;

&lt;p&gt;You can connect with me &lt;a href="https://siddhi-244.github.io/LinkTree-Clone/"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>opensource</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Memoizing with React.useMemo </title>
      <author>The Nerdy Dev</author>
      <pubDate>Mon, 17 Jan 2022 08:39:57 +0000</pubDate>
      <link>https://dev.to/thenerdydev/memoizing-with-reactusememo-2m63</link>
      <guid>https://dev.to/thenerdydev/memoizing-with-reactusememo-2m63</guid>
      <description>&lt;p&gt;Hey everyone 👋🏻,&lt;/p&gt;

&lt;p&gt;In this article, let us learn about a very special React Hook called as the &lt;strong&gt;useMemo&lt;/strong&gt; hook and understand how and when to use it. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was first published on &lt;a href="https://the-nerdy-dev.com/memoizing-with-react-usememo/"&gt;https://the-nerdy-dev.com&lt;/a&gt;.&lt;br&gt;
Check the website for more interesting articles and tutorials on Web Development.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-the-raw-usememo-endraw-hook-"&gt;
  &lt;/a&gt;
  What is the &lt;code&gt;useMemo&lt;/code&gt; hook ?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useMemo&lt;/code&gt; is a React Hook that was introduced to memoize expensive computations. Let us understand some basics about this. In order to understand the &lt;code&gt;useMemo&lt;/code&gt; hook, let us understand its syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;memoResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So what happens with &lt;code&gt;useMemo&lt;/code&gt; is that when the component renders for the first time, the &lt;code&gt;useMemo&lt;/code&gt; hook invokes the &lt;code&gt;someFunction&lt;/code&gt; (it could be any function, I am just calling it as &lt;code&gt;someFunction&lt;/code&gt;) and memoizes the value that it computes for us and then it returns the result back to the component. Now the interesting thing here is that if during the subsequent renders, the list of dependencies that we specify do NOT change, then in that case &lt;code&gt;useMemo&lt;/code&gt; will not invoke the &lt;code&gt;someFunction&lt;/code&gt; but instead it will return the memoized value. Contrary to this, if the list of dependencies experience a change during subsequent renders, then &lt;code&gt;useMemo&lt;/code&gt; will invoke the &lt;code&gt;someFunction&lt;/code&gt;, memoize the result that it gets as a result of computation and then return it back to the component. So in essence, this is what happens in the &lt;code&gt;useMemo&lt;/code&gt; hook. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#now-let-us-see-a-simple-example-"&gt;
  &lt;/a&gt;
  Now let us see a simple example :
&lt;/h2&gt;

&lt;p&gt;Let us say we have a component that deals with computation of factorial of a number, let's call the component as &lt;code&gt;FactorialResult&lt;/code&gt;. Now what this component does is that it computes the factorial of a number that is supplied into the input field by the user.  Let us see the basic code for same :&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;computeFactorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;computeFactorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FactorialResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setNum&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computeFactorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
         &lt;span class="nx"&gt;setNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; 
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Factorial&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; 
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
       &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
       &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now every time, you change the input value, the factorial is re-calculated as a result of re-render. &lt;br&gt;
Now how can we memoize this factorial calculation which itself is an expensive operation ? We want to memoize the factorial computation when the component re-renders. So for this we can make use of the &lt;code&gt;useMemo&lt;/code&gt; hook. Let us make small changes in our code and memoize this factorial calculation. So here is the new code for the same component :&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;computeFactorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;computeFactorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FactorialResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setNum&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;computeFactorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;},[&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; 

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
         &lt;span class="nx"&gt;setNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; 
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Factorial&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; 
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
       &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
       &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now every time you change the value of the &lt;code&gt;num&lt;/code&gt;, the &lt;code&gt;computeFactorial&lt;/code&gt; will get invoked but only if the &lt;code&gt;num&lt;/code&gt; has changed. If &lt;code&gt;num&lt;/code&gt; does not change on the re-render, then it will return the memoized result for its factorial and will not make that extra &lt;code&gt;computeFactorial&lt;/code&gt; call. I hope that makes perfect sense. &lt;/p&gt;

&lt;p&gt;Let's see one more example to make the &lt;code&gt;useMemo&lt;/code&gt; hook extremely clear. &lt;/p&gt;

&lt;p&gt;Let us say we want to return the full name of a person, so for this let us say we have a function in some component that gives us the full name:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;
&lt;span class="p"&gt;},[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In above code, if the &lt;code&gt;firstName&lt;/code&gt; or &lt;code&gt;lastName&lt;/code&gt; change, then our &lt;code&gt;fullName&lt;/code&gt; function will get re-invoked because we have specified &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; as dependencies. Please note : functions themselves usually don't need to be re-computed, and their dependencies are mostly closure values that may change.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now for above piece of code when &lt;code&gt;firstName&lt;/code&gt; or &lt;code&gt;lastName&lt;/code&gt; change, we don't need a separate instance of the function on each re-render of the component, but we need exact the one and same instance of the function so that it has up to date values in the closure. &lt;/p&gt;

&lt;p&gt;If you want to learn about the &lt;code&gt;useCallback&lt;/code&gt; hook, I do have an article on same : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/when-to-use-the-usecallback-hook--50f7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;When to use the useCallback hook ? &lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Jan 15 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;So this is it for this article. Thanks for reading. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you enjoy my articles, consider following me on Twitter for more interesting stuff :&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" alt="Image description" width="284" height="255"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;⚡Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 '21 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Looking to learn React.js with one Full &lt;strong&gt;Project&lt;/strong&gt;, check this out : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn React with one BIG Project [NOTES included] - Demo and Video Link&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Jun 10 '21 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
