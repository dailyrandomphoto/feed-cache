<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Todo List App and a Color Box Maker | Day 13 &amp; 14</title>
      <author>Web.Developer.io</author>
      <pubDate>Tue, 18 Jan 2022 19:45:25 +0000</pubDate>
      <link>https://dev.to/developerioweb/todo-list-app-and-a-color-box-maker-day-13-14-551g</link>
      <guid>https://dev.to/developerioweb/todo-list-app-and-a-color-box-maker-day-13-14-551g</guid>
      <description>&lt;h3&gt;
  &lt;a href="#i-have-made-2-react-app"&gt;
  &lt;/a&gt;
  I have made 2 React App
&lt;/h3&gt;

&lt;p&gt;1) &lt;strong&gt;Todo List&lt;/strong&gt;&lt;br&gt;
2) &lt;strong&gt;Color Box Maker&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-do-list"&gt;
  &lt;/a&gt;
  To Do List
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A7aPbyNG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ys7gdyc22psv4l1u5xp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A7aPbyNG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ys7gdyc22psv4l1u5xp.png" alt="To Do list" width="880" height="525"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;App - this component should render the TodoList component&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TodoList - this component should render the NewTodoForm component and should render the list of Todo components. Place your state that contains all of the todos in this component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NewTodoForm - this component should render a form with one text input for the task to be created. When this form is submitted, a new Todo component should be created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Todo- this component should display a div with the task of the todo.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#for-each-todo-component-there-should-also-be-a-button-with-the-text-x-that-when-clicked-removes-the-todo"&gt;
  &lt;/a&gt;
  For each Todo component, there should also be a button with the text “X” that when clicked, removes the todo.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#each-todo-component-should-also-display-a-button-with-the-text-edit-that-when-clicked-displays-a-form-with-the-task-of-the-todo-as-an-input-and-a-button-to-submit-the-form-when-the-form-is-submitted-the-task-of-the-text-should-be-updated-and-the-form-should-be-hidden"&gt;
  &lt;/a&gt;
  Each Todo component should also display a button with the text “edit” that when clicked, displays a form with the task of the todo as an input and a button to submit the form. When the form is submitted, the task of the text should be updated and the form should be hidden.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/Developer-io-web/Todo-list"&gt;https://github.com/Developer-io-web/Todo-list&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#colorbox-maker"&gt;
  &lt;/a&gt;
  Color-Box Maker
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/Developer-io-web/Color-Box-Maker"&gt;https://github.com/Developer-io-web/Color-Box-Maker&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;App - this component should render the BoxList component.&lt;/li&gt;
&lt;li&gt;BoxList - Place your state that contains all of the boxes here. This component should render all of the Box components along with the NewBoxForm component&lt;/li&gt;
&lt;li&gt;Box- this component should display a div with a background color, width and height based on the props passed to it.
NewBoxForm - this component should render a form that when submitted, creates a new Box. You should be able to specify the Box’s width, height, and background color. When the form is submitted, clear the input values.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-each-box-component-is-displayed-add-a-button-with-the-text-of-of-x-next-to-each-box-when-this-button-is-clicked-remove-that-specific-box-this-will-require-you-to-pass-a-function-down-as-props-the-button-should-not-be-a-seperate-component-it-should-be-included-in-the-box-component"&gt;
  &lt;/a&gt;
  When each Box component is displayed, add a button with the text of of “X” next to each Box. When this button is clicked, remove that specific box. This will require you to pass a function down as props - the button should not be a seperate component, it should be included in the Box component.
&lt;/h3&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>What is the Jamstack in 2022?</title>
      <author>Brian Rinaldi</author>
      <pubDate>Tue, 18 Jan 2022 19:26:14 +0000</pubDate>
      <link>https://dev.to/remotesynth/what-is-the-jamstack-in-2022-134</link>
      <guid>https://dev.to/remotesynth/what-is-the-jamstack-in-2022-134</guid>
      <description>&lt;p&gt;2021 was a year of big changes in the Jamstack. &lt;a href="https://remotesynthesis.com/blog/jamstack-in-2021"&gt;A year ago&lt;/a&gt;, we were struggling a bit with how to define Jamstack in a world that included the ability to use SSR in a Jamstack application. At the time, this was unique to Next.js, but today you'll find this supported in Nuxt.js 3, Gatsby 4 and even Eleventy via the Eleventy Serverless plugin. Not just that, but we've now added in multiple other kinds of rendering such that I wrote an extensive article clarifying the &lt;a href="https://bejamas.io/blog/understanding-rendering-in-the-jamstack/"&gt;various types of Jamstack rendering&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2021 also included the release of some new tools that gained a great deal of popularity very quickly and introduced a new concept, the &lt;a href="https://jasonformat.com/islands-architecture/"&gt;islands architecture&lt;/a&gt;, to the Jamstack. Both &lt;a href="https://astro.build/"&gt;Astro&lt;/a&gt;, a completely new SSG, and &lt;a href="https://slinkity.dev/"&gt;Slinkity&lt;/a&gt;, which is built on top of Eleventy, offered the ability to use frameworks like React, but limit JavaScript to only where it is needed.&lt;/p&gt;

&lt;p&gt;So, suffice it to say, Jamstack got more popular but it also arguably got more complicated. We probably came no closer to clarity on what the Jamstack is in 2021. And this has led to some thoughts on how I see Jamstack in 2022.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you're into Jamstack, which I'm guessing you are because you are reading this, you'll definitely want to join me (virtually) at &lt;a href="https://thejam.dev"&gt;TheJam.dev&lt;/a&gt; on January 26-27. It's 2 days of amazing speakers all about Jamstack and it's completely FREE!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whered-the-simple-go"&gt;
  &lt;/a&gt;
  Where'd the Simple Go?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;For any technology, the hardest part is not establishing simplicity, but protecting it over time.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Matt Biilmann, CEO of Netlify&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;I got into Jamstack development – well really static site development – because it felt like a return to simpler days of developing for the web. Sure, SSGs couldn't handle every kind of site, but that was ok because they handled a lot of types of sites. Plus, they were fun and easy to use for many developers in a way that Wordpress or its alternatives were not.&lt;/p&gt;

&lt;p&gt;Over time, we added more complexity because we liked building with Jamstack and wanted it to be able to build more sites with it – sites that pure static couldn't handle. In one sense, that's been great. Only a few years ago, it was easy to think of types of sites that couldn't be built with Jamstack. That's no longer true.&lt;/p&gt;

&lt;p&gt;But it also has come with some tradeoffs. Getting started with Jamstack was never incredibly easy given that it isn't prescriptive and there are so many options, but once you got past that, the experience used to be much simpler in my opinion. Today, I feel that the learning curve is becoming much steeper. Plus, the result isn't always better than the alternative, with large JavaScript bundles weighing down the apps performance.&lt;/p&gt;

&lt;p&gt;This has led to "competition" (so to speak) appealing to developers on territory that Jamstack used to own. Frameworks like Remix or concepts like &lt;a href="https://cfe.dev/sessions/moar2021-functional-web-apps/"&gt;functional web apps&lt;/a&gt; often specifically target Jamstack for its growing complexity. "Why fight with rendering options and long builds when pure SSR using serverless is easier to build and offers similar performance?" they argue. Plus, we can run on platforms like Netlify and Vercel just the same.&lt;/p&gt;

&lt;p&gt;While it's difficult to admit for someone like me who has been a Jamstack advocate, but I think they have a point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2022-is-about-rediscovering-the-simple"&gt;
  &lt;/a&gt;
  2022 is About Rediscovering the Simple
&lt;/h2&gt;


&lt;blockquote&gt;
&lt;p&gt;One of the quirks of growing older as a developer in my experience is that, while I've learned to appreciate complexity in people a lot more, I've also learned to appreciate complexity in code a lot less.&lt;/p&gt;— Brian Rinaldi (&lt;a class="mentioned-user" href="https://dev.to/remotesynth"&gt;@remotesynth&lt;/a&gt;) &lt;a href="https://twitter.com/remotesynth/status/1482032277005742080?ref_src=twsrc%5Etfw"&gt;January 14, 2022&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;I feel like, if the concept of Jamstack is to continue to be valuable in 2022 as differentiated from just plain web development, it needs to rediscover what made it appealing – it needs to bring back the simplicity. The good news is that I do not believe that means going back to plain old static sites using traditional SSGs.&lt;/p&gt;

&lt;p&gt;This is my list of requirements that I think a modern SSG needs to have:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A way to call APIs for data at build time.&lt;/li&gt;
&lt;li&gt;The ability to modularize my code, whether that be components or partials.&lt;/li&gt;
&lt;li&gt;Some tools to make building frontend interactivity easier.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To me, everything else is a bit superfluous and adds complexity. Is the ability to build and deploy an edge function within my sites application code cool? Heck, yes. Is it a necessary feature in a Jamstack site builder? No.&lt;/p&gt;

&lt;p&gt;It's worth remembering what all this added rendering complexity is actually doing for us and that's just handling the compiling and deployment of our application API. SSR in a Jamstack framework is just deploying parts of your code to serverless functions for you. I could actually already accomplish this to a large degree without the framework depending on the platform that I am deploying my application to. For instance, both Netlify and Cloudflare (and I am sure others) will deploy serverless functions for your API for you automatically if they are placed in a specific folder.&lt;/p&gt;

&lt;p&gt;I think we're already seeing some movement in this direction. For example, both Astro and 11ty seem to be geared towards specifically accomplishing the core requirements without the extras (I'm curious if Astro sticks to that given &lt;a href="https://astro.build/blog/the-astro-technology-company/"&gt;recent announcements&lt;/a&gt; or moves more in the direction of Next.js). The growing popularity of both tools seems to indicate to me that this has some value and resonance.&lt;/p&gt;

&lt;p&gt;But both tools also emphasize something that can make Jamstack &lt;em&gt;better&lt;/em&gt; than other methods in the way we always claimed it was better but &lt;a href="https://almanac.httparchive.org/en/2021/jamstack#performance-score"&gt;didn't always live up to&lt;/a&gt;. That's because both aim to deliver less JavaScript, meaning that the site they deliver should perform better than a framework-heavy alternative both because most of the content is prerendered and because they don't inlude all the extra baggage of a JavaScript framework whenever it isn't necessary. I'm hopeful that it is a path other tools pursue as well.&lt;/p&gt;

&lt;p&gt;The original goal of Jamstack was to deliver a better experience to end users (faster and more secure) while offering a better experience to developers (easy to build and maintain). Go &lt;a href="http://web.archive.org/web/20160603092304/http://jamstack.org/"&gt;check out the original manifesto&lt;/a&gt;. Tons of new (and undeniably cool) advances in cloud computing and application development have seemingly led us down a path towards ever increasing complexity.&lt;/p&gt;

&lt;p&gt;All of this complexity added value but complexity also came at a cost. I'm not advocating removing features, and, to be honest, I am still thinking through how this problem can be solved. But I think it can start refocusing on the core tenets of what Jamstack means – it doesn't have to be the solution to every problem but instead a solution that solve a set of particular problems, better. Maybe Jamstack needs to be more opinionated about the experience of building a Jamstack site and about the result. In my view, 2022 could be about rediscovering the simplicity of Jamstack's developer experience and the differentiation of its output or Jamstack could simply blend into web development, not really offering a clear alternative to non-Jamstack options. I personally think the concept still has a ton of value.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>ES6: JavaScript for...of statement</title>
      <author>Naftali Murgor</author>
      <pubDate>Tue, 18 Jan 2022 19:24:39 +0000</pubDate>
      <link>https://dev.to/naftalimurgor/es6-javascript-forof-statement-2caa</link>
      <guid>https://dev.to/naftalimurgor/es6-javascript-forof-statement-2caa</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This tutorial will learn about &lt;code&gt;for-of&lt;/code&gt; introduced in  &lt;code&gt;ES6&lt;/code&gt; version of JavaScript.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;for...of&lt;/code&gt; statement is used for iterating over arrays, maps or sets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#looping-over-an-array"&gt;
  &lt;/a&gt;
  Looping over an array
&lt;/h2&gt;

&lt;p&gt;Example in code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lemon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// looping through&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something with fruit&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#looping-over-a-string"&gt;
  &lt;/a&gt;
  Looping over a string
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;for...of&lt;/code&gt; can also be used to loop over contents of a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Happy new year!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// H a p p y n e w y e a r !&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#looping-over-a-set"&gt;
  &lt;/a&gt;
  Looping over a Set
&lt;/h2&gt;

&lt;p&gt;A set is a collection of unique values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;letter&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;letters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// a, b, c&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#looping-over-a-map"&gt;
  &lt;/a&gt;
  Looping over a map
&lt;/h2&gt;

&lt;p&gt;A map is key-value pair, where key can be of any type. In JavaScript it's common to use object literals as maps&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Michael Myers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;age&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// made up&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;// or a cleaner way:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Michael Myers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;for...of&lt;/code&gt; introduces a cleaner way of looping over arrays, sets, strings and maps.&lt;/p&gt;




&lt;p&gt;Read more about 👉 &lt;a href="https://dev.toe"&gt;Map objects&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>node</category>
    </item>
    <item>
      <title>7 tips for freelance software developers</title>
      <author>Naftali Murgor</author>
      <pubDate>Tue, 18 Jan 2022 18:42:54 +0000</pubDate>
      <link>https://dev.to/naftalimurgor/7-tips-for-freelance-software-developers-4ol3</link>
      <guid>https://dev.to/naftalimurgor/7-tips-for-freelance-software-developers-4ol3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"What happens to us and what we do are as a result of a series of complex interconnected events that happened in our lives in the past." ~ anonymous&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Freelancing is fun. You don’t have a boss, you can take breaks if you need. You can go for a hike in the middle of a hot Tuesday evening.&lt;/p&gt;

&lt;p&gt;I started as a freelance web developer in late 2018 and here are things I'd consider.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-proper-pricing-model"&gt;
  &lt;/a&gt;
  1. Proper pricing model
&lt;/h3&gt;

&lt;p&gt;As a freelance developer, you get to decide how much your service/product costs depending on your set pricing model.&lt;br&gt;
I started out freelancing on Upwork, then the Fiverr platform before finally looking for clients locally.&lt;/p&gt;

&lt;p&gt;There’s is a common myth that while starting you could do work for free to get testimonials. I’d say approaching a potential client with an offer to do/sell a service for free raises eyebrows.&lt;br&gt;
Offering something at a cheaper rate is worse in the long run.&lt;/p&gt;

&lt;p&gt;My biggest mistake was the poor pricing of services. It hits you when you do more work for less pay and kills so much morale.&lt;/p&gt;

&lt;p&gt;Develop a good pricing model. Have you ever thought and wondered: “One common characteristic of poor quality commodities, electronics, computers is that they are very cheap.” Cheap implies poor quality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-treating-freelancing-as-a-9-5-job"&gt;
  &lt;/a&gt;
  3. Treating freelancing as a 9 - 5 job
&lt;/h3&gt;

&lt;p&gt;I’ve worked a 9 - 5 job as Math/Computer teacher before pursuing web development and I’d say treating freelancing like a 9 - 5 job may be great but it leads to a “need-to-be-always-productive” mood.&lt;/p&gt;

&lt;p&gt;Breaks are good, short meaningful breaks are rewarding in the long run.&lt;br&gt;
It’s okay to be “unproductive” sometimes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-learning-to-say-yes"&gt;
  &lt;/a&gt;
  4. Learning to say “yes”
&lt;/h3&gt;

&lt;p&gt;Most developers striking out freelancers I think often get trapped in situations where they are to choose between saying “no” and end up saying “yes”.&lt;/p&gt;

&lt;p&gt;Here’s what happened to me in 2019: I received an offer to work on a website and the offer went like this:&lt;/p&gt;

&lt;p&gt;Client: Hey, we are launching our campaign this Saturday. I already bought a template to make the work easy for you. It should be ready in 72 hours or less as we have a tight deadline and the donation website should be live during the launch.&lt;/p&gt;

&lt;p&gt;My initial thought was to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Accept the work and find another freelancer to do it.&lt;/li&gt;
&lt;li&gt;Politely decline due to tight deadline&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can guess what I did. (Read below)&lt;/p&gt;

&lt;p&gt;Learn to say “yes” and do what you have to do and “No” when you can’t help your client. Doing so reduces the time and money wasted for both you and your client.&lt;/p&gt;

&lt;p&gt;I took on the project and 6 hours later after analyzing the project I received another technical description for the project. Part of the description: “We shall be launching….Preferred technology: ASP.NET and MS Server” I haven't done any .NET my entire life, oh God.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-taking-regular-breaks"&gt;
  &lt;/a&gt;
  5. Taking regular breaks
&lt;/h3&gt;

&lt;p&gt;There’s always an innate desire to be productive 24 x 7. Taking breaks rejuvenates the body and the brain too. Take a week off, hours, or days whichever suits your schedule.&lt;/p&gt;

&lt;p&gt;Working long hours does not imply more work gets done.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-time-management"&gt;
  &lt;/a&gt;
  6. Time management
&lt;/h3&gt;

&lt;p&gt;Managing time should be crucial. Meet deadlines whenever possible. I’d spend a lot of time on trivial things that drained energy so when the time to do the actual work came, I was already exhausted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-enough-sleep"&gt;
  &lt;/a&gt;
  7. Enough sleep
&lt;/h3&gt;

&lt;p&gt;Enough sleep is good. staying up until 3.00 am makes one feel productive but have you ever gone back to what you worked on up to 3.00 am 3 years ago or in the past. It’s terrible even though it sort of worked out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-proper-diet"&gt;
  &lt;/a&gt;
  8 . Proper Diet
&lt;/h3&gt;

&lt;p&gt;Skipping breakfast to get to work on a project might seem “efficient” but try resisting the urge and see how productive you can be after taking a “solid” breakfast. The same applies to other meals.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-exercise"&gt;
  &lt;/a&gt;
  9. Exercise
&lt;/h3&gt;

&lt;p&gt;Take walks, hit the gym do other work that kicks up blood flow in the body. Exercise is crucial and good for our health.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-managing-finances"&gt;
  &lt;/a&gt;
  10. Managing finances.
&lt;/h3&gt;

&lt;p&gt;This portion is not about financial advice but here’s my one-liner about managing finances: “Money is a scarce resource we can’t afford to waste.” I’d make money and the rest was spend, spend, spend.&lt;/p&gt;

&lt;p&gt;Organize your finances, grocery money, etc. Keep some for medical emergencies and save up for a rainy day.&lt;/p&gt;




&lt;p&gt;Freelancing is essentially living within your means, resilience, and modesty.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Learnig and Revising Js , Day 1</title>
      <author>PUSHAN VERMA </author>
      <pubDate>Tue, 18 Jan 2022 18:29:25 +0000</pubDate>
      <link>https://dev.to/pushanverma/learnig-and-revising-js-day-1-22kc</link>
      <guid>https://dev.to/pushanverma/learnig-and-revising-js-day-1-22kc</guid>
      <description>&lt;p&gt;Hi guys , just sharing what i have learnt , may be you will find all these informative, &lt;/p&gt;

&lt;p&gt;These are some basic concepts of javascript , I will be sharing everything that i'll be doing here , Like if you like the content , See a have a good day !!&lt;/p&gt;

&lt;p&gt;//👉 Objects is known to as "hashmap in java" and in "python it is called as dictionary"&lt;/p&gt;

&lt;p&gt;// object is a group of key , value pair&lt;/p&gt;

&lt;p&gt;//key: value --&amp;gt; propert&lt;br&gt;
//key: function --&amp;gt; method&lt;/p&gt;

&lt;p&gt;// key can be string/integr and same ways value also&lt;/p&gt;

&lt;p&gt;let cap={&lt;br&gt;
    name:"Steve",&lt;br&gt;
    lastName:"Rogers",&lt;br&gt;
    address:{&lt;br&gt;
        city:"Manhattan",&lt;br&gt;
        state:"New York"&lt;br&gt;
    },&lt;br&gt;
    age:35,&lt;br&gt;
    isAvenger:true,&lt;br&gt;
    movies:["First Avenger","Winter Soldier","Civil War"],&lt;br&gt;
    sayHi: function() &lt;br&gt;
    {&lt;br&gt;
    console.log("Cap says HI ");&lt;br&gt;
    }&lt;br&gt;
};&lt;br&gt;
//📌get (getting keys)&lt;br&gt;
// console.log(cap.name);&lt;br&gt;
// console.log(cap.age);&lt;br&gt;
// console.log(cap.movies[1]);&lt;br&gt;
// cap.sayHi();&lt;/p&gt;

&lt;p&gt;//📌set /update &lt;br&gt;
// console.log("cap",cap);&lt;br&gt;
// cap.age =36;&lt;br&gt;
// cap.isAvenger=false;&lt;br&gt;
// cap.friends=["Tony","Bruce","Peter"];&lt;br&gt;
// console.log("---------------------------------------");&lt;/p&gt;

&lt;p&gt;//📌delete&lt;br&gt;
// delete cap.address;&lt;br&gt;
// console.log("cap",cap);&lt;/p&gt;

&lt;p&gt;//👉diffrence between .(dot) &amp;amp; &lt;a href="https://dev.tosquare%20bracket"&gt;&lt;/a&gt;  --&amp;gt;(cap.age and cap[propkey] ,where propkey="age")&lt;br&gt;
// (cap.age gives values direcet , but cap[propkey] gives values through varibale )&lt;br&gt;
let propkey="age"&lt;br&gt;
console.log(cap[propkey]);&lt;br&gt;
console.log(cap["age"]);&lt;/p&gt;

&lt;p&gt;//📌for in loop&lt;br&gt;
for(let key in cap)&lt;br&gt;
{&lt;br&gt;
    console.log(key," : ",cap[key]);&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;//👉 it basically internally makes its as cap["name"],cap["lastname"],cap["address"] everytime and gives the answer,&lt;br&gt;
// its just the other way of writing ,nothing else&lt;/p&gt;

&lt;p&gt;// 📌if we want to print a key , i.e not present in object , then we get undefined  for that &lt;/p&gt;

&lt;p&gt;console.log(cap.xyz);&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Get a clean git history with a rebase workflow</title>
      <author>Simon</author>
      <pubDate>Tue, 18 Jan 2022 18:27:06 +0000</pubDate>
      <link>https://dev.to/simondosda/get-a-clean-git-history-with-a-rebase-workflow-4pnd</link>
      <guid>https://dev.to/simondosda/get-a-clean-git-history-with-a-rebase-workflow-4pnd</guid>
      <description>&lt;p&gt;When I started using git, I had little concern about my commit history. &lt;br&gt;
I only used git as a backup tool for my work without trying to have consistent and readable commits.&lt;/p&gt;

&lt;p&gt;That's a common pitfall with git. I have often worked in teams where we would integrate all our commit iterations into our main branch, with commit messages as descriptive as &lt;code&gt;wip&lt;/code&gt;, ending with a &lt;strong&gt;hardly useful history&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Doing so strongly limits the benefits of using git. &lt;br&gt;
When we choose to enforce having a clean, readable history, composed of well-defined atomic commits on a single linear branch, the advantages of doing so greatly overcome the little extra time we spend to ensure everything we integrate to our main branch is clean:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we can now &lt;strong&gt;easily read the history&lt;/strong&gt; and understand what changes were made&lt;/li&gt;
&lt;li&gt;if there are some changes we don't understand, we can read all the &lt;strong&gt;relevant associated changes in the same commit&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;if we have a problem with a deployment, we can &lt;strong&gt;easily revert the last commit&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, I will introduce the main rules to maintain a clean git history and show you how I personally apply them in my day-to-day development.&lt;/p&gt;

&lt;p&gt;There is no right way to use git, so don't take anything as an absolute truth but rather as an inspiration to create your own workflow.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#rules-for-a-clean-history"&gt;
  &lt;/a&gt;
  Rules for a clean history
&lt;/h2&gt;

&lt;p&gt;There are only three rules to enforce a clean git history:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a commit should be atomic: it should contain &lt;strong&gt;all and only&lt;/strong&gt; the changes required for a feature or a fix&lt;/li&gt;
&lt;li&gt;a commit should have a &lt;strong&gt;clear, descriptive message&lt;/strong&gt;. I also use &lt;a href="https://www.conventionalcommits.org"&gt;conventional commits&lt;/a&gt; format, which can be helpful when working on a versioned project&lt;/li&gt;
&lt;li&gt;a commit should be directly integrated to long-running branches, using the &lt;code&gt;rebase&lt;/code&gt; functionality of git, to &lt;strong&gt;avoid merge commits&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This last one can seem surprising, as it is easy to use git without even knowing the &lt;code&gt;rebase&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;What &lt;code&gt;rebase&lt;/code&gt; does is that it "moves" your commits on top of the branch you are rebasing on.&lt;/p&gt;

&lt;p&gt;The main drawback of using &lt;code&gt;rebase&lt;/code&gt; is that it rewrites your branch history. Therefore it won't be consistent with your remote repository, and you will need to force push on it.&lt;/p&gt;

&lt;p&gt;But it will allow you to have a linear commit history, whereas the &lt;code&gt;merge&lt;/code&gt; command will create a new commit for each merge with the changes from the merged branch, resulting in a less readable history.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vXrd5YEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vci71gklxc0m78u0bg2y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vXrd5YEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vci71gklxc0m78u0bg2y.png" alt="git merge vs git rebase" width="880" height="551"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This workflow works well, no matter if you are &lt;strong&gt;alone on a personal project or working in a big team&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But if you can always deal with your mess alone, these rules will be helpful if they are enforced in a team.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#before-we-start-a-word-on-git-aliases"&gt;
  &lt;/a&gt;
  Before we start, a word on git aliases
&lt;/h2&gt;

&lt;p&gt;I use several times a day the commands shown in this article. &lt;br&gt;
To be more efficient, I have set up aliases for most of them. &lt;br&gt;
In the below examples, I will use the full command and show you as a comment the version using my aliases.&lt;/p&gt;

&lt;p&gt;If you want to know more about them, you can go to my article explaining my &lt;a href="https://simondosda.github.io/posts/2021-04-13-git-aliases.html"&gt;git aliases for an efficient workflow&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#starting-a-new-development"&gt;
  &lt;/a&gt;
  Starting a new development
&lt;/h2&gt;

&lt;p&gt;I usually start by creating a new branch from the latest main branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout main  &lt;span class="c"&gt;# git co main&lt;/span&gt;
git pull
git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; my-branch  &lt;span class="c"&gt;# git nb my-branch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NB: there are two main ways to create a new branch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git branch my-branch&lt;/code&gt; will create a new branch but stay on the current one, which is useful when you want to save your current branch before altering it&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git checkout -b my-branch&lt;/code&gt; is a checkout command with the &lt;code&gt;-b&lt;/code&gt; option that will create the new branch before checking out on it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, we just created a new branch similar to the main one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I5IcFJq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4n1ofuf0507vey4ts31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I5IcFJq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4n1ofuf0507vey4ts31.png" alt="git workflow create branch" width="870" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-on-the-issue"&gt;
  &lt;/a&gt;
  Working on the issue
&lt;/h2&gt;

&lt;p&gt;I then start working and will usually create several commits, depending on the complexity of the development. This allows going back if I take a wrong direction, or change my mind at one point. I still usually try to break things into commits that make sense.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;--all&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s1"&gt;'feat: step 1'&lt;/span&gt;  &lt;span class="c"&gt;# git c 'feat: step 1'&lt;/span&gt;
git git push &lt;span class="nt"&gt;--set-upstream&lt;/span&gt; origin/my-branch  &lt;span class="c"&gt;# git p&lt;/span&gt;
...
git commit &lt;span class="nt"&gt;--all&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s1"&gt;'feat: stept 7'&lt;/span&gt;  &lt;span class="c"&gt;# git c 'feat: stept 7'&lt;/span&gt;
git push  &lt;span class="c"&gt;# git p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Cn92cYz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/og7gqh52syz6hyscm3d2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Cn92cYz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/og7gqh52syz6hyscm3d2.png" alt="git workflow create commits" width="870" height="643"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But at the end of the feature development, I will rewrite my history to have only one clean commit; or several if it is more appropriate (for instance, if I also fixed something while working on a feature).&lt;/p&gt;

&lt;p&gt;To do so, I usually use an interactive &lt;code&gt;rebase&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git rebase &lt;span class="nt"&gt;-i&lt;/span&gt; HEAD~7  &lt;span class="c"&gt;# git ri 7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The way interactive &lt;code&gt;rebase&lt;/code&gt; works is that it displays the list of commits, with the action you can do on it. &lt;br&gt;
The main ones I use are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;pick&lt;/code&gt; or &lt;code&gt;p&lt;/code&gt;: the default, keep the commit as it is&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;reword&lt;/code&gt; or &lt;code&gt;r&lt;/code&gt;: allows you to rewrite the commit message in a next step&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;squash&lt;/code&gt; or &lt;code&gt;s&lt;/code&gt;: integrate the commit with the previous one, you will be asked to edit the message&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fixup&lt;/code&gt; or &lt;code&gt;f&lt;/code&gt;: integrate the commit with the previous one while keeping its message&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;drop&lt;/code&gt; or &lt;code&gt;d&lt;/code&gt;: remove the commit. You can also get the same result by removing the entire line&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--keJVk5Yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2ud5upje6n6aarav98b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--keJVk5Yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2ud5upje6n6aarav98b.png" alt="git workflow squash" width="870" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the history has been rewritten, I need to force push to the remote repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push &lt;span class="nt"&gt;--force&lt;/span&gt;  &lt;span class="c"&gt;# git fp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rebasing-your-branch"&gt;
  &lt;/a&gt;
  Rebasing your branch
&lt;/h2&gt;

&lt;p&gt;Before pushing my changes for a review, I will usually rebase on the main branch so that my branch is up to date.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git fetch &amp;amp; git rebase origin/main  &lt;span class="c"&gt;# git rom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is needed only if new changes were integrated into the main branch. &lt;br&gt;
If any conflicts were created, this is when you will be asked to solve them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OppBPIc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2apw9hb8tr8brkb4mfa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OppBPIc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2apw9hb8tr8brkb4mfa.png" alt="git workflow rebase" width="870" height="643"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#reviewing-the-changes-before-integration"&gt;
  &lt;/a&gt;
  Reviewing the changes before integration
&lt;/h2&gt;

&lt;p&gt;I then open a merge/pull request in gitlab/github, and almost always find corrections to make.&lt;/p&gt;

&lt;p&gt;If the changes I want to make are important, I will create new commits, but for small corrections I usually integrate them directly to the current commit by amending it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;--amend&lt;/span&gt; &amp;amp; git push &lt;span class="nt"&gt;--force&lt;/span&gt;  &lt;span class="c"&gt;# git afp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When everything seems clean, I will ask for a review and will usually integrate the changes requested in a new commit so that the reviewer can quickly check them.&lt;/p&gt;

&lt;p&gt;Eventually, before integrating this new feature to the main branch, I will regroup the commits into one again as done previously, and rebase on the main branch if necessary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NB: For this workflow to be effective, you need to enforce rebase merging in gitlab/github.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cleaning-up"&gt;
  &lt;/a&gt;
  Cleaning up
&lt;/h2&gt;

&lt;p&gt;Finally, Once merged, I will delete my branch on the server (this is configured to be done automatically after merging) and on my local repository, so that these repositories stay clean.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git branch &lt;span class="nt"&gt;-D&lt;/span&gt; my-branch  &lt;span class="c"&gt;# git del my-branch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have automated the setup of all my projects &lt;a href="https://simondosda.github.io/posts/2021-05-03-tmux.html"&gt;thanks to tmuxp&lt;/a&gt;, and I always start by updating the repository and displaying its status. &lt;br&gt;
That allows me to quickly see what branches I am currently working on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git fetch &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git branch &lt;span class="nt"&gt;-vv&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git status  &lt;span class="c"&gt;# git state&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;These are the rules and the workflow I try to follow on all my projects.&lt;/p&gt;

&lt;p&gt;I admit it requires some effort, but the time you spend making sure that your git history is clean and readable will save you a lot of time when you will need to understand why and how some changes were made.&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>tooling</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 18 Jan 2022 18:16:52 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-2m73</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-2m73</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#free-as-in-licenses"&gt;
  &lt;/a&gt;
  Free as in licenses
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/krtirtho"&gt;@krtirtho&lt;/a&gt; created a helpful breakdown of various open source licenses and tips on which to choose, when. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/krtirtho" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CpaEM3Vs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EaBVBspv--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/512998/9699ed25-d920-41af-aac5-fad183d9b5eb.jpg" alt="krtirtho"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/krtirtho/choosing-open-source-license-wisely-1m3p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Choosing Open Source License Wisely🤔&lt;/h2&gt;
      &lt;h3&gt;Kingkor Roy Tirtho ・ Jan 16 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#motivation&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-someday-list-of-your-codebase"&gt;
  &lt;/a&gt;
  The "someday" list of your codebase.
&lt;/h2&gt;

&lt;p&gt;AKA, tech debt! &lt;a class="mentioned-user" href="https://dev.to/michaelmangial1"&gt;@michaelmangial1&lt;/a&gt; has created a handy resource for developers to better understand tech debt, how to log related information, and how to prioritize all of it. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/michaelmangial1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WRAIhbqh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--fInOdQa9--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/311068/7b0d6bcb-b712-4885-b97a-c524bba21bc9.jpeg" alt="michaelmangial1"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/michaelmangial1/an-introduction-to-tech-debt-and-why-it-can-change-your-career-381m" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;An Introduction to Tech Debt (And Why It Can Change Your Career)&lt;/h2&gt;
      &lt;h3&gt;Michael Mangialardi ・ Jan 12 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#easing-designdev-handoff-pain-with-figma"&gt;
  &lt;/a&gt;
  Easing design/dev handoff pain with Figma
&lt;/h2&gt;

&lt;p&gt;"Designers are expected to have a pretty thorough understanding of the front-end web: HTML elements, the CSS box model, how responsive resizing works, component-based structure, etc. And yet, when we flip the script, developers are rarely expected to have an understanding of design basics – what's up with that?" asks &lt;a class="mentioned-user" href="https://dev.to/kathryngrayson"&gt;@kathryngrayson&lt;/a&gt;. GREAT question and great intro to Figma and how it can help ease design/dev handoff pain!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kathryngrayson" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DdnYpWvA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--AzhJrDla--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/2565/93fcdbc1-0575-4490-ab67-ec5f50e54a17.jpg" alt="kathryngrayson"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kathryngrayson/figma-for-developers-6op" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Figma for Developers &lt;/h2&gt;
      &lt;h3&gt;Kathryn Grayson Nanz ・ Jan 12 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#ux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ui&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#frontend&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#kollercodes-motivation-to-code"&gt;
  &lt;/a&gt;
  KollerCode's motivation to code
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/kollercode"&gt;@kollercode&lt;/a&gt; has been faced with a number of personal challenges in 2021. But they used these experiences as fuel to change the course of their career and life. As they so beautifully put it: "when I am [coding], it's like I am solving problems in my own life and it reminds me that as long as I don't give up and I am persistent I can do anything."&lt;/p&gt;

&lt;p&gt;Don't miss this post ❤️ &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kollercode" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--THW1ETmB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9YNak67p--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/708813/845d66ae-2dee-4324-83e6-e11340761527.jpg" alt="kollercode"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kollercode/the-sad-truth-as-to-why-i-chose-to-change-careers-to-software-engineering-nm0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Sad Truth as to Why I Chose to Change Careers to Software Engineering&lt;/h2&gt;
      &lt;h3&gt;KollerCode ・ Jan 16 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#motivation&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#how-many-asteroids-came-close-to-hitting-the-earth-and-how-big-were-they"&gt;
  &lt;/a&gt;
  How many asteroids came close to hitting the Earth — and how big were they?
&lt;/h2&gt;

&lt;p&gt;No, this is not Netflix Studio spon-con for their new film, "Don't Look Up" — it's an awesome post by &lt;a class="mentioned-user" href="https://dev.to/flippedcoding"&gt;@flippedcoding&lt;/a&gt; all about how you can use one of the NASA APIs to create an asteroid map. Pretty cool, no? &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/flippedcoding" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWt-uaTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--D-VsiVuP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/77973/be223e4c-dc34-43da-a894-10be8f272316.jpg" alt="flippedcoding"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/flippedcoding/creating-an-asteroid-map-with-a-nasa-api-4afc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Creating an Asteroid Map with a NASA API&lt;/h2&gt;
      &lt;h3&gt;Milecia ・ Jan 11 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#graphql&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#a-thoroughlyvetted-book-recommendation"&gt;
  &lt;/a&gt;
  A thoroughly-vetted book recommendation
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/puritanic"&gt;@puritanic&lt;/a&gt; read The Pragmatic Programmer (you might have heard of it!) and makes a strong case for adding it to your must-read list in this article.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/puritanic" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--byGoLQcO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--eWaqVaE4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/56280/eb4aba68-4712-4490-92e9-addf0c66a177.jpeg" alt="puritanic"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/puritanic/ive-read-the-pragmatic-programmer-2bn9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I've read... The Pragmatic Programmer&lt;/h2&gt;
      &lt;h3&gt;Darkø Tasevski ・ Jan 16 ・ 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#books&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#good-job-or-a-tar-pit"&gt;
  &lt;/a&gt;
  Good job or a tar pit?
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/mauriciolinhares"&gt;@mauriciolinhares&lt;/a&gt; has a handy list of questions to ask your potential employers at your next interview to answer this quandary.  &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mauriciolinhares" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f3N-WonJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3nd5oye4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/319886/de034c58-51d3-43a0-afa3-24b80b0902bc.jpeg" alt="mauriciolinhares"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mauriciolinhares/what-to-ask-at-job-interviews-when-you-are-being-interviewed-f4l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What to ask at job interviews when you are being interviewed&lt;/h2&gt;
      &lt;h3&gt;Maurício Linhares ・ Jan 12 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#motivation&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly Top 7 for this Tuesday! Keep an eye on dev.to this week for daily content and discussions...and be sure to keep an eye on this series in the future. You might just be in it!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Flask 2.x Release - With Free Samples</title>
      <author>Sm0ke</author>
      <pubDate>Tue, 18 Jan 2022 18:09:57 +0000</pubDate>
      <link>https://dev.to/sm0ke/flask-2x-release-with-free-samples-1aao</link>
      <guid>https://dev.to/sm0ke/flask-2x-release-with-free-samples-1aao</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;In October 2021 &lt;a href="https://flask.palletsprojects.com/en/2.0.x/changes/"&gt;Flask Version 2.0.2&lt;/a&gt; has been released with various upgrades to the framework, improvements, and deprecations. This article is a quick overview of Flask 2.x update.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#flask-2x-updates"&gt;
  &lt;/a&gt;
  ✨ Flask 2.x Updates
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Blueprints&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Starting with &lt;code&gt;2.0&lt;/code&gt; version &lt;code&gt;Blueprints&lt;/code&gt; can be nested under each other. This feature might improve the design of complex products.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Config from file&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Re-add deprecated &lt;code&gt;Config.from_json&lt;/code&gt;, which was accidentally removed early.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Improved CLI errors&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When an app could not be loaded, errors are displayed instantly when the development server is active.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;FLASK_DEBUG&lt;/code&gt; is deprecated&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Replaced by &lt;code&gt;FLASK_ENV&lt;/code&gt;, a more current environment variable.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Language Detection&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;langdetect&lt;/code&gt; package is used by default.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Improved Static files cache&lt;/code&gt; - on development&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Browsers will cache static files based on file content rather than a 12-hour refresh time frame.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Blueprints&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Can be registered the same blueprint with different names&lt;/p&gt;

&lt;p&gt;For more information feel free to access the official &lt;a href="https://flask.palletsprojects.com/en/2.0.x/changes/"&gt;Flask v2.x release page&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#starters-features"&gt;
  &lt;/a&gt;
  ✨ Starters Features
&lt;/h2&gt;

&lt;p&gt;All projects are generated by AppSeed using a common set of features inherited by all starters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Up-to-date dependencies&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DBMS&lt;/code&gt;: SQLite, PostgreSQL (production)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DB Tools&lt;/code&gt;: SQLAlchemy ORM, Flask-Migrate (schema migrations)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Session-Based authentication&lt;/code&gt; (via flask_login), Forms validation&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Deployment&lt;/code&gt;: &lt;strong&gt;Docker&lt;/strong&gt;, Gunicorn / Nginx, HEROKU&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Free &lt;a href="https://appseed.us/support"&gt;support&lt;/a&gt; via email and &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt; - 1k+ community.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#flask-datta-able"&gt;
  &lt;/a&gt;
  ✨ Flask Datta Able
&lt;/h2&gt;

&lt;p&gt;Datta Able is a Lite Admin Template, around all other Lite/Free admin templates in the market. It comes with high feature-rich pages and components with fully developer-centric code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/app-generator/flask-datta-able"&gt;Datta Able Flask&lt;/a&gt; - source code (MIT License)&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://flask-datta-able.appseed-srv1.com/"&gt;Datta Able Flask&lt;/a&gt; - LIVE deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The product can be compiled and started in a local environment using the Docker setup shipped with the product:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Download sources from Github&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/flask-datta-able.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flask-datta-able
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Start the app in Docker&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once all commands are executed, we should be able to access the app in the browser, register new users, and authenticate.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WSPd8qlJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqxzv6iwz1m0eckdno4p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WSPd8qlJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqxzv6iwz1m0eckdno4p.gif" alt="Flask 2.x Datta Able - GIF animated presentation." width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#flask-material-dashboard"&gt;
  &lt;/a&gt;
  ✨ Flask Material Dashboard
&lt;/h2&gt;

&lt;p&gt;Designed for those who like bold elements and beautiful websites, Material Dashboard 2 is ready to help you create stunning websites and web apps. Material Dashboard 2 is built with over 60 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/app-generator/flask-material-dashboard"&gt;Flask Dashboard Material&lt;/a&gt; - source code (MIT License)&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://flask-material-dashboard.appseed-srv1.com/"&gt;Flask Dashboard Material&lt;/a&gt; - LIVE deployment&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RNxu4_k9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l54dxdzmrom9tfl3stc4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RNxu4_k9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l54dxdzmrom9tfl3stc4.png" alt="Flask 2.x Material Dashboard - Charts Page " width="880" height="480"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#flask-soft-ui-design"&gt;
  &lt;/a&gt;
  ✨ Flask Soft UI Design
&lt;/h2&gt;

&lt;p&gt;Soft UI Design System is a premium Bootstrap 5 UI Kit designed by Creative-Tim designed for those who like bold elements and beautiful websites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/app-generator/flask-soft-ui-design"&gt;Soft UI Design Flask&lt;/a&gt; - source code (MIT License)&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://flask-soft-ui-free.appseed-srv1.com/"&gt;Soft UI Design Flask&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H2u78o-i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja9d8cxiblkviwrzr6eg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H2u78o-i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja9d8cxiblkviwrzr6eg.png" alt="Flask 2.x Soft UI Design - Open-Source Starter" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#flask-material-kit"&gt;
  &lt;/a&gt;
  ✨ Flask Material Kit
&lt;/h2&gt;

&lt;p&gt;Designed for those who like bold elements and beautiful websites, Material Kit 2 is ready to help you create stunning websites and web apps. Material Kit 2 is built with over 60 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/app-generator/flask-material-kit"&gt;Flask Material Kit&lt;/a&gt; - source code (MIT License)&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://flask-material-kit.appseed-srv1.com/"&gt;Flask Material Kit&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qfkqjFUn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ynqo5l96s47fey4zeoq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qfkqjFUn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ynqo5l96s47fey4zeoq.png" alt="Flask 2.x Material Kit - Bootstrap 5 Design. " width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#flask-dashboardkit"&gt;
  &lt;/a&gt;
  ✨ Flask DashboardKit
&lt;/h2&gt;

&lt;p&gt;Open-source Flask Dashboard generated by AppSeed op top of a modern Boostrap 5 design. DashboardKit is made for everyone, no matter you are a novice developer, designer, project manager/owner.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/app-generator/flask-dashboard-kit"&gt;DashboardKit Flask&lt;/a&gt; - source code (MIT License)&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://flask-dashboard-kit.appseed-srv1.com/"&gt;DashboardKit Flask&lt;/a&gt; - LIVE deployment&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o4B9p6zE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33rz1tagh38tsgprpzma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o4B9p6zE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33rz1tagh38tsgprpzma.png" alt="Flask 2.x DashboardKit - Bootstrap 5 Design." width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, feel free to access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;🎁 More &lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Free Dashboards&lt;/a&gt; crafted in &lt;code&gt;React&lt;/code&gt;, Django, and &lt;strong&gt;Flask&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;🎁 Free &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - curated list published on &lt;code&gt;Dev.to&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>flask</category>
      <category>webdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>OCSP and CRL: what could go wrong?</title>
      <author>Cossack Labs</author>
      <pubDate>Tue, 18 Jan 2022 18:06:47 +0000</pubDate>
      <link>https://dev.to/cossacklabs/ocsp-and-crl-what-could-go-wrong-1ped</link>
      <guid>https://dev.to/cossacklabs/ocsp-and-crl-what-could-go-wrong-1ped</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Read this post to learn everything to know about TLS certificate revocation protocols: OCSP and CRL. &lt;br&gt;
How to use OCSP and CRL for validating TLS certificates in Go apps? Even though Golang has native support for TLS, it has extremely limited support for OCSP and CRL. So, what should you do then?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Online_Certificate_Status_Protocol"&gt;OCSP (Online Certificate Status Protocol)&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc6960"&gt;RFC6960&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Certificate_revocation_list"&gt;CRL (Certificate Revocation List)&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc5280"&gt;RFC5280&lt;/a&gt; provide a way to verify whether the TLS certificate was revoked by a Certificate Authority before the app establishes secure communication with a service that uses this certificate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zCkRumPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rp9i805jn9alflc7nu14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zCkRumPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rp9i805jn9alflc7nu14.png" alt="OCSP and CRL" width="880" height="744"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-could-go-wrong-in-using-ocsp-and-crl"&gt;
  &lt;/a&gt;
  What could go wrong in using OCSP and CRL?
&lt;/h2&gt;

&lt;p&gt;Here's just a quick list:&lt;/p&gt;

&lt;p&gt;🔴  &lt;strong&gt;Establishing session before validating the TLS certificate&lt;/strong&gt; (don't be tempted to "optimise" things if OCSP and CRL cause visible delays in the application work).&lt;br&gt;
🔴  &lt;strong&gt;Unreachable CRL / OCSP responders&lt;/strong&gt; (this could destabilise the whole solution, as applications can be stuck in limbo, not communicating with other services while validating the certificates).&lt;br&gt;
🔴  &lt;strong&gt;Accepting "Unknown" status as valid&lt;/strong&gt; (if the application treats OCSP "Unknown" status as "the certificate is still valid", it might continue talking to the already malicious service, treating it as a valid).&lt;br&gt;
🔴  &lt;strong&gt;Certificate revocation checks are too rare&lt;/strong&gt; (balance performance and security, mind a threat model and security requirements).&lt;br&gt;
🔴  &lt;strong&gt;Lack of signature validation&lt;/strong&gt; (it's essential to verify the CRL response signature to prevent potential attackers from tampering with the list).&lt;br&gt;
🔴  &lt;strong&gt;CRL cache poisoning&lt;/strong&gt; (if CRL is cached in a local file without any integrity checks, the application won't recognise that the file was changed).&lt;br&gt;
🔴  &lt;strong&gt;Delta CRLs&lt;/strong&gt; (if implemented poorly, issues with network connectivity might result in the application not receiving some delta CRLs and continuing to trust the revoked certificates).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-needs-ocsp-and-crl"&gt;
  &lt;/a&gt;
  Who needs OCSP and CRL?
&lt;/h2&gt;

&lt;p&gt;We stumbled upon intricacies in OCSP and CRL when building &lt;a href="https://www.cossacklabs.com/acra/"&gt;Acra database security suite&lt;/a&gt;, an application that sits between the app and the database and encrypts/decrypts sensitive data. The support of OCSP and CRL is crucial for Acra to prevent unauthorised connections from malicious or misconfigured apps to sensitive data. &lt;/p&gt;

&lt;p&gt;To meet our security model, we had to implement OCSP/CRL verification in Golang ourselves. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#see-ocsp-and-crl-implementation-examples"&gt;
  &lt;/a&gt;
  See OCSP and CRL implementation examples
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 As it was not easy but interesting task, we put our findings into a new engineering blog post: &lt;a href="https://www.cossacklabs.com/blog/tls-validation-implementing-ocsp-and-crl-in-go/"&gt;TLS validation: implement OCSP and CRL verifiers in Go&lt;/a&gt;. Follow the link to learn more about OCSP/CRL design, implementation and security tips, example code and popular mistakes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you're a Golang engineer that works closely with TLS, our blog post will give you lots of moments to think about. &lt;/p&gt;

&lt;p&gt;To illustrate everything we’ve posted above, we created minimalistic OCSP and CRL implementations in Go. &lt;/p&gt;

&lt;p&gt;Check out the &lt;a href="https://cossacklabs.com/blog/tls-validation-implementing-ocsp-and-crl-in-go/#ocsp-crl-live-examples"&gt;4. Live examples&lt;/a&gt; chapter with all the scripts to generate TLS certificates, OCSP responder based on OpenSSL, and Golang server-side and client-side apps. Feel free to review and run examples to see how the verification works with valid and revoked certificates.&lt;/p&gt;

</description>
      <category>security</category>
      <category>go</category>
      <category>development</category>
      <category>encryption</category>
    </item>
    <item>
      <title>How-to setup a HA/DR database in AWS? [9 - Generate a random value]</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 18 Jan 2022 17:40:51 +0000</pubDate>
      <link>https://dev.to/adaendra/how-to-setup-a-hadr-database-in-aws-9-generate-a-random-value-5g8a</link>
      <guid>https://dev.to/adaendra/how-to-setup-a-hadr-database-in-aws-9-generate-a-random-value-5g8a</guid>
      <description>&lt;p&gt;In this part &lt;em&gt;(and the last part of the serie)&lt;/em&gt;, we will see how to generate a random value.&lt;/p&gt;

&lt;p&gt;Really useful to generate unique names for a snapshot for example, you will see that there are multiple definitions available, depending on what you need.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#random-id"&gt;
  &lt;/a&gt;
  Random Id
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"random_id"&lt;/span&gt; &lt;span class="s2"&gt;"rdm_id"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;byte_length&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Declared as this, it will generate for you an 8 bytes long id which can be retrieve in :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;base64&lt;/strong&gt; : random_id.rdm_id.id =&amp;gt; MDc3NDA2OGE5YTNhMjc5MQ==&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;decimal digits&lt;/strong&gt; : random_id.rdm_id.dec =&amp;gt; 537061447926687633&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;hexadecimal digits&lt;/strong&gt; : random_id.rdm_id.hex =&amp;gt; 0774068a9a3a2791&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But it you are doing it like this, &lt;strong&gt;the random_id will always be the same!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So to be sure the value change when something append, you can use the &lt;strong&gt;keepers&lt;/strong&gt; parameter.&lt;/p&gt;

&lt;p&gt;With this, you can say "if the parameter X and Y change, so the random value must change too".&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In this example the random value will change each time the arn of the global cluster example will change.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"random_id"&lt;/span&gt; &lt;span class="s2"&gt;"rdm_id"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;byte_length&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;

  &lt;span class="nx"&gt;keepers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_rds_global_cluster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arn&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if you want this value to change each time the script is executed, use a timestamp :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"random_id"&lt;/span&gt; &lt;span class="s2"&gt;"rdm_id"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;byte_length&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;

  &lt;span class="nx"&gt;keepers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#other-random-possibilities"&gt;
  &lt;/a&gt;
  Other random possibilities
&lt;/h2&gt;

&lt;p&gt;Following the same pattern, Terraform let you to generate random &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;integer
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"random_integer"&lt;/span&gt; &lt;span class="s2"&gt;"priority"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50000&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;password
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"random_password"&lt;/span&gt; &lt;span class="s2"&gt;"password"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;length&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
  &lt;span class="nx"&gt;special&lt;/span&gt;          &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="nx"&gt;override_special&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"_%@"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;string
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"random_string"&lt;/span&gt; &lt;span class="s2"&gt;"random"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;length&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
  &lt;span class="nx"&gt;special&lt;/span&gt;          &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="nx"&gt;override_special&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/@£&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;UUID
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"random_uuid"&lt;/span&gt; &lt;span class="s2"&gt;"test"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;A shuffled sublist
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"random_shuffle"&lt;/span&gt; &lt;span class="s2"&gt;"az"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"us-west-1a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"us-west-1c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"us-west-1d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"us-west-1e"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nx"&gt;result_count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Here you will retrieve a sublist of the input list, with only 2 items.&lt;/em&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Terraform doc random_id : &lt;a href="https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/id"&gt;https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/id&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Terraform doc random_integer : &lt;a href="https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/integer"&gt;https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/integer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Terraform doc random_password : &lt;a href="https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/password"&gt;https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/password&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Terraform doc random_shuffle : &lt;a href="https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/shuffle"&gt;https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/shuffle&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Terraform doc random_string : &lt;a href="https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/string"&gt;https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/string&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Terraform doc random_uuid : &lt;a href="https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/uuid"&gt;https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/uuid&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I hope it will help you and you liked this serie! 🍺&lt;/p&gt;

</description>
      <category>sre</category>
      <category>aws</category>
      <category>terraform</category>
      <category>devops</category>
    </item>
    <item>
      <title>How-to setup a HA/DR database in AWS? [8 - Multiple instances in multiple regions]</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 18 Jan 2022 17:40:28 +0000</pubDate>
      <link>https://dev.to/adaendra/how-to-setup-a-hadr-database-in-aws-8-multiple-instances-in-multiple-regions-210d</link>
      <guid>https://dev.to/adaendra/how-to-setup-a-hadr-database-in-aws-8-multiple-instances-in-multiple-regions-210d</guid>
      <description>&lt;p&gt;In this part of the serie, we will see how to create &lt;strong&gt;in one Terraform script&lt;/strong&gt; and in a single execution, how to create elements in multiple regions.&lt;/p&gt;

&lt;p&gt;This kind of tips is really helpful if you want to create at once all your infra and/or if you want to setup some disaster recovery.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-do-it"&gt;
  &lt;/a&gt;
  How to do it?
&lt;/h2&gt;

&lt;p&gt;To do it, it's pretty simple. We have 2 steps to follow :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;declare multiple providers&lt;/li&gt;
&lt;li&gt;declare which provider we want to use for each resource&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#declare-multiple-providers"&gt;
  &lt;/a&gt;
  Declare multiple providers
&lt;/h3&gt;

&lt;p&gt;In your current script to create something on AWS, you should have an &lt;strong&gt;AWS Provider&lt;/strong&gt; with the &lt;strong&gt;region&lt;/strong&gt; where it should be created.&lt;/p&gt;

&lt;p&gt;So, copy/paste this block for all your regions. Then add an alias to each of them to be able to differentiate them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;provider&lt;/span&gt; &lt;span class="s2"&gt;"aws"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;alias&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"frankfurt"&lt;/span&gt;
  &lt;span class="nx"&gt;region&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"eu-central-1"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;provider&lt;/span&gt; &lt;span class="s2"&gt;"aws"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;alias&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"sydney"&lt;/span&gt;
  &lt;span class="nx"&gt;region&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ap-southeast-2"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#declare-which-provider-we-want-to-use-for-each-resource"&gt;
  &lt;/a&gt;
  Declare which provider we want to use for each resource
&lt;/h3&gt;

&lt;p&gt;In each resource you have, add the &lt;strong&gt;provider&lt;/strong&gt; parameter to link each of them to the correct provider.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_rds_cluster_instance"&lt;/span&gt; &lt;span class="s2"&gt;"test_frankfurt"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;provider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frankfurt&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_rds_cluster_instance"&lt;/span&gt; &lt;span class="s2"&gt;"test_sydney"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;provider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sydney&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;And that's it! You are now able to deploy your complete infra on multiple regions at once!&lt;/p&gt;

&lt;p&gt;I hope it will help you! 🍺&lt;/p&gt;

&lt;p&gt;And see you soon for the next part of this serie. 😀&lt;/p&gt;

</description>
      <category>aws</category>
      <category>terraform</category>
      <category>sre</category>
      <category>devops</category>
    </item>
    <item>
      <title>How-to setup a HA/DR database in AWS? [7 - Dynamic Terraform backend definition]</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 18 Jan 2022 17:40:20 +0000</pubDate>
      <link>https://dev.to/adaendra/how-to-setup-a-hadr-database-in-aws-7-dynamic-terraform-backend-definition-3aga</link>
      <guid>https://dev.to/adaendra/how-to-setup-a-hadr-database-in-aws-7-dynamic-terraform-backend-definition-3aga</guid>
      <description>&lt;p&gt;In this post we will see something which can be really useful to use the same script in multiple environment or for multiple projects without modifying the code!&lt;/p&gt;




&lt;p&gt;To do this magic trick, we will define dynamically the backend that we will use to store the terraform state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backend-declaration"&gt;
  &lt;/a&gt;
  Backend declaration
&lt;/h2&gt;

&lt;p&gt;First, we need to declare in the script which kind of backend we want to use.&lt;/p&gt;

&lt;p&gt;In our example, it will be with &lt;strong&gt;AWS S3&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;terraform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;backend&lt;/span&gt; &lt;span class="s2"&gt;"s3"&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#dynamic-magic"&gt;
  &lt;/a&gt;
  Dynamic magic
&lt;/h2&gt;

&lt;p&gt;So to have a dynamic backend definition, you have to add declare some parameters as options of the &lt;strong&gt;terraform init&lt;/strong&gt; command.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backend-parameters"&gt;
  &lt;/a&gt;
  Backend parameters
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;bucket&lt;/strong&gt; : Name of the S3 bucket where you want to store the Terraform state.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;key&lt;/strong&gt; : Path of the Terraform state file in the S3 bucket. Generally it is this parameter who will be updated to ensure you that each terraform state is located in a different place.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;region&lt;/strong&gt; : Region where the bucket is&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;encrypt&lt;/strong&gt; : A boolean to know if you want to encrypt the file &lt;em&gt;(if you have a doubt, set it to true)&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#command-option"&gt;
  &lt;/a&gt;
  Command option
&lt;/h3&gt;

&lt;p&gt;To give the backend parameters, you have to way to do it :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;declare a parameter with a key=value&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;-backend-config='bucket=test'&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;declare a tfvars file which contains some/all the configurations&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;-backend-config='configs/configs_backend.tfvars'&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Then you just have to give the right parameters when using the terraform commands, and you will be able to define multiple infra with one script!&lt;/p&gt;




&lt;p&gt;I hope it will help you! 🍺&lt;/p&gt;

&lt;p&gt;And see you soon for the next part of this serie. 😀&lt;/p&gt;

</description>
      <category>aws</category>
      <category>sre</category>
      <category>terraform</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
