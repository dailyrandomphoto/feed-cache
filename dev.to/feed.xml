<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>DEV Pride &amp; Alan Turing: The Father of Modern Computing</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 23 Jun 2021 18:39:01 +0000</pubDate>
      <link>https://dev.to/devteam/dev-pride-alan-turing-the-father-of-modern-computing-39in</link>
      <guid>https://dev.to/devteam/dev-pride-alan-turing-the-father-of-modern-computing-39in</guid>
      <description>&lt;p&gt;Today, June 23, would be the 109th birthday of Alan Turing: brilliant English mathematician, computer scientist, and crypto-analyst who made some truly remarkable contributions to the field we all love. &lt;/p&gt;

&lt;p&gt;It's especially meaningful and poignant that Turing was born in June — a month that many countries now recognize as LGBTQIA+ Pride Month. That's because in addition to being a groundbreaking thinker and computer scientist, Alan Turing also happened to be a gay man born into a country that (like far too many) didn't decriminalize homosexuality until the late 1960s. &lt;/p&gt;

&lt;p&gt;Turing died at the age of 41 shortly after being abused at the hands of his own government and convicted as a criminal for his sexuality. Not only was Alan Turing's life cut violently short, but his dazzling accomplishments were stripped away, his reputation tarnished.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That's why each year during his birth month, we celebrate the life and legacy of Alan Turing. As a community of code-obsessed people, we know you'll love reading about a few of his inventions and history-making projects as much as we do...&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#decoding-the-encryption-of-nazi-enigma-machines"&gt;
  &lt;/a&gt;
  Decoding the Encryption of Nazi "Enigma" Machines
&lt;/h3&gt;

&lt;p&gt;During World War II, Turing worked in a high position with Britain’s code-breakers at Bletchley Park. He helped create the original design for the "bombe": an electro-mechanical device to help decipher German Enigma-machine-encrypted secret messages during World War II. This work helped reveal critical Nazi submarine pathways, contributing to the Allied forces eventual success. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-turing-test"&gt;
  &lt;/a&gt;
  The "Turing Test"
&lt;/h3&gt;

&lt;p&gt;In 1950, Turing published a thought experiment to explore  whether or not a computer could pass as a human being. The "Turing Test" required a human aid to pose questions to determine if the responses came from a computer or a human. While the test eventually revealed weaknesses, it became an critical milestone in the history of artificial intelligence.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#delilah-a-portable-secure-voice-communications-machine"&gt;
  &lt;/a&gt;
  Delilah: A Portable Secure Voice Communications Machine
&lt;/h3&gt;

&lt;p&gt;During his time at Bletchley Park, Turing also During this period, Turing also created the "Delilah" — a portable machine that could encode a voice message securely and is considered decades ahead of its time. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Note: You can read a complete a transcription of Turing's Delilah report &lt;a href="https://www.turing.org.uk/sources/delilah.html"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;... and much more. For an amazing and detailed look at Alan Turing's life, &lt;a href="https://www.nytimes.com/2019/06/05/obituaries/alan-turing-overlooked.html"&gt;this obituary&lt;/a&gt; from The New York Times' "Overlooked" collection is worth a read. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-alan-turings-life-can-teach-us-about-pride"&gt;
  &lt;/a&gt;
  What Alan Turing's Life Can Teach Us About Pride
&lt;/h3&gt;

&lt;p&gt;Despite obvious accomplishments and service to his country, Alan Turing's life and work was cut short due to bigoted views about his sexuality. It's too easy to look at black and white photos of figures like Turing and convince ourselves that these human atrocities took place in a bygone era that has no relationship to this current moment. &lt;/p&gt;

&lt;p&gt;But the truth is, Turing's conviction for "indecency" was just 69 years ago. A relative speck of time.&lt;/p&gt;

&lt;p&gt;As software developers, it is, of course, our duty to never let what happened to Alan Turing happen again. But it's also important to continuously celebrate the joy and genius of LGBTQIA+ technologists willing to share their authentic lives with us. As a future-oriented field, technology depends on the participation, safety, and empowerment of all people, regardless of race, gender, ethnicity, religion, or sexual-orientation. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#dev-pride"&gt;
  &lt;/a&gt;
  DEV Pride
&lt;/h2&gt;

&lt;p&gt;You might remember that earlier this month, we shared the following message on DEV:  &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devteam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTihtlIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nJ87SGF6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png" alt="The DEV Team"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zg3sT9Js--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--vHKcEiTe--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/3/13d3b32a-d381-4549-b95e-ec665768ce8f.png" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devteam/happy-lgbtqia-pride-month-1j7b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Happy LGBTQIA+ Pride Month! ❤️ &lt;/h2&gt;
      &lt;h3&gt;dev.to staff for The DEV Team ・ Jun 1 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devpride&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;In the article, we invited our LGBTQIA+ community members to share their unique perspectives about and contributions to technology right here. &lt;/p&gt;

&lt;p&gt;In honor of Alan Turing's birthday and Pride Month, we'd like to share a few of those articles with you today...&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#krismally"&gt;
  &lt;/a&gt;
  &lt;a class="mentioned-user" href="https://dev.to/krismally"&gt;@krismally&lt;/a&gt;

&lt;/h4&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/krismally" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iRnJbFuL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zHhDSqAa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/641234/8b7a0b7e-80a8-4d4c-be84-87db9418679c.jpeg" alt="krismally"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/krismally/my-journey-as-a-bi-trans-man-29k9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My Journey as a Bi Trans Man &lt;/h2&gt;
      &lt;h3&gt;Kris ・ Jun 2 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devpride&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#mordypython"&gt;
  &lt;/a&gt;
  &lt;a class="mentioned-user" href="https://dev.to/mordypython"&gt;@mordypython&lt;/a&gt;

&lt;/h4&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mordypython" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--05Rnwrks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--LbWQbLuH--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/584106/b9166177-7c0f-4c30-964c-a8e400022631.jpeg" alt="mordypython"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mordypython/happy-pride-month-programmers-2i9g" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Happy pride month programmers!&lt;/h2&gt;
      &lt;h3&gt;mordy-python ・ Jun 1 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devpride&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#lgbtq&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#baenencalin"&gt;
  &lt;/a&gt;
  &lt;a class="mentioned-user" href="https://dev.to/baenencalin"&gt;@baenencalin&lt;/a&gt;

&lt;/h4&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/baenencalin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E1AvSW17--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Ivkkw2GR--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/509599/8798f39d-3424-4d26-b612-3a5cddfb1663.png" alt="baenencalin"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/baenencalin/happy-pride-month-i-created-a-flag-compilation-video-to-celebrate-1k5o" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Happy Pride Month! I created a flag compilation video to celebrate!&lt;/h2&gt;
      &lt;h3&gt;Calin Baenen ・ Jun 3 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#lgbtq&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#pride&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devpride&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#jrohatiner"&gt;
  &lt;/a&gt;
  &lt;a class="mentioned-user" href="https://dev.to/jrohatiner"&gt;@jrohatiner&lt;/a&gt;

&lt;/h4&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jrohatiner" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nVdOzYpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--dad4zP1b--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/36142/24c07608-756b-4bfd-9393-b4b340c82ac2.jpg" alt="jrohatiner"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jrohatiner/a-little-history-1cgo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A little history &lt;/h2&gt;
      &lt;h3&gt;Judith ・ Jun 2 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devpride&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#programazing"&gt;
  &lt;/a&gt;
  &lt;a class="mentioned-user" href="https://dev.to/programazing"&gt;@programazing&lt;/a&gt;

&lt;/h4&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/programazing" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UEjd8S5M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--S36bgmUx--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/400/59e06fa3-6abd-40c1-8e52-a43497fe3ca5.jpg" alt="programazing"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/programazing/don-t-worry-about-what-others-think-coming-out-of-the-closet-4bai" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Don't Worry About What Others Think: Coming Out of the Closet&lt;/h2&gt;
      &lt;h3&gt;Christopher C. Johnson ・ Jan 11 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#pride&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#lgbt&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#inclusion&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;If you would like to share a story with us in honor of Pride Month, we would love to read it. Just use the tag &lt;a href="//dev.to/t/devpride"&gt;#devpride&lt;/a&gt; so we can find it or use &lt;a href="//dev.to/new/devpride"&gt;this template&lt;/a&gt; as a jumping off point. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Happy Pride and Happy Birthday, Alan Turing!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  🏳️‍🌈
&lt;/h2&gt;

</description>
      <category>devpride</category>
    </item>
    <item>
      <title>Error 404 Glitch Page in JS,CSS and HTML</title>
      <author>FRADAR</author>
      <pubDate>Wed, 23 Jun 2021 18:26:36 +0000</pubDate>
      <link>https://dev.to/fradar/error-404-glitch-page-in-js-css-and-html-273k</link>
      <guid>https://dev.to/fradar/error-404-glitch-page-in-js-css-and-html-273k</guid>
      <description>&lt;p&gt;An interesting error 404 glitch page.&lt;/p&gt;

&lt;p&gt;See it here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/full/gOmNzYb"&gt;https://codepen.io/FRADAR/full/gOmNzYb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like it?&lt;/p&gt;

&lt;p&gt;Follow me here (if you want):&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR"&gt;https://codepen.io/FRADAR&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>404</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Machine Learning Descomplicado </title>
      <author>DevShy</author>
      <pubDate>Wed, 23 Jun 2021 18:16:21 +0000</pubDate>
      <link>https://dev.to/devshy/machine-learning-descomplicado-h1e</link>
      <guid>https://dev.to/devshy/machine-learning-descomplicado-h1e</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;a href="#o-que-%C3%A9-machine-learning"&gt; O que é Machine Learning?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#primeiros-passos"&gt; Primeiros passos&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#leitura-da-base"&gt; Leitura da Base&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#explora%C3%A7%C3%A3o-dos-dados-in%C3%ADcio"&gt; Exploração dos dados - início&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#resumo"&gt; Resumo&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#generated-with-summaryze-forem"&gt;
  &lt;/a&gt;
  generated with &lt;a href="https://summaryze-forem.vercel.app/"&gt;Summaryze Forem 🌱&lt;/a&gt;
&lt;/h6&gt;

&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9-machine-learning"&gt;
  &lt;/a&gt;
  O que é Machine Learning?
&lt;/h2&gt;

&lt;p&gt;Quando se fala em tecnologia, um termo que está na boca do povo é aprendizado de máquina (machine learning em inglês). Mas o que exatamente é isso? Uma busca simples no Google, retorna uma multitude de artigos, fóruns, documentos, fontes. &lt;/p&gt;

&lt;p&gt;Existem inúmeras definições sobre o que é o aprendizado de máquina, mas uma que nos serve bastante por agora é: “A pesquisa em aprendizado de máquina é um campo de estudo dentro da pesquisa em inteligência artificial, que busca fornecer conhecimento aos computadores através de dados, observações e interações com o mundo. Esse conhecimento adquirido permite que computadores generalizem corretamente novos eventos e configurações”.&lt;/p&gt;

&lt;p&gt;Sendo assim, o intuito deste post é introduzir você que está lendo, a esse mundo maravilhoso que será nosso futuro. Hoje, você aprenderá como abrir um dado e visualizar as principais informações dele. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#primeiros-passos"&gt;
  &lt;/a&gt;
  Primeiros passos
&lt;/h2&gt;

&lt;p&gt;Agora que você está introduzido neste mundo, vamos nos preparar para começarmos nossa exploração. Primeiro, precisamos definir qual será nossa base de dados, para este projeto, fiz uma adaptação na base de dados chamada de credit data, hospedada no site &lt;a href="https://www.kaggle.com/"&gt;Kaggle&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Após baixar a base, vamos importar as bibliotecas que utilizaremos durante todo o processo. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;  &lt;a href="https://pandas.pydata.org/docs/"&gt;Pandas&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://numpy.org/doc/stable/"&gt;Numpy&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://seaborn.pydata.org/"&gt;Seaborn&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://matplotlib.org/"&gt;Matplotlib.pyplot&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dash.plotly.com/"&gt;ploty.express&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Usaremos a biblioteca &lt;em&gt;pandas&lt;/em&gt; e &lt;em&gt;numpy&lt;/em&gt; para o processamento dos dados e cálculos estatísticos. A &lt;em&gt;seaborn&lt;/em&gt;, &lt;em&gt;matplotlib&lt;/em&gt; e a &lt;em&gt;ploty&lt;/em&gt;, usamos na parte da visualização dos dados. Tudo explicado, agora vamos importar as bibliotecas no nosso código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sns&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;plotly.express&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;px&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sempre que importamos uma biblioteca, passamos um apelido para ela, para que fique mais fácil nossa utilização, e é isso que o &lt;em&gt;as&lt;/em&gt; pd, &lt;em&gt;as&lt;/em&gt; np, e os demais significam. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#leitura-da-base"&gt;
  &lt;/a&gt;
  Leitura da Base
&lt;/h2&gt;

&lt;p&gt;Após importado as bibliotecas, vamos finalmente abrir nossa base pela primeira vez. Para isso, utilizaremos a biblioteca &lt;em&gt;pandas&lt;/em&gt; e seu método &lt;em&gt;read_csv&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;base_credit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'credit_data.csv'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adicionamos esse método em uma variável, e passamos o &lt;em&gt;path&lt;/em&gt; do arquivo como parâmetro. &lt;br&gt;
Agora vamos fazer nossa primeira visualização, para isso, utilizaremos o comando .head() do próprio pandas. Ele nos retornará as 5 primeiras linhas do arquivo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;base_credit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Saída: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tFWfE8QE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3j3iu97tnehvxxg3gqww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tFWfE8QE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3j3iu97tnehvxxg3gqww.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Podemos ver que temos uma tabela, com 6 colunas. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A primeira coluna corresponde ao índice da nossa tabela, qual o tamanho dela; &lt;/li&gt;
&lt;li&gt;A segunda coluna (clientid) corresponde ao id do cliente; &lt;/li&gt;
&lt;li&gt;A terceira coluna (income) corresponde ao salário do respectivo cliente ao ano. &lt;/li&gt;
&lt;li&gt;A quarta coluna (age), mostra a idade do cliente; &lt;/li&gt;
&lt;li&gt;A quinta coluna (loan), representa o valor da dívida que o cliente está devendo; &lt;/li&gt;
&lt;li&gt;E por ultimo, a sexta coluna, representa se o cliente quitou, ou não, a dívida. Esses valores são representados por 1 e 0, respectivamente.
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#explora%C3%A7%C3%A3o-dos-dados-in%C3%ADcio"&gt;
  &lt;/a&gt;
  Exploração dos dados - início
&lt;/h2&gt;

&lt;p&gt;Para fazer a exploração, utilizaremos o comando describe, do pandas. Ele retornará diversas informações estatísticas dos valores números existentes na nossa tabela.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;base_credit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Saída: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m78Vr-0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3x9ffwmlz7215gq7fja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m78Vr-0Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3x9ffwmlz7215gq7fja.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Com esse comando podemos observar a quantidade de linhas contidas na tabela, a média de cada uma das colunas, o desvio padrão, o valor mínimo encontrado, o primeiro quartil de 25%, a mediana, o segundo quartil de 75% e o valor máximo encontrado. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resumo"&gt;
  &lt;/a&gt;
  Resumo
&lt;/h2&gt;

&lt;p&gt;E aqui finalizamos o post de hoje. Neste post, foi mostrado uma ideia geral sobre machine learning e os primeiros passos para construir um projeto nesta área. Ao longo da semana as demais partes irão sair, espero que acompanhem! Até a próxima!! &lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>programming</category>
    </item>
    <item>
      <title>Blaming Git Blame</title>
      <author>Sandra Spanik</author>
      <pubDate>Wed, 23 Jun 2021 18:16:09 +0000</pubDate>
      <link>https://dev.to/sanspanic/blaming-git-blame-1f4o</link>
      <guid>https://dev.to/sanspanic/blaming-git-blame-1f4o</guid>
      <description>&lt;p&gt;In this article I make a case for renaming the feature &lt;code&gt;git blame&lt;/code&gt; to a neutral equivalent (e.g. &lt;code&gt;git author&lt;/code&gt; or &lt;code&gt;git inspect&lt;/code&gt;). I argue that the use of &lt;code&gt;git blame&lt;/code&gt; primes workplaces and teams for blame culture and contributes to unhelpful feelings of shame. The language we use shapes our cognition, feelings and behaviours in small but systematic ways, and it is for this reason that I argue renaming the otherwise useful feature &lt;code&gt;git blame&lt;/code&gt; is long overdue. I also investigate the source code of git in an attempt to understand how the feature got introduced, and connect with its author to find that he, too, wishes the feature was named differently. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-git"&gt;
  &lt;/a&gt;
  What is git?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PTdBHvph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97ye7ey047ojohienec9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PTdBHvph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97ye7ey047ojohienec9.png" alt="Git logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Git is an open source version control tool with widespread adoption that allows individuals to track changes to files over time and revert back to previous versions of files at any time. It is extremely useful for collaboration and has become the de-facto standard for software engineering teams. While there are alternative version control systems, many companies consider a basic command of git a pre-requisite for employment. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-git-blame"&gt;
  &lt;/a&gt;
  What is git blame? 😳
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://git-scm.com/docs/git-blame/2.31.0"&gt;Git blame&lt;/a&gt; is a git command which reveals what revision and author last modified each line of a file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I was first shown the feature, I chuckled nervously at the discovery. Being new to tech, I generously allow for the possibility that my code might not yet be, objectively, what one would call "the shit". Naturally, I immediately imagined my colleagues repeatedly invoking my name using &lt;code&gt;git blame&lt;/code&gt;, subconsciously adding the tiniest bit of additional frustration to an ever-growing stinking pile of frustrations upon each discovery of me as the culprit. In 21st century language, I'd summarise my feelings about learning of &lt;code&gt;git blame&lt;/code&gt;as follows: 👀. &lt;/p&gt;

&lt;p&gt;Whilst my instinctual reaction was that of pre-emptive shame creeping in, it was quickly countered by some good old rational thinking. I feel safe in my workplace, knowing that my colleagues aren't on the hunt to assign blame for mistakes, and that my organisation values collaboration over rockstar developing. &lt;/p&gt;

&lt;p&gt;I was told that the main utility of the feature is not enabling team members to blame each other for their poor code contributions, but &lt;strong&gt;enabling individuals to find out who would be the best person to ask about a specific part of a codebase&lt;/strong&gt;. The ability to quickly identify the author of a given part of the codebase for follow-up questions is handy, and saves time. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're asking yourself, why would the feature be named &lt;code&gt;blame&lt;/code&gt; instead of &lt;code&gt;author&lt;/code&gt;, when it primarily gets used to identify the code's author, then you and I are asking ourselves the same question.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#git-blame-is-harmful"&gt;
  &lt;/a&gt;
  Git blame is harmful 🤕
&lt;/h2&gt;

&lt;p&gt;Let's assume we agree that &lt;code&gt;git blame&lt;/code&gt; shouldn't get used with the intent of assigning blame within teams. A big assumption to make, that I bet some teams with archaic or authoritarian work philosophies would disagree with. But philosophical differences regarding effective collaboration are beyond the scope of this article. &lt;/p&gt;

&lt;p&gt;Okay, so we're assuming we all agree - let's not blame each other and instead primarily use &lt;code&gt;git blame&lt;/code&gt; to find the code's author in a blame-free context. Great. But even so, 2 issues remain: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Why should the onus be on us developers to do mental gymnastics and internally rebrand &lt;code&gt;git blame&lt;/code&gt; as &lt;code&gt;git author&lt;/code&gt;, when in fact, the feature itself could just be named &lt;code&gt;git author&lt;/code&gt; in the first place? &lt;/li&gt;
&lt;li&gt;Even though we can agree to see beyond its literal meaning, the naming of the feature still continues to affect us in systematic ways.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is because &lt;strong&gt;language subconsciously shapes the way we think, feel and behave.&lt;/strong&gt; Repeated exposure to the word blame in a work context is harmful. It feels implausible that in today's climate, where we rightfully pay attention to our language more than ever, a feature like &lt;code&gt;git blame&lt;/code&gt; should be allowed to peacefully continue existing and priming workplaces for blame culture.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#language-measurably-shapes-our-cognition"&gt;
  &lt;/a&gt;
  Language measurably shapes our cognition 🧠
&lt;/h2&gt;

&lt;p&gt;The language we use demonstrably influences how and what we think. For example, existing cross-cultural differences in how we perceive time, distance and size can be traced back to how different languages construct these abstract ideas. Also, speakers of languages which use grammatical genders such as Russian or German are heavily influenced by the arbitrary grammatical gender of nouns. These speakers' visual representations of such nouns and their instinctive associations depend heavily on the noun's otherwise random gender. Even visual perception is not immune to the effect of language. For example, Russian speakers are better at distinguishing between shades of blue than English speakers because they have more words to describe them. You can read more about all of this &lt;a href="https://www.edge.org/conversation/lera_boroditsky-how-does-our-language-shape-the-way-we-think#:~:text=The%20fact%20that%20even%20quirks,affect%20our%20thinking%20is%20profound.&amp;amp;text=Language%20is%20central%20to%20our,way%20we%20live%20our%20lives."&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#language-has-a-priming-effect"&gt;
  &lt;/a&gt;
  Language has a priming effect 🗣️
&lt;/h2&gt;

&lt;p&gt;Priming is a phenomenon whereby exposure to one stimulus influences a response to a subsequent stimulus, without conscious guidance or intention. For example, exposing someone to the word "yellow" will evoke a faster response to the word "banana" than it will to an unrelated word like "sofa". Priming takes place outside of our conscious awareness, but it plays an &lt;a href="https://www.verywellmind.com/priming-and-the-psychology-of-memory-4173092"&gt;important role&lt;/a&gt; in our daily lives. From influencing how we interpret information to our behaviour, priming can play a part in our perceptions, emotions, and actions. &lt;a href="https://alldgt.com/priming-in-marketing/"&gt;Marketers&lt;/a&gt;, advertisers and even social media engineers have sought to exploit this effect. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It's reasonable to assume that seeing the word blame repeatedly primes us for negative affective responses.&lt;/strong&gt; If you are committing new code, thinking of the word "blame" is likely to introduce just the slightest bit of fear, shame or guilt. On the flip side, if you are the one investigating changes and see your colleague's name next to the word "blame", you will be more likely to actually assign blame to them and associate their name with a negative affective state. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/vX9WcCiWwUF7G/source.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/vX9WcCiWwUF7G/source.gif" alt="https://media.giphy.com/media/vX9WcCiWwUF7G/source.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let me pre-empt some questions a reader might have at this stage. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-it-bothers-you-so-much-why-dont-you-just-alias-it"&gt;
  &lt;/a&gt;
  If it bothers you so much, why don't you just alias it?  ❄️
&lt;/h2&gt;

&lt;p&gt;I'm aware that git has a neat &lt;code&gt;alias&lt;/code&gt; feature that allows you to &lt;a href="https://www.atlassian.com/git/tutorials/git-alias"&gt;replace any command with another&lt;/a&gt;. Technically, nothing's stopping me from renaming &lt;code&gt;git blame&lt;/code&gt; to &lt;code&gt;git candyfloss&lt;/code&gt;. But the feature is ubiquitous and difficult to avoid, so creating an alias in my local device would barely reduce my exposure to it. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;image of VSCode blame extension&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AcwfiheF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjud22yeuxnc37frjiij.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AcwfiheF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjud22yeuxnc37frjiij.png" alt="VSCode blame extension showing author's name next to the word blame"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are useful git extensions that display git blame, and even Github itself has a UI version of git blame that shows you the author and the name of the commit associated with each part of the codebase. According to the &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-collaboration-tools-all-respondents"&gt;2020 Stackoverflow Annual Developer Survey&lt;/a&gt;, more than 82% of us use Github, so the word blame really is near impossible to escape.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;image of Github's blame interface (yes, Github looks like this in light mode)&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FFu0WYXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uo42bwpsomysbz0erw4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FFu0WYXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uo42bwpsomysbz0erw4.png" alt="github blame interface"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PC7vP_NG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wmvocpsvftt8j9hijjn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PC7vP_NG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wmvocpsvftt8j9hijjn.png" alt="Github's blame interface"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#if-it-bothers-you-so-much-why-dont-you-just-use-git-annotate"&gt;
  &lt;/a&gt;
  If it bothers you so much, why don't you just use git annotate? ❄️
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git annotate&lt;/code&gt; is another git command with nearly the same functionality. Whilst &lt;code&gt;git annotate&lt;/code&gt; doesn't differ from the criticised feature &lt;a href="https://git-scm.com/docs/git-annotate"&gt;by much&lt;/a&gt;, it doesn't solve the issue for the exact same reasons described above. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Having justified why &lt;code&gt;git blame&lt;/code&gt; is worth discussing, let's now delve into its history.&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#whats-to-blame-for-git-blame"&gt;
  &lt;/a&gt;
  What's to blame for git blame? 🔎
&lt;/h2&gt;

&lt;p&gt;Git was created in 2005 by none other than &lt;strong&gt;Linus Torvald, the creator of Linux&lt;/strong&gt;, who was at the time working on his operating system with a dispersed team of volunteer developers. Working remotely before it was cool, he was using the proprietary version control software BitKeeper, which was made available to his team for free. Until, one controversy later involving an engineer being accused of reverse-engineering the software, BitKeeper's founder Larry McVoy withdrew the agreement. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Torvalds&lt;/strong&gt; soon announced he would go on a week-long holiday, and in true vacation spirit, &lt;strong&gt;created the first version of the version control tool that 82% of today's nearly 27 million developers use,&lt;/strong&gt; probably all whilst reclining on a beach chair and sipping on a cold one. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;actual footage of Torvalds implementing git (probably)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bkFUGhBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1512552288940-3a300922a275%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1351%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bkFUGhBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1512552288940-3a300922a275%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1351%26q%3D80" alt="https://images.unsplash.com/photo-1512552288940-3a300922a275?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1351&amp;amp;q=80"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Git's success was a surprise to him. It's safe to say that carefully naming projects sensitively, especially those he never expected to take off in such spectacular fashion, wasn't Torvalds' priority nor inclination. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“The in-joke was that I name all my projects after myself, and this one was named ‘Git’. Git is British slang for ‘stupid person’,” Torvalds tells us.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's right. Git is actually a British swear word. If you've previously noticed this and chuckled at the fact that git is eponymous with the swear word popularised by The Beatles and Ronald Weasley, the joke's on you - git's creator knew this full well. The &lt;a href="https://github.com/git/git#git---fast-scalable-distributed-revision-control-system"&gt;README&lt;/a&gt; of Git elaborates even further: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;"Git", the "stupid content tracker", can mean anything, depending on your mood&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Random three-letter combination that is pronounceable, and not actually used by any common UNIX command. The fact that it is a mispronunciation of "get" may or may not be relevant.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Stupid. Contemptible and despicable. Simple. Take your pick from the dictionary of slang.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;"Global information tracker": you're in a good mood, and it actually works for you. Angels sing, and a light suddenly fills the room.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;"Goddamn idiotic truckload of sh*t": when it breaks.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#open-source"&gt;
  &lt;/a&gt;
  Open source
&lt;/h2&gt;

&lt;p&gt;Git's maintenance continued to be led by one of the most active early contributors &lt;strong&gt;Junio Hamano&lt;/strong&gt;, who is said to remain somewhat of a benevolent dictator to the git community up to this day. It's important to note that git is by no means one man's toy. &lt;strong&gt;It is the result of a decade and a half of collaboration and hard work by an active and caring community.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Their &lt;a href="https://github.com/git/git/blob/master/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt; speaks of a community that is &lt;strong&gt;respectful and kind.&lt;/strong&gt; But the extent to which this is true is unclear to me because I am neither a contributor myself nor am I impervious to stories about the patriarch himself, Linus, occasionally telling contributors they should probably be &lt;strong&gt;retroactively aborted&lt;/strong&gt;. A man who enjoys to jokingly &lt;a href="https://www.youtube.com/watch?v=JZ017D_JOPY&amp;amp;ab_channel=TFiRTFiR"&gt;call out&lt;/a&gt; stupid people who write stupid patches for being so stupid that it's a surprise they've managed to find a tit to suck on as stupid babies, is not a man I associate with creating welcoming communities.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Torvalds letting us all know what he really thinks of our code contributions (probably)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VzzyytZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/903bvpcjyfxn65lkguf8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VzzyytZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/903bvpcjyfxn65lkguf8.png" alt="torvalds flipping the middle finger"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whilst I must admit that I personally enjoy his particular brand of dark humour, I'd advocate for being more mindful of the power dynamics we are all part of, because whether we like it or not, our words can have unintended harmful consequences. &lt;/p&gt;

&lt;p&gt;A theory started forming in my head: &lt;strong&gt;perhaps &lt;code&gt;git blame&lt;/code&gt; was the result of the same strain of dark humour?&lt;/strong&gt; Maybe a seemingly innocent but really quite insensitive joke that feels so on brand for the Linux creator's past? I say past here, because the man is apparently &lt;a href="https://thehackernews.com/2018/09/linus-torvalds-jerk.html"&gt;evolved now&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I'd like to think that, having known the many millions of developers who'd come into contact with the concept of blame on a daily basis as a result of a mildly amusing joke, the naming of &lt;code&gt;git blame&lt;/code&gt; would have been reconsidered. &lt;strong&gt;I'd say, it's about time we retroactively abort it.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-to-the-bottom-of-git-blame"&gt;
  &lt;/a&gt;
  Getting to the bottom of git blame 🕵🏼‍♀️
&lt;/h2&gt;

&lt;p&gt;Spoiler alert: as you might have already guessed, astute reader, my naive assumption that &lt;code&gt;git blame&lt;/code&gt; started as a joke is, in fact, completely wrong. But let's dig into how I derived at this sobering conclusion. &lt;/p&gt;

&lt;p&gt;Thankfully, git is so spectacularly useful that I didn't have to stop at simply theorising about my burning question of how, when and why &lt;code&gt;git blame&lt;/code&gt; was introduced. &lt;strong&gt;The beauty of git itself being an open source project made with git, means that anyone can check out who authored which changes when.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In search of some answers, I put on my detective hat, raised a monocle to my eye, and downloaded Git's &lt;a href="https://github.com/git/git"&gt;source code repo&lt;/a&gt;. To search for the earliest introduction of the string "blame" into the codebase, I used &lt;code&gt;git log --all -p --reverse --source -S 'blame'&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;The first mention of "blame" I found was in the documentation intended for users migrating from CVS, a competing version control tool. The changed file, in classic Linus fashion, begins with the following sentence: "&lt;em&gt;OK, so you're a CVS user. That's ok, it's a treatable condition, and the first step to recovery is admitting you have a problem&lt;/em&gt;". Had programming not worked out for the man, standup comedy would have been a solid second choice. &lt;/p&gt;

&lt;p&gt;Here's the bit that features the word "blame". &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Author: Linus Torvalds &lt;a href="//mailto:torvalds@linux-foundation.org"&gt;torvalds@linux-foundation.org&lt;/a&gt;&lt;br&gt;
Date:  Wed Jun 8 13:19:31 2005 -0700&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;&lt;em&gt;So, something has gone wrong, &lt;strong&gt;and you don't know whom to blame&lt;/strong&gt;, and&lt;br&gt;
you're an ex-CVS user and used to do "cvs annotate" to see who caused&lt;br&gt;
the breakage. You're looking for the "git annotate", and it's just&lt;br&gt;
claiming not to find such a script. You're annoyed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yes, that's right.  Core git doesn't do "annotate", although it's&lt;br&gt;
technically possible, and there are at least two specialized scripts out&lt;br&gt;
there that can be used to get equivalent information...&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;The text suggests ex-CVS users were predicted to expect the command &lt;code&gt;git annotate&lt;/code&gt; to produce what we now know as the &lt;code&gt;git blame&lt;/code&gt; output, based on CVS itself supporting an &lt;code&gt;annotate&lt;/code&gt; command. Neither of the commands existed in git at the time (although now, they both do). &lt;/p&gt;

&lt;p&gt;At this point, it seemed to me like the jury was still out on whether the naming of &lt;code&gt;git blame&lt;/code&gt; was the result of a joke or an intentional, serious, naming decision. But from reading through the documentation, it started seeming more and more like &lt;code&gt;git blame&lt;/code&gt; was the result of a work ideology that starkly departs from mine, and embraces a culture where assigning blame is the norm and tolerance for mistakes is scant. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Still hungry for answers, I dug deeper and uncovered git's public &lt;a href="https://public-inbox.org/git/"&gt;mailing list archives&lt;/a&gt;.&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-real-origin-of-git-blame"&gt;
  &lt;/a&gt;
  The real origin of git blame 💫
&lt;/h2&gt;

&lt;p&gt;In May 2005, a member of the git open source community sent an email, wondering how to replicate the CVS annotate feature. Linus replied saying that whilst he knows how to do it (obviously 💅), he's hoping someone else will, because he generally doesn't care about the feature enough. &lt;em&gt;So much for my Torvalds-joke hypothesis.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Junio Hamano came forward and implemented a slow yet working algorithm in Perl, which became the base of future &lt;code&gt;git blame&lt;/code&gt; implementations. Then, 2 people independently created their own versions - one of which became &lt;code&gt;git annotate&lt;/code&gt;, named consistently with SVN, and the other became &lt;code&gt;git blame&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;Here's the "guilty" commit.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Author: Fredrik Kuivinen &lt;a href="//mailto:frekui@gmail.com"&gt;frekui@gmail.com&lt;/a&gt;&lt;br&gt;
Date:   Tue Feb 21 00:40:54 2006 +0100&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Add git-blame, a tool for &lt;strong&gt;assigning blame.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I have also been working on a blame program. The algorithm is pretty&lt;br&gt;
much the one described by Junio in his blame.perl. My variant doesn't&lt;br&gt;
handle renames, but it shouldn't be too hard to add that. The output&lt;br&gt;
is minimal, just the line number followed by the commit SHA1...&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;So here we go, git blame turns out to be described by its creator as &lt;strong&gt;a tool for assigning blame&lt;/strong&gt; and was originally unequivocally intended to do exactly what it says on the tin - assign blame. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Admittedly, the finding is no sensation - my detective work has led me to the outcome most would have rightfully assumed to be true by default, without feeling the need to go off and do hours of research on the topic in the hope of discovering that, surely, this was all down to a simple misunderstanding.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S227fY9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rs2uglsk0dlv2xg9jyna.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S227fY9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rs2uglsk0dlv2xg9jyna.png" alt="VScode extension blaming Fredrik"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, Fredrik was not the first one to have implemented a "blame" algorithm. As he says in his commit message, he was working off of Junio's &lt;a href="https://public-inbox.org/git/7vu0kiu8pm.fsf@assigned-by-dhcp.cox.net/"&gt;blame.perl&lt;/a&gt;, which makes copious use of the words blame and guilt itself, as shown below, in an excerpt from the blame algorithm's description.&lt;/p&gt;



&lt;p&gt;&lt;em&gt;How does this work, and what do we do about merges?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The algorithm considers that the first parent is our main line of development and treats it somewhat special than other parents.  So we &lt;strong&gt;pass on the blame&lt;/strong&gt; to the first parent if a line has not changed from it. For lines that have changed from the first parent, we must have either inherited that change from some other parent, or it could have been merge conflict resolution edit we did on our own.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The following picture illustrates how we pass on and &lt;strong&gt;assign blames.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In the sample, the original O was forked into A and B and then merged into M.  Line 1, 2, and 4 did not change.  Line 3 and 5 are changed in A, and Line 5 and 6 are changed in B.  M made its own decision to resolve merge conflicts at Line 5 to something different from A and B:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+
+                A: 1 2 T 4 T 6
+               /               \ 
+O: 1 2 3 4 5 6                  M: 1 2 T 4 M S
+               \               / 
+                B: 1 2 3 4 S S
+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;In the following picture, each line is annotated with a &lt;strong&gt;blame letter.&lt;/strong&gt;&lt;/em&gt; &lt;br&gt;
&lt;em&gt;A lowercase blame (e.g. "a" for "1") means that commit or its ancestor is &lt;strong&gt;the guilty party&lt;/strong&gt; but we do not know which particular ancestor is responsible for the change yet.  An &lt;strong&gt;uppercase blame&lt;/strong&gt; means that we know that commit is the &lt;strong&gt;guilty party&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Even I, self-appointed Language Police Officer™, can see nothing wrong with the above description. In the world of algorithms, removed form humans, the words "guilt" and "blame" are simply the most succinct descriptions of the variables' functionality. In this context, the drawbacks of their negative connotations don't outweigh their utility. &lt;/p&gt;

&lt;p&gt;But the rabbit hole goes even deeper than Junio's blame.perl. Turns out, another competing source control tool called Subversion had already &lt;a href="http://svnbook.red-bean.com/en/1.8/svn.ref.svn.c.blame.html"&gt;implemented a blame feature all the way back in 2003&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The usage of the term &lt;code&gt;blame&lt;/code&gt; is likely the result of 2 things: the word's variable naming utility and the collective mindset at the time.&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contacting-the-author"&gt;
  &lt;/a&gt;
  Contacting The Author 🗯️
&lt;/h2&gt;

&lt;p&gt;When I contacted the git feature's author, Fredrik Kuivinen, he told me that he mainly called it blame because it had been called blame &lt;a href="https://www.quora.com/Why-is-git-blame-called-blame?top_ans=62340411"&gt;elsewhere&lt;/a&gt; already. He also added the following*&lt;em&gt;:&lt;/em&gt;* &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;"In hindsight, I should have taken the opportunity to come up with a better name, e.g., "praise" which has been suggested by others."&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I felt vindicated. I hadn't researched a niche topic most don't care about for nothing - after all, the author himself appears to agree a naming change would be beneficial! &lt;/p&gt;

&lt;p&gt;But at the time Fredrik was implementing the feature, coming up with a better name would have required an implausible amount of foresight on his part. Firstly, he would have had to anticipate the success of git and the future ubiquitousness of the feature. Secondly, he would have had to anticipate a cultural shift in tech. &lt;/p&gt;

&lt;p&gt;Moreover, the same command already existed elsewhere, and going with the default produces less friction than changing the status quo. And judging by mail exchanges, other contributors also preferred the naming of "blame" over "annotate".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Therefore, we will be assigning NO blame to Fredrik for implementing the feature in this article.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-have-we-learned"&gt;
  &lt;/a&gt;
  What have we learned? 🎓
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;The term &lt;code&gt;blame&lt;/code&gt; in a version-control context existed elsewhere prior to git, because it is a succinct descriptor, and a reflection of the collective prevalent mindset at the time that no single individual is responsible for. &lt;/li&gt;
&lt;li&gt;Using words with negative affect in internal variables might in some cases well be the most elegant naming solution. But to, in 2021, name external commands in the same way, demonstrates either a lack of empathy for the end user or a lack of awareness of the significant impact language has on us all. &lt;/li&gt;
&lt;li&gt;Open source is magnificent. More work than I could have previously imagined went into git. I'm grateful for the hard work that continues to set the foundations of all technology that surrounds us. &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#this-doesnt-seem-like-such-a-big-deal-why-get-hung-up-on-it"&gt;
  &lt;/a&gt;
  This doesn't seem like such a big deal, why get hung up on it? 💁🏼
&lt;/h2&gt;

&lt;p&gt;I agree that on an individual level, the existence of &lt;code&gt;git blame&lt;/code&gt; feels easy to brush off. Once the initial twinge of surprise at discovering the feature subsides, it's easy to go back to work and never question it again. But as I've explained above, the language we are exposed to continues to affect us in subtle but real ways. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So whilst the effect of &lt;code&gt;git blame&lt;/code&gt; on any one person might be negligible, its cumulative effect on an entire industry that encounters the feature every single day is significant. Over time, tiny amounts of shame and hesitation encountered by millions add up to a mountain of innovations foregone.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Moreover, many clearly still find it amusing that &lt;code&gt;git blame&lt;/code&gt; exists. To those who do, I'd say: get with the times, folks. Being a dick is 2000 and late. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BT1fJ0UG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zr9f0nr5k5f1zajwcn24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BT1fJ0UG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zr9f0nr5k5f1zajwcn24.png" alt="person being rude"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IUnlevNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejq75oq5lq18006vs9tl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IUnlevNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejq75oq5lq18006vs9tl.png" alt="person being rude"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And although I have no science to back this up, I have the suspicion that some are more affected by the feature than others. Those who engage in more introspection, those who feel they have more to lose if they commit the wrong code, those who experience a wider range of emotions overall. &lt;strong&gt;As we move towards creating a diverse workforce open to individuals from any background, we would do well to also adjust our language to be more inclusive, thus allowing anyone to feel welcome and contribute with confidence.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;So now, only one question remains... &lt;em&gt;who is confident in C and wants to submit a revolutionary patch to git?&lt;/em&gt; 🤩&lt;/p&gt;

</description>
      <category>git</category>
      <category>opensource</category>
      <category>github</category>
      <category>webdev</category>
    </item>
    <item>
      <title>WebSocket Postman - Making Your First Web Socker Call with POSTMAN Demo.</title>
      <author>Pramod Dutta</author>
      <pubDate>Wed, 23 Jun 2021 18:12:58 +0000</pubDate>
      <link>https://dev.to/promode/websocket-postman-making-your-first-web-socker-call-with-postman-demo-4jca</link>
      <guid>https://dev.to/promode/websocket-postman-making-your-first-web-socker-call-with-postman-demo-4jca</guid>
      <description>&lt;p&gt;In this video, we are going to learn about the WebSocket Postman and how to make WebSocket call in postman.&lt;/p&gt;

&lt;p&gt;What is Web Socket?&lt;br&gt;
WebSocket is a computer communications protocol, providing full-duplex communication channels over a single TCP connection.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Xpc-pPA55GM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;✅API Testing - &lt;br&gt;
&lt;a href="https://www.learnapitesting.com"&gt;https://www.learnapitesting.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✅Cypress Tutorial with LIVE Projects -&lt;br&gt;
&lt;a href="http://cypresstutorial.com"&gt;http://cypresstutorial.com&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#websocketpostman-websocket-postman"&gt;
  &lt;/a&gt;
  websocketpostman #websocket #postman
&lt;/h1&gt;

</description>
      <category>testing</category>
      <category>postman</category>
      <category>qa</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Getting started with Typescript with React Hooks [2021]</title>
      <author>RiyaNegi</author>
      <pubDate>Wed, 23 Jun 2021 17:26:43 +0000</pubDate>
      <link>https://dev.to/riyanegi/getting-started-with-typescript-with-react-hooks-2021-5cfd</link>
      <guid>https://dev.to/riyanegi/getting-started-with-typescript-with-react-hooks-2021-5cfd</guid>
      <description>&lt;p&gt;&lt;strong&gt;Typescript&lt;/strong&gt; is the next big thing in the &lt;strong&gt;&lt;em&gt;Front End Development&lt;/em&gt;&lt;/strong&gt; domain and if you are looking to upgrade your skills from a junior to an intermediate frontend developer, then it is a must have skill.&lt;br&gt;
              Typescript is a a subset of javascript, so if you know javascript you are already half way there! What Typescript brings to the table is more error-free code with type checking during run time and a code which can be easily documented.&lt;/p&gt;

&lt;p&gt;This article is for developers who already know react and javascript and want to shift to typescript, so I won't be focusing on any react concepts. This is a crash course on understanding the basics of using &lt;strong&gt;Typescript with React.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RrSFQAmc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/XyaQAnihoZBU3GmFPl/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RrSFQAmc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/XyaQAnihoZBU3GmFPl/giphy.gif" alt="random gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#index"&gt;
  &lt;/a&gt;
  Index
&lt;/h2&gt;

&lt;p&gt;We will be covering all the topics necessary for understanding the basics of using react with typescript.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#info"&gt;Info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setup"&gt;Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#state"&gt;Handling State&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#props"&gt;Handling Props&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functions"&gt;Handling Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#events"&gt;Handling Events&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this article we will be building a simple personal watch list that records the movies you input by taking it's name, rating and review. It looks something like.(It is a little stylised but the underlying code is basic)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_DdU9mwF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzharpw078z3ltq533cq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_DdU9mwF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzharpw078z3ltq533cq.jpg" alt="App Image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#info"&gt;
  &lt;/a&gt;
  &lt;a id="info"&gt;&lt;/a&gt;Info
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/RiyaNegi/Typescript-with-react"&gt;Github repo for the project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://riyanegi.github.io/Typescript-with-react/"&gt;Online Demo of the Project&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  &lt;a id="setup"&gt;&lt;/a&gt;Setup
&lt;/h2&gt;

&lt;p&gt;Let's start with initializing our project! I am naming my project typescript-with-react but you can go with anything you like. &lt;br&gt;
&lt;code&gt;npx create-react-app --template typescript typescript-with-react&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Okay now change directory to get into your project folder and proceed usually as you do with any react project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd typescript-with-react/
code .
npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your code structure should be looking something like this&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yvM2blX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w5e7ntt60c04ir5et59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yvM2blX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w5e7ntt60c04ir5et59.png" alt="COde structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice how the files have &lt;code&gt;.ts&lt;/code&gt; or &lt;code&gt;.tsx&lt;/code&gt; extension. That denotes that those files are transpiled in typescript.&lt;br&gt;
Okay now let's get into the Typescript nitty gritty!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#handling-state"&gt;
  &lt;/a&gt;
  &lt;a id="state"&gt;&lt;/a&gt;Handling state
&lt;/h2&gt;

&lt;p&gt;In typescript it's necessary to mention type definitions of all variables and functions and what they return. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For handling state in react you need to first create an interface where you mention the data type of the variables. &lt;/li&gt;
&lt;li&gt;In the example below, we have created an interface called &lt;code&gt;IState&lt;/code&gt; (You can name it whatever you like). &lt;/li&gt;
&lt;li&gt;The interface &lt;code&gt;IState&lt;/code&gt; is where we will write our type definition of how we want the state variables to be, which in this case is an array of objects. To denote that we add square bracket after the type definitions. And then while using useState, add &lt;code&gt;&amp;lt;IState["form"]&amp;gt;&lt;/code&gt; which denotes that the state should be accepting values in the specified format only(IState format in this case which is taking the object 'form' as input format)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KbcLMHVX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w817yp7opfpd5i8c1wik.jpg" alt="State image"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have exported IState so that we can use it in another file later on.&lt;br&gt;
An alternate inline method of adding state would be as follows :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [counter, setCounter] = useState&amp;lt;{name:string,rate:number,review?:string}[]&amp;gt;([])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In our case project, we want review to be an optional field while name of the movie and rating of the movie to be compulsory field. &lt;/li&gt;
&lt;li&gt;Thus for review we have done &lt;code&gt;review?:string&lt;/code&gt; where the question mark denotes the value of review could either be a string or undefined. However for &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;rate&lt;/code&gt; we have strict type definitions which won't accept anything apart from the assigned type definitions.&lt;/li&gt;
&lt;li&gt;You can add more than one type definitions to a variable in the following way:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;inputValue:number | string | null
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the variable &lt;code&gt;inputValue&lt;/code&gt; can either be a data type of number, string or even a null value &lt;br&gt;
Note: null and undefined are not the same data types.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#handling-props"&gt;
  &lt;/a&gt;
  &lt;a id="props"&gt;&lt;/a&gt;Handling Props
&lt;/h2&gt;

&lt;p&gt;For handling props in react, both the sending and recieving side of the component should make a clear declaration of the type and number of variables or functions involved.Typescript will give an error if anything is missing either on the sending or receiving side&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is the sending side.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;List form={form} /&amp;gt;
&amp;lt;Form form={form} setForm={setForm} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;From &lt;code&gt;App.tsx&lt;/code&gt; we are sending one object ie. &lt;code&gt;form&lt;/code&gt; to &lt;code&gt;List.tsx&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let's take a look at the &lt;code&gt;List&lt;/code&gt; component's recieving side now.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { IState as IProps } from "../App"

const List: React.FC&amp;lt;IProps&amp;gt; = ({ form }) =&amp;gt; {
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;List is a react functional component that accepts props. In typescript to show that we add&lt;code&gt;React.FC&amp;lt;IProps&amp;gt;&lt;/code&gt; after the &lt;code&gt;List&lt;/code&gt; component declaration.&lt;/li&gt;
&lt;li&gt;We can import the &lt;code&gt;IState&lt;/code&gt; under the alias &lt;code&gt;IProps&lt;/code&gt; since we know that the type definitions of the object &lt;code&gt;form&lt;/code&gt; are exactly the same as the &lt;code&gt;IState&lt;/code&gt; object. &lt;/li&gt;
&lt;li&gt;We can then destructure &lt;code&gt;form&lt;/code&gt; in the parameters and use it in the function component.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the second example, from &lt;code&gt;App.tsx&lt;/code&gt; we are sending one object ie. &lt;code&gt;form&lt;/code&gt; and one function ie.&lt;code&gt;setForm&lt;/code&gt; to &lt;code&gt;Form.tsx&lt;/code&gt;&lt;br&gt;
Let's take a look at the &lt;code&gt;Form&lt;/code&gt; component's recieving side now.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NGZKzTx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ku6td7fmh0dwob3ol48m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NGZKzTx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ku6td7fmh0dwob3ol48m.png" alt="Form component"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see here in this component as well we imported &lt;code&gt;IState&lt;/code&gt; under the alias &lt;code&gt;Props&lt;/code&gt;, however we have made some customized changes here. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here we created a new interface called &lt;code&gt;IProps&lt;/code&gt; that specifies the type defintion of props incoming since we had to specify the type of &lt;code&gt;setForm&lt;/code&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We mention &lt;code&gt;form: Props["form"]&lt;/code&gt; which means form should be assigned the type definition of &lt;code&gt;IState&lt;/code&gt; which is imported under the alias &lt;code&gt;Props&lt;/code&gt;&lt;br&gt;
And then similarly we will now do it for &lt;code&gt;setForm&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Protip : to know the type definitions of something you don't have a clue about, just hover over that element like this and copy the type definitions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G56EkbK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqik41c2r1jwfg27pqst.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G56EkbK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqik41c2r1jwfg27pqst.jpg" alt="hover image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since we have already declared the type definitions of props as &lt;code&gt;Props["form"]&lt;/code&gt;, we can cut short the type definition of &lt;code&gt;setForm&lt;/code&gt; and write it this way instead
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; setForm: React.Dispatch&amp;lt;React.SetStateAction&amp;lt;Props["form"]&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Then simply destructure &lt;code&gt;form&lt;/code&gt; and &lt;code&gt;setForm&lt;/code&gt; in the parameters of the &lt;code&gt;Form&lt;/code&gt; function and use it in the component.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#handling-functions"&gt;
  &lt;/a&gt;
  &lt;a id="functions"&gt;&lt;/a&gt;Handling Functions
&lt;/h2&gt;

&lt;p&gt;In react-typescript, you need to mention the type of output that function is giving.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Here in this example we have called &lt;code&gt;mapList()&lt;/code&gt; function to map through the array of list and give table row as an output, which is a JSX element.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4gu1joEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmce8pxggkr0he0lxiom.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4gu1joEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmce8pxggkr0he0lxiom.jpg" alt="function image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To mention the output type of this function, add &lt;code&gt;: JSX.Element[]&lt;/code&gt; after the parameters, which denotes that the function is supposed to return an array of JSX elements.&lt;/li&gt;
&lt;li&gt;An interesting thing to note is that we have written a nested return statement because the first return points towards the mapping function.&lt;/li&gt;
&lt;li&gt;However we aren't supposed to return the mapping function and thus typescript would give an error if we had only one return statement since we have mentioned our return type as &lt;code&gt;JSX.Element[]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We did a nested return statement inside the map function so that it specifically returns a pure JSX element ie. a table row in this case.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Protip: If you aren't sure what the return type is,hover over the function to know it's return type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alternatively if a function isn't returning anything, mention it's null return type as &lt;code&gt;:void&lt;/code&gt; after parameters in this way :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const randomFunction = (): void =&amp;gt; {
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#handling-events"&gt;
  &lt;/a&gt;
  &lt;a id="events"&gt;&lt;/a&gt;Handling Events
&lt;/h2&gt;

&lt;p&gt;For handling events with react typescript we will take a look at the following DOM events called by the following JSX elements in &lt;code&gt;Form&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input className="inputBox" type='text' name="name" value={input.name} onChange={(e) =&amp;gt; handleChange(e)} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;textarea className="inputBox" name="review" value={input.review} onChange={(e) =&amp;gt; handleChange(e)}&amp;gt;&amp;lt;/textarea&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the &lt;code&gt;input&lt;/code&gt; tag has a DOM property called &lt;code&gt;onChange&lt;/code&gt; which calls &lt;code&gt;handleChange&lt;/code&gt; when an event is triggered.&lt;br&gt;
For this we create a function which knows that it will be recieving an HTML element in parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const handleChange = (e: React.ChangeEvent&amp;lt;HTMLInputElement | HTMLTextAreaElement&amp;gt;): void =&amp;gt; {
        setInput({
            ...input,
            [e.target.name]: e.target.value
        })
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Here we are declaring that &lt;code&gt;e&lt;/code&gt; will either be of type &lt;code&gt;React.ChangeEvent&amp;lt;HTMLInputElement&amp;gt;&lt;/code&gt; which is what the &lt;code&gt;input&lt;/code&gt; tag will send. &lt;/li&gt;
&lt;li&gt;And since for the movie review field we are using a textarea tag instead of an input tag the &lt;code&gt;e&lt;/code&gt; could also be &lt;code&gt;React.ChangeEvent&amp;lt;HTMLTextAreaElement&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Thus the entire type definition of &lt;code&gt;e&lt;/code&gt; can be written as &lt;code&gt;e: React.ChangeEvent&amp;lt;HTMLInputElement | HTMLTextAreaElement&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We need to add &lt;code&gt;:void&lt;/code&gt; to specify that this function won't be returning anything.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the second example we will take a look at the &lt;code&gt;onClick&lt;/code&gt; event called by the form submit button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button className="button" type="submit" onClick={(e) =&amp;gt; handleClick(e)}&amp;gt;Submit&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const handleClick = (e: React.MouseEvent&amp;lt;HTMLButtonElement&amp;gt;): void =&amp;gt; {
        e.preventDefault();
        if (!input.name || !input.rate) {
            return
        }
        setForm([...form, {
            name: input.name,
            rate: parseInt(input.rate),
            review: input.review
        }])
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar to &lt;code&gt;handleChange&lt;/code&gt; function the &lt;code&gt;handleClick&lt;/code&gt; function takes a proper type definition of &lt;code&gt;e&lt;/code&gt; which in this case is &lt;code&gt;React.MouseEvent&amp;lt;HTMLButtonElement&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's it for this crash course! Hope this gives you a fair enough idea of how to use typescript in react. Keep learning and have a great day!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ViOZQTTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/d2/dc/98/d2dc98de6dd20c4a34abf3ae1ee1ef49.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ViOZQTTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/d2/dc/98/d2dc98de6dd20c4a34abf3ae1ee1ef49.gif" alt="happy gif"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Build a Twitter Reaction Counter Using Fauna, Netlify and the Nuxt framework.</title>
      <author>uma victor</author>
      <pubDate>Wed, 23 Jun 2021 17:25:55 +0000</pubDate>
      <link>https://dev.to/umavictor6/build-a-twitter-reaction-counter-using-faunadb-netlify-and-the-nuxt-framework-3mc1</link>
      <guid>https://dev.to/umavictor6/build-a-twitter-reaction-counter-using-faunadb-netlify-and-the-nuxt-framework-3mc1</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Fauna is at the peak of serverless databases and providing scalable and secure infrastructure to organizations and individuals with easy integration with various frameworks. This article will build a Twitter counter with Fauna, Netlify, and the Nuxt framework. I used Fauna as my serverless database of choice because of its high scalability and consistency.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#audience"&gt;
  &lt;/a&gt;
  Audience
&lt;/h2&gt;

&lt;p&gt;This article will be easier to follow if you have intermediate Vue.js/Nuxt.js knowledge. You should also know how to deploy a Nuxt project on Netlify.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h2&gt;

&lt;p&gt;After reading this article, you will know how to use a serverless database like Fauna with a Nuxt jamstack site to create a twitter counter .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-we-need"&gt;
  &lt;/a&gt;
  What We Need
&lt;/h2&gt;

&lt;p&gt;The purpose of this tutorial is to implement a kind of Twitter reaction counter in a blog post. I will be using the personal portfolio website I quickly built as a reference during this tutorial. In the next paragraph, we will set up Netlify and Fauna. We will be using the Nuxt content module as our content management system to write our blog posts and the blog slug to identify the blog post and properly route each article. Slug will be of great use as we implement the reaction system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-project"&gt;
  &lt;/a&gt;
  Set-up Project
&lt;/h2&gt;

&lt;p&gt;First, we will set up a Fauna account. To start, navigate to their official site, create an account with them &lt;a href="https://dashboard.fauna.com/accounts/register"&gt;(here)&lt;/a&gt;, and then log into the account and create our database for the project. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--USyQlggs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B53A232721A6E3CA9ACE240FD32EFB00EDC78C7EC34DE5BE0C32C02304FF9A8D_1623100173379_createDB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--USyQlggs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B53A232721A6E3CA9ACE240FD32EFB00EDC78C7EC34DE5BE0C32C02304FF9A8D_1623100173379_createDB.png" alt="Create Database"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We need a way to store the reaction counter for the articles in our blogs, so we add a collection in our new database to do this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WazVQDhz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B53A232721A6E3CA9ACE240FD32EFB00EDC78C7EC34DE5BE0C32C02304FF9A8D_1623100792260_collection.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WazVQDhz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B53A232721A6E3CA9ACE240FD32EFB00EDC78C7EC34DE5BE0C32C02304FF9A8D_1623100792260_collection.png" alt="collection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create an index that allows for easy organization and retrieval of documents by attributes according to their queried way&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CmccB19c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B53A232721A6E3CA9ACE240FD32EFB00EDC78C7EC34DE5BE0C32C02304FF9A8D_1623151523716_myindex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CmccB19c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B53A232721A6E3CA9ACE240FD32EFB00EDC78C7EC34DE5BE0C32C02304FF9A8D_1623151523716_myindex.png" alt="add  index"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the image above, we create an index named “reaction_count” under the reactions collection created to use as the source collection. In the terms field, we have added data.slug as one of the terms that can be searched.&lt;/p&gt;

&lt;p&gt;Using our Fauna configuration, we generate our Fauna API key that we can use in our Nuxt application to query our &lt;code&gt;reaction_counter_database&lt;/code&gt; successfully. To do this, we go to the dashboard and click on the security section to generate the API.&lt;br&gt;
  When we generate the API, we have to store it somewhere safe, like our environment variable file as &lt;code&gt;YOUR_FAUNA_SECRET_KEY&lt;/code&gt;, so that it cannot be accessed by a third party.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-fauna-in-our-nuxt-app"&gt;
  &lt;/a&gt;
  Installing Fauna in our Nuxt App
&lt;/h2&gt;

&lt;p&gt;Now we can set up Fauna in our Nuxt application, by installing the fauna package.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save faunadb 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;When setting up my Nuxt project, i had already selected the &lt;code&gt;@nuxtjs/axios&lt;/code&gt; plugin in making API request, so keep this in mind. You can manually install it by running:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @nuxtjs/axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Also, in your Nuxt config file you can add in the modules&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default {
  modules: ['@nuxtjs/axios']
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;In the &lt;code&gt;.env&lt;/code&gt; file created at the root of our application, we set our fauna API key&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;YOUR_FAUNA_SECRET_KEY = THE_KEY
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;We want to be able to to test our app in development so we set configuration for the local and development deployment link like this in our Nuxt config file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        publicRuntimeConfig: {
            axios: {
              baseURL: process.env.NODE_ENV === 'production' ? process.env.BASE_URL || 'http://localhost:8000/' : 'http://localhost:8000/',
            }
          },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if we run the app locally we have it running at port &lt;code&gt;8000&lt;/code&gt; , this is to avoid any errors when running our serverless function&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#securing-faunas-secret-key-on-netlify"&gt;
  &lt;/a&gt;
  Securing Fauna's Secret Key on Netlify
&lt;/h2&gt;

&lt;p&gt;We want to hide our Fauna API secret from prying eyes. Use of Netlify functions to protect your Fauna API secret. Netlify functions, based on AWS lambda, give you powerful abilities when building serverless functions allowing you to auto-scale your projects. In simple terms, they are functions that run on the server. To do this, you can visit Netlify and add the environmental variables we defined earlier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UqLZ1fs6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B53A232721A6E3CA9ACE240FD32EFB00EDC78C7EC34DE5BE0C32C02304FF9A8D_1623186581375_faunasecret.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UqLZ1fs6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B53A232721A6E3CA9ACE240FD32EFB00EDC78C7EC34DE5BE0C32C02304FF9A8D_1623186581375_faunasecret.png" alt="API key"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We store our Fauna secret key here to query our Fauna database when we deploy successfully. After setting up Netlify, Fauna, and Nuxt, we can dive into writing code. &lt;em&gt;Yayy!!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-our-fauna-functions"&gt;
  &lt;/a&gt;
  Writing our Fauna Functions
&lt;/h2&gt;

&lt;p&gt;When our page loads, we want to fetch all the reactions on our blog and want to be able to increase the reaction count. The Fauna functions are what we will focus on implementing for now.&lt;br&gt;
Write a function that allows us to fetch our reaction counter, but first, create a functions folder at the root of our Nuxt project, and in this folder, we create a fetch_reactions.js file to write our fetch reaction functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;: Once deployed, Netlify automatically locates the functions folder where all our serverless functions are located.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    const faunadb = require('faunadb');
    exports.handler = async (event) =&amp;gt; {
      const q = faunadb.query;
      const client = new faunadb.Client({
        secret: process.env.YOUR_FAUNA_SECRET_KEY,
      });
      const { slug } = event.queryStringParameters;
      if (!slug) {
        return {
          statusCode: 400,
          body: JSON.stringify({
            message: 'Blog slug not available',
          }),
        };
      }
      const doesDocExist = await client.query(
        q.Exists(q.Match(q.Index('reaction_count'), slug))
      );
      if (!doesDocExist) {
        await client.query(
          q.Create(q.Collection('reactions'), {
            data: { slug: slug, reactions: 1 },
          })
        );
      }
      const document = await client.query(
        q.Get(q.Match(q.Index('reaction_count'), slug))
      );
      return {
        statusCode: 200,
        body: JSON.stringify({
          reactions: document.data.reactions,
        }),
      };
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Several things are going on above; we initialized Fauna and set up the Fauna client with our secret password. We check if the bog slug is provided as a query parameter, If it isn't, we return a status code of 400. After doing this, we check if the Fauna document that we created exists. If it does not exist, we create a new document with our reaction collection, and set the initial reaction count to &lt;code&gt;1&lt;/code&gt; using our slug as a unique identifier. We send a query for the reaction_count index we created and retrieve our reactions and return the reaction count of the blog.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#increase-reaction-count-function"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Increase Reaction Count Function&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The primary purpose of this function is to increment the reaction count in our blog post. As we will see below, it is almost the same as the fetch reaction function. The difference is that we are increasing the reaction count. &lt;br&gt;
&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;: This function is the function that will be called when a reader on the blog post clicks the reaction button.&lt;/em&gt;&lt;br&gt;
To do this, we create a new file in our functions folder called increment_reactions.js and paste the code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const faunadb = require('faunadb');
    exports.handler = async (event) =&amp;gt; {
      const q = faunadb.query;
      const client = new faunadb.Client({
        secret: process.env.YOUR_FAUNA_SECRET_KEY,
      });
      const { slug } = event.queryStringParameters;
      if (!slug) {
        return {
          statusCode: 400,
          body: JSON.stringify({
            message: 'Blog slug not available',
          }),
        };
      }
      const doesDocExist = await client.query(
        q.Exists(q.Match(q.Index('reaction_count'), slug))
      );

      if (!doesDocExist) {
        await client.query(
          q.Create(q.Collection('reactions'), {
            data: { slug: slug, reactions: 1 },
          })
        );
      }
      const document = await client.query(
        q.Get(q.Match(q.Index('reaction_count'), slug))
      );
      await client.query(
        q.Update(document.ref, {
          data: {
            reactions: document.data.reactions + 1,
          },
        })
      );
      const updatedDocument = await client.query(
        q.Get(q.Match(q.Index('reaction_count'), slug))
      );
      return {
        statusCode: 200,
        body: JSON.stringify({
          reactions: updatedDocument.data.reactions,
        }),
      };
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we query our database, we increment the reaction counter by &lt;code&gt;1&lt;/code&gt; by running an update in our database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-our-functions-in-our-nuxt-app"&gt;
  &lt;/a&gt;
  Using Our Functions In Our Nuxt App
&lt;/h2&gt;

&lt;p&gt;Using the functions we created earlier, we will create a Twitter love reaction button using SVG and assign a click event. When we click on the love reaction, a function runs that accesses our serverless functions that fetch and increment the love reaction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt;  &lt;em&gt;When we deploy our application, our functions can be located at .netlify/functions/OUR_FUNCTION_NAME&lt;/em&gt;&lt;br&gt;
In our component folder in our application, we will create a TwitterReaction.vue component where we will house our love reaction and button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    // TwitterReaction.vue
    &amp;lt;template&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;button @click="addReaction" class="focus:outline-none"&amp;gt;
                {{ initialReaction }}
                &amp;lt;svg
                    class="w-6 h-6"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                &amp;gt;
                    &amp;lt;path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
                    &amp;gt;&amp;lt;/path&amp;gt;
                &amp;lt;/svg&amp;gt;
            &amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/template&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see above that we have addReaction function that runs when we click the button. The following function below runs in our script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    // TwitterReaction.vue
    &amp;lt;script&amp;gt;
    export default {
        data() {
            return {
                initialReaction: null
            }
        },
        async fetch() {
            const { data } = await this.$axios.get(
                `/.netlify/functions/fetch_reactions?slug=${this.$route.params.slug}`
            )
            this.initialReaction = data.reactions
        },
        fetchOnServer: false,
        methods: {
            addReaction() {
                this.initialReaction++
                this.incrementLikes()
            },
            async incrementLikes() {
                await this.$axios.post(
                    `/.netlify/functions/increment_reactions?slug=${this.$route.params.slug}`
                )
            }
        }
    }
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What happens above is we set up a reactive reaction counter &lt;code&gt;initialReaction&lt;/code&gt;, and using the fetch_reactions functions we fetch the reactions and set it to our &lt;code&gt;initialReaction&lt;/code&gt;. Since we are using static mode, we set &lt;code&gt;fetchOnServer&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; to ensure the fetch hook is called whenever our component is mounted.&lt;br&gt;
Then whenever a reader clicks on the reaction button, we run the &lt;code&gt;addReaction&lt;/code&gt; method, which increments our reaction count.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Yayy!&lt;/em&gt; We have finally come to the end of the tutorial. In this tutorial, we learned how to use a serverless database in a jamstack site, we also looked at setting up Netlify and hiding API keys. In the end, we created a  “Twitter-like” reaction counter.&lt;br&gt;
If you have any questions, feel free to send me a message on &lt;a href="https://twitter.com/umavictor_"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Resources&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Read more about &lt;a href="https://www.netlify.com/products/functions/"&gt;Netlify Functions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.fauna.com/fauna/current/api/fql/indexes"&gt;Indexing&lt;/a&gt; in Fauna&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/uma-victor1/portfolio"&gt;Github Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>faunadb</category>
      <category>nuxt</category>
      <category>netlify</category>
    </item>
    <item>
      <title>Career Development Tips to Help You Keep Ahead of the Curve</title>
      <author>Krowser Web Services </author>
      <pubDate>Wed, 23 Jun 2021 16:56:07 +0000</pubDate>
      <link>https://dev.to/krowser/career-development-tips-to-help-you-keep-ahead-of-the-curve-2957</link>
      <guid>https://dev.to/krowser/career-development-tips-to-help-you-keep-ahead-of-the-curve-2957</guid>
      <description>&lt;p&gt;In the creative industry, everything can change in the blink of an eye – or the click of a mouse. So, how do you ensure your skills keep up with the latest technologies, trends and standards? That's the million-dollar question.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure out what you stink at&lt;/strong&gt;&lt;br&gt;
While this isn't groundbreaking career advice, it is important. If you have a professional weak point, fix it. Take it upon yourself to identify your skill gaps and work to fill them day in and day out. Once you correct one issue, move on to the next. As a creative professional, if you're not willing to constantly improve your skill set, you're in the wrong field. It takes passion to succeed in this industry and when you don't have it, your weaknesses become more apparent as the days wear on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn something new every day&lt;/strong&gt;&lt;br&gt;
In addition to getting better at what you know, it's important to understand the things you don't. For instance, if you are a web content writer and aren't grasping why account services keeps pushing for more social content, ask them. Get the inside scoop on what the client is looking for. Not only will it help you deliver more targeted work in the next round, but it also can help you better understand the needs of future clients.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Become indispensable&lt;/strong&gt;&lt;br&gt;
Did you hear through the office grapevine that your boss is looking for a writer who is familiar with video game culture? Offer to take up the task. When you can do something that no one else on the team can, like coding or optimizing content for the Web, you have an undeniable advantage, which helps to keep your position in tact. The more of these "added benefits" you can master, the more valuable you become as an employee. The bottom line is if you want to get ahead in your career, you have to be willing to continually learn, adapt and improve.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Engage those around you&lt;/strong&gt;&lt;br&gt;
Are you a big fan of a fellow copywriter's work? Invite that person to lunch so you can pick her brain. Are you fascinated with the impressive output of a particular graphic designer? Shoot him an email and ask about his process. When you engage with other creative professionals, you open yourself up to new ways of thinking.&lt;/p&gt;

&lt;p&gt;They could share a nugget of information that completely redefines your process or alters your method of delivery. Plus, you never know when the opportunity for collaboration may arise. That's how some of the world's most lucrative companies got their start – two people throwing their ideas at one another.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read more&lt;/strong&gt;&lt;br&gt;
Whether it's bookmarking a few blogs or picking up a new novel from your favorite author, we can all benefit from reading more. Don't limit yourself to a specific field or specialty or you'll miss out on a (literal) world full of information. As a writer, I always benefit from keeping up with the industries I'm writing for – from finance and healthcare to consumer goods and advertising. You never know when a new piece of knowledge might click to help you create a million-dollar campaign.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Maintain a good work-life balance&lt;/strong&gt;&lt;br&gt;
This one is a little harder because it's not always in your control. However, a healthy work-life balance can make all the difference between a good career and a great one. Sure, you could stay an extra hour at the office and churn out work that isn't due until tomorrow night. Or you could spend it with your family, get plenty of sleep and produce even better work the next morning.&lt;/p&gt;

&lt;p&gt;Too many of us have come to believe that "the brass" favor workaholics. However, I've come to find that many managers prefer individuals who keep work in check because employees who enjoy a life outside the office are often happier and more creative.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be yourself, always&lt;/strong&gt;&lt;br&gt;
No matter what field you work in or what job title you have, you should always be yourself. The minute you start pretending to be something you're not is when your career development begins to descend. In most cases, a company hires you because they like your work and enjoy your personality. So don't feel pressure to be someone you're not. A strong work ethic and a good personality and eagerness to learn will often transcend any shortcomings you may have.&lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Simple Calculator using Vue and Bootstrap 5</title>
      <author>Carol Skelly</author>
      <pubDate>Wed, 23 Jun 2021 16:51:37 +0000</pubDate>
      <link>https://dev.to/codeply/simple-calculator-using-vue-bootstrap-5-27bn</link>
      <guid>https://dev.to/codeply/simple-calculator-using-vue-bootstrap-5-27bn</guid>
      <description>

&lt;p&gt;&lt;strong&gt;The HTML Markup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bootstrap 5 provides all the UI styling and responsive behavior. It's a great fit with Vue now that it's no longer dependent on jQuery. The &lt;a href="https://getbootstrap.com/docs/5.0/layout/grid/"&gt;Bootstrap grid&lt;/a&gt; &lt;code&gt;row&lt;/code&gt; &amp;amp; &lt;code&gt;col-*&lt;/code&gt; are used to responsively change the calculator width as screen size changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-xxl-2 col-lg-3 col-md-4 col-sm-6 mx-auto bg-dark rounded-3 shadow-sm p-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control form-control-lg text-success"&lt;/span&gt; &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;"calculator.displayValue"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!-- calculator number pad using grid --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row g-0 text-center mt-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-auto text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row g-1 g-lg-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"(key,i) in keypad"&lt;/span&gt; &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"ms-auto col-3 py-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-dark text-warning w-100"&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"processKey(key.value)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ key.label }}&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-12 pt-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-dark border-secondary btn-lg text-warning w-100 fw-bold lead"&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"processKey('=')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;=&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-12"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"errValue"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"alert alert-warning p-2 text-truncate small"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                              {{ errValue }}
                            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AousKknz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7rxqam8wr064qte264t.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AousKknz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7rxqam8wr064qte264t.gif" alt="Bootstrap 5 Vue Calculator"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;The Vue App Data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Calculator state is kept in it's own data &lt;code&gt;calculator&lt;/code&gt; object to track the &lt;code&gt;displayValue&lt;/code&gt;, &lt;code&gt;firstOperand&lt;/code&gt; and &lt;code&gt;operator&lt;/code&gt;. &lt;code&gt;waitingForSecondOperand&lt;/code&gt; let's us know when it's ready to perform a calculation.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;keypad&lt;/code&gt; array is ordered by how I wanted the keys to render as columns inside the Bootstrap &lt;code&gt;row&lt;/code&gt;...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"(key,i) in keypad"&lt;/span&gt; &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"ms-auto col-3 py-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-dark w-100"&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"processKey(key.value)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ key.label }}&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;displayValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;firstOperand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;waitingForSecondOperand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;errValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;keypad&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;7&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;9&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;The Vue App Methods&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Of course the calculator actually needs to &lt;em&gt;calculate&lt;/em&gt; so I define a series of methods to watch the keystrokes and perform basic math functions. Most of them should be self-explanatory. You will see that &lt;code&gt;errValue&lt;/code&gt; is used to store any errors, and resets upon keypress or clear.&lt;/p&gt;

&lt;p&gt;When a key is pressed, &lt;code&gt;processKey()&lt;/code&gt; is called to determine which key and then call the appropriate function...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;inputDigit()&lt;/code&gt; - when any digit is clicked&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;handleOperator()&lt;/code&gt; - when any operator is clicked&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;equalPressed()&lt;/code&gt; - when the equal sign is clicked &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;inputDecimal()&lt;/code&gt; - to handle the decimal point (.)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;resetCalculator()&lt;/code&gt; - to clear the calculator ('AC')
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;processKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resetCalculator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputDigit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleOperator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleOperator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleOperator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleOperator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equalPressed&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputDecimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;KEY ERROR: in default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;equalPressed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;firstOperand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;displayValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;operator&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstOperand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;displayValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;inputDigit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;displayValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;waitingForSecondOperand&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;waitingForSecondOperand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;waitingForSecondOperand&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;digit&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitingForSecondOperand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;displayValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                &lt;span class="nx"&gt;displayValue&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;digit&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;displayValue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;digit&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;inputDecimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;displayValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;waitingForSecondOperand&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;waitingForSecondOperand&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitingForSecondOperand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// check for existing decimal&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;displayValue&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayValue&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;dot&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;handleOperator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextOperator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;firstOperand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;displayValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;waitingForSecondOperand&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;displayValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;waitingForSecondOperand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nextOperator&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstOperand&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstOperand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstOperand&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstOperand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitingForSecondOperand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nextOperator&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstOperand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secondOperand&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;firstOperand&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;secondOperand&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;firstOperand&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;secondOperand&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;firstOperand&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;secondOperand&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secondOperand&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ERROR: Cannot divide by 0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;firstOperand&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;secondOperand&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;secondOperand&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;resetCalculator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstOperand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitingForSecondOperand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codeply.com/v/XhWpdMVUwB"&gt;Demo&lt;/a&gt; | &lt;a href="https://codeply.com/p/XhWpdMVUwB"&gt;Source&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;As always, you can &lt;a href="https://www.codeply.com/p?starter=Bootstrap%205"&gt;play with the latest Bootstrap 5&lt;/a&gt;, and find more handy &lt;a href="https://www.codeply.com/tagged/vue"&gt;Vue snippets and examples on Codeply&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>vue</category>
      <category>bootstrap</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Kirby</title>
      <author>Saba Alikhani</author>
      <pubDate>Wed, 23 Jun 2021 16:28:40 +0000</pubDate>
      <link>https://dev.to/fydsa/kirby-2ch3</link>
      <guid>https://dev.to/fydsa/kirby-2ch3</guid>
      <description>&lt;p&gt;Cute little Kirby using css and html&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/fydsa/embed/eYvwVKm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Welcome Thread - v130</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 23 Jun 2021 16:27:59 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v130-8kd</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v130-8kd</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/Jsy4fltgRzBunW9Nk9/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Jsy4fltgRzBunW9Nk9/giphy.gif" alt="jello saying hello"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>CSS Positioning</title>
      <author>Divyanshu Soni</author>
      <pubDate>Wed, 23 Jun 2021 16:16:24 +0000</pubDate>
      <link>https://dev.to/dcssoni/css-positioning-2360</link>
      <guid>https://dev.to/dcssoni/css-positioning-2360</guid>
      <description>&lt;p&gt;In this article, I'll discuss what is CSS position property, how you can use it to create a variety of styling solutions on the webpage. And of course with some use cases to practice. &lt;/p&gt;

&lt;p&gt;Let's dive in! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction-html-document-flow"&gt;
  &lt;/a&gt;
  Introduction :  HTML Document Flow
&lt;/h3&gt;

&lt;p&gt;The HTML elements in a webpage that are described higher in the HTML file will be rendered in the browser earlier than the elements that are described lower as the HTML documents are displayed on the webpage from top to bottom.&lt;/p&gt;

&lt;p&gt;The order in which the elements are displayed on a page by default is called normal flow. According to MDN :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Elements on a webpage layout are in the normal flow, if you have not applied any CSS to change the way they behave. And, as we began to discover, you can change how elements behave either by adjusting their position in that normal flow, or removing them from it altogether. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Refer &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Normal_Flow"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Changing the values of the &lt;code&gt;position&lt;/code&gt; property will change the flow of the document, which is a process called positioning. Let's learn different types of positioning and understand how to work with them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#absolute-positioning"&gt;
  &lt;/a&gt;
  &lt;em&gt;Absolute Positioning&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;This refers to positioning relative to the bounds of the parent element, out of the normal flow.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element {
  position: absolute;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If there is no parent element, then it is set relative to the bounds of the browser viewport. So, with absolute positioning, the browser window will act as a parent from whose borders the distance is set:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pIgRMr3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624354764917/LNDiSeIsn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pIgRMr3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624354764917/LNDiSeIsn.png" alt="Browser"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's consider an example, in the picture below four blocks are positioned in normal flow i.e. their position is set to static by default.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ClKeMC---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624355989078/wW9v6MH9Y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ClKeMC---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624355989078/wW9v6MH9Y.png" alt="Blocks in Browser"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's change the positioning of the element 3 to absolute.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Nw4fiTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codepen.io/divyanshu-soni/pen/bGqyMPK" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Nw4fiTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codepen.io/divyanshu-soni/pen/bGqyMPK" alt="Codepen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What happened here?? Basically the absolute positioning pulls the element out of the normal flow and all the blocks other than the block 3 in the normal flow neatly follow each other and occupy their space on the webpage. Here block 3 rises to the absolute level and since it is not in the plane between the blocks 1, 2 and 4 they shift towards each other.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LF3eLx3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624359075725/tQR5t2Cp7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LF3eLx3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624359075725/tQR5t2Cp7.png" alt="Screenshot 2021-06-22 162055.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;So, it can be said that the absolute plane lies on the top of the static plane. Keep this feature in mind while working with Absolute positioning.&lt;br&gt;
*&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#relative-positioning"&gt;
  &lt;/a&gt;
  &lt;em&gt;Relative Positioning&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;A relatively positioned element is set relative to its original position on the page. Here is the syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element {
  position: relative;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see it, let's consider the same four blocks, but this time, only block 3 will be &lt;code&gt;position: relative&lt;/code&gt;, and the rest will remain in the normal flow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t7uwNPOL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624359928095/5FJOZaq-L.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t7uwNPOL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624359928095/5FJOZaq-L.png" alt="Block-3 Position relative"&gt;&lt;/a&gt;&lt;br&gt;
As expected, block-3 moved up by the distance that was indicated, but pay attention to the empty space where the third element had been earlier.&lt;/p&gt;

&lt;p&gt;What happened here?? The block-3 exists on the page materially (the display of other elements around this block is calculated based on the space it occupies), but it still rises to a higher plane as an absolutely positioned element would. That's why the block-3 overlapped with block-2 and block-4 stayed in the place and did not move up.&lt;/p&gt;

&lt;p&gt;What's the use of it ? &lt;br&gt;
This property of CSS allows you to move the elements on the page anywhere without breaking the layout of the site because the occupied space remains duly occupied.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fixed-positioning"&gt;
  &lt;/a&gt;
  &lt;em&gt;Fixed Positioning&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Fixed positioning locks the element on the page relative to the visible part of the browser's viewport and maintains that position during vertical scrolling. Here is the syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element {
  position: fixed;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see an example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qRirLu4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codepen.io/divyanshu-soni/pen/xxqNzJd%3Feditors%3D1100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qRirLu4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codepen.io/divyanshu-soni/pen/xxqNzJd%3Feditors%3D1100" alt="Codepen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sticky-positioning"&gt;
  &lt;/a&gt;
  &lt;em&gt;Sticky Positioning&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;In terms of functionality, the element on which sticky positioning is applied, it is between fixed positioning and relative positioning. The element is positioned relatively until the page is scrolled to a certain point, after which the positioning will be fixed.&lt;/p&gt;

&lt;p&gt;Here is the syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element {
  position: sticky;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see an example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8EEfm1bl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codepen.io/divyanshu-soni/pen/gOmJQoY%3Feditors%3D1100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8EEfm1bl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codepen.io/divyanshu-soni/pen/gOmJQoY%3Feditors%3D1100" alt="Codepen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;em&gt;Conclusion&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Thanks to positioning, we can flexibly control the position of the elements on&lt;br&gt;
 the page. It is used to create a variety of styling solutions for page &lt;br&gt;
interfaces smoothly.&lt;/p&gt;

&lt;p&gt;That's all for now. Thank you for reading! Do share your comments here.&lt;/p&gt;

&lt;p&gt;Follow me for more such blogs and express your thoughts about the article on &lt;a href="https://twitter.com/divyanshu_soni_"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Further Resources -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position"&gt;CSS Positioning on MDN&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://css-tricks.com/almanac/properties/p/position/"&gt;CSS Tricks&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
