<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Incident Retro: Failing Comment Creation + Erroneous Push Notifications </title>
      <author>Molly Struve (she/her)</author>
      <pubDate>Wed, 14 Jul 2021 20:53:41 +0000</pubDate>
      <link>https://dev.to/devteam/incident-retro-failing-comment-creation-erroneous-push-notifications-55dj</link>
      <guid>https://dev.to/devteam/incident-retro-failing-comment-creation-erroneous-push-notifications-55dj</guid>
      <description>&lt;p&gt;&lt;em&gt;This incident retro was tougher than most to share because, despite the seriousness of the issue, it affected only a very small percentage of our user base. However, we learned some incredibly valuable lessons and I think it's only right that I give others the chance to learn from our mistake as well.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;On Thursday July 8th, we merged a &lt;a href="https://github.com/forem/forem/pull/14121"&gt;very large PR&lt;/a&gt; that updated our code to start using our new User Settings instead of the deprecated fields on users. The goal of moving these fields to user settings is to lighten up the user model and make these types of settings more configurable on a per-Forem basis.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;On July 9th around midday, it was brought to our attention &lt;a href="https://github.com/forem/forem/issues/14183"&gt;through a bug report&lt;/a&gt; that the comment creation experience on the frontend seemed to be broken. At this point folks on the team started looking into the problem. Using &lt;a href="https://www.honeycomb.io/"&gt;Honeycomb&lt;/a&gt;, we were able to confirm that the problem started when the User Settings PR was deployed which made it the prime suspect. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tOQncc1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://forem.team/remoteimages/uploads/articles/acuvsc0l8y4135nois0f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tOQncc1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://forem.team/remoteimages/uploads/articles/acuvsc0l8y4135nois0f.png" alt="Picture of a graph where the line is steady under 100ms and jumps to thousands"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I immediately dove into the PR and quickly found &lt;a href="https://github.com/forem/forem/pull/14121/files#diff-56d67da7087534bc7d4cffd953e00dc2e3eb41047f1e82f3124cd6d69c509873R38"&gt;the line of code that had been broken&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jgjfqocd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://forem.team/remoteimages/uploads/articles/jh78q3nsi71vrdyekkk0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jgjfqocd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://forem.team/remoteimages/uploads/articles/jh78q3nsi71vrdyekkk0.png" alt="Github PR dif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We had incorrectly removed the &lt;code&gt;user_ids&lt;/code&gt; scope from the filtering used to collect user IDs for sending mobile push notifications. This was causing us to attempt to grab notification settings and IDs for all users with mobile notifications turned on which was often timing out. These timeouts would occur after a comment was created so the comment in most cases still existed but we never returned a success response to the frontend. This caused the frontend to freeze creating a bad experience for the user. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#fix"&gt;
  &lt;/a&gt;
  Fix
&lt;/h2&gt;

&lt;p&gt;In order to remedy this situation, we quickly added back the scope and deployed. Immediately the errors and timeouts went away and things returned to normal for comment creation. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZBKKartg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://forem.team/remoteimages/uploads/articles/vpicn144aagfpsrbnnhs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZBKKartg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://forem.team/remoteimages/uploads/articles/vpicn144aagfpsrbnnhs.png" alt="Graph of increased duration returning to normal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, we concluded that possibly some extra notifications had been sent but that the majority of these requests had timed out so we assumed we were in a good state now. I looked for some sort of push notification model in our app where we might have stored unsent notifications but upon not finding one figured we were clear. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#more-problems"&gt;
  &lt;/a&gt;
  More Problems
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;July 9th ~12pm EDT&lt;/strong&gt;: Unfortunately, the above assumption was incorrect. Just before midnight eastern, a team member reported she was getting random notifications on her phone. At this point, our mobile engineer jumped in to investigate and found that we had a ton of push notifications enqueued in Redis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;July 9th ~2am EDT&lt;/strong&gt;: Mobile engineer posts about the issue in our #emergency Slack channel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;July 9th ~7am EDT&lt;/strong&gt;: On-call engineer wakes up and sees the #emergency Slack message and jumps in to help investigate and try to resolve the issue. Shortly after, I also jumped in. It was at this point that I learned all about how our push notification system worked. We use &lt;a href="https://github.com/rpush/rpush"&gt;RPush&lt;/a&gt; for communicating with various push-notification services. RPush stores the data about the push notifications in Redis for quick insertion and removal times. We quickly assessed that we had a large number of push notifications enqueued in Redis waiting to be sent, despite the solution deployed the day before. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#fix-2"&gt;
  &lt;/a&gt;
  Fix 2
&lt;/h2&gt;

&lt;p&gt;Upon realizing we had all of these records in Redis, we took the following steps to resolve the issue:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Removal of the iOS cert from Heroku to prevent sending any notifications. Without this cert we could ensure we would not send anymore bad notifications and that would give us time to fix the data in Redis.&lt;/li&gt;
&lt;li&gt;To be safe, we removed all of the &lt;code&gt;PushNotifications::DeliveryWorker&lt;/code&gt; jobs from Sidekiq so as not to be pinging Redis for the keys causing our key collection to slow down. 

&lt;ul&gt;
&lt;li&gt;At the same time, we looped through all of the keys in Redis and collected all of the rpush ones. These included all delivered and undelivered keys. There were 1.2 million rpush keys so this process took about 30 mins. We used the below script:
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;redis&lt;/span&gt;
&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;key_collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;"0"&lt;/span&gt;
  &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;
  &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;
  &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;key_collection&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'rpush:notifications'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Once we had the keys collected we double checked that they were the keys we wanted and then we deleted them ALL in batches of 10 using this code:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;key_collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each_slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;del&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Once the keys were gone, we double checked the count and then added back the iOS cert to Heroku. &lt;/li&gt;
&lt;li&gt;After Heroku restarted, we ran a test to confirm that the notifications were back to sending and that we were recording delivered notifications correctly again in Redis. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#impact"&gt;
  &lt;/a&gt;
  Impact
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#comment-creation"&gt;
  &lt;/a&gt;
  Comment Creation
&lt;/h3&gt;

&lt;p&gt;The comment creation flow on the frontend was broken for 30 hours after the UserSettings PR was deployed on July 8th. However, comment creation levels remained steady.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;irb(main):001:0&amp;gt; Comment.where(created_at: 36.hours.ago..Time.now).count
=&amp;gt; 762
irb(main):002:0&amp;gt; Comment.where(created_at: 72.hours.ago..36.hours.ago).count
=&amp;gt; 857
irb(main):003:0&amp;gt; Comment.where(created_at: 108.hours.ago..72.hours.ago).count
=&amp;gt; 852
irb(main):004:0&amp;gt; Comment.where(created_at: 144.hours.ago..108.hours.ago).count
=&amp;gt; 756
irb(main):005:0&amp;gt; Comment.where(created_at: 180.hours.ago..144.hours.ago).count
=&amp;gt; 587
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In total, there were 934 comments that were affected by the broken frontend interface. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jjPZCF_T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3csl8linhu5fzipww4gq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jjPZCF_T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3csl8linhu5fzipww4gq.png" alt="Honeycomb.io graph showing a total count of 934 comments over a 30 hour period"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#push-notifications"&gt;
  &lt;/a&gt;
  Push Notifications
&lt;/h3&gt;

&lt;p&gt;Given DEV is early on in its mobile journey, only 0.2% of our users have registered devices that are able to receive push notifications. This means that only 0.2% of our users were affected by this incident. We consider ourselves lucky that we were able to expose some of these issues and have this incident remain very contained. &lt;/p&gt;

&lt;p&gt;Since the numbers of users affected was small, we decide to proactively reach out to all of those folks via email to apologize and explain why they &lt;em&gt;might&lt;/em&gt; have received erroneous notifications. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learnings"&gt;
  &lt;/a&gt;
  Learnings
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#large-prs"&gt;
  &lt;/a&gt;
  Large PRs
&lt;/h3&gt;

&lt;p&gt;Large PRs naturally come with more risk. The bug that kicked off this stream of events was a small change in a very large PR that got missed by multiple folks. For starters, the diff for the line was not particularly helpful in recognizing the change that caused the issue. In addition, there were so many lines that it was easy to overlook. Breaking down PRs is one way to prevent this. &lt;/p&gt;

&lt;p&gt;However, there are times when large, wide spread changes need to be made and in those cases you have to rely on your test suite. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#missing-tests"&gt;
  &lt;/a&gt;
  Missing tests
&lt;/h3&gt;

&lt;p&gt;The feature that broke was completely untested. Had we been testing that feature properly I think there is a good chance the bug could have been caught. Immediately after pushing the hotfix &lt;a href="https://github.com/forem/forem/pull/14187"&gt;I added a test&lt;/a&gt; to ensure this never happens again. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technical-feature-education"&gt;
  &lt;/a&gt;
  Technical feature education
&lt;/h3&gt;

&lt;p&gt;After fixing the bug, none of us working on the problem were well educated about how our Push Notification systems worked. Being late on a Friday, we skimmed the code and concluded we would be good to go. This ended up being the wrong assumption as we later learned Saturday that push notifications, unlike app ones, are stored and enqueued via Redis. I think it's more important than ever that we are somehow sharing and educating each other about some of these larger features as we roll them out. &lt;/p&gt;

&lt;p&gt;Thankfully, we do &lt;a href="https://docs.forem.com/backend/push-notifications/"&gt;have some great Push Notification documentation&lt;/a&gt; but it was never sought out during the incident. Is there a way we can make docs like this more visible? During the incident we were all heads down in the code, should we maybe have some sort of URL link in the code to the docs?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#being-more-intentional"&gt;
  &lt;/a&gt;
  Being more intentional
&lt;/h3&gt;

&lt;p&gt;I could have very easily reached out to our mobile team on Friday evening to double check that we were in a good state for Push Notifications. Once again, the whole Friday evening and wanting to be done caused me to accept my assumptions rather than challenge and check them. &lt;/p&gt;

&lt;p&gt;One easy way to prevent something like this is to use a checklist. A checklist (heavily used in aviation because it has been shown to be key in preventing incidents,) is an easy way to make sure you never miss something and are deliberate and intentional with your decisions. We have great checklists for handling Heroku incidents in our internal Gitbook. However, we don't have a general incident on-call checklist which we plan to add.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#incident-response"&gt;
  &lt;/a&gt;
  Incident Response
&lt;/h2&gt;

&lt;p&gt;Before I dive into specifics, I want to point out that this is the first larger incident we have had in a while. Incidents being rare is GREAT! But, it also means that our incident response was a bit rusty and our documented incident processes were a bit out of date to handle this situation. Going forward we will be taking a closer look at all of these things to ensure we are keeping them relevant and useful based on the current state of our application and team. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#broken-comment-creation-reporting-flow"&gt;
  &lt;/a&gt;
  Broken Comment Creation Reporting Flow
&lt;/h3&gt;

&lt;p&gt;The initial comment creation problem was reported by a DEV user via a GitHub issue and seen about 11 hours later by our internal engineering team. GitHub Issues are naturally not a very urgent form of reporting for us since they are handled during working hours. One way we could improve this flow would be to further communicate that urgent support issues need to be emailed to &lt;code&gt;yo@forem.com&lt;/code&gt;. Our customer success team is always monitoring these channels diligently and could more quickly triage and escalate an issue to the team. &lt;/p&gt;

&lt;p&gt;Manual reporting aside, ideally, we should have caught this programmatically with our monitoring by alerting on the increased HTTP request errors that were detected.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wLS6JCOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://forem.team/remoteimages/uploads/articles/ianj96377wcnqd10q0l7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wLS6JCOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://forem.team/remoteimages/uploads/articles/ianj96377wcnqd10q0l7.png" alt="Datadog graphs showing elevated error rates"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Going forward, we plan to set up a monitor to alert us for these changes so that we are the first to find out, rather than relying on users reporting the issue to us. With the proper monitor in place, we could have caught this within a couple of hours instead of over a day. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#broken-push-notifications-reporting-flow"&gt;
  &lt;/a&gt;
  Broken Push Notifications Reporting Flow
&lt;/h3&gt;

&lt;p&gt;We responded to the broken comment creation issue immediately when it was surfaced, however, the followup push notification issues were not. Our engineer correctly pinged the #emergency channel when he realized that we were having problems with notifications but did not escalate the issue and wake up the on-call dev via PagerDuty. &lt;/p&gt;

&lt;p&gt;One way we could streamline this process would be to see if we could set up our #emergency Slack channel to automatically ping PageDuty when a message is posted. Another option is address some of our incident response rustiness by better educating the team on our desired incident response flows. This probably needs to be a reoccurring training that happens periodically so as to prevent processes and knowledge from getting stale as our systems evolve. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technical-remediation"&gt;
  &lt;/a&gt;
  Technical Remediation
&lt;/h3&gt;

&lt;p&gt;One delay we encountered when trying to fix this issue was that the Rpush keys were stored in the same Redis instance as our Rails cache. Given our Rails cache is massive and contains 4+ million keys, looping through all of them to find only the Rpush keys was tedious and took a while. That cache is also very active which caused us to hit some timeouts when we were trying to perform heavier operations on it. &lt;/p&gt;

&lt;p&gt;We could have mitigated this friction by having either a separate Redis instance for Rpush OR by having those keys in a separate database away from our Rails cache keys. Going forward, as we grow our mobile platforms, I think we should make one of the above changes to ensure that we have easy access to these keys and records. It will also ensure that as we grow and scale push notifications we don't have to worry about impacting other systems like our core Rails app. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-everyone"&gt;
  &lt;/a&gt;
  Thanks Everyone 🤗
&lt;/h2&gt;

&lt;p&gt;A lot of people gave up their personal time to come together on Friday and Saturday to mitigate and fix these issues. I truly appreciate the amazing team we have at Forem and their dedication to this software. We learned a lot about our systems in the process which ensures that this incident will not go to waste. I hope others can learn from this as well.&lt;/p&gt;

</description>
      <category>incident</category>
      <category>retro</category>
      <category>postmortem</category>
    </item>
    <item>
      <title>Why Coding Is Crucial To The Future Of Business</title>
      <author>CodeCast</author>
      <pubDate>Wed, 14 Jul 2021 20:24:23 +0000</pubDate>
      <link>https://dev.to/codecast/why-coding-is-crucial-to-the-future-of-business-59gn</link>
      <guid>https://dev.to/codecast/why-coding-is-crucial-to-the-future-of-business-59gn</guid>
      <description>&lt;p&gt;Knowing how to understand even basic code can seem foreign and confusing to someone who has never approached it before. Programming as a whole can be intimidating to approach because it’s vast and varies greatly from industry to industry. As we move forward, the need for people who can code continues to increase in demand. But what makes it such a critical part of business?&lt;/p&gt;

&lt;p&gt;Gone are the days of paper and pen. Even if you’re a small business and you prefer more traditional approaches to some aspects, it’s impossible to avoid doing something online. But for the most part, almost every technical aspect of business is now done online or via technology, and more specifically, through different kinds of software.&lt;/p&gt;

&lt;p&gt;Of course, this means that most businesses need to have a developer at some point. But how does coding fit into this picture outside of requiring developers?&lt;/p&gt;

&lt;p&gt;Knowing The What’s and The Why’s&lt;br&gt;
Even if your business doesn’t have any developers permanently employed, knowing how to communicate what you need from developers is incredibly important. While you don’t need to know how to code, knowing how the moving parts of development works will greatly impact your ability to ask for what you want. Additionally, being able to have a solid understanding of what is going on on the development side of your business will make the communication between yourself and your team's way more fluid.&lt;/p&gt;

&lt;p&gt;In the current climate, it’s nearly impossible to have an effective business without an online presence, and the demand for a solid online presence is only likely to increase. Understanding the behind-the-scenes will not only aid in communication within large companies but allow smaller businesses to be able to take advantage of the online market effectively. Even basic coding courses can allow you to work effectively with low-code platforms to be able to create the necessary pieces for your business.&lt;/p&gt;

&lt;p&gt;Small things like being able to update your own website as needed without having to outsource or rely on external help will impact the efficiency of your business, as well as frankly make you appear way more professional. &lt;/p&gt;

&lt;p&gt;Realistic Timelines and Goals&lt;br&gt;
Coming up with ideas for your business and goals for your company's growth is an essential part of running a good business. However, often there can be a strong disconnect between what someone wants done and how to get it done. This issue is usually seen by looking at projected timelines. Perhaps you have a new idea for your business that you want to be able to get out by the end of summer, and you approach the developers with that information. The developers then respond telling you that with the current workload, that deadline is unrealistic.&lt;/p&gt;

&lt;p&gt;Being able to have a sense of what goes into developing something will allow you to create more realistic timelines, and allow you to better communicate with your developers to create a timeline that works for both them and the business. There are a lot of industries that are known for putting a lot of pressure on their developers to meet set deadlines that sometimes are just not possible. &lt;/p&gt;

&lt;p&gt;If you’re familiar with the launch of Cyberpunk 2077, you are aware of the type of issues that development timelines can create. Cyberpunk was delayed a total of three times with the launch initially anticipated in April of 2020 and was eventually released on December 10th, 2020. While developmental delays are nothing new in the gaming industry, the reason this specific game caught so much attention for its delays was that the game was being advertised and hyped way before it was ready to do so. Some developers even came forward to explain what they believed went wrong. The greater the people in charge’s ability to understand what goes into developing something, the greater the chance of your timelines being more accurate for the company as a whole.&lt;/p&gt;

&lt;p&gt;Cyberpunk was unfortunately released with a lot of issues that they are still fixing today. In addition, they were forced to drop features that had previously been heavily advertised, upsetting a lot of people who had pre-ordered the game. While this is a debated topic in the gaming industry and there is a lot of speculation around what went wrong, I chose to use this example because it showcases the importance of good communication and understanding of the moving parts of the business in all aspects. &lt;/p&gt;

&lt;p&gt;Problem Solving Skills&lt;br&gt;
Knowing how to solve problems effectively is an important skill and one that isn’t as common as people might think. While we have an entire blog coming up about how to think like a programmer, for now, know that coding teaches you how to problem-solve effectively. Once you get past learning the language, an incredibly large volume of writing code is just solving the how and the why. You need to figure out how to make something work despite not having any pieces, or perhaps only broken pieces. &lt;/p&gt;

&lt;p&gt;Taking some basic coding courses can help sharpen your brain into learning to think in different ways when looking at a problem. It’ll train you to break things down and view things from different perspectives. Considering a lot of businesses exist to help people overcome a problem or fill in a need, it’s easy to understand why business and problem solving go hand in hand.&lt;/p&gt;

&lt;p&gt;Coding is also a much more creative field than people think. Often you’re presented with an idea, but how you get from point a to point b is entirely up to you. You can give a large group of developers the exact same problem, and most of them would solve it differently from one another. Learning to approach things in a creative way to come up with solutions is what developers succeed at.&lt;/p&gt;

&lt;p&gt;Patience and Resilience&lt;br&gt;
If you’re going to code, you’re going to need patience, and to be very comfortable with being stuck. Even the most senior developers get stuck on problems for days on end, completely unsure of how to proceed. This was personally one of the most difficult things I had to learn to adjust to when I began to code. Learning how to separate being stuck and being “bad at something”, is a difficult skill to master. Coding can have a way of making you feel incredibly dumb.&lt;/p&gt;

&lt;p&gt;But the more you do it, the more you realise that you learn a lot in those moments you feel like you know nothing. And beyond the actual code, you learn how to be patient and push through those moments. This is a skill that will help anyone in any aspect of their life, but in the ever-changing world of business, it can be invaluable.&lt;/p&gt;

&lt;p&gt;Regardless of what business or industry you belong to, knowing even basic coding skills can make you that much more valuable. The online world is only growing as time goes on and with it the need for developers.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Free hosting using Heroku
</title>
      <author>Shreyas Pahune</author>
      <pubDate>Wed, 14 Jul 2021 19:21:00 +0000</pubDate>
      <link>https://dev.to/shreyazz/free-hosting-using-heroku-1g39</link>
      <guid>https://dev.to/shreyazz/free-hosting-using-heroku-1g39</guid>
      <description>&lt;p&gt;Hey readers 👋🏻,&lt;br&gt;
I hope you all are doing fine, in this blog we are going to discuss about hosting and how to host our own discord bot, which we made in my &lt;a href="https://dev.to/shreyazz/make-a-discord-bot-in-just-30-lines-of-code-44el"&gt;previous blog&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;We are going to use &lt;strong&gt;Heroku&lt;/strong&gt; to host our bot. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-i-mean-when-i-say-host-a-discord-bot"&gt;
  &lt;/a&gt;
  What do I mean when I say 'HOST' a discord bot?
&lt;/h3&gt;

&lt;p&gt;So basically you cant run the program which you made for 24x7 and 365 days, so we need a server to do that.&lt;/p&gt;

&lt;p&gt;The hosting platform has a lot of servers which will serve our discord bot for 24x7 and 365 days, so you and your friends can anytime use it anytime!!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-host-it-now-"&gt;
  &lt;/a&gt;
  Let's host it now 🤖 :
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Sign-up or Log-in to Heroku :&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HXfuWXUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyql0ssmkmuo0210ii1u.PNG" alt="login"&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Create a new app :&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7iDJ1w7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrt9su6x0viar8zlndnh.PNG" alt="second"&gt;&lt;/li&gt;
&lt;li&gt;Click on the new button on the &lt;code&gt;top-right corner&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Click on Create New App&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Name your project and select a region:&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZh12Egh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efxt00tk9z7rqr2dsstt.PNG" alt="third"&gt;&lt;/li&gt;
&lt;li&gt;Click on Create App&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Now you have to push the source code on GitHub repo.

&lt;ol&gt;
&lt;li&gt;Make sure source code does not contain your discord bot TOKEN or any other API key.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Now you will have this screen:

&lt;ol&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--unWWjREM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teajlym42ngt3g66uv01.PNG" alt="connect"&gt;&lt;/li&gt;
&lt;li&gt;Click on the &lt;code&gt;Connect to GitHub&lt;/code&gt; button.&lt;/li&gt;
&lt;li&gt;Then select the repository which you created.&lt;/li&gt;
&lt;li&gt;Once the repo is connected, just press on &lt;code&gt;Enable Automatic Deploys&lt;/code&gt;, which will help us to deploy the new version of our bot automatically whenever the repo is updated.&lt;/li&gt;
&lt;li&gt; Refer to this image 👇🏻&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FDqvxVPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bo686ov9x1m7a56fe1gd.PNG" alt="six"&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Then go the settings tab:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click on &lt;code&gt;Reveal Config Vars&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;👇🏻 &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wVZOLagJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzmhw8inm98fo6v56o1o.PNG" alt="seven"&gt;
&lt;/li&gt;
&lt;li&gt;Inside the config vars enter your key and value pair of your API KEY and Discord Bot's Token. 👇🏻 &lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rlEoEFv2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czzp1vx5rznfizn5x80g.PNG" alt="eight"&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Add a BuildPack:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;BuildPack are scripts that are run when your bot will be deployed. They are used to install dependencies for your bot and configure your environment.&lt;/li&gt;
&lt;li&gt;Click on  add BuildPack 👇🏻 &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FVpmkpJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnwltj1yy5h4wfiaiblb.PNG" alt="buildpack"&gt;
&lt;/li&gt;
&lt;li&gt;Then click on Node.JS 👇🏻 as our bot is made using JS and Node Modules. &lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RBJgcccx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwn3j784kudilbrwvo8e.PNG" alt="add"&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;After these steps, go to the home directory of your project and make a new File with the name of &lt;code&gt;Procfile&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;Procfile&lt;/code&gt; should contain &lt;code&gt;worker node &amp;lt;Source-folder-Name&amp;gt;/&amp;lt;file-which-has-bot's-code&amp;gt;&lt;/code&gt; in this case, it will be &lt;code&gt;worker node src/bot.js&lt;/code&gt;  .&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Procfile&lt;/code&gt; will help the Heroku's server to run our bot.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Now push the new change to the repository.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Go to the deploy tab:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now click on the &lt;code&gt;Deploy Branch&lt;/code&gt; button.&lt;/li&gt;
&lt;li&gt;You will see a green check mark which will ensure you that there are no errors while deploying 👇🏻.&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yYYLUyZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5i73dwjv7fe8ac8f809.PNG" alt="check"&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Go to the resource tab:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Refresh the page once.&lt;/li&gt;
&lt;li&gt;You can see 2 Dynos 👇🏻&lt;/li&gt;
&lt;li&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOzvOm7P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03ld4n7s45gnk8w8m26l.PNG" alt="dyno"&gt;
Click on the pen icon and switch off the &lt;code&gt;Web&lt;/code&gt; and Switch on the &lt;code&gt;Worker&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Click on more and then click on view logs.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;That's it you have successfully hosted your discord bot, and now you and your friends can use the bot anytime you want 🎉!!&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Thank you so much for reading the whole blog and if you liked it, do share it with your developer friends 💻!!&lt;/p&gt;




&lt;p&gt;In case you want to learn how to make a discord bot(my previous bog's topic)and how to host it on Heroku, do check out my talk 🎉!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=FAbGyOPxw-U"&gt;Make a Discord Bot using Discord.js and host it online on Heroku&lt;/a&gt;&lt;/p&gt;

</description>
      <category>heroku</category>
      <category>watercooler</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>Welcome Thread - v133</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 14 Jul 2021 18:39:52 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v133-2nld</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v133-2nld</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/4btN49Z3G4r6dcP6Y8/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/4btN49Z3G4r6dcP6Y8/giphy.gif" alt='Animated valentine that says "hi, how are you?"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Could Kubernetes Pods Ever Become Deprecated?</title>
      <author>Martin Heinz</author>
      <pubDate>Wed, 14 Jul 2021 18:37:36 +0000</pubDate>
      <link>https://dev.to/martinheinz/could-kubernetes-pods-ever-become-deprecated-3hdm</link>
      <guid>https://dev.to/martinheinz/could-kubernetes-pods-ever-become-deprecated-3hdm</guid>
      <description>&lt;p&gt;In any software project, over time new features and APIs are added and from time-to-time some of them also become deprecated and eventually get removed. Even huge project such as Kubernetes is no exception to this, yet core parts of its API don't really come to mind when thinking about deprecating and eventual removal. So, the question is - could a core object or API in Kubernetes, such as Pod, Deployment or Service be removed and if so, how would that go? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#long-story-short"&gt;
  &lt;/a&gt;
  Long Story Short
&lt;/h2&gt;

&lt;p&gt;If the answer to this question was &lt;em&gt;"no"&lt;/em&gt;, then there would be no reason for this article, so long story short - &lt;em&gt;"yes"&lt;/em&gt; - any core API object that's in GA, for example something from &lt;code&gt;v1&lt;/code&gt; API group could absolutely be deprecated.&lt;/p&gt;

&lt;p&gt;This simple general answer doesn't tell us much though. When it comes to deprecations, Kubernetes differentiates between couple types of objects, for example REST APIs, CLIs or feature gates. Each of them with its own set of objects with different level of maturity such as alpha, beta or GA. All of this plays role in how long and under what conditions some object - even something like Pod - could be deprecated. So, let's take a bit closer look at each, as well as some examples from the past and also some hypothetical ones that could happen in future. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-long-story"&gt;
  &lt;/a&gt;
  The Long Story
&lt;/h2&gt;

&lt;p&gt;Different rules apply for different objects/features, so before we talk about the deprecation rules and timelines, let's first go through all the different groups of objects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;REST objects&lt;/em&gt; - The part that we're most interested in - REST objects or REST APIs cover all the things that we interact with most often, that is - top-level objects such as Pods or Deployment, their schema fields, e.g. &lt;code&gt;containers&lt;/code&gt;, &lt;code&gt;volumes&lt;/code&gt; or &lt;code&gt;env&lt;/code&gt; as well as constants such &lt;code&gt;Always&lt;/code&gt;, &lt;code&gt;IfNotPresent&lt;/code&gt; and &lt;code&gt;Never&lt;/code&gt; that are used for &lt;code&gt;imagePullPolicy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Flags or CLIs&lt;/em&gt; - The second most relevant group covers all the CLIs. The obvious one here's the &lt;code&gt;kubectl&lt;/code&gt;, but it also includes things like &lt;code&gt;kubelet&lt;/code&gt;, &lt;code&gt;kube-apiserver&lt;/code&gt; or &lt;code&gt;kube-scheduler&lt;/code&gt; as well as all their subcommands and flags.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Features/behaviors&lt;/em&gt; - Not everything can be exactly labeled with APIs or become part of CLI. There are also behaviours of the whole system as well as experimental features with various levels of maturity. These also need (and have) their own deprecation process and timeline.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Metrics&lt;/em&gt; - Finally, Kubernetes also exposes a lot of metrics on &lt;code&gt;/metrics&lt;/code&gt; endpoints of various services. Considering that a lot of them are being used for example for monitoring, they also can't just be changed or removed whenever, so they have their own set of rules.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#rest-objects"&gt;
  &lt;/a&gt;
  REST Objects
&lt;/h2&gt;

&lt;p&gt;For REST APIs or objects the general rule is that after deprecation is announced, API versions must be supported for at least:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GA: 12 months or 3 releases (whichever is longer)&lt;/li&gt;
&lt;li&gt;Beta: 9 months or 3 releases (whichever is longer)&lt;/li&gt;
&lt;li&gt;Alpha: 0 releases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That sounds pretty straightforward, but there are many other (not so understandable) rules that apply here, so let's just go straight to an example, that should make it clear. Let's imagine hypothetical API object called &lt;em&gt;Task&lt;/em&gt; (fun fact - that's actually the original name of &lt;em&gt;Pods&lt;/em&gt; - see &lt;a href="https://github.com/boddumanohar/kubernetes-first-commit/blob/2c4b3a562ce34cddc3f8218a2c4d11c7310e6d56/pkg/client/client.go#L19"&gt;first commit of Kubernetes&lt;/a&gt;). This Task is GA in API version &lt;code&gt;v1&lt;/code&gt; and it's decided that it should be deprecated, so what would really happen?&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Release&lt;/th&gt;
&lt;th&gt;API Versions&lt;/th&gt;
&lt;th&gt;Preferred&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;v1&lt;/td&gt;
&lt;td&gt;v1&lt;/td&gt;
&lt;td&gt;
&lt;em&gt;Task&lt;/em&gt; object is GA and non-deprecated in v1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+1&lt;/td&gt;
&lt;td&gt;v2alpha1, v1&lt;/td&gt;
&lt;td&gt;v1&lt;/td&gt;
&lt;td&gt;
&lt;em&gt;Task&lt;/em&gt; is announced as being deprecated, v2alpha1 is introduced, &lt;em&gt;Task&lt;/em&gt; object doesn't exist in new version&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+2&lt;/td&gt;
&lt;td&gt;v2alpha2, v1&lt;/td&gt;
&lt;td&gt;v1&lt;/td&gt;
&lt;td&gt;v2alpha1 is replaced with v2alpha2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+3&lt;/td&gt;
&lt;td&gt;v2beta1, v1&lt;/td&gt;
&lt;td&gt;v1&lt;/td&gt;
&lt;td&gt;v2alpha2 is replaced with v2beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+4&lt;/td&gt;
&lt;td&gt;v2beta2, &lt;del&gt;v2beta1&lt;/del&gt;, v1&lt;/td&gt;
&lt;td&gt;v1&lt;/td&gt;
&lt;td&gt;v2beta2 is introduced, v2beta1 still exists, but is now deprecated&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+5&lt;/td&gt;
&lt;td&gt;v2, &lt;del&gt;v2beta2&lt;/del&gt;, &lt;del&gt;v2beta1&lt;/del&gt;, &lt;del&gt;v1&lt;/del&gt;
&lt;/td&gt;
&lt;td&gt;v1&lt;/td&gt;
&lt;td&gt;v2 is introduced, all other versions including preferred v1 are deprecated&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+6&lt;/td&gt;
&lt;td&gt;v2, &lt;del&gt;v2beta2&lt;/del&gt;, &lt;del&gt;v2beta1&lt;/del&gt;, &lt;del&gt;v1&lt;/del&gt;
&lt;/td&gt;
&lt;td&gt;v2&lt;/td&gt;
&lt;td&gt;No version are being removed yet, but v2 is now preferred version&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+7&lt;/td&gt;
&lt;td&gt;v2, &lt;del&gt;v2beta2&lt;/del&gt;, &lt;del&gt;v1&lt;/del&gt;
&lt;/td&gt;
&lt;td&gt;v2&lt;/td&gt;
&lt;td&gt;v2beta1 gets removed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+8&lt;/td&gt;
&lt;td&gt;v2, &lt;del&gt;v1&lt;/del&gt;
&lt;/td&gt;
&lt;td&gt;v2&lt;/td&gt;
&lt;td&gt;v2beta2 gets removed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+9&lt;/td&gt;
&lt;td&gt;v2, &lt;del&gt;v1&lt;/del&gt;
&lt;/td&gt;
&lt;td&gt;v2&lt;/td&gt;
&lt;td&gt;Nothing changes, v1 has to live for one more release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+10&lt;/td&gt;
&lt;td&gt;v2&lt;/td&gt;
&lt;td&gt;v2&lt;/td&gt;
&lt;td&gt;v1 is finally removed and with it also &lt;em&gt;Task&lt;/em&gt; object is gone&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;From the above table you can see that if the &lt;em&gt;Task&lt;/em&gt; object becomes deprecated in API version &lt;code&gt;v2alpha1&lt;/code&gt;, it takes another 9 releases for it to be really gone from Kubernetes. Let me also remind you, that with &lt;a href="https://github.com/kubernetes/enhancements/tree/master/keps/sig-release/2572-release-cadence"&gt;current release cadence&lt;/a&gt; of 3 releases per year, this whole deprecation process would take more than 3 years!&lt;/p&gt;

&lt;p&gt;You should however consider all the objects that are not GA, yet we all are using them as if they were. One such example would be Ingress, which &lt;a href="https://opensource.googleblog.com/2020/09/kubernetes-ingress-goes-ga.html"&gt;became GA only in 1.19&lt;/a&gt; or CronJob very recently in &lt;a href="https://kubernetes.io/blog/2021/04/09/kubernetes-release-1.21-cronjob-ga/"&gt;1.21&lt;/a&gt;. In case of these kinds of beta or even alpha features the deprecation schedule wold not be so generous. If you want to check into which category some resources fall, you can run for example &lt;code&gt;kubectl api-resources | grep beta&lt;/code&gt; get list of all beta API in your cluster.&lt;/p&gt;

&lt;p&gt;Pretty much same rules apply to whole REST API object as well as its fields, constant values or object structure. This means that constants such as &lt;code&gt;Always&lt;/code&gt;, &lt;code&gt;IfNotPresent&lt;/code&gt; and &lt;code&gt;Never&lt;/code&gt; we all use for &lt;code&gt;imagePullPolicy&lt;/code&gt; won't just disappear or change randomly and in the same way fields won't move from one section to another.&lt;/p&gt;

&lt;p&gt;As for some real world examples - &lt;em&gt;PodSecurityPolicy&lt;/em&gt; is probably the biggest one in recent history. This API object is going from v1beta1 to EOL and it's deprecated as of v1.21 and will be removed in v1.25. For details take a look at &lt;a href="https://github.com/kubernetes/enhancements/blob/master/keps/sig-auth/2579-psp-replacement/README.md"&gt;KEP-2579&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another important recent/ongoing deprecation is removal of &lt;code&gt;selfLink&lt;/code&gt; field. This one is part of &lt;a href="https://github.com/kubernetes/enhancements/tree/master/keps/sig-api-machinery/1164-remove-selflink"&gt;KEP-1164&lt;/a&gt; and work on this change is also tracked in this &lt;a href="https://github.com/kubernetes/enhancements/issues/1164"&gt;GitHub issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you're curious about what other deprecations are there, what's their rationale or their whole process of removal, then you can search &lt;a href="https://github.com/kubernetes/enhancements"&gt;kubernetes/enhancements repository&lt;/a&gt; for mentions of &lt;em&gt;"deprecate"&lt;/em&gt; and you will find all the relevant KEPs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flags-or-cli"&gt;
  &lt;/a&gt;
  Flags or CLI
&lt;/h2&gt;

&lt;p&gt;Similarly to REST objects, also &lt;code&gt;kubectl&lt;/code&gt; or &lt;code&gt;kubelet&lt;/code&gt; subcommands or their flags can be deprecated and therefore have its own policy.&lt;/p&gt;

&lt;p&gt;This is much simpler than the previous case. Here, for user-facing components, such as &lt;code&gt;kubectl&lt;/code&gt; the policy is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GA: 12 months or 2 releases (whichever is longer)&lt;/li&gt;
&lt;li&gt;Beta: 3 months or 1 release (whichever is longer)&lt;/li&gt;
&lt;li&gt;Alpha: 0 releases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and for admin-facing components, such as &lt;code&gt;kubelet&lt;/code&gt;, &lt;code&gt;kube-apiserver&lt;/code&gt; or &lt;code&gt;kube-scheduler&lt;/code&gt; it's:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GA: 6 months or 1 release (whichever is longer)&lt;/li&gt;
&lt;li&gt;Beta: 3 months or 1 release (whichever is longer)&lt;/li&gt;
&lt;li&gt;Alpha: 0 releases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Big recent example of deprecation in this area would be &lt;code&gt;dockershim&lt;/code&gt; which is part of &lt;code&gt;kubelet&lt;/code&gt;. Its deprecation and removal is outlined in following &lt;a href="https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/2221-remove-dockershim"&gt;KEP&lt;/a&gt; which includes whole section for &lt;em&gt;removal plan&lt;/em&gt; which lists release v1.20 as target for deprecation as well as release v1.24 as target for removal.&lt;/p&gt;

&lt;p&gt;Another notable change in this area is &lt;code&gt;seccomp&lt;/code&gt; profiles going to GA, outlined in this &lt;a href="https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/135-seccomp/README.md"&gt;KEP&lt;/a&gt;. &lt;code&gt;seccomp&lt;/code&gt; profiles aren't actually direct change to flags or any CLI, but bringing them GA requires deprecation of &lt;code&gt;kubelet&lt;/code&gt; flag &lt;code&gt;--seccomp-profile-root&lt;/code&gt; which is noted &lt;a href="https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/135-seccomp/README.md#seccomp-root-path-configuration"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So bottom line for this section would be that deprecation timeline for CLIs is also quite generous, but if you're using some &lt;code&gt;kubectl alpha ...&lt;/code&gt; command for automation, then you better check deprecations before upgrading your cluster or even CLI binary/tool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feature-gates"&gt;
  &lt;/a&gt;
  Feature Gates
&lt;/h2&gt;

&lt;p&gt;At any point in time, Kubernetes includes many experimental features. These features are controlled using so-called &lt;em&gt;feature gates&lt;/em&gt; which are key/value pairs that we can use to turn them on or off.&lt;/p&gt;

&lt;p&gt;Considering that feature gates are used for experimental features, their deprecation policy differs from other Kubernetes objects. Also, as the feature moves through maturity stages, the behaviour of its gate changes. For alpha features, the gate is disabled by default; for beta features it's enabled by default; and when features reaches GA status the gate is not needed anymore and becomes deprecated and non-operational.&lt;/p&gt;

&lt;p&gt;As for the time it takes to deprecate and remove these - alpha features can disappear anytime and beta ones after 1 release if they're being removed or after 2 releases if they're moving to GA status.&lt;/p&gt;

&lt;p&gt;For a concrete examples you can checkout full list of feature gates &lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/"&gt;here&lt;/a&gt;. There you can see for example &lt;code&gt;AffinityInAnnotations&lt;/code&gt; feature which went from alpha to deprecated, for the ones that went all the way to GA we could list e.g. &lt;code&gt;BlockVolume&lt;/code&gt;, &lt;code&gt;DryRun&lt;/code&gt; or &lt;code&gt;EndpointSlice&lt;/code&gt;. As for the case of feature getting deprecated after getting to beta stage - I wasn't able to find any.&lt;/p&gt;

&lt;p&gt;If you decide to turn on any of these, make sure to check for changes in their status before upgrading your cluster, especially for the alpha ones which might just be gone after a cluster upgrade.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metrics"&gt;
  &lt;/a&gt;
  Metrics
&lt;/h2&gt;

&lt;p&gt;Last type of an object in this list are metrics, which also need to be preserved for considerable amount of time when deprecating because a lot of them are consumed and aggregated by monitoring tooling. Unlike the ones in previous sections, metrics are split only into 2 categories. Here we have only stable and alpha metrics, where stable ones may be removed 3 releases after announced deprecation, while alpha ones can be removed anytime.&lt;/p&gt;

&lt;p&gt;For a sample of deprecated and removed metric you can take a look at this &lt;a href="https://github.com/kubernetes/kubernetes/pull/83836"&gt;commit&lt;/a&gt; which removes &lt;code&gt;rest_client_request_latency_seconds&lt;/code&gt; metric. You can also find it in release notes of v1.17 along with bunch of other &lt;a href="https://v1-17.docs.kubernetes.io/docs/setup/release/notes/#deprecated-changed-metrics"&gt;changed/deprecated metrics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to find out more about metrics lifecycle and its components you can take a look at this &lt;a href="https://kubernetes.io/docs/concepts/cluster-administration/system-metrics/"&gt;docs page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Nowadays, it seems like many projects adopt more of a &lt;em&gt;"moving fast and breaking things"&lt;/em&gt; approach to deprecations coupled with frequent heavy handed changes, so it's nice to see big project such as Kubernetes having well thought out deprecation process that leaves a lot of time for users to migrate away from APIs and features that are planned to be removed.&lt;/p&gt;

&lt;p&gt;So, what is a takeaway from this article? - Can anything get deprecated? - &lt;em&gt;Yes&lt;/em&gt;. Should you worry about it? - &lt;em&gt;Clearly no&lt;/em&gt;. With how long some of the deprecation timelines are, there's no real reason to worry about having things taken away abruptly. With that said, you should probably check release notes and keep an eye out for all the alpha features you might be using as if they were GA. You can also checkout &lt;a href="https://kubernetes.io/docs/reference/using-api/deprecation-guide/"&gt;Deprecated API Migration Guide&lt;/a&gt; which lists all the APIs that are going to be removed at some point in future. And final note - none of this necessarily applies to CRDs - for CRDs developed by external vendors you have to check their own policies as they can do whatever they want with their applications/integration/solutions.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>api</category>
    </item>
    <item>
      <title>Horizontal Vs vertical scaling</title>
      <author>Saran Chakravarthi</author>
      <pubDate>Wed, 14 Jul 2021 18:12:19 +0000</pubDate>
      <link>https://dev.to/saran_chakravarthi/horizontal-vs-vertical-scaling-2h1h</link>
      <guid>https://dev.to/saran_chakravarthi/horizontal-vs-vertical-scaling-2h1h</guid>
      <description>&lt;p&gt;Hello Devs, in this article I'll walk you through the differences between horizontal and vertical scaling.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-scaling"&gt;
  &lt;/a&gt;
  What is scaling?
&lt;/h1&gt;

&lt;p&gt;Let's say, you have developed an application and it is gradually getting traction. The user base is growing and the users are loving your app. Great!&lt;/p&gt;

&lt;p&gt;The user base has grownup to a point where your system can't handle that much load. Not so cool. You don't want to disappoint your users, do you? You'll probably try to upgrade your system so that it can handle heavy load. You have two options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Buying more machines&lt;/li&gt;
&lt;li&gt;Buying a bigger machine&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There you have it. Scaling may be defined as the process upgrading your existing system to handle more load.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#horizontal-scaling"&gt;
  &lt;/a&gt;
  Horizontal scaling:
&lt;/h2&gt;

&lt;p&gt;It is the process of buying more machines.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hmm.. if we have more than one machine, how do we make sure that the load is spread equally among the machines?&lt;/em&gt; That's where load balancers come into play. Load balancers make sure that the traffic is distributed equally among the servers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Since we can buy as many machines as we want, we can say that horizontal scale scales well as the users increase.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Even if one of the servers goes down, other working servers can handle the request. Hence it is resilient.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Load balancing is required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Servers communicate with eachother through network calls.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As we use more than one machine, it may lead to data inconsistency.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#vertical-scaling"&gt;
  &lt;/a&gt;
  Vertical scaling:
&lt;/h2&gt;

&lt;p&gt;It is the process of buying a bigger machine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Load balancer is not required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We use only one machine, hence the data is consistent.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The communication happens through interprocess communication, no network calls needed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Single point of failure. Since we have only one machine, if it goes down the entire system will stop working.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Eventually we will reach the hardware limit.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading! I hope this article helped you.&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>beginners</category>
      <category>distributedsystems</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Entrepreneurs to look out for, and their successful companies</title>
      <author>WyattRoberts14</author>
      <pubDate>Wed, 14 Jul 2021 18:03:50 +0000</pubDate>
      <link>https://dev.to/wyattroberts5/entrepreneurs-to-look-out-for-and-their-successful-companies-13bg</link>
      <guid>https://dev.to/wyattroberts5/entrepreneurs-to-look-out-for-and-their-successful-companies-13bg</guid>
      <description>&lt;p&gt;In this, lets call it crazy world, it's always eat or be eaten, especially in the world of entrepreneurs. Every new year brings us some new and exciting entrepreneurs and their products that aim to change the world.&lt;/p&gt;

&lt;p&gt;We all must have noticed the recent change in mindset around entrepreneurs, we were all laughing at the guy who had the right entrepreneur spirit 10 years ago, but now.. everyone wants to challenge it's difficulties.&lt;/p&gt;

&lt;p&gt;With all that being said, every year there are more new products and entrepreneurs with high hopes that we can even imagine, so how do we know which one is the, let's call it "messiah" or how many of them are the "real deal", the next Elon Musk, Steve Jobs etc.&lt;/p&gt;

&lt;p&gt;Well, people that's the reason we are all gathered today. I prepared a list of &lt;strong&gt;THREE&lt;/strong&gt; up and coming entrepreneurs who by the looks of it are a sure thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Brad Ormsby&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Brad uses years of online marketing experience to build businesses with an approach that’s different than most. &lt;/p&gt;

&lt;p&gt;Brad Ormsby is an entrepreneur who has leveraged a career in marketing to launch a variety of businesses in multiple industries. Just a few of the businesses he’s in include local service businesses, blogs, eCommerce stores, a wellness center, and a client-facing marketing company named &lt;a href="https://colorstonemarketing.com/"&gt;Colorstone Marketing&lt;/a&gt;. He first builds the customer base and then the business infrastructure to service the incoming clients. He parlays his experience in building and marketing his own businesses into helping clients build their businesses in a variety of industries and professions.&lt;/p&gt;

&lt;p&gt;His unique approach has allowed him to build multiple successful businesses in a short time without the normal capital-output that most business owners are forced into.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o-o7ErKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asl2nncxh09ppdmmz0rr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o-o7ErKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asl2nncxh09ppdmmz0rr.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Maksym Babych&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Maksym Babych is a CEO of &lt;a href="https://spdload.com/"&gt;SpdLoad&lt;/a&gt;, a startup development company located in Kharkiv, Ukraine. As a startup adviser at Startup Chile – the largest business accelerator in South America, and Startplatz – the local Cologne startup incubator, helps early-stage startups with setting up and scaling configuration of business processes.&lt;/p&gt;

&lt;p&gt;The company helps startups to launch their products and build software applications. Maksym is a serial entrepreneur and IT professional. SpdLoad was recognized as one of the top 20 web developers on Clutch. Today it has 20+ successful products in SaaS and Marketplace industry and several own products. Maksym established SpdLoad in 2013.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fDjhRnpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glrbz75vw5htcr30iswu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDjhRnpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glrbz75vw5htcr30iswu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Erik Bergman&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://great.com/erik/"&gt;Erik Bergman&lt;/a&gt; is a successful businessman who made more then $50 million before turning 25. He owned a large media company called Catena Media, who then sold a few years ago.&lt;/p&gt;

&lt;p&gt;With that track record, we can only guess that the next company is going to be even better. His latest project is an Online Casino Affiliate company called &lt;a href="https://great.com/"&gt;great.com&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Besides being a successful businessman, Erik is an advocate for the fight against climate change and he has his own podcast called Becoming Great, and a wide audience on his Instagram profile.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ug-A7WVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhueegowr0ewos8kukd0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ug-A7WVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhueegowr0ewos8kukd0.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>entrepreneur</category>
      <category>success</category>
      <category>company</category>
      <category>2021</category>
    </item>
    <item>
      <title>Deploy PERN Fullstack App on Heroku and Netlify(Automatic Deploy)</title>
      <author>Joseph Odunsi</author>
      <pubDate>Wed, 14 Jul 2021 17:55:47 +0000</pubDate>
      <link>https://dev.to/dhatguy/deploy-pern-fullstack-app-on-heroku-and-netlify-automatic-deploy-4e3e</link>
      <guid>https://dev.to/dhatguy/deploy-pern-fullstack-app-on-heroku-and-netlify-automatic-deploy-4e3e</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A4cz0oMZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5356/0%2AePv-q6-x4IPpO4yL" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A4cz0oMZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5356/0%2AePv-q6-x4IPpO4yL" alt="Photo by [Danielle MacInnes](https://unsplash.com/@dsmacinnes?utm_source=medium&amp;amp;utm_medium=referral) on [Unsplash](https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-pern-fullstack-app-on-heroku-and-netlify"&gt;
  &lt;/a&gt;
  Deploy PERN Fullstack App on Heroku and Netlify
&lt;/h2&gt;

&lt;p&gt;This article will walk you through how to deploy a PERN full-stack app with automatic deployment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.heroku.com/"&gt;Heroku &lt;/a&gt;account&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://devcenter.heroku.com/articles/heroku-cli"&gt;Heroku &lt;/a&gt;CLI&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.netlify.com/"&gt;Netlify &lt;/a&gt;account&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.postgresql.org/"&gt;PostgreSQL &lt;/a&gt;database&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-pern"&gt;
  &lt;/a&gt;
  What is PERN?
&lt;/h2&gt;

&lt;p&gt;The PERN stack consists of &lt;strong&gt;P&lt;/strong&gt;ostgreSQL, &lt;strong&gt;E&lt;/strong&gt;xpress, &lt;strong&gt;R&lt;/strong&gt;eact, and &lt;strong&gt;N&lt;/strong&gt;ode. With the Express.js framework, PostgreSQL is used as a backend database. React.js serves as the frontend, and Node.js serves as the backend server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deployment-process"&gt;
  &lt;/a&gt;
  Deployment Process
&lt;/h2&gt;

&lt;p&gt;Fork this &lt;a href="https://github.com/dhatGuy/yelp-clone-PERN"&gt;repository &lt;/a&gt;to get started.&lt;/p&gt;

&lt;p&gt;Take a look at the code provided. There are two folders:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;client — which contains the front-end code built with React.js, and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;server — which has the backend developed using Express.js&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s make sure the app is running well locally.&lt;/p&gt;

&lt;p&gt;Change directory to the server and install the dependencies&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd server

npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Open a new terminal. Change directory to the client and install dependencies&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd client

npm install 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#create-database"&gt;
  &lt;/a&gt;
  Create database
&lt;/h3&gt;

&lt;p&gt;Since we are using PostgreSQL for the database. Make sure you have it &lt;a href="https://www.postgresql.org/download/"&gt;installed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Open your terminal and login into Postgres&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;psql -U postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Enter &lt;code&gt;postgres&lt;/code&gt; as password.&lt;/p&gt;

&lt;p&gt;Create a database named yelp and connect to it.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;create database yelp;

\c yelp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We only need two tables for the app.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;restaurants&lt;/code&gt; table&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE restaurants (

  id BIGSERIAL NOT NULL PRIMARY KEY,

  name VARCHAR(50) NOT NULL,

  location VARCHAR(50) NOT NULL,

  price_range INT NOT NULL check(

    price_range &amp;gt;= 1

    AND price_range &amp;lt;= 5

  )

);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Create the second table, &lt;code&gt;reviews&lt;/code&gt; &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE reviews (

  id BIGSERIAL NOT NULL PRIMARY KEY,

  restaurant_id BIGINT REFERENCES restaurants(id) ON DELETE CASCADE,

  name VARCHAR(50) NOT NULL,

  review TEXT NOT NULL,

  rating INT NOT NULL check(

    rating &amp;gt;= 1

    AND rating &amp;lt;= 5

  )

);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Populate a row in the &lt;code&gt;restaurants&lt;/code&gt; table.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSERT INTO restaurants(name, location, price_range)

VALUES ('Iya Toyosi Canteen', 'Sagamu', 3);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#set-environment-variables"&gt;
  &lt;/a&gt;
  Set environment variables
&lt;/h3&gt;

&lt;p&gt;Change directory into the &lt;code&gt;server&lt;/code&gt; folder and create a &lt;code&gt;.env&lt;/code&gt; file. Add the following contents.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PG_USER=postgres

PG_PASSWORD=postgres

PG_HOST=localhost

PG_PORT=5432

PG_DATABASE=yelp

PORT=7000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#start-the-app"&gt;
  &lt;/a&gt;
  Start the app
&lt;/h3&gt;

&lt;p&gt;Open your terminal and navigate to the client folder. Start the client.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Open a new terminal and navigate to the server folder and start the server.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Open your browser and go to &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; to see the app running like the screenshot below. You can play around with it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ufhvrkjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3708/1%2A6ITDgp_7UedIio1fS0WdyA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ufhvrkjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3708/1%2A6ITDgp_7UedIio1fS0WdyA.png" alt="The app running"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#server-deployment-process"&gt;
  &lt;/a&gt;
  Server Deployment Process
&lt;/h2&gt;

&lt;p&gt;Let’s start with deploying the server on Heroku.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Visit &lt;a href="https://heroku.com"&gt;Heroku&lt;/a&gt; and create an account if you don’t have one. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install the &lt;a href="https://cli.heroku.com/"&gt;Heroku CLI&lt;/a&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open your terminal and run the &lt;code&gt;heroku login&lt;/code&gt; command after installing the CLI. To complete your login, you will be prompted to enter any key to navigate your web browser. The CLI will then automatically log you in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a new Heroku app&lt;/p&gt;

&lt;p&gt;heroku create&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Heroku will generate a random name for your app or pass a parameter to specify your own app name.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;heroku create your-app-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The output&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wYJ4upXD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Aq3Li1-BPffVMXua3bqnRNQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wYJ4upXD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Aq3Li1-BPffVMXua3bqnRNQ.png" alt="Output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The app name is &lt;strong&gt;alluring-bryce-canyon-75245&lt;/strong&gt;, and the URL to view the app is &lt;strong&gt;&lt;a href="https://alluring-bryce-canyon-75245.herokuapp.com/"&gt;https://alluring-bryce-canyon-75245.herokuapp.com/&lt;/a&gt;.&lt;/strong&gt; Relax, it won’t work yet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-heroku-postgres-database"&gt;
  &lt;/a&gt;
  Setup Heroku Postgres Database
&lt;/h3&gt;

&lt;p&gt;To create a Postgres database, run this command in your terminal&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;heroku addons:create heroku-postgresql:hobby-dev --app your-app-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This will create a database and sets a DATABASE_URL environment variable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pnvofxmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ATRozHh6sMpRhizpW9H_0ww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pnvofxmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ATRozHh6sMpRhizpW9H_0ww.png" alt="Output after creating the database"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run command &lt;code&gt;heroku addons&lt;/code&gt; to check the new addon you just created. You will see the Postgres database created with a name generated automatically, for example &lt;code&gt;postgresql-pointy-04867&lt;/code&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nameless-journey-88760  postgresql-pointy-04867  heroku-postgresql:hobby-dev  free   created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To create the tables in the Postgres database, log into the Heroku database&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;heroku pg:psql database-name  --app your-app-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Copy and paste the contents from &lt;code&gt;server/config/db.sql&lt;/code&gt; to create the two tables and insert a row.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xacYjSw7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2130/1%2ACCjuyh86Q7BLCyw1B4DFGA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xacYjSw7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2130/1%2ACCjuyh86Q7BLCyw1B4DFGA.png" alt="output after creating table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don’t forget to replace the database name and app name with your own Heroku info.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#test-the-app-locally"&gt;
  &lt;/a&gt;
  Test the app locally.
&lt;/h3&gt;

&lt;p&gt;Run &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;heroku local web
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Running this will show you how it will run on Heroku. Open &lt;a href="http://localhost:7000/api/v1/restaurants"&gt;http://localhost:7000/api/v1/restaurants&lt;/a&gt; to see the app running locally.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploy-the-server"&gt;
  &lt;/a&gt;
  Deploy the server
&lt;/h3&gt;

&lt;p&gt;Finally, it is time to deploy the server on Heroku.&lt;/p&gt;

&lt;p&gt;Open your terminal. From the root folder of the project, run this command&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;heroku git:remote -a alluring-bryce-canyon-75245
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You can replace &lt;code&gt;alluring-bryce-canyon-75245&lt;/code&gt; with anything, preferable your Heroku app name. &lt;/p&gt;

&lt;p&gt;To push the code, specifically, the server folder, run &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git subtree push --prefix server heroku main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The server should be up and running now. Visit &lt;a href="https://alluring-bryce-canyon-75245.herokuapp.com/api/v1/restaurants"&gt;https://your-heroku-app-name/api/v1/restaurants&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automate-server-deployment-from-a-subfolder"&gt;
  &lt;/a&gt;
  Automate server deployment from a subfolder
&lt;/h3&gt;

&lt;p&gt;Since our project has two folders, server and client, we can let Heroku know the path that leads to the server folder. We won’t have to run the above command every time we want to deploy the server.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Go to the &lt;a href="https://dashboard.heroku.com/apps"&gt;Heroku dashboard&lt;/a&gt; and choose the app you are working on&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the Settings tab. You will see the Config Vars section. Click on reveal vars.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cWe6FRDh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3070/1%2AFDYDdrhIIu9fuN_tH8zX4A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cWe6FRDh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3070/1%2AFDYDdrhIIu9fuN_tH8zX4A.png" alt="environment variables"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Set the input with placeholder KEY with &lt;code&gt;PROJECT_PATH&lt;/code&gt; and the input with placeholder VALUE with &lt;code&gt;server&lt;/code&gt; and click on Add. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Still on the Settings tab, you must add a Buildpack that instructs Heroku to locate your folder.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under the Config Vars section, you will see the Buildpack section. Click on add Buildpack and enter &lt;a href="https://github.com/timanovsky/subdir-heroku-buildpack.git"&gt;https://github.com/timanovsky/subdir-heroku-buildpack.git&lt;/a&gt; as the URL. Save changes. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ensure it’s at the top of the Buildpack chain (drag the lines on the left to move it above any other Buildpacks you’ve added).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BhIemYya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/3398/1%2AlU9CkAFmppxDmIRrw_1JEg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BhIemYya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/3398/1%2AlU9CkAFmppxDmIRrw_1JEg.gif" alt="Heroku buildpacks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we will enable automatic deployment. To enable it, you must connect the GitHub repository of the project.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go to the deploy tab. From the deployment method, choose GitHub.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Search and connect the Github repo.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, enable automatic deployment.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Anytime you run &lt;code&gt;git push&lt;/code&gt; , the server will deploy automatically. You don’t have to run the below command anymore.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git subtree push --prefix server heroku main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n1h9irhR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/3398/1%2A-AgOClMcwLnaTJDTXR5Bew.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n1h9irhR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/3398/1%2A-AgOClMcwLnaTJDTXR5Bew.gif" alt="enable automatic deployment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#client-deployment-process"&gt;
  &lt;/a&gt;
  Client Deployment Process
&lt;/h2&gt;

&lt;p&gt;Before deploying, open the project folder and navigate to &lt;code&gt;client/src/apis&lt;/code&gt;. Open the &lt;code&gt;RestaurantFinder.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Replace “&lt;a href="https://alluringbrycecanyon75245.herokuapp.com/api/v1/restaurants"&gt;https://alluringbrycecanyon75245.herokuapp.com/api/v1/restaurants&lt;/a&gt;" with “&lt;a href="https://your-heroku-app-url/api/v1/restaurants"&gt;https://your-heroku-app-url/api/v1/restaurants&lt;/a&gt;"&lt;/p&gt;

&lt;p&gt;Commit the change and push. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let’s get started
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Go to &lt;a href="https://netlify.com"&gt;Netlify &lt;/a&gt;and login into your account. Create if you don’t have one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After logging in, click on the button &lt;code&gt;new site from git&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose your git provider.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose the repository you want to deploy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under Basic Build Settings, fill the inputs as below.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WN-Dl_On--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AIIMrfpb8sb2rpKTqOv-_kQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WN-Dl_On--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AIIMrfpb8sb2rpKTqOv-_kQ.png" alt="Netlify build settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Click on Deploy site.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After deploying successfully, you will see a link to preview the app.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Netlify also supports automatic deployment. By default, it is enabled. &lt;/p&gt;

&lt;p&gt;Anytime you run &lt;code&gt;git push&lt;/code&gt;, automatic deployment will start for both Heroku(server) and Netlify(client).&lt;/p&gt;

&lt;p&gt;That’s all! You’ve just deployed a full-stack PERN web app successfully.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/a/53221996/11885780"&gt;&lt;strong&gt;Automated heroku deploy from subfolder&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/stlnick/how-to-deploy-a-full-stack-mern-app-with-heroku-netlify-ncb"&gt;How To Deploy a Full-Stack MERN App with Heroku/Netlify — DEV Community 👩‍💻👨‍💻&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>postgres</category>
      <category>node</category>
      <category>express</category>
    </item>
    <item>
      <title>Does Dev Methodology Matter? w/ Chris Downard</title>
      <author>Conor Bronsdon</author>
      <pubDate>Wed, 14 Jul 2021 17:53:43 +0000</pubDate>
      <link>https://dev.to/linearb/does-dev-methodology-matter-w-chris-downard-593g</link>
      <guid>https://dev.to/linearb/does-dev-methodology-matter-w-chris-downard-593g</guid>
      <description>&lt;p&gt;Every software &lt;a href="https://linearb.io/blog/dev-methodology-doesnt-matter/"&gt;development method&lt;/a&gt; has its own rules your team is supposed to adhere to, but how flexible are these rules and what’s best for your team?&lt;/p&gt;

&lt;p&gt;Chris Downard, VP of Engineering at GigSmart, doesn’t let Agile or any other methodology define what’s right for his team. In this episode of &lt;a href="https://devinterrupted.com/podcast/does-dev-methodology-matter/"&gt;Dev Interrupted&lt;/a&gt;, we discuss how dev processes are changing in a remote world, why Chris got rid of dev teams altogether, and how to create your very own dev methodology.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/1GgSDWA592DNEbXJzJsIPC"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;How dev methodology has changed in the past year&lt;/li&gt;
&lt;li&gt;Why Chris made the decision to get rid of his dev teams&lt;/li&gt;
&lt;li&gt;Advice for other leaders following strict methodologies&lt;/li&gt;
&lt;li&gt;Creating your own methodology for continuous improvement&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>devteam</category>
      <category>methodology</category>
      <category>leadership</category>
    </item>
    <item>
      <title>How to use SecretStorage in your VSCode extensions</title>
      <author>Sergei Sumarokov</author>
      <pubDate>Wed, 14 Jul 2021 17:41:38 +0000</pubDate>
      <link>https://dev.to/kompotkot/how-to-use-secretstorage-in-your-vscode-extensions-2hco</link>
      <guid>https://dev.to/kompotkot/how-to-use-secretstorage-in-your-vscode-extensions-2hco</guid>
      <description>&lt;p&gt;There are several ways to save user data in VSCode. Until version 1.53.0 all private information used to be kept in Memento objects using &lt;a href="https://code.visualstudio.com/api/references/vscode-api#ExtensionContext"&gt;workspaceState and globalState&lt;/a&gt; or &lt;a href="https://github.com/microsoft/vscode-docker/pull/2709/files"&gt;keystone&lt;/a&gt;, for example. Keeping passwords with tokens in a standard configuration file or using environment variables wasn’t a good idea either, because all that data could be read and cached by other extensions.&lt;/p&gt;

&lt;p&gt;In this post, we will cover the ways of reading data from &lt;code&gt;settings.json&lt;/code&gt; and &lt;code&gt;environment variables&lt;/code&gt;. After that, we will create a class with minimum functionality, that is going to be responsible for keeping and giving away the keys with values from VSCode SecretStorage.&lt;br&gt;
Let’s call our project &lt;code&gt;fancycolor&lt;/code&gt;, for example. The whole initialization process is described in detail in &lt;a href="https://code.visualstudio.com/api/get-started/your-first-extension"&gt;VSCode Extensions documentation&lt;/a&gt;, so let’s go straight to the point here.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#settingsjson"&gt;
  &lt;/a&gt;
  settings.json
&lt;/h2&gt;

&lt;p&gt;All settings from all VSCode extensions are kept in a public file &lt;code&gt;settings.json&lt;/code&gt; and they all can be accessed using any other extension. For instance, from our fancycolor app, we can easily read the list of all hosts and platforms corresponding them from the configuration file of another popular app &lt;code&gt;SSH - Remote&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;configurationWorkspace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getConfiguration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sshRemotePlatform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;configurationWorkspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remote.SSH.remotePlatform&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sshRemotePlatform&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following code will display your configuration list for &lt;code&gt;SSH - Remote&lt;/code&gt; extension.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Proxy &lt;span class="o"&gt;{&lt;/span&gt;ubuntu: &lt;span class="s1"&gt;'linux'&lt;/span&gt;, home: &lt;span class="s1"&gt;'linux'&lt;/span&gt;, raspberry: &lt;span class="s1"&gt;'linux'&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#environment-variables"&gt;
  &lt;/a&gt;
  environment variables
&lt;/h2&gt;

&lt;p&gt;VSCode variables have access to all user’s environment variables by default. All the data which we saved in &lt;code&gt;.bashrc&lt;/code&gt; on Linux or &lt;code&gt;User.Environment&lt;/code&gt; on Windows can be received using global object &lt;code&gt;process.env&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, let’s make a file &lt;code&gt;/home/ubuntu/.env&lt;/code&gt; with a variable &lt;code&gt;ACCESS_TOKEN_ENV&lt;/code&gt; and add it in &lt;code&gt;.bashrc&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'export ACCESS_TOKEN_ENV="d8aba3b2-fda0-414a-b867-4798b7892bb4"'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /home/ubuntu/.env
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"source /home/ubuntu/.env"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /home/ubuntu/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On Windows, we can do the same using Powershell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;System.Environment&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;SetEnvironmentVariable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ACCESS_TOKEN_ENV'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'d8aba3b2-fda0-414a-b867-4798b7892bb4'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;System.EnvironmentVariableTarget&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let’s read it in our VSCode &lt;code&gt;fancycolor&lt;/code&gt; extension&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;process&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accessTokenEnv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ACCESS_TOKEN_ENV&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accessTokenEnv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see our token in the output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;d8aba3b2-fda0-414a-b867-4798b7892bb4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#secretstorage"&gt;
  &lt;/a&gt;
  SecretStorage
&lt;/h2&gt;

&lt;p&gt;Nowadays SecretStorage is the best way to keep passwords, logins, tokens, and any other private information in VSCode. To demonstrate that, let’s create a simple class &lt;code&gt;AuthSettings&lt;/code&gt;, where we will save &lt;code&gt;fancycolor_token&lt;/code&gt;, using only necessary methods such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;init&lt;/code&gt; - to initialize our SecretStorage&lt;/li&gt;
&lt;li&gt;getter &lt;code&gt;instance&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;storeAuthData&lt;/code&gt; - to write in SecretStorage&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;getAuthData&lt;/code&gt; - to get data from SecretStorage
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ExtensionContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SecretStorage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vscode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AuthSettings&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;_instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AuthSettings&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;secretStorage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SecretStorage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ExtensionContext&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/*
        Create instance of new AuthSettings.
        */&lt;/span&gt;
        &lt;span class="nx"&gt;AuthSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AuthSettings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;AuthSettings&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/*
        Getter of our AuthSettings existing instance.
        */&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;AuthSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_instance&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;storeAuthData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/*
        Update values in bugout_auth secret storage.
        */&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;secretStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fancycolor_token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;getAuthData&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/*
        Retrieve data from secret storage.
        */&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;secretStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fancycolor_token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;extensions.ts&lt;/code&gt; let’s write an option which will allow us to add and extract token using commands in Command Palette.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;vscode&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vscode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AuthSettings&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./settings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;vscode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ExtensionContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Initialize and get current instance of our Secret Storage&lt;/span&gt;
    &lt;span class="nx"&gt;AuthSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;AuthSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;

    &lt;span class="c1"&gt;// Register commands to save and retrieve token&lt;/span&gt;
    &lt;span class="nx"&gt;vscode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fancycolor.setToken&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tokenInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;vscode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showInputBox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storeAuthData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokenInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;vscode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fancycolor.getToken&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tokenOutput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAuthData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokenOutput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;deactivate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only thing left is to register commands &lt;code&gt;fancycolor.setToken&lt;/code&gt; and &lt;code&gt;fancycolor.getToken&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt; . Subsequently working with VSCode SecretStorage we can apply directly to a specific SecretStorage that was made for our app and will have its own &lt;code&gt;_id: 'undefined_publisher.fancycolor'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want a real-world example, &lt;a href="https://github.com/bugout-dev/bugout-vscode"&gt;see how we use SecretStorage in the Bugout VSCode extension&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The Secret to Getting More Done</title>
      <author>Danielle Heberling</author>
      <pubDate>Wed, 14 Jul 2021 17:23:45 +0000</pubDate>
      <link>https://dev.to/koan/the-secret-to-getting-more-done-5hjh</link>
      <guid>https://dev.to/koan/the-secret-to-getting-more-done-5hjh</guid>
      <description>&lt;p&gt;It was a cold and rainy day as I sat alone in my home office debugging Webpack config errors. No matter what I tried, the errors would not go away. My natural inclination was to "just get through most of them" before eating lunch. But as I fixed errors, more emerged. Do you know what eventually got me through these hang ups?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#taking-a-break"&gt;
  &lt;/a&gt;
  Taking a break.
&lt;/h3&gt;

&lt;p&gt;As my hunger grew stronger, I decided to give in and went to lunch. Being able to step away and temporarily detach my mind from the task at hand was just what I needed to approach this problem with a fresh approach full of new things to try.&lt;/p&gt;

&lt;p&gt;Time and time again, the act of taking a break has helped immensely both for getting meaningful work done and for my overall mental state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Kq2CDbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhfok0l45ztij2l2evhg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Kq2CDbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhfok0l45ztij2l2evhg.jpg" alt="sander-dalhuisen-nA6Xhnq2Od8-unsplash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@sanderdalhuisen?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Sander Dalhuisen&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/lunch?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My top three activities while taking a break throughout the workday are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Take a walk outside if weather isn't too bad.&lt;/li&gt;
&lt;li&gt;Change my surroundings. This could mean working at nearby coffee shop or moving from a desk to a couch. The context switching required to get up and move also helps to refocus.&lt;/li&gt;
&lt;li&gt;Read a book. Bonus points if it is a physical copy or on an e-reader. It's important to not stare at the same screen all day.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://fortune.com/2021/07/06/kickstarter-four-day-work-week-2022/"&gt;Some companies&lt;/a&gt; are planning to take this idea a step further and are piloting a four day work week. Personally, I'm really interested to see how the rise of remote/hybrid workplaces as a result of the COVID-19 pandemic affects workers' break frequency. Curious to see if it goes up or down. In the meantime, I'm happy I get to work on a &lt;a href="https://www.koan.co/company/about"&gt;team&lt;/a&gt; that facilitates working with purpose, built on a culture that supports transparency, autonomy and inclusivity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Four-day weeks and hybrid workplaces don't mean less work—just a more honest accounting of what already goes on.&lt;/strong&gt; The standard work week in the USA is currently 40 hours, but no one is actually productive that entire time. I set up a poll on Twitter to get some data points on this and here's the results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eXptEHZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8mivpmmzhqoexq8sk1r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eXptEHZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8mivpmmzhqoexq8sk1r.png" alt="twitterPoll"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remembering to take breaks has helped me to get more done while working fewer hours, and I can support my teammates better by bringing my best self to my work. Maybe it can help you too. What are some of your favorite activities to do when taking a break during the work day?&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>startup</category>
      <category>devjournal</category>
      <category>programming</category>
    </item>
    <item>
      <title>Reviewing big pull requests. What, why, how.</title>
      <author>Vladimir Penyazkov</author>
      <pubDate>Wed, 14 Jul 2021 17:17:39 +0000</pubDate>
      <link>https://dev.to/viezly/reviewing-big-pull-requests-what-why-how-4pm7</link>
      <guid>https://dev.to/viezly/reviewing-big-pull-requests-what-why-how-4pm7</guid>
      <description>&lt;p&gt;In this article, I will try to figure out what leads to big pull requests, what benefits they might provide, what can help you to review them.&lt;/p&gt;




&lt;p&gt;First of all, why on earth developers should care about the size of pull requests? In short — it has an enormous number of benefits, and all of them are well described in Google's article: &lt;a href="https://google.github.io/eng-practices/review/developer/small-cls.html"&gt;https://google.github.io/eng-practices/review/developer/small-cls.html&lt;/a&gt;. To mention some of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reviewed more quickly&lt;/li&gt;
&lt;li&gt;Reviewed more thoroughly&lt;/li&gt;
&lt;li&gt;Less blocking on reviews&lt;/li&gt;
&lt;li&gt;Easier to design well&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and more...&lt;/p&gt;

&lt;p&gt;Talking about the size, when pull requests are considered big, it's hard to give a precise number. Often it depends on the type of changes, the project, personal experience. In some cases, 1k changed lines can mean a huge pull request, in others — an acceptable one. Usually, it starts to get harder to review changes when the number of changed files is increasing, rather than the number of changed lines in a couple of files.&lt;br&gt;
Further in the article, a big pull request will mean a relatively large amount of changed files (20+), the number of changed lines doesn't matter.&lt;/p&gt;

&lt;p&gt;Is it always possible to make a pull request small enough?&lt;br&gt;
In Google's article, they say it's extremely rare when there is no way to split a pull request into smaller parts. Personally, I'd agree with that, but from my experience, there are some situations when it's almost impossible to split changes, or even it's better to keep them in a single pull request, to name a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A change in a common component of the application. It might be a front-end component, or backend helper class, or whatever else.
Such changes usually stretch across dozens of files and it easily turns into a big pull request. 
It might be possible to split these changes, but reviewing that at once can provide its own benefits: often you can notice a missing set of changes which you won't find reviewing it in parts.&lt;/li&gt;
&lt;li&gt;Small and frequent pull requests are sacrificed for the sake of productivity. 
While small pull requests provide a lot of benefits, there is at least one drawback as well: they require more time to create all of them, maintain the stability of the build, and they more often distract colleagues from &lt;del&gt;watching youtube&lt;/del&gt; whatever they usually do at work.
If you're a small team, you want to deliver features faster, you trust each other and have a common vision on how things should be developed — then probably you can skip review at all or review only the final pull request to double-check important things (such as architecture decisions, API design, etc.) from a different perspective.&lt;/li&gt;
&lt;li&gt;Poorly established development process.
It's either a lack of management experience a team-lead has, a lot of newcomers in the team, or simply you just setting up a team. In such situations, you cannot be sure you won't receive a big pull request on review.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In all cases described above you as a reviewer end up with a big pull request which you have to review. Usually, it's an endless list of changed files which you have to go through, scroll up and down, and make a whole picture of it in your head: why this file has been changed, how the files are interconnected with each other, who's calling this function... It usually hard, takes time, and let's admit that it leads to a shallow review being done if at all.&lt;/p&gt;

&lt;p&gt;Just to remind you how it looks like here is an example. It's a pull request of just 16 files:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cBpffP_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rwmd6m3yx7muodr10j7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cBpffP_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rwmd6m3yx7muodr10j7.gif" alt="Reviewing at GitHub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Where is the best place to start the review from? Always start from the top isn't the best way, isn't it? How to understand what's been done here? Why some file's been changed? Where is a new function invoked?&lt;br&gt;
These are important things to know to perform a high-quality code review, but you don't know them until you read all the changed files and built a full &lt;em&gt;picture&lt;/em&gt; in your head.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But what if that &lt;em&gt;picture&lt;/em&gt; is built for you automatically? It could be literally a picture where all relations between files are shown and you can understand the scope of changes just after a look and decide where to start.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sounds cool, right?&lt;/p&gt;

&lt;p&gt;That’s what &lt;a href="https://viezly.com"&gt;Viezly&lt;/a&gt; does. &lt;br&gt;
Viezly is a review tool that splits the changes into smaller independent parts and provides diagrams where the relations between files are shown. With all this, a reviewer can faster get the understanding of what’s been changed and start to review by navigating from one file to another in an optimal way instead of scrolling a list of changes up and down to find out what's going on.&lt;/p&gt;

&lt;p&gt;Just compare the example above to this one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nw4swq3n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8jmq7qy7meyaq645rs9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nw4swq3n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8jmq7qy7meyaq645rs9.gif" alt="Reviewing at Viezly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After just a single look at the diagrams, you see what packages have been changed, how the changes are related to each other. You can start reviewing from the root file or the most nested files as you prefer. Furthermore, the changes are divided into standalone groups to make them more comprehensible.&lt;/p&gt;

&lt;p&gt;Is that what you trying to keep in mind when reviewing the changes, isn't it?&lt;/p&gt;

&lt;p&gt;If you find this useful, as I do, check out more details at &lt;a href="https://viezly.com"&gt;viezly.com&lt;/a&gt; and stay tuned!&lt;/p&gt;

</description>
      <category>codereview</category>
      <category>pullrequests</category>
      <category>visualization</category>
    </item>
  </channel>
</rss>
