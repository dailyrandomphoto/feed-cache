<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>VOLDER v2.0.0 npm package coming soon</title>
      <author>alguerocode</author>
      <pubDate>Thu, 28 Oct 2021 09:24:44 +0000</pubDate>
      <link>https://dev.to/alguercode/volder-v200-package-coming-soon-2p91</link>
      <guid>https://dev.to/alguercode/volder-v200-package-coming-soon-2p91</guid>
      <description>&lt;h2&gt;
  &lt;a href="#version-200-in-the-road-with-more-features-and-better-documents"&gt;
  &lt;/a&gt;
  ⚠️ ⚠️  version 2.0.0 in the road with more features and better documents
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#support-me-by-adding-a-star-to-github-volder-repository"&gt;
  &lt;/a&gt;
  support me by adding a star to github volder repository
&lt;/h3&gt;

&lt;p&gt;link:&lt;a href="https://github.com/devSupporters/volder"&gt;https://github.com/devSupporters/volder&lt;/a&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>javascript</category>
      <category>npm</category>
      <category>schemabuilder</category>
    </item>
    <item>
      <title>15 Trending GitHub Projects For Web Developer</title>
      <author>Jonny coder</author>
      <pubDate>Thu, 28 Oct 2021 09:15:36 +0000</pubDate>
      <link>https://dev.to/jonnywq/15-trending-github-projects-for-web-developer-2e4k</link>
      <guid>https://dev.to/jonnywq/15-trending-github-projects-for-web-developer-2e4k</guid>
      <description>&lt;p&gt;Read here: &lt;a href="https://www.codelivly.com/15-trending-projects-on-github-for-web-developers/"&gt;https://www.codelivly.com/15-trending-projects-on-github-for-web-developers/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>20 tips to Google like a pro</title>
      <author>Jonny coder</author>
      <pubDate>Thu, 28 Oct 2021 09:14:30 +0000</pubDate>
      <link>https://dev.to/jonnywq/20-tips-to-google-like-a-pro-5641</link>
      <guid>https://dev.to/jonnywq/20-tips-to-google-like-a-pro-5641</guid>
      <description>&lt;p&gt;Read here: &lt;a href="https://bit.ly/3nuX0wo"&gt;https://bit.ly/3nuX0wo&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Active and upcoming reinforcement learning competitions</title>
      <author>Joy</author>
      <pubDate>Thu, 28 Oct 2021 09:05:39 +0000</pubDate>
      <link>https://dev.to/joooyz/active-and-upcoming-reinforcement-learning-competitions-kei</link>
      <guid>https://dev.to/joooyz/active-and-upcoming-reinforcement-learning-competitions-kei</guid>
      <description>&lt;p&gt;Reinforcement learning (RL) is a subdomain of machine learning which involves agents learning to make decisions by interacting with their environment. While popular competition platforms like Kaggle are mainly suited for supervised learning problems, RL competitions are harder to come by.&lt;/p&gt;

&lt;p&gt;In this post, I've compiled a list of 7 ongoing and annual competitions which are suitable for RL. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Criteria:&lt;/strong&gt; any active (or upcoming) event or platform which involves a large number of individuals/teams competing for some form of incentive (e.g. prize money, co-authorships, leaderboard ranking etc.).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For AI competitions that are not necessarily tailored for RL, you might be interested in the list &lt;a href="https://www.gocoder.one/blog/ai-game-competitions-list"&gt;15 Active AI Game Competitions&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-aws-deepracer-2018-ongoing-competition"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://aws.amazon.com/deepracer/"&gt;AWS DeepRacer&lt;/a&gt; (2018 —, ongoing competition)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0tvkuoir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtj2sw3j90jvjasdi8of.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0tvkuoir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtj2sw3j90jvjasdi8of.png" alt="AWS DeepRacer" title="AWS DeepRacer 3D simulator" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/deepracer/"&gt;AWS DeepRacer&lt;/a&gt; is a beginner-friendly 3D racing simulator aimed at helping developers get started with RL. Participants can train models on Amazon SageMaker (first 10 hours are free) and enter monthly competitions in the form of an ongoing AWS DeepRacer League. &lt;/p&gt;

&lt;p&gt;The AWS DeepRacer League is run in time trial format (although other challenges such as head-to-head racing exist). Top racers win prizes including merchandise, customizations, and an expenses-paid trip to Las Vegas to attend AWS re:invent for the Championship Cup. Participants can also win or purchase a physical 1/18th scale race car for USD399 to test their models in the real-world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-aiarena-2016-ongoing-competition"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://aiarena.net/"&gt;AIArena&lt;/a&gt; (2016 —, ongoing competition)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--infYciki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uygquulfg48sfm6wv83.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--infYciki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uygquulfg48sfm6wv83.png" alt="AI Arena" title="AI Arena StarCraft II stream" width="880" height="493"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You might remember when &lt;a href="https://deepmind.com/blog/article/AlphaStar-Grandmaster-level-in-StarCraft-II-using-multi-agent-reinforcement-learning"&gt;AlphaStar reached Grandmaster status&lt;/a&gt; and beat two of the world's top players in StarCraft II in 2019. StarCraft II was &lt;a href="https://deepmind.com/blog/announcements/deepmind-and-blizzard-open-starcraft-ii-ai-research-environment"&gt;originally open-sourced in 2017&lt;/a&gt; by Blizzard to accelerate AI research in highly complex environments.&lt;/p&gt;

&lt;p&gt;You can still get involved with training deep RL agents in StarCraft II with the community at &lt;strong&gt;&lt;a href="https://aiarena.net/"&gt;AIArena&lt;/a&gt;&lt;/strong&gt;. They run an ongoing ranked ladder where you can compete head-to-head against other teams. Matches are 24/7 livestreamed to Twitch, with occasional community stream events.&lt;/p&gt;

&lt;p&gt;For original StarCraft, you can also check out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://schnail.com/"&gt;SCHNAIL&lt;/a&gt;: Human vs AI competitions&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://sscaitournament.com/"&gt;SSCAIT&lt;/a&gt;: Student StarCraft AI Tournament&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-bomberland-2020-ongoing-competition"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.gocoder.one/bomberland"&gt;Bomberland&lt;/a&gt; (2020—, ongoing competition)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0avm0MBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84d87fpo4fl4yeppw4oo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0avm0MBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84d87fpo4fl4yeppw4oo.jpg" alt="Bomberland" title="Bomberland" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.gocoder.one/bomberland"&gt;Bomberland&lt;/a&gt; is our own machine learning competition based on the classic console game, Bomberman. Teams build agents which compete head-to-head in an ongoing competition against other teams.&lt;/p&gt;

&lt;p&gt;The Bomberland environment is challenging for out-of-the-box machine learning, requiring planning, real-time decision making, and navigating both adversarial and cooperative play.&lt;/p&gt;

&lt;p&gt;The competition officially starts 3rd December 2021. Top teams win prizes including merchandise, customizations, cash, and are featured on the finale Twitch livestream.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-flatland-2019-annual-competition"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://www.aicrowd.com/challenges/flatland-3"&gt;Flatland&lt;/a&gt; (2019—, annual competition)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BRI84REY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ke4c9ik11yqjxlbq886a.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BRI84REY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ke4c9ik11yqjxlbq886a.JPG" alt="Flatland" title="Flatland" width="642" height="258"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.aicrowd.com/challenges/flatland-3"&gt;Flatland&lt;/a&gt; is an annual competition featured as part of NeurIPS 2020. It is designed to tackle the problem of efficiently managing dense traffic on complex railway networks. The goal is to construct the best schedule that minimizes the delay in the requested arrival time of all trains.&lt;/p&gt;

&lt;p&gt;The 2021 competition is currently being run on the AICrowd platform. Submissions are evaluated and ranked according to the total reward accumulated in a controlled setting. RL approaches are encouraged, with a separate prize track for RL submissions. Prizes this year include drones and VR headsets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-minerl-2019-annual-competition"&gt;
  &lt;/a&gt;
  5. &lt;strong&gt;&lt;a href="https://minerl.io/"&gt;MineRL&lt;/a&gt;&lt;/strong&gt; (2019—, annual competition)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r2QrMRPS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy5s73k7p0e21vthedmi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r2QrMRPS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy5s73k7p0e21vthedmi.png" alt="MineRL" title="MineRL dataset example" width="579" height="312"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://minerl.io/"&gt;MineRL&lt;/a&gt;&lt;/strong&gt; is concerned with the development of sample-efficient deep RL algorithms which can solve hierarchical, sparse reward environments using human demonstrations in Minecraft. &lt;/p&gt;

&lt;p&gt;Participants have access to a large imitation learning dataset of over 60 million frames of recorded human player data in Minecraft. The goal is to develop systems that can complete tasks such as obtaining a diamond, building a house, searching for a cave, etc.&lt;/p&gt;

&lt;p&gt;The competition has been running as part of NeurIPS from 2019 — 2021 on AICrowd. Prizes include co-authorships and over $10,000 cash.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-nethack-2020-annual-competition"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://nethackchallenge.com/"&gt;NetHack&lt;/a&gt; (2020—, annual competition)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GWywkfHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqx1eawgcda9bi1mnqil.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GWywkfHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqx1eawgcda9bi1mnqil.JPG" alt="NetHack" title="NetHack" width="751" height="424"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nethackchallenge.com/"&gt;NetHack&lt;/a&gt; is another annual competition at NeurIPS 2021 held on AICrowd. Teams compete to build the best agents to play NetHack, an ASCII-rendered single-player dungeon crawl game. NetHack features procedurally-generated levels, with hundreds of complex scenarios, making it an extremely challenging environment for current state-of-the-art RL.&lt;/p&gt;

&lt;p&gt;Like Flatland and MineRL, submissions are ranked on a leaderboard based on score in a controlled test setting. The competition this year features a $20,000 USD cash prize pool. RL approaches are encouraged, but non-RL approaches are also accepted. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-compilergym-2021-leaderboard"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://github.com/facebookresearch/CompilerGym"&gt;CompilerGym&lt;/a&gt; (2021—, leaderboard)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YzfSI_zI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz3zd3cc737xp90j3hxl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YzfSI_zI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz3zd3cc737xp90j3hxl.png" alt="CompilerGym" title="CompilerGym" width="880" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/facebookresearch/CompilerGym"&gt;CompilerGym&lt;/a&gt; is actually a toolkit for applying reinforcement learning to compiler optimizations, rather than a competition. However, users can submit algorithms to the &lt;a href="https://github.com/facebookresearch/CompilerGym#leaderboards"&gt;public repo leaderboard&lt;/a&gt; with their write-up and results.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-competition-platforms-and-conferences"&gt;
  &lt;/a&gt;
  Bonus: competition platforms and conferences
&lt;/h2&gt;

&lt;p&gt;I prioritized competitions that are ongoing or run regularly for this list. Another good way to keep track of running competitions is to follow the competition platforms and conferences they are run as part of. Here's some worth keeping your eye on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.aicrowd.com/"&gt;AICrowd&lt;/a&gt;: Runs a combination of supervised ML competitions as well as RL competitions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.kaggle.com/"&gt;Kaggle&lt;/a&gt;: Mainly supervised ML/data science competitions, but also feature &lt;a href="https://www.kaggle.com/simulations"&gt;simulation competitions&lt;/a&gt; which can be good problems for RL.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nips.cc/"&gt;NeurIPS&lt;/a&gt;: Annual conference with a competition track for various machine learning competitions&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ieee-cog.org/2022/"&gt;IEEE CoGs&lt;/a&gt;: Annual conference with a competition track, specifically for research in games.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#closing-remarks"&gt;
  &lt;/a&gt;
  Closing remarks
&lt;/h2&gt;

&lt;p&gt;I hope this list has helped you find an interesting competition to check out and practise reinforcement learning in. As new competitions come and go, I'll aim to keep this list up-to-date. Good luck!&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>deeplearning</category>
      <category>datascience</category>
    </item>
    <item>
      <title>40+ JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS</title>
      <author>Jonny coder</author>
      <pubDate>Thu, 28 Oct 2021 08:41:33 +0000</pubDate>
      <link>https://dev.to/jonnywq/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-14k5</link>
      <guid>https://dev.to/jonnywq/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-14k5</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;The best way to learn a new programming language is to build projects.

I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.

My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.

That will test if you have really learned the concepts or not.

You can click on any of the projects listed below to jump to that section of the article.

&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/40-javascript-projects-for-beginners/&amp;amp;ved=2ahUKEwiB9tj0rPjyAhUMX30KHZQ5CG0QFnoECAgQAQ&amp;amp;usg=AOvVaw26RDQjHugdhbATVS83LI83"&gt;40 JavaScript Projects for Beginners – Easy Ideas to Get Started Coding JS

&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top reasons to build an app based on microservices in Node.js</title>
      <author>Monika Ambrozowicz</author>
      <pubDate>Thu, 28 Oct 2021 08:35:44 +0000</pubDate>
      <link>https://dev.to/forestadmin/top-reasons-to-build-an-app-based-on-microservices-in-nodejs-1ngb</link>
      <guid>https://dev.to/forestadmin/top-reasons-to-build-an-app-based-on-microservices-in-nodejs-1ngb</guid>
      <description>&lt;p&gt;Take any popular web project and there is a good chance it has been built with Node.js. This tremendously popular JavaScript runtime environment is praised by developers for its flexibility and effectiveness. And as a matter of fact, exactly the same can be claimed about microservice architecture. What are the benefits of both, and why in most cases is it a good idea to build an application based on microservices in Node.js, especially a SaaS one? Let’s find out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-microservice"&gt;
  &lt;/a&gt;
  What is a microservice?
&lt;/h2&gt;

&lt;p&gt;A microservice is a software design pattern, where a group of interconnected services builds the entire application, in contrast to the monolithic approach to software development, where the application is built as one unit. These services are responsible for one function, they’re loosely coupled, isolated from the others, and independently deployable. Thanks to that, microservices accelerate the development of complex software. It doesn’t mean they are always better, though. What are the pros and cons of microservices?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-microservices"&gt;
  &lt;/a&gt;
  Benefits of microservices
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Scalability&lt;/strong&gt;. Maintaining a complex application in a large team is more efficient when the app is based on microservices because responsibilities can be easier shared between the developers.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;More agile development process&lt;/strong&gt;. Building applications based on microservices allow developers to focus on clearly defined modules, which makes development, testing, and maintenance more flexible and better optimized.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;More efficient deployment&lt;/strong&gt;. In contrast to the monolithic architecture, whenever a microservice needs to be updated, there is no need to deploy the entire application. The only requisite is to release REST-ful APIs for other services.
Easier iterations. Developers can iterate over microservices separately, they’re not limited by the other components.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Language agnostic&lt;/strong&gt;. Microservices can be written in different programming languages, which gives significant flexibility to the development of the entire app.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-microservices"&gt;
  &lt;/a&gt;
  Disadvantages of microservices.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Difficult to manage the whole unit&lt;/strong&gt;. The microservices architecture may be a double-edged sword. On one hand, it’s easier to maintain small units over one large and complex. However, whenever there is a need to manage an application as an entire unit, it’s more challenging with microservices.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Challenging testing&lt;/strong&gt;. The same issue applies to testing - it seems to be more efficient to test each microservice separately, but in a monolithic app you can run end-to-end testing and find bugs faster.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;More cross-cutting concerns&lt;/strong&gt;. Logging in, cashing, and other concerns that affect the whole application are easier to handle in a monolithic architecture because there is only one application to take care of.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multiple deployments&lt;/strong&gt;. In monolithic applications, developers need to handle only one deployment, in contrast to microservices where there may be multiple. In some cases, it saves a significant amount of time and development work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, the monolithic architecture is a better choice for lightweight products that don’t demand much business logic. Microservices, on the other hand, are the perfect choice for complex, evolving applications that are designed to scale. It is particularly true for SaaS products that today may have 1000 users, and tomorrow 100000, so they need to be ready to handle the exponential growth as users often pay month-by-month and require a highly available service. All of these are also the reason why SaaS developers choose to build their products with Node.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microservices-and-nodejs-its-a-match"&gt;
  &lt;/a&gt;
  Microservices and Node.js: It’s a match!
&lt;/h2&gt;

&lt;p&gt;As you already know, microservices are language agnostic, which is one of the strongest benefits of microservice architecture. At the same time, the connection between Node.js and microservices is particularly strong and deep. In fact, one of the ideas behind the creation of this environment was to make building applications based on microservices easier and more efficient. From a business perspective, taking advantage of both technologies has a significant impact on the product - not only in the creation phase but also later - in maintenance, and scaling. Let’s have a look at the top benefits of building an app based on microservices in Node.js.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;More efficient cost control. Node.js and microservices are created to scale. Especially in SaaS products, it’s important to be able not only to handle growth but also to keep the cost of development and maintenance as low as possible. No monolithic architecture can achieve the same level of flexibility.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Higher performance and reliability. The argument above is also true when it comes to maintaining high performance: If one microservice is down because of a bug or another issue, it doesn’t affect the entire app. The fact that Node.js is one of the most popular web technologies also makes the difference here: With easier access to talent and online communities, it’s easier to ensure the top performance of an app.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is safe to say that Node.js and microservices were made for each other. Node’s single-threaded asynchronous architecture facilitates scaling the app, and it comes with many frameworks, such as &lt;a href="https://www.forestadmin.com/integrations/express?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=blog-microservices-nodejs&amp;amp;utm_content=express-lp"&gt;Express&lt;/a&gt;, that are heavily adopted by SaaS developers. On the other hand, microservices allow for rapid development and flexibility that would be impossible to achieve with a monolithic architecture. At Forest Admin, we’re not surprised that thousands of our users connected our &lt;a href="https://blog.forestadmin.com/how-to-choose-the-right-internal-tool/?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=blog-microservices-nodejs&amp;amp;utm_content=blog-internal-tools"&gt;internal tool&lt;/a&gt; solution with their various applications that have two things in common: Node.js and microservices.&lt;/p&gt;

&lt;p&gt;Would you like to join them? &lt;a href="https://app.forestadmin.com/signup?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=blog-microservices-nodejs&amp;amp;utm_content=blog-microservices-nodejs"&gt;Try Forest Admin for free.&lt;/a&gt; 🌲🌲🌲&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-microservices-with-nodejs-useful-resources"&gt;
  &lt;/a&gt;
  Building microservices with Node.js: Useful resources
&lt;/h2&gt;

&lt;p&gt;Are you convinced that Node.js and microservices are the best fit for your application but do you need some help with the implementation? We’ve gathered some tutorials and other resources to make your life easier.&lt;/p&gt;

&lt;p&gt;How to build a microservices architecture with Node.Js to achieve scale? - &lt;a href="https://www.cuelogic.com/blog/microservices-with-node-js"&gt;Cue Logic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Complete Microservice Tutorial — Building User Service With GRPC, Node.JS, and MongoDB - &lt;a href="https://medium.com/swlh/the-complete-microservice-tutorial-part-1-building-user-service-with-grpc-node-js-and-mongodb-73e70ed80148"&gt;MD Ahad Hasan&lt;/a&gt;&lt;br&gt;
Node Microservices: From Zero to Hero - Nickolas Fisher, &lt;a href="https://developer.okta.com/blog/2020/02/05/node-microservices-zero-to-hero"&gt;Octa Developer&lt;/a&gt;&lt;br&gt;
How to Build Microservices with Node.js - Archita Nayak, Happy Bhesdadiya, &lt;a href="https://www.bacancytechnology.com/blog/how-to-build-microservices-with-node-js"&gt;Bacancy Technology&lt;/a&gt;&lt;br&gt;
Step-by-Step Guide To Create Microservices With Node.js - &lt;a href="https://blog.back4app.com/microservices-nodejs/"&gt;Back4App&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>webdev</category>
      <category>microservices</category>
      <category>javascript</category>
    </item>
    <item>
      <title>I've made a React app.                                                         Should you stick around? </title>
      <author>ItayLisaey</author>
      <pubDate>Thu, 28 Oct 2021 08:31:30 +0000</pubDate>
      <link>https://dev.to/itaylisaey/ive-made-a-react-app-should-you-stick-around-1647</link>
      <guid>https://dev.to/itaylisaey/ive-made-a-react-app-should-you-stick-around-1647</guid>
      <description>&lt;h1&gt;
  &lt;a href="#should-you-wait-the-credits-stick-around-will-tell-you"&gt;
  &lt;/a&gt;
  Should you wait the credits? "Stick Around" will tell you.
&lt;/h1&gt;

&lt;p&gt;Ever since the first Marvel movies came out it seems like in every movie there's the possibility of an extra scene hidden during or after the credits.&lt;/p&gt;

&lt;p&gt;I grew tired of waiting through the entire credits just to find out there's nothing there, or even worse - leaving the theater to later realize I missed something.&lt;/p&gt;

&lt;p&gt;To counter this I've decided to make a super simple app that simply tells you if you should wait the credits, with the press of a finger.&lt;/p&gt;

&lt;p&gt;The app is open source, no ads or revenue whatsoever and made as a fan service.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6sD_vNvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1gmoagf362er3eye5jd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6sD_vNvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1gmoagf362er3eye5jd.png" alt="Stick Around Production screenshots" width="829" height="418"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-i-make-this-app"&gt;
  &lt;/a&gt;
  How did I make this app?
&lt;/h2&gt;

&lt;p&gt;I Used &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt; for designing and prototyping, &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; with Typescript for the frontend implementation, &lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt; as the backend and &lt;a href="https://capacitorjs.com/"&gt;Capacitor.js&lt;/a&gt; for Android and iOS support. &lt;/p&gt;

&lt;p&gt;All in all, I managed to design, code and publish the app to Google Play in less then 3 weeks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#designing-the-user-experience-in-figma"&gt;
  &lt;/a&gt;
  Designing the user experience in Figma
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SPuhPJ2I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x46hxsese5vvasfjbbq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SPuhPJ2I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x46hxsese5vvasfjbbq.png" alt="Image description" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've started the UX design process with few goals in mind:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Keeping it simple&lt;/li&gt;
&lt;li&gt;One press away from results&lt;/li&gt;
&lt;li&gt;Dark mode (to be used in theaters)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The app is divided into 3 main screens:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#in-theaters"&gt;
  &lt;/a&gt;
  In Theaters
&lt;/h4&gt;

&lt;p&gt;This screen is the first screen the user enters upon launching the app. It shows you the movies now in theaters (according to &lt;a href="https://www.themoviedb.org/"&gt;TMDB&lt;/a&gt;);&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#search"&gt;
  &lt;/a&gt;
  Search
&lt;/h4&gt;

&lt;p&gt;On this screen, the user can search for older movies, not currently playing.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#movie-screen"&gt;
  &lt;/a&gt;
  Movie Screen
&lt;/h4&gt;

&lt;p&gt;This screen contains some general information about a movie, and mainly the card that tells the user whether or not they should wait for the end.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#voting-model"&gt;
  &lt;/a&gt;
  Voting Model
&lt;/h4&gt;

&lt;p&gt;How user vote on the movie&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;The framework I eventually choose was React with &lt;a href="https://capacitorjs.com/"&gt;Capacitor.js&lt;/a&gt; to build cross platform.&lt;/p&gt;

&lt;p&gt;The app uses &lt;a href="https://www.themoviedb.org/"&gt;TMDB&lt;/a&gt; to get movie information and&lt;br&gt;
Firebase to collect user votes.&lt;br&gt;
and a basic function that decides between them.&lt;/p&gt;

&lt;p&gt;The rest is pretty straight forward with React and Scss for styling.&lt;br&gt;
most of the bugs and troubleshooting came with Capacitor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If this interested you, or you have any questions or requests, I will be glad to answer.&lt;/p&gt;

&lt;p&gt;*Edit: there's a known issue with the first time screen not showing the continue button to some devices. It's already fixed on the web but not yet updated in the Android App.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.stickaround.app"&gt;Google Play Store - Stick Around&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ItayLisaey/stick-around"&gt;GitHub - stick-around&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://movies.lisaey.com"&gt;Stick Around on Web&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>showdev</category>
      <category>react</category>
      <category>firebase</category>
    </item>
    <item>
      <title>Integrating captcha in your app in 10 minutes</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Thu, 28 Oct 2021 08:17:53 +0000</pubDate>
      <link>https://dev.to/abhirajb/integrating-captcha-in-your-app-in-10-minutes-1dhh</link>
      <guid>https://dev.to/abhirajb/integrating-captcha-in-your-app-in-10-minutes-1dhh</guid>
      <description>&lt;p&gt;Ok, so what is a captcha?&lt;/p&gt;

&lt;p&gt;Captcha is “a computer program or system intended to distinguish human from machine input, typically as a way of thwarting spam and automated extraction of data from websites.” It stands for Completely Automated Public Turing test to tell Computers and Humans Apart.&lt;/p&gt;

&lt;p&gt;Yeah I know, 10/10 on Acronym Deriving Skills&lt;/p&gt;

&lt;p&gt;Whether it be the next Twitter or a simple SaaS, captchas are important, however boring it may be, so that you don’t get the traffic you don’t want.&lt;br&gt;
Now, you don’t need to waste your precious time into making a captcha then deciding on how to bypass the captcha and what not.&lt;/p&gt;

&lt;p&gt;Let me introduce you to 2Captcha, a captcha solver which has an API for developers to implement captcha anywhere.&lt;br&gt;
2captcha’s service provides an API that allows you to solve different types of captchas.&lt;br&gt;
They don't offer a ready-to-use solution for custom tasks, but they have a &lt;a href="https://2captcha.com/software"&gt;catalog of software&lt;/a&gt; integrated with the service where you can find software for your needs.&lt;/p&gt;

&lt;p&gt;To use the service, follow a few simple steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Register an account&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EYCfYj7b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcp0edc5xc0thlirc3ie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EYCfYj7b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcp0edc5xc0thlirc3ie.png" alt="step1" width="880" height="596"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check your balance and add funds accordingly.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--itOAoalF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4ctrre0ukgmpqz6kne1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--itOAoalF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4ctrre0ukgmpqz6kne1.png" alt="step2" width="880" height="418"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to the settings page to get your API key and then copy and &lt;br&gt;
paste it in your software.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc2Pbe_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a419yd8l1r6syd5qrc1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc2Pbe_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a419yd8l1r6syd5qrc1c.png" alt="step3" width="880" height="418"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you are ready to start using your software with 2Captcha.&lt;/p&gt;

&lt;p&gt;2captcha is a simple and quick way to get someone to solve your captcha. Just upload a text and it will be solved in 12 seconds.&lt;br&gt;
2captcha is a Human-based captcha solving service, they have many workers who have signed up for this task. Their public statistics are listed below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9EYmIzxq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrg20l8grpftqbqx410h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9EYmIzxq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrg20l8grpftqbqx410h.png" alt="stats" width="880" height="596"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In March 2017 Google modified the ReCaptcha algorithm to shield it from an automatic answer. ReCaptcha now adjustments duties and pics oftentimes all through a solution on many famous websites and that is why solution time is multiplied. from time to time it takes extra than 2 mins due to the fact an actual human wishes a lot of time to bypass the ReCaptcha, despite the fact that it is solved manually as a regular person. This is why response times are affected a bit.&lt;br&gt;
They have a variety of captcha to choose from. You can check the rates here.&lt;br&gt;
Today, we’ll see how to implement SolveMedia image captcha with Java&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download the captcha image&lt;/li&gt;
&lt;li&gt;Send the image to 2Captcha API
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(http://2captcha.com/in.php)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mNhBnJ3f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/em85gsrqa6brhg8ty5qm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mNhBnJ3f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/em85gsrqa6brhg8ty5qm.png" alt="codeapi" width="880" height="668"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Paste received code into the field. Then, submit the form.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example of the form in HTML:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OwJ98a06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ihhup9dqsv7defxy9z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OwJ98a06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ihhup9dqsv7defxy9z8.png" alt="htmlform" width="880" height="566"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They also have a referral program that allows to you share your own affiliate link, which when used to purchase from 2captcha, credits you 10% of the amount spent by your friend. &lt;/p&gt;

&lt;p&gt;P.S: &lt;a href="http://2captcha.com/?from=12857539"&gt;here’s my link, go use it.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You collect 10% of your affiliate earnings and 10% of any purchases your partner makes on the service (when, your partner spends money, sending captcha to a software, registering in the catalog, 10 percent deducted software developers, and you get only 5 percent of its expenditure on the captcha). Once a day, an affiliate is rewarded to the account balance. If your partner spends or earns money today, you will receive compensation tomorrow. $0,5 is the minimum payout amount. Payment must be requested on the page "payments for affiliate program," with the amount and method of payment specified. Depending on the payout direction, withdrawals are processed instantly or within 5 business days.&lt;/p&gt;

&lt;p&gt;2Captcha is an automated captcha solution that uses the power of humans. Its goal is to improve reliability and make it possible for everyone.&lt;/p&gt;

&lt;p&gt;I hope this post suits your purpose well. And if you find this review helpful then you can share this knowledge with your friends and fellow colleagues.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Production Horrors – Handling Disasters: Public Debrief</title>
      <author>Shai Almog</author>
      <pubDate>Thu, 28 Oct 2021 08:05:25 +0000</pubDate>
      <link>https://dev.to/codenameone/production-horrors-handling-disasters-public-debrief-1kf6</link>
      <guid>https://dev.to/codenameone/production-horrors-handling-disasters-public-debrief-1kf6</guid>
      <description>&lt;p&gt;&lt;strong&gt;Just in time for Halloween failures in production are scarier than most movie monsters. Here's a personal scary story of a production fail.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Halloween is probably the most appropriate time to start this new blog series. I talk a lot about theory in this blog, but when you’re on the front line of a production disaster, it “gets real” very fast. People often think of production disasters as crashes or sites going down like the recent Facebook downtime. While that’s an interesting subject, a lot of these things can go under the radar and hit you like a brick wall. &lt;/p&gt;

&lt;p&gt;Today’s horror story is about a young startup that nearly went bankrupt because of caching. I was the founder of this company and I  &lt;a href="https://hackernoon.com/why-and-how-we-left-app-engine-after-it-almost-destroyed-us-40ac2fc0b1a8?1"&gt;wrote quite a bit about this in the past&lt;/a&gt; . It’s been a few years since and while it still hurts, I hope I can write in a more detached voice this time around.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I co-founded  &lt;a href="https://github.com/codenameone/CodenameOne"&gt;Codename One&lt;/a&gt; in early 2012. The SaaS portion of the company was a complex backend that orchestrated build servers. This was 2012, no Containers/Docker or anything like that was available for production. PaaS was pretty big back then and App Engine was gaining some traction.&lt;/p&gt;

&lt;p&gt;Since Codename One is a Java shop and it needed to go up fast picking up App Engine as the infrastructure made a lot of sense. Google gave a few computing resources for free which sealed the deal. &lt;/p&gt;

&lt;p&gt;Back then App Engine didn’t offer SQL, only datastore. Again we decided to use that, if it’s good enough to run Google it’s good enough to run our small product.  &lt;/p&gt;

&lt;p&gt;One important thing we should clarify. App Engine had a local debugging environment back then. But you couldn’t debug the application as it was running in the cloud. During the first 2-3 years of Codename One we were mostly pleased with App Engine. I even advocated it in a talk at JavaOne etc. &lt;/p&gt;

&lt;p&gt;One final important thing to know is that Codename One is a bootstrapped company. It’s an open source framework with limited funds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disaster-strikes"&gt;
  &lt;/a&gt;
  Disaster Strikes
&lt;/h2&gt;

&lt;p&gt;One fine day we got an email that billing is high. That seemed weird but we logged in to check it out. Our typical monthly bill was around 70$ + 400$ paid for gold support. The billing at this point was already in the 4 digits.&lt;/p&gt;

&lt;p&gt;This is where hysteria kicked in. We don’t have that kind of money…&lt;/p&gt;

&lt;p&gt;So the first order of business was to reduce every resource we had such as number of instances etc. But those weren’t the reason for the billing issue. We tried to get help from Google's gold support team, which was “unhelpful” (to put it mildly). Google’s only suggestion was to define a spending limit and effectively bring our service down as a result.&lt;/p&gt;

&lt;p&gt;The billing was entirely attributed to one line in the statement: “App Engine Datastore Read Ops”. Naturally we wanted to understand what that means and which part of the code is performing all those reads… Unfortunately, due to the way App Engine is built (or was built circa 2015) there was no way of knowing that. &lt;/p&gt;

&lt;p&gt;To make matters worse our only tool for debugging was logs, which cost money. So in order to debug this problem of higher spending I’d need to increase our spending. &lt;/p&gt;

&lt;p&gt;App engine data store reads are known to be slow. So we assumed this was a problem there. Google provides an instance of memcached which you should use when accessing the data store. As far as I knew, we used it everywhere that was frequently used to cache everything important. But it seems we missed some point and the new App Engine update triggered that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resolution"&gt;
  &lt;/a&gt;
  Resolution
&lt;/h2&gt;

&lt;p&gt;Unfortunately, deploying a new update to production was the only way to debug or fix it. But it gets worse.&lt;/p&gt;

&lt;p&gt;Billing didn’t list “live” numbers at the time (I’m unsure if it does so now). So we had to guess fixes by adding layers of caching then redeploy and wait a day to see if the change impacted the billing. This is literally the worst case scenario, we had to wait 24 hours to see if billing was impacted by the fix. &lt;/p&gt;

&lt;p&gt;Because of that each attempt at a fix, included many different improvements to the code. To this day we have no idea what the bug was and what fixed it eventually. It’s entirely possible that this was a bug in App Engine that was resolved by Google. We have no way of knowing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debrief-lessons-learned"&gt;
  &lt;/a&gt;
  Debrief – Lessons Learned
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-we-should-have-done"&gt;
  &lt;/a&gt;
  What we Should Have Done
&lt;/h3&gt;

&lt;p&gt;I’ve given this a lot of thought over the years, what could we have done differently to avoid this in the first place?&lt;/p&gt;

&lt;p&gt;Also what could we have done differently when we first discovered the problem?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#unit-tests"&gt;
  &lt;/a&gt;
  Unit Tests?
&lt;/h4&gt;

&lt;p&gt;Could we have written unit tests that would have detected or reproduced the problem?&lt;/p&gt;

&lt;p&gt;I honestly don’t know. We used JPA to abstract the storage, I guess we could have mocked the storage to see if access is cached. Before we had the issue it was a pretty niche test which we probably wouldn’t have written. &lt;/p&gt;

&lt;p&gt;When debugging this we tried to reproduce the issue with a test or in the debugger. We couldn’t replicate the problem. If we had more time to debug the issue and develop a unit test we might have been able to reproduce it in a unit test. But we were working against the clock. A doctor trying to fix a bleeding patient doesn’t have time for complex testing.&lt;/p&gt;

&lt;p&gt;Since this problem occurred outside of our code, even if we had 100% test coverage we wouldn’t have seen the problem. So while unit tests are indeed a valuable tool, in this case I don’t see how they would have helped beforehand.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#observability"&gt;
  &lt;/a&gt;
  Observability
&lt;/h4&gt;

&lt;p&gt;This really highlighted the importance of observability and the lack of it. One of my biggest peeves with Google on this case is: they charged for datastore read access. But they can’t tell me which datastores I read from (which entity/table). Having a general direction indicating where the problem was happening could have saved us thousands of dollars. &lt;/p&gt;

&lt;p&gt;Observability tools are crucial and they need the ability to dig into deep granularity.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#instant-feedback"&gt;
  &lt;/a&gt;
  Instant Feedback
&lt;/h4&gt;

&lt;p&gt;This seems like a luxury in pretty much every other case but here we saw exactly how important this can be. The test/deploy/wait cycle literally cost us thousands of dollars, because of a problem that lasted a few days. Imagine if we were a bigger company with more traffic… We could have lost millions.&lt;/p&gt;

&lt;p&gt;When you have a production problem you need your tools to report instantly. You need to know the exact problem and you need to know if your fix worked. Due to the nature of App Engine we had no way of using some of the tools that were available at the time. In retrospect we need better tools.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#local-debugging"&gt;
  &lt;/a&gt;
  Local Debugging
&lt;/h4&gt;

&lt;p&gt;There’s a movement that  &lt;a href="https://dev.to/garethmcc/why-local-development-for-serverless-is-an-anti-pattern-1d9b"&gt;objects to the idea of debugging locally&lt;/a&gt;  (at least in serverless). I see some of their points. E.g. in this case local debugging didn’t reproduce the problem.  It gave us false confidence that things worked, and they didn’t.&lt;/p&gt;

&lt;p&gt;But I’m not sure I agree with the bottom line. I think local debugging should be closer to the production. I still think we need tools to  &lt;a href="https://lightrun.com/"&gt;debug production&lt;/a&gt; , but they should be in addition to a working local environment. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#spending-limit"&gt;
  &lt;/a&gt;
  Spending Limit
&lt;/h4&gt;

&lt;p&gt;To this day I don’t know if I made the right decision of skipping the spending limit. Should we have just let the service go down for a few days while we “figure stuff out”?&lt;/p&gt;

&lt;p&gt;I honestly don’t know.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#are-you-at-risk"&gt;
  &lt;/a&gt;
  Are you at Risk?
&lt;/h3&gt;

&lt;p&gt;You might be tempted to think that you aren’t at risk. You don’t use App Engine, probably don’t use PaaS. &lt;/p&gt;

&lt;p&gt;However, Serverless and 3rd party APIs provide a similar risk. It’s a very common problem e.g. someone even  &lt;a href="https://www.behind-the-enemy-lines.com/2012/04/google-attack-how-i-self-attacked.html"&gt;hacked himself with a spreadsheet&lt;/a&gt; accidentally. Another team got a  &lt;a href="https://blog.tomilkieway.com/72k-1/"&gt;72k USD bill for a free account&lt;/a&gt; … &lt;/p&gt;

&lt;p&gt;These stories are all over the place.&lt;/p&gt;

&lt;p&gt;If you choose to use such services you MUST define a spending limit. You should also use observability tools and set up triggers to warn you if anything changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#epilogue"&gt;
  &lt;/a&gt;
  Epilogue
&lt;/h2&gt;

&lt;p&gt;A couple of years ago I met the founders of Lightrun. They outlined their vision for the company which is effectively a production debugger that gives us instant feedback securely. I instantly thought about this story. &lt;/p&gt;

&lt;p&gt;What could I have done with this tool back then?&lt;/p&gt;

&lt;p&gt;Ideas gain meaning when we feel the pain and I felt the pain deeply. This made the decision to join Lightrun a no-brainer. So I guess this horror story has a happy ending.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Today's scary story is about a promising young bootstrapped company who ventured into an environment that seemed welcoming and wholesome… Only to discover that billing suddenly flipped overnight and it was running up huge charges.&lt;/p&gt;

&lt;p&gt;You might be next, as many young companies have run into this nightmare.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tell-your-story"&gt;
  &lt;/a&gt;
  Tell Your Story
&lt;/h2&gt;

&lt;p&gt;Do you have an interesting production disaster story to share?&lt;/p&gt;

&lt;p&gt;Write to me at shaia (at) lightrun (dot) com. If you want your name/company name off this I’d be happy to oblige… I can offer a super cool Lightrun swag box as a reward, our swag here is top notch!&lt;/p&gt;

&lt;p&gt;Looking forward to hearing from you.&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>devops</category>
      <category>cloudnative</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Introducing the EyeDropper API</title>
      <author>Mads Stoumann</author>
      <pubDate>Thu, 28 Oct 2021 07:42:07 +0000</pubDate>
      <link>https://dev.to/madsstoumann/introducing-the-eyedropper-api-14d7</link>
      <guid>https://dev.to/madsstoumann/introducing-the-eyedropper-api-14d7</guid>
      <description>&lt;p&gt;The &lt;strong&gt;EyeDropper API&lt;/strong&gt; has landed in &lt;em&gt;Chrome 95&lt;/em&gt;. This API opens up a &lt;em&gt;lot of&lt;/em&gt; possiblities. A user can select colors from images, create her/his own color-theme, and much more.&lt;/p&gt;

&lt;p&gt;Let's built a simple, ultra-small &lt;em&gt;ColorPicker&lt;/em&gt;, using this new API.&lt;/p&gt;

&lt;p&gt;First, we need a form with a large selection-area, a hue-slider, and an output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"picker"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;fieldset&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"background"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"background"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"brightness"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"saturation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/fieldset&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"hue"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"range"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"hue"&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"360"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;data-blok=&lt;/span&gt;&lt;span class="s"&gt;"range"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;output&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"hex"&lt;/span&gt; &lt;span class="na"&gt;data-value=&lt;/span&gt;&lt;span class="s"&gt;"#ff0000"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/output&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The selection-area consists of a &lt;code&gt;background&lt;/code&gt; with the main color, as well as &lt;code&gt;saturation&lt;/code&gt; and &lt;code&gt;lightness&lt;/code&gt; layers, which are gradients &lt;em&gt;on top of&lt;/em&gt; that color:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zkmlZz5H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p9ths08yylf354u4t0p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zkmlZz5H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p9ths08yylf354u4t0p.png" alt="Background with saturation and lightness" width="800" height="800"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The hue-slider is a regular &lt;code&gt;&amp;lt;input type="range"&amp;gt;&lt;/code&gt;, styled with 12 color-stops (360 degrees / 12 = a stop every 30 degree): &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YWf-hBK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6mr1umzdkjxuzplgzde.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YWf-hBK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6mr1umzdkjxuzplgzde.png" alt="Hue-slider" width="800" height="48"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To update the hue as we drag the hue-slider, we need a bit of JavaScript, updating a simple custom property, &lt;code&gt;--hue&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--hue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;valueAsNumber&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, if the &lt;strong&gt;EyeDropper API&lt;/strong&gt; is supported in the browser (currently &lt;strong&gt;only&lt;/strong&gt; Chrome 95+), we'll add a click-listener to the selection-area:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;EyeDropper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pickColor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, we'll invoke the &lt;em&gt;EyeDropper API&lt;/em&gt; with the &lt;code&gt;pickColor&lt;/code&gt;-function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;pickColor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EyeDropper&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ED&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--hex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sRGBHex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sRGBHex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, try it out:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZrLdQ_DL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxlh3q4ckfh6twepi9hq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZrLdQ_DL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxlh3q4ckfh6twepi9hq.png" alt="EyeDropper" width="880" height="1014"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it! A &lt;em&gt;ColorPicker&lt;/em&gt; with approx &lt;strong&gt;200 bytes&lt;/strong&gt; of JavaScript, when minified and gzipped. &lt;/p&gt;

&lt;p&gt;In a real-life scenario, you'd probably add a “selection”-circle, listen for &lt;code&gt;pointer-move&lt;/code&gt;-events etc., but this should get you started.&lt;/p&gt;

&lt;p&gt;Here's a Codepen-demo:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/VwzWrpV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>10 VS Code extensions every Frontend Developer should use</title>
      <author>Jonny coder</author>
      <pubDate>Thu, 28 Oct 2021 07:32:13 +0000</pubDate>
      <link>https://dev.to/jonnywq/10-vs-code-extensions-every-frontend-developer-should-use-194n</link>
      <guid>https://dev.to/jonnywq/10-vs-code-extensions-every-frontend-developer-should-use-194n</guid>
      <description>&lt;p&gt;Hello everyone, my name is Vansh and I'm a frontend developer. In this blog post, I would like to share 10 VS code extensions that every frontend developer should use. The purpose of using these extensions is to write faster, cleaner, and more consistent code. Let's Jump in! &lt;/p&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/10-vs-code-extensions-every-frontend-developer-should-use/"&gt;10 VS Code extensions every Frontend Developer should use&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>Building a Wallet System with Django and Wallets Africa API</title>
      <author>John Shodipo</author>
      <pubDate>Thu, 28 Oct 2021 07:27:29 +0000</pubDate>
      <link>https://dev.to/johnkayode/building-a-wallet-system-with-django-and-wallets-africa-api-2l2g</link>
      <guid>https://dev.to/johnkayode/building-a-wallet-system-with-django-and-wallets-africa-api-2l2g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;Django is a Python framework for rapid web development. It takes care of much of the hassle of web development, so you can focus on writing your app without needing to reinvent the wheel. &lt;a href="https://wallets.africa/"&gt;Wallets Africa&lt;/a&gt;  helps Africans and African owned businesses send money, receive money, make card payments and access loans.&lt;/p&gt;

&lt;p&gt;A good number of applications today use digital wallets to enable users pay for services like electricity, tickets or even transfer money. Wallets Africa API makes it easy for developers to manage users' wallets and enable users to receive and withdraw money on your application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Let's create and activate a virtual environment for our project. A virtual environment helps to keep our project dependencies isolated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MacOS/Linux&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python -m venv env
source env/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python -m venv env
env\scripts\activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see the name of your virtual environment (env) in brackets on your terminal line.&lt;/p&gt;

&lt;p&gt;Next, we install django and create a django project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install django
django-admin startproject django_wallets
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and change your directory to the project folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd django_wallets
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'd be having two applications in this project.&lt;br&gt;
An accounts app to handle user authentication and authorization, then a wallets app to handle deposits and withdrawals for each user.&lt;br&gt;
Let's create our accounts and wallets applications:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py startapp accounts &amp;amp;&amp;amp; python manage.py startapp wallets
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create two folders; &lt;em&gt;accounts&lt;/em&gt; and &lt;em&gt;wallets&lt;/em&gt; in our project folder. Now, we need to register our apps with the project. Open the settings file in our &lt;em&gt;django_wallets&lt;/em&gt; folder and find the &lt;strong&gt;INSTALLED APPS&lt;/strong&gt; section, you should find this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the newly created apps by replacing it with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts.apps.AccountsConfig',
    'wallets.apps.WalletsConfig'
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's build our accounts application. By default, Django uses usernames to unique identify users during authentication. In this project however, we'd use emails instead. To do this, we'd create a custom user model by subclassing Django's &lt;strong&gt;AbstractUser&lt;/strong&gt; model. First, we create a &lt;strong&gt;managers.py&lt;/strong&gt; file in the &lt;strong&gt;accounts&lt;/strong&gt; folder for our CustomUser Manager:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.contrib.auth.base_user import BaseUserManager
from django.utils.translation import gettext_lazy as _

class CustomUserManager(BaseUserManager):
    def create_user(self, email, password, **extra_fields):
        if not email:
            raise ValueError(_("email address cannot be left empty!"))
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save()
        return user

    def create_superuser(self, email, password, **extra_fields):
        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("is_superuser", True)
        extra_fields.setdefault("is_active", True)
        extra_fields.setdefault("user_type", 'ADMIN')

        if extra_fields.get("is_staff") is not True:
            raise ValueError(_("superuser must set is_staff to True"))
        if extra_fields.get("is_superuser") is not True:
            raise ValueError(_("superuser must set is_superuser to True"))

        return self.create_user(email, password, **extra_fields)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A Manager is the interface through which database query operations are provided to Django models. By default, Django adds a Manager with the name &lt;strong&gt;objects&lt;/strong&gt; to every Django model class. We would be overriding this custom User Manager with this CustomUserManager which uses email as the primary identifier instead.&lt;/p&gt;

&lt;p&gt;Next, We'd create our custom user model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.contrib.auth.models import AbstractUser
from django.db import models
from django.utils.translation import gettext_lazy as _

from .manager import CustomUserManager

import uuid


class CustomUser(AbstractUser):

    username = None
    uid = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    email = models.EmailField(_("email address"), blank=False, unique=True)
    first_name = models.CharField(_("first name"), max_length=150, blank=False)
    last_name = models.CharField(_("last name"), max_length=150, blank=False)
    date_of_birth = models.DateField(_("date of birth"), max_length=150, blank=False)
    verified = models.BooleanField(_("verified"), default=False)


    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = []

    objects = CustomUserManager()

    def __str__(self):
        return self.email
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we removed the &lt;strong&gt;username&lt;/strong&gt; field and made &lt;strong&gt;email&lt;/strong&gt; field unique and, then set the email as the &lt;strong&gt;USERNAME_FIELD&lt;/strong&gt;, which defines the unique identifier for the User model. We also used a UUID_FIELD as our unique identifier and used the Python's &lt;strong&gt;uuid&lt;/strong&gt; library to generate random objects as default values.&lt;/p&gt;

&lt;p&gt;Then, we add this to our &lt;strong&gt;settings.py&lt;/strong&gt; file so Django recognize the new User model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;AUTH_USER_MODEL = "accounts.CustomUser"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's migrate our database (We'd be using the default sqlite database for the purpose of this tutorial)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py makemigrations &amp;amp;&amp;amp; python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's run our application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open &lt;a href="http://127.0.0.1:8000/"&gt;http://127.0.0.1:8000/&lt;/a&gt; on your browser and the response should be similar as the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J2FoaqhM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634942421036/SwX5knwpx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J2FoaqhM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634942421036/SwX5knwpx.jpeg" alt="django.jpg" width="880" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's create our registration and login forms. Create a &lt;strong&gt;forms.py&lt;/strong&gt; file in the &lt;strong&gt;accounts&lt;/strong&gt; folder and copy this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django import forms
from django.forms.widgets import PasswordInput, TextInput, EmailInput, FileInput, NumberInput
from .models import CustomUser


from .models import CustomUser




class UserRegistrationForm(forms.ModelForm):
    password1 = forms.CharField(widget=PasswordInput(attrs={'class':'form-control', 'placeholder':'Password', 'required':'required'}))
    password2 = forms.CharField(widget=PasswordInput(attrs={'class':'form-control', 'placeholder':'Confirm Password', 'required':'required'}))

    class Meta:
        model = CustomUser
        fields = ('first_name','last_name','email','date_of_birth') 
        widgets = {
        'first_name':TextInput(attrs={'class':'form-control', 'placeholder':'First Name', 'required':'required'}),
        'last_name':TextInput(attrs={'class':'form-control', 'placeholder':'Last Name', 'required':'required'}),
        'email': EmailInput(attrs={'class':'form-control', 'placeholder':'Email', 'required':'required'}),
        'date_of_birth': DateInput(attrs={'class':'form-control', 'placeholder':'Date of Birth', 'required':'required','type': 'date'}),
    }

    def clean_password2(self):
        password1 = self.cleaned_data.get("password1")
        password2 = self.cleaned_data.get("password2")
        if password1 and password2 and password1 != password2:
            raise forms.ValidationError("Passwords don't match")
        return password2

    def save(self, commit=True):
        user = super().save(commit=False)
        user.set_password(self.cleaned_data["password1"])
        if commit:
            user.save()
        return user

class CustomAuthForm(forms.Form): 
    email = forms.CharField(widget=EmailInput(attrs={'class':'form-control', 'placeholder':'Email', 'required':'required'}))
    password = forms.CharField(widget=PasswordInput(attrs={'class':'form-control','placeholder':'Password', 'required':'required'}))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should notice the custom CSS classes added to form fields. We'd be using Bootstrap to style the forms. Bootstrap is a CSS framework directed at responsive, mobile-first front-end web development. Next, we create our registration view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.shortcuts import render

from .forms import UserCreationForm



def register(request):
    form = UserRegistrationForm(request.POST or None)
    if request.method == 'POST':
        if form.is_valid():
            new_user = form.save()
            return redirect('accounts:register')
    return render(request, "accounts/register.html", context = {"form":form})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have created a templates folder in our project directory. You can copy the html templates from Github &lt;a href="https://github.com/Johnkayode/django-wallets/tree/main/templates/"&gt;here&lt;/a&gt;. Go to the &lt;strong&gt;settings.py&lt;/strong&gt; and update the TEMPLATES section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tells Django to load the templates from the templates folder in the project directory. Add the registration url to the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.urls import path

from .views import register
app_name = "accounts"

urlpatterns = [
    path('register/', register, name="register"),
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we include the accounts app urls to the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('account/', include('accounts.urls', namespace='accounts'))
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open 127.0.0.1:8000/account/register/ on your browser, this should show up:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8VrG2MD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635262350422/SBu7JjIX-.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8VrG2MD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635262350422/SBu7JjIX-.jpeg" alt="login.jpg" width="880" height="445"&gt;&lt;/a&gt;&lt;br&gt;
Users can now register. Now let's create our login view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def login_user(request):
    form = CustomAuthForm(request.POST or None)
    if request.method == 'POST':
        if form.is_valid():
            cd = form.cleaned_data
            user = authenticate(request, email = cd['email'], password=cd['password']) 
            if user is not None:
                login(request, user)
                return redirect('accounts:dashboard')
            else:
                messages.error(request, 'Account does not exist')
    return render(request, "accounts/login.html", context = {"form":form})

@login_required
def dashboard(request):
    return render(request, "dashboard.html", context={})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we add the urls:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;urlpatterns = [
    path('register/', register, name="register"),
    path('login/', login_user, name="login"),
    path('', dashboard, name="dashboard"),
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, our login and registration routes should be working. After successful login, the user should be redirected to the dashboard. You might have noticed the verified field on the CustomUser model is set to False by default. After the user have provided their bvn and a wallet has been created, the verified field is changed to True. But before then, let's update our register route to redirect to login after successful registration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def register(request):
    form = UserRegistrationForm(request.POST or None)
    if request.method == 'POST':
        if form.is_valid():
            new_user = form.save()
            messages.success(request, 'Account succesfully created. You can now login')
            return redirect('accounts:login')
    return render(request, "accounts/register.html", context = {"form":form})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's create our Wallet model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.db import models, transaction
from django.utils.translation import gettext_lazy as _
from accounts.models import CustomUser

import uuid

class Wallet(models.Model):
    uid = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.OneToOneField(CustomUser, on_delete=models.SET_NULL, null=True)
    balance = models.DecimalField(_("balance"), max_digits=100, decimal_places=2)
    account_name = models.CharField(_("account name"), max_length=250)
    account_number = models.CharField(_("account number"), max_length=100)
    bank = models.CharField(_("bank"), max_length=100)
    phone_number = models.CharField(_("phone number"), max_length=15)
    password = models.CharField(_("password"), max_length=200)
    created = models.DateTimeField(auto_now_add=True)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, run migrations for the application. The user field's on_delete is set to null because we don't want to delete a wallet even after a user's account has been deleted. A user can only have a wallet after he has been verified. Now let's create our wallet_creation form and view.&lt;br&gt;
&lt;strong&gt;Form&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class BVNForm(forms.Form): 
    bvn = forms.CharField(widget=NumberInput(attrs={'class':'form-control', 'placeholder':'Your BVN', 'required':'required'}))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;View&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from wallets.api import WalletsClient
from wallets.models import Wallet

from cryptography.fernet import Fernet



wallet = WalletsClient(secret_key="hfucj5jatq8h", public_key="uvjqzm5xl6bw")
fernet = Fernet(settings.ENCRYPTION_KEY)


@login_required
def create_wallet(request):
    form = BVNForm(request.POST or None)
    if request.method == 'POST':
        if form.is_valid():
            cd = form.cleaned_data
            user = request.user
            bvn = cd["bvn"]
            new_wallet = wallet.create_user_wallet(
                    first_name= user.first_name,
                    last_name= user.last_name,
                    email=user.email,
                    date_of_birth= user.date_of_birth.strftime('%Y-%m-%d'),
                    bvn= str(bvn)
                )
            if new_wallet["response"]["responseCode"] == '200':
                user.verified = True
                user.save()
                Wallet.objects.create(
                    user = user,
                    balance = new_wallet["data"]["availableBalance"],
                    account_name = new_wallet["data"]["accountName"],
                    account_number = new_wallet["data"]["accountNumber"],
                    bank = new_wallet["data"]["bank"],
                    phone_number = new_wallet["data"]["phoneNumber"],
                    password = fernet.encrypt(new_wallet["data"]["password"].encode())
                )
                messages.success(request, "Account verified, wallet successfully created")
                return redirect("accounts:dashboard")
            else:
                messages.error(request, new_wallet["response"]["message"])

    return render(request, "accounts/bvn.html", context = {"form":form})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have written a simple API wrapper for Wallets Africa API, you can check it out on  &lt;a href="https://github.com/Johnkayode/django-wallets/blob/main/wallets/api.py"&gt;Github&lt;/a&gt;. For the purpose of this tutorial, we used a test keys and token provided by Wallets Africa, you need to create a Wallets Africa account for your secret and public keys for production:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FgEils6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635370091714/sLZP84bsQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FgEils6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635370091714/sLZP84bsQ.png" alt="wallets.png" width="880" height="400"&gt;&lt;/a&gt;&lt;br&gt;
The &lt;strong&gt;create_wallet&lt;/strong&gt; view receives the BVN and creates the wallet using the API and then saves the wallet details to the database. We used the cryptography package to encrypt the wallet password before saving to the database. Add an &lt;strong&gt;ENCRYPTION_KEY&lt;/strong&gt; to your &lt;strong&gt;settings.py&lt;/strong&gt;, you can also generate the encryption key with the &lt;strong&gt;cryptography&lt;/strong&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from cryptography.fernet import Fernet

key = Fernet.generate_key()
ENCRYPTION_KEY = key
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's add a permission that prevents unverified users from accessing the dashboard. Create a &lt;strong&gt;decorators.py&lt;/strong&gt; file in the &lt;strong&gt;accounts&lt;/strong&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from functools import wraps
from django.shortcuts import redirect
from django.contrib import messages

def verified(function):
  @wraps(function)
  def wrap(request, *args, **kwargs):

        if request.user.verified:
             return function(request, *args, **kwargs)
        else:
            messages.error(request, "Your account hasn't been verified")
            return redirect("accounts:verify")

  return wrap
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a custom decorator that redirects a user to the verification page if the account hasn't been verified. We can now add our custom decorator to the dashboard view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from .decorators import verified

@login_required
@verified
def dashboard(request):
    wallet = get_object_or_404(Wallet, user=request.user)
    return render(request, "dashboard.html", context={"wallet":wallet})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also added the user's wallet to be rendered on the dashboard. Visit 127.0.0.1:8000/account on your browser, it should redirect you to the verification page if you're unverified or to the dashboard if you are vefiried. The dashboard page should be similar to this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n6bEIWuN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635295116609/1YUD41Wet.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n6bEIWuN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635295116609/1YUD41Wet.jpeg" alt="dashboard.jpg" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's add our logout view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@login_required
def logout_user(request):
    logout(request)
    return redirect("accounts:login")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, add the logout url:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;urlpatterns = [
    ...
    path('logout/', logout_user, name="logout"),

]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, users can fund their wallets by making a bank transfer to the account linked to their wallets. We need to update their wallet balance as soon as the transfer is successful. This can be done through webhooks. A webhook is a URL on your server where payloads are sent from a third party service (Wallets Africa in this case) whenever certain transaction actions occur on each wallets. First, we create a WalletTransaction model to save each transactions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class WalletTransaction(models.Model):
    class STATUS(models.TextChoices):
        PENDING = 'pending', _('Pending')
        SUCCESS = 'success', _('Success')
        FAIL = 'fail', _('Fail')

    class TransactionType(models.TextChoices):
        BANK_TRANSFER_FUNDING = 'funding', _('Bank Transfer Funding')
        BANK_TRANSFER_PAYOUT = 'payout', _('Bank Transfer Payout')
        DEBIT_USER_WALLET = 'debit user wallet', _('Debit User Wallet')
        CREDIT_USER_WALLET = 'credit user wallet', _('Credit User Wallet')

    transaction_id = models.CharField(_("transaction id"), max_length=250)
    status = models.CharField(max_length=200, null=True, 
        choices=STATUS.choices, 
        default=STATUS.PENDING
    )
    transaction_type = models.CharField(max_length=200, null=True,
        choices=TransactionType.choices
        )
    wallet = models.ForeignKey(Wallet, on_delete=models.SET_NULL, 
        null=True
    )
    amount = models.DecimalField(_("amount"), max_digits=100, decimal_places=2)
    date = models.CharField(_("date"), max_length=200)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are saving the date in string data because of the uncertain data type in the payload.&lt;br&gt;
Next, we create the view that will consume the webhook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.db import transaction
from django.http import HttpResponse, HttpResponseForbidden
from django.shortcuts import render, get_object_or_404
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST

from ipaddress import ip_address, ip_network
import json

from .models import Wallet, WalletTransaction


@csrf_exempt
@require_POST
def webhook(request):
    whitelist_ip = "18.158.59.198"
    forwarded_for = u'{}'.format(request.META.get('HTTP_X_FORWARDED_FOR'))
    client_ip_address = ip_address(forwarded_for)

    if client_ip_address != ip_network(whitelist_ip):
        return HttpResponseForbidden('Permission denied.')

    payload = json.loads(request.body)

    if payload['EventType'] == "BankTransferFunding":
        wallet = get_object_or_404(Wallet, phone_number = payload["phoneNumber"])
        wallet.balance += payload["amount"]
        wallet.save()
        transaction =  WalletTransaction.objects.create(
            transaction_id = payload["transactionRef"],
            transaction_type = "funding",
            wallet = wallet,
            status = "success",
            amount = payload["amount"],
            date = payload["DateCredited"]
        )
    else:
        pass
    return HttpResponse(status=200)


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This view checks if the webhook is from a trusted IP address (All Wallets Africa webhook comes from the host IP: 18.158.59.198) then updates the wallet balance and also create a wallet transaction. Let's add the webhook to our app urls:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.urls import path

from .views import webhook

urlpatterns = [
    path(
        "webhooks/wallets_africa/aDshFhJjmIalgxCmXSj/",
         webhook,
         name = "webhook"
    ),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We added a random string to the url for a bit of security , add the webhook url to your Wallets Africa dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HAhdZol8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635374175605/tcuBCl8Lm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HAhdZol8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635374175605/tcuBCl8Lm.png" alt="webhook.png" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our wallets app is now ready:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_T-w94VS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635378673271/9NBvdfOdc.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_T-w94VS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635378673271/9NBvdfOdc.jpeg" alt="ready.jpg" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;By integrating Wallets Africa with Django, we built a wallet application that allows user to fund their digital wallets by making a bank transfer. We also went through Django's Custom User Manager features that allows us use emails rather than usernames for authentication.&lt;/p&gt;

&lt;p&gt;The source code is available on  &lt;a href="https://github.com/johnkayode/django-wallets"&gt;Github&lt;/a&gt;.&lt;br&gt;
If you have any questions, don't hesitate to contact me on  &lt;a href="https://twitter.com/nerd_thejohn"&gt;Twitter&lt;/a&gt; .&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
