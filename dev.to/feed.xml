<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>HEY, I need help... </title>
      <author>IVgamers</author>
      <pubDate>Fri, 07 May 2021 19:58:52 +0000</pubDate>
      <link>https://dev.to/ivcoder/hey-i-need-help-4ooi</link>
      <guid>https://dev.to/ivcoder/hey-i-need-help-4ooi</guid>
      <description>&lt;p&gt;&lt;strong&gt;MY CSS SUCKS&lt;/strong&gt; &lt;em&gt;But your gonna help right?&lt;/em&gt; as u see my chat application &lt;a href="https://www.just-talk.ml"&gt;just-talk&lt;/a&gt; or &lt;a href="https://Just-Chat.timothyrowell.repl.co"&gt;just-chat&lt;/a&gt; SUCK's someone help I desperate and new to code! &lt;em&gt;u in?&lt;/em&gt; thanks.&lt;/p&gt;

</description>
      <category>firstpost</category>
      <category>help</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 07 May 2021 19:24:59 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-nbe</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-nbe</guid>
      <description>&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking back on your week ‚Äî what was something you're proud of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All wins count ‚Äî big or small üéâ&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Starting a new book ... or whatever else might spark joy ‚ù§Ô∏è &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Happy Friday!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/EktbegF3J8QIo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/EktbegF3J8QIo/giphy.gif" alt="Pokemon party"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>How I Negotiated Job Offers in my Career...</title>
      <author>Ankur Tyagi</author>
      <pubDate>Fri, 07 May 2021 18:11:54 +0000</pubDate>
      <link>https://dev.to/tyaga001/how-i-negotiated-job-offers-in-my-career-453f</link>
      <guid>https://dev.to/tyaga001/how-i-negotiated-job-offers-in-my-career-453f</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-i-negotiated-job-offers-in-my-career"&gt;
  &lt;/a&gt;
  How I Negotiated Job Offers in my Career...
&lt;/h1&gt;

&lt;p&gt;*&lt;em&gt;Congratulations, you got an offer! *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That‚Äôs great news, negotiating the details of an offer is part of the process of getting hired. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One important thing to remember is that entry-level jobs are not always open for salary negotiation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;but that doesn‚Äôt mean that you can‚Äôt work with an employer to make sure you get a combination of salary and benefits that will work for you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúWhether you think you can or you think you can‚Äôt, you‚Äôre right.‚Äù ‚Äî Henry Ford&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#salary-negotiation-is-an-art"&gt;
  &lt;/a&gt;
  Salary negotiation is an art.
&lt;/h2&gt;

&lt;p&gt;If you don‚Äôt ask for what you want, you‚Äôre not going to get it.&lt;/p&gt;

&lt;p&gt;It does not matter how slowly you go as long as you do not stop.&lt;/p&gt;

&lt;p&gt;Believe you can negotiate and you‚Äôre halfway there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-always-establish-a-connection-with-my-negotiator"&gt;
  &lt;/a&gt;
  I always establish a connection with my negotiator...
&lt;/h2&gt;

&lt;p&gt;You‚Äôve got to develop, in whatever amount of time you have, a degree of personal empathy with that person&lt;/p&gt;

&lt;p&gt;some kind of personal connection with the individual so they look at you as other than something like a cog in a wheel.&lt;/p&gt;

&lt;p&gt;If you want to maximize your pay, the rule is: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Do not bring up pay first."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you throw out the first number, you might be negotiating against yourself, since it is possible the employer would be willing to make a higher salary offer than what you propose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-make-all-of-my-requests-at-once-when-negotiating"&gt;
  &lt;/a&gt;
  I make all of my requests at once when negotiating...
&lt;/h2&gt;

&lt;p&gt;Don‚Äôt make the mistake of negotiating each benefit individually so that you are constantly requesting new stuff. &lt;/p&gt;

&lt;p&gt;Divide your request in two ways: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hard request&lt;/li&gt;
&lt;li&gt;soft request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Anything related to pay, bonuses and stock options should be negotiated together, as part of your hard requests. &lt;/p&gt;

&lt;p&gt;Once you have reached an agreement on those, move on to the softer requests like vacation time, flexible work, and job title, WFH.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-always-go-with-my-research"&gt;
  &lt;/a&gt;
  I always go with my research...
&lt;/h2&gt;

&lt;p&gt;There are several sites that can help make the process both quick and easy. &lt;/p&gt;

&lt;p&gt;To get a better idea of the average salary for a specific job or industry, head over to Glassdoor.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do or do not. There is no try...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#i-always-be-grateful-not-entitled"&gt;
  &lt;/a&gt;
  I always be grateful, not entitled...
&lt;/h2&gt;

&lt;p&gt;One of the most important aspects of negotiating a job offer is saying thank you as soon as you receive it.&lt;/p&gt;

&lt;p&gt;Receiving an offer is a great sign that an employer sees your potential and believes that you would be a good fit for the role.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-never-focus-entirely-on-the-salary-during-negotiating"&gt;
  &lt;/a&gt;
  I never focus entirely on the salary during negotiating...
&lt;/h2&gt;

&lt;p&gt;Many developers only negotiate salary and bonuses, but that is a huge mistake. &lt;/p&gt;

&lt;p&gt;There are many other aspects of a job that can be negotiated.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúThe future depends on what you do today.‚Äù ‚Äî Mahatma Gandhi&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#i-never-sell-myself-short"&gt;
  &lt;/a&gt;
  I never sell myself short...
&lt;/h2&gt;

&lt;p&gt;Most developers don‚Äôt realize the amount of value and benefit you can bring to a company.&lt;/p&gt;

&lt;p&gt;During a negotiation, the employer is trying to entice you to work for them while offering you the minimum.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúNothing will work unless you do.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don‚Äôt be afraid to show your worth to the company and back it up with statistics and your experience to get the best job offer you deserve.&lt;/p&gt;

&lt;p&gt;I am not a product of my circumstances. &lt;br&gt;
I am a product of my decisions.&lt;br&gt;
I am a product of my mistakes. &lt;/p&gt;

&lt;p&gt;Harder I practice, luckier I get.&lt;/p&gt;

&lt;p&gt;That's it for today &amp;amp; Thanks for reading. &lt;/p&gt;

&lt;p&gt;I have recently written a book for developer growth &amp;amp; shared my 11+ years of experience.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are serious to grow as a developer. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Grab the book now for just $20 &lt;a href="https://gumroad.com/l/nextgendev/grow"&gt;The Prime Guide&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0QSnKm7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619958998661/st8Eq0o8b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0QSnKm7j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619958998661/st8Eq0o8b.png" alt="book.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Join 100+ developers who already bought &amp;amp; growing better. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KFCrNgLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/beojtaoajaziwv46rkdi.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KFCrNgLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/beojtaoajaziwv46rkdi.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-write-more-about-code-life-and-fitness-in-my-211-newsletter"&gt;
  &lt;/a&gt;
  I write more about code life and fitness in my 2-1-1 newsletter.
&lt;/h3&gt;

&lt;p&gt;I encourage you to sign up for my weekly:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‚Äú2-1-1‚Äù Friday newsletter:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check out the latest edition: üëá&lt;/p&gt;

&lt;p&gt;It's free.  &lt;a href="https://codelifefitness.com/2-1-1/"&gt;CLF&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>career</category>
    </item>
    <item>
      <title>Linux admin skillset</title>
      <author>Roadmaps master</author>
      <pubDate>Fri, 07 May 2021 18:08:20 +0000</pubDate>
      <link>https://dev.to/roadmaps/linux-admin-skillset-4gof</link>
      <guid>https://dev.to/roadmaps/linux-admin-skillset-4gof</guid>
      <description>&lt;p&gt;Skillset for linux admin from one famous company. I have removed some data. It is be very useful for middle and senior linux administrators for growth&lt;/p&gt;

&lt;p&gt;&lt;a href="https://infinite.education/expertise/senior_linux_system_administrator"&gt;https://infinite.education/expertise/senior_linux_system_administrator&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>devops</category>
      <category>ansible</category>
      <category>beginners</category>
    </item>
    <item>
      <title>27 Chrome Browser Extensions For Front-end, React, Vue, Programming, General</title>
      <author>Eleftheria Batsou</author>
      <pubDate>Fri, 07 May 2021 18:02:17 +0000</pubDate>
      <link>https://dev.to/eleftheriabatsou/27-chrome-browser-extensions-for-front-end-react-vue-programming-general-2bo8</link>
      <guid>https://dev.to/eleftheriabatsou/27-chrome-browser-extensions-for-front-end-react-vue-programming-general-2bo8</guid>
      <description>&lt;p&gt;Let's check some chrome extensions for Front-end, React, Vue, Programming and for general use! If you use different extensions let me know I'll do a part-2. &lt;/p&gt;

&lt;p&gt;Note: this post has been created with the help of my  &lt;a href="https://twitter.com/BatsouElef/status/1387686592731500545"&gt;Twitter&lt;/a&gt; friends.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;What browser extensions do you use?&lt;a href="https://twitter.com/hashtag/100DaysOfCode?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#100DaysOfCode&lt;/a&gt;&lt;/p&gt;‚Äî Eleftheria Batsou (@BatsouElef) &lt;a href="https://twitter.com/BatsouElef/status/1387686592731500545?ref_src=twsrc%5Etfw"&gt;April 29, 2021&lt;/a&gt;
&lt;/blockquote&gt; 
&lt;h2&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Front-end
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#1-json-formatter"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en"&gt;JSON Formatter&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6wisS4vC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620235488126/pMrt4sDUT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wisS4vC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620235488126/pMrt4sDUT.png" alt="1.jasonFr.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FEATURES&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSON &amp;amp; JSONP support&lt;/li&gt;
&lt;li&gt;Syntax highlighting&lt;/li&gt;
&lt;li&gt;Collapsible trees, with indent guides&lt;/li&gt;
&lt;li&gt;Clickable URLs&lt;/li&gt;
&lt;li&gt;Toggle between raw and parsed JSON&lt;/li&gt;
&lt;li&gt;Works on any valid JSON page ‚Äì URL doesn't matter&lt;/li&gt;
&lt;li&gt;Works on local files too &lt;/li&gt;
&lt;li&gt;You can inspect the JSON by typing "json" in the console&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-allow-cors"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://chrome.google.com/webstore/detail/allow-cors-access-control/lhobafahddgcelffkeicbaginigeejlf?hl=en"&gt;Allow CORS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wScdiylh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620307046184/hlgtQIOIs.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wScdiylh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620307046184/hlgtQIOIs.jpeg" alt="13.allowcors.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Allow CORS: Access-Control-Allow-Origin lets you easily perform cross-domain Ajax requests in web applications.&lt;/p&gt;

&lt;p&gt;Simply activate the add-on and perform the request. CORS or Cross Origin Resource Sharing is blocked in modern browsers by default (in JavaScript APIs). Installing this add-on will allow you to unblock this feature.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-modheader"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://chrome.google.com/webstore/detail/modheader/idgpnmonknjnojddfkpgkljpfnnfcklj?hl=en"&gt;ModHeader&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ieqZBhRg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620309393849/CWhZ1w4wB.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ieqZBhRg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620309393849/CWhZ1w4wB.jpeg" alt="20.modify.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FEATURES&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add / modify / remove request headers and response headers (you can use this to set X-Forwarded-For, Authorization, Access-Control-Allow-Origin: *)&lt;/li&gt;
&lt;li&gt;Conditionally enable header modification based on URL and/or resource type&lt;/li&gt;
&lt;li&gt;Add comments to header&lt;/li&gt;
&lt;li&gt;Support having multiple profiles with quick switching between profiles&lt;/li&gt;
&lt;li&gt;Sorting headers and name, value, or comments&lt;/li&gt;
&lt;li&gt;Append value to existing request or response header&lt;/li&gt;
&lt;li&gt;Export and import header&lt;/li&gt;
&lt;li&gt;Clone profile&lt;/li&gt;
&lt;li&gt;Cloud backup&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-web-sniffer"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://chrome.google.com/webstore/detail/web-sniffer/ndfgffclcpdbgghfgkmooklaendohaef?hl=en"&gt;Web Sniffer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MFK02Cj8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620236120624/0ACgI-Bj2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MFK02Cj8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620236120624/0ACgI-Bj2.jpeg" alt="4 sniffer.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;View all HTTP Requests and Responses sent between the Web browser and the Web server.&lt;br&gt;
For every HTTP request, the following information is displayed (can hide):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tab ID, Title [filtered]&lt;/li&gt;
&lt;li&gt;Request ID&lt;/li&gt;
&lt;li&gt;Type Request [filtered]&lt;/li&gt;
&lt;li&gt;Time [filtered]&lt;/li&gt;
&lt;li&gt;Status [filtered]&lt;/li&gt;
&lt;li&gt;Method (GET/POST, POST Body) [filtered]&lt;/li&gt;
&lt;li&gt;Hostname [filtered]&lt;/li&gt;
&lt;li&gt;URL (GET Params)&lt;/li&gt;
&lt;li&gt;Headers (Request/Response)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-wappalyzer"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg"&gt;Wappalyzer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cz9Rsd3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620307408291/ofPfjqpwu.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cz9Rsd3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620307408291/ofPfjqpwu.jpeg" alt="15.wazzy.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wappalyzer is a browser extension that uncovers the technologies used on websites. It detects content management systems, eCommerce platforms, web servers, JavaScript frameworks, analytics tools and many more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-whatfont"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://chrome.google.com/webstore/detail/whatfont/jabopobgcpjmedljpbcaablpmlmfcogm"&gt;WhatFont&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uHpPLRd0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620310563275/4-cYFMwWL.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uHpPLRd0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620310563275/4-cYFMwWL.jpeg" alt="21.WHAT FONT.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The easiest way to identify fonts on web pages. What is the easiest way to find out the fonts used in a webpage? Firebug and Webkit Inspector are easy enough to use for developers. However, for others, this should not be necessary. With this extension, you could inspect web fonts by just hovering on them. It is that simple and elegant.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-css-peeper"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://chrome.google.com/webstore/detail/css-peeper/mbnbehikldjhnfehhnaidhjhoofhpehk"&gt;CSS Peeper&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Jq1-4oB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620310853636/rgOe8t4n4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Jq1-4oB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620310853636/rgOe8t4n4.jpeg" alt="23cssproper.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Extract CSS and build beautiful styleguides. No more digging in a code. Inspect styles in a simple, well-organized &amp;amp; beautiful way. Get it now! CSS Peeper is a CSS viewer tailored for Designers. Get access to the useful styles with our Chrome extension. Our mission is to let Designers focus on design, and spend as little time as possible digging in a code.&lt;/p&gt;

&lt;p&gt;Ever wondered what‚Äôs the line-height, font or a button size on a website? We provide you the ultimate tool to satisfy your curiosity. We enable you to inspect code in the easiest possible way. Check the hidden CSS style of objects, colors and assets on the web.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8html-to-figma"&gt;
  &lt;/a&gt;
  8.&lt;a href="https://chrome.google.com/webstore/detail/html-to-figma/efjcmgblfpkhbjpkpopkgeomfkokpaim"&gt;HTML to Figma&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UYjBuGog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620310922110/KEBr8qMWE.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UYjBuGog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620310922110/KEBr8qMWE.jpeg" alt="24.figma.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use this extension to capture your current page and import it as editable Figma layers! What it's useful for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easily import real live site styles for a starting point for designs and prototypes&lt;/li&gt;
&lt;li&gt;Quickly turn real site components into design components&lt;/li&gt;
&lt;li&gt;Easy import components from storybook, etc&lt;/li&gt;
&lt;li&gt;Import a great live web design as a starting point for inspiration for your mockups&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#9-colorzilla"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp?hl=en"&gt;ColorZilla&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xL33S7l---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620235702093/JCWx-afFQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xL33S7l---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620235702093/JCWx-afFQ.jpeg" alt="2.colorzilla.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FEATURES&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Eyedropper - get the color of any pixel on the page&lt;/li&gt;
&lt;li&gt;Advanced Color Picker (similar to Photoshop's)&lt;/li&gt;
&lt;li&gt;Ultimate CSS Gradient Generator&lt;/li&gt;
&lt;li&gt;Webpage Color Analyzer - get a color palette for any site&lt;/li&gt;
&lt;li&gt;Palette Viewer with 7 pre-installed palettes&lt;/li&gt;
&lt;li&gt;Color History of recently picked colors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#10-react-developer-tools"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en"&gt;React Developer Tools&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XYHTZjQg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620235909791/ua1j2kMDK.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XYHTZjQg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620235909791/ua1j2kMDK.jpeg" alt="3.reactdev.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React Developer Tools is a Chrome DevTools extension for the open-source React JavaScript library. It allows you to inspect the React component hierarchies in the Chrome Developer Tools.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-redux-devtools"&gt;
  &lt;/a&gt;
  11. &lt;a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en"&gt;Redux DevTools&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Redux DevTools is for debugging application state changes.&lt;br&gt;
The extension provides power-ups for your Redux development workflow. Apart from Redux, it can be used with any other architectures which handle the state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vuejs"&gt;
  &lt;/a&gt;
  VueJS
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#12-vuejs-devtools"&gt;
  &lt;/a&gt;
  12. &lt;a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd"&gt;Vue.js devtools&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fyZiH_XA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620308971405/uq1JmFn3J.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fyZiH_XA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620308971405/uq1JmFn3J.jpeg" alt="17.vue.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chrome dev tools extension for debugging Vue.js applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-vue-telescope"&gt;
  &lt;/a&gt;
  13. &lt;a href="https://chrome.google.com/webstore/detail/vue-telescope/neaebjphlfplgdhedjdhcnpjkndddbpd?hl=en"&gt;Vue Telescope&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yhkvLa4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620309057055/-26RgznDg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhkvLa4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620309057055/-26RgznDg.jpeg" alt="18.vuejs.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Discover Vue.js Websites. Vue Telescope is a utility that uncovers the Vue.js plugins and technology stack used on websites. It detects the Vue version, plugins, frameworks, Nuxt modules and even the UI used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#programminggeneral"&gt;
  &lt;/a&gt;
  Programming-general
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#14-google-tag-assistant"&gt;
  &lt;/a&gt;
  14. &lt;a href="https://chrome.google.com/webstore/detail/tag-assistant-legacy-by-g/kejbdjndbnbjgmefkgdddjlbokphdefk?hl=en"&gt;Google Tag Assistant&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Tag Assistant helps to troubleshoot the installation of various Google tags including Google Analytics, Google Tag Manager and more.&lt;/p&gt;

&lt;p&gt;Tag Assistant helps you verify that you have installed various Google tags correctly on your page. Just navigate to any page and Tag Assistant will tell you which tags are present, report any errors we find and suggest improvements that can be made to your implementation. Most Google tags are checked including Google Analytics, Adwords Conversion Tracking, Google Tag Manager and more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-dailydev"&gt;
  &lt;/a&gt;
  15. &lt;a href="https://chrome.google.com/webstore/detail/dailydev-all-in-one-codin/jlmpjdjjbgclbocgajdjefcidcncaied"&gt;dailyDev&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u8cWXAY_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620237375501/ghcLJ3m-A.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u8cWXAY_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620237375501/ghcLJ3m-A.jpeg" alt="9.devTo.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why give it a try?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stay up-to-date with zero effort&lt;/li&gt;
&lt;li&gt;Free forever&lt;/li&gt;
&lt;li&gt;No sign up needed&lt;/li&gt;
&lt;li&gt;100% open-source&lt;/li&gt;
&lt;li&gt;Private. You own and control all your data.&lt;/li&gt;
&lt;li&gt;Active dev community &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#16-markdown-viewer"&gt;
  &lt;/a&gt;
  16. &lt;a href="https://chrome.google.com/webstore/detail/markdown-viewer/ckkdlimhmcjmikdlpkmbgfkaikojcbjk?hl=en"&gt;Markdown Viewer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jWkWxVBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620306826889/njhWIqBJb.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jWkWxVBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620306826889/njhWIqBJb.jpeg" alt="12.markdown.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FEATURES&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Renders local and remote URLs&lt;/li&gt;
&lt;li&gt;Granular access to remote origins&lt;/li&gt;
&lt;li&gt;Multiple markdown parsers&lt;/li&gt;
&lt;li&gt;Full control over the compiler options&lt;/li&gt;
&lt;li&gt;Themes (including GitHub theme)&lt;/li&gt;
&lt;li&gt;GitHub Flavored Markdown (GFM)&lt;/li&gt;
&lt;li&gt;Auto reload on file change&lt;/li&gt;
&lt;li&gt;Syntax highlighted code blocks&lt;/li&gt;
&lt;li&gt;Table of Contents (TOC)&lt;/li&gt;
&lt;li&gt;MathJax and Emoji support&lt;/li&gt;
&lt;li&gt;Mermaid diagrams support&lt;/li&gt;
&lt;li&gt;Remembers scroll position&lt;/li&gt;
&lt;li&gt;Markdown Content-Type detection&lt;/li&gt;
&lt;li&gt;URL detection using RegExp&lt;/li&gt;
&lt;li&gt;Toggle Content Security Policy (CSP)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lifegeneral"&gt;
  &lt;/a&gt;
  üíÉ Life-general
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#17-grammarly"&gt;
  &lt;/a&gt;
  17. &lt;a href="https://chrome.google.com/webstore/detail/grammarly-for-chrome/kbfnbcaeplbcioakkpcpgfkobkghlhen"&gt;Grammarly&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HBmGTSBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620237207586/Qyz7GIEJo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HBmGTSBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620237207586/Qyz7GIEJo.jpeg" alt="5.grammartly.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Grammarly helps you eliminate writing errors and find the perfect words to express yourself. You‚Äôll get real-time feedback from Grammarly on Gmail, Google Docs, Twitter, LinkedIn, and nearly everywhere else you find yourself writing. Grammarly is a writing assistant that offers you specific suggestions to help you improve your writing ‚Äî and it goes way beyond grammar. You can be confident that your writing is not only correct, but clear and concise, too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#18-adblock-plus"&gt;
  &lt;/a&gt;
  18. &lt;a href="https://chrome.google.com/webstore/detail/adblock-plus-free-ad-bloc/cfhdojbkjhnklbpkdaibdccddilifddb"&gt;Adblock Plus&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gZRFCdXV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620236942124/59iv-GDcN.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gZRFCdXV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620236942124/59iv-GDcN.jpeg" alt="7.blovk.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adblock Plus for Google Chrome blocks video ads, banners, pop-ups and other forms of intrusive and annoying advertising, as well as blocking tracking and malware.&lt;/p&gt;

&lt;p&gt;An easy-to-use, customizable ad-blocking browser extension, Adblock Plus gives you control over your Google Chrome browsing experience. Block annoying and intrusive ads for a cleaner, better web experience. Blocking ads also reduces the risk of infection from malvertising campaigns. Users also have the option to add personal filters and whitelist websites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#19-dark-reader"&gt;
  &lt;/a&gt;
  19. &lt;a href="https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh?hl=en"&gt;Dark Reader&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--08JT0G4Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620237115430/h9vqAduxL.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--08JT0G4Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620237115430/h9vqAduxL.jpeg" alt="8.darkreader.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dark mode for every website. Take care of your eyes, use a dark theme for night and daily browsing. This eye-care extension enables night mode creating dark themes for websites on the fly. Dark Reader inverts bright colors making them high contrast and easy to read at night. You can adjust brightness, contrast, sepia filter, dark mode, font settings and ignore-list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#20-malwarebytes-browser-guard"&gt;
  &lt;/a&gt;
  20. &lt;a href="https://chrome.google.com/webstore/detail/malwarebytes-browser-guar/ihcjicgdanjaechkgeegckofjjedodee"&gt;Malwarebytes Browser Guard&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oVuEXhGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620236604816/y1gk9iyt6n.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oVuEXhGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620236604816/y1gk9iyt6n.jpeg" alt="6.malware.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FEATURES&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Advertising/tracker protection: Blocks third-party ads and trackers that monitor your online activity. The number of blocked ads &amp;amp; blocked trackers for a website will show beside the Malwarebytes logo in your browser.&lt;/li&gt;
&lt;li&gt;Scam protection: Blocks online scams, including technical support scams, browser lockers, and phishing.&lt;/li&gt;
&lt;li&gt;Potentially unwanted program (PUP) protection: Blocks the downloading of potentially unwanted programs, including toolbars and pop-ups.&lt;/li&gt;
&lt;li&gt;Browser-level malware protection: Blocks malicious programs or code that can damage your system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#21-bitwarden-free-password-manager"&gt;
  &lt;/a&gt;
  21. &lt;a href="https://chrome.google.com/webstore/detail/bitwarden-free-password-m/nngceckbapebfimnlniiiahkandclblb?hl=en"&gt;Bitwarden - Free Password Manager&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0cQ7k4GM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620238094355/zXTNGoB4g.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0cQ7k4GM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620238094355/zXTNGoB4g.jpeg" alt="10.password.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bitwarden is the easiest and safest way to store all of your logins and passwords while conveniently keeping them synced between all of your devices.&lt;/p&gt;

&lt;p&gt;Password theft is a serious problem. The websites and apps that you use are under attack every day. Security breaches occur and your passwords are stolen. When you reuse the same passwords across apps and websites hackers can easily access your email, bank, and other important accounts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#22-authenticator"&gt;
  &lt;/a&gt;
  22. &lt;a href="https://chrome.google.com/webstore/detail/authenticator/bhghoamapcdpbohphigoooaddinpkbai?hl=en"&gt;Authenticator&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M6SZGAZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620247519125/I3rjIQkme.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M6SZGAZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620247519125/I3rjIQkme.jpeg" alt="11.authenticator.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FEATURES:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add accounts by scanning QR codes&lt;/li&gt;
&lt;li&gt;Search your accounts by pressing "/"&lt;/li&gt;
&lt;li&gt;Translated into more than ten languages&lt;/li&gt;
&lt;li&gt;Encrypt your secrets with a password&lt;/li&gt;
&lt;li&gt;Backup your secrets to a file, Google Drive, Microsoft OneDrive, or Dropbox&lt;/li&gt;
&lt;li&gt;Sync your secrets with your Google Account&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#23-loom"&gt;
  &lt;/a&gt;
  23. &lt;a href="https://chrome.google.com/webstore/detail/loom-for-chrome/liecbddmkiiihnedobmlmillhodjkdmb"&gt;Loom&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EYAtbL6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620307179339/8RWPlhmnv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EYAtbL6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620307179339/8RWPlhmnv.jpeg" alt="14.loom.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With Loom, you can record your screen, voice, and face to create an instantly shareable video in less time than it would take to type an email. Reduce back-and-forth typing and get your message across the first time. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#24-zenmate"&gt;
  &lt;/a&gt;
  24. &lt;a href="https://chrome.google.com/webstore/detail/zenmate-free-vpn%E2%80%93best-vpn/fdcgdnkidjaadafnichfpabhfomcebme/related?hl=en"&gt;ZenMate&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yk8aG6k8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620307926408/TDZBuo7VC.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yk8aG6k8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620307926408/TDZBuo7VC.jpeg" alt="16.zenmate.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ZenMate free VPN browser extension uses strong encryption to secure all your traffic and hides your real IP address so you can access any blocked website, protect your data and surf the internet anonymously without a data limit.   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#25-honey"&gt;
  &lt;/a&gt;
  25. &lt;a href="https://chrome.google.com/webstore/detail/honey/bmnlcjabgnpnenekpadlanbbkooimhnj?hl=en"&gt;Honey&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M3MTQQ1p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620309194195/brFkK5YhCz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M3MTQQ1p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620309194195/brFkK5YhCz.jpeg" alt="19.honey.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Automatically find and apply coupon codes when you shop online. Automatically apply coupons on 30,000+ sites. Join 17 million members who shop with confidence. Honey automatically searches for and apply coupons when you shop online. One-click and it tests different codes and applies the best one to your cart.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#26-screentime"&gt;
  &lt;/a&gt;
  26. &lt;a href="https://chrome.google.com/webstore/detail/screentime/ofmanejijbcohgebmdfacglmhemiifca?hl=en"&gt;Screentime&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CfOxejet--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620310715983/NzAf-Ri_C.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CfOxejet--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620310715983/NzAf-Ri_C.jpeg" alt="22.concentrate.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The extension allows you to control how much time you spend on popular social media sites and entertainment sites. You can specify how many minutes in a day you want to use on each site and once you've gotten to the limit, you won't be able to access the site. Time frames can be specified for when you want the sites to be inaccessible for each day of the week. You can also add or remove sites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#27-hare-beautiful-tab-manager"&gt;
  &lt;/a&gt;
  27. &lt;a href="https://chrome.google.com/webstore/detail/hare-%E2%80%93%C2%A0beautiful-tab-mana/elklpfhmdbclpenlnljkfknnijnjnmon?hl=en"&gt;Hare ‚Äì Beautiful tab manager&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D-r4o4ba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620311175282/AOO9a2fMA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D-r4o4ba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620311175282/AOO9a2fMA.jpeg" alt="25.hare.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A beautifully designed search engine for your tabs. When we have many tabs open and are confused about which window's tab is already open, we go ahead and create a new tab with the exact same content. This makes your browsing experience too cluttered and less productive.&lt;/p&gt;

&lt;p&gt;Hare makes it faster for you to jump on any tab, you have open, by doing a fuzzy search on factors like URL, title etc. When you are all done with your tabs, you can have a nice interface for them to close it at once based on your fuzzy search.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These are just a few of the great extensions you can find for chrome, most of these extensions are available for the other well-known browsers as well. Thank you to everyone on  &lt;a href="https://twitter.com/BatsouElef/status/1387686592731500545"&gt;Twitter&lt;/a&gt;  who wrote an answer. I learn quite a few new ones! Unfortunately, I didn't mention all the extensions from your answers as there were too many. But if you are interested let me know and I can do part 2. I haven't even included all the ones I'm using :) &lt;/p&gt;




&lt;p&gt;üëãHello, I'm Eleftheria, a developer, public speaker, and chocolate lover.&lt;/p&gt;

&lt;p&gt;ü•∞If you liked this post please share.&lt;/p&gt;

&lt;p&gt;üç©Would you care about buying me a coffee? You can do it &lt;a href="https://www.buymeacoffee.com/elef/"&gt;here&lt;/a&gt; but If you can't that's ok too!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.paypal.com/paypalme/eleftheriabatsou"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7QXiTcCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616336641314/ycZgZ44G3.gif" alt="cofGif.gif"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;üôèIt would be nice to subscribe to my &lt;a href="https://www.youtube.com/c/EleftheriaBatsou"&gt;Youtube&lt;/a&gt; channel. It‚Äôs free and it helps to create more content.&lt;/p&gt;

&lt;p&gt;üåà&lt;a href="https://www.youtube.com/c/EleftheriaBatsou"&gt;Youtube&lt;/a&gt; | &lt;a href="https://codepen.io/EleftheriaBatsou"&gt;Codepen&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/eleftheriabatsou"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://twitter.com/BatsouElef"&gt;Twitter&lt;/a&gt; | &lt;a href="http://eleftheriabatsou.com/"&gt;Site&lt;/a&gt; | &lt;a href="https://www.instagram.com/elef_in_tech"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

</description>
      <category>browserextensions</category>
      <category>extensions</category>
    </item>
    <item>
      <title>Boost your code coverage with API Tests</title>
      <author>Anudeep</author>
      <pubDate>Fri, 07 May 2021 17:40:26 +0000</pubDate>
      <link>https://dev.to/asaianudeep/boost-your-code-coverage-with-api-tests-13hd</link>
      <guid>https://dev.to/asaianudeep/boost-your-code-coverage-with-api-tests-13hd</guid>
      <description>&lt;p&gt;Code coverage is an important quality metric that determines the number of lines of source code that is tested &amp;amp; covered by automated tests. Usually, developers achieve code coverage close to &lt;strong&gt;80%&lt;/strong&gt; by writing &lt;strong&gt;unit tests&lt;/strong&gt; (&lt;em&gt;most popular tests to generate code coverage&lt;/em&gt;).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#targeted-code"&gt;
  &lt;/a&gt;
  Targeted Code
&lt;/h4&gt;

&lt;p&gt;In general unit tests targets happy paths, core business logic, and rarely sad paths. Most likely they can give us close to &lt;strong&gt;80%&lt;/strong&gt; of code coverage. The remaining &lt;strong&gt;20%&lt;/strong&gt; of source code might be responsible for handling external interfaces and exceptions/errors. Unit tests generally omit testing external interface logic that interacts with outside applications &amp;amp; databases.&lt;/p&gt;

&lt;p&gt;Testing the external interface logic at the early phases of SDLC is very critical for delivering a quality software product.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#api-testing"&gt;
  &lt;/a&gt;
  API Testing
&lt;/h4&gt;

&lt;p&gt;API testing is critical for automating testing because APIs now serve as the primary interface to application logic. API tests could greatly improve the code coverage of applications and the overall confidence in the product.&lt;/p&gt;

&lt;p&gt;Let's see how to get code coverage from API tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;In this example, we will be looking at a basic &lt;strong&gt;Node.js&lt;/strong&gt; web application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h3&gt;

&lt;p&gt;Look at the sample web app server written in &lt;a href="https://expressjs.com/"&gt;express&lt;/a&gt;. (&lt;em&gt;Express is a minimal and flexible Node.js web application framework&lt;/em&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`App listening at http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run the application, execute the below command in terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#api-tests"&gt;
  &lt;/a&gt;
  API Tests
&lt;/h3&gt;

&lt;p&gt;Look at the sample API tests written using &lt;a href="https://pactumjs.github.io/"&gt;PactumJS&lt;/a&gt; and &lt;a href="https://mochajs.org/"&gt;mocha&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.test.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pactum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pactum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET /hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pactum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3333/hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run the tests, execute the below command in terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mocha app.test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#code-coverage"&gt;
  &lt;/a&gt;
  Code Coverage
&lt;/h3&gt;

&lt;p&gt;We have seen how to run the application &amp;amp; execute tests against it. To generate code coverage from API tests, we will be using an npm package called &lt;a href="https://www.npmjs.com/package/nyc"&gt;nyc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Install the package globally&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i nyc &lt;span class="nt"&gt;-g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run your application with this magical tool &lt;strong&gt;nyc&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nyc node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hwi2IAUF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zqyqviizmp2kwom40yx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hwi2IAUF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zqyqviizmp2kwom40yx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run Tests&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mocha app.test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QG_hMJLT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xp63k4ab8qbqgl61l0rg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QG_hMJLT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xp63k4ab8qbqgl61l0rg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stop the application by pressing &lt;code&gt;CTRL + c&lt;/code&gt;. Now the &lt;strong&gt;nyc&lt;/strong&gt; tool will generate and display the code coverage in the terminal.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uqWXxqqD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2npwkizvxnqe0r3y8pj7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uqWXxqqD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2npwkizvxnqe0r3y8pj7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For real and complex web applications, the code-coverage setup might not be straightforward. It might require additional steps and advanced configurations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Importance of API testing is growing day by day. Not only using these tests for validating applications but also for generating code coverage metrics is an added advantage. &lt;/p&gt;

&lt;p&gt;In most scenarios, a simple API test could cover a big chunk of source code. It means with fewer API Tests we can get more code coverage and confidence in the application.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>javascript</category>
      <category>codequality</category>
      <category>pactumjs</category>
    </item>
    <item>
      <title>React/Redux Interview Questions with answers üöÄ</title>
      <author>Suprabha</author>
      <pubDate>Fri, 07 May 2021 17:22:07 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/react-redux-interview-questions-with-answers-13ba</link>
      <guid>https://dev.to/suprabhasupi/react-redux-interview-questions-with-answers-13ba</guid>
      <description>&lt;p&gt;&lt;span&gt;I&lt;/span&gt; prepared list of react and redux interview question, Few question I faced in my journey and few of the question I have referred from Google itself üòÇ&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#react-interview-questions"&gt;
  &lt;/a&gt;
  React Interview Questions üöÄ
&lt;/h1&gt;

&lt;p&gt;&lt;a href="#1-create-components-in-react"&gt;&lt;strong&gt;Q.1. How to create components in React?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#2-class-vs-functional-comp"&gt;&lt;strong&gt;Q.2. What are the difference between a class component and functional component?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#3-controlled-vs-uncontrolled-comp"&gt;&lt;strong&gt;Q.3. What is difference between controlled vs uncontrolled component?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#4-chidlren"&gt;&lt;strong&gt;Q.4. What is children?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#5-prop-drilling"&gt;&lt;strong&gt;Q.5. What is prop drilling and how can you avoid it?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#6-pure-component"&gt;&lt;strong&gt;Q.6. What is Pure Component?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#7-not-update-state-directly"&gt;&lt;strong&gt;Q.7. Why should we not update the state directly?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#8-cb-func-as-args-of-setstate"&gt;&lt;strong&gt;Q.8. What is the purpose of callback function as an argument of setState()?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#9-sythetic-event"&gt;&lt;strong&gt;Q.9. What are synthetic events in React?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#10-key-prop"&gt;&lt;strong&gt;Q.10. What is "key" prop and what is the benefit of using it in arrays elements?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#11-string-refs-legacy"&gt;&lt;strong&gt;Q.11. Why are String Refs legacy?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#12-createelement-vs-cloneelement"&gt;&lt;strong&gt;Q.12. What is the difference between createElement and cloneElement?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#13-reconciliation"&gt;&lt;strong&gt;Q.13. What is reconciliation?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#14-lazy-function"&gt;&lt;strong&gt;Q.14. Is lazy function supports named exports?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#15-portals"&gt;&lt;strong&gt;Q.15. What are portals in React?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#16-stateless-comp"&gt;&lt;strong&gt;Q.16. What are stateless components?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#17-stateful-comp"&gt;&lt;strong&gt;Q.17. What are stateful components?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#18-impact-of-index-as-keys"&gt;&lt;strong&gt;Q.18. What is the impact of indexes as keys?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#19-memoize-component"&gt;&lt;strong&gt;Q.19. How do you memoize a component?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#20-pass-func-to-setstate"&gt;&lt;strong&gt;Q.20. Why we need to pass a function to setState()?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#21-comp-name-starts-capital-letter"&gt;&lt;strong&gt;Q.21. Why should component names start with capital letter?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#22-rerender-without-calling-setstate"&gt;&lt;strong&gt;Q.22. Can you force a component to re-render without calling setState?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#23-super-vs-super-props"&gt;&lt;strong&gt;Q.23. What is the difference between super() and super(props) in React usin ES6 classes?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#24-constructor"&gt;&lt;strong&gt;Q.24. Is it mandatory to define constructor for React component?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#25-default-props"&gt;&lt;strong&gt;Q.25. What are default props?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#26-validation-on-props"&gt;&lt;strong&gt;Q.26. How to apply validation on props in React?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#27-cant-updated-props"&gt;&lt;strong&gt;Q.27. Why you can't update props in React?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#28-render-props"&gt;&lt;strong&gt;Q.28. What are render props?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#29-suspense"&gt;&lt;strong&gt;Q.29. What is Suspense component?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#30-diffing"&gt;&lt;strong&gt;Q.30. What is diffing algorithm?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#31-rerender-browser-resized"&gt;&lt;strong&gt;Q.31. How to re-render the view when the browser is resized?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#32-react-memo"&gt;&lt;strong&gt;Q.32. What is React memo function?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#33-methods-order-when-comp-rerendered"&gt;&lt;strong&gt;Q.33. What is the methods order when component re-rendered?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#34-loadable-comp"&gt;&lt;strong&gt;Q.34. What are loadable components?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#35-print-json"&gt;&lt;strong&gt;Q.35. How to pretty print JSON with React?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#36-render-hijakcing"&gt;&lt;strong&gt;Q.36. What is render hijacking in react?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#37-use-https-instead-http"&gt;&lt;strong&gt;Q.37. How to use https instead of http in create-react-app?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#38-functional-to-pure-component"&gt;&lt;strong&gt;Q.38. How can we convert functional component to pure component?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="1-create-components-in-react"&gt;Q.1. How to create components in React?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt;  There are two possible ways to create a component.&lt;/p&gt;

&lt;p&gt;‚úÖFunctional Components:¬†This is the simplest way to create a component. Those are pure JavaScript functions that accept props object as first parameter and return React elements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Greeting&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`Hello, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚úÖClass Components:¬†You can also use ES6 class to define a component. The above function component can be written as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Greeting&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`Hello, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="2-class-vs-functional-comp"&gt;Q.2. What are the difference between a class component and functional component?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;‚úÖClass Components&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Class-based Components uses ES6 class syntax. It can make use of the lifecycle methods.&lt;/li&gt;
&lt;li&gt;Class components extend from React.Component.&lt;/li&gt;
&lt;li&gt;In here you have to use this keyword to access the props and functions that you declare inside the class components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‚úÖFunctional Components&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Functional Components are simpler comparing to class-based functions.&lt;/li&gt;
&lt;li&gt;Functional Components mainly focuses on the UI of the application, not on the behavior.&lt;/li&gt;
&lt;li&gt;To be more precise these are basically render function in the class component.&lt;/li&gt;
&lt;li&gt;Functional Components can have state and mimic lifecycle events using Reach Hooks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="3-controlled-vs-uncontrolled-comp"&gt;Q.3. What is difference between controlled vs uncontrolled component?&lt;/p&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Ans.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;‚úÖControlled Components&lt;br&gt;
In HTML, form elements such as &lt;code&gt;&amp;lt;input /&amp;gt;, &amp;lt;textarea /&amp;gt;, and &amp;lt;select /&amp;gt;&lt;/code&gt; typically maintain their own state and update it based on user input. When a user submits a form, the values from the elements mentioned above are sent with the form. With React it works differently. The component containing the form will keep track of the value of the input in its state and will re-render the component each time the callback function, e.g., onChange is fired as the state will be updated. An input form element whose value is controlled by React in this way is called a "controlled component". You could also call this a "dumb component".&lt;/p&gt;

&lt;p&gt;‚úÖUncontrolled Components&lt;br&gt;
A¬†Uncontrolled Component¬†is one that stores its own state internally, and you query the DOM using a¬†ref¬†to find its current value when you need it. This is a bit more like traditional HTML.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Example&lt;/u&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Controlled:&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Uncontrolled:&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;inputRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// Use `inputRef.current.value` to read the current value of &amp;lt;input&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="4-chidlren"&gt;Q.4. What is children?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; In JSX expressions that contain both an opening tag and a closing tag, the content between those tags is passed to components automatically as a special prop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are some methods available in the React API to work with this prop. These include React.Children.map, React.Children.forEach, React.Children.count, React.Children.only, React.Children.toArray üë∂&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MainContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createClass&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MainContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;MainContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="5-prop-drilling"&gt;Q.5. What is prop drilling and how can you avoid it?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; While passing a prop from each component to the next in the hierarchy from the source component to the deeply nested component. This is called¬†&lt;strong&gt;prop drilling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To avoid prop drilling, a common approach is to use React context. This allows a¬†&lt;code&gt;Provider&lt;/code&gt;¬†component that supplies data to be defined, and allows nested components to consume context data via either a¬†&lt;code&gt;Consumer&lt;/code&gt;¬†component or a¬†&lt;code&gt;useContext&lt;/code&gt;¬†hook.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="6-pure-component"&gt;Q.6. What is Pure Component?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; &lt;code&gt;React.PureComponent&lt;/code&gt; is exactly the same as &lt;code&gt;React.Component&lt;/code&gt; except that it handles the &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; method for you. When props or state changes, PureComponent will do a shallow comparison on both props and state. Component on the other hand won't compare current props and state to next out of the box. Thus, the component will re-render by default whenever shouldComponentUpdate is called.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="7-not-update-state-directly"&gt;Q.7. Why should we not update the state directly?&lt;/p&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Ans.&lt;/strong&gt; If you try to update state directly then it won't re-render the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Wrong ‚ùå&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Not Updated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead use¬†&lt;code&gt;setState()&lt;/code&gt;¬†method. It schedules an update to a component's state object. When state changes, the component responds by re-rendering.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Correct ‚úÖ&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Updated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üìù Note:¬†You can directly assign to the state object either in¬†&lt;em&gt;constructor&lt;/em&gt;¬†or using latest javascript's class field declaration syntax.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="8-cb-func-as-args-of-setstate"&gt;Q.8. What is the purpose of callback function as an argument of setState()&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; The callback function is invoked when setState finished and the component gets rendered. Since¬†&lt;code&gt;setState()&lt;/code&gt;¬†is¬†&lt;strong&gt;asynchronous&lt;/strong&gt;¬†the callback function is used for any post action.&lt;/p&gt;

&lt;p&gt;üìù Note:¬†It is recommended to use lifecycle method rather than this callback function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Supi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The name has updated and component re-rendered&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="9-sythetic-event"&gt;Q.9. What are synthetic events in React?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; Synthetic Event is a cross-browser wrapper around the browser's native event. It's API is same as the browser's native event, including &lt;code&gt;stopPropagation()&lt;/code&gt; and &lt;code&gt;preventDefault()&lt;/code&gt;, except the events work identically across all browsers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="10-key-prop"&gt;Q.10. What is "key" prop and what is the benefit of using it in arrays of elements üóù?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; A¬†&lt;code&gt;key&lt;/code&gt;¬†is a special string attribute you¬†&lt;strong&gt;should&lt;/strong&gt;¬†include when creating arrays of elements.&lt;em&gt;Key&lt;/em&gt;¬†prop helps React identify which items have changed, are added, or are removed.&lt;/p&gt;

&lt;p&gt;Most often we use ID from our data as¬†&lt;em&gt;key&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todoItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you don't have stable IDs for rendered items, you may use the item¬†&lt;em&gt;index&lt;/em&gt;¬†as a¬†&lt;em&gt;key&lt;/em&gt;¬†as a last resort:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todoItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üìù Note:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using¬†&lt;em&gt;indexes&lt;/em&gt;¬†for¬†&lt;em&gt;keys&lt;/em&gt;¬†is¬†&lt;strong&gt;not recommended&lt;/strong&gt;¬†if the order of items may change. This can negatively impact performance and may cause issues with component state.&lt;/li&gt;
&lt;li&gt;If you extract list item as separate component then apply¬†&lt;em&gt;keys&lt;/em&gt;¬†on list component instead of¬†&lt;code&gt;li&lt;/code&gt;¬†tag.&lt;/li&gt;
&lt;li&gt;There will be a warning message in the console if the¬†&lt;code&gt;key&lt;/code&gt;¬†prop is not present on list items.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="11-string-refs-legacy"&gt;Q.11. Why are String Refs legacy? &lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; If you worked with React before, you might be familiar with an older API where the¬†&lt;code&gt;ref&lt;/code&gt;¬†attribute is a string, like¬†&lt;code&gt;ref={'textInput'}&lt;/code&gt;, and the DOM node is accessed as¬†&lt;code&gt;this.refs.textInput&lt;/code&gt;. We advise against it because¬†&lt;em&gt;string refs have below issues&lt;/em&gt;, and are considered legacy. String refs were¬†&lt;strong&gt;removed in React v16&lt;/strong&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They¬†&lt;em&gt;force React to keep track of currently executing component&lt;/em&gt;. This is problematic because it makes react module stateful, and thus causes weird errors when react module is duplicated in the bundle.&lt;/li&gt;
&lt;li&gt;They are¬†&lt;em&gt;not composable&lt;/em&gt;¬†‚Äî if a library puts a ref on the passed child, the user can't put another ref on it. Callback refs are perfectly composable.&lt;/li&gt;
&lt;li&gt;They¬†&lt;em&gt;don't work with static analysis&lt;/em&gt;¬†like Flow. Flow can't guess the magic that framework does to make the string ref appear on¬†&lt;code&gt;this.refs&lt;/code&gt;, as well as its type (which could be different). Callback refs are friendlier to static analysis.&lt;/li&gt;
&lt;li&gt;It doesn't work as most people would expect with the "render callback" pattern (e.g. )
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;renderRow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// This won't work. Ref will get attached to DataTable rather than MyComponent:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// This would work though! Callback refs are awesome.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DataTable&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;renderRow&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderRow&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="12-createelement-vs-cloneelement"&gt;Q.12. What is the difference between createElement and cloneElement?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; JSX elements will be transpiled to React.createElement() functions to create React elements which are going to be used for the object representation of UI. Whereas cloneElement is used to clone an element and pass it new props.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="13-reconciliation"&gt;Q.13. What is reconciliation?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; When a component's props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM. This process is called reconciliation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="14-lazy-function"&gt;Q.14. Is lazy function supports named exports?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; No, currently¬†&lt;code&gt;React.lazy&lt;/code&gt;¬†function supports &lt;code&gt;default exports&lt;/code&gt; only. If you would like to import modules which are named exports, you can create an intermediate module that reexports it as the default. It also ensures that tree shaking keeps working and don‚Äôt pull unused components. Let's take a component file which exports multiple named components,&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Example:&lt;/u&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// FewComponents.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UnusedComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and reexport¬†&lt;code&gt;FewComponents.js&lt;/code&gt;¬†components in an intermediate file¬†&lt;code&gt;IntermediateComponent.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// IntermediateComponent.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./FewComponents.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can import the module using lazy function as below,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;lazy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./IntermediateComponent.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="15-portals"&gt;Q.15. What are portals in React?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; Portal¬†is a recommended way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createPortal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first argument is any render-able React child, such as an element, string, or fragment. The second argument is a DOM element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="16-stateless-comp"&gt;Q.16. What are stateless components?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; If the behaviour is independent of its state then it can be a stateless component. You can use either a function or a class for creating stateless components. But unless you need to use a lifecycle hook in your components, you should go for function components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="17-stateful-comp"&gt;Q.17. What are stateful components?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; If the behaviour of a component is dependent on the¬†&lt;em&gt;state&lt;/em&gt;¬†of the component then it can be termed as stateful component. These¬†&lt;em&gt;stateful components&lt;/em&gt;¬†are always¬†&lt;em&gt;class components&lt;/em&gt;¬†and have a state that gets initialized in the¬†&lt;code&gt;constructor&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// ...&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;React 16.8 Update:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hooks let you use state and other React features without writing classes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Equivalent Functional Component&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="c1"&gt;// JSX&lt;/span&gt;
   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="18-impact-of-index-as-keys"&gt;Q.18. What is the impact of indexes as keys?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; Keys should be stable, predictable, and unique so that React can keep track of elements.&lt;/p&gt;

&lt;p&gt;In the below code snippet each element's key will be based on ordering, rather than tied to the data that is being represented. This limits the optimizations that React can do.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Todo&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you use element data for unique key, assuming todo.id is unique to this list and stable, React would be able to reorder elements without needing to reevaluate them as much.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Todo&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="19-memoize-component"&gt;Q.19. How do you memoize a component?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; Since React v16.6.0, we have a¬†&lt;code&gt;React.memo&lt;/code&gt;. It provides a higher order component which memoizes component unless the props change. To use it, simply wrap the component using &lt;code&gt;React.memo&lt;/code&gt; before you use it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MemoComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MemoComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* render using props */&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// OR&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MyFunctionComponent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="20-pass-func-to-setstate"&gt;Q.20. Why we need to pass a function to setState()?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; The reason behind for this is that¬†&lt;code&gt;setState()&lt;/code&gt;¬†is an asynchronous operation. React batches state changes for performance reasons, so the state may not change immediately after¬†&lt;code&gt;setState()&lt;/code&gt;¬†is called. That means you should not rely on the current state when calling¬†&lt;code&gt;setState()&lt;/code&gt;‚Ääsince you can't be sure what that state will be. The solution is to pass a function to¬†&lt;code&gt;setState()&lt;/code&gt;, with the previous state as an argument. By doing this you can avoid issues with the user getting the old state value on access due to the asynchronous nature of¬†&lt;code&gt;setState()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's say the initial count value is zero. After three consecutive increment operations, the value is going to be incremented only by one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// assuming this.state.count === 0&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// this.state.count === 1, not 3&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we pass a function to¬†&lt;code&gt;setState()&lt;/code&gt;, the count gets incremented correctly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="c1"&gt;// this.state.count === 3 as expected&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="21-comp-name-starts-capital-letter"&gt;Q.21. Why should component names start with capital letter?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; If you are rendering your component using JSX, the name of that component has to begin with a capital letter otherwise React will throw an error as unrecognized tag. This convention is because only HTML elements and SVG tags can begin with a lowercase letter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;OneComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can define component class which name starts with lowercase letter, but when it's imported it should have capital letter. Here lowercase is fine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;myComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;myComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While when imported in another file it should start with capital letter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./MyComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-are-the-exceptions-on-react-component-naming"&gt;
  &lt;/a&gt;
  What are the exceptions on React component naming?
&lt;/h3&gt;

&lt;p&gt;The component names should start with a uppercase letter but there are few exceptions on this convention. The lowercase tag names with a dot (property accessors) are still considered as valid component names.&lt;/p&gt;

&lt;p&gt;For example the below tag can be compiled to a valid component,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;component&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// `React.createElement(obj.component)`&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="22-rerender-without-calling-setstate"&gt;Q.22. Can you force a component to re-render without calling setState?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; By default, when your component's state or props change, your component will re-render. If your¬†&lt;code&gt;render()&lt;/code&gt;¬†method depends on some other data, you can tell React that the component needs re-rendering by calling¬†&lt;code&gt;forceUpdate()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forceUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is recommended to avoid all uses of¬†&lt;code&gt;forceUpdate()&lt;/code&gt;¬†and only read from¬†&lt;code&gt;this.props&lt;/code&gt;¬†and¬†&lt;code&gt;this.state&lt;/code&gt;¬†in¬†&lt;code&gt;render()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="23-super-vs-super-props"&gt;Q.23. What is the difference between super() and super(props) in React usin ES6 classes?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; When you want to access¬†&lt;code&gt;this.props&lt;/code&gt;¬†in¬†&lt;code&gt;constructor()&lt;/code&gt;¬†then you should pass props to¬†&lt;code&gt;super()&lt;/code&gt;¬†method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using¬†&lt;code&gt;super(props)&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// { name: 'Supi', ... }&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Using¬†&lt;code&gt;super()&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Outside¬†&lt;code&gt;constructor()&lt;/code&gt;¬†both will display same value for¬†&lt;code&gt;this.props&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="24-constructor"&gt;Q.24. Is it mandatory to define constructor for React component?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; No, it is not mandatory. i.e, If you don‚Äôt initialize state and you don‚Äôt bind methods, you don‚Äôt need to implement a constructor for your React component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="25-default-props"&gt;Q.25. What are default props?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; The defaultProps are defined as a property on the component class to set the default props for the class. This is used for undefined props, but not for null props.&lt;/p&gt;

&lt;p&gt;For example, let us create color default prop for the button component,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyButton&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;MyButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If props.color is not provided then it will set the default value to 'red'. i.e, Whenever you try to access the color prop it uses default value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyButton&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// props.color will be set to red&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üìù Note:¬†If you provide null value then it remains null value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="26-validation-on-props"&gt;Q.26. How to apply validation on props in React?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; When the application is running in¬†&lt;em&gt;development mode&lt;/em&gt;, React will automatically check all props that we set on components to make sure they have¬†&lt;em&gt;correct type&lt;/em&gt;. If the type is incorrect, React will generate warning messages in the console. It's disabled in¬†&lt;em&gt;production mode&lt;/em&gt;¬†due to performance impact. The mandatory props are defined with¬†&lt;code&gt;isRequired&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The set of predefined prop types:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;PropTypes.number&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PropTypes.string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PropTypes.array&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PropTypes.object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PropTypes.func&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PropTypes.node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PropTypes.element&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PropTypes.bool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PropTypes.symbol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PropTypes.any&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can define¬†&lt;code&gt;propTypes&lt;/code&gt;¬†for¬†&lt;code&gt;User&lt;/code&gt;¬†component as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prop-types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;propTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isRequired&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isRequired&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`Welcome, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`Age, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üìù Note:¬†In React v15.5¬†&lt;em&gt;PropTypes&lt;/em&gt;¬†were moved from¬†&lt;code&gt;React.PropTypes&lt;/code&gt;¬†to¬†&lt;code&gt;prop-types&lt;/code&gt;¬†library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="27-cant-updated-props"&gt;Q.27. Why you can't update props in React?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; The React philosophy is that props should be immutable and top-down. This means that a parent can send any prop values to a child, but the child can't modify received props.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="28-render-props"&gt;Q.28. What are render props?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; Render Props¬†is a simple technique for sharing code between components using a prop whose value is a function. The below component uses render prop which returns a React element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DataProvider&lt;/span&gt; &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Libraries such as React Router and DownShift are using this pattern.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="29-suspense"&gt;Q.29. What is Suspense component?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; If the module containing the dynamic import is not yet loaded by the time parent component renders, you must show some fallback content while you‚Äôre waiting for it to load using a loading indicator. This can be done using¬†Suspense¬†component.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Example&lt;/u&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;OneComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./OneComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;OneComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As mentioned in the above code, Suspense is wrapped above the lazy component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="30-diffing"&gt;Q.30. What is diffing algorithm?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; React needs to use algorithms to find out how to efficiently update the UI to match the most recent tree. The diffing algorithms is generating the minimum number of operations to transform one tree into another. However, the algorithms have a complexity in the order of O(n3) where n is the number of elements in the tree.&lt;/p&gt;

&lt;p&gt;In this case, for displaying 1000 elements would require in the order of one billion comparisons. This is far too expensive. Instead, React implements a heuristic O(n) algorithm based on two assumptions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Two elements of different types will produce different trees.&lt;/li&gt;
&lt;li&gt;The developer can hint at which child elements may be stable across different renders with a key prop.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="31-rerender-browser-resized"&gt;Q.31. How to re-render the view when the browser is resized?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; You can listen to the¬†&lt;code&gt;resize&lt;/code&gt;¬†event in¬†&lt;code&gt;componentDidMount()&lt;/code&gt;¬†and then update the dimensions (&lt;code&gt;width&lt;/code&gt;¬†and¬†&lt;code&gt;height&lt;/code&gt;). You should remove the listener in¬†&lt;code&gt;componentWillUnmount()&lt;/code&gt;¬†method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;WindowDimensions&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateDimensions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateDimensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;componentWillMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateDimensions&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateDimensions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;componentWillUnmount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateDimensions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;updateDimensions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; x &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="32-react-memo"&gt;Q.32. What is React memo function?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; Class components can be restricted from rendering when their input props are the same using¬†&lt;strong&gt;PureComponent or shouldComponentUpdate&lt;/strong&gt;. Now you can do the same with function components by wrapping them in¬†&lt;strong&gt;React.memo&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* only rerenders if props change */&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="33-methods-order-when-comp-rerendered"&gt;Q.33. What is the methods order when component re-rendered?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; An update can be caused by changes to props or state. The below methods are called in the following order when a component is being re-rendered.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;static getDerivedStateFromProps()&lt;/li&gt;
&lt;li&gt;shouldComponentUpdate()&lt;/li&gt;
&lt;li&gt;render()&lt;/li&gt;
&lt;li&gt;getSnapshotBeforeUpdate()&lt;/li&gt;
&lt;li&gt;componentDidUpdate()&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="34-loadable-comp"&gt;Q.34. What are loadable components?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; If you want to do code-splitting in a server rendered app, it is recommend to use Loadable Components because &lt;code&gt;React.lazy&lt;/code&gt; and &lt;code&gt;Suspense&lt;/code&gt; is not yet available for server-side rendering. &lt;code&gt;Loadable&lt;/code&gt; lets you render a dynamic import as a regular component.&lt;/p&gt;

&lt;p&gt;Lets take an example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;loadable&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@loadable/component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;OtherComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;loadable&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./OtherComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;OtherComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now OtherComponent will be loaded in a separated bundle&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="35-print-json"&gt;Q.35. How to pretty print JSON with React?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; We can use¬†&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;¬†tag so that the formatting of the¬†&lt;code&gt;JSON.stringify()&lt;/code&gt;¬†is retained:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="36-render-hijakcing"&gt;Q.36. What is render hijacking in react?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; The concept of &lt;code&gt;render hijacking&lt;/code&gt; is the ability to control what a component will output from another component. It actually means that you decorate your component by wrapping it into a Higher-Order component. By wrapping you can inject additional props or make other changes, which can cause changing logic of rendering. It does not actually enables hijacking, but by using HOC you make your component behave in different way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="37-use-https-instead-http"&gt;Q.37. How to use https instead of http in create-react-app?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; You just need to use¬†&lt;code&gt;HTTPS=true&lt;/code&gt;¬†configuration. You can edit your¬†&lt;code&gt;package.json&lt;/code&gt;¬†scripts section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"set HTTPS=true &amp;amp;&amp;amp; react-scripts start"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or just run¬†&lt;code&gt;set HTTPS=true &amp;amp;&amp;amp; npm start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="38-functional-to-pure-component"&gt;Q.38. How can we convert functional component to pure component?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; We can convert functional to pure component using &lt;code&gt;React.memo&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#redux-interview-questions"&gt;
  &lt;/a&gt;
  Redux Interview Questions üë©üèª‚Äçüíª
&lt;/h1&gt;

&lt;p&gt;&lt;a href="#1-reducers"&gt;&lt;strong&gt;Q.1. What are reducers in redux?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#2-state-changed-in-redux"&gt;&lt;strong&gt;Q.2. How is state changed in redux?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#3-initialvalues-updated-from-satte"&gt;&lt;strong&gt;Q.3. How Redux Form initialValues get updated from state?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#4-redux-thunk"&gt;&lt;strong&gt;Q.4. What is Redux Thunk?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#5-mapstatetoprops-vs-mapdispatchtoprops"&gt;&lt;strong&gt;Q.5. What is the difference between mapStateToProps() and mapDispatchToProps()?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#6-mutiple-middleware"&gt;&lt;strong&gt;Q.6. How to add multiple middlewares to Redux?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#7-react-context-vs-redux"&gt;&lt;strong&gt;Q.7. What is React context vs React redux?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#8-redux-thunk"&gt;&lt;strong&gt;Q.8. Why React uses className over class attribute?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#9-relay"&gt;&lt;strong&gt;Q.9. What is Relay?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#10-relay-different-from-redux"&gt;&lt;strong&gt;Q.10. How Relay is different from Redux?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="#11-combine-reducer"&gt;&lt;strong&gt;Q.11. What is Combine Reducer?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="1-reducers"&gt;Q.1. What are reducers in redux?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; The reducer is a pure function that takes the previous state and an action, and returns the next state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;previousState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's very important that the reducer stays¬†&lt;em&gt;pure&lt;/em&gt;. Things you should never do inside a reducer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mutate its arguments;&lt;/li&gt;
&lt;li&gt;Perform side effects like API calls and routing transitions;&lt;/li&gt;
&lt;li&gt;Call non-pure functions, e.g. Date.now() or Math.random()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="2-state-changed-in-redux"&gt;Q.2. How is state changed in redux?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; The only way to change the state is to emit an action, an object describing what happened. This ensures that neither the views nor the network callbacks will ever write directly to the state. Instead, they express an intent to transform the state. Because all changes are centralized and happen one by one in a strict order, there are no subtle race conditions to watch out for. As actions are just plain objects, they can be logged, serialized, stored, and later replayed for debugging or testing purposes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="3-initialvalues-updated-from-satte"&gt;Q.3. How Redux Form initialValues get updated from state?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; You need to add¬†&lt;code&gt;enableReinitialize : true&lt;/code&gt;¬†setting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;InitializeFromStateForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reduxForm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;form&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;initializeFromState&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;enableReinitialize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="nx"&gt;UserEdit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If your¬†&lt;code&gt;initialValues&lt;/code&gt;¬†prop gets updated, your form will update too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="4-redux-thunk"&gt;Q.4. What is Redux Thunk?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; Redux Thunk middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods dispatch and &lt;code&gt;getState()&lt;/code&gt; as parameters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="5-mapstatetoprops-vs-mapdispatchtoprops"&gt;Q.5. What is the difference between mapStateToProps() and mapDispatchToProps()?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;mapStateToProps()&lt;/code&gt;¬†is a utility which helps your component get updated state (which is updated by some other components):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapStateToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getVisibleTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visibilityFilter&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;mapDispatchToProps()&lt;/code&gt;¬†is a utility which will help your component to fire an action event (dispatching action which may cause change of application state):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;onTodoClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toggleTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Recommend always using the "object shorthand" form for the¬†&lt;code&gt;mapDispatchToProps&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Redux wrap it in another function that looks like &lt;code&gt;(‚Ä¶args) =&amp;gt; dispatch(onTodoClick(‚Ä¶args))&lt;/code&gt;, and pass that wrapper function as a prop to your component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;onTodoClick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="6-mutiple-middleware"&gt;Q.6. How to add multiple middlewares to Redux?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; You can use¬†&lt;code&gt;applyMiddleware&lt;/code&gt;¬†where you can pass each piece of middleware as a new argument. So you just need to pass each piece of middleware you'd like. For example, you can add Redux Thunk and logger middlewares as an argument as below,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;applyMiddleware&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createStoreWithMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;applyMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ReduxThunk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="7-react-context-vs-redux"&gt;Q.7. What is React context vs React redux?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; You can use¬†Context¬†in your application directly and is going to be great for passing down data to deeply nested components which what it was designed for. Whereas¬†Redux¬†is much more powerful and provides a large number of features that the Context Api doesn't provide.&lt;/p&gt;

&lt;p&gt;Also, &lt;strong&gt;React Redux&lt;/strong&gt; uses context internally but it doesn‚Äôt expose this fact in the public API. So you should feel much safer using Context via React Redux than directly because if it changes, the burden of updating the code will be on React Redux instead developer responsibility.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="8-redux-thunk"&gt;Q.8. Why React uses className over class attribute?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; &lt;em&gt;class&lt;/em&gt;¬†is a keyword in javascript and JSX is an extension of javascript. That's the principal reason why React uses¬†&lt;code&gt;className&lt;/code&gt;¬†instead of class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"menu navigation-menu"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Menu&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;p id="9-relay"&gt;Q.9. What is Relay?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; Relay is a JavaScript framework for providing a data layer and client-server communication to web applications using the React view layer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="10-relay-different-from-redux"&gt;Q.10. How Relay is different from Redux?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; Relay is similar to Redux in that they both use a single store. The main difference is that relay only manages state originated from the server, and all access to the state is used via GraphQL queries (for reading data) and mutations (for changing data). Relay caches the data for you and optimizes data fetching for you, by fetching only changed data and nothing more. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;p id="11-combine-reducer"&gt;Q.11. What is Combine Reducer?&lt;/p&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ans.&lt;/strong&gt; The &lt;code&gt;combineReducers&lt;/code&gt; helper function turns an object whose values are different reducing functions into a single reducing function you can pass to createStore . The resulting reducer calls every child reducer, and gathers their results into a single state object.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        üåü &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        üë©üèª‚Äçüíª &lt;a href="https://www.suprabha.me/"&gt; suprabha.me&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        üåü &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Build APIs without code </title>
      <author>Vasanth</author>
      <pubDate>Fri, 07 May 2021 16:55:29 +0000</pubDate>
      <link>https://dev.to/vasanth7781/build-apis-without-code-4g2j</link>
      <guid>https://dev.to/vasanth7781/build-apis-without-code-4g2j</guid>
      <description>&lt;p&gt;I have been involving in building no code API builder platform &lt;a href="https://fireapis.com/"&gt;Fireapis&lt;/a&gt; where now APIs can be built within minutes and can be consumed easily.No need to worry about deployment, scalability, availability, etc..,&lt;br&gt;
Another thing is we can create different APIs resources for different environments (stage, prod, dev, or any, etc..,)&lt;/p&gt;

&lt;p&gt;Now, I'll show you how to make an example (we say Plan) API without any code and consume our Plan API &lt;/p&gt;

&lt;p&gt;First, enter into &lt;a href="https://fireapis.com/"&gt;https://fireapis.com/&lt;/a&gt; and signup, its free account&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First step:&lt;/strong&gt;&lt;br&gt;
You will be landed on the Dashboard page after signup or login, go to the &lt;strong&gt;Environments tab&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first thing is we have to create an environment&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDh7ZYjJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8n467waowvz3qgchdgnj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDh7ZYjJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8n467waowvz3qgchdgnj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rlOoXoqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d2tqvbm8m2z0x36bl68.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rlOoXoqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d2tqvbm8m2z0x36bl68.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter our environment &lt;strong&gt;name, domain URL,&lt;/strong&gt; and a short &lt;strong&gt;description&lt;/strong&gt; about the environment, then &lt;strong&gt;click Add&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we have &lt;strong&gt;created our environment.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second step:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next thing, we have to go to the &lt;strong&gt;API tab&lt;/strong&gt; section, &lt;strong&gt;Click Add new API&lt;/strong&gt; button&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zlbxak8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16xlt82rscopkgv1dq4s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zlbxak8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16xlt82rscopkgv1dq4s.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the &lt;strong&gt;name and URL&lt;/strong&gt; of our endpoint and &lt;strong&gt;select the environment&lt;/strong&gt; for which API has to be built&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B4CjEbKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpkkqp5b6cc4gzs98283.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B4CjEbKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpkkqp5b6cc4gzs98283.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we are going to &lt;strong&gt;add fields&lt;/strong&gt; for our API. Here for eg, I have added name as string type, amount as a numeric type,is_active as boolean, description as a string that can accept null and blank values. For primary key leaving a blank as it will auto add field id as primary key, if not added custom primary key&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nlnTCdiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nsracbhp0g34gm87tjm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nlnTCdiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nsracbhp0g34gm87tjm.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7CE_9yc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1ioojapm6ud0ve23lbm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7CE_9yc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1ioojapm6ud0ve23lbm.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After &lt;strong&gt;adding all fields, click Add.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now successfully we have &lt;strong&gt;created Plan API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third Step:&lt;/strong&gt;&lt;br&gt;
Now we are &lt;strong&gt;going to test our Plan API&lt;/strong&gt; endpoint by using the&lt;br&gt;
autogenerated curl command&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D45R1B-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79b54bbqr63paneeo3e1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D45R1B-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79b54bbqr63paneeo3e1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Going to test different request by using the &lt;strong&gt;auto-generated curl command&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yedsi2XY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwp183zcxw3oe1c0zpi3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yedsi2XY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwp183zcxw3oe1c0zpi3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have got success response after making a POST request for Plan API&lt;/p&gt;

&lt;p&gt;Now &lt;strong&gt;we going to make GET request for the primary key using curl command&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r22___9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgs8yz2m2cc84baf9cp0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r22___9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgs8yz2m2cc84baf9cp0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w2RLkV7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzk14g5qr3yv9daksknk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2RLkV7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzk14g5qr3yv9daksknk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have got a response for GET request using the primary key&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finally&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can &lt;strong&gt;check our logs&lt;/strong&gt;, now we enter into the &lt;strong&gt;Logs tab&lt;/strong&gt; section&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nSMVMxwY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceckjplex0pris37zndb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nSMVMxwY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceckjplex0pris37zndb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EcHAaxq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ckxlnbdobn9s9tetvbz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EcHAaxq0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ckxlnbdobn9s9tetvbz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IcJGZXZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5usabj7spdr9y93zontc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IcJGZXZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5usabj7spdr9y93zontc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We can see a detailed log report for different requests&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Now we have created an API that can do CRUD operation in few minutes&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#fireapis"&gt;
  &lt;/a&gt;
  Fireapis?
&lt;/h1&gt;

&lt;p&gt;Solving the development time and difficulties in coding, scaling, and storage of data using API within few minutes.&lt;/p&gt;

&lt;p&gt;Fireapis also provides Logs for all the request coming in and out for your different set of environments &lt;/p&gt;

&lt;p&gt;We hope you liked this write up and got the gist of fireapis on how it can be used in your projects&lt;/p&gt;

&lt;p&gt;Feel free to reach out to us by Email(&lt;a href="mailto:vasanth@fireapis.com"&gt;vasanth@fireapis.com&lt;/a&gt;) if you would like to know more about Fireapis.&lt;/p&gt;

&lt;p&gt;I‚Äôd love to hear what you think of Fireapis and if there is anything we can improve.&lt;/p&gt;

&lt;p&gt;Catch you in the next one üëã&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>database</category>
      <category>aws</category>
      <category>python</category>
    </item>
    <item>
      <title>7 Mistakes STOPPING you from landing an interview üò±üòû</title>
      <author>Ibrahim Hasan</author>
      <pubDate>Fri, 07 May 2021 16:53:15 +0000</pubDate>
      <link>https://dev.to/himamegahed/7-mistakes-stopping-you-from-landing-an-interview-35bc</link>
      <guid>https://dev.to/himamegahed/7-mistakes-stopping-you-from-landing-an-interview-35bc</guid>
      <description>&lt;p&gt;Recently I have been assigned a role of filtering CVs and I was really shocked with those mistakes, So I thought why we don't try to avoid them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stop-using-cvresume-online-templates-i-see-them-killers"&gt;
  &lt;/a&gt;
  Stop using CV/Resume online templates. I see them killers
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Rule #1 while you are creating your CV it &lt;strong&gt;MUST NOT&lt;/strong&gt; be more than 2 pages. an A4 paper size is very enough for your previous 4 companies with a brief description about every one, Education, Skills.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This Applies to you whether you are &lt;strong&gt;fresh&lt;/strong&gt;, &lt;strong&gt;+2 Junior&lt;/strong&gt; or even &lt;strong&gt;senior&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;2 Pages Only Remember don't waste the space with the online CV Templates. Neat and professional Word Document is enough, no need for fancy SVGs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;üö®&lt;strong&gt;Warning:&lt;/strong&gt; DO NOT apply with word document, instead convert to PDFüö®&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/d10dMmzqCYqQ0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/d10dMmzqCYqQ0/giphy.gif" alt="Alt text of image"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-linkedin-and-github-accounts-are-very-important"&gt;
  &lt;/a&gt;
  Your LinkedIn and Github accounts are very important
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I see too many people forget to put their LinkedIn and Github accounts.&lt;/li&gt;
&lt;li&gt;You add your personal projects but HR or the guy who filters Cvs out needs to an evidence.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This applies to &lt;strong&gt;GitLab&lt;/strong&gt; - &lt;strong&gt;Jira&lt;/strong&gt; or any code hosting platform for version control and collaboration&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/lMm1EzWYlGiZqtOgEJ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/lMm1EzWYlGiZqtOgEJ/giphy.gif" alt="Alt text of image"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#try-to-host-your-applications-online-as-much-as-possible"&gt;
  &lt;/a&gt;
  Try to host your applications online as much as possible
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This adds weight to you as seeing your projects in actions has a different impact than reading a description. Let your work talk instead of you.&lt;/li&gt;
&lt;li&gt;You can use any free hosting provider just like "&lt;strong&gt;Heroku&lt;/strong&gt; - &lt;strong&gt;Netlify&lt;/strong&gt; - &lt;strong&gt;Github Pages&lt;/strong&gt; - &lt;strong&gt;Firebase Hosting&lt;/strong&gt;" and many more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#try-to-use-situations-to-express-your-skills-instead-of-indicator"&gt;
  &lt;/a&gt;
  Try to use situations to express your skills instead of indicator.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;One of the things I learned when I was creating my CV is that numbers and metrics has an amplified impact on the CV Filtration phase.&lt;/li&gt;
&lt;li&gt;So as an example instead of saying that you have Leadership and good communication skills, You could say:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;I Led a team of 4 UI/UX, Back-end, Front-end, and a mobile developer and got A+ and ranked as the #2 valuable project in the college.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#your-linkedin-works-as-your-cv-also"&gt;
  &lt;/a&gt;
  Your LinkedIn Works as your CV also
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;For LinkedIn give it attention and make sure it's updated with your relevant experience.&lt;/li&gt;
&lt;li&gt;Keeping your self active on LinkedIn will grasp attention to you sooner or later.&lt;/li&gt;
&lt;li&gt;You can search Online how to make your LinkedIn Profile standing out from others and apply those tips and hacks.
Give a look at &lt;a href="https://www.linkedin.com/in/ibrahimhasan96/"&gt;My LinkedIn&lt;/a&gt; I have applied those tips there.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#this-advise-especially-for-github-users"&gt;
  &lt;/a&gt;
  This advise especially for Github Users üòéü§©
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Github has a very nice feature called &lt;strong&gt;Github Secrets&lt;/strong&gt;, You can add a README to your Profile. Very neat and stylish.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I have added this to &lt;a href="https://github.com/hima-Megahed"&gt;My Github Profile&lt;/a&gt; too you can give it a look and fork &lt;a href="https://github.com/hima-Megahed/hima-Megahed"&gt;&lt;strong&gt;hima-megahed&lt;/strong&gt;&lt;/a&gt; repository and change information to yours.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#there-is-no-need-to-put-your-personal-photo"&gt;
  &lt;/a&gt;
  There is no need to put your Personal Photo
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I see you should not put your personal photo to the CV unless the employer asked that. And believe most of them don't ask for that.&lt;/li&gt;
&lt;li&gt;This also will add more space to your projects and will reduce number of pages remember &lt;strong&gt;Rule #1&lt;/strong&gt; ‚òùÔ∏è.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cv</category>
      <category>career</category>
      <category>interview</category>
      <category>juniors</category>
    </item>
    <item>
      <title>Transforming Media With Java Code </title>
      <author>Rebeccca Peltz</author>
      <pubDate>Fri, 07 May 2021 16:45:38 +0000</pubDate>
      <link>https://dev.to/rebeccapeltz/transforming-media-with-java-code-4863</link>
      <guid>https://dev.to/rebeccapeltz/transforming-media-with-java-code-4863</guid>
      <description>&lt;h1&gt;
  &lt;a href="#transforming-media-with-java"&gt;
  &lt;/a&gt;
  Transforming Media With Java
&lt;/h1&gt;

&lt;p&gt;Transforming media on Cloudinary in Java is fun because of the fluent interface. Cloudinary transformations are used to produce optimized media as well as aesthetic effects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fluent-interface"&gt;
  &lt;/a&gt;
  Fluent Interface
&lt;/h2&gt;

&lt;p&gt;In 2005, Martin Fowler created an API design pattern called the &lt;a href="https://martinfowler.com/bliki/FluentInterface.html"&gt;fluent interface, which makes use of &lt;/a&gt;method chaining and a domain-specific language and&lt;a href="https://martinfowler.com/bliki/FluentInterface.html"&gt; which has been adopted &lt;/a&gt;in many popular APIs, such as .NET‚Äôs SQL API &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/linq/"&gt;Linq. &lt;/a&gt;With Linq, .NET programmers can write code that generates SQL.&lt;/p&gt;

&lt;p&gt;Since then, Fowler has introduced many &lt;a href="https://martinfowler.com/eaaCatalog/"&gt;design patterns&lt;/a&gt; for object-oriented programming that have been embraced by OO developers for building APIs. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-chaining"&gt;
  &lt;/a&gt;
  Method Chaining
&lt;/h3&gt;

&lt;p&gt;Method chaining refers to a method that returns an instance of the object that encapsulates it,  as in this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Hello {
    private string name;
    Hello()
    {
        System.out.println("Calling The Constructor");
    }
    public Hello setName(String name)
    {
        this.name = name;
        return this;
    }
    void say()
    {
        System.out.println("Hello " + name);
    }
}

public class Hello {
    public static void main(String[] args)
    {
        // "method chaining".
        new Hello().setName("Martin").say();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Fun fact:&lt;/strong&gt;  The popular jQuery library, which leverages method chaining, was developed around the time Martin Fowler launched the fluent interface.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#domainspecific-language"&gt;
  &lt;/a&gt;
  Domain-Specific Language
&lt;/h3&gt;

&lt;p&gt;Since the fluent interface comprises both object chaining and a domain-specific language, the code flows and is easy to read.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fluent-interface-for-transformations"&gt;
  &lt;/a&gt;
  Fluent Interface for Transformations
&lt;/h3&gt;

&lt;p&gt;We're going to see here how to use the Cloudinary Java SDK's fluent interface to code fun and useful transformations.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cropping-of-media"&gt;
  &lt;/a&gt;
  Cropping of Media
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#scale"&gt;
  &lt;/a&gt;
  Scale
&lt;/h3&gt;

&lt;p&gt;Cloudinary performs simple cropping transformations with a fluent interface. An example is to apply a single dimension to an image or video and then scale the media item to maintain the aspect ratio, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;new Transformation().width(300).crop("scale")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here‚Äôs an example of single-dimension scaling:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/cloudinary-training/image/upload/w_300,c_scale/dog.jpg"&gt;https://res.cloudinary.com/cloudinary-training/image/upload/w_300,c_scale/dog.jpg&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
   &lt;td&gt;Original: 2519 x 2501
   &lt;/td&gt;
   &lt;td&gt;Scaled: 300 x 298
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;




&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q9z-Wp88--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/dog1.jpg" alt="dog original photo" title="dog original photo"&gt;

   &lt;/td&gt;
   &lt;td&gt;




&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QlV7f6Vo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/dog2.jpg" alt="dog scaled photo" title="dog scaled photo"&gt;

   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The transformed image adjusts the unspecified dimension (in this case, the height) so that the aspect ratio stays the same.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fit"&gt;
  &lt;/a&gt;
  Fit
&lt;/h3&gt;

&lt;p&gt;To create a media item, say, an image, with a certain width and height, specify them and maintain the aspect ratio with the &lt;code&gt;crop&lt;/code&gt; type &lt;code&gt;fit&lt;/code&gt;. Cloudinary then changes the dimensions and maintains aspect ration, but the image remains within the bounding box based on the two specified dimensions. See the example below.&lt;br&gt;
dim&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;new Transformation().width(300).height(200).crop("fit")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
   &lt;td&gt;

Fit: 201 x 200
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;



&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RSKAmUaO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/dog3.jpg" alt="resize with fit " title="resize with fit"&gt;

   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The transformed image might not have the exact dimensions as specified but will not exceed them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pad"&gt;
  &lt;/a&gt;
  Pad
&lt;/h3&gt;

&lt;p&gt;You can set exact dimensions with the &lt;code&gt;crop&lt;/code&gt; type &lt;code&gt;pad&lt;/code&gt;. To maintain the aspect ratio, &lt;code&gt;pad&lt;/code&gt; scales the image to fit within the specified dimensions and creates a padding for any dimension that must be made smaller than the value specified. The color of the pad will default to white. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;new Transformation().width(300).height(200).crop("pad")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
   &lt;td&gt;

Pad: 300 x 300
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;



&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pTK_6e9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/dog4.jpg" alt="resize with pad" title="resize with pad"&gt;

   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;To change the color of the padding, just chain the &lt;code&gt;background&lt;/code&gt; parameter to the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;new Transformation().width(300).height(200).crop("pad").background("red")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
   &lt;td&gt;
Red Padding: 300 x 200
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;



&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9YyhB5iz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/dog5.jpg" alt="resize with red padding" title="resize with red padding"&gt;

   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;To have Cloudinary determine the most used color in the media item and then apply that color to the padding, set &lt;code&gt;background&lt;/code&gt; to &lt;code&gt;auto&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;new Transformation().width(300).height(200).crop("pad").background("auto")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
   &lt;td&gt;

Auto Padding: 300 x 200
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;




&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tQKQLsGt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/dog6.jpg" alt="resize with auto pad" title="resize with auto pad"&gt;

   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;There are many more cropping transformations and you can learn about them &lt;a href="https://cloudinary.com/documentation/transformation_reference"&gt;online&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fun-with-transformations"&gt;
  &lt;/a&gt;
  Fun With Transformations
&lt;/h2&gt;

&lt;p&gt;Once you have uploaded your media to Cloudinary, you can write Java code to create URLs, image tags, and video tags that contain transformation parameters. Below are a few fun video examples in which we create URLs with transformations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boomerang-effect-with-video"&gt;
  &lt;/a&gt;
  Boomerang Effect With Video
&lt;/h3&gt;

&lt;p&gt;Consider a time-lapse video of an hourglass. How would the hourglass run if time moves backwards? To find out, apply the &lt;strong&gt;boomerang&lt;/strong&gt; effect on the video as a transformation, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cloudinary.url().transformation(new Transformation().effect("boomerang"))
.resourceType("video").generate("purple-hourglass.mp4")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Click this link to play the video in your browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/cloudinary-training/video/upload/e_boomerang/purple-hourglass.mp4"&gt;https://res.cloudinary.com/cloudinary-training/video/upload/e_boomerang/purple-hourglass.mp4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kN1UUwRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/hourglass.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kN1UUwRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/hourglass.jpg" alt="boomerang effect" title="boomerang effect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#concatenation-of-videos"&gt;
  &lt;/a&gt;
  Concatenation of Videos
&lt;/h3&gt;

&lt;p&gt;To play two videos in sequence, try this concatenation technique:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cloudinary.url().resourceType("video")
.transformation(new Transformation().width(300).height(200).crop("filt").chain()
.overlay(
new Layer().publicId("video:purple-hourglass"))
.flags("splice").width(300).height(200).crop("fit"))
.generate("3-o-clock.mp4")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Click this link to play the concatenated video in your browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/cloudinary-training/video/upload/c_fit,h_200,w_300/c_fit,fl_splice,h_200,l_video:purple-hourglass,w_300/3-o-clock.mp4"&gt;https://res.cloudinary.com/cloudinary-training/video/upload/c_fit,h_200,w_300/c_fit,fl_splice,h_200,l_video:purple-hourglass,w_300/3-o-clock.mp4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CoRGLnD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/clock.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CoRGLnD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/clock.jpg" alt="video concatenation" title="video concatenation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#progress-indicator"&gt;
  &lt;/a&gt;
  Progress Indicator
&lt;/h3&gt;

&lt;p&gt;How about creating a visual indicator that shows how much time is left in your video? Simply add a progress bar, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cloudinary.url().transformation(new Transformation().effect("progressbar:frame:FF0000:12"))                     .resourceType("video").generate("purple-hourglass.mp4")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Click this link to play the video with a progress bar:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/cloudinary-training/video/upload/e_progressbar:frame:FF0000:12/purple-hourglass.mp4"&gt;https://res.cloudinary.com/cloudinary-training/video/upload/e_progressbar:frame:FF0000:12/purple-hourglass.mp4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c8X8kKYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/progress-bar-video.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c8X8kKYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-training/image/upload/f_auto%2Cq_auto/blog/java/progress-bar-video.jpg" alt="progress bar" title="progress bar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;The design of the Cloudinary Java SDK makes it easy to code in Java. As you learn more about the many ways in which you can transform media with Cloudinary, you‚Äôll become more creative and fluent with the process. Have fun!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Hourglass-timer video by &lt;a href="https://www.pexels.com/@samerdaboul?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Samer Daboul&lt;/a&gt; from &lt;a href="https://www.pexels.com/photo/close-up-view-of-a-sand-timer-1196530/?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Pexels&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Clock video by &lt;a href="https://www.pexels.com/@jason-h-austin-544053?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Jason H. Austin&lt;/a&gt; from &lt;a href="https://www.pexels.com/photo/round-wall-clock-1509518/?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Pexels&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://chrome.google.com/webstore/detail/cloudinary-media-inspecto/ehnkhkglbafecknplfmjklnnjimokpkg"&gt;Cloudinary Media Inspector Extension&lt;/a&gt; for insight on images&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cloudinary</category>
      <category>java</category>
      <category>transformations</category>
    </item>
    <item>
      <title>My second impression of Rust and why I think it's the best general-purpose language!</title>
      <author>Deepu K Sasidharan</author>
      <pubDate>Fri, 07 May 2021 16:42:49 +0000</pubDate>
      <link>https://dev.to/deepu105/my-second-impression-of-rust-and-why-i-think-it-s-the-best-general-purpose-language-31jh</link>
      <guid>https://dev.to/deepu105/my-second-impression-of-rust-and-why-i-think-it-s-the-best-general-purpose-language-31jh</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://deepu.tech/my-second-impression-of-rust/"&gt;deepu.tech&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Please follow me on &lt;a href="https://twitter.com/deepu105"&gt;Twitter&lt;/a&gt; for updates and let me know what can be improved in the post.&lt;/p&gt;




&lt;p&gt;I wrote about &lt;a href="https://deepu.tech/first-impression-of-rust/"&gt;my first impression of Rust&lt;/a&gt; in November 2019. After that, I dabbled with it few times, but mostly on very simple code, and while I liked using Rust I wasn't too amazed. On the surface, it kind of felt more or less like many other languages I have dabbled with.&lt;/p&gt;

&lt;p&gt;All that changed last month when I finally decided to build a realistic use case with Rust. Since I was quite invested in cloud computing and containers, I decided to build a terminal UI to monitor Kubernetes clusters with Rust. I know it was quite ambitious for a Rust newbie. But looking back, it was absolutely worth it and I have &lt;a href="https://github.com/kdash-rs/kdash"&gt;KDash&lt;/a&gt; to show for it.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rs6duE7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/EzF29bZXMAE0pv0.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--XkDzhPMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1278304200947089416/XocBIsMa_normal.jpg" alt="Deepu K Sasidharan ( ‡¥¶‡µÄ‡¥™‡µÅ, ‡Æ§‡ØÄ‡Æ™‡ØÅ, ‡§¶‡•Ä‡§™‡•Ç ) profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Deepu K Sasidharan ( ‡¥¶‡µÄ‡¥™‡µÅ, ‡Æ§‡ØÄ‡Æ™‡ØÅ, ‡§¶‡•Ä‡§™‡•Ç )
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/deepu105"&gt;@deepu105&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Introducing KDash - A simple &lt;a href="https://twitter.com/kubernetesio"&gt;@kubernetesio&lt;/a&gt; terminal dashboard built with &lt;a href="https://twitter.com/rustlang"&gt;@rustlang&lt;/a&gt; &lt;br&gt;&lt;br&gt;Still a WIP but here is an MVP I built over the last few weeks. Please try it out and provide me feedback also any contribution is welcome&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/rust"&gt;#rust&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Kubernetes"&gt;#Kubernetes&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/oss"&gt;#oss&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/ws9qfc9ie8"&gt;github.com/kdash-rs/kdash&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      11:20 AM - 16 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1383017556546584578" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1383017556546584578" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1383017556546584578" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;So it's a pretty UI on the terminal that shows different resource data and utilization metrics for Kubernetes clusters. Kind of inspired by &lt;a href="https://github.com/kdash-rs/kdash#how-does-this-compare-to-k9s"&gt;K9s&lt;/a&gt;, which is built with Go. The focus for KDash was speed and UX. With Rust, I knew that I didn't have to worry about the speed part.&lt;/p&gt;

&lt;p&gt;The architecture was quite complex. It's fully event-driven, concurrent, and asynchronous with different threads to handle drawing of the UI, doing network requests, streaming logs, and running commands. I used channels to pass events across threads and the application state was shared using an &lt;a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"&gt;ARC&lt;/a&gt; smart pointer and a &lt;a href="https://doc.rust-lang.org/std/sync/struct.Mutex.html"&gt;Mutex&lt;/a&gt; lock. I'll write another blog with more details about the architecture choices and inspirations.&lt;/p&gt;

&lt;p&gt;While, I have implemented similar architectures in Go, Java, and JavaScript, doing it in Rust was quite challenging. I struggled the first few days to put together a basic structure and was constantly battling the compiler thanks to my habits from other languages I work with. But I started getting better at thinking in the Rust way and within a week I was having fewer compiler errors and Clippy warnings. After few weeks, I rarely get compiler errors for new code (also thanks to &lt;a href="https://rust-analyzer.github.io/"&gt;rust-analyzer&lt;/a&gt;) and I have started to polish existing code to make it better or to write better abstractions.&lt;/p&gt;

&lt;p&gt;So now that I have set the context, I feel it's time to revisit points from my first impression and see if they still hold true. Along the way, I'll share my thoughts on why I think Rust is the future for general-purpose languages and how it is taking over the software engineering world. I'll try not to be biased as much as possible and wear my polyglot hat for comparisons. If you haven't read my previous &lt;a href="https://deepu.tech/first-impression-of-rust/"&gt;post&lt;/a&gt; on the topic, I encourage you to read it for better context.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-love-about-rust"&gt;
  &lt;/a&gt;
  What I love about Rust
&lt;/h2&gt;

&lt;p&gt;Ok, let's get this out of the way first. So I love everything I originally liked about Rust. Some of them even more so after using Rust full-fledged and gaining more experience in it. So here, I'll touch upon some important high-level stuff that I didn't mention in the &lt;a href="https://deepu.tech/first-impression-of-rust/"&gt;previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Rust throws around some buzz words in its docs, but they are not just marketing buzz, they actually mean it with full sincerity and they actually matter a lot and are indeed the biggest selling points of Rust.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#safety"&gt;
  &lt;/a&gt;
  Safety
&lt;/h3&gt;

&lt;p&gt;What does being safe mean for a language? or rather what does unsafe mean? Let's set the context first so that we can appreciate what Rust offers. Safety can be categorized into three (or four if you count null safety)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;About 70% of all CVEs at Microsoft are memory safety issues.&lt;br&gt;
Two-thirds of Linux kernel vulnerabilities come from memory safety issues&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5&gt;
  &lt;a href="#memory-safety"&gt;
  &lt;/a&gt;
  Memory safety
&lt;/h5&gt;

&lt;p&gt;This means when you access a variable or an item in an array, you can be sure that you are indeed accessing what you meant to or are allowed to access. In other words, you will not be reading/writing into the memory of another variable or pointer by mistake regardless of what you do in your program.&lt;/p&gt;

&lt;p&gt;Why is this a big deal? Doesn't all major programming languages ensure this?&lt;/p&gt;

&lt;p&gt;Yes, to varying extent. But some languages are unsafe by default. In C or C++, you can access the memory of another variable by mistake or you can free a pointer twice (double-free error). Such behavior is categorized as undefined behavior as they are unpredictable and hence can be abused by a hacker to take control of the program or to leak privileged information. In memory-safe languages, if you try to access an array element out of its bound, you will just crash the program with a panic/error, which is predictable behavior.&lt;/p&gt;

&lt;p&gt;This is why memory-related bugs in C/C++ systems often result in &lt;a href="https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures"&gt;CVEs&lt;/a&gt; and emergency patches. There are other memory-unsafe behaviors in C or C++; accessing pointers to stack frames that have been popped, a memory that has been de-allocated, iterator invalidation, and so on.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Null safety&lt;/strong&gt;: I list this separately under memory safety, as I come from a Java/JS background and we are so used to the concept of null (infamous for being the worst invention in programming). Garbage collected languages kind of need a concept of nothing so that a pointer can be freed. But it also leads to issues and pain. NPE anyone? Technically this falls under memory safety but most memory-safe languages still let you use null as a value leading to null pointer errors&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#type-safety"&gt;
  &lt;/a&gt;
  Type safety
&lt;/h5&gt;

&lt;p&gt;This means when you access a variable you access it as the correct type of data it is stored as. This gives us the confidence to work on data without having to manually check for the data type during runtime. Memory safety is required for a language to be type-safe.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#thread-safety"&gt;
  &lt;/a&gt;
  Thread safety
&lt;/h5&gt;

&lt;p&gt;This means you can access/modify the same memory from multiple threads at the same time without worrying about data races. This is generally achieved by using mutual exclusion locks (Mutex) or thread synchronization. Thread safety is required for optimal memory and type safety so generally languages that are memory and type-safe tend to be thread-safe as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now let's see how Rust offers safety in these aspects.&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#memory-safety"&gt;
  &lt;/a&gt;
  Memory safety
&lt;/h5&gt;

&lt;p&gt;Rust ensures memory safety at compile time using its innovative ownership mechanism and the borrow checker built into the compiler. The compiler just does not allow memory unsafe code unless it's explicitly marked as &lt;code&gt;unsafe&lt;/code&gt; in an unsafe block or function. This static compile-time analysis eliminates many types of memory bugs and with some more runtime checks, Rust guarantees memory safety.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Null safety&lt;/strong&gt;: There is no concept of null at the language level. Instead, Rust provides the Option enum which can be used to mark the presence or absence of a value making the resulting code null safe and much easier to deal with and you will never encounter null pointer exceptions in Rust.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#type-safety"&gt;
  &lt;/a&gt;
  Type safety
&lt;/h5&gt;

&lt;p&gt;Rust is statically typed and it guarantees type safety by strict compile-time type checks and by guaranteeing memory safety. This is not special as most modern languages are statically typed. Rust also allows some level of dynamic typing with the &lt;code&gt;dyn&lt;/code&gt; keyword and &lt;code&gt;Any&lt;/code&gt; type when required. But the powerful type inference and the compiler ensure type safety even in that case.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#thread-safety"&gt;
  &lt;/a&gt;
  Thread safety
&lt;/h5&gt;

&lt;p&gt;Rust guarantees thread safety using similar concepts it uses for memory safety along with providing standard library features like channels, Mutex, and ARC. The compiler makes it impossible to cause accidental data race from a shared state. This makes us confident to focus on code and let the compiler worry about shared data between threads.&lt;/p&gt;

&lt;p&gt;Now, don't be mistaken, you will see crashes and errors in a Rust application, even array index out of bound errors, and so on. Rust is not claiming safety against errors or is going to catch wrong logic, as no compiler can guarantee against human error. It just makes errors predictable so when errors do happen you are sure that there is no security issue associated with it like in a C/C++ application.&lt;/p&gt;

&lt;p&gt;Rust also lets you write unsafe code when required by explicitly declaring &lt;code&gt;unsafe&lt;/code&gt; blocks. This gives the flexibility when needed as there are certain low-level systems use cases that would need unsafe memory access. Rust cannot guarantee any of the above safety in &lt;code&gt;unsafe&lt;/code&gt; code blocks as it's for people who are sure of what they are doing and don't want the compiler to interfere.&lt;/p&gt;

&lt;p&gt;Now, most statically typed high-level languages like Java, Go or C# also offers all of the above to varying extend, none of them provide null safety though. But they do it with the cost of having a runtime and a garbage collector.&lt;/p&gt;

&lt;p&gt;This is why Rust is special as it offers better safety than any high-level language without a runtime or memory management (garbage collection, reference counting, and so on) overhead. At the same time, it offers speed and performance, &lt;a href="https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/rust.html"&gt;sometimes better than&lt;/a&gt;, of a low-level language like C/C++&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zero-cost-abstractions"&gt;
  &lt;/a&gt;
  Zero cost abstractions
&lt;/h3&gt;

&lt;p&gt;A zero-cost abstraction means that how you write your program does not affect its performance, for example, you can choose to create or use any number of abstractions to structure your program, you could use loops or iterators, you could do functional or imperative programming and the result remains the same. The compiler will produce the best possible implementation of the machine code for the use case regardless of the flavor of code you choose.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What you don‚Äôt use, you don‚Äôt pay for. And further: What you do use, you couldn‚Äôt hand code any better.&lt;/p&gt;

&lt;p&gt;-- &lt;a href="https://en.wikipedia.org/wiki/Bjarne_Stroustrup"&gt;Bjarne Stroustrup&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Only very few programming languages offer this. C++ is popular for offering zero-overhead abstractions but &lt;a href="https://www.youtube.com/watch?v=rHIkrotSwcc"&gt;they are not always zero cost if you consider the compile-time cost&lt;/a&gt;. Rust compiler, however, seems to be smarter and offers zero-cost abstractions in most cases with better developer experience which is an important factor. There could still be negligible overheads like array bound checks and so on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A zero-cost abstraction, like all abstractions, must actually offer a better experience than the alternative.&lt;/p&gt;

&lt;p&gt;-- &lt;a href="https://twitter.com/withoutboats"&gt;Saoirse&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's see a small example to understand and appreciate the importance of this. We will compare a high-level language like Java to Rust for this. But you could technically take any other high-level language for the comparison and the results can be similar.&lt;/p&gt;

&lt;p&gt;Let's take the below Java program. Running &lt;a href="https://github.com/openjdk/jmh"&gt;JMH&lt;/a&gt; benchmark on it gives the performance numbers for each function and its added as comments inline&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Average  10.059 ns/op&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;factorialForLoop&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;--)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Average  20.689  ns/op&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;factorialRecursive&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;factorialRecursive&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Average  23.457 ns/op&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;factorialStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;LongStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rangeClosed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reduce&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*
# Run complete. Total time: 00:02:30 (JDK 11)

Benchmark                  Mode  Cnt   Score    Error  Units
MyBenchMark.forLoop        avgt    3  10.059 ¬±  1.229  ns/op
MyBenchMark.recursive      avgt    3  20.689 ¬±  4.465  ns/op
MyBenchMark.stream         avgt    3  23.457 ¬± 32.424  ns/op
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, even though all three functions does the same job, they don't have similar performance. The one with the most abstractions, stream iterations, suffers the most. Now let's try the same three functions in Rust and run benchmarks using &lt;a href="https://github.com/bheisler/criterion.rs"&gt;Criterion&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// Average  8.5858 ns/op&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;factorial_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Average  8.6150 ns/op&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;factorial_recursion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;factorial_recursion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Average 6.6387 ns/op&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;factorial_iterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;usize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*
Benchmark                time:   [min       avg       max      ]
factorial_loop           time:   [8.4579 ns 8.5732 ns 8.7105 ns]
factorial_recursion      time:   [8.4394 ns 8.5074 ns 8.5829 ns]
factorial_iterator       time:   [6.4240 ns 6.4742 ns 6.5338 ns]
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the performance is identical for iterative and recursive approach and it's even better for inbuilt abstractions (due to internal iterator optimizations and stuff).&lt;/p&gt;

&lt;p&gt;So in the case of Rust, it's even fair to say that abstractions provide better performance than hand-optimized code in many cases and at worst they provide the same performance at zero cost. If you look &lt;a href="https://godbolt.org/z/v593nhKoh"&gt;into the assembly code generated&lt;/a&gt; by different flavors, in many cases, you can see the compiler produces the same assembly code.&lt;/p&gt;

&lt;p&gt;This gives us the power not to think about writing the most optimal code and instead focus on writing the most readable and reusable code. This doesn't mean that anything in Rust is zero-cost abstractions. You can always end up writing code that does unnecessary computations and such which adds to the cost but at least it will be obvious.&lt;/p&gt;

&lt;p&gt;Some of the most notable zero-cost abstractions in Rust are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ownership and borrowing&lt;/li&gt;
&lt;li&gt;Iterator and closure APIs&lt;/li&gt;
&lt;li&gt;Async/await and Futures&lt;/li&gt;
&lt;li&gt;Unsafe and the module boundary&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fearless-concurrency"&gt;
  &lt;/a&gt;
  Fearless concurrency
&lt;/h3&gt;

&lt;p&gt;We already saw that Rust is thread-safe so technically you can do all sorts of &lt;a href="https://deepu.tech/concurrency-in-modern-languages-rust/"&gt;concurrency implementations&lt;/a&gt; in Rust without worries. Rust supports multithreading, green threads, parallel computing, and asynchronous programming either as first-class citizens or via crates like Tokio or Futures.&lt;/p&gt;

&lt;p&gt;The first realistic &lt;a href="https://github.com/kdash-rs/kdash"&gt;app I built&lt;/a&gt; in Rust is extremely concurrent and asynchronous and I'm yet to encounter any issues related to concurrency and Rust promises that I'll never encounter data race issues even though I share state between multiple threads doing asynchronous operations. Honestly, I won't be comfortable doing the same in any other language that I'm used to, maybe to an extend in Go as it's &lt;a href="https://deepu.tech/concurrency-in-modern-languages-go/"&gt;quite good when it comes to concurrency&lt;/a&gt; as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#community-tooling-amp-ecosystem"&gt;
  &lt;/a&gt;
  Community, Tooling &amp;amp; Ecosystem
&lt;/h3&gt;

&lt;p&gt;Rust has hands down, one of the best &lt;a href="https://www.rust-lang.org/community"&gt;communities&lt;/a&gt; around, in my opinion. It doesn't have the politics of Java or the bloat of JavaScript (yet üòâ). Rust didn't shy away from copying good things from other languages like package management from JavaScript, language features from Haskell, OCaml, Ruby, JavaScript, and so on.&lt;/p&gt;

&lt;p&gt;That diversity is visible in the community as well. You can see people with all sorts of backgrounds and an extremely welcoming and friendly community. Strangely the &lt;a href="https://users.rust-lang.org/"&gt;Rust community forum&lt;/a&gt; is more active than its stack overflow community and that says a lot. You will find people helping you and guiding you rather than being gatekeepers.&lt;/p&gt;

&lt;p&gt;Rust also guarantees backward compatibility while still improving the language constantly and has a tooling and library ecosystem that keeps up. The Rust library ecosystem feels similar to that of JavaScript and gives you the NPM vibes.&lt;/p&gt;

&lt;p&gt;The tooling is just amazing, rustc, rustup, and cargo are standard and there are tons of plugins like Clippy, rustfmt, and so on. Cargo acts as the build runner, package manager, plugin manager, and so on. It all feels well integrated and results in a great developer experience. There are some rough edges from time to time but is still way ahead of many other languages with an even longer history.&lt;/p&gt;

&lt;p&gt;Rust also provides one of the best documentation around. It is even included in the standard toolchain via the &lt;code&gt;rustup docs&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Many other smaller things in Rust is awesome, I'm just skipping them for high-level stuff.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-still-dont-like-about-rust"&gt;
  &lt;/a&gt;
  What I still don't like about Rust
&lt;/h2&gt;

&lt;p&gt;These were the things I originally didn't like about Rust and while I haven't changed my mind on how I feel about many of these, some of these make more sense to me now. But that doesn't mean I have to like them right. Read my &lt;a href="https://deepu.tech/first-impression-of-rust/"&gt;original post&lt;/a&gt; if you want more context on these.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#complexity"&gt;
  &lt;/a&gt;
  Complexity
&lt;/h3&gt;

&lt;p&gt;It seems like the complexity of the language only keeps on increasing at one end, with new language features, while some things are being simplified at the other end and I'm a bit torn about this, to be honest.&lt;br&gt;
I do like many features it provides and my issue about having many ways to do the same thing doesn't seem like a big deal now that I understand the zero-cost abstractions in Rust. But once you step into advanced generics, traits, lifetimes and so on it quickly becomes mind-boggling and I can relate to newcomers as there is a steep learning curve.&lt;/p&gt;

&lt;p&gt;While I understand that this complexity is required and most of the time worth it, given the benefits of ownership, it's hard not to yearn for a bit more simplicity. Hopefully, future versions will evolve to simplify a lot of these ü§û&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shadowing-of-variables-in-the-same-context"&gt;
  &lt;/a&gt;
  Shadowing of variables in the same context
&lt;/h3&gt;

&lt;p&gt;This makes more sense to me now and I end up using this a lot. With the ownership mechanism, you often have to rebind, create temporary intermediates or get value from option or transforms value so this is useful but my point about this being abused is quite true as well.&lt;br&gt;
There were few instances where I ended up using the same name for different content with the same type in the same context giving me an unexpected result. It didn't cause any major issues but did affect readability and logic sometimes. So probably it would have been fine without this feature as well. However, with &lt;a href="https://rust-lang.github.io/rust-clippy/rust-1.51.0/index.html#shadow_reuse"&gt;Clippy&lt;/a&gt;, it's possible to add a lint rule to disallow this so it's good enough I guess.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#functions-are-not-firstclass-citizens"&gt;
  &lt;/a&gt;
  Functions are not first-class citizens
&lt;/h3&gt;

&lt;p&gt;Well, turns out they are first-class citizens but it's just that functions in Rust are very complex. I understand the whys and hows and they make sense. But I would still prefer if this was more streamlined at least with some syntax sugars. But it's not a big deal and is more of a nitpick now&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implicit-implementation-of-traits"&gt;
  &lt;/a&gt;
  Implicit implementation of traits
&lt;/h3&gt;

&lt;p&gt;After using Rust this makes sense and I like the way Rust does it much more than Go, for example. So this is no longer an issue for me üò∏&lt;/p&gt;

&lt;p&gt;Also, the nitpicks I had in my original post no longer bothers me üòÑ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rust-is-the-future"&gt;
  &lt;/a&gt;
  Rust is the future
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Rust, not Firefox, is Mozilla's greatest industry contribution&lt;/p&gt;

&lt;p&gt;TechRepublic&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, first of all, let me say I'm falling in love with the language. So maybe my opinions have a small bias. I haven't had this much fun programming in years. There is a weird feeling of satisfaction that you get when writing code in Rust. Now I understand why Rust is the most loved language for 5 years in a row from the &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved"&gt;Stack Overflow developer survey&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don't get me wrong. Rust is not a silver bullet as there are issues like the steep learning curve and complexity and so on. But it's the closest thing to a silver bullet in my opinion. That doesn't mean I'll just start using Rust for everything. I still enjoy being a polyglot developer and I'm still invested in Java, JS/TS, and Go among others. But if the use case requires speed and or concurrency or building system tools or CLIs, then I will be giving Rust the first preference, and maybe Go will take a backseat as there isn't any advantage that Go brings over Rust for similar use cases.&lt;/p&gt;

&lt;p&gt;Normally a language would offer a choice between safety, speed, and high-level abstractions. At the very best you can pick two of those. For example with Java/C#/Go you get the safety and high-level abstractions at the cost of a runtime overhead whereas C++ gives you speed and abstractions at the cost of safety. But Rust offers all three and a good developer experience as a bonus.&lt;/p&gt;

&lt;p&gt;As our IT landscape is getting more complex and resource-hungry this combination matters a lot. Rust looks and feels like a general-purpose high-level language yet offers performance and memory efficiency of a low-level systems language. So this could be the &lt;a href="https://www.rust-lang.org/what/"&gt;general purpose language&lt;/a&gt; that doesn't make compromises and doesn't require a runtime and is cross-platform and is not as hard as C/C++. What is not to love here?&lt;/p&gt;

&lt;p&gt;Due to these unique characteristics, Rust is getting a foothold not just in systems programming but also in areas currently dominated by high-level languages like web applications, microservices, and CLI tools. It's also getting more and more popular as a web-assembly language due to its light footprint and great &lt;a href="https://www.rust-lang.org/what/wasm"&gt;WASM support&lt;/a&gt;. It has also made its way into the &lt;a href="https://www.rust-lang.org/what/embedded"&gt;embedded/IoT&lt;/a&gt; world. There are many more use cases like serverless, &lt;a href="https://deno.land/"&gt;JS runtime&lt;/a&gt;, game engines, game dev, Operating Systems, and even &lt;a href="https://threatpost.com/buer-malware-loader-rewritten-rust/165782/"&gt;malwares&lt;/a&gt; ü§¶&lt;/p&gt;

&lt;p&gt;Rust is rapidly gaining popularity. That's impressive given its just 5 years old. Big names like Microsoft, Google, Apple, Amazon, and Facebook are already &lt;a href="https://foundation.rust-lang.org/members/"&gt;invested&lt;/a&gt; in Rust and are making plans to replace C/C++ code with Rust. It will not be overnight but slowly Rust is going to replace a lot of those codes. Even Linux, the poster child of C, recently &lt;a href="https://www.zdnet.com/article/linus-torvalds-on-where-rust-will-fit-into-linux/"&gt;approved the use of Rust in some parts of the kernel&lt;/a&gt;, like driver code and so on.&lt;/p&gt;

&lt;p&gt;Unlike many general-purpose languages, which are not appropriate for some use cases due to the tradeoffs they make, Rust is uniquely positioned to work across the spectrum without any major disadvantage and be the general-purpose language for any use case, from client-side to systems programming.&lt;/p&gt;

&lt;p&gt;C/C++ and Go might be the ones to be displaced most in the short term by Rust in my opinion. I think Java/JS/TS/Python etc are safe for a long while due to their massive presence in large-scale applications and due to the migration cost.&lt;/p&gt;

&lt;p&gt;I would finish off by saying this: You won't appreciate Rust unless you spend few weeks building something in it. The initial steep learning curve could be frustrating or challenging depending on how you see it, but once past that it's hard not to love it. It's a toddler with superpowers after all üíó&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://engineering.fb.com/2021/04/29/developer-tools/rust/"&gt;engineering.fb.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.techrepublic.com/article/rust-not-firefox-is-mozillas-greatest-industry-contribution/"&gt;www.techrepublic.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://threatpost.com/buer-malware-loader-rewritten-rust/165782/"&gt;threatpost.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blogs.gartner.com/manjunath-bhat/2021/01/03/why-2021-will-be-a-rusty-year-for-system-programmers/"&gt;blogs.gartner.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/rust.html"&gt;benchmarksgame-team.pages.debian.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deepu.tech/concurrency-in-modern-languages/"&gt;deepu.tech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zdnet.com/article/linus-torvalds-on-where-rust-will-fit-into-linux/"&gt;www.zdnet.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zdnet.com/article/programming-language-rust-5-years-on-from-v1-0-heres-the-good-and-the-bad-news/"&gt;www.zdnet.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boats.gitlab.io/blog/post/zero-cost-abstractions/"&gt;boats.gitlab.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/ingeniouslysimple/rust-zero-cost-abstraction-in-action-9e4e2f8bf5a"&gt;medium.com/ingeniouslysimple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;If you like this article, please leave a like or a comment.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/deepu105"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/deepu05/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>programming</category>
      <category>languages</category>
      <category>webassembly</category>
    </item>
    <item>
      <title>How to make the most out of #100DaysOfCode</title>
      <author>Jo</author>
      <pubDate>Fri, 07 May 2021 16:31:42 +0000</pubDate>
      <link>https://dev.to/jo_josephs/how-to-make-the-most-out-of-100daysofcode-46f6</link>
      <guid>https://dev.to/jo_josephs/how-to-make-the-most-out-of-100daysofcode-46f6</guid>
      <description>&lt;p&gt;I am at the end of #100DaysOfCode and thought I would share some tips and tricks on how to successfully complete the challenge, my accomplishments, and what I would do differently in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tips-and-tricks"&gt;
  &lt;/a&gt;
  Tips and Tricks
&lt;/h3&gt;

&lt;p&gt;1) The main goal of #100DaysOfCode is to code consecutive for 100 days consecutively. Was I successful in this? Actually no. My birthday occured in the middle of the challenge, so I took a few days of to travel and celebrate. Balance is key, so while this challenge provides structure, feel free to afford yourself some flexibility and grace. Life happens and you just may not be able to code for 100 days straight. I would even suggest calibrating this challenge to best fit your needs. If you don't want to code on the weekends, then don't. The challenge will take longer of course, but you need to do what's best for you. &lt;br&gt;
Edit: After drafting this, I went through an extremely traumatic event that required me to take more time off. I almost decided to quit the challenge at d.82, but decided to continue. It helped with getting my life back to normal.&lt;/p&gt;

&lt;p&gt;2) Don't think you have to code for hours at a time every day. There were some days where all I did was watch a Udemy video before going to bed. There were other days when I spent hours coding. For me, I liked doing something every day to keep new concepts fresh in my mind.&lt;/p&gt;

&lt;p&gt;3) Set a goal. Setting a goal sets you up for success. For this challenge, I wanted to learn SQL. The system to learn that goal was to use the #100DaysOfCode challenge to learn SQL via online courses. The secondary goal was to finally start completing those Udemy courses I kept buying.&lt;/p&gt;

&lt;p&gt;4) After you've chosen what you want to learn, try not to go overboard with resources. There are so many free and paid resources, and it's easy to try and want to learn everything. I would suggest that before doing the challenge, do some research on what you would like to learn, then find some resources to help you learn that topic. This will help provide structure so you won't feel like you're flailing in the wind.&lt;/p&gt;

&lt;p&gt;5)Find a way to keep yourself accountable. For me, that was tweeting about it every day. You really don't have a way of knowing if people are paying attention, and in all honesty you have to assume that they don't care. But what if you have one person watching, you don't want to let them down do you? Learning is hard, and learning in public is even harder. Do it anyway. &lt;/p&gt;

&lt;p&gt;TLDR: Be consistent, but flexible, set a goal and have a system for achieving that goal, find a few resources and stick to those to completion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-did-i-accomplish"&gt;
  &lt;/a&gt;
  What did I Accomplish?
&lt;/h3&gt;

&lt;p&gt;I started this challenge with the goal to learn SQL because I saw it in so many different job applications. SQL is needed for data analytics, data science, and back-end web development. I learnt mySQL and PostgreSQL as well. &lt;br&gt;
I completed _____ Udemy courses, and later on in the challenge I started the Professional Data Analytics Course from Google. (I have finished the first of 8 courses and will be continuing the rest). Also later in the challenge, I started learning Python and will be continuing that as well. &lt;/p&gt;

&lt;p&gt;I also started about my journey and wrote _ articles about SQL. Writing about sql allowed me to cement the knowledge I was gaining and improved my technical writing ability as well. &lt;br&gt;
I not only improved my writing, but my presentation skills as well by including annotated screenshots and creating my own graphics in Canva as well. The tech world is huge, and all these skills, knowing how code, knowing how to write about technical topics, can all be useful. At the very least, it was helpful for me to go back and revisit topics I had written about so they served as a note taking function as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-would-i-do-differently-in-the-future"&gt;
  &lt;/a&gt;
  What would I do differently in the future.
&lt;/h3&gt;

&lt;p&gt;There is not a lot I would change about my process. I will probably make my goals more defined the next go around, in terms of what I hope to achieve (for example, write more blogs to increase my dev dot to viewership, or choose a sql database tool and try to learn that deeply). &lt;/p&gt;

&lt;p&gt;Thanks for reading! Hope these tips were helpful!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>sql</category>
      <category>mysql</category>
      <category>postgres</category>
    </item>
  </channel>
</rss>
