<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 5 Useful Packages That Every React Developer Should Know</title>
      <author>Zahab Kakar</author>
      <pubDate>Sun, 12 Sep 2021 16:43:23 +0000</pubDate>
      <link>https://dev.to/zahab/top-5-useful-packages-that-every-react-developer-should-know-8p8</link>
      <guid>https://dev.to/zahab/top-5-useful-packages-that-every-react-developer-should-know-8p8</guid>
      <description>&lt;p&gt;React JS is a popular JavaScript framework for building front-end applications, such as user interfaces that let people interact with software.  When it comes to developing modern React apps, choosing the right library might be difficult. Therefore in this article, I have compiled the best and useful packages that you need as a React developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#axios"&gt;
  &lt;/a&gt;
  Axios
&lt;/h2&gt;

&lt;p&gt;Axios makes it simple for us to communicate with APIs in our React projects. Though alternative techniques like Fetch or AJAX may do this, Axios can give extra functionality that goes a long way with React-based apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OBejB4fB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631452245161/nMXlVo3f4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OBejB4fB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631452245161/nMXlVo3f4.png" alt="screely-1631452143004.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Using NPM
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install axios 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Using Yarn
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add axios 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Make a request for a user with a given ID&lt;/span&gt;
&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/user?ID=12345&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// handle success&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// handle error&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// always executed&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#redux"&gt;
  &lt;/a&gt;
  Redux
&lt;/h2&gt;

&lt;p&gt;Redux is a JavaScript library that allows you to manage and centralize your application's state. For creating user interfaces, it is most often used alongside frameworks like React or Angular.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cWtaeOir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631458326292/gAN9Wmq2F.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cWtaeOir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631458326292/gAN9Wmq2F.png" alt="screely-1631458318478.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Using NPM
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install redux 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Using Yarn
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add redux 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter/incremented&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter/decremented&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create a Redux store holding the state of your app.&lt;/span&gt;
&lt;span class="c1"&gt;// Its API is { subscribe, dispatch, getState }.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// You can use subscribe() to update the UI in response to state changes.&lt;/span&gt;

&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

&lt;span class="c1"&gt;// The only way to mutate the internal state is to dispatch an action.&lt;/span&gt;
&lt;span class="c1"&gt;// The actions can be serialized, logged or stored and later replayed.&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter/incremented&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// {value: 1}&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter/incremented&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// {value: 2}&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter/decremented&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// {value: 1}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#formik"&gt;
  &lt;/a&gt;
  Formik
&lt;/h3&gt;

&lt;p&gt;Formik is a small group of React components and hooks for building forms. It helps with the three most annoying parts: Getting values in and out of form state. Validation and error messages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gy4FVMXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631458951252/875_F_zGK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gy4FVMXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631458951252/875_F_zGK.png" alt="screely-1631458935812.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Using NPM
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; npm install formik --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Using Yarn
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add formik
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useFormik&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;formik&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SignupForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// Pass the useFormik() hook initial form values and a submit function that will&lt;/span&gt;
   &lt;span class="c1"&gt;// be called when the form is submitted&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formik&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFormik&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
     &lt;span class="na"&gt;initialValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
     &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formik&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Email Address&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
         &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
         &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
         &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
         &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formik&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
         &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formik&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
       &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#styled-components"&gt;
  &lt;/a&gt;
  Styled Components
&lt;/h2&gt;

&lt;p&gt;Styled Components is a CSS tool that makes your React project run more smoothly. This package enables you to construct reusable, tiny components that are crucial to your application's design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P78Ewce4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631461181785/BsLSRJQmE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P78Ewce4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631461181785/BsLSRJQmE.png" alt="screely-1631461170313.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Using NPM
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save styled-components
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Using Yarn
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add styled-components
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Styled component named Button&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
  background-color: black;
  font-size: 18px;
  color: white;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; Sign up &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#chakra-ui"&gt;
  &lt;/a&gt;
  Chakra UI
&lt;/h2&gt;

&lt;p&gt;Chakra UI is a React component toolkit that seeks to help developers spend less time writing code and more time focusing on providing a great user experience. It provides you with the flexible, accessible, and easy user interface components you'll need to create apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hgMqiy0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631462543418/wfhUCfeAC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hgMqiy0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631462543418/wfhUCfeAC.png" alt="screely-1631462322337.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;-Using NPM&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @chakra-ui/react @emotion/react@^11 @emotion/styled@^11 framer-motion@^4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-Using Yarn&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @chakra-ui/react @emotion/react@^11 @emotion/styled@^11 framer-motion@^4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ButtonGroup&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Button: The button component with support for custom icons, spinners, etc.&lt;/span&gt;
&lt;span class="c1"&gt;// ButtonGroup: Used to group buttons whose actions are related, with an option to flush them together.&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;colorScheme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Button&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Easy smooth scrolling in react</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Sun, 12 Sep 2021 16:07:56 +0000</pubDate>
      <link>https://dev.to/byteslash/easy-smooth-scrolling-in-react-mge</link>
      <guid>https://dev.to/byteslash/easy-smooth-scrolling-in-react-mge</guid>
      <description>&lt;p&gt;In a single-page web application, you will probably have a navbar allowing the user to go to different sections of the page. So today we are going to see how to build that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YiuSFUMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/rSTlY_W4GzAAAAAC/fresh-prince-of-bel-air-carlton.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YiuSFUMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/rSTlY_W4GzAAAAAC/fresh-prince-of-bel-air-carlton.gif" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.loom.com/share/1862dfd99f7249a59913db2c9dd62062"&gt;https://www.loom.com/share/1862dfd99f7249a59913db2c9dd62062&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-new-react-app"&gt;
  &lt;/a&gt;
  Creating a new react app
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app react-scroll-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cleanup"&gt;
  &lt;/a&gt;
  Cleanup
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Delete everything inside &lt;code&gt;App.css&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Delete the content of the App div in &lt;code&gt;App.js&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#starting-the-app"&gt;
  &lt;/a&gt;
  Starting the app
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn start # yarn
npm start # npm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-the-different-sections"&gt;
  &lt;/a&gt;
  Creating the different sections
&lt;/h3&gt;

&lt;p&gt;Inside App.js, I will create 4 divs with different ids like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import "./App.css";

function App() {
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;div id="section1"&amp;gt;
        &amp;lt;h1&amp;gt;Section 1&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div id="section2"&amp;gt;
        &amp;lt;h1&amp;gt;Section 2&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div id="section3"&amp;gt;
        &amp;lt;h1&amp;gt;Section 3&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div id="section4"&amp;gt;
        &amp;lt;h1&amp;gt;Section 4&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see 4 h1 tags like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0FPo3NNq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631443914431/-9neN8AMc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0FPo3NNq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631443914431/-9neN8AMc.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling-the-sections"&gt;
  &lt;/a&gt;
  Styling the sections
&lt;/h3&gt;

&lt;p&gt;I am going to apply some basic stylings to the sections&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.App {
  text-align: center;
}

.App &amp;gt; div {
  width: 100vw;
  min-height: 100vh;
  margin-top: 100px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will center the text and give a height and width of the screen to the sections.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JaOF5d0C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631450141219/hhnkAYToe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JaOF5d0C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631450141219/hhnkAYToe.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-header"&gt;
  &lt;/a&gt;
  Creating the header
&lt;/h3&gt;

&lt;p&gt;Create &lt;code&gt;header.js&lt;/code&gt; and &lt;code&gt;header.css&lt;/code&gt; in the src folder.&lt;/p&gt;

&lt;p&gt;We will create a simple navbar with 4 nav items in it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import "./Header.css";

const Header = () =&amp;gt; {
  return (
    &amp;lt;nav&amp;gt;
      &amp;lt;ul className="header"&amp;gt;
        &amp;lt;li&amp;gt;Section 1&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;Section 2&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;Section 3&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;Section 4&amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/nav&amp;gt;
  );
};

export default Header;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#styling-the-header"&gt;
  &lt;/a&gt;
  Styling the header
&lt;/h3&gt;

&lt;p&gt;I have added some simple stylings so that the header looks better. So add these styles in header.css.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.header {
  display: flex;
  justify-content: space-around;
  width: 100%;
  padding: 20px 0;
  position: fixed;
  background-color: aqua;
  top: 0;
}

li {
  cursor: pointer;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rendering-the-header"&gt;
  &lt;/a&gt;
  Rendering the header
&lt;/h3&gt;

&lt;p&gt;Inside the app div add the header component and import it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import "./App.css";
import Header from "./Header";

function App() {
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;Header /&amp;gt;
      &amp;lt;div id="section1"&amp;gt;
        &amp;lt;h1&amp;gt;Section 1&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div id="section2"&amp;gt;
        &amp;lt;h1&amp;gt;Section 2&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div id="section3"&amp;gt;
        &amp;lt;h1&amp;gt;Section 3&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div id="section4"&amp;gt;
        &amp;lt;h1&amp;gt;Section 4&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-the-smooth-scroll"&gt;
  &lt;/a&gt;
  Creating the smooth scroll
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MQGWdkap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/xRYeFbuVpEcAAAAd/the-moment-everybody-was-waiting-for-dean-schneider.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MQGWdkap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/xRYeFbuVpEcAAAAd/the-moment-everybody-was-waiting-for-dean-schneider.gif" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#installing-the-dependencies"&gt;
  &lt;/a&gt;
  Installing the dependencies
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add react-scroll # yarn
npm i react-scroll # npm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, inside the list items add the Link component and a few peops with it like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   &amp;lt;li&amp;gt;
    &amp;lt;Link
      activeClass="active"
      to="section1"
     spy={true}
     smooth={true}
     offset={-100}
     duration={500}&amp;gt;
         Section 1
     &amp;lt;/Link&amp;gt;
   &amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You need to add the id of the section you want to be able to scroll to in &lt;code&gt;to&lt;/code&gt;. The offset is the distance to be left while scrolled. Feel free to mess around and make some changes to it, to suit you the best.&lt;/p&gt;

&lt;p&gt;I have added the links to all the sections and it looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Link } from "react-scroll";
import "./Header.css";

const Header = () =&amp;gt; {
  return (
    &amp;lt;nav&amp;gt;
      &amp;lt;ul className="header"&amp;gt;
        &amp;lt;li&amp;gt;
          &amp;lt;Link
            activeClass="active"
            to="section1"
            spy={true}
            smooth={true}
            offset={-100}
            duration={500}
          &amp;gt;
            Section 1
          &amp;lt;/Link&amp;gt;
        &amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;
          &amp;lt;Link
            activeClass="active"
            to="section2"
            spy={true}
            smooth={true}
            offset={-100}
            duration={500}
          &amp;gt;
            Section 2
          &amp;lt;/Link&amp;gt;
        &amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;
          &amp;lt;Link
            activeClass="active"
            to="section3"
            spy={true}
            smooth={true}
            offset={-100}
            duration={500}
          &amp;gt;
            Section 3
          &amp;lt;/Link&amp;gt;
        &amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;
          &amp;lt;Link
            activeClass="active"
            to="section4"
            spy={true}
            smooth={true}
            offset={-100}
            duration={500}
          &amp;gt;
            Section 4
          &amp;lt;/Link&amp;gt;
        &amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
    &amp;lt;/nav&amp;gt;
  );
};

export default Header;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope you successfully managed to add smooth scrolling to your react app. If you have any queries then shoot them in the comments below 👇🏻. See ya in the next one ✌🏻&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/avneesh0612/react-scroll"&gt;Github Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/react-scroll"&gt;React scroll&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://avneesh-links.vercel.app/"&gt;All socials&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>animation</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Coisas que ninguém te ensina a fazer mas que todo mundo espera que você saiba: escrever documentação</title>
      <author>Juliana Gaioso</author>
      <pubDate>Sun, 12 Sep 2021 16:07:03 +0000</pubDate>
      <link>https://dev.to/juligaioso/coisas-que-ninguem-te-ensina-a-fazer-mas-que-todo-mundo-espera-que-voce-saiba-escrever-documentacao-55ie</link>
      <guid>https://dev.to/juligaioso/coisas-que-ninguem-te-ensina-a-fazer-mas-que-todo-mundo-espera-que-voce-saiba-escrever-documentacao-55ie</guid>
      <description>&lt;p&gt;Documentar ou não documentar o código não é exatamente um consenso na comunidade. Muita gente diz que um código bem escrito é a própria documentação. O argumento contrário diz que se você é capaz de escrever um código legível, então você é capaz de documentá-lo. Ter uma documentação adequada do projeto (que é diferente de comentários soltos ao longo do código) ajuda tanto no onboarding de novos devs (é mais fácil entender como o projeto funciona quando tudo já está documentado) quanto para refatorar códigos que foram escritos já a algum tempo, evitando que ele se torne legado.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#documentation-as-code"&gt;
  &lt;/a&gt;
  Documentation As Code
&lt;/h2&gt;

&lt;p&gt;DaC é uma forma de automatizar a escrita da documentação com as mesmas ferramentas do código que está sendo escrito. Desta forma, a documentação vai sendo escrita junto do código e ao mesmo tempo do código, o que torna a documentação um organismo vivo e continuamente atualizado. Uma das formas de se criar e manter esta documentação é justamente a colocando nos arquivos de código na forma de um comentário especiais (com marcações próprias) que podem ser extraídos por um framework especifico que gera a documentação de uma forma organizada (em HTML, PDF, Markdown e etc).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#framework"&gt;
  &lt;/a&gt;
  Framework
&lt;/h2&gt;

&lt;p&gt;Eu pessoalmente recomendo o &lt;a href="%5Bhttps://jsdoc.app/%5D(https://jsdoc.app/)"&gt;JSDoc&lt;/a&gt; para projetos frontend pela facilidade de usá-lo já com o javascript. Outras linguagens possuem seus próprios frameworks de documentação, como por exemplo o &lt;a href="https://www.phpdoc.org/"&gt;PHPDoc&lt;/a&gt;, o &lt;a href="https://swagger.io/"&gt;Swagger&lt;/a&gt; do Java e o &lt;a href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt;, do Python. &lt;/p&gt;

&lt;p&gt;A documentação geralmente é escrita na forma de um comentário no próprio código com uma marcação e depois é exportada automaticamente para um documento, que pode ser lido pelo time de desenvolvimento, de produto e até mesmo por usuários (em alguns casos).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b6Y0JEzD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cm63wrqak2j4c4r3kekq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b6Y0JEzD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cm63wrqak2j4c4r3kekq.png" alt="ex1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-que-documentar"&gt;
  &lt;/a&gt;
  O que documentar?
&lt;/h2&gt;

&lt;p&gt;Uma forma simples é descrever as partes principais e explicar a funcionalidade das partes menores (ou auxiliares). Fique atento ao paradigma que está sendo usado. Se você usa orientação a objeto, a parte principal será uma classe, e a parte auxiliar será um método. Em programação funcional, a parte principal e as auxiliares serão funções, então descreva a main e explique a utilidade das funções utilizadas na main.&lt;/p&gt;

&lt;p&gt;Outro ponto é que a documentação deve falar do negócio, e não do código. Um código bom e limpo é auto-explicável. A função da documentação é explicar a regra de negócio por trás dele e não o código em si.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#como-escrever"&gt;
  &lt;/a&gt;
  Como escrever?
&lt;/h2&gt;

&lt;p&gt;Eu pessoalmente acho que cada trecho de documentação deve caber em um tweet. A idéia não é escrever um artigo para cada parte, apenas ajudar a explicar o que acontece ali. No entanto, aqui é interessante procurar os padrões da comunidade da linguagem que você usa. Em Python, o padrão é ser mais extenso e, em alguns casos, até embutir testes nas docstrings.&lt;br&gt;
Tenha sempre em vista &lt;em&gt;quem&lt;/em&gt; vai ler a documentação. Se na sua equipe as pessoas de produto e operações também terão acesso ao documento, não é tão legal usar linguagem técnica demais.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KsFhWBBI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4av2vn848vfw5hslflii.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KsFhWBBI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4av2vn848vfw5hslflii.png" alt="ex4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-que-n%C3%A3o-documentar"&gt;
  &lt;/a&gt;
  O que não documentar?
&lt;/h2&gt;

&lt;p&gt;Algumas coisas devem ser explicadas a nível de código, e não deveriam ir para a documentação do produto por referenciarem apenas a utilização de um código que não é auto explicável (como por exemplo uma RegExp). Quaisquer comentário que só faça sentido junto ao código não deve ir para a documentação. Todos, de forma geral, são uma prática ruim e não devem nunca ir para a documentação (ou produção). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YzXlXQ4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgs4fyn4r4oiropvo2d4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YzXlXQ4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgs4fyn4r4oiropvo2d4.png" alt="ex3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seguindo-o-mapa-da-mina"&gt;
  &lt;/a&gt;
  Seguindo o mapa da mina
&lt;/h2&gt;

&lt;p&gt;Caso seu time esteja adotando a escrita de documentação, veja esse texto como um mapa da mina, que vai auxiliar todos a chegar mais rápido nas especificações do software. Escreva com atenção, mantenha o documento sempre atualizado e o mais  importante: leia sempre, isso vai te ajudar bastante (especialmente em refatorações).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Para escrever este texto eu tive a revisão do &lt;a href="https://twitter.com/gwidion"&gt;João Bueno&lt;/a&gt; e do &lt;a href="https://twitter.com/caiodelgadonew"&gt;Caio Delgado&lt;/a&gt; e colaboração do &lt;a href="https://twitter.com/gwidion"&gt;João Bueno&lt;/a&gt;. Muito obrigada pela ajuda!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>Weekly Digest 36/2021</title>
      <author>Marco Biedermann</author>
      <pubDate>Sun, 12 Sep 2021 15:48:15 +0000</pubDate>
      <link>https://dev.to/marcobiedermann/weekly-digest-36-2021-2c27</link>
      <guid>https://dev.to/marcobiedermann/weekly-digest-36-2021-2c27</guid>
      <description>&lt;p&gt;Welcome to my Weekly Digest #36 of this year.&lt;/p&gt;

&lt;p&gt;This weekly digest contains a lot of interesting and inspiring articles, videos, tweets, podcasts, and designs I consumed during this week.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#interesting-articles-to-read"&gt;
  &lt;/a&gt;
  Interesting articles to read
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#eyedropper-api-dropped"&gt;
  &lt;/a&gt;
  EyeDropper API Dropped
&lt;/h3&gt;

&lt;p&gt;Chrome has shipped the EyeDropper API in v95.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/eyedropper-api-dropped/"&gt;EyeDropper API Dropped&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-an-instagramlike-infinite-scrolling-feed-with-react-query"&gt;
  &lt;/a&gt;
  Build an Instagram-like infinite scrolling feed with React Query
&lt;/h3&gt;

&lt;p&gt;Learn how to build an Instagram-like infinite scrolling feed in a React application with React Query’s &lt;code&gt;useInifiniteQuery()&lt;/code&gt; Hook.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.logrocket.com/build-instagram-infinite-scrolling-feed-react-query/"&gt;Build an Instagram-like infinite scrolling feed with React Query - LogRocket Blog&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#an-interactive-guide-to-keyframe-animations"&gt;
  &lt;/a&gt;
  An Interactive Guide to Keyframe Animations
&lt;/h3&gt;

&lt;p&gt;CSS keyframe animations are incredibly flexible and powerful, but they’re also a bit weird. In this deep-dive tutorial, we'll learn how CSS keyframes work from the ground up, and see how to use them to build high-quality animations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.joshwcomeau.com/animation/keyframe-animations/"&gt;An Interactive Guide to Keyframe Animations&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#some-great-videos-i-watched-this-week"&gt;
  &lt;/a&gt;
  Some great videos I watched this week
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#13-advanced-git-techniques-and-shortcuts"&gt;
  &lt;/a&gt;
  13 Advanced Git Techniques and Shortcuts
&lt;/h3&gt;

&lt;p&gt;Productive programmers tend to be really good at Git. Take a look at 13 advanced git tips and tricks to supercharge your development workflow.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ecK3EnyGD8o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/fireship_dev"&gt;Fireship&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-fastify"&gt;
  &lt;/a&gt;
  What Is Fastify?
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/k1FSybMulVQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/leveluptuts"&gt;LevelUpTuts&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thinking-on-ways-to-solve-split-buttons"&gt;
  &lt;/a&gt;
  Thinking on ways to solve split buttons
&lt;/h3&gt;

&lt;p&gt;In today's GUI challenge I share my thinking on a way to solve split buttons. A staple component for condensed interfaces, it allows a single button to feature secondary actions. Lots of great tips about theming, shadows, color, layouts, interaction UX, and more.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Qcpru-fIgwk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/argyleink"&gt;Adam Argyle&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#machine-learning-explained-in-100-seconds"&gt;
  &lt;/a&gt;
  Machine Learning Explained in 100 Seconds
&lt;/h3&gt;

&lt;p&gt;Machine Learning is the process of teaching a computer how to perform a task without explicitly programming it. The process feeds algorithms with large amounts of data to gradually improve predictive performance.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PeMlggyqz0Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/fireship_dev"&gt;Fireship&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meet-an-extension-shorten-urls"&gt;
  &lt;/a&gt;
  Meet an Extension: Shorten URLs
&lt;/h3&gt;

&lt;p&gt;Wish your app could automatically shorten those large, ungainly URLs into something more… uh… gainly? Well, with the Shorten URLs extension, we can take any URL you store in a Firestore collection, send it over to &lt;a href="http://bit.ly/"&gt;bit.ly&lt;/a&gt;, and convert those URLs into something a lot shorter and a lot easier to share with your friends!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RbEHaiJYueA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/Firebase"&gt;Firebase&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-modules-in-css-modules"&gt;
  &lt;/a&gt;
  CSS Modules in CSS Modules
&lt;/h3&gt;

&lt;p&gt;There is a newly-dropped Chromium feature to &lt;code&gt;import&lt;/code&gt; stylesheets, which turns them into a constructible Stylesheet. Dave shows Chris how it works, the clutch feature being that you have a real JavaScript object of the stylesheet to potentially manipulate before using.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/oqIKbe5WLKA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/chriscoyier"&gt;Chris Coyier&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useful-github-repositories"&gt;
  &lt;/a&gt;
  Useful GitHub repositories
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#women-world-wide-dev"&gt;
  &lt;/a&gt;
  Women World Wide Dev
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://womenworldwide.dev/"&gt;WomenWorldWide.dev&lt;/a&gt; is a map of coding and tech groups around the world for all who identify as women.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/prisma"&gt;
        prisma
      &lt;/a&gt; / &lt;a href="https://github.com/prisma/women-world-wide"&gt;
        women-world-wide
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Women World Wide Dev 🗺👩🏾‍💻👩🏿‍💻👩🏻‍💻👩🏽‍💻👩🏼‍💻&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://WomenWorldWide.dev" rel="nofollow"&gt;WomenWorldWide.dev&lt;/a&gt; is a map of coding and tech groups around the world for all who identify as women.&lt;/p&gt;
&lt;p&gt;This map represents just a tiny sliver of the great organizations that share this focus.&lt;/p&gt;
&lt;p&gt;If you know of a local group that should be on the map, please submit a pull request, so that we can be sure to add it!&lt;/p&gt;
&lt;h2&gt;
Running the repo locally&lt;/h2&gt;
&lt;p&gt;If you'd like to submit a pull request, you can run the project locally:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;git clone git@github.com:prisma/women-world-wide.git
cd women-world-wide
yarn
yarn develop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;
Contributions 🤝
&lt;/h2&gt;
&lt;p&gt;We are actively seeking to add additional organizations for the map. To add your group, please add each of the organization's locations as a separate JSON file in the &lt;a href="https://github.com/prisma/women-world-wide./src/data/orgs"&gt;&lt;code&gt;src/data/orgs&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt;
&lt;p&gt;You can see an example below (using the &lt;em&gt;Women Who Code Atlanta&lt;/em&gt; organization):&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;
&lt;pre&gt;&lt;code&gt;{
  "image": "https://pbs.twimg.com/profile_images/1016008941757718528/tCnG03WW_400x400.jpg"
  "name": "Women Who Code Atlanta",
  "country": "usa",
  "city": "atlanta",&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/prisma/women-world-wide"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#microbundle"&gt;
  &lt;/a&gt;
  Microbundle
&lt;/h3&gt;

&lt;p&gt;The zero-configuration bundler for tiny modules, powered by Rollup.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/developit"&gt;
        developit
      &lt;/a&gt; / &lt;a href="https://github.com/developit/microbundle"&gt;
        microbundle
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      📦 Zero-configuration bundler for tiny modules.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/360c05f69fddb854612ef21c3114d347deb00c730672320d038b087ba36eba28/68747470733a2f2f692e696d6775722e636f6d2f4c4d45675a4d682e676966"&gt;&lt;img src="https://camo.githubusercontent.com/360c05f69fddb854612ef21c3114d347deb00c730672320d038b087ba36eba28/68747470733a2f2f692e696d6775722e636f6d2f4c4d45675a4d682e676966" width="597" alt="microbundle"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;
    Microbundle
    &lt;a href="https://www.npmjs.org/package/microbundle" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a42366e7eaf54ae129273fefa7b341aaf59f725b66414b3c0d911a96df9d1eb1/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6d6963726f62756e646c652e7376673f7374796c653d666c6174" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://travis-ci.org/developit/microbundle" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/13cd61fe5fcd0826a964acde0280222494a49db09d6d1d03360efb7a10202bb9/68747470733a2f2f7472617669732d63692e6f72672f646576656c6f7069742f6d6963726f62756e646c652e7376673f6272616e63683d6d6173746572" alt="travis"&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;The &lt;strong&gt;zero-configuration&lt;/strong&gt; bundler for &lt;em&gt;tiny modules&lt;/em&gt;, powered by &lt;a href="https://github.com/rollup/rollup"&gt;Rollup&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;
  &lt;strong&gt;Guide → &lt;/strong&gt;
  &lt;a href="https://github.com/developit/microbundle#setup"&gt;Setup&lt;/a&gt; ✯
  &lt;a href="https://github.com/developit/microbundle#formats"&gt;Formats&lt;/a&gt; ✯
  &lt;a href="https://github.com/developit/microbundle#modern"&gt;Modern Mode&lt;/a&gt; ✯
  &lt;a href="https://github.com/developit/microbundle#usage"&gt;Usage &amp;amp; Configuration&lt;/a&gt; ✯
  &lt;a href="https://github.com/developit/microbundle#options"&gt;All Options&lt;/a&gt;
&lt;/p&gt;




&lt;h2&gt;
✨ Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;One dependency&lt;/strong&gt; to bundle your library using only a &lt;code&gt;package.json&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Support for ESnext &amp;amp; async/await &lt;em&gt;(via &lt;a href="https://babeljs.io/" rel="nofollow"&gt;Babel&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/rpetrich/babel-plugin-transform-async-to-promises"&gt;async-to-promises&lt;/a&gt;)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Produces tiny, optimized code for all inputs&lt;/li&gt;
&lt;li&gt;Supports multiple entry modules &lt;em&gt;(&lt;code&gt;cli.js&lt;/code&gt; + &lt;code&gt;index.js&lt;/code&gt;, etc)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Creates multiple output formats for each entry &lt;em&gt;(CJS, UMD &amp;amp; ESM)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;0 configuration TypeScript support&lt;/li&gt;
&lt;li&gt;Built-in Terser compression &amp;amp; gzipped bundle size tracking&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
🔧 Installation &amp;amp; Setup
&lt;/h2&gt;

&lt;p&gt;1️⃣ &lt;strong&gt;Install&lt;/strong&gt; by running: &lt;code&gt;npm i -D microbundle&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2️⃣ &lt;strong&gt;Set up&lt;/strong&gt; your &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-s"&gt;"name"&lt;/span&gt;: &lt;span class="pl-s"&gt;"foo"&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;                     &lt;span class="pl-c"&gt;// your package name&lt;/span&gt;
  &lt;span class="pl-s"&gt;"type"&lt;/span&gt;: &lt;span class="pl-s"&gt;"module"&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-s"&gt;"source"&lt;/span&gt;: &lt;span class="pl-s"&gt;"src/foo.js"&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;            &lt;span class="pl-c"&gt;// your source code&lt;/span&gt;
  &lt;span class="pl-s"&gt;"exports"&lt;/span&gt;: &lt;span class="pl-s"&gt;"./dist/foo.modern.js"&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-c"&gt;// where to generate the modern bundle (see below)&lt;/span&gt;
  &lt;span class="pl-s"&gt;"main"&lt;/span&gt;: &lt;span class="pl-s"&gt;"./dist/foo.cjs"&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;          &lt;span class="pl-c"&gt;// where to generate the&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/developit/microbundle"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tsdx"&gt;
  &lt;/a&gt;
  TSDX
&lt;/h3&gt;

&lt;p&gt;Build production-ready TypeScript packages. The world's leading companies use TSDX to build and test TypeScript packages&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/formium"&gt;
        formium
      &lt;/a&gt; / &lt;a href="https://github.com/formium/tsdx"&gt;
        tsdx
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Zero-config CLI for TypeScript package development
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/4060187/56918426-fc747600-6a8b-11e9-806d-2da0b49e89e4.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CJ3R0Luq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/4060187/56918426-fc747600-6a8b-11e9-806d-2da0b49e89e4.png" alt="tsdx"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://npm.im/tsdx" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ea2ffe651aa030e6493a1dace012af87c3cb18a4e224780a805db136f5052fa5/68747470733a2f2f62616467656e2e6e6f772e73682f62616467652f73706565642f626c617a696e672532302546302539462539342541352f677265656e" alt="Blazing Fast"&gt;&lt;/a&gt; &lt;a href="https://npm.im/tsdx" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ea2ffe651aa030e6493a1dace012af87c3cb18a4e224780a805db136f5052fa5/68747470733a2f2f62616467656e2e6e6f772e73682f62616467652f73706565642f626c617a696e672532302546302539462539342541352f677265656e" alt="Blazing Fast"&gt;&lt;/a&gt; &lt;a href="https://npm.im/tsdx" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ea2ffe651aa030e6493a1dace012af87c3cb18a4e224780a805db136f5052fa5/68747470733a2f2f62616467656e2e6e6f772e73682f62616467652f73706565642f626c617a696e672532302546302539462539342541352f677265656e" alt="Blazing Fast"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/pJSg287" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3374b738dd74a268efe5d4d8f48b39b7ed4c762cff331acf52d37ac81aa5335d/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3736393235363832373030373133393931322e7376673f7374796c653d666c61742d737175617265" alt="Discord"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Despite all the recent hype, setting up a new TypeScript (x React) library can be tough. Between &lt;a href="https://github.com/rollup/rollup"&gt;Rollup&lt;/a&gt;, &lt;a href="https://github.com/facebook/jest"&gt;Jest&lt;/a&gt;, &lt;code&gt;tsconfig&lt;/code&gt;, &lt;a href="https://yarnpkg.com/en/docs/selective-version-resolutions" rel="nofollow"&gt;Yarn resolutions&lt;/a&gt;, ESLint, and getting VSCode to play nicely....there is just a whole lot of stuff to do (and things to screw up). TSDX is a zero-config CLI that helps you develop, test, and publish modern TypeScript packages with ease--so you can focus on your awesome new library and not waste another afternoon on the configuration.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/formium/tsdx#quick-start"&gt;Quick Start&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#npm-start-or-yarn-start"&gt;&lt;code&gt;npm start&lt;/code&gt; or &lt;code&gt;yarn start&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#npm-run-build-or-yarn-build"&gt;&lt;code&gt;npm run build&lt;/code&gt; or &lt;code&gt;yarn build&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#npm-test-or-yarn-test"&gt;&lt;code&gt;npm test&lt;/code&gt; or &lt;code&gt;yarn test&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#npm-run-lint-or-yarn-lint"&gt;&lt;code&gt;npm run lint&lt;/code&gt; or &lt;code&gt;yarn lint&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#prepare-script"&gt;&lt;code&gt;prepare&lt;/code&gt; script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/formium/tsdx#optimizations"&gt;Optimizations&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/formium/tsdx#development-only-expressions--treeshaking"&gt;Development-only Expressions + Treeshaking&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#rollup-treeshaking"&gt;Rollup Treeshaking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/formium/tsdx#advanced-babel-plugin-dev-expressions"&gt;Advanced &lt;code&gt;babel-plugin-dev-expressions&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#__dev__"&gt;&lt;code&gt;__DEV__&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#invariant"&gt;&lt;code&gt;invariant&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#warning"&gt;&lt;code&gt;warning&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#using-lodash"&gt;Using lodash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#error-extraction"&gt;Error extraction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/formium/tsdx#customization"&gt;Customization&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/formium/tsdx#rollup"&gt;Rollup&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#example-adding-postcss"&gt;Example: Adding Postcss&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#babel"&gt;Babel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#jest"&gt;Jest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#eslint"&gt;ESLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#patch-package"&gt;&lt;code&gt;patch-package&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/formium/tsdx#inspiration"&gt;Inspiration&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#comparison-with-microbundle"&gt;Comparison with Microbundle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/formium/tsdx#api-reference"&gt;API Reference&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#tsdx-watch"&gt;&lt;code&gt;tsdx watch&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#tsdx-build"&gt;&lt;code&gt;tsdx build&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#tsdx-test"&gt;&lt;code&gt;tsdx test&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#tsdx-lint"&gt;&lt;code&gt;tsdx lint&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#author"&gt;Author&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/formium/tsdx#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/formium/tsdx#contributors-"&gt;Contributors &lt;/a&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/formium/tsdx"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#dribbble-shots"&gt;
  &lt;/a&gt;
  dribbble shots
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#illustration-and-hero-section-concept"&gt;
  &lt;/a&gt;
  Illustration and Hero section concept
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--re0N0RTV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1549225/screenshots/16412114/media/f4516ed9826e093bcf460adf85affe85.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--re0N0RTV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1549225/screenshots/16412114/media/f4516ed9826e093bcf460adf85affe85.png" alt="https://cdn.dribbble.com/users/1549225/screenshots/16412114/media/f4516ed9826e093bcf460adf85affe85.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16412114-Illustration-and-Hero-section-concept"&gt;prajil&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loja-cups"&gt;
  &lt;/a&gt;
  loja CUPS.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KweVEdBI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/3306546/screenshots/16418381/media/bc34d1e6dd0bb012ea09c807020b6d0f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KweVEdBI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/3306546/screenshots/16418381/media/bc34d1e6dd0bb012ea09c807020b6d0f.png" alt="https://cdn.dribbble.com/users/3306546/screenshots/16418381/media/bc34d1e6dd0bb012ea09c807020b6d0f.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16418381-loja-CUPS"&gt;Pablo Galvão&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#social-media-app"&gt;
  &lt;/a&gt;
  Social Media App
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5vpNQUR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/7514969/screenshots/16138528/media/82d409aaed80a267b297fe80f5cff509.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5vpNQUR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/7514969/screenshots/16138528/media/82d409aaed80a267b297fe80f5cff509.png" alt="https://cdn.dribbble.com/users/7514969/screenshots/16138528/media/82d409aaed80a267b297fe80f5cff509.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16138528-Social-Media-App-Mobile-Design"&gt;Julius Branding&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ecommerce-mobile-app-design"&gt;
  &lt;/a&gt;
  eCommerce Mobile App Design
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x6yI5SD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2399102/screenshots/16412950/media/a5733cfd4dfb9cb09ba3935874cfd62d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x6yI5SD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2399102/screenshots/16412950/media/a5733cfd4dfb9cb09ba3935874cfd62d.jpg" alt="https://cdn.dribbble.com/users/2399102/screenshots/16412950/media/a5733cfd4dfb9cb09ba3935874cfd62d.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16412950-eCommerce-Mobile-App-Design"&gt;CMARIX TechnoLabs&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#tweets"&gt;
  &lt;/a&gt;
  Tweets
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--66CYnaCb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1433687120204337152/w4S8YTx__normal.jpg" alt="Miriam (But Terrible) profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Miriam (But Terrible)
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @terriblemia
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      ✨ You can now play with Cascade Layers in two browsers (behind flags):&lt;br&gt;&lt;br&gt;- Firefox Nightly » about:config » layout.css.cascade-layers.enabled&lt;br&gt;- Chrome Canary » runtime flag » --enable-blink-features=CSSCascadeLayers&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/q9KtcKAzxr"&gt;codepen.io/miriamsuzanne/…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:22 PM - 09 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1436062501834264576" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1436062501834264576" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1436062501834264576" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--w3xb4YxQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1316430904806440960/i47iiwIk_normal.jpg" alt="Chrome Developers profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Chrome Developers
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @chromiumdev
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      📢 Full control with the VirtualKeyboard API: &lt;br&gt;&lt;br&gt;👉 &lt;a href="https://t.co/FbMBEHm3UR"&gt;web.dev/virtualkeyboar…&lt;/a&gt;&lt;br&gt;&lt;br&gt;Check out &lt;a href="https://twitter.com/tomayac"&gt;@tomayac&lt;/a&gt;'s latest article to learn how to manage yourself how the browser deals with content occlusion when a touch device's virtual keyboard ⌨️ appears.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:15 PM - 10 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1436377742040354825" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1436377742040354825" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1436377742040354825" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--plOIM9V9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_ApQ0vWQAUfiKW.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--g-xWgXeY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1424381429320929285/q4_3dpwp_normal.png" alt="Freya Holmér profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Freya Holmér
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @freyaholmer
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      btw these large scary math symbols are just for-loops 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:21 PM - 11 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1436696408506212353" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1436696408506212353" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1436696408506212353" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;h2&gt;
  &lt;a href="#picked-pens"&gt;
  &lt;/a&gt;
  Picked Pens
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#pure-css-logarithmic-spiral"&gt;
  &lt;/a&gt;
  Pure CSS logarithmic spiral
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/thebabydino/embed/powNvqB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/anatudor"&gt;Ana Tudor&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#svg-debit-card-animation-4"&gt;
  &lt;/a&gt;
  SVG Debit Card Animation 4
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/creativeocean/embed/dyRWXPz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://codepen.io/creativeocean"&gt;Tom Miller&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#podcasts-worth-listening"&gt;
  &lt;/a&gt;
  Podcasts worth listening
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#syntax-typescripts-strict-explained"&gt;
  &lt;/a&gt;
  Syntax – TypeScripts Strict Explained
&lt;/h3&gt;

&lt;p&gt;In this Hasty Treat, Scott and Wes talk about the Typescript &lt;code&gt;strict&lt;/code&gt; flag — what it does and why you might use it.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/39vBvvPrhOsgoMxLnlMEYr"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-sass-%C3%97-houdini-%C3%97-no-js-%C3%97-solid-project-%C3%97-first-dev-job-tips-%C3%97-bartering-%C3%97-drm-%C3%97-dev-laptops-%C3%97-databases-%C3%97-frontity"&gt;
  &lt;/a&gt;
  Syntax – Sass × Houdini × No JS? × Solid Project × First Dev Job Tips × Bartering × DRM × Dev Laptops × Databases × Frontity
&lt;/h3&gt;

&lt;p&gt;It's another Potluck! In this episode, Scott and Wes answer your questions about Sass, Houdini, JS requirements, tips for your first dev job, dev laptops, databases, Frontity, and more!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/6WMzwrutlTjeC9VKuZbhLX"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Thank you for reading, talk to you next week, and stay safe! 👋&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Rapid REST API prototyping using a dump server</title>
      <author>Alexander</author>
      <pubDate>Sun, 12 Sep 2021 15:48:11 +0000</pubDate>
      <link>https://dev.to/xnbox/rapid-rest-api-prototyping-using-a-dump-server-4i3f</link>
      <guid>https://dev.to/xnbox/rapid-rest-api-prototyping-using-a-dump-server-4i3f</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;If you need to start working on the frontend, but the backend is not ready yet, then you need a dump server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;What is a dump server?&lt;/h2&gt;

&lt;p&gt;
A dump server is a server that responds to client requests with data that it retrieves from a standard HTTP dump.
&lt;/p&gt;

&lt;p&gt;Just like a static server, the dump server does not execute the code, but only gives the ready data to the client.&lt;br&gt;
The static server responds with the contents of the files, and the dump server responds with dumps.&lt;br&gt;
The dump includes the response body, status code, and headers.&lt;br&gt;
The dump server allows you to serve &lt;strong&gt;any kind of request&lt;/strong&gt;, not just &lt;strong&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/strong&gt; method, like a static server.&lt;br&gt;
With a dump server, you can simulate any API without writing  code.&lt;/p&gt;

&lt;h2&gt;How the dump server works?&lt;/h2&gt;

&lt;ol&gt;
    &lt;li&gt;Got client request&lt;/li&gt;
    &lt;li&gt;Search dump entries (request-response pairs) for appropriate entry by matching all specified request parts:
    method, URI, headers, and body&lt;/li&gt;
    &lt;li&gt;If entry is found, the server generates a corresponded response and sends it to the client&lt;/li&gt;
    &lt;li&gt;If entry is not found, the server search dump entries for response with status &lt;code&gt;400&lt;/code&gt; (Bad request).&lt;/li&gt;
    &lt;li&gt;If entry is found, the server send entry to the client
    &lt;/li&gt;
&lt;li&gt;If entry is not found, the server sends status &lt;code&gt;400&lt;/code&gt; with no body.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's all.&lt;/p&gt;

&lt;h2&gt;What are people using it for?&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;Creating the product POC or demo before even starting out with the backend&lt;/li&gt;
    &lt;li&gt;REST, GraphQL, and other APIs prototyping and testing&lt;/li&gt;
    &lt;li&gt;Hiding critical enterprise infrastructure behind a simple static facade&lt;/li&gt;
    &lt;li&gt;Hacking and fine-tuning HTTP communications on both server and client sides&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Get started&lt;/h2&gt;

&lt;p&gt;Meet the DeepfakeHTTP dump server:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/xnbox"&gt;
        xnbox
      &lt;/a&gt; / &lt;a href="https://github.com/xnbox/DeepfakeHTTP"&gt;
        DeepfakeHTTP
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🟪 DeepfakeHTTP is a web server that uses HTTP dumps as a source for responses.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;ol&gt;
    &lt;li&gt;Download the &lt;a href="https://github.com/xnbox/DeepfakeHTTP/releases/latest"&gt;latest release&lt;/a&gt; of &lt;code&gt;df.jar&lt;/code&gt;
&lt;/li&gt;
    &lt;li&gt;Copy-paste the content of the dump example to the file &lt;code&gt;dump.txt&lt;/code&gt;:

&lt;pre&gt;
GET /api/customer/123 HTTP/1.1

HTTP/1.1 200 OK
Content-Type: application/json

{
    "id": 123,
    "fname": "John",
    "lname": "Doe",
    "email": ["john@example.com", "johndoe@example.com"]
}
&lt;/pre&gt;

&lt;/li&gt;
    &lt;li&gt;Start the server from command line:
&lt;pre&gt;
java -jar df.jar dump.txt
&lt;/pre&gt;
&lt;/li&gt;
    &lt;li&gt;Use a browser to check whether the server is running: &lt;a href="http://localhost:8080/api/customer/123"&gt;http://localhost:8080/api/customer/123&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hySG2F-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/xnbox/DeepfakeHTTP/main/get-started.png"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more examples see: &lt;a href="https://github.com/xnbox/DeepfakeHTTP#appendix-cdump-examples"&gt;dump examples&lt;/a&gt;.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;Usage&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java -jar df.jar [OPTIONS] [FLAGS] [COMMANDS] &amp;lt;file&amp;gt;...

OPTIONS:                                                           
    --port &amp;lt;number&amp;gt;        HTTP TCP port number, default: 8080
    --port-ssl &amp;lt;number&amp;gt;    HTTPS TCP port number, default: 8443
    --openapi-path &amp;lt;path&amp;gt;  serve OpenAPI client at specified context path
    --openapi-title &amp;lt;text&amp;gt; provide custom OpenAPI spec title
    --collect &amp;lt;file&amp;gt;       collect live request/response to file
    --format &amp;lt;json|yaml&amp;gt;   output format for --print-* commands, default: json

FLAGS:
    --no-log               disable request/response console logging
    --no-etag              disable ETag optimization
    --no-watch             disable watch files for changes
    --no-pretty            disable prettyprint for --print-* commands
    --redirect             redirect HTTP to HTTPS

COMMANDS:
    --help                 print help message
    --print-info           print dump files statistics to stdout as json/yaml
    --print-requests       print dump requests to stdout as json/yaml
    --print-openapi        print OpenAPI specification to stdout as json/yaml

️ARGS:
    &amp;lt;file&amp;gt;...               dump text file(s) and/or OpenAPI json/yaml file(s)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;Usage Exampes&lt;/h2&gt;

&lt;p&gt;Start server on dump file:&lt;/p&gt;

&lt;pre&gt;
java -jar df.jar dump.txt
&lt;/pre&gt;

&lt;p&gt;Start server on OpenAPI file:&lt;/p&gt;

&lt;pre&gt;
java -jar df.jar openapi.json
&lt;/pre&gt;

&lt;p&gt;Start server with built-in OpenAPI client:&lt;/p&gt;

&lt;pre&gt;
java -jar df.jar --openapi-path /api dump.txt
&lt;/pre&gt;

&lt;p&gt;Start server on few dump files:&lt;/p&gt;

&lt;pre&gt;
java -jar df.jar dump1.txt dump2.txt dump3.txt
&lt;/pre&gt;

&lt;p&gt;Start server on mix of dump and OpenAPI files:&lt;/p&gt;

&lt;pre&gt;
java -jar df.jar dump1.txt openapi2.json dump3.txt openapi4.yaml
&lt;/pre&gt;

&lt;p&gt;Provide custom OpenAPI spec title:&lt;/p&gt;

&lt;pre&gt;
java -jar df.jar --openapi-path /api --openapi-title 'My Killer REST API v18.2.1' dump.txt
&lt;/pre&gt;

&lt;h2&gt;Features&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;No dependencies&lt;/li&gt;
    &lt;li&gt;No installation&lt;/li&gt;
    &lt;li&gt;No configuration files&lt;/li&gt;
    &lt;li&gt;Single-file executable&lt;/li&gt;
    &lt;li&gt;Built-in OpenAPI client&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Supports:&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;Asynchronous requests and responses.&lt;/li&gt;
    &lt;li&gt;HTTP message formats (RFC 7230)&lt;/li&gt;
    &lt;li&gt;Unlimited number of request/response pairs in the dump&lt;/li&gt;
    &lt;li&gt;Scriptable response body&lt;/li&gt;
    &lt;li&gt;
&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; etc.&lt;/li&gt;
    &lt;li&gt;Multi-line and multi-value headers (RFC 7230).&lt;/li&gt;
    &lt;li&gt;OpenAPI-styled templates in paths.&lt;/li&gt;
    &lt;li&gt;Wildcards ( &lt;code&gt; *&lt;/code&gt; and &lt;code&gt; ?&lt;/code&gt; with escape &lt;code&gt; /&lt;/code&gt; ) in query string and header values.&lt;/li&gt;
    &lt;li&gt;Templates in response body&lt;/li&gt;
    &lt;li&gt;Response body fetching from external sources like URLs, local files, and data URI&lt;/li&gt;
    &lt;li&gt;Per entry user-defined request and response delays&lt;/li&gt;
    &lt;li&gt;Comments &lt;code&gt; #&lt;/code&gt; in dumps&lt;/li&gt;
    &lt;li&gt;Live request/response collection&lt;/li&gt;
    &lt;li&gt;Optional watching dump files for changes&lt;/li&gt;
    &lt;li&gt;Optional ETag optimization&lt;/li&gt;
    &lt;li&gt;Optional live request/response logging&lt;/li&gt;
    &lt;li&gt;TLS(SSL) connections and HTTP to HTTPS redirect&lt;/li&gt;
    &lt;li&gt;Customizable OpenAPI client path&lt;/li&gt;
    &lt;li&gt;Latest OpenAPI specification (v3.0.3) in JSON and YAML format&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;License&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;DeepfakeHTTP&lt;/strong&gt; is released under the &lt;a href="https://github.com/xnbox/DeepfakeHTTP/blob/main/LICENSE"&gt;MIT&lt;/a&gt; license.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/xnbox"&gt;
        xnbox
      &lt;/a&gt; / &lt;a href="https://github.com/xnbox/DeepfakeHTTP"&gt;
        DeepfakeHTTP
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🟪 DeepfakeHTTP is a web server that uses HTTP dumps as a source for responses.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
DeepfakeHTTP&lt;br&gt;
Your 100% static dynamic backend&lt;/h1&gt;
&lt;p&gt;&lt;a title="License MIT" href="https://github.com/xnbox/DeepfakeHTTP/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/fa6e10811485d7022ae8c55770e22511f740aad92b141370db14c56e9fc44545/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75653f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
&lt;a title="Release 1.0.8" href="https://github.com/xnbox/DeepfakeHTTP/releases"&gt;&lt;img src="https://camo.githubusercontent.com/4ddae3916d80a7439e60ac8ddef8faf4d3f587ba6fdfb59606868a8921cf4e3e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f72656c656173652d312e302e382d3444433731463f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;
&lt;a title="Powered by Tommy" href="https://github.com/xnbox/tommy"&gt;&lt;img src="https://camo.githubusercontent.com/fc13f7d0cb921118ea652b34f3df032b6438251a6f450532254fbd63b2651a16/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706f77657265645f62792d546f6d6d792d626c756576696f6c65743f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="table-wrapper-paragraph"&gt;&lt;table width="100%"&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/xnbox/DeepfakeHTTP/main/image.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yLcXK826--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/xnbox/DeepfakeHTTP/main/image.png" height="170rem"&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;What are people using it for?&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;Creating the product POC or demo before even starting out with the backend&lt;/li&gt;
    &lt;li&gt;REST, GraphQL, and other APIs prototyping and testing&lt;/li&gt;
    &lt;li&gt;Hiding critical enterprise infrastructure behind a simple static facade&lt;/li&gt;
    &lt;li&gt;Hacking and fine-tuning HTTP communications on both server and client sides&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
Get started&lt;/h2&gt;

&lt;ol&gt;
    &lt;li&gt;Download the &lt;a href="https://github.com/xnbox/DeepfakeHTTP/releases/latest"&gt;latest release&lt;/a&gt; of &lt;code&gt;df.jar&lt;/code&gt;
&lt;/li&gt;
    &lt;li&gt;Copy-paste the content of the dump example to the file &lt;code&gt;dump.txt&lt;/code&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;GET /api/customer/123 HTTP/1.1

HTTP/1.1 200 OK
Content-Type: application/json

{
    "id": 123,
    "fname": "John",
    "lname": "Doe",
    "email": ["john@example.com", "johndoe@example.com"]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
    &lt;li&gt;Start the server from command line:
&lt;pre&gt;java -jar df.jar dump.txt
&lt;/pre&gt;
&lt;/li&gt;
    &lt;li&gt;Use a browser to check whether the server is running: &lt;a href="http://localhost:8080/api/customer/123" rel="nofollow"&gt;http://localhost:8080/api/customer/123&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/xnbox/DeepfakeHTTP/main/get-started.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hySG2F-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/xnbox/DeepfakeHTTP/main/get-started.png"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more examples see: &lt;a href="https://github.com/xnbox/DeepfakeHTTP#appendix-cdump-examples"&gt;APPENDIX C.&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
Usage&lt;/h2&gt;

&lt;div class="snippet-clipboard-content position-relative"&gt;
&lt;pre&gt;&lt;code&gt;java -jar df.jar [OPTIONS] [FLAGS] [COMMANDS] &amp;lt;file&amp;amp;gt
OPTIONS:                                                           
    --port &amp;lt;number&amp;gt;        HTTP TCP port number, default: 8080
    --port-ssl &amp;lt;number&amp;gt;    HTTPS TCP port number, default: 8443
    --openapi-path &amp;lt;path&amp;gt;  serve OpenAPI client at&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/xnbox/DeepfakeHTTP"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>programming</category>
      <category>testing</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to create horizontal scroll with mouse wheel using JavaScript</title>
      <author>Juan Belieni</author>
      <pubDate>Sun, 12 Sep 2021 15:44:38 +0000</pubDate>
      <link>https://dev.to/juanbelieni/how-to-create-horizontal-scroll-with-mouse-wheel-using-javascript-4cm5</link>
      <guid>https://dev.to/juanbelieni/how-to-create-horizontal-scroll-with-mouse-wheel-using-javascript-4cm5</guid>
      <description>&lt;p&gt;Native horizontal scroll with mouse wheel is not so trivial for the user. However, this behavior can be changed using an &lt;strong&gt;event listener&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In fact, there are some events involving scrolling and mouse wheel such as &lt;em&gt;mousewheel&lt;/em&gt; and &lt;em&gt;DOMMouseScroll&lt;/em&gt;. But here I will be using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event"&gt;wheel event&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, to accomplish this behavior, the JavaScript code will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wheel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollBy&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deltaY&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;element&lt;/code&gt; is the HTML element that the user will scroll by.&lt;/p&gt;

&lt;p&gt;But you can ask why &lt;code&gt;left&lt;/code&gt; has static values. That's because different browsers will provide different values for &lt;code&gt;event.deltaY&lt;/code&gt;. So it's better to put just one value, only varying when the element is being scrolled to one side or the other.&lt;/p&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/juanbelieni/embed/NWggWMV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>To the VSCode Extensions I Love the Most</title>
      <author>Ronnie</author>
      <pubDate>Sun, 12 Sep 2021 15:29:13 +0000</pubDate>
      <link>https://dev.to/arynnboniface/to-the-vscode-extensions-i-love-the-most-pce</link>
      <guid>https://dev.to/arynnboniface/to-the-vscode-extensions-i-love-the-most-pce</guid>
      <description>&lt;p&gt;This certainly isn't the first time someone's made a list of their favorite VSCode extensions and it won't be the last, but these are mine! I'll start with some of my favorite JS related extensions and then we'll jump into HTML/CSS helpers.&lt;/p&gt;

&lt;p&gt;I'm starting with the holy grail of all extensions. This one, I swear, has saved my life.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#js-amp-friends"&gt;
  &lt;/a&gt;
  JS &amp;amp; Friends
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;Bracket Pair Colorizer&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension does exactly what it's name says. It might not seem like anything life changing, but think about working with some deeply nested code, or a huge file.&lt;/p&gt;

&lt;p&gt;Life WITHOUT Bracket Pair Colorizer:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zmiVr-vz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mm6kqryhx9wshwg75xc4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zmiVr-vz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mm6kqryhx9wshwg75xc4.png" alt="Code without Bracket Pair Colorizer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Life WITH Bracket Pair Colorizer: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OqbA_KJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gufofgzg87pljj16j1gf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OqbA_KJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gufofgzg87pljj16j1gf.png" alt="Code with Bracket Pair Colorizer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each pair of brackets, curly brackets and parentheses has its own color, which makes it very easy to identify where you might have an 'oops'. &lt;/p&gt;

&lt;p&gt;Wow, this already seems AWESOME, but WAIT-- there's more. Moving your cursor to the inside of the first bracket draws a line (in the same color) to its partner. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tG1L2uKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4sk2s3m6ecjlq3sngg8s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tG1L2uKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4sk2s3m6ecjlq3sngg8s.png" alt="Bracket Line Match"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=burkeholland.simple-react-snippets"&gt;Simple React Snippets&lt;/a&gt; / &lt;a href="https://marketplace.visualstudio.com/items?itemName=PulkitGangwar.nextjs-snippets"&gt;Next.js Snippets&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Writing boilerplate code takes FOREVER. It's ANNOYING. Simple React Snippets and Next.js Snippets ease that boilerplate pain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Functional Components &amp;amp; Hooks with Simple React Snippets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OaIjoco---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzrd8j4y6453aptvemr9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OaIjoco---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzrd8j4y6453aptvemr9.gif" alt="Simple React Snippets - Functional Components  &amp;amp; Hooks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next.js Snippets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T_LscyQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27a0n3w08x56jytb325x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T_LscyQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27a0n3w08x56jytb325x.gif" alt="Next.js Snippets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both of these extensions have a ton of snippets, but I don't have the time to make that many gifs!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets"&gt;JavaScript (ES6) Code Snippets&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
This one is very similar to Simple React Snippets, but applies to plain 'ole, vanilla JavaScript. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VyjIo5wr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmiys8biprl18lecmn6n.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VyjIo5wr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmiys8biprl18lecmn6n.gif" alt="JavaScript Code Snippets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are the ones I use most often, but there are a ton more. Notable mentions include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;sti&lt;/code&gt; for a &lt;code&gt;setInterval&lt;/code&gt; setup&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;thenc&lt;/code&gt; to add &lt;code&gt;.then()&lt;/code&gt; and &lt;code&gt;.catch()&lt;/code&gt; to a promise.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;clg&lt;/code&gt; for a &lt;code&gt;console.log()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=meganrogge.template-string-converter"&gt;Template String Converter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This one is small but mighty (helpful). Anytime you type &lt;code&gt;${}&lt;/code&gt; within a set of single or double quotes, this extension automatically converts them to backticks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-amp-css"&gt;
  &lt;/a&gt;
  HTML &amp;amp; CSS
&lt;/h2&gt;

&lt;p&gt;VSCode is pretty great with HTML &amp;amp; CSS all on its own. * You can use &lt;code&gt;html:5&lt;/code&gt; to get some solid HTML boilerplate. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Typing &lt;code&gt;a&lt;/code&gt; will give you opening and closing link tags.&lt;/li&gt;
&lt;li&gt;Typing &lt;code&gt;div&lt;/code&gt; will give you opening and closing link tags.&lt;/li&gt;
&lt;li&gt;VSCode auto-completes CSS attributes for you.&lt;/li&gt;
&lt;li&gt;The newest VSCode update allows you to edit an opening and closing tag at the same time (😍).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a few good helpers out there though!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=hwencc.html-tag-wrapper"&gt;HTML Tag Wrapper&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oy3mY4qh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ml9myoqg1a09qxsm3b5c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oy3mY4qh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ml9myoqg1a09qxsm3b5c.gif" alt="HTML Tag Wrapper"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wrapping already written code in a new tag has been driving me insane for as long as I can remember, but now there's an answer. Highlight, ctrl + i and the nightmare is over. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=joy-yu.css-snippets"&gt;CSS Snippets&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, yes, more snippets! What developer doesn't love writing less code?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xVlv8TM8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjymj04294u6e0lqyggb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xVlv8TM8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjymj04294u6e0lqyggb.gif" alt="CSS Snippets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The length of this list of snippets is rivaled only by a Game of Thrones book.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=glenn2223.live-sass"&gt;Live Sass Compiler&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last but not least, Live Sass Compiler! Sure, sure, you can just get this up and running in your terminal with a command or two, OR you could just click this: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lO_kbeiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mizkjkhdfqlslcqc3vrh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lO_kbeiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mizkjkhdfqlslcqc3vrh.png" alt="Watch Sass"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Totally up to you, but I know what I'd rather do. &lt;/p&gt;

&lt;p&gt;That's it for my favorite extensions list (for now). Feel free to drop your favorites in the comments! I'm always looking for new gems in my extension treasure collection.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Just passed 1MIllion views on Dev.to</title>
      <author>Sm0ke</author>
      <pubDate>Sun, 12 Sep 2021 15:14:31 +0000</pubDate>
      <link>https://dev.to/sm0ke/just-passed-1million-views-on-dev-to-1j07</link>
      <guid>https://dev.to/sm0ke/just-passed-1million-views-on-dev-to-1j07</guid>
      <description>&lt;p&gt;Hello guys!&lt;/p&gt;

&lt;p&gt;This week it was quite nice to see that my dashboard shows &lt;strong&gt;1MIllion+ (all-time) views&lt;/strong&gt; for all articles published here on Dev. I will mention TOP-5 articles that helped me to reach this unexpected milestone: &lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards - Open-Source and Free&lt;/a&gt;: 144k views, 535💖&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/admin-dashboards-open-source-and-free-4aep"&gt;Admin Dashboards - Open-Source and Free&lt;/a&gt;: 71k views, 569💖&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/flask-dashboard-open-source-boilerplates-dkg"&gt;Flask Dashboard - Open-Source Boilerplates&lt;/a&gt;: 67k Views, 103💖&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/vue-dashboard-open-source-apps-1gd1"&gt;Vue Dashboard - Open-Source and Free&lt;/a&gt;: 42k views, 379💖&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/100-open-source-apps-built-with-automation-tools-3jmj"&gt;How I’ve built 100+ free apps with automation tools&lt;/a&gt;: 29k views, 463💖&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;A few things that I've learned during the process: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Don't SPAM&lt;/strong&gt;, play fair &amp;amp; help others &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Be consistent&lt;/strong&gt; and constantly publish new content &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Research&lt;/strong&gt; the topic before writing about it&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SEO&lt;/strong&gt; is important 

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards - Open-Source and Free&lt;/a&gt; ranks position #1 for "React Dashboard" keyword&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Visual part&lt;/strong&gt; of the content is important &lt;/li&gt;
&lt;li&gt;Allocate time and &lt;strong&gt;respond to (all) comments&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thank you!&lt;/strong&gt; Feel free to AMA in the comments section.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;P.S. Here is my &lt;a href="https://twitter.com/Sm0keDev"&gt;Twitter account&lt;/a&gt; where I publish 99% &lt;code&gt;open-source&lt;/code&gt; related content. &lt;/p&gt;

</description>
      <category>dev</category>
      <category>stats</category>
      <category>sm0ke</category>
    </item>
    <item>
      <title>Avoid The Pain of Repeated Database Queries With Laravel Query Scopes</title>
      <author>Kevin Hicks</author>
      <pubDate>Sun, 12 Sep 2021 15:11:50 +0000</pubDate>
      <link>https://dev.to/kevinhickssw/avoid-the-pain-of-repeated-database-queries-with-laravel-query-scopes-1b13</link>
      <guid>https://dev.to/kevinhickssw/avoid-the-pain-of-repeated-database-queries-with-laravel-query-scopes-1b13</guid>
      <description>&lt;p&gt;As you continue building out Laravel apps, you will notice spots that you need to perform the same queries. If your project is like most projects I've worked on, you will start with just repeating the query code in many places.&lt;/p&gt;

&lt;p&gt;This works great until you need to change the query. Because the query is repeated throughout your code, you now need to change it everywhere. And you might forget to change it somewhere 🤦🏻. This is an enormous maintenance headache. I can't even count how many bugs I've encountered (and written myself) from forgetting to update code in multiple places.Luckily there are a few easy solutions to reduce duplicate queries.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can move all database code to stored procedures and only interact with the database through stored procedures.&lt;/li&gt;
&lt;li&gt;Create repository, service, builder, or other classes for your queries.&lt;/li&gt;
&lt;li&gt;Add methods to the Eloquent model to perform the queries.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these solutions will work and have their pros and cons. One solution that is built into Laravel that works well for this is &lt;a href="https://laravel.com/docs/8.x/eloquent#query-scopes"&gt;Eloquent Query Scopes&lt;/a&gt;. Query scopes provide some advantages over the other methods I mentioned. Three of the most significant benefits are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It is a first-class citizen of Laravel and built into how Eloquent works&lt;/li&gt;
&lt;li&gt;It can be easier to create smaller, reusable query scopes that can be combined in larger query scopes or one-off queries.&lt;/li&gt;
&lt;li&gt;They can be automatically applied to all queries on a model&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#so-what-exactly-is-a-query-scope"&gt;
  &lt;/a&gt;
  So what exactly is a query scope?
&lt;/h2&gt;

&lt;p&gt;A query scope is a method that works on a model's query builder to modify the default query that would be run. What makes a query scope different from any other method you would write is that it is built into Laravel's Eloquent and meant to be a set of common constraints you would run instead of the entire query. Here is a typical method you might write to tasks that are not complete yet and assigned to a user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nf"&gt;GetActiveTasksForUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Collection&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt; 
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'assigned_to_user_id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'isComplete'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you think about the typical queries, you might need for a task. It isn't hard to imagine needing to query both for all tasks for a user and another for their tasks that aren't complete. Let's add a second method to only get the tasks assigned to a user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nf"&gt;GetAllTasksForUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Collection&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt; 
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'assigned_to_user_id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how the first half of this method is the same as the previous one. We are already duplicating code after just two different queries. It should be easy to see how this could get out of control pretty quickly. Let's convert the two constraints (tasks assigned to the user and incomplete tasks) to query scopes to see how that would help these methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// In the task model (Task.php)&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nf"&gt;scopeAssignedToUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Builder&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'assignedtouser_id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$userId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nf"&gt;scopeIncomplete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Builder&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'isComplete'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The two methods from before can be updated to use the new query scopes and avoid the duplicated query where clause.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nf"&gt;GetActiveTasksForUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Collection&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt; 
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;assignedToUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;incomplete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nf"&gt;GetAllTasksForUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Collection&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt; 
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;assignedToUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The best thing about this approach is that we call simple methods whenever we need a new query that either gets tasks assigned to a specific user or incomplete.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-create-a-query-scope"&gt;
  &lt;/a&gt;
  How to create a query scope?
&lt;/h3&gt;

&lt;p&gt;Creating query scopes is pretty similar to creating any method. There are just three main requirements to make the method a query scope.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Local scopes need to be on the model they apply to. Global scopes need to implement &lt;code&gt;Illuminate\Database\Eloquent\Scope;&lt;/code&gt; We'll get into local vs. global scopes in a little bit.&lt;/li&gt;
&lt;li&gt;Local scopes need to start with scope. For local scopes, everything after the word &lt;code&gt;scope&lt;/code&gt; becomes the method name to call to use the scope using &lt;code&gt;camelCasing&lt;/code&gt;. Ex: &lt;code&gt;scopeAssignedToUser()&lt;/code&gt; is called with &lt;code&gt;assignedToUser&lt;/code&gt;. Global scopes don't have any special naming requirements.&lt;/li&gt;
&lt;li&gt;The first argument should be an instance of &lt;code&gt;Illuminate\Database\Eloquent\Builder&lt;/code&gt;. For global scopes, the second argument should be an instance of Illuminate\Database\Eloquent\Model.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Local scopes can have no additional arguments or can have any arguments after the builder argument. Arguments in a local scope are used to change the query that runs. For example, in &lt;code&gt;scopeAssignedToUser&lt;/code&gt; we passed in an &lt;code&gt;$userId&lt;/code&gt; argument to change what user the query was checking tasks were assigned to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-queries-dont-belong-in-the-model"&gt;
  &lt;/a&gt;
  But queries don't belong in the model.
&lt;/h3&gt;

&lt;p&gt;Depending on the size and complexity of your app or your coding standards, you might think that query scopes don't belong in the model. It is true that with Eloquent, it can be very easy to make your models bloated and full of logic that doesn't belong in it. If you aren't careful, the model can become a mixture of business logic, persistence layer, and other logic.&lt;/p&gt;

&lt;p&gt;Don't write off query scopes just yet. There is an easy way to take advantage of query scopes without bloating the model. Since query scopes are just methods that work on the model's query builder, you can extend the query builder and include your query scopes on the extended class. This puts all query scopes for each model in its own dedicated class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// In TaskQueryBuilder.php&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Illuminate\Database\Eloquent\Builder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nc"&gt;TaskQueryBuilder&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;extends&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Builder&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nf"&gt;assignedToUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'assigned_to_user_id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$userId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// In Task.php&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nf"&gt;newEloquentBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;TaskQueryBuilder&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nf"&gt;TaskQueryBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Still can be called the same way as before&lt;/span&gt;
&lt;span class="nc"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;assignedToUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#local-scopes-vs-global-scopes"&gt;
  &lt;/a&gt;
  Local Scopes vs. Global Scopes
&lt;/h2&gt;

&lt;p&gt;The main difference between a local scope and global scope is local scopes have to be called and are meant for repeated database constraints you may not need all the time. Global scopes, on the other hand, will run automatically for every query on a model. They are meant for things you are almost always going to want to run and don't want to forget when querying for that model. For global scopes, think of things like not loading soft deleted records (Laravel's SoftDeletes trait uses global scopes) or checking if a record belongs to a company for multi-tenant apps (apps that serve multiple different companies each with their own dataset).&lt;/p&gt;

&lt;p&gt;The scopes we created above were local scopes. The following examples will be global scopes that have a few differences in how they are made and used.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They need their own dedicated class and to be registered in the model's booted method.&lt;/li&gt;
&lt;li&gt;The method names are not prefixed with scope.&lt;/li&gt;
&lt;li&gt;They can not have arguments that easily change for each query in the same request. Any arguments for global scopes will require some type of global state.&lt;/li&gt;
&lt;li&gt;They run without calling them explicitly. To avoid running them for a query, the &lt;code&gt;withoutGlobalScope&lt;/code&gt; method needs to be used.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's create an example Global scope for checking if a record belongs to a company.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Builder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Scope&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BelongsToCompanyScope&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Scope&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;protected&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nc"&gt;CompanyResolver&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$resolver&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CompanyResolver&lt;/span&gt; &lt;span class="nv"&gt;$resolver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;resolver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$resolver&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="cd"&gt;/**
     * Apply the scope to a given Eloquent query builder.
     *
     * @param  \Illuminate\Database\Eloquent\Builder  $builder
     * @param  \Illuminate\Database\Eloquent\Model  $model
     *
     * @return void
     */&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Builder&lt;/span&gt; &lt;span class="nv"&gt;$builder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Model&lt;/span&gt; &lt;span class="nv"&gt;$model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="nv"&gt;$builder&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'company_id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;resolver&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getCurrentCompanyId&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example shows how we can use a resolver passed into the global scope to change what company we are loading records for. The resolver could be any class that tracks the current company for the current user. Maybe it is stored in the session, cache, or querying the user's database table.&lt;/p&gt;

&lt;p&gt;This is one of the easiest ways to get global scopes to work with arguments that could change based on the current user or session. However, it does have its downsides that we are now introducing some type of global state into the scope, and the model will also have to know about the &lt;code&gt;CompanyResolver&lt;/code&gt; too. This can make fixing bugs and changing features in the future harder. For this reason, I'm not a big fan of doing this on larger projects or for anything that doesn't rely on a global user or session state the entire app needs to know about anyways.&lt;/p&gt;

&lt;p&gt;To use this BelongsToCompany scope, it needs to be registered in the model class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// In Task.php&lt;/span&gt;
&lt;span class="cd"&gt;/**
 * The "booted" method of the model.
 *
 * @return void
 */&lt;/span&gt;
&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;booted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;    &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;addGlobalScope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;BelongsToCompanyScope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nc"&gt;CompanyResolver&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now every time we query for a task, it will automatically add &lt;code&gt;where company_id = $someCompanyId&lt;/code&gt; to the query. However, if we don't want the global scope to run, excluding them for specific queries is also easy. For example, maybe we want to get all tasks for all companies. In this case, we need to exclude the &lt;code&gt;BelongsToCompanyScope&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;withoutGlobalScope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BelongsToCompanyScope&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we wanted to exclude multiple scopes or all scopes, we could use &lt;code&gt;withoutGlobalScopes&lt;/code&gt;. When called with no arguments, it removes all scopes. When called with an array, it will remove all scopes in the array.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#query-scopes-are-just-one-way-to-reduce-duplicate-query-code"&gt;
  &lt;/a&gt;
  Query scopes are just one way to reduce duplicate query code
&lt;/h2&gt;

&lt;p&gt;As mentioned earlier in the article, query scopes are just one way to reduce duplicate code. They might not be the best for every situation or project, but they should be another tool in your belt. It is up to you and your team to decide what patterns and practices you want to follow for your project.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Server-side JavaScript a decade before Node.js with Netscape LiveWire</title>
      <author>Matteo Cargnelutti</author>
      <pubDate>Sun, 12 Sep 2021 15:08:21 +0000</pubDate>
      <link>https://dev.to/macargnelutti/server-side-javascript-a-decade-before-node-js-with-netscape-livewire-l72</link>
      <guid>https://dev.to/macargnelutti/server-side-javascript-a-decade-before-node-js-with-netscape-livewire-l72</guid>
      <description>&lt;p&gt;The year is 1996. JavaScript is less than a year old, making its grand public debut with the release of Netscape Navigator 2.0 to &lt;a href="https://webdevelopmenthistory.com/1996-javascript-annoyances-and-meeting-the-dom/"&gt;a both intrigued and somewhat bewildered web development community&lt;/a&gt;. We are at the very beginning of what would become &lt;a href="https://en.wikipedia.org/wiki/Browser_wars#First_Browser_War_(1995%E2%80%932001)"&gt;"The First Browser War"&lt;/a&gt;: how JavaScript evolved and grew in that context is a story often told, &lt;strong&gt;but did you know that JavaScript was also used as a server-side scripting language as early as 1996?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Today we're going to have a look at &lt;strong&gt;Netscape LiveWire&lt;/strong&gt;, an extension of &lt;em&gt;"Netscape Enterprise Server"&lt;/em&gt; that made &lt;strong&gt;writing server-side JavaScript applications possible more than 10 years before it was cool.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-dawn-of-serverside-javascript"&gt;
  &lt;/a&gt;
  The dawn of server-side J(ava)Script
&lt;/h2&gt;

&lt;p&gt;While Netscape and Microsoft were distributing their browser free of charge, both companies were also in the business of  selling enterprise-level software to companies and institutions looking for a &lt;em&gt;"one stop shop"&lt;/em&gt; solution to their web server and web development needs. This constituted an important part of Netscape's business model, and something Microsoft invested in as part of their &lt;a href="https://www.wired.com/2010/05/0526bill-gates-internet-memo/"&gt;newfound interest for the internet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We therefore had Microsoft on one side with the &lt;em&gt;"Internet Information Services"&lt;/em&gt; (IIS) suite, featuring their &lt;a href="https://en.wikipedia.org/wiki/Active_Server_Pages"&gt;&lt;em&gt;"Active Server Pages"&lt;/em&gt; (ASP)&lt;/a&gt; server-side scripting technology, and &lt;em&gt;"Netscape Enterprise Server"&lt;/em&gt; with its &lt;strong&gt;LiveWire&lt;/strong&gt; application development solution on the other.&lt;/p&gt;

&lt;p&gt;While ASP did support &lt;strong&gt;JScript&lt;/strong&gt; &lt;em&gt;(Microsoft's early implementation of JavaScript)&lt;/em&gt;, it was only one of the 3 languages supported, alongside &lt;strong&gt;VBScript&lt;/strong&gt; and &lt;strong&gt;PerlScript&lt;/strong&gt;. Netscape chose a different approach and went &lt;em&gt;"all in"&lt;/em&gt; with server-side JavaScript, which was the centerpiece of LiveWire. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-did-livewires-serverside-javascript-work"&gt;
  &lt;/a&gt;
  How did LiveWire's server-side JavaScript work?
&lt;/h2&gt;

&lt;p&gt;Looking back at &lt;a href="https://docs.oracle.com/cd/E19957-01/816-6411-10/contents.htm"&gt;how LiveWire worked&lt;/a&gt; from today's perspective is both fascinating and slightly disorientating. We're only a decade - but galaxies away - from &lt;strong&gt;Node.js&lt;/strong&gt; and its event loop-based, single threaded model. Netscape's server-side implementation of JavaScript was much more of an HTML preprocessor than a multi-purpose runtime, not dissimilar to early-days PHP in some of its inclinations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#everything-starts-with-the-raw-ltservergt-endraw-tag"&gt;
  &lt;/a&gt;
  Everything starts with the &lt;code&gt;&amp;lt;server&amp;gt;&lt;/code&gt; tag
&lt;/h3&gt;

&lt;p&gt;LiveWire introduced a &lt;code&gt;&amp;lt;server&amp;gt;&lt;/code&gt; tag, the likes of ASP's &lt;code&gt;&amp;lt;%&lt;/code&gt; and PHP's &lt;code&gt;&amp;lt;?php&lt;/code&gt; delimiters, used to determine which parts of a given HTML file contained JavaScript logic that needed to be processed on the server before being sent to the client. A global &lt;code&gt;write()&lt;/code&gt; function was used conjointly to &lt;em&gt;"print"&lt;/em&gt; content on the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Welcome to mid-90s HTML. 
Tags are SCREAMED, because everybody is very excited about THE INTERNET. --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;HTML&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;HEAD&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TITLE&amp;gt;&lt;/span&gt;My awesome web app&lt;span class="nt"&gt;&amp;lt;/TITLE&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/HEAD&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;BODY&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;H1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;SERVER&amp;gt;&lt;/span&gt;
      /* This tag and its content will be processed on the server side,
      and replaced by whatever is passed to `write()` before being sent to the client. */
      if(client.firstname != null) {
        write("Hello " + client.firstname + " !")  
      }
      else {
        write("What is your name?")
      }
      &lt;span class="nt"&gt;&amp;lt;/SERVER&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/H1&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;FORM&lt;/span&gt; &lt;span class="na"&gt;METHOD=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;ACTION=&lt;/span&gt;&lt;span class="s"&gt;"app.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;P&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;LABEL&lt;/span&gt; &lt;span class="na"&gt;FOR=&lt;/span&gt;&lt;span class="s"&gt;"firstname"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Your name&lt;span class="nt"&gt;&amp;lt;/LABEL&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;INPUT&lt;/span&gt; &lt;span class="na"&gt;TYPE=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;NAME=&lt;/span&gt;&lt;span class="s"&gt;"firstname"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;        
      &lt;span class="nt"&gt;&amp;lt;/P&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;P&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;INPUT&lt;/span&gt; &lt;span class="na"&gt;TYPE=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;VALUE=&lt;/span&gt;&lt;span class="s"&gt;"Send"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/P&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/FORM&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/BODY&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/HTML&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To prevent unnecessary cluttering of the HTML files, backquotes could be used as a shorthand for the combination of &lt;code&gt;&amp;lt;server&amp;gt;&lt;/code&gt; and the &lt;code&gt;write()&lt;/code&gt; function, making for a smaller footprint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Long form: --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;H1&amp;gt;&amp;lt;SERVER&amp;gt;&lt;/span&gt;write("Hello " + client.firstname + " !")&lt;span class="nt"&gt;&amp;lt;/SERVER&amp;gt;&amp;lt;/H1&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Short hand: --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;H1&amp;gt;&lt;/span&gt;`"Hello " + client.firstname + " !"`&lt;span class="nt"&gt;&amp;lt;/H1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-raw-jsac-endraw-compiler-and-raw-web-endraw-files"&gt;
  &lt;/a&gt;
  The &lt;code&gt;jsac&lt;/code&gt; compiler and &lt;code&gt;.web&lt;/code&gt; files
&lt;/h3&gt;

&lt;p&gt;LiveWire apps required a compilation step. &lt;a href="https://docs.oracle.com/cd/E19957-01/816-6411-10/appdev.htm#1046520"&gt;Using the &lt;code&gt;jsac&lt;/code&gt; compiler&lt;/a&gt;, users had to merge all of the app's HTML and JavaScript resources into a single &lt;code&gt;.web&lt;/code&gt; file. The idea was that every HTML file added to this bundle was to become an entry point for the app, accessible via a url, while loose JavaScript files were meant to be shared resources, allowing to define global functions that could be used in &lt;code&gt;&amp;lt;server&amp;gt;&lt;/code&gt; calls across multiple HTML files. &lt;/p&gt;

&lt;p&gt;The resulting &lt;code&gt;.web&lt;/code&gt; files contained bytecode that could then be executed by Netscape's JavaScript runtime, waiting for HTTP requests to come in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Example: Compiling a LiveWire app made of a single HTML file.&lt;/span&gt;
jsac &lt;span class="nt"&gt;-i&lt;/span&gt; app.html &lt;span class="nt"&gt;-o&lt;/span&gt; app.web

&lt;span class="c"&gt;# Example: Compiling a LiveWire app made of multiple HTML and JS files.&lt;/span&gt;
&lt;span class="c"&gt;# The `-f` option targets a file containing references to all the files that need to be bundled together.&lt;/span&gt;
jsac &lt;span class="nt"&gt;-f&lt;/span&gt; files_list.txt &lt;span class="nt"&gt;-o&lt;/span&gt; app.web 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Netscape's runtime was &lt;strong&gt;multi-threaded&lt;/strong&gt; and allowed for sharing objects between threads of a given application. Shared objects could be accessed and modified by any thread, which made it easy to share state between clients but also came with important risks. &lt;a href="https://docs.oracle.com/cd/E19957-01/816-6411-10/sessmgmt.htm#1012796"&gt;A locking mechanism was available, but not automatically enforced&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-were-some-of-its-core-features"&gt;
  &lt;/a&gt;
  What were some of its core features?
&lt;/h2&gt;

&lt;p&gt;LiveWire was built for &lt;em&gt;"enterprise"&lt;/em&gt; customers, and some of the architectural decisions that were made could be explained by this constraint. &lt;/p&gt;

&lt;p&gt;There was for example a clear focus on &lt;strong&gt;database connectivity&lt;/strong&gt;, &lt;strong&gt;interoperability with Java classes&lt;/strong&gt; &lt;strong&gt;and native libraries&lt;/strong&gt; &lt;em&gt;(LiveConnect and &lt;code&gt;jsacca&lt;/code&gt;)&lt;/em&gt;, all of which making it easier for potential clients to integrate LiveWire into their existing infrastructure and codebases, at least in theory.&lt;/p&gt;

&lt;p&gt;Netscape's server-side JavaScript implementation also came with APIs for &lt;strong&gt;session management&lt;/strong&gt;, &lt;strong&gt;forms processing&lt;/strong&gt;,  &lt;strong&gt;filesystem access&lt;/strong&gt;, and even &lt;strong&gt;sending emails&lt;/strong&gt; in later versions, which made of LiveWire a seemingly complete and viable solution for backend development.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#was-livewire-a-success"&gt;
  &lt;/a&gt;
  Was LiveWire a success?
&lt;/h2&gt;

&lt;p&gt;LiveWire was a very interesting and innovative piece of software, but never came come close to becoming the gold standard of &lt;em&gt;"professional"&lt;/em&gt; server-side development of the late nineties. While it is hard to pinpoint a single reason why that was the case, here are a few clues, in no particular order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Having to compile and bundle everything, including HTML content, made for a somewhat cumbersome developer experience&lt;/strong&gt;. &lt;a href="https://philip.greenspun.com/wtr/livewire.html"&gt;This review of LiveWire's development cycle by Philip Greenspun&lt;/a&gt; describes these woes in great detail. LiveWire's direct competitor, Microsoft ASP, didn't require a compilation step.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;JavaScript was a very young language at the time.&lt;/strong&gt; It still had to prove itself, and hadn't yet become popular enough to have a large pool of developers and libraries available. 
This &lt;a href="http://sunsite.uakom.sk/sunworldonline/swol-08-1999/swol-08-webmaster.html"&gt;article by R. Allen Wyke from 1999&lt;/a&gt; is a good example of how, even a few years later, JavaScript had to be advocated for. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Netscape didn't necessarily invest as much as its competitors&lt;/strong&gt;, and LiveWire quickly lagged behind in terms of features. &lt;a href="https://www.chicagotribune.com/news/ct-xpm-1997-07-18-9801160234-story.html"&gt;This 1997 article from the Chicago Tribune&lt;/a&gt; shows how LiveWire started to lag behind the competition, a year after its launch.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#what-did-livewire-become"&gt;
  &lt;/a&gt;
  What did LiveWire become?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;"Enterprise-grade"&lt;/em&gt; software means long term support. Through successive acquisitions, &lt;a href="https://en.wikipedia.org/wiki/Oracle_iPlanet_Web_Server#Release_History"&gt;&lt;em&gt;"Netscape Enterprise Server"&lt;/em&gt; was rebranded multiple times&lt;/a&gt; and merged with other technologies, which explains why &lt;a href="https://docs.oracle.com/cd/E19957-01/816-6411-10/contents.htm"&gt;LiveWire's documentation&lt;/a&gt; can be found on Oracle's website. &lt;/p&gt;

&lt;p&gt;It is a bit difficult to trace exactly how LiveWire evolved in that context, and figure out when exactly it was discontinued. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Its legacy is an interesting one:&lt;/strong&gt; while it is not hard to find comments on the internet about how seemingly hard and unpleasant it was to work with this technology &lt;a href="https://stackoverflow.com/questions/18350910/netscape-enterprise-server-and-server-side-javascript-ssjs-vs-node-js/26321883#26321883"&gt;(1)&lt;/a&gt; &lt;a href="https://philip.greenspun.com/wtr/livewire.html#:~:text=Reader's%20Comments"&gt;(2)&lt;/a&gt; &lt;a href="https://philip.greenspun.com/wtr/dead-trees/53012.htm#:~:text=Netscape%20LiveWire"&gt;(3)&lt;/a&gt;, it remains an important  piece of JavaScript's history, as it was one of the very first attempts at making the language live outside the browser and compete on the &lt;em&gt;"for business"&lt;/em&gt; market of software development solutions.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>history</category>
    </item>
    <item>
      <title>If you have this three things, you can be a programmer too.</title>
      <author>Bruno Noriller</author>
      <pubDate>Sun, 12 Sep 2021 14:36:36 +0000</pubDate>
      <link>https://dev.to/noriller/if-you-have-this-three-things-you-can-be-a-programmer-too-28b8</link>
      <guid>https://dev.to/noriller/if-you-have-this-three-things-you-can-be-a-programmer-too-28b8</guid>
      <description>&lt;p&gt;2021-09-13 is Programmers' day, but before you run in terror, please know that my goal is not to make you a programmer. &lt;/p&gt;

&lt;p&gt;Not yet...&lt;/p&gt;

&lt;p&gt;You see, I have a bachelor in business, and while I never actually used, the &lt;em&gt;mindset&lt;/em&gt; did stick with me and helped me along the way. So it doesn't matter where you're coming from, I do believe the &lt;em&gt;Programmers' mindset&lt;/em&gt; can help you too. &lt;/p&gt;

&lt;p&gt;And with that, I can safely say: you don't need to be a programmer and that's okay. &lt;/p&gt;

&lt;p&gt;Seriously... run while you can...&lt;/p&gt;

&lt;p&gt;Jokes aside, if you have this three things you can be a programmer. But not because you would be hacking your way into the matrix or anything of the like, but because you're gonna be solving problems.&lt;/p&gt;

&lt;p&gt;Programmers solve problems and code is but one of the ways of doing that.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-have-a-problem-to-solve"&gt;
  &lt;/a&gt;
  1. Have a problem to solve
&lt;/h2&gt;

&lt;p&gt;If programmers are problem solvers, then it stands to reason that, first and foremost, you need a problem to be solved.&lt;/p&gt;

&lt;p&gt;When you have a problem defined, you can start dissecting it, splitting it in smaller, more manageable problems and solve each one of them... and in time even the biggest problems are solved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-laziness"&gt;
  &lt;/a&gt;
  2. Laziness
&lt;/h2&gt;

&lt;p&gt;Don't get me wrong here.&lt;/p&gt;

&lt;p&gt;You really REALLY need NOT to want to do something, but not in the procrastinating kind of way.&lt;/p&gt;

&lt;p&gt;You need the programmers laziness way of thinking: &lt;em&gt;"There should be a better way of doing this..."&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-anger"&gt;
  &lt;/a&gt;
  3. ANGER!
&lt;/h2&gt;

&lt;p&gt;Again, not to be confused with frustration and Hulk Smash type of anger.&lt;/p&gt;

&lt;p&gt;To do things &lt;em&gt;the way they have always been done&lt;/em&gt; is easy. To change is hard.&lt;/p&gt;

&lt;p&gt;To overcome the inertia, to focus on study, to overcome every and all errors that arise you need energy... you need ANGER to "say": &lt;em&gt;"I will do it in a better way!"&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;And that's it. A big problem is something daunting, sometimes impossible to wrap your head around, but if you take it one step at a time you can do it.&lt;/p&gt;

&lt;p&gt;And should you start to learn how to program, that's what you would be doing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Split a (coding) problem in smaller (coding) problems&lt;/li&gt;
&lt;li&gt;Solve each part (with code)&lt;/li&gt;
&lt;li&gt;Merge everything (with code)&lt;/li&gt;
&lt;li&gt;??? (solving errors, bugs... with code)&lt;/li&gt;
&lt;li&gt;Problem solved! (with code!)&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://buymeacoffee.com/noriller"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z2Ma4Bly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzlp2p7mt2izsjpnx517.png" alt="https://buymeacoffee.com/noriller"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@heylagostechie?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Lagos Techie&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/%23programmer?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>motivation</category>
      <category>career</category>
      <category>learning</category>
    </item>
    <item>
      <title>RxJS - Promise vs Observable</title>
      <author>Jinto Jose</author>
      <pubDate>Sun, 12 Sep 2021 14:29:48 +0000</pubDate>
      <link>https://dev.to/jintoppy/rxjs-promise-vs-observable-243n</link>
      <guid>https://dev.to/jintoppy/rxjs-promise-vs-observable-243n</guid>
      <description>&lt;p&gt;One basic question which first comes to mind when we have been using Promises and then, trying to move to Observables... is why to use Observable instead of Promise.&lt;/p&gt;

&lt;p&gt;Since Angular started utilizing RxJS everywhere, Observables became more and more popular. But, confusion comes when we are just making an api call using HttpClient and this returns Observable. We wonder, I can do the same in promise. &lt;/p&gt;

&lt;p&gt;I am trying to answer that with an example. &lt;/p&gt;

&lt;p&gt;Let's first try to create a Promise and an Observable which just finishes with one value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this scenario, there is not much difference between Observable and Promise except that, we are using &lt;b&gt;.subscribe&lt;/b&gt; instead of &lt;b&gt;.then&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;But, what if there are two values. Let's see the code for that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;observable:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;promise: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/rxjs-9ybo2g?embed=1&amp;amp;&amp;amp;file=index.ts" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this scenario, there are two values being emitted, and you can see that, promise is not considering the second value which is resolved. For a promise, it is one asynchronous operation, and that is completed at the first resolve execution itself.&lt;/p&gt;

&lt;p&gt;But, in case of Observable, subscriber keeps listening for the new data, until the observer says completed.&lt;/p&gt;

&lt;p&gt;Hope the difference is clear now. &lt;/p&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Reader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fresher&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Took a Break from Job&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;Are&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Looking For A Job&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;Love&lt;/span&gt; &lt;span class="nx"&gt;JavaScript&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://lastmilementor.com/batch-q4-2021.html"&gt;Click Here to know more about our Training Program&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>rxjs</category>
      <category>javascript</category>
      <category>observable</category>
      <category>promise</category>
    </item>
  </channel>
</rss>
