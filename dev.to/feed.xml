<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Debugging; Deu ruim, e agora?</title>
      <author>Pedro Kiefer</author>
      <pubDate>Fri, 12 Nov 2021 10:20:12 +0000</pubDate>
      <link>https://dev.to/pedrokiefer/debugging-deu-ruim-e-agora-2lhf</link>
      <guid>https://dev.to/pedrokiefer/debugging-deu-ruim-e-agora-2lhf</guid>
      <description>&lt;p&gt;Debugar sistemas distribuídos não é uma tarefa simples. Uma das primeiras ferramentas que precisamos é um modelo mental de como o sistema se comporta (ou como desejamos que ele se comporte). Tente desenhar num esquema simples o fluxo das interações, onde chegam as requisições, quais bancos de dados estão envolvidos, quais subsistemas são consultados. Não precisa ser um modelo extremamente detalhado, mas um que fique fácil identificar as partes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠️ &lt;strong&gt;Spoiler&lt;/strong&gt;: Se você está com dificuldades de fazer um modelo, ou se a interações estão ficando extremamente complexas e acopladas, talvez seja um sinal de que está na hora de simplificar o sistema. Repensar subsistemas, agrupá-los quando possível, mantendo domínios de informações similares nesses grupos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X4Ys4XF6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jjuv4nr1jcc8igtvolid.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X4Ys4XF6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jjuv4nr1jcc8igtvolid.png" alt="Exemplo de modelo mental" width="513" height="301"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No modelo acima conseguimos facilmente ver as partes envolvidas sem entrar nos detalhes do que seriam os subsistemas. Será que temos OpenId Connect para autenticação? Será que é um ES com muitos nós atendendo a busca? Do nosso ponto de vista tanto faz, só precisamos entender que os sistemas existem e que podem ser eventuais pontos de falha — com sorte existem outros times cuidando dessas partes. Com o modelo em mãos, temos que ver se temos métricas que possam indicar falhas em qualquer uma das relações, depois verificamos se há logs interessantes ou, melhor ainda, se temos um sistema de tracing com instrumentação adequada. Agora, com sorte, já temos informações suficientes para fazer qualquer investigação no nosso sistema.&lt;/p&gt;

&lt;p&gt;Começamos olhando as métricas e vendo se algo fugiu do padrão. Por exemplo, se o sistema de busca ficar lento, vamos notar latências aumentando no nosso sistema. Se o sistema de vídeos sair do ar, vamos encontrar erros 500 nas métricas e logs. Será que o nosso sistema saiu do ar por alguma dessas dependências? Se for uma dependência forte, temos que lidar adequadamente, retornar uma informação de erro para nossos usuários. Talvez possamos degradar a qualidade do serviço pelo período que o subsistema ficou fora do ar. Se fizermos isso, precisamos de uma métrica indicando quantas vezes estamos degradando a nossa qualidade — para eventualmente conversar com o time responsável e mostrar o impacto aos usuários.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠️ &lt;strong&gt;Métricas&lt;/strong&gt;: leia o &lt;a href="https://dev.to/pedrokiefer/metricas-the-good-the-bad-and-the-ugly-4b7e"&gt;texto de métricas&lt;/a&gt; para uma discussão maior sobre o assunto.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Os logs terão informações mais detalhadas sobre o problema, um stacktrace pode permitir que você ache a linha exata onde o sistema quebrou. Correlacionando os logs de outros subsistemas ajudará a entender qual foi o dado que gerou o erro. Tente isolar ao máximo a fonte causadora do problema, isso vai tornar o processo de correção muito mais fácil pois você já terá um caso de uso para implementar um novo teste!&lt;/p&gt;

&lt;p&gt;Não culpe a infraestrutura antes de verificar os logs e entender o que está acontecendo. Se é um problema de infraestrutura, provavelmente outras aplicações também serão afetadas, não somente a sua. Investigue e aprenda sobre as peças de infraestrutura, pergunte aos colegas sobre as escolhas que foram feitas e proponha outras caso a atual não atenda mais o produto.&lt;/p&gt;

&lt;p&gt;Passada a turbulência do incidente é hora de reunir os times envolvidos e fazer um postmortem. Aqui não queremos só ver causa-efeito, mas queremos uma análise ampla e profunda do que gerou o problema. A partir disso conseguimos traçar ações de melhoria contínua, e não só resolver o problema pontualmente. Tente aplicar a técnica dos cinco porquês. Essa técnica consiste em ficar perguntando repetidas vezes "Por quê?", sempre tentando buscar a causa raiz, que pode não ser um problema de código, mas uma falta de conhecimento do time, ou um problema de comunicação entre times. Nos aprofundando na causa conseguimos crescer como time e evitar que uma classe de problemas similares se repita.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Computer Tech Web</title>
      <author>ravitejafe</author>
      <pubDate>Fri, 12 Nov 2021 10:19:51 +0000</pubDate>
      <link>https://dev.to/tejattt/computer-tech-web-mi4</link>
      <guid>https://dev.to/tejattt/computer-tech-web-mi4</guid>
      <description>&lt;p&gt;Computer Tech Web provides excellent guest post opportunities through Technology Write for us Page for authors who are willing to share their creative ideas through our blog. The content writers, new authors, and professional bloggers can write technology-related topics for us to share knowledge and create a global influence through your articles.&lt;/p&gt;

&lt;p&gt;Technology Write for us&lt;br&gt;
&lt;a href="https://computertechweb.com/write-for-us/"&gt;https://computertechweb.com/write-for-us/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fix Outlook pii_pn_52dba67008cf3877 Error Code&lt;br&gt;
&lt;a href="https://computertechweb.com/how-to-fix-outlook-pii_pn_52dba67008cf3877-error-code/"&gt;https://computertechweb.com/how-to-fix-outlook-pii_pn_52dba67008cf3877-error-code/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Solve The pii_email_5c337b21d255f533 Error Code Of Outlook&lt;br&gt;
&lt;a href="https://computertechweb.com/ways-to-solve-the-pii_email_5c337b21d255f533-error-code-of-outlook/"&gt;https://computertechweb.com/ways-to-solve-the-pii_email_5c337b21d255f533-error-code-of-outlook/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fix pii_email_077b56914bdda962cebc Error Code&lt;br&gt;
&lt;a href="https://computertechweb.com/how-to-fix-pii_email_077b56914bdda962cebc-error-code/"&gt;https://computertechweb.com/how-to-fix-pii_email_077b56914bdda962cebc-error-code/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Computer web Tech Blog created to help many technically interested people out there and to give complete technological updates through our easy understandable blog posts. Our Blog posts have simple explanation and understand easily.&lt;/p&gt;

&lt;p&gt;pii_email_cd4b80dbd951adb0d4dd Error Code Solved&lt;br&gt;
&lt;a href="https://computertechweb.com/methods-pii_email_cd4b80dbd951adb0d4dd-error-code-solved/"&gt;https://computertechweb.com/methods-pii_email_cd4b80dbd951adb0d4dd-error-code-solved/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;pii_email_f3e1c1a4c72c0521b558 Error code&lt;br&gt;
&lt;a href="https://computertechweb.com/how-to-fixsolve-outlook-pii_email_f3e1c1a4c72c0521b558-error-code/"&gt;https://computertechweb.com/how-to-fixsolve-outlook-pii_email_f3e1c1a4c72c0521b558-error-code/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;solve the pii_email_d2004079e8eb882afcaa Error Code&lt;br&gt;
&lt;a href="https://computertechweb.com/best-ways-to-solve-the-pii_email_d2004079e8eb882afcaa-error-code-of-outlook/"&gt;https://computertechweb.com/best-ways-to-solve-the-pii_email_d2004079e8eb882afcaa-error-code-of-outlook/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Through our Computer web Tech We are discussed categories such as latest technology, networking, Business, Apps, digital marketing and Google updates. Every time we use to search for easy to understand contents, finally we started it on our own which can give easy accessible technology update platform. Here we write posts, so others can find the information quickly.&lt;/p&gt;

&lt;p&gt;123movies : Watch and Download HD Movies&lt;br&gt;
&lt;a href="https://computertechweb.com/123movies/"&gt;https://computertechweb.com/123movies/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FliXanity – Watch Movies&lt;br&gt;
&lt;a href="https://computertechweb.com/watch-movies-tv-shows-online-with-flixanity/"&gt;https://computertechweb.com/watch-movies-tv-shows-online-with-flixanity/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Website Authority Checker&lt;br&gt;
&lt;a href="https://computertechweb.com/website-authority-checker/"&gt;https://computertechweb.com/website-authority-checker/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What attracts app developers to Flutter today?</title>
      <author>Avantika Shergil</author>
      <pubDate>Fri, 12 Nov 2021 10:14:41 +0000</pubDate>
      <link>https://dev.to/avantikashergil/what-attracts-app-developers-to-flutter-today-4dh9</link>
      <guid>https://dev.to/avantikashergil/what-attracts-app-developers-to-flutter-today-4dh9</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l-NpN1VX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3q81ca9x0nqn36hcxx6q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l-NpN1VX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3q81ca9x0nqn36hcxx6q.jpg" alt="Image description" width="880" height="461"&gt;&lt;/a&gt;&lt;br&gt;
Digital businesses need to select mobile technologies that can help them build user-friendly and stable apps. The goal of every business is to create a memorable digital experience regardless of the user's mobile device or operating system. Organizations that fail to do so risk falling behind the competition.Companies want to launch their Android and iOS need to build two separate native apps; hence, cross-platform development has emerged as a cost-effective alternative to native app development&lt;/p&gt;

&lt;p&gt;In contrast, a cross-platform app can work on both platforms with ease. In recent years, many cross-platform app development frameworks like React Native, AngularJS, and Xamarin have emerged. Flutter is relatively new entrant in the game, but it has gained immense popularity in the developer community. Many companies have adopted Flutter to develop their apps. The &lt;a href="https://www.topdevelopers.co/blog/top-apps-built-using-flutter/"&gt;top apps built using Flutter&lt;/a&gt; include&lt;/p&gt;

&lt;p&gt;PostMuse&lt;br&gt;
Hamilton&lt;br&gt;
XianYu&lt;br&gt;
GoogleAds&lt;/p&gt;

&lt;p&gt;Let us look at the various traits of Flutter that help attract developers to the SDK.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background-of-flutter"&gt;
  &lt;/a&gt;
  Background of Flutter
&lt;/h2&gt;

&lt;p&gt;Flutter is an open-source SDK(software development kit) developed by Google in 2018. It is also a dynamic, cross-platform framework based on Google's programming language, DART. Flutter's layered structure allows the developers to build attractive and highly customizable applications. The hot reload feature of Flutter makes it easy for the developers to make changes on the go. Using Flutter, the developers can build high-performance cross-platform apps that deliver near-native performance. In addition, Flutter has a rich library of tools and widgets, which help the developers develop the apps faster. The rich collection of widgets in Flutter enables the app developers to achieve a high level of customization. With Flutter, the developers can build two different apps for iOS and Android.&lt;/p&gt;

&lt;p&gt;While 2020 was a difficult year for most people, for Flutter, it was a year of significant growth. In 2020, Flutter reached its peak of popularity according to Google trends.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---jMl_JOr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ejb2wk4zf7t72wovnkf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---jMl_JOr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ejb2wk4zf7t72wovnkf.png" alt="Google trends" width="880" height="309"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Flutter has overtaken React Native, its closest competitor. React Native was released 3 years earlier than Flutter and was among the most popular cross-platform app development technologies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IPCFC_AP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cniat9s7lp2vqanw9pmh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IPCFC_AP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cniat9s7lp2vqanw9pmh.png" alt="Image description" width="660" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-reasons-for-the-popularity-of-flutter"&gt;
  &lt;/a&gt;
  The reasons for the popularity of Flutter
&lt;/h2&gt;

&lt;p&gt;Data shows that Flutter has emerged as one of the most popular app development SDKs. There are various reasons for Flutter's popularity. We have discussed some of the major ones below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#faster-app-development-with-hot-reloading"&gt;
  &lt;/a&gt;
  Faster app development with Hot Reloading
&lt;/h3&gt;

&lt;p&gt;The hot reloading feature of Flutter boosts the app development speed. The developers can see the changes they make to the app within one second; hence, they do not need to wait for the app to recompile. Hot reloading also allows the developers to see the changes to the app structure in less than ten seconds. The developers do not need to wait to see their modificationsas they can see the effect as soon as they hit the save button.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fast-code-writing-and-app-testing"&gt;
  &lt;/a&gt;
  Fast code writing and app testing
&lt;/h3&gt;

&lt;p&gt;With Flutter, the developers can write code once and run it on any platform. This means that the developers can build a single application and run on two or more platforms such as iOS and Android using a single codebase. This functionality of Flutter helps reduce the time taken to launch the application. A single application built using a single codebase would take much less time to write and test than writing code for two separate applications. The hot reloading feature of Flutter also helps reduce the development time significantly. This is because the hot reloading features eliminate the grade rebuild time, which otherwise slows down the development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flutter-is-efficient"&gt;
  &lt;/a&gt;
  Flutter is efficient
&lt;/h3&gt;

&lt;p&gt;Google has developed Flutter on DART-its programming language. The benefit of DART is that it is a statically typed language that allows the developers to write structured code. The structured nature of DART helps the developers easily build more complex applications that have hierarchical structures. In addition, DART has clean and powerful syntax; it allows the developers to build clear architecture and design for any application. DART is developed to encourage the programmers to build low-maintenance apps with common standards, durability, and improvedefficiency.&lt;/p&gt;

&lt;p&gt;Though there are cross-platform app development frameworks, they cannot produce cross-platform apps that perform like native apps. This is because these frameworks just-in-time compile the UI experience in JavaScript. On the other hand, Flutter provides a "write once" compile anywhere approach since an app built with Flutter is compiled ahead of time.&lt;/p&gt;

&lt;p&gt;While building a native app, the developers need to build separate files for the front end and back end. Flutter, using DART, allows the developers to code both the front end and back end in a single code. The high level of efficiency is the reason why Flutter development is so popular amongst developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#googles-support"&gt;
  &lt;/a&gt;
  Google's Support
&lt;/h3&gt;

&lt;p&gt;Flutter is backed by Google and this fact ensures that the Flutter developers will have the support of a technology major. Google consistently supports the developers with frequent updates and fixes the bugs immediately. Google released a major update of Flutter called as Flutter 2.0 that will allow the developers to build web apps. To boost the adoption rate of Flutter amongst the developer community, Google continuously organizes several Flutter technical events. These Flutter events help startups as well as established businesses to catch up with the latest developments in Flutter and learn how Flutter can help them grow their business.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#an-extensive-catalog-of-opensource-packages"&gt;
  &lt;/a&gt;
  An extensive catalog of open-source packages
&lt;/h3&gt;

&lt;p&gt;The Flutter developers have access to a huge set of open-source packages, which enable them to build high-quality apps faster. Although comparatively small, the library of readymade tools and packages in Flutter is growing fast. Google has provided more than 15,000 packages to aid the Flutter developers. In addition, Flutter has a rich set of widgets for Cupertino and material design. These widgets help the developers render interactive UI on Android as well as iOS platforms easily.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#straightforward-integration-with-firebase"&gt;
  &lt;/a&gt;
  Straightforward integration with Firebase
&lt;/h3&gt;

&lt;p&gt;Firebase is another Google platform that allows developers to build high-quality mobile apps quickly. With Firebase, the developers get out-of-the-box support for a wide range of services like real-time databases, authentication, hosting, cloud storage, and cloud functions. The infrastructure is serverless, scalable, and redundant, meaning that the developers do not need to spend a lot of time and resources to build the backend. In addition, there are various high-quality Flutter app templates available in Firebase that help the developers finish the app development process faster. Google has enabled simple integration of Flutter with Firebase.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flutter-supports-a-wide-range-of-ides"&gt;
  &lt;/a&gt;
  Flutter supports a wide range of IDEs
&lt;/h3&gt;

&lt;p&gt;Flutter supports a wide range of Integrated Development Environments (IDEs) and popular code editors. The developers can easily add Flutter as a plugin in VS Code, IntelliJ IDEA, and Android Studio. This proves to be a significant advantage as it allows the developers to write code using debuggers and automation tools, which boosts the development team's productivity levels.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#great-uis-with-widgets"&gt;
  &lt;/a&gt;
  Great UIs with widgets
&lt;/h3&gt;

&lt;p&gt;One of the greatest strengths of Flutter is its extensive collection of widgets. With Flutter, the developers experience a high freedom in building the user interface regardless of the platform. This is because Flutter uses its own rendering engine to draw the widgets. Flutter helps developers use material design for Android and human interface for iOS, which is a limitation with other cross-platform solutions. Unlike Flutter, when one develops apps with other cross-platform solutions, the app looks the same on iPhone and Android. This is an issue because the app would not be able to utilize the unique characteristics of each platform. This would eventually affect the app's performance, and it won't be able to achieve near-native performance like an app built with Flutter.&lt;/p&gt;

&lt;p&gt;One of the significant benefits of Flutter is that it is equipped with packages that contain a set of custom widgets for both operating systems. Due to Flutter's beautiful and customizable widgets, the developers can build Flutter apps that look and feel great. The developers can either use ready-made widgets from Material-UI or implement specific components into their UI based on basic widgets. Flutter also enables the developers to build custom widgets. In addition, Flutter provides great flexibility to work with gesture processing and animation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#support-from-the-flutter-team-community"&gt;
  &lt;/a&gt;
  Support from the Flutter team community
&lt;/h3&gt;

&lt;p&gt;Flutter developers enjoy the support of a large developer community. This support is in addition to what Google provides to Flutter developers with frequent updates and issue fixes. Since its first release, Flutter now has 81,200 (and counting) stars on GitHub.Flutter mobile app development becomes easy due to the friendly developer community. In addition, Google organizes several events that help both the startups and established businesses catch up with the latest developments in Flutter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lowcost-app-development"&gt;
  &lt;/a&gt;
  Low-cost app development
&lt;/h3&gt;

&lt;p&gt;Flutter helps companies achieve the goal of cost-effective development. As Flutter helps developers build efficient cross-platform apps, it saves business owners money that they would have otherwise spent in building two separate iOS and Android apps. This is because while a single team is sufficient to build an app with Flutter, to build two separate native apps, one would need to hire two separate teams, which would double the costs.&lt;/p&gt;

&lt;p&gt;The hot reloading feature of Flutter helps the developers reduce the development time, which helps save costs. To perform smoothly, every app must be tested extensively. It would take a lot of time to test two native apps. With Flutter, this testing time can be reduced as the app undergoes all the quality measures only once saving a lot of time and efforts. The reduced testing time translates into lower costs as fewer hours are utilized in testing. As Flutter is open-source, the business does not need to pay any licensing fees to use Flutter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Closing thoughts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Developers can find more than enough reasons to take up cross-platform development on Flutter. For instance, it alleviates many pain points faced by developers searching for a robust platform that allows them to build apps for multiple platforms. Flutter provides many advantages to businesses that choose to adopt it to develop their product. However, being a relatively new technology, it is hard to find experienced Flutter developers who can build an app according to the desired specifications. At TopDevelopers.co, we have enlisted the &lt;a href="https://www.topdevelopers.co/directory/flutter-app-development-companies"&gt;top Flutter app development companies&lt;/a&gt; to help aspiring entrepreneurs achieve their dream of building a top-notch Flutter app.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Advice on what to look for to develop a custom ecommerce menu in the cannabis industry.</title>
      <author>Lamy Fafa</author>
      <pubDate>Fri, 12 Nov 2021 10:04:03 +0000</pubDate>
      <link>https://dev.to/lamy_fafa_f3cc85ee84f4cd6/advice-on-what-to-look-for-to-develop-a-custom-ecommerce-menu-in-the-cannabis-industry-8do</link>
      <guid>https://dev.to/lamy_fafa_f3cc85ee84f4cd6/advice-on-what-to-look-for-to-develop-a-custom-ecommerce-menu-in-the-cannabis-industry-8do</guid>
      <description>&lt;p&gt;TLDR: Small time cannabis dispensary owner (i.e., no deep pockets) would like to build custom menu for our website, lost in what's important to look for and just how big of an investment it is. Any advice is GREATLY appreciated.&lt;/p&gt;

&lt;p&gt;Small "mom &amp;amp; pop" dispensary owner in the cannabis industry here who feels somewhat lost in all the conversations around our ecommerce menu. Basically, most every dispensary uses an "out of the box" solution that gives a little guy/gal no ability to differentiate themselves and then is also told it's really the only solution to go with (with certain POS providers these days). Also blown away by how they pick and choose what data to expose in their API endpoints.&lt;/p&gt;

&lt;p&gt;As a result, we'd like to develop our own ecommerce solution for our website but are a bit lost as to how to go about doing it. If our POS provider can give us an API key, what do we look for to find someone to hire to help? As background&lt;a href="https://en.everybodywiki.com/Dubai_Call_Girls_0529579100_Call_Girls_Dubai"&gt;,&lt;/a&gt; I'm somewhat tech savvy when it comes to using drag and drop web builders and have some actual prior experience in doing some custom things with HTML, CSS, etc. so in my simplistic mind the "hard part" seems like it should be building the API integration and that if that's done well we could conceivably use a "drag and drop" ecommerce provider ourselves? &lt;/p&gt;

&lt;p&gt;Is it possible to hire someone to only build the "integration" between our POS provider and our ecommerce engine? Does that even make sense? &lt;/p&gt;

&lt;p&gt;If so, what skills should we look for and what can we expect to pay? Also, given that this is cannabis&lt;a href="https://www.scribd.com/document/539091698/Hot-Call-Girls-in-Abu-Dhabi-0529579100-Abu-Dhabi-Call-Girls"&gt;,&lt;/a&gt; we also wouldn't be looking specifically at the first at doing any payment processing so that can largely be ignored, for a little while at least.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>devops</category>
      <category>programming</category>
      <category>php</category>
    </item>
    <item>
      <title>AI in Instagram Chat</title>
      <author>Prakhar Doneria</author>
      <pubDate>Fri, 12 Nov 2021 09:55:29 +0000</pubDate>
      <link>https://dev.to/prakhardoneria/ai-in-instagram-chat-m3o</link>
      <guid>https://dev.to/prakhardoneria/ai-in-instagram-chat-m3o</guid>
      <description>&lt;p&gt;&lt;a href="https://www.instagram.com/protecgames_help_centre/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have you ever talked to a bot? May be your answer will be &lt;br&gt;
&lt;b&gt;Yes&lt;/b&gt; May be mean AI as Google Assistant or Siri. Isn't it but what if you get a chance to chat with a BOT on INSTAGRAM DIRECT MESSAGE? Click 👇🏻&lt;a href="https://www.instagram.com/protecgames_help_centre/"&gt;https://www.instagram.com/protecgames_help_centre/&lt;/a&gt; on this link and try out our Bot...&lt;/p&gt;

&lt;p&gt;Thanks&lt;br&gt;
&lt;/p&gt;

</description>
      <category>ai</category>
      <category>python</category>
      <category>programming</category>
      <category>react</category>
    </item>
    <item>
      <title>Software books!</title>
      <author>albaaparicio12</author>
      <pubDate>Fri, 12 Nov 2021 09:54:43 +0000</pubDate>
      <link>https://dev.to/albaaparicio12/software-books-3hpg</link>
      <guid>https://dev.to/albaaparicio12/software-books-3hpg</guid>
      <description>&lt;p&gt;There goes a list with every book I've read about coding. I truly recommend all of them!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clean Code - Robert C. Martin&lt;/li&gt;
&lt;li&gt;The Pragmatic Programmer - Andy Hunt&lt;/li&gt;
&lt;li&gt;Design Patterns - Erich Gamma&lt;/li&gt;
&lt;li&gt;Inteligencia Artificial: Un enfoque moderno - Stuart Russell&lt;/li&gt;
&lt;li&gt;Designing Software Architectures - Humberto Cervantes&lt;/li&gt;
&lt;li&gt;Clean Architecture - Robert C. Martin&lt;/li&gt;
&lt;li&gt;Pragmatic Thinking and Learning - Andy Hunt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are mopre like novels, for entertainment &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cult of the dead cow - Joseph Menn&lt;/li&gt;
&lt;li&gt;Countdown to Zero Day - Kim Zetter&lt;/li&gt;
&lt;li&gt;The Best of 2600 - Emmanuel Goldstein&lt;/li&gt;
&lt;li&gt;Warcross Saga - Marie Lu (&lt;em&gt;LOVE THIS&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>books</category>
      <category>programming</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Building a REST API with Django REST Framework</title>
      <author>Faruq</author>
      <pubDate>Fri, 12 Nov 2021 09:05:47 +0000</pubDate>
      <link>https://dev.to/faruqt/how-to-connect-django-to-reactjs-part-2-2oje</link>
      <guid>https://dev.to/faruqt/how-to-connect-django-to-reactjs-part-2-2oje</guid>
      <description>&lt;p&gt;Welcome to part 2 of this series. Here we'll be creating the  api for a &lt;code&gt;Notes&lt;/code&gt; application and also finish up the backend development.&lt;/p&gt;

&lt;p&gt;If you come across this part first, you can check out part 1 &lt;a href="https://dev.to/faruqt/how-to-connect-django-to-reactjs-1a71"&gt;here&lt;/a&gt;. We already handled the project setup in that tutorial.&lt;/p&gt;

&lt;p&gt;We'll continue from where we stopped in part 1; so this would be easy to follow as well.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-api-endpoints"&gt;
  &lt;/a&gt;
  Creating Api endpoints
&lt;/h2&gt;

&lt;p&gt;You should still be in the project1 directory. If not, Navigate to the directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Django&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;project1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please ensure you are in the folder with the manage.py file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Django REST framework&lt;/code&gt; is a powerful and flexible toolkit for building Web APIs. We are going to use this to create the API endpoints. First we have to install it;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;pip&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;djangorestframework&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#settingspy"&gt;
  &lt;/a&gt;
  settings.py
&lt;/h4&gt;

&lt;p&gt;Next we register it under the installed apps section in the settings.py file. The &lt;code&gt;INSTALLED_APPS&lt;/code&gt; section in your settings.py file should look like this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;django.contrib.admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;django.contrib.auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;django.contrib.contenttypes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;django.contrib.sessions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;django.contrib.messages&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;django.contrib.staticfiles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;my_apps&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rest_framework&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#modelspy"&gt;
  &lt;/a&gt;
  models.py
&lt;/h4&gt;

&lt;p&gt;Then we create the models in the &lt;code&gt;models.py&lt;/code&gt; file inside the app directory &lt;code&gt;core&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Notes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#serializerspy"&gt;
  &lt;/a&gt;
  serializers.py
&lt;/h4&gt;

&lt;p&gt;We also need to create a new file &lt;code&gt;serializers.py&lt;/code&gt; inside the app directory "core". This will contain the &lt;code&gt;serializer&lt;/code&gt; that will be responsible for converting the model into data types understandable by javascript and the react framework.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;rest_framework&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;serializers&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;models&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Notes&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NoteSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serializers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ModelSerializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Notes&lt;/span&gt;
        &lt;span class="nx"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we import the serializers class from the installed django rest framework package and also the &lt;code&gt;Notes&lt;/code&gt; model created earlier. Then we declare the fields of the model that we want to have their data converted. If you have a model with several fields and you want to serialize all; you can simply add the line below in place of the fields line above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__all__&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your core directory should look like this now.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vNYWlyjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6swvf83flahm3uptwho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vNYWlyjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6swvf83flahm3uptwho.png" alt="Core app directory" width="426" height="389"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#viewspy"&gt;
  &lt;/a&gt;
  views.py
&lt;/h4&gt;

&lt;p&gt;Finally to complete the backend setup, we need to update the &lt;code&gt;views.py&lt;/code&gt; file. Add these import lines to the top of the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;rest_framework&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decorators&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;api_view&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;rest_framework&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;rest_framework&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serializers&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;NoteSerializer&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;models&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Notes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll make use of function based views with the &lt;code&gt;api_view&lt;/code&gt; decorator. This will allow us to declare the method type. By default only the &lt;code&gt;GET&lt;/code&gt; method is allowed so we have to specify the &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; methods that we need.&lt;/p&gt;

&lt;p&gt;Directly below the previous &lt;code&gt;front&lt;/code&gt; view we'll create the &lt;code&gt;note&lt;/code&gt; view with the api_view decorator. This view will handle the &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; methods so we have to add it to the decorator as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;api_view&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;note&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;NoteSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;many&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serializer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;elif&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;NoteSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;serializer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="nx"&gt;serializer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTTP_201_CREATED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serializer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTTP_400_BAD_REQUEST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we are doing here is to check for the type of request method and if it is a &lt;code&gt;get&lt;/code&gt; request method we query the database to retrieve all the available notes and then we serialize the data received from the database. The &lt;code&gt;many=True&lt;/code&gt; flag is being used here because we are getting a list of objects from the database and not just an object instance. Then we return the serialized data to the frontend for display.&lt;/p&gt;

&lt;p&gt;However, if the request method is a &lt;code&gt;post&lt;/code&gt; method; we deserialize the data submitted from the front end and we check to see if all the data is valid with &lt;code&gt;is_valid&lt;/code&gt; method before accessing and storing the data in the database. We then return a successful status message to the frontend without any data. You'll see the reason for this when we start working on the frontend.&lt;/p&gt;

&lt;p&gt;Next we create the &lt;code&gt;note_detail&lt;/code&gt; view. This view will handle the &lt;code&gt;DELETE&lt;/code&gt; method so we will include it in the &lt;code&gt;api_view&lt;/code&gt; decorator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;api_view&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DELETE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;note_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;note&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;Notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DoesNotExist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTTP_404_NOT_FOUND&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DELETE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTTP_204_NO_CONTENT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are passing &lt;code&gt;primary key field(pk)&lt;/code&gt; together with request to the note_detail function as we need to add the primary key to the database query so we can get the particular note to be deleted. Once the note with the specified primary key has been retrieved successfully we check for the method type; if it is &lt;code&gt;DELETE&lt;/code&gt;, that particular note is deleted from the database.&lt;/p&gt;

&lt;p&gt;We have finished creating the views, if you followed all the steps above your views.py file should look like this 👇.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;django&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shortcuts&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;rest_framework&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decorators&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;api_view&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;rest_framework&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;rest_framework&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serializers&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;NoteSerializer&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;models&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Notes&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;Create&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;views&lt;/span&gt; &lt;span class="nx"&gt;here&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;front&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;api_view&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;note&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;NoteSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;many&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serializer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;elif&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;NoteSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;serializer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="nx"&gt;serializer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTTP_201_CREATED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serializer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTTP_400_BAD_REQUEST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;api_view&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DELETE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;note_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;note&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="nx"&gt;Notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DoesNotExist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTTP_404_NOT_FOUND&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DELETE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTTP_204_NO_CONTENT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#urlspy"&gt;
  &lt;/a&gt;
  urls.py
&lt;/h4&gt;

&lt;p&gt;We need to import the  new view functions from the core app into the &lt;code&gt;urls.py&lt;/code&gt; file. We will just add new lines to the existing ones.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;views&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;front&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;note_detail&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then map them to various &lt;code&gt;urls&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;note&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes/&amp;lt;int:pk&amp;gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;note_detail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;detail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your urls.py file should look like this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;django&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contrib&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;django&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;views&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;front&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;note_detail&lt;/span&gt;

&lt;span class="nx"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;front&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;front&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;note&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes/&amp;lt;int:pk&amp;gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;note_detail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;detail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have finished up the api and backend setup. To test this, we migrate the changes we made to the &lt;code&gt;models.py&lt;/code&gt; file into the database schema.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;python&lt;/span&gt; &lt;span class="nx"&gt;manage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt; &lt;span class="nx"&gt;makemigrations&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;python&lt;/span&gt; &lt;span class="nx"&gt;manage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt; &lt;span class="nx"&gt;migrate&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then we run the application with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;python&lt;/span&gt; &lt;span class="nx"&gt;manage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt; &lt;span class="nx"&gt;runserver&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should still see the default react page, change your url to &lt;code&gt;http://127.0.0.1:8000/notes/&lt;/code&gt;. You'll see the django rest framework browsable api. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5s0rPwPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgoneh7vif0lpixa8tx2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5s0rPwPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgoneh7vif0lpixa8tx2.png" alt="drf browsable api" width="880" height="550"&gt;&lt;/a&gt;&lt;br&gt;
Paste the json data below in the content box and click on the &lt;code&gt;POST&lt;/code&gt; button. This will be the format of the POST data that will be sent from the front end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    {
        "title": "Hello Ace!",
        "content": "This is a new note."
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Refresh the page and you'll see the new POST data. Voila! You have successfully executed the &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;GET&lt;/code&gt; methods. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bf28kRdX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0jgjh155o4orvsrr0ua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bf28kRdX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0jgjh155o4orvsrr0ua.png" alt="POST and GET methods" width="880" height="550"&gt;&lt;/a&gt;&lt;br&gt;
Let's also test the &lt;code&gt;DELETE&lt;/code&gt; method. Change your url to &lt;code&gt;http://127.0.0.1:8000/notes/1/&lt;/code&gt;. The digit at the end of the URL is the id of the note you want to delete. Click on the &lt;code&gt;DELETE&lt;/code&gt; button and then return back to the previous URL &lt;code&gt;http://127.0.0.1:8000/notes/&lt;/code&gt;. You'll discover that the note created earlier has been deleted. &lt;/p&gt;

&lt;p&gt;Note: Function based views with &lt;code&gt;api_view&lt;/code&gt; decorators were used for this tutorial for simplicity purpose. You can also choose to make use of &lt;code&gt;viewsets&lt;/code&gt; which will handle all the various methods &lt;code&gt;GET , POST , PUT , DELETE&lt;/code&gt; without you having to state them like we did with the &lt;code&gt;api_view&lt;/code&gt; decorator. You can read more about viewsets &lt;a href="https://www.django-rest-framework.org/api-guide/viewsets/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have confirmed that the api endpoints (GET, POST, DELETE) are working as desired so in part 3 we'll proceed to build the frontend where we'll be making the api calls using the api urls above. I hope this was easy to follow as well. See you in part 3... Cheers!!!!&lt;/p&gt;

&lt;p&gt;If you have any question, feel free to drop it as a comment or send me a message on &lt;a href="https://www.linkedin.com/in/faruq-abdulsalam-b2847b160"&gt;Linkedin&lt;/a&gt; or &lt;a href="https://twitter.com/Ace_II"&gt;Twitter&lt;/a&gt; and I'll ensure I respond as quick as I can. Ciao 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>django</category>
    </item>
    <item>
      <title>Add YouTube Video Player in React-App</title>
      <author>Fidal Mathew</author>
      <pubDate>Fri, 12 Nov 2021 08:58:06 +0000</pubDate>
      <link>https://dev.to/fidalmathew/add-youtube-video-player-in-react-app-1e22</link>
      <guid>https://dev.to/fidalmathew/add-youtube-video-player-in-react-app-1e22</guid>
      <description>&lt;p&gt;Hi folks, hope you are doing well. In this post we are going to learn how to add a video link to your React app and play in your React app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-install"&gt;
  &lt;/a&gt;
  How to Install
&lt;/h3&gt;

&lt;p&gt;This player component can be used by installing react-player&lt;br&gt;
NPM package.&lt;/p&gt;

&lt;p&gt;Enter your directory, open your terminal (Ctrl+ J).&lt;br&gt;
Type &lt;code&gt;npm i react-player&lt;/code&gt; in your app directory and press enter.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j-eYbmhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3l0ci3vpulokzurev1j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j-eYbmhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3l0ci3vpulokzurev1j.png" alt="install react-player" width="575" height="61"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How To Use
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Import&lt;/strong&gt; -&lt;br&gt;
Now, import the package in the React component file where you want to add the video player.&lt;br&gt;
&lt;code&gt;import ReactPlayer from "react-player";&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aqsCYoPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/so07xjh4kxq6t6b56957.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aqsCYoPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/so07xjh4kxq6t6b56957.png" alt="Import" width="533" height="130"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;2. Add the component&lt;/strong&gt; - &lt;br&gt;
&lt;code&gt;&amp;lt;ReactPlayer url="url-link"  controls={true} /&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6D29Zq1v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7q2fx93e2ugj0bufjyh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6D29Zq1v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7q2fx93e2ugj0bufjyh9.png" alt="Add the component" width="880" height="85"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hurray, you added a video-player to your React app!! &lt;br&gt;
At this point, you can stop and enjoy :)  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Additional Settings-&lt;/strong&gt;&lt;br&gt;
If you want to add some extra settings, here are a few-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;controls = {true/false}&lt;/code&gt; - provides video controls to user&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;loop = {true/false}&lt;/code&gt;     - repeat the video if it ends&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;volume = {0 to 1}&lt;/code&gt;       - set volume &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To check out more, click &lt;a href="https://www.npmjs.com/package/react-player"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out the my Netflix clone, click on any movie to view it's trailer - &lt;a href="https://netflix-clone-fce11.web.app/"&gt;here&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NjSYWZ7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epf9asbphydev64lzno1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjSYWZ7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epf9asbphydev64lzno1.png" alt="Netflix Clone" width="880" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you know of other methods to implement, let me know in the comments. Thanks for reading :) &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Write Better Tailwind CSS Containers</title>
      <author>Mark Mead</author>
      <pubDate>Fri, 12 Nov 2021 08:51:31 +0000</pubDate>
      <link>https://dev.to/markmead/how-to-write-better-tailwind-css-containers-4m8c</link>
      <guid>https://dev.to/markmead/how-to-write-better-tailwind-css-containers-4m8c</guid>
      <description>&lt;p&gt;When it comes to Tailwind CSS containers, a lot of people will write &lt;code&gt;max-w-screen-xl mx-auto px-4 sm:px-6 lg:px-8&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or something similar. In fact, this website uses the classes above but instead writing that every time, instead I write &lt;code&gt;container&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you can see, this is much cleaner and it will keep your HTML uncluttered.&lt;/p&gt;

&lt;p&gt;You could argue it's less "declarative" but Bootstrap has been using &lt;code&gt;container&lt;/code&gt; for years and there's never been any issues. Also, if you're that worried, don't - the explanation to how &lt;code&gt;container&lt;/code&gt; works in Tailwind CSS can be found in the &lt;code&gt;tailwind.config.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A typical Tailwind CSS config will have the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can override Tailwind CSS classes or extend them.&lt;/p&gt;

&lt;p&gt;To update this to make &lt;code&gt;container&lt;/code&gt; perform how we want, we will override the class with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;DEFAULT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1rem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.5rem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;lg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2rem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this is doing is taking the old &lt;code&gt;container&lt;/code&gt; class from Tailwind CSS that only did &lt;code&gt;max-w-screen-xl&lt;/code&gt; and replacing it with &lt;code&gt;max-w-screen-xl mx-auto px-4 sm:px-6 lg:px-8&lt;/code&gt; but we only need to write a single class name.&lt;/p&gt;

&lt;p&gt;You can adjust the padding for each screen size that's available in Tailwind CSS.&lt;/p&gt;

&lt;p&gt;If you opt into using a single padding class then don't write it as an object, simply do &lt;code&gt;padding: "1rem"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Read up on the Tailwind CSS container class on the official docs page - &lt;a href="https://tailwindcss.com/docs/container"&gt;Tailwind CSS - Container&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Learn From These Mistakes Before You Learn Routerlogin.net Refused To Connect.</title>
      <author>LUCAS LEO</author>
      <pubDate>Fri, 12 Nov 2021 08:47:16 +0000</pubDate>
      <link>https://dev.to/lucas_leo_0f2377379d80e5b/learn-from-these-mistakes-before-you-learn-routerloginnet-refused-to-connect-2od0</link>
      <guid>https://dev.to/lucas_leo_0f2377379d80e5b/learn-from-these-mistakes-before-you-learn-routerloginnet-refused-to-connect-2od0</guid>
      <description>&lt;p&gt;The web interface of a router automatically sets the language for your device according to the Time zone a user sets. English is the common default language chosen for most countries. You can also change the language of your router through the Basic homepage of the routerlogin.net interface. When you are done changing the language, click on the Confirm button, refresh the current page and the page refreshes with the language you selected.&lt;br&gt;
&lt;a href="https://19216811netgear.net/"&gt;https://19216811netgear.net/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Complete Guide How to Choose Logistics Software</title>
      <author>TechAvidus</author>
      <pubDate>Fri, 12 Nov 2021 08:44:39 +0000</pubDate>
      <link>https://dev.to/techavidus/complete-guide-how-to-choose-logistics-software-3lk9</link>
      <guid>https://dev.to/techavidus/complete-guide-how-to-choose-logistics-software-3lk9</guid>
      <description>&lt;p&gt;How would you feel if we're able to gain control of your supply chain from a distance and gain insights into all the logistical details of the supply chain? If you merged control with understanding, you'd be able to plan the structure, manage and expand your supply chain, allowing you to maximize the potential for profit while being adaptable enough to meet the ever-changing business and economic demands.&lt;/p&gt;

&lt;p&gt;Some transportation and logistics companies choose to use pre-made products, off-the-shelf solutions for logistics, or custom &lt;a href="https://www.techavidus.com/blogs/how-to-choose-logistics-management-software"&gt;logistic management software&lt;/a&gt; to improve their service. Others consider building the required technology within their own facilities. Which is the best option?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-logistics-management-software"&gt;
  &lt;/a&gt;
  What is logistics management software?
&lt;/h2&gt;

&lt;p&gt;To comprehend the factors that go into this kind of approach, it's essential to start by looking at the definition of logistics as well as the logistics processes.&lt;/p&gt;

&lt;p&gt;Logistics refers to the movement of goods from their point of origin to the end destination, usually either a business or consumer with a few other stops in between. Logistics management involves the coordination of the transportation of goods and controlling the entire supply chain, from the beginning up to the final. This includes the management of inventory as well as fleet management. It also involves managing logistics inbound and outbound logistical processes throughout your supply chain.&lt;/p&gt;

&lt;p&gt;This method requires high levels of coordination and communications between various players to ensure efficient and accurate transportation processes. Logistics management could also comprise customer relationship management, which focuses on giving customers the best service available regardless of the shipping method employed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-key-features-of-logistics-software"&gt;
  &lt;/a&gt;
  What are the key features of logistics software?
&lt;/h2&gt;

&lt;p&gt;If you are looking for logistic management software it is essential to find those features relevant to your business's operational needs. This will assist you in selecting the best logistics software that meets your business's specific requirements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#top-musthave-features-of-logistics-management-software"&gt;
  &lt;/a&gt;
  Top must-have features of Logistics Management Software:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Order Management&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Handling large volumes of courses orders requires the right solution for logistics using software. The software should integrate with top tools that monitor and track orders from the manufacturing facility to the delivery location. The software takes care of every aspect for the dispatcher and makes it less necessary to manage everything manually. This includes receiving orders scheduling, processing storage and shipping and even delivery.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Forecasting&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Forecasting is a key aspect of logistics and Supply Chain Management software. A well-constructed forecast can help uncover the gaps within the management of logistics and increase the efficiency of business processes by making the demands known prior to the time. Forecasting assists in scheduling production, reducing the lack of inventory, and enhancing the satisfaction of customers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Transport management&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The software for logistics management provides the platform to manage transportation control. This provides live information on the position of the shipment using GPS tracking. The software for logistics helps keep track of the vehicle and the shipment which improves the flow of products and goods.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Inventory Tracking&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;The feature for tracking inventory of logistics management software can help control the various transaction details. The inventory control feature enhances the customer's satisfaction by sending an invoice in time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Real-time visibility&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Real-time and immediate visibility across all the channels within the supply chain is an important factor in the on-demand business. Customers appreciate the real-time tracking of the items they have ordered and immediate communication regarding any shipping information that might be required. Additionally, the accuracy of data can help dispatchers make arrangements for last-minute requests and cancellations, or orders. There are no businesses that can stay out of the loop. It is therefore essential to be able to see all aspects of the supply chain using efficient tracking software for logistics. This will ensure that dispatchers and the agents are quick to react to any last-minute issues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Customizable and Streamlined Interface&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Logistics software offers a simplified interface that allows you to navigate the required functions swiftly. The flexible logistics software incorporates the logistics tracking and shipping management system as well as warehouse management tools along with optimization algorithm.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-conclude"&gt;
  &lt;/a&gt;
  To Conclude:
&lt;/h2&gt;

&lt;p&gt;Since the importance of logistics is growing rapidly, incorporating the appropriate software for your company will increase its efficiency and profitability. Utilizing software that is scalable to manage logistics will streamline the processes, allowing companies to manage and transport items.&lt;/p&gt;

</description>
      <category>logistics</category>
      <category>programming</category>
      <category>software</category>
    </item>
    <item>
      <title>Ten Doubts About Roku Account Setup You Should Clarify.</title>
      <author>LUCAS LEO</author>
      <pubDate>Fri, 12 Nov 2021 08:41:52 +0000</pubDate>
      <link>https://dev.to/lucas_leo_0f2377379d80e5b/ten-doubts-about-roku-account-setup-you-should-clarify-4cmi</link>
      <guid>https://dev.to/lucas_leo_0f2377379d80e5b/ten-doubts-about-roku-account-setup-you-should-clarify-4cmi</guid>
      <description>&lt;p&gt;Adding the channels from the Roku Channel store is one of the significant processes that every user must know to utilize his Roku Streaming Device to its utmost level. A user can simply add or remove channels with the help of the Roku Remote. You need to search for the required channel in the Streaming Channels option then have to type the name of it and have to wait until the results of the search channel doesn’t appear on the screen. You can do it directly through the Roku remote without going through the Roku login screen.&lt;br&gt;
&lt;a href="https://rokulogin.com/"&gt;https://rokulogin.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>python</category>
    </item>
  </channel>
</rss>
