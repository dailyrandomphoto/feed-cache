<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to configure VSCode Bracket Pair Colors Natively</title>
      <author>Aman Mittal</author>
      <pubDate>Wed, 13 Oct 2021 17:46:41 +0000</pubDate>
      <link>https://dev.to/amanhimself/how-to-configure-vscode-bracket-pair-colors-natively-3nl</link>
      <guid>https://dev.to/amanhimself/how-to-configure-vscode-bracket-pair-colors-natively-3nl</guid>
      <description>&lt;p&gt;With an &lt;a href="https://code.visualstudio.com/updates/v1_60#_high-performance-bracket-pair-colorization"&gt;update in August 2021&lt;/a&gt;, VSCode started supporting Bracket pair colorization natively. It means there is no need to use the &lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;Bracket Pair Colorizer&lt;/a&gt; extension (&lt;em&gt;which I love&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;In their official announcement, the VSCode team states they choose to implement this feature natively to address performance issues.&lt;/p&gt;

&lt;p&gt;I recently uninstalled the extension and thought, let's try to use the editor without any bracket color extension. I cannot. I've been using the extension &lt;a href="https://amanhimself.dev/blog/how-i-configure-vscode-for-everything/"&gt;as long as I remember&lt;/a&gt; and I cannot go back to plain, colorless brackets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5_snGxXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JBOVcnV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5_snGxXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JBOVcnV.png" alt="ss1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To enable this setting, open the &lt;code&gt;settings.json&lt;/code&gt; file for the VSCode editor and add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.bracketPairColorization.enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"workbench.colorCustomizations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketHighlight.foreground1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#ffb86c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketHighlight.foreground2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#8be9fd"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketHighlight.foreground3"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#bd93f9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketHighlight.foreground4"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#50fa7b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketHighlight.foreground5"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#f1fa8c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketHighlight.foreground6"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#abb2c0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketHighlight.unexpectedBracket.foreground"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#ff5555"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And tweak the colors according to your style!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JeDd8Vqa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/tSgx02e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JeDd8Vqa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/tSgx02e.png" alt="ss2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By the way, the above colors are from &lt;a href="https://draculatheme.com/contribute"&gt;Dracula theme's üßõ‚Äç‚ôÇÔ∏è color palette&lt;/a&gt; to match the overall editor theme I am currently using.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>vscode</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>10 Free KubeCon virtual passes just for your comments!</title>
      <author>CAST AI</author>
      <pubDate>Wed, 13 Oct 2021 17:44:53 +0000</pubDate>
      <link>https://dev.to/castai/10-free-kubecon-virtual-passes-just-for-your-comments-15la</link>
      <guid>https://dev.to/castai/10-free-kubecon-virtual-passes-just-for-your-comments-15la</guid>
      <description>&lt;p&gt;Hey Dev.to community! Kubecon NA has already started and since we know how much you guys love kubernetes, we figured that CAST AI could give away 10 free tickets to those who haven't had a chance to attend Kubecon NA this year.&lt;/p&gt;

&lt;p&gt;The instructions are simple(FIFO): &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Say hi to CAST AI under this post or leave any other comment;&lt;/li&gt;
&lt;li&gt;That's it!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll reach out to the first 10 people to leave comments and send out those free invitations. Be sure to visit our booth and check all of the demos that we've got prepared! &lt;/p&gt;

&lt;p&gt;&lt;a href="http://cast.ai/kubecon"&gt;http://cast.ai/kubecon&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>cloud</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>6 CSS features you need to know about....</title>
      <author>Rajeswaran</author>
      <pubDate>Wed, 13 Oct 2021 17:12:03 +0000</pubDate>
      <link>https://dev.to/rajezz/6-css-features-you-need-to-know-about-3b72</link>
      <guid>https://dev.to/rajezz/6-css-features-you-need-to-know-about-3b72</guid>
      <description>&lt;p&gt;Hi üëã,&lt;/p&gt;

&lt;p&gt;Although being a Full Stack Web developer, I'm quite fond of designing beautiful UI.&lt;/p&gt;

&lt;p&gt;I would love to share with you some of the cool CSS features that you should know.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-var"&gt;
  &lt;/a&gt;
  #1 - var()
&lt;/h3&gt;

&lt;p&gt;Variables have been available for many years with CSS preprocessing tools like Sass and Less. CSS variables, officially called CSS custom properties, were introduced later. Support for CSS variables was not great until more recently. They are now supported in all modern browsers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: CSS variables are not supported in Internet Explorer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why would we want to use variables in CSS? Suppose you're designing a website for a company. You use their brand color, #1092b3, in many places throughout your CSS. Later, the site is going through a rebranding, and the brand color is changing. You&lt;br&gt;
now have to change the brand color in every place you used #1092b3.&lt;br&gt;
Instead, you can define a brand-color variable and reference that variable everywhere you need to use the brand color. Later, when that color changes, you simply need to change the color value once in the variable declaration.&lt;/p&gt;

&lt;p&gt;CSS variables are declared with two dashes followed by the variable name, such as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--brand-color: #3FA2D9;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To reference a variable‚Äôs value later, you need to pass the variable name to the var function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;background-color: var(--brand-color);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-calc"&gt;
  &lt;/a&gt;
  #2 - calc()
&lt;/h3&gt;

&lt;p&gt;The calc function lets you combine the different units for calculating an exact amount. Main advantages of using calc are&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Mixed units can be used in the calculation.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
    padding: calc(1.5rem - 10px);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;It works with CSS custom properties or variables.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {
    --spacing: 0.5rem
}

.container {
    padding: calc(var(--spacing) * 2);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-position-sticky"&gt;
  &lt;/a&gt;
  #3 - position: sticky
&lt;/h3&gt;

&lt;p&gt;The element acts as a relatively positioned element, scrolling with the document. When the element reaches a specified point, it turns into a fixed element. This point is specified via a top, right, bottom, or left value.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: position: sticky is not supported in Internet Explorer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rajezz777/embed/xxLGaNV?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-magic-of-whitespace-overflow-amp-textoverflow-used-together"&gt;
  &lt;/a&gt;
  #4 - Magic of white-space, overflow &amp;amp; text-overflow used together
&lt;/h3&gt;

&lt;p&gt;Your design may require that text must fit within its container without overflowing or wrapping. This can easily be accomplished by using the &lt;strong&gt;&lt;code&gt;white-space, overflow, and text-overflow&lt;/code&gt;&lt;/strong&gt; properties together.&lt;/p&gt;

&lt;p&gt;First, white-space is set to nowrap. This ensures the text does not wrap but will in turn cause the text to overflow the container. By setting overflow to hidden, we can hide the overflowing content. However, then the text is abruptly cut off at the end of the container. Finally, we can set text-overflow to ellipsis to truncate the text and add an ellipsis at the end.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rajezz777/embed/mdMJzMj?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-firstletter"&gt;
  &lt;/a&gt;
  #5 ::first-letter
&lt;/h3&gt;

&lt;p&gt;Applies the styles only to the first letter of the first line of an element.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rajezz777/embed/gOxpBzZ?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-prefersreducedmotion"&gt;
  &lt;/a&gt;
  #6 prefers-reduced-motion
&lt;/h3&gt;

&lt;p&gt;Some users may have vestibular or seizure disorders that can be triggered by rapidly moving or flashing elements in your pages. You should be mindful of this when designing your animations. Most modern operating systems allow users to disable, or reduce, animations to help alleviate this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
  @keyframes spin {
    from {
      transform: rotate(0deg);
    }

    to {
      transform: rotate(360deg);
    }
  }

  .loader {
    width: 10rem;
    height: 10rem;
    background: skyblue;
    animation: spin 500ms linear infinite;
  }
&amp;lt;/style&amp;gt;
&amp;lt;div class="loader"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This results in a square that spins very quickly, making one full rotation every 500ms.&lt;/p&gt;

&lt;p&gt;This could trigger seizures or other issues, as it moves very fast. We can conditionally disable the animation by using the prefers-reduced-motion media query.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media (prefers-reduced-motion: reduce) {
  .loader {
    animation: none;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When this page is loaded on a system where the user has disabled motion, the box will not be animated.&lt;/p&gt;

&lt;p&gt;The prefers-reduced-motion query has two supported values: &lt;strong&gt;&lt;code&gt;reduce&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;no-preference&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: prefers-reduced-motion is not supported in Internet Explorer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's it for now. üòâ&lt;/p&gt;

&lt;p&gt;Also, I know there are plenty of cool features in CSS. But writing them would eventually end up in a Book. But, I thought, why can't we pick a few of them.&lt;/p&gt;

&lt;p&gt;I hope you came to know about one new feature on CSS.&lt;/p&gt;

&lt;p&gt;Thank you! Have a great day üéâ&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What is Focus Time? How to Prioritize Productivity</title>
      <author>b.j.</author>
      <pubDate>Wed, 13 Oct 2021 17:04:38 +0000</pubDate>
      <link>https://dev.to/bettyyjean/what-is-focus-time-how-to-prioritize-productivity-4oig</link>
      <guid>https://dev.to/bettyyjean/what-is-focus-time-how-to-prioritize-productivity-4oig</guid>
      <description>&lt;p&gt;Another busy week gone by, and somehow your to-do list was neglected once again! Your tasks are adding up way faster than you can check them off, and as much as you need a quiet week to catch up, there isn't one on the horizon.&lt;/p&gt;

&lt;p&gt;And while you and your team are super busy, it doesn't always translate to being productive. The problem with busy work culture is that it's all too easy to get caught up in other people's priorities. Suddenly your calendar is slammed with all types of meetings - group updates, brainstorming meetings, and information sharing sessions, which leaves you little to no time for your actual work! What's worse, each distraction just eats further away at your productivity.&lt;/p&gt;

&lt;p&gt;It takes an average of &lt;a href="https://www.forbes.com/sites/nicolebendaly/2020/05/10/digital-distractions-are-hurting-your-team-three-things-you-can-do/?sh=6120ad276cb7"&gt;23 minutes and 15 seconds&lt;/a&gt; to get back on track after being interrupted from a task according to Gloria Mark, Professor at the University of California, Irvine. That's almost 5% of your entire workday! You can see how just a few interruptions can quickly eat away at your productivity. So if you're interrupted three times, 15% of your day quickly becomes getting back on task, but on a bad day, you might be interrupted a dozen or more times, and suddenly over half of your time is gone. That is, until you reclaim some of that focus time back.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reclaim.ai/blog/what-is-focus-time?utm_source=devto&amp;amp;utm_medium=blog-published&amp;amp;utm_campaign=what-is-focus-time&amp;amp;utm_term="&gt;In this post&lt;/a&gt;, learn how to create focus time in your busy schedule to make real progress on your priorities and improve your overall productivity every week.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-focus-time"&gt;
  &lt;/a&gt;
  What is focus time?
&lt;/h2&gt;

&lt;p&gt;Focus time is a dedicated block of time that you set aside for productive work on a task or project, without interruption. This time management strategy allows you to prioritize the important work that requires your undivided attention so you can actually produce high quality results. Regardless of whether you're a manager or maker, or need to spend time writing, coding, designing, or researching, making time on your calendar for heads-down work will not only help you get it done, but done faster with less room for interruptions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-it-important"&gt;
  &lt;/a&gt;
  Why is it important?
&lt;/h2&gt;

&lt;p&gt;Focus time is important because it allows you to dedicate your full attention to the task at hand without the added distraction of meetings or interruptions. Oftentimes, you find yourself splitting your focus on two or more tasks at once, or multitasking, and that can come at the expense of missing details, deadlines, or a critical task altogether. By adopting a focus time routine, you're able to increase your efficiency and quality of work with a &lt;a href="https://reclaim.ai/blog/single-tasking"&gt;single-tasking&lt;/a&gt; approach towards your to-do list.&lt;/p&gt;

&lt;p&gt;As you well know, one of the biggest challenges of navigating a busy workweek is actually finding the time to enter a productive state of deep work. After all, it's hard when your attention is constantly being fought over by the many workday distractions, or low-value tasks that can pile up and quickly overwhelm an afternoon. By giving yourself time to actually get into your groove, you enter a flow state where everything is clicking and you're able to make significant progress on your work.¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#top-work-distractions"&gt;
  &lt;/a&gt;
  Top work distractions
&lt;/h3&gt;

&lt;p&gt;Focus time is used to combat distractions throughout your workday - here are the top work distractions that most professionals are working around:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Scattered meetings: The average middle manager spends &lt;a href="https://blog.otter.ai/meeting-statistics/"&gt;35% of their time&lt;/a&gt; in meetings, and up to 50% for upper management.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Slack interruptions: The average Slack user spends &lt;a href="https://slack.com/intl/en-gb/blog/news/intl-en-gb-work-is-fuelled-by-true-engagement"&gt;90 minutes per working day&lt;/a&gt; reading, writing, commenting and searching in Slack.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Social media &amp;amp; news sites: The average employee spends &lt;a href="https://theundercoverrecruiter.com/infographic-how-much-time-do-you-waste-social-networks/"&gt;12% of their work day&lt;/a&gt; using unproductive sites, like Facebook, Twitter and YouTube.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Email: The average employee spends &lt;a href="https://ppm.express/blog/how-much-time-your-employees-spend-on-checking-emails/"&gt;28% of their work day&lt;/a&gt; on email, and checks their email 11 times per hour.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Multitasking rabbit holes: The average employee receives up to &lt;a href="https://www.concur.com/newsroom/article/how-workplace-distractions-and-multitasking-hurt-employee-productivity-and-focus"&gt;200 notifications a day&lt;/a&gt;, causing task-switching and disengagement from their core work.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#focus-time-benefits"&gt;
  &lt;/a&gt;
  Focus time benefits
&lt;/h3&gt;

&lt;p&gt;So how does focus time help you combat the constant flood of workday interruptions? By giving you the permission you need to disengage from distractions and focus on the work you need to get done.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Give your brain the opportunity to settle into a task, entering a &lt;a href="https://reclaim.ai/blog/cant-focus-at-work"&gt;productive state of flow&lt;/a&gt; for deep work, so you can be up to 500% more productive on your project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prevent interruptions that cause you to &lt;a href="https://reclaim.ai/blog/context-switching"&gt;context switch&lt;/a&gt;, our tendency to jump between one unrelated project to another, so you can avoid catching up after you've been pulled away from a task.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Work faster by focusing on one thing at a time, or &lt;a href="https://reclaim.ai/blog/single-tasking"&gt;single tasking&lt;/a&gt;, so you don't slow your brain down by trying to multitask through complex problems and projects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prioritizing your important work during your actual working hours so you can eliminate the need to work overtime, helping to prevent yourself from experiencing &lt;a href="https://reclaim.ai/blog/workplace-burnout"&gt;workplace burnout&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When your calendar is filled with meetings every other hour, and Slack and email catch up in-between, you're forced to constantly context switch, which can prevent you from even opening up your to-do list on any given day. With the average middle manager spending 35% of their time in meetings, another 5% getting back on track after each, and then 28% catching up on email, you're not left with a lot of time for productive work. These distractions are some of the key reasons why focus time matters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;So, how should you structure your focus time? A good way to think about it is by the types of tasks you need to get done, and their level of difficulty. Cal Newport, productivity expert and author of &lt;a href="https://www.calnewport.com/books/deep-work/"&gt;Deep Work&lt;/a&gt;, pioneered a new way of focusing your work sessions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Shallow Work: This is your non-cognitively demanding logistical work like email, slack, and quick tasks that can be performed while distracted, and usually done in short working sessions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deep Work: These sessions consist of your cognitively demanding work dedicated to your true priorities, requiring deep thinking without distraction so you can push your brainpower to its limits, usually performed in longer working sessions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So how much time should you spend on each? This very much depends on your role, but most importantly, it's about doing them right. Bundle all of your shallow work together so it's not slowing or blocking anything during your deep work sessions. And try to set yourself up for as much deep work as you can! Realistically, the brain can't do more than &lt;a href="https://www.theladders.com/career-advice/you-cant-do-deep-work-for-more-than-4-hours-per-day"&gt;4 hours of deep work&lt;/a&gt; per day, so if you have the time in your role, set that as the "most aggressive" goal for cognitively demanding work on your calendar.&lt;/p&gt;

&lt;p&gt;There are also many different &lt;a href="https://reclaim.ai/blog/time-blocking-planner"&gt;time blocking methods&lt;/a&gt; you can try to optimize your focus time, like the Pomodoro technique which works by setting a series of timers to give yourself frequent breaks during a focus time session. You work for 25 minutes, give yourself a 5-minute break, and repeat 4 times for a 30-minute reward break after 2 hours. Or, if you have a few big projects or responsibilities on your plate, you could try day-theming to target a focus for each day of the week. Task batching is another useful process which groups similar, quick low-value tasks together for your shallow work so you can cruise through your deep work focus sessions without those distractions.&lt;/p&gt;

&lt;p&gt;Look, there are a lot of methods, but don't let that distract you from just making time for it any way you can.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#focus-time-best-practices"&gt;
  &lt;/a&gt;
  Focus time best practices
&lt;/h2&gt;

&lt;p&gt;As we mentioned above, the most important way to get focus time is to actually schedule it on your calendar -- but is it really that easy in practice? Unfortunately not. Here are some of the major why people aren't blocking time for focus time on their calendars regularly:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Time blocks are inflexible and static. Something changes, and you now have more work to do in rescheduling your focus time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Time blocks make you unavailable for meetings, which in many roles and organizations, is just not realistic. This often creates more work because people have to ping you to find time. Bleh!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Time blocks aren't intentional enough. You block time, then you struggle with what to do with it, and ultimately end up getting lost in your to-do list and start multitasking.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interruptions still happen. If your Slack is going off every 5 seconds and your phone is buzzing with social media notifications, your time block ain't gonna help you.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, there are steps to make this process way simpler to approach and easy implement into your regular work routine:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#plan-your-time"&gt;
  &lt;/a&gt;
  Plan your time
&lt;/h3&gt;

&lt;p&gt;The first step is of course finding the time, but it will quickly go to waste if you don't have a solid action plan for how you're going to focus on and prioritize your work. Without a plan, it's all too easy to get caught up clearing your email, checking updates, or just poking around your task list without knowing what to focus on!&lt;/p&gt;

&lt;p&gt;Focus time needs to be intentional! If your time blocks aren't intentional, then prioritizing them is really hard. While some tools like &lt;a href="https://reclaim.ai/blog/clockwise-vs-reclaim"&gt;Clockwise&lt;/a&gt; will help you block fixed slots without meetings, these time blocks don't help you determine what to do with this time. Reclaim on the other hand, blocks out time that is specific to the tasks you need to accomplish, giving you a clearer view of what's on your plate and how long you need to get through your most important to-dos. These assigned blocks of time will also help you stay on task, and prevent you from bouncing aimlessly from one thing to another.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yxn7cuvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/Aux3A37qhEYFq_fRlfdODn5FYhZRravhyMYDU55r7XH552zJbkISQhi9NsQeMq2VAYMjAyB-aDLk1cLxvPXbtfUODGAHa7sjfNKh8EK5lblvpoStPCUyW1uJ2M8wJG7AqQGHLI7q%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yxn7cuvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/Aux3A37qhEYFq_fRlfdODn5FYhZRravhyMYDU55r7XH552zJbkISQhi9NsQeMq2VAYMjAyB-aDLk1cLxvPXbtfUODGAHa7sjfNKh8EK5lblvpoStPCUyW1uJ2M8wJG7AqQGHLI7q%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prevent-interruptions"&gt;
  &lt;/a&gt;
  Prevent interruptions
&lt;/h3&gt;

&lt;p&gt;Slack is a great tool, but it's also one of the worst offenders for interruption. On average, employees at large companies are each sending more than &lt;a href="https://www.vox.com/recode/2019/5/1/18511575/productivity-slack-google-microsoft-facebook"&gt;200 Slack messages per week&lt;/a&gt;! One tool that people use to prevent interruptions in Slack is setting their status, and specifically setting do not disturb / DND. The challenge? Keeping your status up-to-date is another thing you have to remember to do, and you don't want to necessarily be uninterruptible all of the time.&lt;/p&gt;

&lt;p&gt;But, you can use tools like Reclaim to automatically &lt;a href="https://reclaim.ai/features/slack-integration"&gt;sync your Slack status&lt;/a&gt; to your calendar, customize your status by event type, and auto-set DND for events you really can't be interrupted in. There are other integrations like Google Calendar for Slack that works similarly, but the only status it will sync is "In a meeting", and doesn't sync shared calendar events, or allow you to automate DND. So, if you're working through an important focus time session and need to harvest 100% of your brainpower to meet a deadline, DND is what you need to block the non-stop flood of Slack messages so you're not pulled out of deep work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--76GYHXk7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/mTSKKmO_RsPQwNQT5E9kH0ZQjKWiIJg0oMDT6Ende1lITUySds2HOyL6c9rCcNvd6WOzwbcTldYPKVexxCrhrMaMqQuwCZqKNWShOKNGhGWIEkkdv_Uhd3yIxslO2U1EvFUqBRFa%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--76GYHXk7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/mTSKKmO_RsPQwNQT5E9kH0ZQjKWiIJg0oMDT6Ende1lITUySds2HOyL6c9rCcNvd6WOzwbcTldYPKVexxCrhrMaMqQuwCZqKNWShOKNGhGWIEkkdv_Uhd3yIxslO2U1EvFUqBRFa%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So while interruptions can be difficult to prevent, you can defend yourself by anticipating them ahead of time. First being to communicate context around what you are working on. While a basic "focus time" block on your calendar may just be construed as time not spent in meetings (and totally interruptible), your colleagues will think twice before they try to steal your time during a "Write important strategy plan" or "Troubleshoot critical bug" time block on your calendar. By the simple act of communicating through an event title, you are sharing your priorities with your team, defending your focus time, and increasing the weight of their decision on imposing their own priorities to interrupt yours. And, if you sync your Slack status with your schedule, you're doubling the communication power of that calendar context.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-flexible"&gt;
  &lt;/a&gt;
  Stay flexible
&lt;/h3&gt;

&lt;p&gt;Another important part of focus time is staying flexible within your schedule. You might have every intention of working on that slide deck you've been putting off, but if an emergency customer meeting comes up that requires your attention, you need to have enough flexibility in your schedule that you can adapt without having to stress. It's far too common for all the hard work you put into your scheduling to go down the drain when a new urgent priority drops and it's all hands on deck. Now you're faced with completely rearranging your schedule once again.&lt;/p&gt;

&lt;p&gt;Not only is staying flexible important for you, but it is also important for your team! Priorities change, new opportunities arise, and you need to be able to adapt and accommodate. Rigid schedules and time blocks make this very difficult, and can make you inaccessible and unavailable for collaboration.&lt;/p&gt;

&lt;p&gt;This is where you might benefit with a smart time blocking tool like Reclaim. You're able to block time for your tasks and regular routines throughout your week, but these time blocks stay flexible to accommodate new meeting requests and priorities. As your schedule fills up, Reclaim will shift your time blocks from "free" time, or bookable time, to "busy" to maximize your availability while defending your focus time. Having a balance of availability and focus is key to actually executing on focus time as a methodology!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#estimate-your-needs"&gt;
  &lt;/a&gt;
  Estimate your needs
&lt;/h3&gt;

&lt;p&gt;In order to really maximize the productivity of your focus time, it's important to estimate your needs! If you have an entire afternoon blocked for focus time, how much can actually get through on your to-do list? By incorporating time estimates, due dates and priority levels into your focus time planning, you can clearly see what you have time to get done in a week so you can better forecast your time and prioritize your workload.&lt;/p&gt;

&lt;p&gt;With Reclaim's Planner, you can see what your week really looks like. You not only get a full picture of all your meetings, tasks and regular routines, but you have a priority list on the side to visualize what's most urgent, scheduled, completed, and most importantly, unscheduled. Time does not lie, and if you don't have time to get through everything, you're going to have to kick some stuff out to next week. Reclaim forces you to think about budgeting your time, without actually forcing you to "overthink" it. Just declare what you need, how long you think it will take, and Reclaim tells you what the reality is through your calendar. So whether you need to trim back on meetings this week, or push out some lower priority projects, it's imperative you understand how much focus time you actually have time for, and what you can feasibly do with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#focus-time-examples"&gt;
  &lt;/a&gt;
  Focus Time examples
&lt;/h2&gt;

&lt;p&gt;So how much focus time do you need? This entirely depends on your role and responsibilities! If you're a manager, you probably need to spend a majority of your week collaborating and leading your team, but if you're an engineer, you likely need to allocate most of your workweek towards your heads-down work. Every person has a different schedule and work demands, so your focus time will be completely unique to your role and personal style of work. Here are a couple focus time examples to help you get started:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Engineer needs to preserve at least 30 hours of focus time/week&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Salesperson wants 1 hour/day and 3 hours on Friday for follow-ups and CRM notes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Product manager needs 2 hours, 2 times/week for priority planning&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;VP needs 2 hours every Tuesday to review status reports&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Content writer needs 10 hours/week to develop a new blog post¬†&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-add-focus-time-to-your-calendar"&gt;
  &lt;/a&gt;
  How to add focus time to your calendar
&lt;/h2&gt;

&lt;p&gt;Let's walk through adding focus time to your calendar using Good, Better and Best approaches so you can make time for your important work sessions every week.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-focus-time-blocks-without-a-plan-good"&gt;
  &lt;/a&gt;
  Create "Focus Time" blocks without a plan - Good üôÇ
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a new &lt;a href="https://app.reclaim.ai/habits"&gt;Habit&lt;/a&gt; in Reclaim for "Focus Time"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customize the time window, duration, and frequency of your focus time Habit&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save and auto-schedule your focus time every week!¬†&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a good way to make sure you have time for productive work every week, and leverage smart time blocking to maximize your calendar availability, but it lacks intentionality and context as your focus time blocks are unplanned and without purpose. Make sure to have a plan in place before your focus time sessions so you don't waste it wondering how to spend your time!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-focus-time-blocks-on-a-set-schedule-better"&gt;
  &lt;/a&gt;
  Create "Focus Time" blocks on a set schedule - Better üòé
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a "Focus Time" event in Google Calendar (one-time or recurring)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change the event availability from "Free" to "Busy"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add &lt;a href="https://help.reclaim.ai/en/articles/5464974-use-reclaim_free-to-create-no-meeting-days-or-times"&gt;#reclaim_free&lt;/a&gt; to the event description&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save &amp;amp; defend your focus time!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While creating a focus time block on a set schedule guarantees you time for solo work, the problem is that it locks you in, leaving you inaccessible for new meetings and collaboration opportunities. Rigid, fixed time blocks on Google Calendar aren't able to adjust to maximize the availability of your schedule like the smart time blocking options in the Good and Best options, which are increasingly important as many companies shift to a global workforce collaborating across time zones.&lt;/p&gt;

&lt;p&gt;However, the advantage here is that Reclaim &lt;a href="https://app.reclaim.ai/tasks"&gt;Tasks&lt;/a&gt; and &lt;a href="https://app.reclaim.ai/habits"&gt;Habits&lt;/a&gt; are auto-scheduled within these time blocks when you use #reclaim_free, allowing you to prioritize your most important work in your focus time sessions. This is also a great approach to blocking an entire day for productive work via &lt;a href="https://reclaim.ai/blog/no-meeting-day"&gt;no-meeting days&lt;/a&gt; so you can reduce distractions, increase productivity, and boost morale across your entire team.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-focus-time-by-time-blocking-your-habits-and-tasks-best"&gt;
  &lt;/a&gt;
  Create "Focus Time" by time blocking your Habits and Tasks - Best ü§©
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Set up all of your &lt;a href="https://app.reclaim.ai/habits"&gt;Habits&lt;/a&gt; in Reclaim&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set up your weekly &lt;a href="https://app.reclaim.ai/tasks"&gt;Task&lt;/a&gt; list in Reclaim (&lt;a href="https://app.reclaim.ai/settings/integrations"&gt;new Tasks integrations&lt;/a&gt; coming soon)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prioritize your Task list via the Planner as things change&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Auto-schedule your focus time by priority every day!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is the best way to set up and optimize your focus time because you're keeping your schedule flexible and oriented around your priorities. If you're just getting started, think through your routines. What do you need to do often? What do you end up doing in the late hours or weekends? Then create Habits for the maximum time range you could envision those routines taking so you can start reigning them back into your core working hours. Next, take your top 3-5 Tasks, especially those that you know are going to take more than an hour or two to complete, and add them to Reclaim. As your week progresses, you can reprioritize and push stuff off as needed using the Planner, and at the end of the week, you'll get to see just how much more you accomplished through your &lt;a href="https://app.reclaim.ai/stats"&gt;calendar productivity stats&lt;/a&gt; and &lt;a href="https://help.reclaim.ai/en/articles/5389397-weekly-reports-overview"&gt;weekly report&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It may seem like a little more effort on your part, but you're basically just integrating your existing to-dos with your calendar so your workday is aligned around what you actially have to get done. You will get that time back tenfold by putting the effort into strategically planning which tasks are the highest priority, and how long you need to get them done.¬†&lt;/p&gt;

&lt;p&gt;Focus time is an amazing method for productivity. It not only allows you to get more done in far less time, it also helps you eliminate overtime from your schedule to help you improve your work-life balance. While there are many ways to approach your focus time, the most important thing is just getting it on the calendar so you can start dedicating a healthy portion of your workweek towards productive progress on your priorities. Just remember, the more you put into efficiently using your focus time, the more you will get back! If you have any focus time tips you want to share with us, tweet us @reclaimai.&lt;/p&gt;

</description>
      <category>saas</category>
      <category>productivity</category>
      <category>timemangement</category>
      <category>focus</category>
    </item>
    <item>
      <title>A Modern OS for the Power User</title>
      <author>Arghya Sarkar</author>
      <pubDate>Wed, 13 Oct 2021 16:51:44 +0000</pubDate>
      <link>https://dev.to/arghyasarkar/a-modern-os-for-the-power-user-2koe</link>
      <guid>https://dev.to/arghyasarkar/a-modern-os-for-the-power-user-2koe</guid>
      <description>&lt;p&gt;Hey Guys!&lt;br&gt;
I am Arghya Sarkar! Lead Developer of CalinixOS. Some of you may already know what Calinix is, some of you don't, but this article is going to explain the current state at where Peregrine is at.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-calinix"&gt;
  &lt;/a&gt;
  What is Calinix?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Three Words:&lt;/strong&gt; Power, Beauty, Speed&lt;/p&gt;

&lt;p&gt;That's what the Calinix Project is based on! We make products that give you a beautiful interface, a powerful and quick-to-work-in professional desktop and tools you can work on smoothly. We believe that when you are on your keyboard, you get more efficiency and comfortability to work. If you are among those, Calinix is making products for your kind. Calinix Team even believes in speed, so we deliver applications which are fast, even on low end hardware, as your hardware shouldn't decide your workflow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-calinixos"&gt;
  &lt;/a&gt;
  What's CalinixOS?
&lt;/h2&gt;

&lt;p&gt;CalinixOS is a Linux Distribution I'm developing currently with my other fellow friends. Its made for the Power user who likes to stay on the keyboard, using mouse less and making people's life faster. We try to make our OS the way you can be most productive in. We value your speed of work. Calinix may take some time to get used to, but when you master it, you are on your one stop destination for fastest work. It is currently under development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;p&gt;Repository: &lt;a href="https://github.com/Calinix-Team/Calinix-Arch"&gt;https://github.com/Calinix-Team/Calinix-Arch&lt;/a&gt;&lt;br&gt;
Official Discord Server: &lt;a href="https://discord.gg/MtQddKmevk"&gt;https://discord.gg/MtQddKmevk&lt;/a&gt;&lt;br&gt;
Official Website: &lt;a href="https://get.calinix.tech"&gt;https://get.calinix.tech&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h2&gt;

&lt;p&gt;What's so special in this distribution?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Just Open the Box. Calinix is Arch, but not necessarily as hard as Arch Installation. Calinix comes with various packages, modern interface and a calamares installer out of the box&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arch without Hassle. Yes, it's based on pure Arch with no custom package control, making your distribution rolling release, reliable and have infinite possibilities&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Community Support. Facing a problem? The official developers along with other friendly people of the community await you in the reddit, discord server and forum. We highly care for our community and like to help them in each way we can.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The "Power User" kind-of desktop. With Vim, awesomeWM, Rofi and many other pre built configs, Calinix is a perfect choice for the linux "power users", with perfection! Though it shares it's looks with MacOSX, it is a lot more keyboard centric than MacOS&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#macos-vs-calinix"&gt;
  &lt;/a&gt;
  MacOS vs Calinix
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;UI&lt;/strong&gt;&lt;br&gt;
The UI is almost the same in Calinix, a centered dock, Mac like title bar and icon pack make it a lot similar to MacOS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Customization&lt;/strong&gt;&lt;br&gt;
When MacOS has its limitations, customization in Calinix is limitless. And that actually is about linux as a whole, install any DE/WM and customize it your own way. CalinixOS comes with the awesomewm which is one of the most customizable WMs and can be turned into anything if you wish.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code&lt;/strong&gt;&lt;br&gt;
Calinix is completely Free and Open Source. Unlike MacOS which is proprietary and paid, limited to its capabilities of Apple Devices only. Mac is as an Apple-exclusive. If you want to assemble a PC or get a budget laptop (with DOS) and expect to install Mac OS, it‚Äôs almost impossible. Mac comes baked in with the system Apple manufactures.&lt;/p&gt;

&lt;p&gt;Besides, you can even modify the source code of your OS to add/remove something (which requires necessary technical knowledge) and create your own custom OS. Can you do that on Mac OS?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A lot of people are all praises for iOS and Mac for being a secure platform. Well, yes, it is secure in a way (maybe more secure than Windows OS), but probably not as secure as Linux. Number of Malware in Mac increases every day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calinix and Linux in Development&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using Linux doesn‚Äôt make you a super-intelligent being and could possibly get you any IT related job.&lt;/p&gt;

&lt;p&gt;However, as you start using Linux and exploring it, you gain experience. As a techie, sooner or later you dive into the terminal, learning your way to move around the file system, installing applications via command line. You won‚Äôt even realize that you have learned the skills that newcomers in IT companies get trained on.&lt;/p&gt;

&lt;p&gt;In addition to that, Linux has enormous scope in the job market. There are so many Linux related technologies (Cloud, Kubernetes, Sysadmin etc.) you can learn, earn certifications and get a nice paying job. And to learn these, you have to use Linux. Mac may be better in development than Windows but can't match capabilities of Linux&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reliability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Calinix offers more control to the user while providing better security. Mac OS does not provide you with the full control of its platform. It does that to make things easier for you simultaneously enhancing your user experience. With Calinix, you can do whatever you want ‚Äì which may result in poor user experience (for some) ‚Äì but it does make it more reliable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#download-calinix-alpha-53c"&gt;
  &lt;/a&gt;
  Download Calinix Alpha 5-3c
&lt;/h2&gt;

&lt;p&gt;Grab the latest ISO from here:&lt;br&gt;
&lt;a href="https://github.com/Calinix-Team/Calinix-Arch/releases/download/0.5-3c/CalinixOS-Arch-2021.09.24-x86_64.iso"&gt;https://github.com/Calinix-Team/Calinix-Arch/releases/download/0.5-3c/CalinixOS-Arch-2021.09.24-x86_64.iso&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE: If you are running it in a VM, kill picom compositor at first to experience smooth performance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Live Boot Details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Username: calinix&lt;/li&gt;
&lt;li&gt;Password: calinix&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#contribution"&gt;
  &lt;/a&gt;
  Contribution
&lt;/h2&gt;

&lt;p&gt;Currently we need developers yes! Our team needs some expansion. We need people with any one of these skills:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arch Linux Experience (not Manjaro)&lt;/li&gt;
&lt;li&gt;AUR Packaging Capabilities&lt;/li&gt;
&lt;li&gt;Marketing&lt;/li&gt;
&lt;li&gt;Bash Scripting Capabilities&lt;/li&gt;
&lt;li&gt;Plymouth Themes and setup&lt;/li&gt;
&lt;li&gt;GUI App Developers &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;urgent tasks to be fulfilled&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adding chaotic-aur to Calinix by default&lt;/li&gt;
&lt;li&gt;Graphic Designers&lt;/li&gt;
&lt;li&gt;UI Designers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#contact-us"&gt;
  &lt;/a&gt;
  Contact Us
&lt;/h2&gt;

&lt;p&gt;If you wanna get in touch with us, join our Discord Server:&lt;br&gt;
&lt;a href="https://discord.gg/MtQddKmevk"&gt;https://discord.gg/MtQddKmevk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even if you want to contact with us for being a developer/contributor, join the discord server for the same.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Calinix is supposed to release it's first version  sometime in 2022-2023, make sure to show some support by starring the &lt;a href="https://github.com/Calinix-Team/Calinix-Arch"&gt;repo&lt;/a&gt; and make sure to press on the "Watch" button so you don't miss any updates.&lt;/p&gt;

&lt;p&gt;We would greatly appreciate any contributions, so if you find something that you can improve, open a pull-request! You can also check out our open issues&lt;/p&gt;

&lt;p&gt;Thanks so much for reading!&lt;/p&gt;

</description>
      <category>linux</category>
      <category>github</category>
      <category>productivity</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Web Scraping in Node.js!</title>
      <author>Code_Jedi</author>
      <pubDate>Wed, 13 Oct 2021 16:49:39 +0000</pubDate>
      <link>https://dev.to/code_jedi/web-scraping-in-nodejs-2lkf</link>
      <guid>https://dev.to/code_jedi/web-scraping-in-nodejs-2lkf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#web-scraping"&gt;
  &lt;/a&gt;
  Web scraping:
&lt;/h2&gt;

&lt;p&gt;Web Scraping is a way to collect all sorts of publicly available data like prices, text, images, contact information and much more from the world-wide-web. This can be useful when trying to collect data that might take a person a lot of time to collect and organize manually.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some of the most useful use cases of web scraping include:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Scraping product prices from e-commerce websites such as amazon, ebay or alibaba.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scraping social media posts, likes, comments, followers or bios.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scraping contacts from websites like yellowpages or Linkedin.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#puppeteer"&gt;
  &lt;/a&gt;
  Puppeteer
&lt;/h2&gt;

&lt;p&gt;While there are a few different libraries for scraping the web with Node.js, in this tutorial, i'll be using the puppeteer library.&lt;/p&gt;

&lt;p&gt;Puppeteer is a popular and easy to use npm package used for web automation and web scraping purposes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some of puppeteer's most useful features include:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Being able to extract a scraped element's text content.&lt;/li&gt;
&lt;li&gt;Being able to interact with a webpage by filling out forms, clicking on buttons or running searches inside a search bar.&lt;/li&gt;
&lt;li&gt;Being able to scrape and download images from the web.&lt;/li&gt;
&lt;li&gt;Being able to see the web scraping in progress using headless mode.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can read more about puppeteer &lt;a href="https://github.com/puppeteer/puppeteer"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;For this tutorial, I will suppose you already have &lt;strong&gt;npm&lt;/strong&gt; and &lt;strong&gt;node_modules&lt;/strong&gt; installed, as well as a &lt;strong&gt;package.json&lt;/strong&gt; and &lt;strong&gt;package-lock.json&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;If you don't, here's a great guide on how to do so: &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-node-js-modules-with-npm-and-package-json"&gt;Setup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To install puppeteer, run one of the following commands in your project's terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i puppeteer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add puppeteer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once puppeteer is installed, it will appear as a directory inside your node_modules.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-make-a-simple-web-scraping-script-in-nodejs"&gt;
  &lt;/a&gt;
  Let's make a simple web scraping script in Node.js
&lt;/h3&gt;

&lt;p&gt;The web scraping script will get the first synonym of "smart" from the web thesaurus by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Getting the HTML contents of the web thesaurus' webpage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finding the element that we want to scrape through it's selector.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Displaying the text contents of the scraped element.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uYsNi1UQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1yuk24tdujckpswg8en.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uYsNi1UQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1yuk24tdujckpswg8en.gif" alt="Scraping"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started!
&lt;/h3&gt;

&lt;p&gt;Before scraping, and then extracting this element's text through it's selector in Node.js, we need to setup a few things first:&lt;/p&gt;

&lt;p&gt;Create or open an empty javascript file, you can name it whatever you want, but I'll name mine "&lt;strong&gt;index.js&lt;/strong&gt;" for this tutorial. Then, require puppeteer on the first line and create the async function inside which we will be writing our web scraping code:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer')

async function scrape() {
}
scrape()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, initiate a new browser instance and define the "page" variable, which is going to be used for navigating to webpages and scraping elements within a webpage's HTML contents:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer')

async function scrape() {
   const browser = await puppeteer.launch({})
   const page = await browser.newPage()
}
scrape()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Scraping the first synonym of "smart"&lt;/p&gt;

&lt;p&gt;To locate and copy the selector of the first synonym of "smart", which is what we're going to use to locate the synonym inside of the web thesaurus' webpage, first go to the &lt;a href="https://www.thesaurus.com/browse/smart"&gt;web thesaurus' synonyms of "smart"&lt;/a&gt;, right click on the first synonym and click on "inspect". This will make this webpage's DOM pop-up at the right of your screen:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LUgj4uNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0g5w8duzsrv9clx2fff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUgj4uNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0g5w8duzsrv9clx2fff.png" alt="Inspect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, right click on the highlighted HTML element containing the first synonym and click on "copy selector":&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WpX-teFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tzgpz7rqxfirnfrjz9a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WpX-teFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tzgpz7rqxfirnfrjz9a.png" alt="Copy selector"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, to navigate to the web thesaurus, scrape and display the first synonym of "smart" through the selector we copied earlier:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, make the "page" variable navigate to &lt;a href="https://www.thesaurus.com/browse/smart"&gt;https://www.thesaurus.com/browse/smart&lt;/a&gt; inside the newly created browser instance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, we define the "element" variable by making the page wait for our desired element's selector to appear in the webpage's DOM.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The text content of the element is then extracted using the evaluate() function, and displayed inside the "text" variable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, we close the browser instance.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer')

async function scrape() {
   const browser = await puppeteer.launch({})
   const page = await browser.newPage()

   await page.goto('https://www.thesaurus.com/browse/smart')
   var element = await page.waitFor("#meanings &amp;gt; div.css-ixatld.e15rdun50 &amp;gt; ul &amp;gt; li:nth-child(1) &amp;gt; a")
   var text = await page.evaluate(element =&amp;gt; element.textContent, element)
   console.log(text)
   browser.close()
}
scrape()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#time-to-test"&gt;
  &lt;/a&gt;
  Time to test
&lt;/h3&gt;

&lt;p&gt;Now if you run your index.js script using "node index.js", you will see that it has displayed the first synonym of the word "smart":&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VAWi5h1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t65do4rq7bu4w962bvtw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VAWi5h1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t65do4rq7bu4w962bvtw.gif" alt="Test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scraping the top 5 synonyms of smart&lt;/p&gt;

&lt;p&gt;We can implement the same code to scrape the top 5 synonyms of smart instead of 1:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const puppeteer = require('puppeteer')

async function scrape() {
   const browser = await puppeteer.launch({})
   const page = await browser.newPage()

   await page.goto('https://www.thesaurus.com/browse/smart')
   for(i = 1; i &amp;lt; 6; i++){
    var element = await page.waitFor("#meanings &amp;gt; div.css-ixatld.e15rdun50 &amp;gt; ul &amp;gt; li:nth-child(" + i + ") &amp;gt; a")
    var text = await page.evaluate(element =&amp;gt; element.textContent, element)
    console.log(text)
   }
   browser.close()
}
scrape()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vzWmk0VK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44rfjhp90eu7k9163j0p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vzWmk0VK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44rfjhp90eu7k9163j0p.gif" alt="5 synonyms"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The "&lt;strong&gt;element&lt;/strong&gt;" variable will be: "&lt;strong&gt;#meanings &amp;gt; div.css-ixatld.e15rdun50 &amp;gt; ul &amp;gt; li:nth-child(1) &amp;gt; a&lt;/strong&gt;" on the first iteration, "&lt;strong&gt;#meanings &amp;gt; div.css-ixatld.e15rdun50 &amp;gt; ul &amp;gt; li:nth-child(2) &amp;gt; a&lt;/strong&gt;" on the second, and so on until it reaches the last iteration where the "element" variable will be "&lt;strong&gt;#meanings &amp;gt; div.css-ixatld.e15rdun50 &amp;gt; ul &amp;gt; li:nth-child(5) &amp;gt; a&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;As you can see, the only thing that is altered in the "element" variable throughout the iterations is the "li:nth-child()" value.&lt;/p&gt;

&lt;p&gt;This is because in our case, the elements that we are trying to scrape are all "li" elements inside a "ul" element,&lt;/p&gt;

&lt;p&gt;so we can easily scrape them in order by increasing the value inside "li:nth-child()":&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;li:nth-child(1) for the first synonym.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;li:nth-child(2) for the second synonym.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;li:nth-child(3) for the third synonym.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;li:nth-child(4) for the fourth synonym.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And li:nth-child(5) for the fifth synonym.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Final notes&lt;/p&gt;

&lt;p&gt;While web scraping has many advantages like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Saving time on manually collecting data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Being able to programmatically aggregate pieces of data scraped from the web.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating a dataset of data that might be useful for machine learning, data visualization or data analytics purposes.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It also has 2 disadvantages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Some websites don't allow for scraping their data, one popular example is craigslist.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some people consider it to be a gray area since some use cases of web scraping practice user or entity data collection and storage.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Hopefully this article gave you some insight into web scraping in Node.js, it's practical applications, pros and cons, and how to extract specific elements and their text contents from webpages using the puppeteer library.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>SML - The language I love to hate. (Recursion example).</title>
      <author>Eckhardt</author>
      <pubDate>Wed, 13 Oct 2021 16:46:33 +0000</pubDate>
      <link>https://dev.to/eckhardtd/sml-the-language-i-love-to-hate-recursion-example-mem</link>
      <guid>https://dev.to/eckhardtd/sml-the-language-i-love-to-hate-recursion-example-mem</guid>
      <description>&lt;p&gt;Standard ML has been around for a while, I never cared for it until enrolling at &lt;a href="https://github.com/ossu/computer-science"&gt;OSSU's program&lt;/a&gt;. It's a functional programming language with very interesting features like &lt;code&gt;immutability&lt;/code&gt; and relies heavily on the usage of recursion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-recursive-example-in-sml"&gt;
  &lt;/a&gt;
  A recursive example in SML
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sml"&gt;&lt;code&gt;&lt;span class="kr"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;*&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function can also be expressed as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sml"&gt;&lt;code&gt;&lt;span class="kr"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;*&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you use &lt;code&gt;factorial&lt;/code&gt; it may look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sml"&gt;&lt;code&gt;&lt;span class="kr"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;(*&lt;/span&gt;&lt;span class="cm"&gt; equivalent: 5 x 4 x 3 x 2 x 1 *)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in actual fact, this function actually (cheekily) multiplies by 1 again on the last iteration, which has no effect on the output: &lt;code&gt;120&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-sml-as-a-web-developer"&gt;
  &lt;/a&gt;
  Writing SML as a web developer
&lt;/h2&gt;

&lt;p&gt;During the course assignments it was a REAL pain to not have the ability to declare variables in the upper scope and change their value, or use loops, and dealing with the thinking work that goes into recursion. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hot tip: If a function accepts an Array / List that needs to be processed in a loop - it most probably can be done with recursion too. ü§ò&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#a-js-example-rewritten-in-sml"&gt;
  &lt;/a&gt;
  A JS example re-written in SML
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Return the sum of all elements in an array&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example 1&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sumArray&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;sumArray&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// 15&lt;/span&gt;

&lt;span class="c1"&gt;// Example 2&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;sumArray&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Much of the logic above is either ludicrous or doesn't exist in SML, and we'll have to do something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sml"&gt;&lt;code&gt;&lt;span class="kr"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;sum_array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;
  &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;hd&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="n"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sum_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tl&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;summed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum_array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c"&gt;(*&lt;/span&gt;&lt;span class="cm"&gt; 15 *)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These were just a few quick examples. If you want to see me explain these things (a little) more and If you want to see me do this with 5 slightly more complex problems, give my latest Youtube video a watch:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pUh-_Ba_jUY"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;em&gt;Appreciate the üëç&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I think we developers should definitely focus on the language that is most demanded from us - to improve our skills / knowledge, nevertheless - SML has taught me that there are different and sometimes better and &lt;em&gt;cleaner&lt;/em&gt; ways of solving programming issues.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;This has been Eckhardt Dreyer, coming to you with a look into what I explore on the web. If you like what I make &lt;a href="https://kaizen.com.na/payment?ref=dono&amp;amp;amt=10000"&gt;Buy me a coffee? üç∫&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>sml</category>
      <category>javascript</category>
      <category>recursion</category>
    </item>
    <item>
      <title>Advanced MessagePack capabilities</title>
      <author>tarantool</author>
      <pubDate>Wed, 13 Oct 2021 16:36:52 +0000</pubDate>
      <link>https://dev.to/tarantool/advanced-messagepack-capabilities-4735</link>
      <guid>https://dev.to/tarantool/advanced-messagepack-capabilities-4735</guid>
      <description>&lt;h1&gt;
  &lt;a href="#advanced-messagepack-capabilities"&gt;
  &lt;/a&gt;
  Advanced MessagePack capabilities
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TjS8Zjj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/022osmi13djx55a7zc9j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TjS8Zjj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/022osmi13djx55a7zc9j.jpg" alt="e9d6306b85aa4ce811a0dcca6d033789"&gt;&lt;/a&gt; &lt;br&gt;
Author: Eugene Leonovich&lt;br&gt;
MessagePack is a binary format for data serialization. It is positioned by the authors as a more efficient alternative to JSON. Due to its speed and portability, it's often used as a format for data exchange in high-performance systems. The other reason this format became popular is that it's very easy to implement. Your favorite programming language probably already has several libraries designed to work with it.&lt;br&gt;
In this article, I'm not going to talk about the design of MessagePack, and I am not going to compare it to similar products. There is a lot of information about it on the internet. However, there is not enough information about MessagePack's extension types system. So I'm going to explain what it is, show some examples, and talk about how to make serialization even more effective with extension types.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-extension-type"&gt;
  &lt;/a&gt;
  The Extension type
&lt;/h2&gt;

&lt;p&gt;The MessagePack specification defines 9 base types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Nil&lt;/li&gt;
&lt;li&gt;  Boolean&lt;/li&gt;
&lt;li&gt;  Integer&lt;/li&gt;
&lt;li&gt;  Float&lt;/li&gt;
&lt;li&gt;  String&lt;/li&gt;
&lt;li&gt;  Binary&lt;/li&gt;
&lt;li&gt;  Array&lt;/li&gt;
&lt;li&gt;  Map&lt;/li&gt;
&lt;li&gt;  Extension.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extension is a container designed for storing extension types. Let's look closely at how it works. It will help us with writing our own types.&lt;br&gt;
Here is how the container is structured:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ASSn3CrM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqtizld8htnwswrd75to.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ASSn3CrM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqtizld8htnwswrd75to.png" alt="425470e1345d1767f7f1ae6d29195f30 (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Header&lt;/em&gt; is the container's header (1 to 5 bytes). It contains the payload size, i.e., the length of the Data field. To learn more about how the header is formed, take a look at the &lt;a href="https://github.com/msgpack/msgpack/blob/master/spec.md#ext-format-family"&gt;specification&lt;/a&gt;.&lt;br&gt;
&lt;em&gt;Type&lt;/em&gt; is the ID of the stored type, an 8-bit signed integer. Negative values are reserved for official types. User types' IDs can take any value in the range from 0 to 127.&lt;br&gt;
&lt;em&gt;Data&lt;/em&gt; is an arbitrary byte string up to 4 GiB long, which contains the actual data. The format of official types is described in the specification, while the format of user types may depend entirely on the developer's imagination.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The list of official types currently includes only Timestamp with the ID of -1. Occasionally, we see suggestions to add new types (such as UUID, multidimensional arrays, or geo coordinates), but since the discussions are not very active, I wouldn't expect any updates in the near future.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N02wpA0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ssplc0x8mo1l6e3ecoqu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N02wpA0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ssplc0x8mo1l6e3ecoqu.jpg" alt="34ae802c3fd31328904479bee387fe93 (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's enough theory, let's start coding! For these examples, we'll use the &lt;a href="https://github.com/rybakit/msgpack.php"&gt;msgpack.php&lt;/a&gt; MessagePack library since it provides a convenient API to handle extension types. I hope you'll find these code examples easy to understand even if you use other libraries.&lt;br&gt;
Since I mentioned UUID, let's implement support for this data type as an example. To do so, we'll need to write an extension---a class to serialize and deserialize UUID values. We will use the &lt;a href="https://symfony.com/doc/current/components/uid.html"&gt;symfony/uid&lt;/a&gt; library to make handling such values easier.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This example can be adapted for any UUID library, be it the popular * &lt;a href="https://uuid.ramsey.dev/en/latest/"&gt;&lt;em&gt;ramsey/uuid&lt;/em&gt;&lt;/a&gt;&lt;/em&gt;, PECL * &lt;a href="https://pecl.php.net/package/uuid"&gt;&lt;em&gt;uuid&lt;/em&gt;&lt;/a&gt; module, or a user implementation.*&lt;br&gt;
Let's name our class &lt;code&gt;UuidExtension&lt;/code&gt;. The class must implement the &lt;code&gt;Extension&lt;/code&gt; interface:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use MessagePack\BufferUnpacker;
use MessagePack\Packer;
use MessagePack\TypeTransformer\Extension;
use Symfony\Component\Uid\Uuid;

final class UuidExtension implements Extension
{
    public function getType(): int
    {
        // TODO
    }

    public function pack(Packer $packer, mixed $value): ?string
    {
        // TODO
    }

    public function unpackExt(BufferUnpacker $unpacker, int $extLength): Uuid
    {
        // TODO
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We determined earlier what the type (ID) of the extension is, so we can easily implement the &lt;code&gt;getType()&lt;/code&gt; method. In the simplest case, this method could return a fixed constant, globally defined for the whole project. However, to make the class more versatile, we'll let it define the type when initializing the extension. Let's add a constructor with one integer argument, &lt;code&gt;$type&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/** @readonly */
private int $type;

public function __construct(int $type)
{
    if ($type &amp;lt; 0 || $type &amp;gt; 127) {
        throw new \OutOfRangeException(
            "Extension type is expected to be between 0 and 127, $type given"
        );
    }

    $this-&amp;gt;type = $type;
}

public function getType(): int
{
    return $this-&amp;gt;type;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now let's implement the &lt;code&gt;pack()&lt;/code&gt; method. From the method's signature, we can see that it takes two parameters: a &lt;code&gt;Packer&lt;/code&gt; class instance and a &lt;code&gt;$value&lt;/code&gt; of any type. The method must return either a serialized value (wrapped into the Extension container) or &lt;code&gt;null&lt;/code&gt; if the class of the extension does not support the value type:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function pack(Packer $packer, mixed $value): ?string
{
    if (!$value instanceof Uuid) {
        return null;
    }

    return $packer-&amp;gt;packExt($this-&amp;gt;type, $value-&amp;gt;toBinary());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The reverse operation isn't much harder to implement. The &lt;code&gt;unpackExt()&lt;/code&gt; method takes a &lt;code&gt;BufferUnpacker&lt;/code&gt; instance and the length of the serialized data (the size of the Data field from the schema above). Since we've saved the binary representation of a UUID object in this field, all we need to do is read this data and build a &lt;code&gt;Uuid&lt;/code&gt; object:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function unpackExt(BufferUnpacker $unpacker, int $extLength): Uuid
{
    return Uuid::fromString($unpacker-&amp;gt;read($extLength));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Our extension is ready! The last step is to register a class object with a specific ID. Let the ID be &lt;code&gt;0&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$uuidExt = new UuidExtension(0);
$packer = $packer-&amp;gt;extendWith($uuidExt);
$unpacker = $unpacker-&amp;gt;extendWith($uuidExt);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Let's make sure everything works correctly:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$uuid = new Uuid('7e3b84a4-0819-473a-9625-5d57ad1c9604');

$packed = $packer-&amp;gt;pack($uuid);
$unpacked = $unpacker-&amp;gt;reset($packed)-&amp;gt;unpack();

assert($uuid-&amp;gt;equals($unpacked));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;That was an example of a simple UUID extension. Similarly, you can add support for any other type used in your application: &lt;a href="https://github.com/rybakit/msgpack.php/blob/master/examples/MessagePack/DateTimeExtension.php"&gt;DateTime&lt;/a&gt;, &lt;a href="https://github.com/tarantool-php/client/blob/master/src/Packer/Extension/DecimalExtension.php"&gt;Decimal&lt;/a&gt;, Money. Or you can write a versatile extension that allows serializing any object (as it was done in &lt;a href="https://vkcom.github.io/kphp/kphp-language/howto-by-kphp/serialization-msgpack.html?highlight=msgpack#internal-implementation-details"&gt;KPHP&lt;/a&gt;).&lt;br&gt;
However, this is not the only use for extensions. I'll now show you some interesting examples that demonstrate other advantages of using extension types.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lorem-ipsum-or-compressing-the-incompressible"&gt;
  &lt;/a&gt;
  "Lorem ipsum," or compressing the incompressible
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o6tsW-sJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyqp8ph4if39wthe6apk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6tsW-sJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyqp8ph4if39wthe6apk.jpg" alt="851828579dec0b5e1c75b41834b61030 (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you've ever inquired about MessagePack before, you probably know the phrase from its official website, &lt;a href="https://msgpack.org/"&gt;msgpack.org&lt;/a&gt;: "&lt;em&gt;It's like JSON, but fast and small&lt;/em&gt;."&lt;br&gt;
In fact, if you compare how much memory space the same data occupies in JSON and MessagePack, you'll see why the latter is a much more compact format. For example, the number 100 takes 3 bytes in JSON and only 1 in MessagePack. The difference becomes more significant as the number's order of magnitude grows. For the maximum value of int64 (9223372036854775807), the size of the stored data differs by as much as 10 bytes (19 against 9)!&lt;br&gt;
The same is true for boolean values---4 or 5 bytes in JSON against 1 byte in MessagePack. It is also true for arrays because many syntactic symbols---such as commas separating the elements, semicolons separating the key-value pairs, and brackets marking the array limits---don't exist in binary format. Obviously, the larger the array is, the more syntactic litter accumulates along with the payload.&lt;br&gt;
String values, however, are a little more complicated. If your strings don't consist entirely of quotation marks, line feeds, and other special symbols that require escaping, then you won't see a difference between their sizes in JSON and in MessagePack. For example, &lt;code&gt;"foobar"&lt;/code&gt; has a length of 8 bytes in JSON and 7 in MessagePack. Note that the above only applies to UTF-8 strings. For binary strings, JSON's disadvantage against MessagePack is obvious.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Knowing this peculiarity of MessagePack, you can have a good laugh reading articles that compare the two formats in terms of data compression efficiency while using mainly string data for the tests. Apparently, any conclusions based on the results of such tests would make no practical sense. So take those articles skeptically and run comparative tests on *&lt;/em&gt;&lt;strong&gt;your own&lt;/strong&gt;* &lt;em&gt;data.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At some point, there were discussions about whether to add string compression (individual or in frames) to the specification to make string serialization more compact. However, the idea was rejected, and the implementation of this feature was left to users. So let's try it.&lt;br&gt;
Let's create an extension that will compress long strings. We will use whatever compression tool is at hand, for example, &lt;a href="https://www.php.net/manual/en/book.zlib.php"&gt;zlib&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Choose the data compression algorithm based on the specifics of your data. For example, if you are working with lots of short strings, take a look at &lt;em&gt;[*SMAZ&lt;/em&gt;](&lt;a href="https://github.com/antirez/smaz"&gt;https://github.com/antirez/smaz&lt;/a&gt;)&lt;/em&gt;.*&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's start with the constructor for our new class, &lt;code&gt;TextExtension&lt;/code&gt;. The first argument is the extension ID, and as a second optional argument, we'll add minimum string length. Strings shorter than this value will be serialized in a standard way, without compression. In this way, we will avoid cases where the compressed string ends up longer than the initial one:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;final class TextExtension implements Extension
{
    /** @readonly */
    private int $type;

    /** @var positive-int */
    private int $minLength;

    public function __construct(int $type, int $minLength = 100)
    {
        ...

        $this-&amp;gt;type = $type;
        $this-&amp;gt;minLength = $minLength;
    }

    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To implement the &lt;code&gt;pack()&lt;/code&gt; method, we might write something like this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function pack(Packer $packer, mixed $value): ?string
{
    if (!is_string($value)) {
        return null;
    }

    if (strlen($value) &amp;lt; $this-&amp;gt;minLength) {
        return $packer-&amp;gt;packStr($value);
    }

    // compress and pack
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;However, this wouldn't work. String is one of the basic types, so the packer will serialize it before our extension is called. The reason is that serialization is implemented in msgpack.php for better performance. Otherwise, before serializing each value, the packer would need to scan the available extensions, considerably slowing down the process.&lt;br&gt;
Therefore, we need to tell the packer not to serialize certain strings as, you know, strings but to use an extension. As you might guess from the &lt;a href="#uuid-example"&gt;UUID example&lt;/a&gt;, it can be done via a &lt;a href="https://martinfowler.com/bliki/ValueObject.html"&gt;ValueObject&lt;/a&gt;. Let's call it &lt;code&gt;Text&lt;/code&gt;, similar to the extension class:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
 * @psalm-immutable
 */
final class Text
{
    public function __construct(
        public string $str
    ) {}


    public function __toString(): string
    {
        return $this-&amp;gt;str;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;So instead of&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$packed = $packer-&amp;gt;pack("a very long string");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;we'll use a &lt;code&gt;Text&lt;/code&gt; object to mark long strings:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$packed = $packer-&amp;gt;pack(new Text("a very long string"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Let's update the &lt;code&gt;pack()&lt;/code&gt; method:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function pack(Packer $packer, mixed $value): ?string
{
    if (!$value instanceof Text) {
        return null;
    }

    $length = strlen($value-&amp;gt;str);
    if ($length &amp;lt; $this-&amp;gt;minLength) {
        return $packer-&amp;gt;packStr($value-&amp;gt;str);
    }

    // compress and pack
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now we just need to compress the string and put the result in an Extension. Note that the minimum length limit does not guarantee that the string will take less space after compression. For this reason, you might want to compare the lengths of the compressed string and the original and choose whichever is more compact:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$context = deflate_init(ZLIB_ENCODING_GZIP);
$compressed = deflate_add($context, $value-&amp;gt;str, ZLIB_FINISH);

return isset($compressed[$length - 1])
    ? $packer-&amp;gt;packStr($value-&amp;gt;str)
    : $packer-&amp;gt;packExt($this-&amp;gt;type, $compressed);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Deserialization:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function unpackExt(BufferUnpacker $unpacker, int $extLength): string
{
    $compressed = $unpacker-&amp;gt;read($extLength);
    $context = inflate_init(ZLIB_ENCODING_GZIP);

    return inflate_add($context, $compressed, ZLIB_FINISH);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Let's see the result:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$longString = &amp;lt;&amp;lt;&amp;lt;STR
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod 
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, 
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo 
consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse 
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat 
non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
STR;

$packedString = $packer-&amp;gt;pack($longString); // 448 bytes
$packedCompressedString = $packer-&amp;gt;pack(new Text($longString)); // 291 bytes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In this example, we saved 157 bytes, or &lt;em&gt;35% of what would be the standard serialization result&lt;/em&gt;, on a single line!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-schemaless-to-schemamixed"&gt;
  &lt;/a&gt;
  From "schema-less" to "schema-mixed"
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p8BaWaOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hom3tiyn4bw7uqyfwo1g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p8BaWaOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hom3tiyn4bw7uqyfwo1g.jpg" alt="04bbfc5f6758a3841bc7753e4421e960 (8)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Compressing long strings is not the only way to save space. MessagePack is a &lt;em&gt;schemaless&lt;/em&gt;, or &lt;em&gt;schema-on-read&lt;/em&gt;, format that has its advantages and disadvantages. One of the disadvantages in comparison with &lt;em&gt;schema-full&lt;/em&gt; (&lt;em&gt;schema-on-write&lt;/em&gt;) formats is highly ineffective serialization of repeated data structures. For example, this happens with selections from a database where all elements in the resulting array have a similar structure:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$userProfiles = [
    [
        'id' =&amp;gt; 1,
        'first_name' =&amp;gt; 'First name 1',
        'last_name' =&amp;gt; 'Last name 1',
    ],
    [
        'id' =&amp;gt; 2,
        'first_name' =&amp;gt; 'First name 2',
        'last_name' =&amp;gt; 'Last name 2',
    ],
    ...
    [
        'id' =&amp;gt; 100,
        'first_name' =&amp;gt; 'First name 100',
        'last_name' =&amp;gt; 'Last name 100',
    ],
];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If you serialize this array with MessagePack, the repeated keys of each element in the array will take a substantial part of the total data size. But what if we could save the keys of such structured arrays just once? It would significantly cut down the size and also speed up serialization since the packer would have fewer operations to perform.&lt;br&gt;
Like before, we are going to use extension types for that. Our type will be a value object wrapped around an arbitrary &lt;em&gt;structured&lt;/em&gt; array:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
 * @psalm-immutable
 */
final class StructList
{
    public function __construct(
        public array $list,
    ) {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If your project includes a library for database handling, there is probably a special class in that library to store table selection results. You can use this class as a type instead of/along with&lt;/em&gt; &lt;code&gt;StructList&lt;/code&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is how we are going to serialize such arrays. First, we'll check the array size. Of course, if the array is empty or has only one element, there is no reason to store keys separately from values. We'll serialize arrays like these in a standard way.&lt;br&gt;
In other cases, we'll first save a list of keys and then a list of values. We won't be storing an associative array list, which is the standard MessagePack option. Instead, we'll write data in a more compact form:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yYSeIT90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hv5qdcphz9uxjxqbt3y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yYSeIT90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hv5qdcphz9uxjxqbt3y.png" alt="3ca04136382cc4c0767fbc1626e9908d (9)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Implementation:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;final class StructListExtension implements Extension
{
    ...

    public function pack(Packer $packer, mixed $value): ?string
    {
        if (!$value instanceof StructList) {
            return null;
        }

        $size = count($value-&amp;gt;list);
        if ($size &amp;lt; 2) {
            return $packer-&amp;gt;packArray($value-&amp;gt;list);
        }

        $keys = array_keys(reset($value-&amp;gt;list));

        $values = '';
        foreach ($value-&amp;gt;list as $item) {
            foreach ($keys as $key) {
                $values .= $packer-&amp;gt;pack($item[$key]);
            }
        }

        return $packer-&amp;gt;packExt($this-&amp;gt;type,
            $packer-&amp;gt;packArray($keys).
            $packer-&amp;gt;packArrayHeader($size).
            $values
        );
    }

    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To deserialize, we need to unpack the keys array and then use it to restore the initial array:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function unpackExt(BufferUnpacker $unpacker, int $extLength): array
{
    $keys = $unpacker-&amp;gt;unpackArray();
    $size = $unpacker-&amp;gt;unpackArrayHeader();

    $list = [];
    for ($i = 0; $i &amp;lt; $size; ++$i) {
        foreach ($keys as $key) {
            $list[$i][$key] = $unpacker-&amp;gt;unpack();
        }
    }

    return $list;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;That's it! Now, if we serialize &lt;code&gt;$profiles&lt;/code&gt; from the example above as a normal array and as a structured &lt;code&gt;StructList&lt;/code&gt;, we'll see a great difference in size---&lt;em&gt;the latter will be 47% more compact&lt;/em&gt;.&lt;br&gt;
    $packedList = $packer-&amp;gt;pack($profiles); // 5287 bytes&lt;br&gt;
    $packedStructList = $packer-&amp;gt;pack(new StructList($profiles)); // 2816 bytes&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We could go further and create a specialized &lt;code&gt;Profiles&lt;/code&gt; type to store information about the array structure in the extension code. This way, we wouldn't need to save the keys array. However, in this case, we would lose in versatility.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We've taken a look at just a few examples of using extension types in MessagePack. To see more examples, check the &lt;a href="https://github.com/rybakit/msgpack.php/tree/master/examples"&gt;msgpack.php&lt;/a&gt; library. For the implementations of all extension types supported by the &lt;a href="https://www.tarantool.io/en/doc/latest/dev_guide/internals/msgpack_extensions/"&gt;Tarantool&lt;/a&gt; protocol, see the &lt;a href="https://github.com/tarantool-php/client/tree/master/src/Packer/Extension"&gt;tarantool/client&lt;/a&gt; library.&lt;br&gt;
I hope this article gave you a sense of what extension types are and how they can be useful. If you're already using MessagePack but haven't known about the feature, this information may inspire you to revise your current methods and start writing custom types.&lt;br&gt;
If you're just wondering which serialization format to choose for your next project, the article might help you make a reasonable choice, adding a point in favor of MessagePack :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h1&gt;

&lt;p&gt;&lt;a href="http://www.tarantool.io/en/download/os-installation/docker-hub/?utm_source=dev&amp;amp;utm_medium=referrer&amp;amp;utm_campaign=2021"&gt;Get Tarantool on our website&lt;/a&gt;&lt;br&gt;
&lt;a href="http://t.me/tarantool?utm_source=dev&amp;amp;utm_medium=referrer&amp;amp;utm_campaign=2021"&gt;Get help in our telegram channel&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>programming</category>
      <category>datacompression</category>
      <category>coding</category>
    </item>
    <item>
      <title>Recursion : Linear recursion and Tail recursion</title>
      <author>DamianZort</author>
      <pubDate>Wed, 13 Oct 2021 16:33:31 +0000</pubDate>
      <link>https://dev.to/showwaiyan/recursion-linear-recursion-and-tail-recursion-5hn5</link>
      <guid>https://dev.to/showwaiyan/recursion-linear-recursion-and-tail-recursion-5hn5</guid>
      <description>&lt;h4&gt;
  &lt;a href="#what-is-recursion"&gt;
  &lt;/a&gt;
  What is Recursion?
&lt;/h4&gt;

&lt;p&gt;In term of computer science, recursion is the calling the function itself. Yes, that all. But it's not simple though.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#let-take-an-example-of-the-real-world"&gt;
  &lt;/a&gt;
  &lt;em&gt;Let take an example of the real world&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;Have you ever see a photo in the photo of the photo in the photo the.... so on. This is the example of recursion process.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Is3iE3Nr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/algodailyrandomassets/curriculum/recursion/cover.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Is3iE3Nr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.googleapis.com/algodailyrandomassets/curriculum/recursion/cover.jpg" alt="Recursion process"&gt;&lt;/a&gt;&lt;br&gt;
Above the exapmle, It a exactly single photo in the photo of that photo. Confused???&lt;/p&gt;

&lt;p&gt;Here is the another photo. I named this "Recursive cat". Cute Right? HAHA.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vMgF_B-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://recursivelyrecursive.files.wordpress.com/2015/04/cat.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vMgF_B-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://recursivelyrecursive.files.wordpress.com/2015/04/cat.jpg" alt="Recursive Cat"&gt;&lt;/a&gt;&lt;br&gt;
The photo depict itself in the frame and In this frame the previous photo do the same task.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So back in computer science&lt;/em&gt;, Recursion is the function calling itself and doing the same things what function does. Recursion Algorithm makes the problem into the sub-problems or smaller problems and compute until the base case. &lt;br&gt;
&lt;em&gt;(What is base case?? I will show you later. Don't worry.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let get into it.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#there-is-two-recursive-process"&gt;
  &lt;/a&gt;
  There is two recursive process....
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Linear Recursion&lt;/li&gt;
&lt;li&gt;Tail Recursion&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#linear-recursion"&gt;
  &lt;/a&gt;
  Linear Recursion
&lt;/h4&gt;

&lt;p&gt;Linear recursion is the normal recursion and It needs to understand before going to the tail recursion. &lt;br&gt;
Let take a look a problem.&lt;/p&gt;

&lt;p&gt;If we wanna write a function that compute the &lt;strong&gt;&lt;em&gt;Factorial&lt;/em&gt;&lt;/strong&gt;, How to solve it??&lt;/p&gt;

&lt;p&gt;Before writing the code, let see what is the &lt;em&gt;Factorial&lt;/em&gt;.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#factorial"&gt;
  &lt;/a&gt;
  Factorial
&lt;/h5&gt;

&lt;p&gt;In Mathematics. &lt;em&gt;Factorial&lt;/em&gt; is the positive integer which is product of a number and less then it. Yes, It look like a series. &lt;em&gt;Factorial&lt;/em&gt; of the number(n) is denoted by &lt;strong&gt;n!&lt;/strong&gt;.&lt;br&gt;
So the &lt;em&gt;Factorial&lt;/em&gt; of 4 is &lt;br&gt;
&lt;code&gt;4! = 4*3*2*1 = 24&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So the &lt;em&gt;Factorial&lt;/em&gt; is the multiplying of the number-n until to the &lt;strong&gt;one&lt;/strong&gt;.&lt;br&gt;
And the general  formula of &lt;em&gt;Factorial&lt;/em&gt; is&lt;br&gt;
&lt;code&gt;n! = n*(n-1)!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let substitute 4 in this Formula&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;4! = 4*3! # (4-1)! is 3!
     4*3*2!
     4*3*2*1! # the value of 1! is 1 so..
     4*3*2
     4*6
     24
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See? the &lt;em&gt;Factorial&lt;/em&gt; number-n multiply until one.&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Factorial"&gt;More About Factorial&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#let-code"&gt;
  &lt;/a&gt;
  Let Code
&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;All of the code under is just pseudo code. I will not use any programming languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will write a &lt;em&gt;Factorial&lt;/em&gt; Function named &lt;code&gt;fac()&lt;/code&gt; and it takes one argument &lt;code&gt;n&lt;/code&gt; as parameter. &lt;code&gt;fac(n)&lt;/code&gt; compute &lt;em&gt;n!&lt;/em&gt; .&lt;br&gt;
How to compute??&lt;br&gt;
The formula of Factorial is &lt;code&gt;n! = n*(n-1)!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So the function &lt;code&gt;fac(n)&lt;/code&gt; return the answer of n! computing &lt;code&gt;n*(n-1)!&lt;/code&gt; until to one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fac(n) = n * fac(n-1) 
# fac(n-1) means (n-1)!

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#here-is-the-problem"&gt;
  &lt;/a&gt;
  Here is the problem!!!
&lt;/h6&gt;

&lt;p&gt;This function &lt;code&gt;fac(n)&lt;/code&gt; doesn't execute until one. It will run forever  before stack memory is full.&lt;br&gt;
Because &lt;code&gt;fac(n)&lt;/code&gt; call itself forever even it will reach &lt;em&gt;one&lt;/em&gt;. &lt;br&gt;
When it reach one&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fac(1-1)
fac(0) 
fac(-1) # fac(0-1)
.........so on
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It goes forever and when the stack memory full, it will rise an error. Also it will never give a result.And the Factorial of -1 makes non-sense.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Solution is &lt;em&gt;Base Case&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is a actually &lt;em&gt;Base Case&lt;/em&gt;.&lt;br&gt;
It means that when the function recursion reach &lt;em&gt;Base Case&lt;/em&gt; the program must stop and return the result to previous function recursion.&lt;/p&gt;

&lt;p&gt;For our problem, the &lt;em&gt;Base Case&lt;/em&gt; is &lt;em&gt;one&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So, Here is our function definition again..&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fac(n) = if n == 1
           return 1
         else n * fac(n-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let excute &lt;code&gt;fac(4)&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fac(4)
= 4 * (fac(3))
= 4 * (3 * (fac(2)))
= 4 * (3 * (2 * (fac(1))) 
# So we reach the Base Case one and return the result one
= 4 * (3 * (2 * (1)))
= 4 * (3 * (2))
= 4 * (6)
= 24
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At that time, the program will not run forever and when it reach base case, it will return 1.&lt;/p&gt;

&lt;p&gt;That is linear recursion.&lt;/p&gt;

&lt;p&gt;But the linear recursion has a big problem.&lt;br&gt;
Yes, Efficiency.&lt;br&gt;
How about if you wanna know the Factorial of &lt;em&gt;100000&lt;/em&gt;.&lt;br&gt;
Ohh..goddd... A Huge Number!!!!&lt;br&gt;
In this case, Stack Over Flow error will rise. Because if &lt;em&gt;Factorial&lt;/em&gt; of 4 even takes many steps, How many steps does &lt;em&gt;100000&lt;/em&gt; takes??&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fac(100000)
= 100000 * (fac(99999))
= 100000 * (99999 * (fac(99998)))
= 100000 * (99999 * (99998 * (fac(99997))))
# ...... so on!!!!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See the Problem??&lt;br&gt;
The Stack memory will be full at some steps and can't call next recursion. So, stack over flow error will rise.&lt;/p&gt;

&lt;p&gt;It will use a lot of Memory and not efficient. It will go to the base case and come back to the recursion. So, it will expand the function call stack just like above the code.&lt;/p&gt;

&lt;p&gt;What does it look like?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---5mmfbA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2j034n0454eq60aq143w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---5mmfbA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2j034n0454eq60aq143w.png" alt="Linear Recursion Example"&gt;&lt;/a&gt;&lt;br&gt;
Exactly, Linear recursion looks like your workdays. On Monday, you may think "I don't need to do right now. Now I'm gonna to chill. Ok!!!". Next day, You also do the same as yesterday and next day by day. On Friday, You have a lot of things to do. It's Friday but you can't happy for weekend. &lt;br&gt;
Also Linear Recursion wait the result until it reach the base case. When you call Factorial of 100000, the computer will kick off and smash you. I'm sure.&lt;br&gt;
That is the problem of Linear Recursion.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#tail-recursion"&gt;
  &lt;/a&gt;
  Tail Recursion
&lt;/h4&gt;

&lt;p&gt;In Tail Recursion, Something new  happen and a  little bit change.&lt;br&gt;
We also declare &lt;em&gt;Factorial&lt;/em&gt; function &lt;code&gt;fac()&lt;/code&gt;. But now we will take two argument as parameter, number(&lt;code&gt;n&lt;/code&gt;) and accumulator(&lt;code&gt;a&lt;/code&gt;). Accumulator is doing the task which takes the result of &lt;em&gt;Factorial&lt;/em&gt; instead of going until base case. And Accumulator &lt;code&gt;a&lt;/code&gt; is initialize 1 at first&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#let-code"&gt;
  &lt;/a&gt;
  Let Code
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fac(n,a=1) = fac(n-1,a*n)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Hey,Don't forget the &lt;em&gt;Base Case&lt;/em&gt;. It is very curial in Recursion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fac(n,a=1) = if n == 1
             return a
           else fac(n-1,n*a)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let excute &lt;code&gt;fac(4,a=1)&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fac(4,a=1)
fac(3,a=4) # a=1 and 1*4 is 4
fac(2,a=12) # a=4 and 3*4 is 12
fac(1,a=24) # a=12 and 2*12 is 24
# Here is our base case and return a which is 24
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Tail recursion, &lt;em&gt;Factorial&lt;/em&gt; function doesn't expand the function order and efficient than the Linear Recursion.&lt;/p&gt;

&lt;p&gt;So, I hope you have a little knowledge about recursion and recursive processes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All of the above are not the whole theory.It is just a knowledge sharing and a piece of tiny concept. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;If something wrong, please inform &lt;em&gt;&lt;a href="mailto:showwaiyan555@gmail.com"&gt;showwaiyan555@gmail.com&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=_JtPhF8MshA&amp;amp;t=593s"&gt;Here is the reference&lt;/a&gt;&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>programming</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Confused About rem and em units in CSS?</title>
      <author>Mahesh </author>
      <pubDate>Wed, 13 Oct 2021 16:32:35 +0000</pubDate>
      <link>https://dev.to/ali6nx404/confused-about-rem-and-em-units-in-css-26go</link>
      <guid>https://dev.to/ali6nx404/confused-about-rem-and-em-units-in-css-26go</guid>
      <description>&lt;p&gt;rem and em units in CSS is creating confusion for beginners, &lt;/p&gt;

&lt;p&gt;Most beginners don't understand the correct meaning of both units and then use them without thinking much and it creates lots of problems for them.&lt;/p&gt;

&lt;p&gt;em and rem both are known as relative units in CSS. &lt;/p&gt;

&lt;p&gt;You've probably been using em and rem units now for a while already, but still, you might be confused about which unit is best in which scenario.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-em"&gt;
  &lt;/a&gt;
  What is em?
&lt;/h2&gt;

&lt;p&gt;An em value is equal to the computed font size of the parent of that element. example if font size of parent element is 20 px then 1em is equal to 20px.&lt;/p&gt;

&lt;p&gt;if the font size is not specified in the parent element then it will look continues up until the root element.&lt;/p&gt;

&lt;p&gt;Root element font size is provided by the browser and by default it is 16px.&lt;/p&gt;

&lt;p&gt;in this case, 1em is equal to 16px.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#compounding-effect-of-em-"&gt;
  &lt;/a&gt;
  compounding effect of em -
&lt;/h2&gt;

&lt;p&gt;check the below challenge, and then jump on the answer and understand how em works.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jHrT-9qn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FA8w9JGVgAcCUBa.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dGFsplsl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1413112845558980608/JBizoxb9_normal.jpg" alt="Mahesh üëΩ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Mahesh üëΩ
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/ali6nx404"&gt;@ali6nx404&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      CSS challenge for Everyone üßê&lt;br&gt;&lt;br&gt;Tell the exact computed font size of the child element?&lt;br&gt;&lt;br&gt;HTML &amp;amp; CSS code below üëá 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:37 PM - 05 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1445427836320247810" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1445427836320247810" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1445427836320247810" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;We have three divs,  container, parent, and child and respectively are specified font-size 1em, 3em, and 2em.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;font-size of container is 1em eqaul to 16px.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;font size of parent is 3em means 3 * 16px ( parent font-size) so it becomes 48px now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;font size of child is 2em means 2 * 48px ( size of parent element) so it becomes 96px now.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;the final size of the child becomes 96px, üòÖ power of compounding. &lt;/p&gt;

&lt;p&gt;check live example üëá&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ali6nx404/embed/QWMLWWm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;let's see this in action üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SrN45zoQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634009342704/1mwKQC-Ar.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SrN45zoQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634009342704/1mwKQC-Ar.webp" alt="86pxx.webp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-rem"&gt;
  &lt;/a&gt;
  What is rem?
&lt;/h2&gt;

&lt;p&gt;While em is relative to the font size of its direct or nearest parent, rem is only relative to the Html (root) font size.&lt;/p&gt;

&lt;p&gt;by default, it is 16px until we didn't specify in the Html element.&lt;/p&gt;

&lt;p&gt;rem value is not much convenient when it comes to specifying such as&lt;/p&gt;

&lt;p&gt;1rem = 16px &lt;/p&gt;

&lt;p&gt;But what if we want to use 10px than we need to calculate the rem value which is equal to 0.625rem.&lt;/p&gt;

&lt;p&gt;To solve this problem we have one trick, specify the Html element font size as 62.5%.&lt;/p&gt;

&lt;p&gt;than our 1rem becomes 10px and now we are able to calculate size easily.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-is-better"&gt;
  &lt;/a&gt;
  Which is better?
&lt;/h2&gt;

&lt;p&gt;There‚Äôs no better unit really, and it all depends on your personal choice. Some people like to use rem units for consistency and scalability, &lt;/p&gt;

&lt;p&gt;while some like to use em units in places where the influence of nearby parent elements would make sense.&lt;/p&gt;

&lt;p&gt;I personally use rem more than em but be careful with both, em becomes a trouble when you don't understand the relation between parents and child, &lt;/p&gt;

&lt;p&gt;and we already see the example of compounding effect in em. so I like to say use rem more often than em.&lt;/p&gt;

&lt;p&gt;If you want to calculate the accurate size in rem and em, then &lt;a href="http://pxtoem.com/"&gt;pxtoem&lt;/a&gt; website is pretty useful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-"&gt;
  &lt;/a&gt;
  Conclusion -
&lt;/h2&gt;

&lt;p&gt;Trying both units and understanding the use cases is most important. I would like to suggest you play with both units and understand both of them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-connect-"&gt;
  &lt;/a&gt;
  Let's Connect -
&lt;/h3&gt;

&lt;p&gt;‚úî &lt;a href="https://twitter.com/Ali6nX404"&gt;Twitter&lt;/a&gt;&lt;br&gt;
‚úî &lt;a href="https://www.linkedin.com/in/mahesh-patidar-34a982192/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Javascript Data Structure - Doubly Linked list</title>
      <author>Rivier Grullon</author>
      <pubDate>Wed, 13 Oct 2021 16:17:46 +0000</pubDate>
      <link>https://dev.to/riviergrullon/javascript-data-structure-doubly-linked-list-7bh</link>
      <guid>https://dev.to/riviergrullon/javascript-data-structure-doubly-linked-list-7bh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#definition"&gt;
  &lt;/a&gt;
  Definition
&lt;/h2&gt;

&lt;p&gt;Doubly linked list is a type of &lt;em&gt;linked list&lt;/em&gt; in which each node apart from storing its data has two pointers. The first pointer points to the previous node in the list and the second pointer points to the next node in the list. The head node its previous value points to NULL and similar to the tail node its next value points to null.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7cPkM3SI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xw4avvk6lcw9m7p3ubpy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7cPkM3SI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xw4avvk6lcw9m7p3ubpy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and saving a second reference to nodes requires more space in memory.&lt;/p&gt;

&lt;p&gt;let's recap the main properties of the linked list:&lt;/p&gt;

&lt;p&gt;The main properties of the linked list are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;length: The number of nodes in the linked list &lt;/li&gt;
&lt;li&gt;Head: The first node&lt;/li&gt;
&lt;li&gt;Tail: The last node&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See more in my last post &lt;a href="https://dev.to/riviergrullon/javascript-datastructure-linked-list-2ocn"&gt;Javascript Data structure - Linked list&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;in this case the nodes will be contain the next properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;next: pointer to the next node&lt;/li&gt;
&lt;li&gt;value: actual value of the node&lt;/li&gt;
&lt;li&gt;prev: pointer to the previous node &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and the main operations here are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;append&lt;/strong&gt;: Add a node to the end in the linked list&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;prepend&lt;/strong&gt;: Add a node to the beggining the linked list&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;removeFirst&lt;/strong&gt;: remove the first node (head) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;removeLast&lt;/strong&gt;: remove the last node(tail)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;search&lt;/strong&gt;: find a node by his value and returned&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;remove&lt;/strong&gt;: remove a node by its value from the linked list&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#implemetation"&gt;
  &lt;/a&gt;
  Implemetation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LinkedList&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//** add at the end of the linked list */&lt;/span&gt;
    &lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// if empty&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;oldTail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="nx"&gt;oldTail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;oldTail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//** add to the beggining  */&lt;/span&gt;
    &lt;span class="nx"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;oldHead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="nx"&gt;oldHead&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;oldHead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;removeFirst&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The list is empty&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tempHead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="c1"&gt;// ** when theres only one node&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;tempHead&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;removeLast&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tempTail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;tempTail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tempNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tempNode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeLast&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tempNode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeFirst&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;tempNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tempNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;tempNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tempNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create a class with a constructor that initializes the head, tail and length of the linked list.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Define a method &lt;em&gt;search()&lt;/em&gt; that iterate through the list to find a specific node.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Define two convenience methods, &lt;em&gt;append()&lt;/em&gt; and &lt;em&gt;prepend()&lt;/em&gt; that use to insert a new element at the start or end of the nodes respectively and increase the length.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Define a method &lt;em&gt;remove()&lt;/em&gt; that uses the &lt;em&gt;search&lt;/em&gt; to find the node and replacing its value to delete it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define two convenients methods &lt;em&gt;removeFirst()&lt;/em&gt; and &lt;em&gt;removeLast()&lt;/em&gt; to remove the head or the tail.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;LinkedList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my last post of linked list I made a mistake writting the linked list, the point of the linked list is to avoid arrays, so in this post I want to make up for my mistake :) this series is for learning and thank u all for the feedbacks.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>datastructure</category>
    </item>
    <item>
      <title>API Development: The Complete Guide for Building APIs Without Code</title>
      <author>Karl L. Hughes</author>
      <pubDate>Wed, 13 Oct 2021 16:00:47 +0000</pubDate>
      <link>https://dev.to/karllhughes/api-development-the-complete-guide-for-building-apis-without-code-2bde</link>
      <guid>https://dev.to/karllhughes/api-development-the-complete-guide-for-building-apis-without-code-2bde</guid>
      <description>&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lwUqfNOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.karllhughes.com/assets/img/api-development.png" alt=""&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;The term ‚ÄúAPI‚Äù gets thrown around a lot these days, but what does it mean? What can you use an API for? Do you have to have a developer on your team to build or use an API? In this guide, we‚Äôll explore all those questions and more, including a spotlight on the tools you can use as a &lt;a href="https://www.karllhughes.com/posts/non-technical-founder-hiring-cto"&gt;non-technical founder&lt;/a&gt; to build your own APIs.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You don‚Äôt have to understand what an API is at this point, but if you do, feel free to skip the first section and move right into ‚Äú&lt;a href="https://www.karllhughes.com/#why-build-an-api"&gt;Why Build an API?&lt;/a&gt;‚Äù. If you already know why you need one, then skip down to ‚Äú&lt;a href="https://www.karllhughes.com/#things-to-consider-when-building-an-api"&gt;Things to Consider When Building an API&lt;/a&gt;‚Äù, and if you are seasoned at building APIs but just want to know how you can build them without a developer, jump all the way down to ‚Äú&lt;a href="https://www.karllhughes.com/#tools-for-building-apis-without-code"&gt;Tools for Building APIs Without Code&lt;/a&gt;‚Äù.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-api"&gt;
  &lt;/a&gt;
  What is an API?
&lt;/h2&gt;

&lt;p&gt;API stands for ‚ÄúApplication Programming Interface.‚Äù Before I lose you with a bunch of technical jargon, let me put it in simple terms: &lt;strong&gt;an API is a way for computer programs to talk to each other&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;APIs are used in almost all software, websites, mobile apps, or computer games. Some companies even make money using only their APIs, but before I get to that, let‚Äôs take a look at an example of an API you‚Äôre probably familiar with:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BAm1_4Zr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/idFuNEf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BAm1_4Zr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/idFuNEf.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ever seen a screen like this? This is a Facebook login button, and it uses Facebook‚Äôs API to allow users to verify their identity. It essentially lets you skip entering your username and password by using your Facebook account as proof that you are who you say you are. Developers who use Facebook‚Äôs API can save themselves time by not having to build their own username and password login system, instead piggybacking off of Facebook‚Äôs.&lt;/p&gt;

&lt;p&gt;Another way that APIs can be used is to show data stored in another platform on your website. Have you ever seen a comment form on a site that looks like this?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C0R3jWO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/TAFn3lZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C0R3jWO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/TAFn3lZ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When comments are powered by Disqus it means that the website uses the &lt;a href="https://disqus.com/"&gt;Disqus API&lt;/a&gt; to store their comments so they don‚Äôt have to manage them, remove spam, or write lots of code themselves. APIs can save developers a lot of time.&lt;/p&gt;

&lt;p&gt;Here‚Äôs another great example of using an API to get data from a third-party source:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eg2u_36Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/eKIl8LC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eg2u_36Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/eKIl8LC.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://financeboards.com/"&gt;FinanceBoards&lt;/a&gt; uses stock market data provided by several different sources to create charts, graphs, reports, and more for investors. If you want to build any kind of stock market tracking application, you‚Äôll need to get data like this, and &lt;a href="https://rapidapi.com/blog/best-stock-api/"&gt;stock data APIs&lt;/a&gt; make it relatively easy to do so.&lt;/p&gt;

&lt;p&gt;There‚Äôs almost no end to the kinds of things you can build using APIs, and there are hundreds of free APIs you can use in your projects &lt;a href="https://github.com/toddmotto/public-apis"&gt;check out this list on Github&lt;/a&gt;, but that‚Äôs a topic for another time. For the remainder of this guide, we‚Äôll focus on building APIs.&lt;/p&gt;

&lt;p&gt;Sponsor&lt;/p&gt;

&lt;p&gt;&lt;a href="https://draft.dev/?src=karllhughes"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--js7OGYVI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.karllhughes.com/assets/img/draft-sq.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#want-great-content-like-this-for-your-site"&gt;
  &lt;/a&gt;
  &lt;a href="https://draft.dev/?src=karllhughes"&gt;Want Great Content Like This for Your Site?&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;At &lt;a href="https://draft.dev/?src=karllhughes"&gt;Draft.dev&lt;/a&gt;, we create technical content for startups looking to reach software engineers. Stop begging your engineers to write blog posts and build a high-quality, reliable content engine today.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://draft.dev/?src=karllhughes"&gt;Learn More ‚Üí&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-build-an-api"&gt;
  &lt;/a&gt;
  Why Build an API?
&lt;/h2&gt;

&lt;p&gt;APIs are very powerful because they allow developers to take someone else‚Äôs work and build their own app or product from it, but why do API creators do it? It may seem that giving away your company‚Äôs data or features in an API could help your competitors, but when done right, an API can allow your company to grow into new areas that you never thought possible.&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a look at some companies that have used their APIs to grow and eventually dominate their fields.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quora-using-an-api-for-internal-use-only"&gt;
  &lt;/a&gt;
  Quora: Using an API for Internal Use Only
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ytcmcs7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6DbtWGi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ytcmcs7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6DbtWGi.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all, APIs do not have to be publicly available at all. In fact, most companies that have an API only use them internally to allow different parts of their website to talk to each other. &lt;a href="https://www.quora.com/"&gt;Quora&lt;/a&gt; is a great example of this, as they have an API, but do not offer external developers a way to gain access to it. Instead, they use this API to keep the data in their mobile and web apps in sync.&lt;/p&gt;

&lt;p&gt;The advantage to an internal API is that you can use the same database, business rules, and shared code behind the scenes to power your mobile app, desktop app, and website without having to worry about competitors stealing your content or developers misusing your data. So even if you never plan to give your data to partners, you may want to consider building an API simply to allow developers to build different apps with the same data. APIs are a great way to do more work with fewer developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#twitter-allowing-users-to-build-their-ecosystem"&gt;
  &lt;/a&gt;
  Twitter: Allowing Users to Build their Ecosystem
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CfcWCvOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/U46KSa2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CfcWCvOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/U46KSa2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/"&gt;Twitter&lt;/a&gt; started out with a huge focus on their API. Developers could get almost any data from Twitter they wanted - trends, hashtags, user stats - and they built some really cool stuff with it. This massive amount of open data and the tools people built actually attracted more users to Twitter. Companies could easily hook into the Twitter API to let users share their content on Twitter without leaving their site, and Twitter in turn got even more content on the platform.&lt;/p&gt;

&lt;p&gt;Twitter might have been able to build some of these applications on their own, but there‚Äôs no way they would have been able to do everything that API users have imagined. Eventually - once Twitter dominated the microblogging universe - they &lt;a href="https://www.theverge.com/2012/8/23/3263481/twitter-api-third-party-developers"&gt;tightened up their API&lt;/a&gt; and made partners pay for specific kinds of access. While this made early adopters mad, Twitter was able to profit from the growth of their API without sacrificing the long-term profits they now get out of it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#diigo-an-extra-incentive-for-paid-users"&gt;
  &lt;/a&gt;
  Diigo: An Extra Incentive for Paid Users
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YFKeM0Kr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/UTYacdW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YFKeM0Kr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/UTYacdW.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.diigo.com/"&gt;Diigo&lt;/a&gt; is a bookmarking and annotation tool with a generous free tier, convenient Chrome extension, and mobile sharing apps. Because some users wanted to use Diigo for more advanced purposes and build their own applications using the bookmarks they saved in Diigo, Diigo decided to offer a public API, but with a catch. It‚Äôs only available to paid users.&lt;/p&gt;

&lt;p&gt;While providing the API probably isn‚Äôt much more work than servicing their UI (in fact, it might be less work as &lt;a href="https://www.karllhughes.com/posts/startup-website"&gt;websites are notoriously hard to get right&lt;/a&gt;), Diigo decided that the users who wanted API access were most likely willing to pay a few bucks per month to make their lives easier using the API. It certainly hooked me in and took the product from cool to a critical part of my weekly workflow.&lt;/p&gt;

&lt;p&gt;If your business has successfully found a tech-savvy audience that is begging for API access, you might want to consider offering one especially if you can profit from it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mailchimp-allowing-integrations-that-encourage-greater-usage"&gt;
  &lt;/a&gt;
  Mailchimp: Allowing Integrations that Encourage Greater Usage
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x6fBJz2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2iW9aMc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x6fBJz2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2iW9aMc.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mailchimp.com/"&gt;Mailchimp&lt;/a&gt; is one of the most popular email marketing tools out there, and it‚Äôs my personal favorite. It‚Äôs really easy to use, they have a generous free tier for small mailing lists, and they seem to always be the first when offering new features that are great for email senders. They also have a &lt;a href="https://mailchimp.com/developer/"&gt;well-documented API&lt;/a&gt; that encourages even more interesting use cases.&lt;/p&gt;

&lt;p&gt;Without their API, you can create a campaign from a template, add users to a list manually, and look at standard reports. But, using the Mailchimp API, you can build custom templates from your own website‚Äôs data, import thousands of existing users from a database, or showcase your raw email campaign data in novel ways. There‚Äôs no limit to what you can do, but all these new use cases also mean more revenue for Mailchimp as you still have to pay them to send your emails through their service. If you‚Äôre building a software-as-a-service platform that charges based on usage, an API could be a great way to increase engagement.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aylien-api-as-a-service"&gt;
  &lt;/a&gt;
  Aylien: API as a Service
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bAUzBN24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/lQwV0AU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bAUzBN24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/lQwV0AU.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While many APIs are a bonus or supplemental feature, some companies are built as API-first services. &lt;a href="https://aylien.com/"&gt;Aylien&lt;/a&gt; is a text analysis and natural language processing service that doesn‚Äôt offer a user interface at all - they just sell access to their API.&lt;/p&gt;

&lt;p&gt;This means that developers hoping to analyze or categorize data can simply send their text to Aylien, then listen for a response with all the analysis they need. There‚Äôs no custom code involved at all, and using Aylien with existing data should take no more than a few minutes. They charge customers for this time savings though - once you go over their free tier, there‚Äôs a fee for using it.&lt;/p&gt;

&lt;p&gt;Aylien might someday offer a user interface, but by starting out as an API-first company, they‚Äôve aligned themselves with developers and put the focus on their technical tooling rather than UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#does-every-business-need-an-api"&gt;
  &lt;/a&gt;
  Does Every Business Need an API?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúEvery company in the world already has valuable data and functionality housed within its systems. Capitalizing on this value, however, means liberating it from silos and making it interoperable and reusable in different contexts‚Äîincluding by combining it with valuable assets from partners and other third parties.‚Äù - &lt;a href="https://pages.apigee.com/rs/351-WXY-166/images/Apigee_StateOfAPIS_eBook_2020.pdf"&gt;Apigee State of the API Economy, 2021&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Many businesses have had great success building APIs that customers or other third parties can use, but you do not &lt;em&gt;have&lt;/em&gt; to have an API, even if you are building a software-based business. In fact, the complexity of offering an API in addition to a user interface may be &lt;a href="https://www.karllhughes.com/posts/creating-a-tech-startup-without-a-developer"&gt;too much for a small startup&lt;/a&gt;, but it‚Äôs still good to understand when and why an API is appropriate.&lt;/p&gt;

&lt;p&gt;Here is a list of reasons you may or may not want to build an API. While not exhaustive, this should give you a starting point when deciding whether or not an API is right for your use case.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-should-probably-build-an-api-if"&gt;
  &lt;/a&gt;
  You Should Probably Build an API If:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  You want to build a mobile app or desktop app someday&lt;/li&gt;
&lt;li&gt;  You want to use modern front-end frameworks like &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; or &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  You have a data-heavy website that you need to run quickly and load data without a complete refresh&lt;/li&gt;
&lt;li&gt;  You want to access the same data in many different places or ways (eg: an internal dashboard and a customer-facing web app)&lt;/li&gt;
&lt;li&gt;  You want to allow customers or partners limited or complete access to your data&lt;/li&gt;
&lt;li&gt;  You want to upsell your customers on direct API access&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#you-should-probably-not-build-an-api-if"&gt;
  &lt;/a&gt;
  You Should Probably &lt;em&gt;Not&lt;/em&gt; Build an API If:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  You just need a landing page or blog as a website&lt;/li&gt;
&lt;li&gt;  Your application is temporary and not intended to grow or change much&lt;/li&gt;
&lt;li&gt;  You never intend on expanding to other platforms (eg: mobile, desktop)&lt;/li&gt;
&lt;li&gt;  You don‚Äôt understand the technical implications of building one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One thing that doesn‚Äôt have to stand in your way of building an API is not having (or being) an experienced software developer. &lt;strong&gt;In fact, you might be able to build a serviceable API without any custom development work, but you should understand some of the implications of giving users API access to your data.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dO9oJelj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/i9q2sLl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dO9oJelj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/i9q2sLl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-to-consider-when-building-an-api"&gt;
  &lt;/a&gt;
  Things to Consider When Building an API
&lt;/h2&gt;

&lt;p&gt;When you build a website with sensitive or proprietary data, you probably want users to log in before they can access it. The same holds true for APIs - you shouldn‚Äôt make yours open to the public unless you want anyone in the world to have access. Even if you want the data to be easy to get, you may want to issue API keys just so you can keep track of who‚Äôs using it and potentially lock out anyone who abuses your API. Security is one consideration, but there are many other things you should think about when building an API:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h3&gt;

&lt;p&gt;Who do you want to give access to your API? Paying customers? Internal employees? Anyone on the internet? If you want to institute any limits on how or how much your API is used, you‚Äôll need some form of authentication. Common options include Basic Auth, API Keys, OAuth tokens, and JSON Web Tokens. I won‚Äôt get into the difference here, but there‚Äôs a &lt;a href="https://zapier.com/engineering/apikey-oauth-jwt/"&gt;great article by Zapier explaining the difference here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h3&gt;

&lt;p&gt;Developers who want to use your API will need some way to know how they can use it. API Documentation should describe the requests that are allowed, the format and type of data inputs allowed, and the responses returned by the API. These documents can follow certain standard formats (like the &lt;a href="https://swagger.io/solutions/api-documentation/"&gt;Swagger specification&lt;/a&gt;), or they can be different between every API. We‚Äôll talk more about requests and responses in the next section of this guide.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#role-and-routebased-permissions"&gt;
  &lt;/a&gt;
  Role and Route-Based Permissions
&lt;/h3&gt;

&lt;p&gt;Sometimes you will need your authentication rules to be quite complicated. For example, maybe internal developers can access certain parts of your API that public users or customers cannot. Developers can build in role or route-based permissions systems that prevent unauthorized use in specific parts of your API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rate-limiting"&gt;
  &lt;/a&gt;
  Rate Limiting
&lt;/h3&gt;

&lt;p&gt;When you offer access to your API to the public, it‚Äôs usually a good idea to prevent people from using it too much or too quickly. Rate limiting can prevent users from abusing your API, scraping all your data, or simply crashing your app because they‚Äôre making so many requests.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logginganalytics"&gt;
  &lt;/a&gt;
  Logging/Analytics
&lt;/h3&gt;

&lt;p&gt;When your API returns an error to a user, you might want to know about it. Logging can be added to capture every request and response or just the ones that failed. Logging or analytics can also help you track how much your API is being used, especially when you‚Äôre dealing with lots of third-party users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#side-effects"&gt;
  &lt;/a&gt;
  Side Effects
&lt;/h3&gt;

&lt;p&gt;What if you want to trigger alerts, link multiple API requests together, or kick off background tasks with your API? These events are referred to as ‚Äúside effects‚Äù meaning that they might not be contained in the primary request and response, but are still important actions when designing your API. Usually, this level of customization has to be custom-coded, but there are ways to manage side effects without writing code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scalability"&gt;
  &lt;/a&gt;
  Scalability
&lt;/h3&gt;

&lt;p&gt;‚ÄúScalability‚Äù is a term that developers use to refer to the ability of your API to grow or shrink depending on the needs of your team or customers. For example, a scalable API can handle 100 users today and 10,000 users tomorrow without throwing lots of errors. Ideally, a good, scalable API will cost less when it‚Äôs not in use, but that level of scalability is tough to reach without a developer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#speed"&gt;
  &lt;/a&gt;
  Speed
&lt;/h3&gt;

&lt;p&gt;500 milliseconds (1/2 a second) may not sound like much time, but for computers, this is an eternity. While there‚Äôs no single answer to the question, ‚Äú&lt;a href="https://dev.to/karllhughes/building-a-response-timer-to-benchmark-api-performance-3k6k"&gt;How fast should your API be?&lt;/a&gt;‚Äù many successful APIs respond within 100 milliseconds. This can depend greatly on who your users are and what they‚Äôre using your API for. Real-time stock market price APIs need to be much faster than most consumer web applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aPOLaONg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/U0j7OTh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aPOLaONg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/U0j7OTh.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-an-api-works"&gt;
  &lt;/a&gt;
  How an API Works
&lt;/h2&gt;

&lt;p&gt;Now that you know what an API is and why it might be a good fit for your business and some technical considerations, let‚Äôs make it a little more tangible.&lt;/p&gt;

&lt;p&gt;APIs are a way for computers to share data or functionality, but computers need some kind of interface to talk to each other. While there are many options out there, we‚Äôll focus on &lt;a href="https://en.wikipedia.org/wiki/Web_API"&gt;HTTP APIs (also known as Web APIs)&lt;/a&gt; as they are the most common option in web and mobile app development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-building-blocks-of-an-api"&gt;
  &lt;/a&gt;
  The Building Blocks of an API
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;First, an API needs a data source.&lt;/strong&gt; In most cases, this will be a database like &lt;a href="https://www.mysql.com/"&gt;MySQL&lt;/a&gt;, &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt;, or &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt; (don‚Äôt worry if you don‚Äôt know what those are, they‚Äôre basically just ways that programmers store data), but it could also be something simpler like a text file or spreadsheet. The API‚Äôs data source can usually be updated through the API itself, but it might be updated independently if you want your API to be ‚Äúread-only‚Äù.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next, an API needs a format for making requests.&lt;/strong&gt; When a user wants to use an API, they make a ‚Äúrequest‚Äù. This request usually includes a verb (eg: ‚ÄúGet‚Äù, ‚ÄúPost‚Äù, ‚ÄúPut‚Äù, or ‚ÄúDelete‚Äù), a path (this looks like a URL), and a payload (eg: form or JSON data). Good APIs offer rules for making these requests in their documentation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finally, an API needs to return a response.&lt;/strong&gt; Once the API processes the request and gets or saves data to the data source, it should return a ‚Äúresponse‚Äù. This response usually includes a status code (eg: ‚Äú404 - Not Found‚Äù, ‚Äú200 - Okay‚Äù, or ‚Äú500 - Server Error‚Äù) and a payload (usually text or JSON data). This response format should also be specified in the documentation of the API so that developers know what to expect when they make a successful request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--axhT4nSd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PiT8p1E.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--axhT4nSd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PiT8p1E.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An API can optionally do many other things (see the list of considerations above), but these three things are the most fundamental for any API. To make these concepts even more concrete, let‚Äôs access a couple real APIs and see what they look like. Don‚Äôt worry, you don‚Äôt have to know how to code to follow along.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessing-an-api-from-your-web-browser"&gt;
  &lt;/a&gt;
  Accessing an API from Your Web Browser
&lt;/h3&gt;

&lt;p&gt;HTTP APIs actually use the same method of communication that your web browser uses when it accesses websites. This means you can access some APIs by simply typing a URL into your browser.&lt;/p&gt;

&lt;p&gt;For example, &lt;a href="https://world.openfoodfacts.org/data"&gt;Open Food Facts&lt;/a&gt; has a free API for getting information about foods and ingredients. You can go to &lt;a href="https://world.openfoodfacts.org/api/v0/product/737628064502.json"&gt;this link&lt;/a&gt; in your web browser to see the API response for all the data they have on ‚ÄúStir Fry Rice Noodles‚Äù.&lt;/p&gt;

&lt;p&gt;When you go to that URL, you‚Äôll see a mess of data like this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{"status":1,"product":{"ingredients_text_with_allergens":"RICE NOODLES (RICE, WATER), SEASONING PACKET (PEANUT, SUGAR, SALT, CORN STARCH, SPICES [CHILI, CINNAMON, PEPPER, CUMIN, CLOVE], HYDRDLYZED SOY PROTEIN, GREEN ONIONS, CITRIC ACID, PEANUT OIL, SESAME OIL, NATURAL FLAVOR).","generic_name_en_debug_tags":[],"nutrition_data_per_debug_tags":[],"additives_prev":" [ rice-noodles -&amp;gt; en:rice-noodles  ]  [ noodles -&amp;gt; en:noodles  ]  [ rice -&amp;gt; en:rice  ]  [ water -&amp;gt; en:water  ]  [ seasoning-packet -&amp;gt; en:seasoning-packet  ]  [ packet -&amp;gt; en:packet  ]  [ peanut -&amp;gt; en:peanut  ]  [ sugar -&amp;gt; en:sugar  ]  [ salt -&amp;gt; en:salt  ]  [ corn-starch -&amp;gt; en:corn-starch  ]  [ starch -&amp;gt; en:starch  ]  [ spices -&amp;gt; en:spices  ]  [ chili -&amp;gt; en:chili  ]  [ cinnamon -&amp;gt; en:cinnamon  ]  [ pepper -&amp;gt; en:pepper  ]  [ cumin -&amp;gt; en:cumin  ]  [ clove -&amp;gt; en:clove  ]  [ hydrdlyzed-soy-protein -&amp;gt; en:hydrdlyzed-soy-protein  ]  [ soy-protein -&amp;gt; en:soy-protein  ]  [ protein -&amp;gt; en:protein  ]  [ green-onions -&amp;gt; en:green-onions  ]  [ onions -&amp;gt; en:onions  ]  [ citric-acid -&amp;gt; en:e330  -&amp;gt; exists  -- ok  ]  [ peanut-oil -&amp;gt; en:peanut-oil  ]  [ oil -&amp;gt; en:oil  ]  [ sesame-oil -&amp;gt; en:sesame-oil  ]  [ oil -&amp;gt; en:oil  ]  [ natural-flavor -&amp;gt; en:natural-flavor  ]  [ flavor -&amp;gt; en:flavor  ] ","nutrition_data":"on","ingredients_from_palm_oil_n":0,"editors":["","thierrym","manu1400","andre","upcbot"],"allergens_hierarchy":[],"brands":"Thai Kitchen,Simply Asia","link":"",...}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Obviously, this is impossible for humans to make sense of, but it‚Äôs actually formatted in ‚ÄúJSON‚Äù, a very common and easy-to-parse format for computers. To see the data in a more readable way, you can format it using a &lt;a href="https://jsonformatter.org/"&gt;JSON formatter&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Go to &lt;a href="https://jsonformatter.org/"&gt;jsonformatter.org&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Copy/paste all the messy-looking text from the openfoodfacts API response above into the left-hand side of the JSON formatter.&lt;/li&gt;
&lt;li&gt;  Click ‚ÄúFormat/Beautify‚Äù&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1X7xnUnH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/j6nPxdu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1X7xnUnH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/j6nPxdu.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the data is a little easier to look at. Congratulations, you just made your first real API request!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessing-an-api-from-postman"&gt;
  &lt;/a&gt;
  Accessing an API from Postman
&lt;/h3&gt;

&lt;p&gt;The example above was simple because the API didn‚Äôt require any authentication and we were just making a ‚ÄúGet‚Äù request to see all the data about a single product. If the API you‚Äôre accessing or building is more complex, you‚Äôll likely need to use an API tool like &lt;a href="https://www.karllhughes.com/posts/postman-api-access"&gt;Postman&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  To set up Postman, &lt;a href="https://www.getpostman.com/apps"&gt;download it for your operating system here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;  We‚Äôll be using the &lt;a href="https://holidayapi.com/"&gt;Holiday API&lt;/a&gt;, so go to &lt;a href="https://holidayapi.com/"&gt;holidayapi.com&lt;/a&gt; and sign up for a free API key.&lt;/li&gt;
&lt;li&gt;  Enter the URL &lt;code&gt;https://holidayapi.com/v1/holidays&lt;/code&gt; into the Postman address bar&lt;/li&gt;
&lt;li&gt;  Click ‚ÄúParams‚Äù and enter your &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;country&lt;/code&gt;, and &lt;code&gt;year&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;  Click ‚ÄúSend‚Äù to make the API request to Holiday API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rwHlhgee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/B63DsOZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rwHlhgee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/B63DsOZ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just like the response from Open Food Facts, the Holiday API returns a JSON data structure:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{    "status": 200,    "holidays": {        "2017-01-01": [            {                "name": "Last Day of Kwanzaa",                "date": "2017-01-01",                "observed": "2017-01-01",                "public": false            },            {                "name": "New Year's Day",                "date": "2017-01-01",                "observed": "2017-01-02",                "public": true            }        ],        ...   }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In addition to making complex API requests easier, Postman also makes responses easier to read by formatting them. This means you don‚Äôt have to use a tool like JSON Formatter to make API data readable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessing-an-api-from-code"&gt;
  &lt;/a&gt;
  Accessing an API from Code
&lt;/h3&gt;

&lt;p&gt;While using your web browser or Postman is great for testing and exploring an API, you (or your customers) will eventually want to connect to your API using code. There are many ways to do this, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://curl.haxx.se/docs/manpage.html"&gt;CURL&lt;/a&gt; from the command line&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX/Getting_Started"&gt;AJAX&lt;/a&gt; or &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;Fetch API&lt;/a&gt; in Javascript&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://ruby-doc.org/stdlib-2.5.1/libdoc/net/http/rdoc/index.html"&gt;Net::HTTP&lt;/a&gt; in Ruby&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://unirest.io/java.html"&gt;Unirest&lt;/a&gt; in Java&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pretty much every programming language or framework has an HTTP library that you can use to make API requests, but I won‚Äôt cover them in detail here as this guide is all about no-code solutions. Just know that developers who want to use your API will likely need a tool like this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-for-building-apis-without-code"&gt;
  &lt;/a&gt;
  Tools for Building APIs Without Code
&lt;/h2&gt;

&lt;p&gt;Now that you know what an API is, why you might need one, and how to access an API, you‚Äôre ready to get your hands dirty and actually build one. All of the solutions below (with the exception of the last two) require no code, but many of them can be enhanced or improved with some custom development work.&lt;/p&gt;

&lt;p&gt;I find this model of &lt;a href="https://www.karllhughes.com/posts/creating-a-tech-startup-without-a-developer"&gt;starting with a no-code prototype and then enhancing it with code&lt;/a&gt; from a developer to be ideal as it allows you to test your API before you &lt;a href="https://www.karllhughes.com/posts/hiring-process"&gt;hire a software engineer&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sheetsu"&gt;
  &lt;/a&gt;
  &lt;a href="https://sheetsu.com/"&gt;Sheetsu&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt; Sheetsu might be the easiest way to get started building an API because you probably already have some data in a spreadsheet that will make up the backbone of your application. Sheetsu takes any Google Sheet and turns it into a queryable, flexible API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Super simple to get started. This is truly a zero-code solution&lt;/li&gt;
&lt;li&gt;  Authentication via an API key&lt;/li&gt;
&lt;li&gt;  Route-based permissions&lt;/li&gt;
&lt;li&gt;  Automatically generated docs&lt;/li&gt;
&lt;li&gt;  Input forms to allow users to add content&lt;/li&gt;
&lt;li&gt;  Can use with Zapier to trigger events in other services, send emails, etc.&lt;/li&gt;
&lt;li&gt;  Includes ‚Äúinstructions‚Äù you can email to developers to help them start using your API&lt;/li&gt;
&lt;li&gt;  ‚ÄúHandlebars‚Äù option allows you to create a frontend template from your data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Does not allow you to enhance your API with custom code&lt;/li&gt;
&lt;li&gt;  No user roles for advanced permissions&lt;/li&gt;
&lt;li&gt;  Linking data in multiple tables isn‚Äôt really possible&lt;/li&gt;
&lt;li&gt;  Query options are somewhat limited (just a simple search by field)&lt;/li&gt;
&lt;li&gt;  Doesn‚Äôt appear to allow rate limiting&lt;/li&gt;
&lt;li&gt;  While there is a free plan, it‚Äôs extremely limited, and you‚Äôre likely going to have to move to the $49/month plan pretty quickly&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#airtable"&gt;
  &lt;/a&gt;
  &lt;a href="https://airtable.com/invite/r/4EaSmQNr"&gt;Airtable&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt; I‚Äôve started using Airtable for almost everything that I used to pack into spreadsheets. The big advantage to &lt;a href="https://www.karllhughes.com/posts/using-airtable-as-an-api"&gt;using Airtable for your API&lt;/a&gt; is that they have an excellent visual user interface and integrations with many other tools built-in. Plus, you can use Zapier to trigger custom actions when new items show up in Airtable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Super simple to get started, another zero-code solution&lt;/li&gt;
&lt;li&gt;  Authentication via a single API key&lt;/li&gt;
&lt;li&gt;  Permissions using sharing settings in UI&lt;/li&gt;
&lt;li&gt;  Input forms to allow users to add content&lt;/li&gt;
&lt;li&gt;  Can use Zapier to trigger events in other services, send emails, etc.&lt;/li&gt;
&lt;li&gt;  Database-style linking between records&lt;/li&gt;
&lt;li&gt;  Query by complex functions for advanced filtering and searching of records&lt;/li&gt;
&lt;li&gt;  User roles allow limited role-based permissions&lt;/li&gt;
&lt;li&gt;  Excellent automatic documentation generated for each table&lt;/li&gt;
&lt;li&gt;  API is automatic. Every Airtable you make already has API access&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Officially only allows up to 5 API requests per second, which might be fine for light use, but could be limiting as you scale up&lt;/li&gt;
&lt;li&gt;  Authenticating users requires them to have an Airtable account and generate their own API key&lt;/li&gt;
&lt;li&gt;  Not as customizable as some options&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#wrapapi"&gt;
  &lt;/a&gt;
  &lt;a href="https://wrapapi.com/"&gt;WrapAPI&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt; In theory, WrapAPI is a powerful and extremely useful tool for scraping data or making your own static website or spreadsheet into a queryable, dynamic API. In practice, it‚Äôs a bit more complicated. I have played around with WrapAPI quite a bit, and while I‚Äôm highly technical, I found that it only works correctly for some websites. Relatively simple HTML-only sites tend to work best while complex ‚Äúclient-side‚Äù apps tend to get lost.&lt;/p&gt;

&lt;p&gt;Still, it‚Äôs worth trying this tool out if you already have your data on a web page (maybe an HTML table) and you want to expose it via an API as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Great if the data you have already exists on the web and it‚Äôs displayed on a simple webpage&lt;/li&gt;
&lt;li&gt;  Would also be useful for monitoring web pages that don‚Äôt offer ‚Äúofficial‚Äù APIs&lt;/li&gt;
&lt;li&gt;  API-key based authentication&lt;/li&gt;
&lt;li&gt;  Generous free tier (30k requests/month)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Can‚Äôt save data through the API, they are read-only&lt;/li&gt;
&lt;li&gt;  No logging, or extensions, and customizability is limited&lt;/li&gt;
&lt;li&gt;  A little more difficult to get set up unless you know how &lt;a href="https://www.w3schools.com/cssref/css_selectors.asp"&gt;HTML and CSS selectors work&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#restdbio"&gt;
  &lt;/a&gt;
  &lt;a href="https://restdb.io/"&gt;Restdb.io&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt; What I like about RestDB.io is that it starts simple, but is very powerful if you are a developer. Unfortunately, it‚Äôs not quite as easy to add things like authentication or validation as it is in some platforms, but if you have some Javascript chops, you might be able to write that on your own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Can create ‚Äúlookup‚Äù relationships between records&lt;/li&gt;
&lt;li&gt;  Can bring your own database to customize even further&lt;/li&gt;
&lt;li&gt;  Pricing is very good and each tier scales really high&lt;/li&gt;
&lt;li&gt;  Lots of features can be added via ‚ÄúCodehooks‚Äù:

&lt;ul&gt;
&lt;li&gt;  Authentication&lt;/li&gt;
&lt;li&gt;  Logging&lt;/li&gt;
&lt;li&gt;  Emails&lt;/li&gt;
&lt;li&gt;  Role or route-based permissions&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  If you want to get beyond basic use-cases, you‚Äôll need a developer to help&lt;/li&gt;
&lt;li&gt;  The auto-generated docs are too simplistic&lt;/li&gt;
&lt;li&gt;  Vendor lock-in is a likely problem once you scale. While you can export your data, it would be pretty arduous to rebuild lots of custom Codehooks&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#bubble"&gt;
  &lt;/a&gt;
  &lt;a href="https://bubble.io/"&gt;Bubble&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt; Bubble is probably &lt;a href="https://www.karllhughes.com/posts/bubble-web-app"&gt;the best web application builder&lt;/a&gt; I‚Äôve seen for those who don‚Äôt code, and because it also includes an option to expose your data or workflows over an API, it‚Äôs worth noting here. You can hook into your application‚Äôs permission settings to manage access to resources or keep certain resources hidden completely. If you‚Äôre already using Bubble for your website, then using them to generate your API is an easy decision.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Permissions and authentication managed the same way as it is in the application builder&lt;/li&gt;
&lt;li&gt;  Documentation generation with Swagger&lt;/li&gt;
&lt;li&gt;  Logging through Bubble‚Äôs admin interface&lt;/li&gt;
&lt;li&gt;  Creating data models is pretty simple and you can import CSV files with your data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Learning Bubble is a big undertaking, and if you go with them, you‚Äôre likely all in&lt;/li&gt;
&lt;li&gt;  Not quite as customizable as building your own API with code, but it‚Äôs pretty close&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#algolia"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.algolia.com/"&gt;Algolia&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt; For searching data, Algolia is simply magical. Most other solutions here aren‚Äôt concerned with performance because often, building an MVP doesn‚Äôt warrant it, but if you‚Äôre in need of speed and you have a lot of data, Algolia is a great solution. It can take some technical setup depending on how you want to use it, but &lt;a href="https://discourse.algolia.com/t/algolia-for-zapier-beta/2949/7"&gt;there‚Äôs a Zapier connector in the works&lt;/a&gt;, and you can upload records via CSV or JSON. Even if you can‚Äôt write code, you can probably get Algolia working for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Super-good at searching, setting up search rules, and speed&lt;/li&gt;
&lt;li&gt;  Slightly more difficult than editing a spreadsheet, but not much&lt;/li&gt;
&lt;li&gt;  Can be used as a replacement for Solr or Elasticsearch (if you don‚Äôt know what those are, don‚Äôt worry about it)&lt;/li&gt;
&lt;li&gt;  Logging is available&lt;/li&gt;
&lt;li&gt;  Scales up as high as you want&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Limited flexibility and customization&lt;/li&gt;
&lt;li&gt;  No documentation generation&lt;/li&gt;
&lt;li&gt;  Can get expensive at higher use levels&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#strapi"&gt;
  &lt;/a&gt;
  &lt;a href="https://strapi.io/"&gt;Strapi&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt; Strapi is an open-source content management system that lets you self-host an API on your own server in minutes. Even if you‚Äôre not an experienced developer, you can probably follow the &lt;a href="https://strapi.io/documentation/developer-docs/latest/getting-started/quick-start.html"&gt;setup instructions&lt;/a&gt; to get started. The biggest limitation today is that you‚Äôll need to run and maintain a server to host your Strapi backend. But, as an &lt;a href="https://www.karllhughes.com/posts/open-source-companies"&gt;open-source company&lt;/a&gt;, I imagine Strapi will add a hosted version that makes it even easier for non-technical users to get started with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Very flexible and fast&lt;/li&gt;
&lt;li&gt;  Includes a GraphQL interface, which is a better option for some use cases&lt;/li&gt;
&lt;li&gt;  Can build complex relationships between data models&lt;/li&gt;
&lt;li&gt;  Permissions and authentication rules can be set granularly&lt;/li&gt;
&lt;li&gt;  Scales up as much as your server can handle&lt;/li&gt;
&lt;li&gt;  Free (but you do pay for your server)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Not completely ‚Äúno-code‚Äù because you have to setup and run it on your own server&lt;/li&gt;
&lt;li&gt;  More complicated to set up and configure than some options&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#php-crud-api"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/mevdschee/php-crud-api"&gt;PHP CRUD API&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt; If you‚Äôre semi-technical or you can hire a developer to do some initial setup, PHP-CRUD-API might be a great option. Once you hook it up to an existing MySQL, Postgres, or SQL Server database, it automatically generates an API that is documented and highly customizable. The downside to this approach is that you‚Äôll have to pay to host and set up the application. The upside is that it should scale with you long after your MVP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Much more flexible as you can view and modify the whole app‚Äôs source code&lt;/li&gt;
&lt;li&gt;  Once set up, you just have to modify your database schema to modify the API&lt;/li&gt;
&lt;li&gt;  Scales as much as the server you put it on&lt;/li&gt;
&lt;li&gt;  Automatic &lt;a href="https://swagger.io/docs/"&gt;Swagger&lt;/a&gt; documentation generation&lt;/li&gt;
&lt;li&gt;  Works great if you already have an existing database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Not really a ‚Äúno-code‚Äù solution as you‚Äôll likely have to have a developer set it up for you&lt;/li&gt;
&lt;li&gt;  While the application is free, you will have to pay for hosting it (probably $5-$25/month)&lt;/li&gt;
&lt;li&gt;  No authentication, logging, triggers, etc. included out of the box, but they can be added with some custom coding&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Building an API without code is getting easier every year. When I first wrote this guide in 2017, the options were limited, but with the widespread growth of &lt;a href="https://www.karllhughes.com/posts/cloud-services"&gt;cloud services&lt;/a&gt; and &lt;a href="https://stackoverflow.blog/2021/06/09/using-low-code-tools-to-iterate-products-faster/"&gt;low-code tools&lt;/a&gt;, I‚Äôve been able to add many new options to this guide.&lt;/p&gt;

&lt;p&gt;I intend to keep updating this guide periodically. If you have your own suggestions for building APIs without code, &lt;a href="https://twitter.com/karllhughes"&gt;find me on Twitter&lt;/a&gt; to let me hear about them.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
