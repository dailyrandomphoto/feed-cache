<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I Design, You Build! - Frontend Challenge #2</title>
      <author>Zernonia</author>
      <pubDate>Thu, 30 Sep 2021 18:01:40 +0000</pubDate>
      <link>https://dev.to/zernonia/i-design-you-build-frontend-challenge-2-2egc</link>
      <guid>https://dev.to/zernonia/i-design-you-build-frontend-challenge-2-2egc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#appreciation"&gt;
  &lt;/a&gt;
  Appreciation
&lt;/h2&gt;

&lt;p&gt;What an overwhelming response from the first challenge! I really enjoy seeing every submission, and appreciate every feedback given. If you haven't give the challenge a try, I &lt;strong&gt;strongly encourage&lt;/strong&gt; you to join us in this fun challenge! 🤩✨&lt;/p&gt;

&lt;p&gt;I know everyone is in different level of HTML/CSS/Javascript, but don't worry, I will try to mix in different difficulties in the coming challenge, so stay tuned! 🔔&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#challenge"&gt;
  &lt;/a&gt;
  Challenge
&lt;/h2&gt;

&lt;p&gt;I have a confession to make, I'm kinda obsessed with Gradient Blob recently. If you check out my &lt;a href="https://www.zernonia.com/"&gt;website&lt;/a&gt;, you will know what I meant.&lt;/p&gt;

&lt;p&gt;So, in this challenge, we will be creating an awesome &lt;strong&gt;Gradient Blob and Text&lt;/strong&gt; Website for a web application. Create a homepage following the design. Fulfill Target and/or Extra below:&lt;/p&gt;

&lt;p&gt;Target:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🎯 Target : User can see the similar design&lt;/li&gt;
&lt;li&gt;🎯 Target : Responsive design&lt;/li&gt;
&lt;li&gt;🎯 Target : Gradient text&lt;/li&gt;
&lt;li&gt;🎯 Target : Gradient background (gradient blob)&lt;/li&gt;
&lt;li&gt;🎯 Target : On mobile, when I select the hamburger menu, I can see a navigation (use your own creativity)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extra:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🌟 Extra : Add animation to the Gradient blob&lt;/li&gt;
&lt;li&gt;🌟 Extra : Add animation to the image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;📃 Icon : &lt;a href="https://icones.js.org/collection/all"&gt;https://icones.js.org/collection/all&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📃 Hosting: &lt;a href="https://vercel.com/"&gt;https://vercel.com/&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠ It will defeat the purpose of learning if you just copy and paste someone else's answer 😭!&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#start-coding"&gt;
  &lt;/a&gt;
  Start Coding!
&lt;/h2&gt;

&lt;p&gt;If you are ready to take on the challenge, then&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Help 💖 this design on &lt;a href="https://dribbble.com/shots/16561170-UNX-Slick-Gradient-Landing-Page"&gt;Dribbble&lt;/a&gt;, and follow me! Please... 😳&lt;/li&gt;
&lt;li&gt;Bookmark this post so that you can submit it easier.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Right-click&lt;/strong&gt; &lt;a href="https://www.figma.com/file/nJMqfSZI2HZGjWHWV4jCnG/UNX-Slick-App?node-id=0%3A1"&gt;here&lt;/a&gt; and open &lt;strong&gt;Open link in a New Tab&lt;/strong&gt; to see the Figma Design.&lt;/li&gt;
&lt;li&gt;Enjoy coding! 🤩&lt;/li&gt;
&lt;li&gt;Come back to submit!&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;All the &lt;strong&gt;images&lt;/strong&gt; and &lt;strong&gt;assets&lt;/strong&gt; are free to use, and can be exported from the Figma Design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/file/nJMqfSZI2HZGjWHWV4jCnG/UNX-Slick-App?node-id=0%3A1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---82mp8JC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v42ksciemobwm90rp2xj.png" alt="Zernonia Frontend Challenge #2"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#submission"&gt;
  &lt;/a&gt;
  Submission
&lt;/h2&gt;

&lt;p&gt;Once you've completed, come back to this post, and submit your solution using the following &lt;code&gt;template&lt;/code&gt; in the comment section. You are encouraged to &lt;strong&gt;comment&lt;/strong&gt; and &lt;strong&gt;upvotes&lt;/strong&gt; other's answer!&lt;/p&gt;

&lt;p&gt;Thank you!💘&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Feedback: This is awesome!

Demo: &amp;lt;url&amp;gt;
Github: &amp;lt;url&amp;gt;
Tech-Stack: Vue, TailwindCSS
Learning Outcome: 
  1. 
  2.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;I share these design freely so that anyone who wanted to practice or challenge Web design be able to do so without paying other platform (&lt;em&gt;ahem) to get their **Figma Design&lt;/em&gt;*🎨 file. &lt;/p&gt;

&lt;p&gt;You are free to use the Design you've created in your portfolio. No copyright claims or anything.&lt;/p&gt;

&lt;p&gt;But if you are loving my work, you are most welcomed to follow me on &lt;code&gt;Dev.to&lt;/code&gt; and &lt;a href="https://twitter.com/zernonia"&gt;Twitter&lt;/a&gt; 😄&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-your-time-and-attention-hope-youll-enjoy"&gt;
  &lt;/a&gt;
  Thank you for your time and attention! Hope you'll enjoy!
&lt;/h3&gt;

</description>
    </item>
    <item>
      <title>Top 5 state management libraries for React</title>
      <author>Anjan Shomooder</author>
      <pubDate>Thu, 30 Sep 2021 17:22:10 +0000</pubDate>
      <link>https://dev.to/thatanjan/top-5-state-management-libraries-for-react-2c9</link>
      <guid>https://dev.to/thatanjan/top-5-state-management-libraries-for-react-2c9</guid>
      <description>&lt;p&gt;There are a lot of state management libraries available for Reactjs. Here you will learn about the 5 most popular state management libraries.&lt;br&gt;
In case if you don't know, simply State management libraries are used for passing the props to children components without prop drilling.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h3&gt;

&lt;p&gt;There are a lot of state management libraries available for Reactjs and they have their pros and cons. So I can't say any library is best. The list I will show you is not ranked.&lt;/p&gt;

&lt;p&gt;So, &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-see-the-top-react-state-management-libraries"&gt;
  &lt;/a&gt;
  Let's see the top react state management libraries
&lt;/h2&gt;
&lt;h2&gt;
  &lt;a href="#redux"&gt;
  &lt;/a&gt;
  &lt;a href="https://react-redux.js.org/"&gt; Redux &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U1pVWSMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erjck90ysagn43xlc1m5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U1pVWSMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erjck90ysagn43xlc1m5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A predictable state container for React applications. Designed to work with React's component model. Provides APIs that enable your components to interact with the Redux store. Automatically implements complex performance optimizations&lt;/p&gt;

&lt;p&gt;If you have any experience with react-redux then you know it is hard to set up&lt;br&gt;
and work with it for its boilerplate codes. But &lt;a href="https://redux-toolkit.js.org/"&gt; redux-toolkit &lt;/a&gt; simplifies everything for you. I already made a crash course on redux toolkit on &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;cules coding&lt;/a&gt; channel.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rSa8sUC8m_4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like the video, please consider subscribing to the channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mobx"&gt;
  &lt;/a&gt;
  &lt;a href="https://mobx.js.org/README.html"&gt;MobX&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUpkOzg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpptpolti2546lu81eql.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUpkOzg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpptpolti2546lu81eql.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MobX is a battle-tested library that makes state management simple and scalable by transparently applying functional reactive programming (TFRP). The philosophy behind MobX is simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Straightforward&lt;/li&gt;
&lt;li&gt;Effortless optimal rendering&lt;/li&gt;
&lt;li&gt;Architectural freedom&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#recoil"&gt;
  &lt;/a&gt;
  &lt;a href="https://recoiljs.org/"&gt;Recoil&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y_YBkpR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1djfjvb1kjrj1eh78xpc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y_YBkpR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1djfjvb1kjrj1eh78xpc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Minimal and Reactish. Recoil works and thinks like React.&lt;/li&gt;
&lt;li&gt;Data flow graph. Derived data and asynchronous queries are tamed with pure functions and efficient subscriptions.&lt;/li&gt;
&lt;li&gt;Cross-App Observation. Implement persistence, routing, time-travel debugging, or undo by observing all state changes across your app, without impairing code-splitting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#akita"&gt;
  &lt;/a&gt;
  &lt;a href="https://datorama.github.io/akita/"&gt; Akita &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UHNNj9ZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuqpym0rmzqef0xwwoyd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UHNNj9ZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuqpym0rmzqef0xwwoyd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Akita is a state management pattern, built on top of RxJS, which takes the idea of multiple data stores from Flux and the immutable updates from Redux, along with the concept of streaming data, to create the Observable Data Store model.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Akita encourages simplicity. It saves you the hassle of creating boilerplate code and offers powerful tools with a moderate learning curve, suitable for both experienced and inexperienced developers alike.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Akita is based on object-oriented design principles instead of functional programming, so developers with OOP experience should feel right at home. Its opinionated structure provides your team with a fixed pattern that cannot be deviated from.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#hookstate"&gt;
  &lt;/a&gt;
  &lt;a href="https://hookstate.js.org/"&gt; Hookstate &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IRNTT9dw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/59vrlduut7b2jxoi4qk0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IRNTT9dw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/59vrlduut7b2jxoi4qk0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The simple but incredibly fast and flexible state management that is based on React state hook&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Concise, pragmatic but flexible API. Very easy to learn.&lt;/li&gt;
&lt;li&gt;Incredible performance based on a unique method for tracking used/rendered and updated state segments. Ideal solution for huge states and very frequent updates.&lt;/li&gt;
&lt;li&gt;Small core library packed with features: global states, local states, asynchronously loaded states, partial state updates, deeply nested state updates, and a lot more.&lt;/li&gt;
&lt;li&gt;Complete type inference for any complexity of structures of managed state data.&lt;/li&gt;
&lt;li&gt;Extend or customize your state hooks with a plugins system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a lot of libraries available. But&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#which-one-should-you-use"&gt;
  &lt;/a&gt;
  Which one should you use?
&lt;/h3&gt;

&lt;p&gt;It depends on you. Test some libraries first. Pick the one that works for you. &lt;/p&gt;

&lt;p&gt;I love redux. It is very easy to use with the Redux toolkit. What library do you use for state management?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shameless-plug"&gt;
  &lt;/a&gt;
  Shameless Plug
&lt;/h2&gt;

&lt;p&gt;I have made a video about how to build a carousel postcard with React, Material-UI, and Swiper.js.&lt;br&gt;
If you are interested you can check the video.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/NDyjI7hd4uE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You can also demo the application form &lt;a href="https://insta-carousel-demo.vercel.app/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXlAWXXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/insta-carousel-yt/development/public/Screenshot%2520of%2520the%2520App.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXlAWXXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/insta-carousel-yt/development/public/Screenshot%2520of%2520the%2520App.png" alt="Screenshot of Insta Carousel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please like and subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;. It motivates me to create more content like this.&lt;/p&gt;

&lt;p&gt;If you have any questions, please comment down below.&lt;br&gt;
You can reach out to me on social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;
.&lt;br&gt;
Stay safe. Goodbye.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me
&lt;/h2&gt;
&lt;h4&gt;
  &lt;a href="#why-do-i-do-what-i-do"&gt;
  &lt;/a&gt;
  Why do I do what I do?
&lt;/h4&gt;

&lt;p&gt;The Internet has revolutionized our life. I want to make the internet more beautiful and useful.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-do-i-do"&gt;
  &lt;/a&gt;
  What do I do?
&lt;/h4&gt;

&lt;p&gt;I ended up being a full-stack software engineer.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-can-i-do"&gt;
  &lt;/a&gt;
  What can I do?
&lt;/h4&gt;

&lt;p&gt;I can develop complex full-stack web applications like social media applications or e-commerce sites.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-have-i-done"&gt;
  &lt;/a&gt;
  What have I done?
&lt;/h4&gt;

&lt;p&gt;I have developed a social media application called &lt;a href="https://con-fession.vercel.app/"&gt;Confession&lt;/a&gt;. The goal of this application is to help people overcome their imposter syndrome by sharing our failure stories.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XbQiTDS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjay62pz7byne4d8ja8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XbQiTDS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjay62pz7byne4d8ja8v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also love to share my knowledge. So, I run a youtube channel called &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt; where I teach people full-stack web development, data structure algorithms, and many more. So, Subscribe to Cules Coding so that you don't miss the cool stuff.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#want-to-work-with-me"&gt;
  &lt;/a&gt;
  Want to work with me?
&lt;/h2&gt;

&lt;p&gt;I am looking for a team where I can show my ambition and passion and produce great value for them.&lt;br&gt;
Contact me through my email or any social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;
. I would be happy to have a touch with you.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#contacts"&gt;
  &lt;/a&gt;
  Contacts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Email: &lt;a href="mailto:thatanjan@gmail.com"&gt;thatanjan@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;linkedin: &lt;a href="https://linkedin.com/in/thatanjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;portfolio: &lt;a href="https://thatanjan.me/"&gt;anjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instagram (personal): &lt;a href="https://instagram.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instagram (youtube channel): &lt;a href="https://instagram.com/cules_coding/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Twitter: &lt;a href="https://twitter.com/thatAnjan"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Facebook: &lt;a href="https://www.facebook.com/thatanjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blogs you might want to read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/setup-eslint-prettier-with-typescript-and-react"&gt; Eslint, prettier setup with TypeScript and react &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/what-is-client-side-rendering"&gt;What is Client-Side Rendering?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/what-is-server-side-rendering"&gt;What is Server Side Rendering?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/everything-you-need-to-know-about-tree-data-structure"&gt;Everything you need to know about tree data structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/13-reasons-why-you-should-use-Nextjs"&gt;13 reasons why you should use Nextjs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Videos might you might want to watch:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/NDyjI7hd4uE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T-n0mrssDiw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Be_C_Op8Tx8"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ag3je1g0BN8"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/B3HX2rWyKlU"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/C6VytdSDNSk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>redux</category>
    </item>
    <item>
      <title>10% Discount for 15000+ Premium design resources for Life Time Access.</title>
      <author>Kamal Ahmed</author>
      <pubDate>Thu, 30 Sep 2021 17:19:20 +0000</pubDate>
      <link>https://dev.to/marketerkamal/10-discount-for-15000-premium-design-resources-for-life-time-access-36ag</link>
      <guid>https://dev.to/marketerkamal/10-discount-for-15000-premium-design-resources-for-life-time-access-36ag</guid>
      <description>&lt;p&gt;🤷🏻‍♀️ 15000+ Premium design resources Web template, Illustrations, Mobile app, Free icon and Web app elements from the world’s best designers&lt;/p&gt;

&lt;p&gt;Lifetime Access Only 99$ 🎉&lt;br&gt;
Get 10% Discount 📢 Use this coupon code: SPI10&lt;/p&gt;

&lt;p&gt;From : &lt;a href="https://www.uihut.com/"&gt;https://www.uihut.com/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>RippleX Releases Engineering Preview of Proposed Federated Sidechains System</title>
      <author>Scott Determan</author>
      <pubDate>Thu, 30 Sep 2021 17:09:58 +0000</pubDate>
      <link>https://dev.to/ripplexdev/ripplex-releases-engineering-preview-of-proposed-federated-sidechains-system-3ncp</link>
      <guid>https://dev.to/ripplexdev/ripplex-releases-engineering-preview-of-proposed-federated-sidechains-system-3ncp</guid>
      <description>&lt;p&gt;Earlier this year, Ripple &lt;a href="https://ripple.com/insights/a-vision-for-federated-sidechains-xrp-ledger/"&gt;shared&lt;/a&gt; a vision for Federated Sidechains that can complement the XRP Ledger (XRPL) Mainnet. Federated Sidechains support the developer community by unlocking new capabilities related to smart contracts and DeFi, interoperability, NFTs and more.&lt;/p&gt;

&lt;p&gt;Today, an engineering preview of Federated Sidechains that can be used with the XRPL is available for developers to experiment with. Developers are welcome to view and comment on the &lt;a href="https://github.com/ripple/rippled/blob/sidechain/docs/sidechain/design.md"&gt;technical design&lt;/a&gt;, as well as leverage this technology to &lt;a href="https://github.com/ripple/rippled/blob/sidechain/docs/sidechain/GettingStarted.md"&gt;start&lt;/a&gt; exploring its potential.&lt;/p&gt;

&lt;p&gt;At a high level, each sidechain acts as its own blockchain, while federation enables value in the form of XRP and other tokens to move efficiently from the sidechain to the Mainnet. Federated Sidechains operate without compromising the impressive speed, efficiency, and throughput of the public XRPL Mainnet.&lt;/p&gt;

&lt;p&gt;Federated Sidechains create exciting new opportunities for developers. They expand the scope for developers to customize the core, proven XRPL technology to the needs of a specific use case or project. Examples of the kinds of customization enabled include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Innovative design characteristics that can be tuned to specific use cases like tokenization, DeFi, or payments &lt;/li&gt;
&lt;li&gt;Flexibility to make permissioned or nearly permissionless, centralized or largely decentralized ledgers whose assets can be traded on the Mainnet DEX&lt;/li&gt;
&lt;li&gt;Choice in validators and flexibility of system rules (e.g. optional transaction fees and reserve requirements)&lt;/li&gt;
&lt;li&gt;Opportunity to temporarily manage a sidechain and shut it down after it has served its purpose &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that successful new sidechain features may even eventually be ported to the XRPL Mainnet. &lt;/p&gt;

&lt;p&gt;Federated Sidechains give developers an opportunity to launch new features and innovative applications built on foundational XRP Ledger technology, like a smart sidechain with &lt;a href="https://hooks-testnet.xrpl-labs.com/"&gt;Hooks&lt;/a&gt; enabled. Developers can also create private or public sidechains, with public sidechains available for the community to leverage for various use cases. &lt;/p&gt;

&lt;p&gt;Ripple itself will be looking to leverage the flexibility and customizability that Federated Sidechains afford in its own &lt;a href="https://ripple.com/insights/ripple-pilots-a-private-ledger-for-central-banks-launching-cbdcs/"&gt;CBDC efforts&lt;/a&gt;, making it possible for private CBDC ledgers to easily and seamlessly interconnect.&lt;/p&gt;

&lt;p&gt;Interested developers are encouraged to &lt;a href="https://xrplgrants.org/"&gt;apply&lt;/a&gt; to the XRPL Grants Program with your ideas on implementing and launching sidechains for creative use cases and applications.&lt;/p&gt;

&lt;p&gt;Please share your thoughts below.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>New Beginnings.</title>
      <author>Andrew Bonacci</author>
      <pubDate>Thu, 30 Sep 2021 16:26:44 +0000</pubDate>
      <link>https://dev.to/abonacci/new-beginnings-1e7</link>
      <guid>https://dev.to/abonacci/new-beginnings-1e7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#who-i-am"&gt;
  &lt;/a&gt;
  Who I am…
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M8JfdZnG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/us4nh0sllozrli5gcvxj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M8JfdZnG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/us4nh0sllozrli5gcvxj.png" alt="File not found."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My name is Andrew Bonacci. I'm 31 years old, happily married and have recently embarked on a web development journey. I had my first try at HTML back in the early 2000s on the blogging website called Xanga. 14-year-old me thought it was so cool that I could make text do different things by modifying the markups. As time went on, I had some practice with Lua in ROBLOX when I was a late teenager. I didn't get very far because I lacked proper guidance, but I was able to tinker with some of the code and bring my creations to life.&lt;/p&gt;

&lt;p&gt;However, as much as I enjoyed these things, they never became much more than a hobby. Rather, I pursued education because of my desire to make a difference in the lives of others. Even throughout my time as an educator, the one constant has always been software and technology. Other people I worked with would often ask me for help with their software or hardware issues. The more I did this, the more I felt a desire to pursue something I felt I should have done long ago.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-turning-point"&gt;
  &lt;/a&gt;
  The turning point.
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;
Knowing that I wanted to pursue web development and not knowing where to begin with self-study, I began researching possible classes and programs. The first thing I noticed was the number of &lt;em&gt;software boot camps…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OaVBOj1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/z239mnu8goahcze8qi95.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OaVBOj1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/z239mnu8goahcze8qi95.png" alt="File not found."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some of these sounded promising in the beginning, but one thing that most had in common was that they were leading with potential income in various software and web development careers. Of course, a nice salary is always a plus, but I felt like those places were not focused on the &lt;em&gt;passion&lt;/em&gt; of it all. I wanted to be a part of a course that focused on the &lt;strong&gt;&lt;em&gt;love&lt;/em&gt;&lt;/strong&gt; of web development and programming; I’m inspired by those who want to consistently grow and learn more about it.&lt;/p&gt;

&lt;p&gt;In the summer of 2021, while continuing my search for ways to learn programming and development, I came across a Reddit post talking about a mentorship program through &lt;a href="//perpetual.education"&gt;Perpetual Education&lt;/a&gt;. I was fascinated by their website and by how precise their points about learning were, so I decided to schedule a video interview with Derek and Ivy. They were super friendly, welcoming and they gave me an overview of how the course works. I knew then that I wanted to be a part of it. What I love the most about Perpetual Education so far is the strong sense of community among students and staff. Students help each other with lesson content and Derek is highly flexible when it comes to working with students individually.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1lbsPCRL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/ezc5nn75rvfxgucge62z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1lbsPCRL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/ezc5nn75rvfxgucge62z.png" alt="File not found."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The course really breaks things down and starts from the very beginning; so far, we've learned about operating systems, the file system, visual design concepts, how certain things in software came to be the way they are, and more. The idea is to build a strong foundation and mold the way we think so that we don't just learn the code, we learn how to &lt;em&gt;think&lt;/em&gt; like web designers and programmers. There is a good deal of accountability (&lt;strong&gt;which is absolute must!&lt;/strong&gt;); it's crucial to keep up with the content and do your best to go above and beyond what is expected of you, but it's a wonderful experience so far. I've learned more in almost 3 weeks than I've learned in months trying things on my own. The students in my group are currently working on a collaborative project which brings us together even more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion…
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;
I feel happy to be a part of the Perpetual Education learning experience and I'm confident that this will help me on my web development journey. If anyone would like to know more, I welcome you to reach out! I'll be sharing more about my experiences as they unfold, so please feel free to subscribe. I’m always open to learning from others and sharing ideas!&lt;/p&gt;

&lt;p&gt;Regards,&lt;br&gt;
Andrew&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>devops</category>
      <category>devjournal</category>
      <category>development</category>
    </item>
    <item>
      <title>Docker Networking</title>
      <author>Deepak Porwal</author>
      <pubDate>Thu, 30 Sep 2021 16:14:56 +0000</pubDate>
      <link>https://dev.to/dporwal/docker-networking-5ef0</link>
      <guid>https://dev.to/dporwal/docker-networking-5ef0</guid>
      <description>&lt;p&gt;Docker takes care of the networking aspects so that containers can communicate with other containers and also with the Docker Host.&lt;/p&gt;

&lt;p&gt;Docker networking subsystem is pluggable, using drivers. &lt;/p&gt;

&lt;p&gt;There are several drivers available by default and provides core networking functionality.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bridge &lt;/li&gt;
&lt;li&gt;host&lt;/li&gt;
&lt;li&gt;overlay&lt;/li&gt;
&lt;li&gt;macvlan&lt;/li&gt;
&lt;li&gt;none&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can check what all the network drivers are supported by Docker Containers and also at what ip that driver is configured to connect to the other containers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker network &lt;span class="nb"&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you want to check particular network driver is running at what IP, we can inspect that network driver&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker inspect bridge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mcUFpZF8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iiy8euep357wx8f2vvku.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mcUFpZF8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iiy8euep357wx8f2vvku.png" alt="network driver"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can check what all drivers what containers are running and what are not by simply inspecting that particular network driver.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker inspect network host
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dcnq0DcH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldvzn1o0anca316gpl1v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dcnq0DcH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldvzn1o0anca316gpl1v.png" alt="networkhost"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also create a docker container and can launch it to the available network drivers. Like here we have will launch a container on &lt;strong&gt;&lt;em&gt;host&lt;/em&gt;&lt;/strong&gt; driver.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container run &lt;span class="nt"&gt;-dt&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; myhost &lt;span class="nt"&gt;--network&lt;/span&gt; host ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ipg_H3_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1na9vsqxhwv4ziol884q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ipg_H3_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1na9vsqxhwv4ziol884q.png" alt="creatingcontainerhostnetowrk"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bridge-network"&gt;
  &lt;/a&gt;
  Bridge Network
&lt;/h3&gt;

&lt;p&gt;A bridge network uses a software bridge that allows containers connected to the same bridge network to communicate while providing isolation from containers which are not connected to that bridge network.&lt;/p&gt;

&lt;p&gt;C1,C2, C3 are the containers in the bridge network, can also communicate with eachother&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8HPwxj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfaczb5snzwo4w5oevw7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8HPwxj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfaczb5snzwo4w5oevw7.png" alt="BridgeNetwork"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If want to see the bridge in the docker container, you can simply inspect any docker container and there you will get the bridge details.&lt;br&gt;
While creating a container if you don't mention the network, by default it is &lt;strong&gt;&lt;em&gt;bridge&lt;/em&gt;&lt;/strong&gt; network&lt;br&gt;
We also can create User-defined Bridge Network which are superior to the default bridge.&lt;/p&gt;

&lt;p&gt;Let me show you how two docker containers can connect with each other.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 1:Created 2 docker containers &lt;strong&gt;&lt;em&gt;bridge01&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;bridge02&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container run &lt;span class="nt"&gt;-dt&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; bridge01 ubuntu
docker container run &lt;span class="nt"&gt;-dt&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; bridge02 ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Step 2: Enter into the &lt;strong&gt;&lt;em&gt;bridge01&lt;/em&gt;&lt;/strong&gt; container and installed the net-tools(ifconfig) and iputils-ping(ping) using below commands.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; bridge01 bash
apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class="nb"&gt;install &lt;/span&gt;net-tools
apt-get &lt;span class="nb"&gt;install &lt;/span&gt;iputils-ping
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Step3: We will check the ip address for &lt;strong&gt;&lt;em&gt;bridge02&lt;/em&gt;&lt;/strong&gt; . So, to ping to this container.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker inspect bridge02
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yg3MsDrL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doprmoy61430xn7tg2jd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yg3MsDrL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doprmoy61430xn7tg2jd.png" alt="inspectdockercontainer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 4: Here we ping the &lt;strong&gt;&lt;em&gt;bridge02&lt;/em&gt;&lt;/strong&gt; container from &lt;strong&gt;&lt;em&gt;bridge01&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; bridge01 bash
ping 172.17.0.7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wYMmAf3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1th2o5lsuli7fdfgo36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wYMmAf3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1th2o5lsuli7fdfgo36.png" alt="pingcontainer"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#userdefined-bridge-network"&gt;
  &lt;/a&gt;
  User-Defined Bridge Network
&lt;/h3&gt;

&lt;p&gt;Differences between user-defined bridges and the default bridge&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User-defined bridges provide automatic DNS resolution between containers.&lt;/li&gt;
&lt;li&gt;User-defined bridges provide better isolation&lt;/li&gt;
&lt;li&gt;Containers can be attached and detached from user-defined networks on the fly.&lt;/li&gt;
&lt;li&gt;Each user-defined network creates a configurable bridge.&lt;/li&gt;
&lt;li&gt;Linked containers on the default bridge network share environment variables.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reference: &lt;a href="https://docs.docker.com/network/bridge/"&gt;https://docs.docker.com/network/bridge/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets create a custom user-defined bridge.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker network create &lt;span class="nt"&gt;--driver&lt;/span&gt; bridge mybridge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_HWml5tO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7g2ceh17lnsm4qakoto.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_HWml5tO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7g2ceh17lnsm4qakoto.png" alt="customnetworkbridge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we don't define the driver, it will by default take the bridge driver.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker network create mybridge-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EqhYmKD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i5mcg2bxzyictgdnfmpd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EqhYmKD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i5mcg2bxzyictgdnfmpd.png" alt="defaultbridgecustom"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get the subnet and Gateway details of our custom network.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker network inspect mybridge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f4q8CGzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nff5olwgd0ijy57bruv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f4q8CGzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nff5olwgd0ijy57bruv.png" alt="subnetgateway"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we can see that new network containers will be created inside the ubuntu docker container.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kfujypfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkedif9wxt3xr47y2xto.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kfujypfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkedif9wxt3xr47y2xto.png" alt="networkcontainer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#now-let-me-show-you-the-best-feature-of-the-custom-userdefined-network-which-is-userdefined-bridges-provide-automatic-dns-resolution-between-containers-"&gt;
  &lt;/a&gt;
  Now, let me show you the best feature of the custom user-defined network. which is ( &lt;em&gt;User-defined bridges provide automatic DNS resolution between containers.&lt;/em&gt; )
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Step1 : Creating 2 docker containers(&lt;strong&gt;&lt;em&gt;mybridge01&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;mybridge01&lt;/em&gt;&lt;/strong&gt;) on custom network (&lt;strong&gt;&lt;em&gt;mybridge&lt;/em&gt;&lt;/strong&gt;) that we have created.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kf7ygVDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efr6kgefhuf15md7lm1w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kf7ygVDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efr6kgefhuf15md7lm1w.png" alt="dockercontainersoncustomnetwork"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container run &lt;span class="nt"&gt;-dt&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; mybridge01 &lt;span class="nt"&gt;--network&lt;/span&gt; mybridge ubuntu
docker container run &lt;span class="nt"&gt;-dt&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; mybridge02 &lt;span class="nt"&gt;--network&lt;/span&gt; mybridge ubuntu
apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class="nb"&gt;install &lt;/span&gt;net-tools &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class="nb"&gt;install &lt;/span&gt;iputils-ping
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Step 2: Ping the mybridge02 by its name, And here we will be able to connect. This is what we call DNS resolution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n_tgE5QA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4p7sq2cp9m0gam6f5wr3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n_tgE5QA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4p7sq2cp9m0gam6f5wr3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step3: If we try to do the same with the previous containers that we created with the default bridge network(&lt;strong&gt;&lt;em&gt;bridge01&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;bridge02&lt;/em&gt;&lt;/strong&gt;). We will not able to ping with the name defined.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8q5K5X61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70qohotjpnbera7mr4tj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8q5K5X61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70qohotjpnbera7mr4tj.png" alt="mybridgeconnectping"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also define the custom options for your network, which will give us more feasibility to customize with our use-case.&lt;/p&gt;

&lt;p&gt;Like in user-defined network we don't have defined any options yet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GnnEJObB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9jrz1cuno99ue6s5erv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GnnEJObB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9jrz1cuno99ue6s5erv.png" alt="optionmybridge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But, we can define options like we have in default bridge network.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W6WGVdrU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3g9f65k2iyvacbrnzxm0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W6WGVdrU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3g9f65k2iyvacbrnzxm0.png" alt="optionbridge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#host-network"&gt;
  &lt;/a&gt;
  Host Network
&lt;/h3&gt;

&lt;p&gt;This driver removes the network isolation between the docker host and the docker containers to use the host’s networking directly.&lt;br&gt;
For instance, if you run a container that binds to port 80 and you use host networking, the container’s application will be available on port 80 on the host’s IP address.&lt;/p&gt;

&lt;p&gt;So, now lets see how host network removes isolation between the docker host and the docker containers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step1: We will create a &lt;strong&gt;&lt;em&gt;myhostdemo1&lt;/em&gt;&lt;/strong&gt; container having host network and will install necessary packages.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker network &lt;span class="nb"&gt;ls
&lt;/span&gt;docker container run &lt;span class="nt"&gt;-dt&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; myhostdemo1 &lt;span class="nt"&gt;--network&lt;/span&gt; host ubuntu
docker container &lt;span class="nb"&gt;exec&lt;/span&gt;  &lt;span class="nt"&gt;-it&lt;/span&gt; myhostdemo1 bash
apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class="nb"&gt;install &lt;/span&gt;net-tools &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class="nb"&gt;install &lt;/span&gt;iputils-ping
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dHHFXGA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysjshqd3tyj0cb3btiu3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dHHFXGA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysjshqd3tyj0cb3btiu3.png" alt="myhostdemo1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step2: Now we will install and start nginx on the container &lt;strong&gt;&lt;em&gt;bridge01&lt;/em&gt;&lt;/strong&gt;, that we had already created above with the bridge network.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container &lt;span class="nb"&gt;exec&lt;/span&gt;  &lt;span class="nt"&gt;-it&lt;/span&gt; bridge01 bash
netstat &lt;span class="nt"&gt;-ntlp&lt;/span&gt;
apt &lt;span class="nb"&gt;install &lt;/span&gt;nginx
/etc/init.d/nginx start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D6oixakH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muswk92vcikme0711csp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D6oixakH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muswk92vcikme0711csp.png" alt="bridgengix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 3: If we exit the container and try to find that nginx host address. As, it is bridge network we will not able to see it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Ph2JjUn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0j2c3ph4bc86ks0qxot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Ph2JjUn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0j2c3ph4bc86ks0qxot.png" alt="outsidebridge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step4: If we do the same with myhostdemo01. Installing and starting the nginx server, We will see that host address is reflecting outside the container as-well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U6UuO0h0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5zvow9n5ue1mr7hwfaq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U6UuO0h0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5zvow9n5ue1mr7hwfaq.png" alt="outsidehostdemo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, host network container can connect to all the docker containers internal container network drivers as-well external containers network drivers.&lt;/p&gt;

&lt;p&gt;you can check it out by &lt;strong&gt;&lt;em&gt;ifconfig&lt;/em&gt;&lt;/strong&gt; in the host network container.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rHK_SCks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvsumb60y68144czb0hh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rHK_SCks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvsumb60y68144czb0hh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#none-network"&gt;
  &lt;/a&gt;
  None Network
&lt;/h3&gt;

&lt;p&gt;If you want to completely disable the networking stack on a container, you can use the none network.&lt;br&gt;
This mode will not configure any IP for the container and doesn’t have any access to the external network as well as for other containers.&lt;br&gt;
Eg. Virus affect testing&lt;/p&gt;

&lt;p&gt;Demo:&lt;br&gt;
Created one none network container and trying to ping &lt;em&gt;google.com&lt;/em&gt; but we are not able to ping.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V9Agh3xV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsfhmvgacgu85uzow7en.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V9Agh3xV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsfhmvgacgu85uzow7en.png" alt="nonenetwork"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#publishing-exposed-ports-of-container"&gt;
  &lt;/a&gt;
  Publishing Exposed Ports of Container
&lt;/h3&gt;

&lt;p&gt;We were discussing an approach to publishing container port to host.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container run &lt;span class="nt"&gt;-dt&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; webserver &lt;span class="nt"&gt;-p&lt;/span&gt; 80:80 nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is also referred to as a publish list as it publishes the only a list of the port specified.&lt;br&gt;
There is also a second approach to publish all the exposed ports of the container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container run &lt;span class="nt"&gt;-dt&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; webserver &lt;span class="nt"&gt;-P&lt;/span&gt; nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is also referred to as a publish all.&lt;br&gt;
In this approach, all exposed ports are published to random ports of the host.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ijw4FeRi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46g0bc1z80pkvklfd3px.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ijw4FeRi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46g0bc1z80pkvklfd3px.png" alt="example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#legacy-approach-for-linking-containers"&gt;
  &lt;/a&gt;
  Legacy Approach for Linking Containers
&lt;/h3&gt;

&lt;p&gt;Before the Docker networks feature, you could use the Docker link feature to allow containers to&lt;br&gt;
discover each other and securely transfer information about one container to another container.&lt;br&gt;
The --link flag is a legacy feature of Docker. It may eventually be removed. Unless you absolutely need&lt;br&gt;
to continue using it, we recommend that you use user-defined networks to facilitate communication&lt;br&gt;
between two containers instead of using --link&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step1: Created a container &lt;strong&gt;&lt;em&gt;container01&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3gotHdu9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9k80ex71qzrwqt2gedbl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3gotHdu9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9k80ex71qzrwqt2gedbl.png" alt="step1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step2: Create a new container linking to the above launched container.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container run &lt;span class="nt"&gt;-dt&lt;/span&gt; &lt;span class="nt"&gt;--link&lt;/span&gt; container01:container &lt;span class="nt"&gt;--name&lt;/span&gt; container02 busybox sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RAar_tse--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rxlu4wknl763rec5idc1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RAar_tse--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rxlu4wknl763rec5idc1.png" alt="step2linking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step3: on login to &lt;strong&gt;&lt;em&gt;container02&lt;/em&gt;&lt;/strong&gt; and pinging &lt;strong&gt;&lt;em&gt;container01&lt;/em&gt;&lt;/strong&gt;, we are able to ping&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o8FL8-Vt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpvri38ukl4o4ysqrbhd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o8FL8-Vt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpvri38ukl4o4ysqrbhd.png" alt="step3ping"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step4: To check the link, you can cat the &lt;em&gt;/etc/hosts&lt;/em&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DGJBujon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu0apjhhh3dl4ao0ia2g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DGJBujon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu0apjhhh3dl4ao0ia2g.png" alt="step4link"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;References:&lt;br&gt;
&lt;a href="https://docs.docker.com/get-docker/"&gt;Official Docker&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/docker-certified-associate/"&gt;Udemy Course&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit:&lt;br&gt;
&lt;a href="https://in.linkedin.com/in/zealvora"&gt;Zeal Vora&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/dporwal/image-creation-management-and-registry-part-2-514n"&gt;Prev: Image Creation, Management, and Registry(Part 2)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>linux</category>
      <category>microservices</category>
      <category>networking</category>
    </item>
    <item>
      <title>No time to learn a static site generator? Try this</title>
      <author>EDDYMENS</author>
      <pubDate>Thu, 30 Sep 2021 16:01:56 +0000</pubDate>
      <link>https://dev.to/eddymens/no-time-to-learn-a-static-site-generator-try-this-2355</link>
      <guid>https://dev.to/eddymens/no-time-to-learn-a-static-site-generator-try-this-2355</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-a-static-site-generatorssg"&gt;
  &lt;/a&gt;
  What is a Static Site Generator(SSG)?
&lt;/h3&gt;

&lt;p&gt;Traditionally we built sites supported by a backend that takes data and spreads it onto an HTML template.&lt;br&gt;
 Backends also took care of the differences between rendered pages.&lt;br&gt;
This setup is what we refer to as a dynamically rendered site.&lt;/p&gt;

&lt;p&gt;For many sites, this approach meant each time a user visited the website, the backend did the same thing repeatedly. &lt;br&gt;
So the idea of a static site generator is to mix the data/content with the HTML templates once and then keep a copy of the output to be served to users.&lt;/p&gt;

&lt;p&gt;With this approach, you have a faster website. You also remove the overhead of maintaining the backend code in production, leaving you with a basic server setup to manage. &lt;/p&gt;

&lt;p&gt;You may also give up the server setup altogether to use any of the numerous static site hosting solutions out there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#challenges-static-site-generators-present-to-developers"&gt;
  &lt;/a&gt;
  Challenges static site generators present to developers
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ArXiSINh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/randombyte/image/upload/v1633014848/business-man-pushing-large-stone-up-to-hill-business-heavy-tasks-and-picture-id825383494_gnphts.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ArXiSINh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/randombyte/image/upload/v1633014848/business-man-pushing-large-stone-up-to-hill-business-heavy-tasks-and-picture-id825383494_gnphts.jpg"&gt;&lt;/a&gt;&lt;br&gt;
&lt;small&gt;Credit: &lt;a href="https://www.istockphoto.com/photo/business-man-pushing-large-stone-up-to-hill-business-heavy-tasks-and-problems-concept-gm825383494-133865749"&gt;Unsplash&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Do note that there are general cons to having static sites. I am not going to talk about those.&lt;br&gt;
I am addressing the cons static site generators themselves present.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They come with a learning curve, and it’s made worse given there are too many static site generators out there. This means you are likely to hop on a project using one you are not familiar with.&lt;/li&gt;
&lt;li&gt;Limited functionalities, developers are limited to what a static site generator provides. Do you want a specific date format? Your best bet is a plugin, and pray it exists.&lt;/li&gt;
&lt;li&gt;The authoring process is a nightmare for non-developers, from dealing with markdown files to sometimes dealing with build pipelines. It’s even becoming a requirement for hiring content creators in some cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#whats-the-alternative"&gt;
  &lt;/a&gt;
  What’s the alternative?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5YGWzm6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/randombyte/image/upload/v1633015519/carbon_lfiffb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5YGWzm6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/randombyte/image/upload/v1633015519/carbon_lfiffb.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just build your site in whatever framework you are comfortable with, Laravel, Express, whatever. &lt;br&gt;
Then use a tool like &lt;a href="https://www.gnu.org/software/wget"&gt;&lt;code&gt;wget&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://www.httrack.com"&gt;HTTrack&lt;/a&gt; to generate the static files.&lt;/p&gt;

&lt;p&gt;You might benefit from using SSGs, but I think this approach remains a good starting point.&lt;/p&gt;

&lt;p&gt;With this approach, you can build a complete website with a backend admin that anyone can use.&lt;br&gt;
Also, it will be based on a web stack you are familiar with or that your team is already using. You can build out whatever feature set you will need as well.&lt;/p&gt;

&lt;p&gt;The image above shows the exact command I run to generate my site, you can find the explanation of each parameter &lt;a href="https://explainshell.com/explain?cmd=wget+-mpEk+-nH++-P+output_folder+http%3A%2F%2F%3Clocalhost%3A8080"&gt;here&lt;/a&gt;.&lt;br&gt;
For example, I am currently working on &lt;a href="https://codingterms.com/"&gt;https://codingterms.com/&lt;/a&gt;, and it’s running as a laravel app locally.  I run &lt;code&gt;wget&lt;/code&gt; when I am ready to publish.&lt;/p&gt;

&lt;p&gt;As far as feature sets go, I have many of them. One example is my ability to create hyperlinks pointing to other pages. The system checks if the page exists before making them visible as links on the other page. This way, I don’t have to go through older articles to change links. &lt;/p&gt;

&lt;p&gt;I am using &lt;code&gt;wget&lt;/code&gt; for my personal website &lt;a href="https://eddymens.com"&gt;https://eddymens.com&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;Another approach is using a CMS then generate the static files for production. When dealing with plugins, you need to be aware that this might not translate well to static site land, which is a general characteristic of static sites anyway.&lt;/p&gt;

&lt;p&gt;Also, this allows you to move away from static sites to dynamic sites in a snap because you already have a dynamic site on hand.&lt;/p&gt;

&lt;p&gt;I am still on the lookout for the gotchas of this approach and will share more as I progress. &lt;/p&gt;

&lt;p&gt;Originally posted on &lt;a href="https://www.eddymens.com/blog/no-time-to-learn-a-static-site-generator-try-this"&gt;Eddymens Personal Site&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ssg</category>
      <category>staticsitegenerator</category>
      <category>website</category>
      <category>staticsite</category>
    </item>
    <item>
      <title>How to Disable Copy Paste in Blogger Website </title>
      <author>Bhavyashah</author>
      <pubDate>Thu, 30 Sep 2021 15:56:51 +0000</pubDate>
      <link>https://dev.to/bhavyashah/how-to-disable-copy-paste-in-blogger-website-2h6d</link>
      <guid>https://dev.to/bhavyashah/how-to-disable-copy-paste-in-blogger-website-2h6d</guid>
      <description>&lt;p&gt;This tutorial explains the process to disable the Copy and Paste of Website, either of WordPress or Blogger. It is useful for those who log on their each each time they want to make a change to their website and they need to be able to make changes. A short tutorial of how you can &lt;a href="https://www.blogtriggers.com/2021/04/how-to-protect-your-content-in-blogger.html"&gt;disable copy and paste in blogger website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step1) First of all Visit Blogger.com&lt;/p&gt;

&lt;p&gt;Step2) Now In Blogger Dashboard go to the theme section &lt;/p&gt;

&lt;p&gt;Step3) Now Find &lt;code&gt;&amp;lt;/body&amp;gt; tag&lt;/code&gt; and paste this script code before the &lt;code&gt;&amp;lt;/body&amp;gt; tag&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
        // Code Developed by BlogTriggers Team members
        window.onload = function() {
            document.addEventListener("contextmenu", function(e) {
                e.preventDefault();
            }, false);

            function disabledEvent(e) {
                if (e.stopPropagation) {
                    e.stopPropagation();
                } else if (window.event) {
                    window.event.cancelBubble = true;
                }
                e.preventDefault();
                return false;
            }
        };
        document.onkeydown = function(e) {
            return false;
        }
        navigator.keyboard.lock();
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step4) Now Save the Template.&lt;/p&gt;

&lt;p&gt;Congratulation you have successfully protect your content in blogger website &lt;/p&gt;

</description>
      <category>website</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Anyone out there willing to Contribute to the Development of JavaScript Frontend Library</title>
      <author>Beingana Jim Junior</author>
      <pubDate>Thu, 30 Sep 2021 15:55:09 +0000</pubDate>
      <link>https://dev.to/jimjunior/anyone-out-there-willing-to-contribute-to-the-development-of-javascript-frontend-library-2a03</link>
      <guid>https://dev.to/jimjunior/anyone-out-there-willing-to-contribute-to-the-development-of-javascript-frontend-library-2a03</guid>
      <description>&lt;p&gt;In the past 3 months i have been developing a JavaScript library for creating frontend web applications. The library is called &lt;a href="https://github.com/jim-junior/pearl-js"&gt;&lt;strong&gt;Pearl.Js&lt;/strong&gt;&lt;/a&gt;. It is written in &lt;a href="https://www.typescriptlang.org/"&gt;Typescript&lt;/a&gt;. And is almost similar to React.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The library consumes a virtual dom.&lt;/li&gt;
&lt;li&gt;It uses &lt;a href="https://devdocs.io/react/introducing-jsx"&gt;JSX&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;It is a component based library&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As u can se the above are a few of its similarities with react.&lt;br&gt;
Its source code can be found on its &lt;a href="https://github.com/jim-junior/pearl-js/"&gt;GitHub Repository&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h3&gt;

&lt;p&gt;The library consists of two parts. The core library that creates the virtual dom and the render that renders the virtual dom to the real dom in the browser.&lt;/p&gt;

&lt;p&gt;When an element is created through the &lt;code&gt;Pearl.createElement()&lt;/code&gt; function. It is represented as an object in the virtual dom and every element or component that is nested through it is stores in that element.&lt;/p&gt;

&lt;p&gt;Even the children behave the same way and this prevents the risk of difference in objects that are in the virtual dom.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;

&lt;p&gt;You can code it in either plane JavaScript or using JSX. It is better to use JSX since it is easier and faster. I will show you how you can code in both syntaxes&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using plain Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Pearl&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pearl-js/pearl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Pearl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mybutton&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn btn-primary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;click&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Click Me&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;Pearl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button-cover&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mounted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Using JSX&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Pearl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pearl-js/pearl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mybutton"&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button-cover&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mounted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: when using JSX you need babel to compile it. In order to prevent babel from compiling it into React functions you need to install a given plugin that transforms JSX into Pearl Js functions.The plugin is called &lt;a href="https://www.npmjs.com/package/babel-plugin-jsx-to-pearl"&gt;babel-plugin-jsx-to-pearl&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#more-feature-of-the-library"&gt;
  &lt;/a&gt;
  More feature of the library
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;State:&lt;/strong&gt; This is for data management in components. Each time state updates the component rerender itself&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Components:&lt;/strong&gt; These are almost the same as react components the consists of state and can pass down props to child components.

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Props:&lt;/strong&gt; These are used to passed down data to Child components&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#contributing"&gt;
  &lt;/a&gt;
  Contributing
&lt;/h2&gt;

&lt;p&gt;The main reason why I am asking for contributers is because recently i found an issuse in the framework. When a component that has child components that are mapped through would rerender due to state update. It could encounter an error in rendering the children of the child component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The following code is from the &lt;code&gt;test&lt;/code&gt; folder in the GitHub repository&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//  tests/jsx/index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Pearl&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@pearl-js/pearl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Tasks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Tasks&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Pearl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;change&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000/tasks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"editor"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Task&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Tasks&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;



&lt;span class="nx"&gt;Pearl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App has mounted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Task.js file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tests/jsx/Tasks.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Pearl&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pearl-js/pearl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Pearl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"task"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      task
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the &lt;code&gt;change()&lt;/code&gt; function is called in the &lt;code&gt;Tasks&lt;/code&gt; component it rerenders the component and the its children. The &lt;code&gt;Task&lt;/code&gt; components are also rerendered with the props but their children are not rendered both in the virtual dom and in the real dom.&lt;/p&gt;

&lt;p&gt;That is the main error being faced now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#proposed-features-that-need-to-be-added"&gt;
  &lt;/a&gt;
  Proposed features that need to be added
&lt;/h3&gt;

&lt;p&gt;In order for the framework to reach a world class level we need to add more features to it and these are also one reason we need contributors. So of the features include.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Global State management:&lt;/strong&gt; This is to prevent passing down props to other through components.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Lifecycle methods:&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you also have a feature that you would like to add to this library you are free to add it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contributing-to-source-code"&gt;
  &lt;/a&gt;
  Contributing to Source Code
&lt;/h3&gt;

&lt;p&gt;The source code is on GitHub all you have to do is fork and clone the repository in order to contribute to it.&lt;/p&gt;

&lt;p&gt;Cloning&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/jim-junior/pearl-js.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The  cloned directory will look somethin like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oLi3R319--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9r99yuvf95tnwp2pxza.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oLi3R319--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9r99yuvf95tnwp2pxza.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In packages folder there are two folders.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;|
|--|- babel-plugin-jsx-to-pearl
   |
   |- pearl

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;pearl&lt;/strong&gt; folder is the one that contains the main package and the &lt;strong&gt;babel-plugin-jsx-to-pearl&lt;/strong&gt; contains the babel plugin that transforms jsx into pearljs functions.&lt;br&gt;
You can contribute to any of those and incase you want to add another package to the repository it should go in the packages folder.&lt;/p&gt;




&lt;p&gt;I would be thankful to any one that contributes.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Docker swarm nginx ingress controller</title>
      <author>Lorenzo Garuti</author>
      <pubDate>Thu, 30 Sep 2021 15:46:42 +0000</pubDate>
      <link>https://dev.to/garutilorenzo/docker-swarm-nginx-ingress-controller-2nig</link>
      <guid>https://dev.to/garutilorenzo/docker-swarm-nginx-ingress-controller-2nig</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f7pQBy87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlh5hetz0kqj4avouzkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f7pQBy87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlh5hetz0kqj4avouzkd.png" alt="Nginx ingress controller"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial we are going to see how to use Nginx as an ingress controller for our Docker swarm cluster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;For this tutorial we only need a running Docker swarm cluster. You can setup a docker swam cluster in a &lt;a href="https://docs.docker.com/engine/swarm/"&gt;few setp&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nginx-ingress-controller"&gt;
  &lt;/a&gt;
  Nginx ingress controller
&lt;/h2&gt;

&lt;p&gt;The image that we will use is based on the excellent work of &lt;a href="https://github.com/foxylion"&gt;foxylion&lt;/a&gt; then revisited on my &lt;a href="https://github.com/garutilorenzo/docker-swarm-ingress"&gt;docker swarm ingress&lt;/a&gt; image.&lt;/p&gt;

&lt;p&gt;The image it’s very simple, the magic part is the ingress.py file so let’s take a look on how the magic happens.&lt;/p&gt;

&lt;p&gt;The image needs to be deployed on a manager node, when the image starts the docker-entrypoint.sh is called:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 \      -subj "/C=IT/ST=Denial/L=Italy/O=IT/CN=dummy.cert.io" \      -keyout /etc/nginx/default.key  -out /etc/nginx/default.crtpython ingress.py &amp;amp;
echo $! &amp;gt; /ingress/ingress.pid
exec nginx -g "daemon off;"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet we see the main part of the docker-entrypoint.sh.&lt;/p&gt;

&lt;p&gt;In our container there are now two process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the ingress.py “daemon”&lt;/li&gt;
&lt;li&gt;and the nginx process&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first line of our snippet create a dummy ssl certificate for nginx, we will cover this in the “SSL mode in depth”.&lt;/p&gt;

&lt;p&gt;The ingress.py daemon then will check all the services on the docker swarm cluster. If a service has a label named “ingress.host” the nginx configuration will be regenerated based on the value of the labels.&lt;/p&gt;

&lt;p&gt;Here is a list of valid labels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ingress.host: the nginx server name (virtualhost). Example: my-service.company.tld&lt;/li&gt;
&lt;li&gt;ingress.port: the port which serves the service in the cluster.&lt;/li&gt;
&lt;li&gt;ingress.virtual_proto: the protocol used to connect to the backends&lt;/li&gt;
&lt;li&gt;ingress.ssl: specify enable to enable ssl-assthrough. More detail on ssl in the “SSL mode in depth”&lt;/li&gt;
&lt;li&gt;ingress.ssl_redirect: specify enable to enable http to https redirect&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also some environment variales that we can specify on our nginx ingress controller container. Here the list of accepted environment variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOCKER_HOST: the connect string where docker-py library tries to connect to the docker daemon&lt;/li&gt;
&lt;li&gt;UPDATE_INTERVAL: the time in seconds that ingress.py wait before checking for new services in the docker swarm cluster. Default 30 seconds.&lt;/li&gt;
&lt;li&gt;Debug: enable or disable debug mode&lt;/li&gt;
&lt;li&gt;USE_REQUEST_ID: enable or disable Request-Id header&lt;/li&gt;
&lt;li&gt;LOG_FORMAT: specify log format, valid values are json, custom or default&lt;/li&gt;
&lt;li&gt;LOG_CUSTOM: specify the nginx log format&lt;/li&gt;
&lt;li&gt;PROXY_MODE: define nginx SSL proxy mode. Valid values are ssl-passthrough (default) or an used defined value to enable SSL bridging or SSL termination mode. More detail on ssl in the “SSL mode in depth”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#ssl-mode-in-depth"&gt;
  &lt;/a&gt;
  SSL mode in depth
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#ssl-passthrough-default"&gt;
  &lt;/a&gt;
  SSL Passthrough (default)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yUyiu-Dx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/ssl-passthrough.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUyiu-Dx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/ssl-passthrough.png" alt="ssl-passthrough"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SSL passthrough passes HTTPS traffic to a backend server without decrypting the traffic on the load balancer. The data passes through fully encrypted, which precludes any layer 7 actions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ssl-terminationoffloloading"&gt;
  &lt;/a&gt;
  SSL Termination/Offloloading
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VyXG-j-5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/ssl-termination.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VyXG-j-5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/ssl-termination.png" alt="ssl-offloading"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SSL termination (a.k.a. SSL Offloading) decrypts all HTTPS traffics when it arrives at the load balancer (our docker swarm ingress controller), and the data is sent to the destination server as plain HTTP traffic (our http backend deployment)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ssl-bridging"&gt;
  &lt;/a&gt;
  SSL Bridging
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--au5uM13R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/ssl-bridging.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--au5uM13R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/ssl-bridging.png" alt="ssl-bridging"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Opposed to SSL termination the traffic from the load balancer and the destination is not in plain HTTP traffic but the traffic is encrypted again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-the-stack"&gt;
  &lt;/a&gt;
  Setup the stack
&lt;/h2&gt;

&lt;p&gt;We are now ready to deploy our nginx ingress controller, in one docker swarm manager node download my docker swarm ingress repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/garutilorenzo/docker-swarm-ingress.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we need to create an overlay network first. This network will then be attached to our backends. Create the network with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker network create --driver overlay ingress-routing
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then deploy the stack:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd docker-swarm-ingress/
docker stack deploy -c examples/docker-ingress-stack.yml nginx-ingress
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we can check the status of our stack using docker stack ps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker stack ps nginx-ingress

ID             NAME                    IMAGE                                       NODE      DESIRED STATE   CURRENT STATE            ERROR     PORTS
x47oswdzbnlp   nginx-ingress_nginx.1   garutilorenzo/docker-swarm-ingress:latest   node-2    Running         Running 12 seconds ago
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we can also check if our nginx ingress controller is working correctly using curl or a web browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CpHy3aUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/swarm-ingress.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CpHy3aUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/swarm-ingress.png" alt="swarm-ingress"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are now ready to deploy our first backend service, to do this we can use an example service:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker stack deploy -c examples/example-service.yml example-http
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if we check the nginx ingress controller log we can see that the nginx server has restarted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker service logs -f --tail=100 nginx-ingress_nginx

nginx-ingress_nginx.1.njwey0rlfvdw@node-2    | 2021/09/30 14:05:12 [notice] 11#11: exiting
nginx-ingress_nginx.1.njwey0rlfvdw@node-2    | 2021/09/30 14:05:12 [notice] 11#11: exitnginx-ingress_nginx.1.njwey0rlfvdw@node-2    | 2021/09/30 14:05:42 [notice] 41#41: signal process started
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and now we can try to reach my-service.company.tld (update your DNS or your host file and set my-service.company.tld pointing to one of your docker swarm cluster ip’s)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LcjQqneK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/http-backend.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LcjQqneK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/http-backend.png" alt="swarm-http-backend"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#https-ssl-passthrough-mode"&gt;
  &lt;/a&gt;
  HTTPS, SSL passthrough mode
&lt;/h3&gt;

&lt;p&gt;We can now try to expose my-service.company.tld using https with SSL passthrough mode.&lt;/p&gt;

&lt;p&gt;First we need to delete our example-http stack:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker stack rm example-http
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we need to create our self-signed ssl certificates and we need also to create the nginx secrets:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir certs &amp;amp;&amp;amp; sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./certs/nginx.key -out ./certs/nginx.crtGenerating a RSA private key
...................................................................................................+++++
.....................+++++
writing new private key to './certs/nginx.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:IT
State or Province Name (full name) [Some-State]:Italy
Locality Name (eg, city) []:
Organization Name (eg, company) [Internet Widgits Pty Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:my-service.company.tld
Email Address []:me@company.tlddocker secret create nginx_cert certs/nginx.crt
docker secret create nginx_key certs/nginx.key
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now we can deploy our ssl backends:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker stack deploy -c examples/example-ssl-service.yml example-httpsCreating config example-https_nginx_config

Creating config example-https_nginx_options
Creating config example-https_nginx_dhparams
Creating service example-https_nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;check the nginx ingress controller logs and when the nginx daemon is restarted try to reach my-service.company.tld:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sczt7Yzt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/https-backend.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sczt7Yzt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/https-backend.png" alt="swarm-https-backend"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we are now exposing our example-https using SSL passthrough.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#https-ssl-terminationoffloloading"&gt;
  &lt;/a&gt;
  HTTPS, SSL Termination/Offloloading
&lt;/h3&gt;

&lt;p&gt;We can now test SSL Termination/Offloading mode, we need to delte both the stack:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker stack rm example-https

Removing service example-https_nginx
Removing config example-https_nginx_dhparams
Removing config example-https_nginx_options
Removing config example-https_nginx_config

docker stack rm nginx-ingress
Removing service nginx-ingress_nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to create the ssl certificates for our domain, exposed directly by the nginx ingress controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./certs/my-service.key -out ./certs/my-service.crt
Generating a RSA private key
......+++++
...............................................................+++++
writing new private key to './certs/my-service.key'
----------
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
----------
Country Name (2 letter code) [AU]:IT
State or Province Name (full name) [Some-State]:Italy
Locality Name (eg, city) []:
Organization Name (eg, company) [Internet Widgits Pty Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:my-service.company.tlddocker secret create my-service.company.tld.key certs/my-service.key
docker secret create my-service.company.tld.crt certs/my-service.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can deploy our nginx ingress controller in SSL Termination/Offloloading mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker stack deploy -c examples/docker-ingress-stack-ssl_term_bridg.yml nginx-ingress
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and we can also deploy our http example backend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker stack deploy -c examples/example-service-ssl-termination.yml example-https-termination
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;check the nginx ingress controller logs and when the nginx daemon is restarted try to reach my-service.company.tld. We are now reacing my-service.company.tld in https mode but unlike the SSL passthrough mode the ssl certificates are served directly by our nginx ingress controller.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#https-ssl-bridging"&gt;
  &lt;/a&gt;
  HTTPS, SSL Bridging
&lt;/h3&gt;

&lt;p&gt;For the SSL bridging test we need to delete only our backend service “example-https-termination”. The configuration of the nginx ingress controller for SSL bridging and SSL Termination/Offloloading are the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker stack rm example-https-terminationdocker stack deploy -c examples/example-service-ssl-bridging.yml example-htts-bridging
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;check the nginx ingress controller logs and when the nginx daemon is restarted try to reach my-service.company.tld. We are now reacing my-service.company.tld in https mode the ssl certificates are served directly by our nginx ingress controller and the communication between the nginx ingress controller and our backend service “example-htts-bridging” is encrypted too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nginx-tips"&gt;
  &lt;/a&gt;
  Nginx tips
&lt;/h3&gt;

&lt;p&gt;For the SSL mode nginx is acting as a layer 7 and layer 4 porxy, the nginx configurations to achieve this is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stream {
    map $ssl_preread_server_name $name {
        my-service.company.tld       backend-example-https_nginx;

    }

    # my-service.company.tld - ywy8bs1b6h8td118mkjrr70eq - HTTPS Passthrough
    upstream backend-example-https_nginx {
        server example-https_nginx:443;
    }

    proxy_protocol on;

    server {
        listen      443;
        proxy_pass  $name;
        ssl_preread on;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in the backend configuration we need to add this to the nginx config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;listen 443 ssl proxy_protocol;         
set_real_ip_from nginx-ingress_nginx; # &amp;lt;- name of our nginx ingress controller service
real_ip_header proxy_protocol;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>docker</category>
      <category>nginx</category>
      <category>ingresscontroller</category>
      <category>nginxingress</category>
    </item>
    <item>
      <title>Vue Academy #6: Async update queue</title>
      <author>CodeOz</author>
      <pubDate>Thu, 30 Sep 2021 15:38:06 +0000</pubDate>
      <link>https://dev.to/codeoz/vue-academy-6-async-update-queue-56k</link>
      <guid>https://dev.to/codeoz/vue-academy-6-async-update-queue-56k</guid>
      <description>&lt;p&gt;Vue performs DOM updates &lt;strong&gt;asynchronously&lt;/strong&gt;! But what does mean?&lt;/p&gt;

&lt;p&gt;I will begin by explain you what is going on if we don't use an async update queue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#normal-case"&gt;
  &lt;/a&gt;
  Normal case
&lt;/h3&gt;

&lt;p&gt;Imagine that we have an array and we show it into the DOM, each time we push a new item, we will render the DOM.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bZDREKME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xzl6z1dxdieaqcoptlvc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bZDREKME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xzl6z1dxdieaqcoptlvc.jpg" alt="Dessin sans titre"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's not really dramatic if we only add some items. But imagine if we decide to add 1000 items in this array at the same moment, we will render our DOM 1000 times! Your DOM will explode 🤯.&lt;/p&gt;

&lt;p&gt;We don't really need to update the DOM 1000 times, we only need one time, and we should only update it when we finish to add all items!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#async-update-queue"&gt;
  &lt;/a&gt;
  Async update queue
&lt;/h3&gt;

&lt;p&gt;Vue performs DOM updates &lt;strong&gt;asynchronously&lt;/strong&gt;. Whenever a data &lt;strong&gt;change&lt;/strong&gt; is observed (in our case, adding item into our array), it will &lt;strong&gt;NOT&lt;/strong&gt; directly update the DOM, it will add all change into a queue (buffer).&lt;/p&gt;

&lt;p&gt;It wait a few time (time needed to add all items to our array) and after this it will update the DOM. So we add 1000 items but we will update the DOM only &lt;strong&gt;ONE TIME!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZM9ARdJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgfi28fb6ol5h8ypdvkh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZM9ARdJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgfi28fb6ol5h8ypdvkh.jpg" alt="Dessin sans titre (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This buffered de-duplication is important in avoiding unnecessary calculations and DOM manipulations.&lt;/p&gt;

&lt;p&gt;The moment when the queue will update the DOM is called a &lt;code&gt;tick&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;In general we don't need to careful about this, except if we need to do some &lt;strong&gt;action depending&lt;/strong&gt; on the DOM State. But it's not really recommended to base your action on DOM state, we recommend you to &lt;strong&gt;use component state&lt;/strong&gt; instead of &lt;strong&gt;DOM state.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"example"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ message }}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;el&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// change data, but vue will not re-render immediately !&lt;/span&gt;

&lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// false since the update is in the Queue, and not updated for the moment in the DOM&lt;/span&gt;

&lt;span class="c1"&gt;// NextTick is the moment where the Queue update all changed !&lt;/span&gt;
&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextTick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The DOM is update with the new change!&lt;/span&gt;
  &lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also use &lt;code&gt;await this.$nextTick()&lt;/code&gt; instead of callback!&lt;/p&gt;

&lt;p&gt;In some &lt;code&gt;test case&lt;/code&gt; you should need to check if your value is updated in the DOM, in this case you will need to use &lt;code&gt;nextTick&lt;/code&gt; before checking this update!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion-or-tldr"&gt;
  &lt;/a&gt;
  Conclusion or TLDR
&lt;/h3&gt;

&lt;p&gt;Async render queue allow vue to update the DOM only after a moment called &lt;code&gt;tick&lt;/code&gt;, it permit to avoid unneeded updated to the DOM.&lt;/p&gt;

&lt;p&gt;When you need to &lt;strong&gt;check a value in the DOM&lt;/strong&gt; (not recommended), you need to wait the &lt;code&gt;nextTick&lt;/code&gt; before checking the value in the DOM, otherwise the value will &lt;strong&gt;be not updated&lt;/strong&gt; at this moment!&lt;/p&gt;




&lt;p&gt;I hope you like this reading!&lt;/p&gt;

&lt;p&gt;🎁 You can get my new book &lt;code&gt;Underrated skills in javascript, make the difference&lt;/code&gt; for FREE if you follow me on &lt;a href="https://twitter.com/code__oz"&gt;Twitter&lt;/a&gt; and MP me 😁&lt;/p&gt;

&lt;p&gt;Or get it &lt;a href="https://codeoz.gumroad.com/l/RXLYp"&gt;HERE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎁 &lt;a href="https://www.getrevue.co/profile/code__oz"&gt;MY NEWSLETTER&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;☕️ You can &lt;a href="https://www.buymeacoffee.com/CodeoZ"&gt;SUPPORT MY WORKS&lt;/a&gt; 🙏&lt;/p&gt;

&lt;p&gt;🏃‍♂️ You can follow me on 👇&lt;/p&gt;

&lt;p&gt;🕊 Twitter : &lt;a href="https://twitter.com/code__oz"&gt;https://twitter.com/code__oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👨‍💻 Github: &lt;a href="https://github.com/Code-Oz"&gt;https://github.com/Code-Oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can mark 🔖 this article!&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Monitoring consumer lag in Azure Event Hub</title>
      <author>🇷|🇺|🇧|🇪|🇳</author>
      <pubDate>Thu, 30 Sep 2021 15:25:37 +0000</pubDate>
      <link>https://dev.to/rubenoostinga/monitoring-consumer-lag-in-azure-event-hub-dp5</link>
      <guid>https://dev.to/rubenoostinga/monitoring-consumer-lag-in-azure-event-hub-dp5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h2&gt;

&lt;p&gt;Consumer lag is the most important metric to monitor when working with event streams. However, it is not available as a default metric in Azure Insights. Want to have this metric available as part of your monitoring solution? You can set it up with some custom code. In this blog we show you how. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What
&lt;/h2&gt;

&lt;p&gt;Consumer lag refers to the number of events that still need to be processed by the consumers of a stream. Consumer lag will be 0 most of the time, as every event is consumed immediately. However, there are a few events that can cause that number to rise.  When a consumer runs into errors, like a functional issue caused by an event or a technical issue like network connectivity, it'll stop consuming events, increasing the consumer lag. &lt;/p&gt;

&lt;p&gt;The lag will also increase if events are published faster than the consumer can process them. In that case, the problem will resolve itself when events are published at a lower rate, and the consumer catches up again. &lt;/p&gt;

&lt;p&gt;You can trigger an alert when the consumer lag exceeds 0 for an extended period, like 10 minutes. What the best alert trigger configuration is for you depends on your situation. Before we continue to the solution, let's clarify some terms: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definitions"&gt;
  &lt;/a&gt;
  Definitions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-features#consumer-groups"&gt;Consumer groups&lt;/a&gt; enable multiple consumers to subscribe to the same event stream. Typically, a consumer group consists of multiple instances of the same application, that can be used for high availability and horizontal scaling.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-features#partitions"&gt;Partitions&lt;/a&gt; enable events to be processed in parallel. All events within a partition have a fixed order. Events in different partitions can be received out of order because they are processed in parallel. A consuming application can have multiple instances that can each read from multiple partitions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-features#namespace"&gt;Namespace&lt;/a&gt; is a collection of event hubs/topics that can be managed together.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-features#checkpointing"&gt;Checkpoints&lt;/a&gt; records the sequence number of the last consumed event. This value is used to ensure that, in the event of a restart, only the events that have not been consumed yet are resent. Typically, checkpoints are stored as a file in BlobStorage. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h2&gt;

&lt;p&gt;The Azure SDK can &lt;a href="https://docs.microsoft.com/en-us/javascript/api/@azure/event-hubs/eventhubconsumerclient?view=azure-node-latest#getPartitionProperties_string__GetPartitionPropertiesOptions_"&gt;retrieve the sequence number of the last enqueued event of a partition&lt;/a&gt;. With the &lt;a href="https://docs.microsoft.com/en-us/javascript/api/@azure/event-hubs/checkpointstore?view=azure-node-latest"&gt;CheckpointStore&lt;/a&gt; you can &lt;a href="https://docs.microsoft.com/en-us/javascript/api/@azure/event-hubs/checkpointstore?view=azure-node-latest#listCheckpoints_string__string__string__OperationOptions_"&gt;retrieve the sequence number of the checkpoint&lt;/a&gt;. Since both are simple counters you can calculate the difference and &lt;a href="https://docs.microsoft.com/en-us/azure/azure-monitor/app/nodejs#telemetryclient-api"&gt;publish this as a custom metric in azure insights&lt;/a&gt;. In order to make it a metric you can monitor, you will have to collect the metric periodically, let’s say, every minute.&lt;/p&gt;

&lt;p&gt;There are two ways to collect the consumer lag metric:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using the consumer application provides you with the Event Hub credentials, namespace, and consumer group. However, if something goes wrong and the consuming application shuts down, you'll no longer see if consumer lag rises because this information is not collected anymore. Use a separate process for monitoring to prevent this from happening.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Alternatively, alert the application failing its health check or the consumer lag metric being missing. The code examples below are in Typescript for conciseness. But the same approach can be used with the other Event Hub SDKs, like for C#, Java, Python, Go. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#collecting-the-consumer-lag"&gt;
  &lt;/a&gt;
  Collecting the consumer lag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// initialize checkpointStore and eventHubClient&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;consumerGroup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my consumer group&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkpointStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eventHubClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;// Send the consumer lag every minute&lt;/span&gt;
&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;measureConsumerLag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;consumerGroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;checkpointStore&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The Event Hub Consumer Lag could not be sent to Application Insights&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;60000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;measureConsumerLag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;consumerGroup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EventHubConsumerClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;checkpointStore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BlobCheckpointStore&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;partitionIds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPartitionIds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// Should return either 0 or 1 checkpoint per partition&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkpoints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;checkpointStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listCheckpoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullyQualifiedNamespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventHubName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;consumerGroup&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkpointSequenceNumberByPartitionId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromEntries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;checkpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;partitionId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sequenceNumber&lt;/span&gt; &lt;span class="p"&gt;}):&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;partitionId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sequenceNumber&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;partitionIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;partitionId&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastKnownSequenceNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;checkpointSequenceNumberByPartitionId&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;partitionId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;lastEnqueuedSequenceNumber&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPartitionProperties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;partitionId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;consumerLageMetric&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;eventHubName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventHubName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;consumerGroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;partitionId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullyQualifiedNamespace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="c1"&gt;// The consumerLag calculation&lt;/span&gt;
        &lt;span class="na"&gt;consumerLag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lastEnqueuedSequenceNumber&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;lastKnownSequenceNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;trackEventHubConsumerLag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;consumerLageMetric&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sending-the-custom-metric"&gt;
  &lt;/a&gt;
  Sending the custom metric
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defaultClient&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;appInsightsClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;applicationinsights&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ConsumerLagMetric&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;eventHubName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;consumerGroup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;partitionId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;consumerLag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;trackEventHubConsumerLag&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;eventHubName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;consumerGroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;partitionId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;consumerLag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;ConsumerLagMetric&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;trackMetric&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Event Hub Consumer Lag&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;consumerLag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// Format property keys with a space, for readability in the Application Insights metrics dashboard&lt;/span&gt;
    &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Event Hub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;eventHubName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Partition Id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;partitionId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Consumer Group&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;consumerGroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#viewing-the-custom-metric"&gt;
  &lt;/a&gt;
  Viewing the custom metric
&lt;/h2&gt;

&lt;p&gt;In the Application Insights console, you’ll find your custom metric, split the chart by "Consumer Group", which represents an application. Depending on the zoom level the chart will show multiple measurements per datapoint. Usethe aggregation "Max" to get the best line. &lt;/p&gt;

&lt;p&gt;This chart shows 3 microservices where 1 service is stuck processing an event. Whenever new events are published the consumer lag will increase. The events are published in bursts, so the consumer lag will increase in distinct increments. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IzQA9s_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkjx6cc8d2183vu11vmw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IzQA9s_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkjx6cc8d2183vu11vmw.png" alt="A chart with a climbing line"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When an issue is solved, the consumer lag will drop quickly. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MNnV0Uwb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxt55f0e8rddst9n7vrm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MNnV0Uwb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxt55f0e8rddst9n7vrm.png" alt="A chart with a line that quickly reaches a plateau and then drops"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Consumer lag will quickly show any functional or technical issue with your event stream. By using the code examples from this blogpost, you can avoid having to dive into the SDKs yourself. Of course, you can adopt the metric collection to send the metric to the logs or to another metrics system like &lt;a href="https://github.com/siimon/prom-client"&gt;prometheus&lt;/a&gt;, &lt;a href="https://docs.datadoghq.com/api/latest/metrics/#submit-metrics"&gt;datadog&lt;/a&gt;, or &lt;a href="https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-metrics-base"&gt;open telemetry&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;After collecting the metric, the next step is to create &lt;a href="https://docs.microsoft.com/en-us/azure/azure-monitor/alerts/alerts-metric"&gt;metric based alerts&lt;/a&gt; to ensure you detect the issues before your customer does! &lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
