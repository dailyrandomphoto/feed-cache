<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Notification with Audio in JavaScript</title>
      <author>Walter Nascimento</author>
      <pubDate>Mon, 29 Nov 2021 18:41:39 +0000</pubDate>
      <link>https://dev.to/walternascimentobarroso/notification-with-audio-in-javascript-4iao</link>
      <guid>https://dev.to/walternascimentobarroso/notification-with-audio-in-javascript-4iao</guid>
      <description>&lt;p&gt;&lt;a href="https://medium.com/walternascimentobarroso-pt/notifica%C3%A7%C3%A3o-com-audio-no-javascript-327791111e70"&gt;[Clique aqui para ler em português]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We always need a feedback to our user about some information, whether it’s a finalized registration or something removed, and today one of the best ways to give feedback to our users is with notification, so let’s create a notification using javascript and stay more professional we will add an audio whenever the notification is called.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;p&gt;First let’s create the interface, we’ll do something simple, using just HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Click here&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To display our notification, let’s just create one button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buttonEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://via.placeholder.com/50x50&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;song&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notification.mp3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;buttonEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;notifyMe&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;notifyMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Notification&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This browser does not support Desktop notifications&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permission&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;granted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;callNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permission&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;denied&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestPermission&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;permission&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;permission&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;granted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;callNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callNotify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;icone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;icone&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Audio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;song&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our javascript code we have our constants that have the message title, the message an icon and an audio file.&lt;/p&gt;

&lt;p&gt;For the notification, a function called &lt;strong&gt;notifyMe&lt;/strong&gt; was created that will be executed whenever we click on the button.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;notifyMe&lt;/strong&gt; function, we first check if the browser supports notification, then we check if the user has already allowed to be notified, and if not, then we check if he hasn’t denied it either, and then the notification api itself makes the request to the user checking whether or not he authorizes the sending of notification.&lt;/p&gt;

&lt;p&gt;Finally, we have the &lt;strong&gt;callNotify&lt;/strong&gt; function in which the notification is displayed with the title message and icon that we defined, and we still use the browser’s own audio api so that whenever this function is called, play in the audio file.&lt;/p&gt;

&lt;p&gt;ready simple like that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;See below for the complete working project.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/WalterNascimento/embed/KKmVXQd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;if you can't see it &lt;a href="https://codepen.io/WalterNascimento/pen/KKmVXQd"&gt;click here&lt;/a&gt; and see the final result&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youtube"&gt;
  &lt;/a&gt;
  Youtube
&lt;/h2&gt;

&lt;p&gt;If you prefer to watch it, see the development on youtube.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Lig_iQCeyS4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;If you have any questions, complaints or tips, you can leave them here in the comments. I will be happy to answer!&lt;/p&gt;

&lt;p&gt;😊😊 See you later! 😊😊&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#support-me"&gt;
  &lt;/a&gt;
  Support Me
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCXm0xRtDRrdnvkW24WmkBqA"&gt;Youtube - WalterNascimentoBarroso&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/walternascimentobarroso"&gt;Github - WalterNascimentoBarroso&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codepen.io"&gt;Codepen - WalterNascimentoBarroso&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>notification</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Wasabi, Storj, Backblaze et al, are promising 80%+ savings compared to Amazon S3... What's the catch?</title>
      <author>Cloud BS</author>
      <pubDate>Mon, 29 Nov 2021 18:38:21 +0000</pubDate>
      <link>https://dev.to/cloud_bs/wasabi-storj-backblaze-et-al-are-promising-80-savings-compared-to-amazon-s3-whats-the-catch-4h62</link>
      <guid>https://dev.to/cloud_bs/wasabi-storj-backblaze-et-al-are-promising-80-savings-compared-to-amazon-s3-whats-the-catch-4h62</guid>
      <description>&lt;p&gt;Vendors are Promising 80%+ Savings on Object Storage Compared To Amazon S3.&lt;/p&gt;

&lt;p&gt;We're asking, what's the catch?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our Methods&lt;/strong&gt;&lt;br&gt;
To build this report, we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mapped every object storage feature in a massive matrix&lt;/li&gt;
&lt;li&gt;Tested and benchmarked tools&lt;/li&gt;
&lt;li&gt;Interviewed CTOs and engineering managers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Don’t ask me why, but I took off my adblock the other day. I don’t know how they do it, but Wasabi took up 8 out of 16 display ad slots on the page.&lt;/p&gt;

&lt;p&gt;They were adamant, &lt;em&gt;“we’re 1/5 the price of Amazon S3.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0YBjvC97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0ji4xb7hsji7x9zq53u.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0YBjvC97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0ji4xb7hsji7x9zq53u.gif" alt="Ads for Wasabi" width="700" height="306"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While I’m probably on some retargeting list, the point remains:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Object storage providers are hungry to take Amazon S3’s market share.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our take is that they will win against Amazon S3 in many use cases. Watch out, though! Unless you know what you’re getting into, you’ll get burned 🔥.&lt;/p&gt;

&lt;p&gt;The specialized storage providers we're focusing on are Wasabi, Backblaze B2 and Storj DCS. However, these points will apply to Digital Ocean Spaces, Linode Object Storage and Vultr Object Storage as well.&lt;/p&gt;

&lt;p&gt;Here’s what we’ll tell you:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The “gotcha” that every low-cost provider has 

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Integration&lt;/strong&gt;: How robust their integrations are &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Interoperability&lt;/strong&gt;: How fully-featured their S3 API is&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pricing&lt;/strong&gt;: How they still might manage to bill you obscene amounts&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Performance&lt;/strong&gt;: Where they suck in terms of performance&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Management&lt;/strong&gt;: What basic management features are they missing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Gotchas of Wasabi and Backblaze B2&lt;/li&gt;
&lt;li&gt;When Wasabi can kick you off their platform&lt;/li&gt;
&lt;li&gt;The reliability risks of Backblaze B2&lt;/li&gt;
&lt;li&gt;Gotchas of Storj DCS&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#gotchas-of-every-single-lowcost-object-storage-provider"&gt;
  &lt;/a&gt;
  Gotchas of Every Single Low-Cost Object Storage Provider
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AlJBiTwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfrqydpcw8c81wiikon4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AlJBiTwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfrqydpcw8c81wiikon4.jpg" alt="Two men arguing" width="576" height="576"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integrations-or-lack-thereof"&gt;
  &lt;/a&gt;
  Integrations (or lack thereof)
&lt;/h3&gt;

&lt;p&gt;Integration with other services is the most significant advantage of the big cloud storage providers like AWS, Azure, or Google Cloud Platform.&lt;/p&gt;

&lt;p&gt;Are you doing anything other than storing and serving files? Are you analyzing your unstructured data with Amazon Athena or Google BigQuery? Low-cost providers might end up being &lt;em&gt;more expensive&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To use a non-native storage service, you’ll have to pay for the additional egress and engineering time it takes to integrate.&lt;/p&gt;

&lt;p&gt;In some cases, saving on the total cost of storage makes it worth it. In others, you’ll end up losing money.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#an-s3-compatible-api"&gt;
  &lt;/a&gt;
  An S3 “Compatible” API
&lt;/h3&gt;

&lt;p&gt;Want pre-signed URLs for your customers to upload straight to your storage safely? Unfortunately, you’re not in luck with Storj DCS, Wasabi, or Backblaze B2. And generally, you will always have to rewrite some stuff to make things work, no matter how “100%” compatible the vendor’s S3 API is.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hQTnhYSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv67c4bb56fl2higs3ge.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hQTnhYSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv67c4bb56fl2higs3ge.jpg" alt="meme depicting bart simpson hitting Homer simpson with a chair. The text on Homer says 'Thinking you don't need to update your code', thinking you don't need to update your code', the text on Bart says 'An S3 Compatible API'" width="880" height="595"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, looking at one specific aspect of the S3 API, Amazon S3 has plenty of settings on the S3 Multi-part Upload configuration that we find are rarely consistent with anyone else’s implementation of the S3 API.&lt;/p&gt;

&lt;p&gt;To be fair, most vendors have done a decent job implementing the core components of the S3 API, but it's imperative to know if they cover what you need that isn’t core. Several standard implementations of the S3 API have significant differences between them in compliance with the S3 standard. For example, some vendors put up endpoints that can take S3-like requests and convert them to native requests for their platform. Others don’t have a specialized endpoint, so they try to make their native endpoint look as much as possible, like Amazon S3’s API.&lt;/p&gt;

&lt;p&gt;Generally, the most significant differences between Amazon’s native API and other implementations revolve around concurrency and data transfer. Several specialized services related to S3 would be hard to run without the AWS backbone (i.e., where you pull from or how you transit data). For example, S3 Transfer Acceleration won’t be compatible with another provider because AWS uses proprietary algorithms to reroute data rapidly within AWS.&lt;/p&gt;

&lt;p&gt;If an engineer enabled accelerated code on your storage and then has to swap that out, then it’s not codeless migration to any one of these specialized providers, which in turn impacts your TCO. If you’re lucky in this case, your engineers have a habit of wrapping code to make it agnostic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h3&gt;

&lt;p&gt;There’s a bucket of broad-based but lower-cost providers that mete out at about 50-90% the cost of Amazon S3 ($21-23/TB/mo) for standard storage. These vendors are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cloudflare R2 ($15/TB/mo)&lt;/li&gt;
&lt;li&gt;Digital Ocean Spaces ($20/TB/mo)&lt;/li&gt;
&lt;li&gt;Vultr Object Storage ($20/TB/mo)&lt;/li&gt;
&lt;li&gt;Linode Object Storage ($20/TB/mo)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the other hand, the specialized (i.e., storage-only) providers are much much cheaper, sometimes at under 30% of the cost of Amazon S3 for standard storage, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Backblaze B2 ($5/TB/mo)&lt;/li&gt;
&lt;li&gt;Storj DCS ($4/TB/mo)&lt;/li&gt;
&lt;li&gt;Wasabi ($5.99/TB/mo)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The specialized providers tend to have better data transfer fees. In addition, like Digital Ocean, Cloudflare R2, and Linode, some package together data transfer with standard storage in their pricing or offer it for free.&lt;/p&gt;

&lt;p&gt;While the pricing of the storage-only providers is attractive, they come with “gotchas” of their own:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--98yBUfrg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn8pgjautigr4cz1uscu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--98yBUfrg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn8pgjautigr4cz1uscu.jpg" alt="meme of two men arguing" width="779" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Backblaze B2 data needs to be replicated and paid for twice over to meet data redundancy requirements that some projects need.&lt;/li&gt;
&lt;li&gt;Storj charges extra “Per Segment” fees that add up quickly if you’re storing lots of small objects.&lt;/li&gt;
&lt;li&gt;Wasabi charges for three months worth of object retention, including overwrites. If you upload a file and replace it soon after, you’re still paying for both objects for the entire three months.&lt;/li&gt;
&lt;li&gt;Wasabi has a single-tier pricing structure for object storage yet does not offer a product directly comparable to Amazon S3’s standard storage tier in terms of accessibility.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;p&gt;Amazon S3 and storage solutions provided by the broad-based Big 3 providers are the go-to choice for most enterprise use cases because of the general low latency you can achieve. Generally, you can expect lower latency if your compute instances are in the same data center or on the same backbone as your object storage service.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jsMZ1LgR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2hlt1jksusddd51znds.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jsMZ1LgR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2hlt1jksusddd51znds.jpg" alt="Iceberg image with text saying 'What developer think go into benchmarks' above the iceberg. Below the iceberg states 'What goes into a good benchmark'" width="880" height="612"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#management"&gt;
  &lt;/a&gt;
  Management
&lt;/h3&gt;

&lt;p&gt;Need to meet a compliance requirement, like HIPAA? Or need to meet standard requirements for access management (i.e., IAM)? Unfortunately, several low-cost object storage providers don’t score well in terms of meeting compliance requirements. In contrast, others lack the management features you and/or your compliance and security officers are undoubtedly used to, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Robust Identity and Access Management (IAM)&lt;/li&gt;
&lt;li&gt;Versioning&lt;/li&gt;
&lt;li&gt;Tagging of resources&lt;/li&gt;
&lt;li&gt;Life Cycle Management (for buckets)&lt;/li&gt;
&lt;li&gt;Detailed Logging&lt;/li&gt;
&lt;li&gt;Detailed Costing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, some of these low-cost providers don’t have some of the features you might not think you need now but could come in very handy later:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Google Cloud Storage supports 3rd party billing to share the costs of accessing data with the organizations or users that access your data.&lt;/li&gt;
&lt;li&gt;Amazon S3 has a robust (and largely unmatched) storage analytics suite called S3 Storage Lens to get visibility into your security profile and opportunities to increase efficiency.&lt;/li&gt;
&lt;li&gt;Azure Blob Storage has a point-in-time restore feature that can be a life-saver if data becomes corrupted.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#gotchas-specific-to-wasabi-and-backblaze-b2"&gt;
  &lt;/a&gt;
  Gotchas Specific To Wasabi and Backblaze B2
&lt;/h2&gt;

&lt;p&gt;The “gotchas” shared by both Wasabi and Backblaze B2 fall into four buckets:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Fewer regions&lt;/strong&gt;, which can impact data geo-redundancy&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fewer features&lt;/strong&gt;, like eventing, which can impact development time and integration with other cloud services&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;One storage class&lt;/strong&gt; (or two if you count Reserved Capacity Storage), which provides simplicity at the cost of flexibility&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;[Note] Not necessarily a “gotcha,” but vendors like Backblaze don’t always meet the specific compliance requirements of some industries.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fewer-regions"&gt;
  &lt;/a&gt;
  Fewer regions
&lt;/h3&gt;

&lt;p&gt;The Big 3 has far more regions and zones to replicate your data across. More than one has tiers that will replicate your data inter-zonally and inter-regionally several times over by default. While smaller vendors can replicate your data as well, they generally do so within a single zone (i.e., a single data center).&lt;/p&gt;

&lt;p&gt;If your business case requires your data to survive a catastrophic event that affects the single data center your data is stored in, Backblaze B2 and Wasabi might not be a good fit. Only sometimes do they have multiple zones within a region.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gtqVMPzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzh698iguzfnx9y1ie1l.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gtqVMPzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzh698iguzfnx9y1ie1l.jpg" alt="Simpson meme stating 'When finance asks you to lower the cloud bill but compliance asks you for multi-AZ availability. A simpsons character is below saying '(chuckles) I'm in danger'" width="880" height="545"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fewer-features"&gt;
  &lt;/a&gt;
  Fewer features
&lt;/h3&gt;

&lt;p&gt;On object storage, Backblaze and Wasabi already have fewer features than the Big 3 storage alternatives. However, they &lt;strong&gt;are also single-purpose vendors&lt;/strong&gt;, which can add development complexity to your team when building full-fledged applications that span many kinds of cloud services.&lt;/p&gt;

&lt;p&gt;For example, let’s say you had to connect your storage service seamlessly to your data science or ML pipeline - is that going to work? &lt;strong&gt;The worst aspect of the feature limitations we encountered was the lack of any serverless or eventing features&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DhuFReeu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldd7vs9vpjqyy87i7n4u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DhuFReeu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldd7vs9vpjqyy87i7n4u.jpg" alt="Spongebob, titled as a 'Specialized Provider' looking at a piece of paper saying 'Any event about your data', and then burning it." width="624" height="728"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#one-storage-class"&gt;
  &lt;/a&gt;
  One storage class
&lt;/h3&gt;

&lt;p&gt;While it’s a feature of Wasabi and Backblaze B2 to have simple and/or single-tier pricing, this can also be a bug depending on the use case. Here are some examples:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you have something that you need to store (e.g., for compliance reasons), but you will never access it, AWS’s Glacier Deep will be a lot cheaper than Backblaze B2 or Wasabi.&lt;/li&gt;
&lt;li&gt;If you need faster or accelerated access to your data, you can pay for that on Amazon, but you can’t with Backblaze B2 or Wasabi.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Suppose money is no object and your team is willing to deal with a bit of complexity. In that case, Amazon S3, Google Cloud Storage, and Azure Blob Storage are usually better choices because of their flexibility.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-wasabi-can-kick-you-off-their-platform"&gt;
  &lt;/a&gt;
  When Wasabi Can Kick You Off Their Platform
&lt;/h2&gt;

&lt;p&gt;Wasabi is an excellent choice for "hot archive” storage wherein you:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Have to store a lot of files,&lt;/li&gt;
&lt;li&gt;Rarely access files,&lt;/li&gt;
&lt;li&gt;Rarely change or delete files,&lt;/li&gt;
&lt;li&gt;Need fast access (the “hot” part) to those files from time to time (but not always).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On the surface, Wasabi looks appealing with a simple pricing structure ($5.99/TB/mo) that comes with free egress and free operations. How can Wasabi afford this, you ask? Well, their business model relies on their user-base keeping their data stored (and unchanged) for some time and not consuming more than their fair share of resources, which they regulate via a handful of fair use policies.&lt;/p&gt;

&lt;p&gt;This kind of setup makes Wasabi nearly perfect for use cases like storing body-cam footage. Body-cam footage tends to create lots of large video files. So, you’re going to need quick access to some files. And, you’re rarely (if ever) changing or deleting the files.&lt;/p&gt;

&lt;p&gt;Now, if you’re off from where they want you on any of these usage dimensions, Wasabi will make you pay or show you the door, as they "reserve the right to limit or suspend your service" based on your usage patterns.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wfnBpTkT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqhu3kyecwri6x10j1oz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wfnBpTkT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqhu3kyecwri6x10j1oz.jpg" alt="Cat in the hat about to hit with a baseball bat. Text of threatening baseball bat holder says 'Wasabi seeing you egress more per month than you store.' Text from person being threatened says 'You trying to save some money'" width="880" height="530"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Are you transferring lots of data relative to your storage volume?&lt;/strong&gt; You have to keep your monthly egress lower than your volume of active storage (e.g., if you have 1 TB of storage on your account, Wasabi only wants you to egress/transfer/download 1 TB a month).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Are you deleting or replacing files?&lt;/strong&gt; Each uploaded object has a minimum storage period of 90 days. You will pay for 90 days of storage, no matter what. This policy even applies to "overwritten" files.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example: Let's say you upload headshot.jpg, make a change, and upload headshot.jpg again. Wasabi will charge you for both files for a minimum of 90 days.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Are you running lots of API operations relative to your storage volume?&lt;/strong&gt; Then, Wasabi “dynamically controls” the allocation you have to run various operations based on your storage volume.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bottom Line:&lt;/strong&gt; If you need hot archival storage, Wasabi is an excellent platform. If you're not a good fit, as shown above, Wasabi can cause many headaches.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-reliability-risks-of-backblaze-b2"&gt;
  &lt;/a&gt;
  The Reliability Risks of Backblaze B2
&lt;/h2&gt;

&lt;p&gt;The industry standard set by Amazon S3 is multi-AZ (availability zone) redundancy. After saving your files, they get backed up across multiple physical data centers. This is not the case with Backblaze B2.&lt;/p&gt;

&lt;p&gt;When you use a Big 3 provider, like Azure Blob Storage or Amazon S3, you’re often paying for reliable storage that a vast swath of enterprises with low-risk tolerance can bet the farm on. Azure has a wide range of options for replication (which has a considerable impact on the reliability of your storage), including LRS (Low Redundancy Storage) if you want to save some cost. Amazon S3, by default, replicates that across three separate zones. To get the equivalent on Backblaze B2, well… you need to pay for it as their bargain pricing is for a single zone only. If, like many other organizations, you need multi-AZ redundancy, it costs about twice as much.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gotchas-of-storj-dcs"&gt;
  &lt;/a&gt;
  Gotchas of Storj DCS
&lt;/h2&gt;

&lt;p&gt;Storj DCS is the least expensive option listed among all cloud object storage providers. It also has, theoretically, the highest level of data redundancy because they have a tokenized economy that pays a decentralized network of node operators to store data for you all across the world. And, despite hosting theoretically everywhere with a bunch of parties unknown to you, your data is impossible to read by anyone other than you — it’s default end-to-end encryption.&lt;/p&gt;

&lt;p&gt;In short, here's how it works. Storj:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Encrypts the objects&lt;/li&gt;
&lt;li&gt;Splits them into smaller pieces&lt;/li&gt;
&lt;li&gt;Globally distributes to their node operators&lt;/li&gt;
&lt;li&gt;Retrieves them when you're ready&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Their tech solves issues like "what if a node goes offline" and more, but we're left with two main problems possibly inherent to the technology.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#storj-dcs-does-not-have-a-data-redundancy-sla"&gt;
  &lt;/a&gt;
  Storj DCS does not have a data redundancy SLA
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;There is no data redundancy SLA for Storj DCS.&lt;/strong&gt; So how do you explain that to your CTO/CIO/VP/SRE? To their credit, Storj DCS has enterprise-grade SLAs for most other aspects of the storage service, and it stands to reason that data redundancy should be pretty good thanks to its sprawling global network. However, for some companies, a data redundancy SLA may be a challenging requirement to work around.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q2W05W8K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jy8t2woajb5vu1z9phn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q2W05W8K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jy8t2woajb5vu1z9phn.jpg" alt="Woman explaining to mother meme. Woman is trying to explain and says: 'Storj explaining they don't need a durability SLA because they split your files into 80 pieces and only need 29 to retrieve the object.' Mom, titled CTO, looks back confused." width="700" height="682"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#storj-dcs-will-be-costly-if-you-have-lots-of-small-files"&gt;
  &lt;/a&gt;
  Storj DCS will be costly if you have lots of small files
&lt;/h3&gt;

&lt;p&gt;Unfortunately, Storj DCS’s network and economics do not work if you store lots of small files. (IoT use cases with billions of 4K files, we’re looking at you!) Storj DCS’s smallest billing increment for a file is 64MB, and you’ll be charged $0.0000088 for each file under that threshold or each incremental 64MB part of a larger file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--65Ao6HHR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7m5f2v60elpvo34hukxx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--65Ao6HHR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7m5f2v60elpvo34hukxx.jpg" alt="Homer Simpson, posing as Storj. The front of his beautiful body says '4TB', the back of his body reveals he only achieved his beauty through pulling back his fat. This back fat is titled 'Per-Segment Fees'" width="680" height="765"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloudflare-r2-is-coming"&gt;
  &lt;/a&gt;
  Cloudflare R2 is Coming
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MeEB5tWO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0v2aer0ns1pr7pung03.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MeEB5tWO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s0v2aer0ns1pr7pung03.jpg" alt="Jim Halbert from the office, titled 'Cloudflare R2' looking ominously through the blinds." width="800" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cloudflare R2 has caught the eyes of the industry by claiming they’ll offer free egress.&lt;/p&gt;

&lt;p&gt;The Cloud BS team has already been talking to the Cloudflare team about running tests as soon as possible. If you want to get that content before it’s public, &lt;a href="https://cloudbs.dev/"&gt;sign up for our newsletter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>webdev</category>
      <category>programming</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Pitch Your Idea for the Secret Ingredient Challenge at AWS re:Invent!</title>
      <author>Jenna Pederson</author>
      <pubDate>Mon, 29 Nov 2021 18:30:32 +0000</pubDate>
      <link>https://dev.to/aws/pitch-your-idea-for-the-secret-ingredient-challenge-at-aws-reinvent-13be</link>
      <guid>https://dev.to/aws/pitch-your-idea-for-the-secret-ingredient-challenge-at-aws-reinvent-13be</guid>
      <description>&lt;p&gt;🏆 &lt;em&gt;Enter today's challenge &lt;a href="https://eventbox.dev/survey/QLJNW88"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The AWS on Air show is challenging you to pitch your ideas for the Secret Ingredient Challenge at &lt;a href="https://reinvent.awsevents.com/"&gt;AWS re:Invent&lt;/a&gt; this week!&lt;/p&gt;

&lt;p&gt;This challenge was inspired by cooking shows where you're given a set of ingredients and challenged to make something tasty and creative. Sometimes those ingredients are harmonious, and sometimes they're not. Often during the AWS on Air show, hosts and guests will talk about creative ways they would use new services that were launched and what business problem they could solve.&lt;/p&gt;

&lt;p&gt;And so the Secret Ingredient Challenge was born! Now, we'd love to hear your fun and creative ideas for what you'd build with AWS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-things-first-what-prizes-could-i-win"&gt;
  &lt;/a&gt;
  First things first. What prizes could I win?!
&lt;/h2&gt;

&lt;p&gt;There will be one prize winner for each challenge:&lt;/p&gt;

&lt;p&gt;Challenge 1: Apple AirPods Pro (valued at $249 USD) and $150 in AWS&lt;br&gt;
Credits&lt;br&gt;
Challenge 2: Apple iPad Pro (valued at $1,199 USD)&lt;br&gt;
Challenge 3: Nvidia GeForce RTX 3080 (valued at $700 USD)&lt;br&gt;
Challenge 4: Nintendo Switch (valued at $392 USD) and $150 in AWS&lt;br&gt;
Credits&lt;/p&gt;

&lt;p&gt;Sound fun? Read on for more on how this works and where to hear the challenges each day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;Each challenge has a theme related to the day's keynote announcements and will challenge you to submit an idea. Challenges will be announced during the AWS on Air show during re:Invent and on the &lt;a href="https://twitter.com/awsdevelopers"&gt;@awsdevelopers Twitter account&lt;/a&gt;. We will collect entries until 6pm PT the same day the challenge was announced. AWS judges will rank these idea submissions each day based on the following criteria:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quality of the idea, including uniqueness, creativity and ingenuity&lt;/li&gt;
&lt;li&gt;Scalability of the solution&lt;/li&gt;
&lt;li&gt;Potential impact of the idea&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Winners will be announced during the AWS on Air show the following morning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-and-where-is-it-happening"&gt;
  &lt;/a&gt;
  When and where is it happening?
&lt;/h2&gt;

&lt;p&gt;AWS re:Invent is happening November 29 - December 3, 2021. The challenges and winners will be announced during the AWS on Air show each morning on &lt;a href="https://www.twitch.tv/aws"&gt;Twitch&lt;/a&gt;, &lt;a href="https://www.linkedin.com/company/amazon-web-services/videos/"&gt;LinkedIn Live&lt;/a&gt;, and &lt;a href="https://twitter.com/AWSonAir"&gt;Twitter&lt;/a&gt; and in the expo hall at re:Invent. If you miss out on the live announcement, check back here for the day's challenge and a link to enter your submission.&lt;/p&gt;

&lt;p&gt;Got your thinking cap on? Ready to submit your idea for today's challenge?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enter-the-challenges"&gt;
  &lt;/a&gt;
  Enter the Challenges
&lt;/h2&gt;

&lt;p&gt;Here are the challenges announced so far. Challenges and a link to enter will be added here each morning after the announcement. The current day's challenge is noted by ACTIVE CHALLENGE below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#challenge-1-completed-challenge"&gt;
  &lt;/a&gt;
  Challenge 1 (completed challenge)
&lt;/h3&gt;

&lt;p&gt;Submissions closed. Winner will be announced Monday, November 29, 2021 at 9am PT.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenge&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How would you leverage open-source tools to build an event registration platform on AWS?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#challenge-2-active-challenge"&gt;
  &lt;/a&gt;
  Challenge 2 (ACTIVE CHALLENGE)
&lt;/h3&gt;

&lt;p&gt;Announced during the AWS on Air show on Monday, November 29, 2021 at 9am PT. Entries accepted until Monday, November 29, 2021 at 6pm PT and a winner will be announced on Tuesday, November 30, 2021 at 10:45am PT.&lt;/p&gt;

&lt;p&gt;❗️❗️❗️ Enter challenge 2 &lt;a href="https://eventbox.dev/survey/QLJNW88"&gt;here&lt;/a&gt;❗️❗️❗️&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenge&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pitch a security startup that protects laptops using AWS IoT, AWS Sagemaker, and Amazon S3?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example submission (NOT a valid contest entry)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TypeKey is an IOT device that captures keystroke data  on laptops to identify who is using the device. By leveraging federated machine learning and strong auditing enabled by Sagemaker and S3, our customers data is secure, and PII is striped using Amazon Comprehend. Our solution is great for companies concerned about insider threats or malicious actors getting access to laptops, as we can detect abnormal behavior on the key stroke level.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#challenge-3"&gt;
  &lt;/a&gt;
  Challenge 3
&lt;/h3&gt;

&lt;p&gt;To be announced during the AWS on Air show on November 30, 2021 at 10:45am PT. Entries accepted until Tuesday, November 30, 2021 at 6pm PT and a winner will be announced on Wednesday, December 1, 2021 at 9:45am PT.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#challenge-4"&gt;
  &lt;/a&gt;
  Challenge 4
&lt;/h3&gt;

&lt;p&gt;To be announced during the AWS on Air show on December 1, 2021 at 9:45am PT. Entries accepted until Wednesday, December 1, 2021 at 6pm PT and a winner will be announced on Thursday, December 2, 2021 at 10:45am PT.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NO PURCHASE NECESSARY. 18+. US only. Eligibility restrictions apply. See terms and conditions &lt;a href="https://eventbox.dev/terms/secret-ingredient-v6.html"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Like what you read? Follow me here on &lt;a href="https://dev.to/jennapederson"&gt;Dev.to&lt;/a&gt; or on &lt;a href="https://twitter.com/jennapederson"&gt;Twitter&lt;/a&gt; to stay updated!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>reinvent</category>
    </item>
    <item>
      <title>Fixing Office Interop on 64-Bit Windows 10 ()</title>
      <author>The Sharp Ninja</author>
      <pubDate>Mon, 29 Nov 2021 18:27:53 +0000</pubDate>
      <link>https://dev.to/sharpninja/fixing-office-interop-on-64-bit-windows-10--4bmp</link>
      <guid>https://dev.to/sharpninja/fixing-office-interop-on-64-bit-windows-10--4bmp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;If you are using Office Interop from .net Framework, then you are actually invoking a DCOM server through proxies included in the Office Interop tools.  For Microsoft Word, the actual CLASSID to be loaded is &lt;code&gt;{000209FF-0000-0000-C000-000000000046}&lt;/code&gt;.  It appears that Word gets a different CLASSID for 64-Bit, &lt;code&gt;{00020905-0000-0000-C000-000000000046}&lt;/code&gt;.  Because of this, attempting to use Word through Office Interop fails with...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Retrieving the COM class factory for component with CLSID {000209FF-0000-0000-C000-000000000046} failed due to the following error: 80080005 Server execution failed (Exception from HRESULT: 0x80080005 (CO_E_SERVER_EXEC_FAILURE)).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;Uninstalling the 64-bit version of Office, and installing the 32-Bit version should fix our issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-uninstall-office"&gt;
  &lt;/a&gt;
  Step 1: Uninstall Office
&lt;/h3&gt;

&lt;p&gt;I'll cut straight to the chase.  You will need the Office uninstall support tool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://support.microsoft.com/en-us/office/uninstall-office-from-a-pc-9dd49b83-264a-477a-8fcc-2fdf5dbf61d8"&gt;Download Office uninstall support tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Expand Option 2 and click Download.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zpUj4Wr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qefjket41v1ig0ozi45u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zpUj4Wr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qefjket41v1ig0ozi45u.png" alt="Download Uninstall Tool" width="880" height="257"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Answer the questions in the uninstall tool and select the installation of Office you wish to remove.  Make sure you have ended all Office applications including OneNote and Teams before continuing.  The install will take a few minutes depending on the speed of your storage system.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The Uninstall requires a Reboot&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#step-2-dowload-microsoft-365-offline-installer-32bit"&gt;
  &lt;/a&gt;
  Step 2: Dowload Microsoft 365 Offline Installer (32-Bit)
&lt;/h3&gt;

&lt;p&gt;Next, visit &lt;a href="https://support.microsoft.com/en-us/office/use-the-office-offline-installer-f0a85fe7-118f-41cb-a791-d59cef96ad1c?ui=en-us&amp;amp;rs=en-us&amp;amp;ad=us#OfficePlans=signinorgid"&gt;Use the Office offline installer&lt;/a&gt;.  Select your plan.  In my case it is &lt;code&gt;Office for Business&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#download-and-install-the-office-deployment-tool"&gt;
  &lt;/a&gt;
  Download and install the Office Deployment Tool
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Create a folder on your hard drive and name it ODT. For this example, we'll create it on the &lt;code&gt;c:\&lt;/code&gt; drive, like so: &lt;code&gt;c:\ODT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Download the &lt;code&gt;OfficeDeployment Tool&lt;/code&gt; from the Microsoft Download Center. Select Save As and save it to your downloads folder.&lt;/li&gt;
&lt;li&gt;In your downloads folder, double-click the Office Deployment Tool exe file to install it.&lt;/li&gt;
&lt;li&gt;If you see the User Account Control prompt that says, Do you want to allow this app to make changes to your device?, click Yes.&lt;/li&gt;
&lt;li&gt;Accept the Microsoft Software License Terms, and then click Continue.&lt;/li&gt;
&lt;li&gt;In the Browse for Folder dialog, select the &lt;code&gt;ODT&lt;/code&gt; folder you created in earlier, and then click OK.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#download-and-install-office"&gt;
  &lt;/a&gt;
  Download and install Office
&lt;/h4&gt;

&lt;p&gt;The file downloaded and extracted to &lt;code&gt;C:\ODT&lt;/code&gt; includes four XML files with configuration for downloading and installing Office.  Pick the one that matches your use case.  For me,  I need to install the Office2021Enterprise version in 32-bits.  I modify the XML file to match this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Configuration&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;Add&lt;/span&gt; &lt;span class="na"&gt;OfficeClientEdition=&lt;/span&gt;&lt;span class="s"&gt;"32"&lt;/span&gt; &lt;span class="na"&gt;Channel=&lt;/span&gt;&lt;span class="s"&gt;"PerpetualVL2021"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Product&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"ProPlus2021Volume"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;Language&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"en-us"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ExcludeApp&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"Lync"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Product&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Product&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"VisioPro2021Volume"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;Language&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"en-us"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Product&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Product&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"ProjectPro2021Volume"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;Language&lt;/span&gt; &lt;span class="na"&gt;ID=&lt;/span&gt;&lt;span class="s"&gt;"en-us"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Product&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/Add&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;Remove&lt;/span&gt; &lt;span class="na"&gt;All=&lt;/span&gt;&lt;span class="s"&gt;"True"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!--  &amp;lt;RemoveMSI All="True" /&amp;gt; --&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;Display&lt;/span&gt; &lt;span class="na"&gt;Level=&lt;/span&gt;&lt;span class="s"&gt;"None"&lt;/span&gt; &lt;span class="na"&gt;AcceptEULA=&lt;/span&gt;&lt;span class="s"&gt;"TRUE"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;Property&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;"AUTOACTIVATE"&lt;/span&gt; &lt;span class="na"&gt;Value=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/Configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that I've changed OfficeLientEdition from &lt;code&gt;64&lt;/code&gt; to &lt;code&gt;32&lt;/code&gt;.  I have also incommented some properties to autoregister and accept the EULA as part of the install.&lt;/p&gt;

&lt;p&gt;After saving this file, open a Windows PowerShell window and navigate to &lt;code&gt;C:\ODT&lt;/code&gt;.  Then enter...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;\setup.exe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;/download&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;configuration-Office2021Enterprise.xml&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are installing a different version, then replace the name of the XML file.&lt;/p&gt;

&lt;p&gt;This will download the installation files.  When the prompt returns, enter...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;\setup.exe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;/configure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;configuration-Office2021Enterprise.xml&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will install the version you selected.  Run the following command in an Administrative Windows PowerShell...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gwmi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Win32_COMSetting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;?&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;$_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;TypeLibraryId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"000000000046"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ProgId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Format-Table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;TypeLibraryId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;ProgId&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see our missing GUID &lt;code&gt;{000209FF-0000-0000-C000-000000000046}&lt;/code&gt;.&lt;/p&gt;

</description>
      <category>office</category>
      <category>dotnet</category>
      <category>64bit</category>
    </item>
    <item>
      <title>Web design principles</title>
      <author>Rakesh Potnuru</author>
      <pubDate>Mon, 29 Nov 2021 18:14:46 +0000</pubDate>
      <link>https://dev.to/rakeshpotnuru/web-design-principles-1p2k</link>
      <guid>https://dev.to/rakeshpotnuru/web-design-principles-1p2k</guid>
      <description>&lt;p&gt;When people visit your website, the first thing they feel is the design. Even if your website has great functionality, poor design can make those functionalities worthless. So in this blog, I will introduce a few web design principles and their history. I will also share some resources that can help you to design your website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#1-color"&gt;
  &lt;/a&gt;
  1. Color
&lt;/h2&gt;

&lt;p&gt;Choosing a right color is very important and you can't just choose your favorite color. &lt;br&gt;
A colorful website does not mean using all the different colors, be consistent and choose a single color as your theme color. When picking colors think about the mood of your color palette.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;u&gt;The five moods of color&lt;/u&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-red"&gt;
  &lt;/a&gt;
  - Red
&lt;/h3&gt;

&lt;p&gt;Red resembles &lt;strong&gt;Love&lt;/strong&gt;, &lt;strong&gt;Energy&lt;/strong&gt; and &lt;strong&gt;Intensity&lt;/strong&gt;. It is the most powerful, strongest and brightest in the color wheel. Red theme is mostly used in e-commerce, entertainment and fashion websites.&lt;br&gt;
With great power comes great responsibility - using too much red creates a negative impression on your design. Also, red is not suitable for nature-related websites.&lt;br&gt;
Examples:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--owoaR8bc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzw1y8ssa4mxbh5rjffp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--owoaR8bc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzw1y8ssa4mxbh5rjffp.gif" alt="red themed websites" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-yellow"&gt;
  &lt;/a&gt;
  - Yellow
&lt;/h3&gt;

&lt;p&gt;Yellow is for &lt;strong&gt;Joy&lt;/strong&gt;, &lt;strong&gt;Intellect&lt;/strong&gt; and &lt;strong&gt;Attention&lt;/strong&gt;. You should be careful with yellow because using bright yellow as background can hurt user eyes especially when your website needs to be used for a long time. Yellow is great for headings, logos, buttons, etc. So to sum up, if your website is something that users need to spend more time then yellow is not the best choice.&lt;/p&gt;

&lt;p&gt;Good examples of yellow themed websites:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U7CMlrwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05vcal641ypyvt4aho7o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U7CMlrwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05vcal641ypyvt4aho7o.gif" alt="yellow themed websites" width="801" height="487"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-green"&gt;
  &lt;/a&gt;
  - Green
&lt;/h3&gt;

&lt;p&gt;Green is about &lt;strong&gt;Freshness&lt;/strong&gt;, &lt;strong&gt;Safety&lt;/strong&gt; and &lt;strong&gt;Growth&lt;/strong&gt;. That's why most grocery, nutrition, organic products companies use green color palette. That's how they convey the freshness of their products digitally. So if your website is food or nature related, then green is your choice.&lt;/p&gt;

&lt;p&gt;Here are some examples:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mZfV3LBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89spmp6n566oiuz7zmii.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZfV3LBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89spmp6n566oiuz7zmii.gif" alt="green themed websites" width="880" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-blue"&gt;
  &lt;/a&gt;
  - Blue
&lt;/h3&gt;

&lt;p&gt;Blue - &lt;strong&gt;Stability&lt;/strong&gt;, &lt;strong&gt;Trust&lt;/strong&gt;, and &lt;strong&gt;Serenity&lt;/strong&gt;. Now you know why most of the financial companies, cryptocurrency companies websites are blue. Also some major social media sites like &lt;a href="https://twitter.com/rakesh_at_tweet"&gt;twitter&lt;/a&gt;, linkedin are blue themed because they make people feel safe, trust and positive using their platform. So use social media to spread positivity 😉.&lt;/p&gt;

&lt;p&gt;Examples:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--htuGaI0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kaz0xrb08m07ibhw3w86.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--htuGaI0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kaz0xrb08m07ibhw3w86.gif" alt="blue themed websites" width="880" height="433"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-purple"&gt;
  &lt;/a&gt;
  - Purple
&lt;/h3&gt;

&lt;p&gt;Finally purple, purple shows &lt;strong&gt;Royalty&lt;/strong&gt;, &lt;strong&gt;Wealth&lt;/strong&gt; and &lt;strong&gt;Femininity&lt;/strong&gt;. The words say it all. So the websites which are targeted at women will more likely use purple.&lt;/p&gt;

&lt;p&gt;Examples:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fIVG73pn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxr8aiojcp5ocngimj95.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fIVG73pn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxr8aiojcp5ocngimj95.gif" alt="purple themed websites" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hence, depending upon what message you want to convey users through your website choose the right color.&lt;br&gt;
Of course you don't just use a single color throughout your website, so use these two tools to combine colors matching your theme color.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://color.adobe.com/create/color-wheel"&gt;Adobe Color&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://colorhunt.co"&gt;Color Hunt&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#2-typography"&gt;
  &lt;/a&gt;
  2. Typography
&lt;/h2&gt;

&lt;p&gt;Typography is another important part of a website. I saw so many websites fail at choosing the font. If your website has more reading content then font really matters. Let's see some history about fonts.&lt;br&gt;
There are two large font families.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-serif"&gt;
  &lt;/a&gt;
  - Serif
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HN716mV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipo4gzd4qc0h5425eaa7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HN716mV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipo4gzd4qc0h5425eaa7.jpg" alt="F" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Serif font is inspired by olden days marble carvings. It is hard to carve 90 degree angles, so that's why serif font has triangle type curvature. Serif typeface makes you feel serious, authoritative and old. Serif has many sub-types like old style, transitional and modern. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--flTcrKcj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/auaqgnpec6uy32zuaypr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--flTcrKcj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/auaqgnpec6uy32zuaypr.jpg" alt="E" width="473" height="631"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like colors fonts also have moods.&lt;br&gt;
Now serif font is seen as &lt;strong&gt;Traditional&lt;/strong&gt;, &lt;strong&gt;Stable&lt;/strong&gt; and &lt;strong&gt;Respectable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;VOGUE is the best example for serif typeface.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ut4-nd18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sa917z17j24st9xdnq1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ut4-nd18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sa917z17j24st9xdnq1.jpg" alt="vogue" width="496" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-sans-serif"&gt;
  &lt;/a&gt;
  - Sans Serif
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DeLw1jZi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wht6ktsllm5o0rqe9ww.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DeLw1jZi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wht6ktsllm5o0rqe9ww.jpg" alt="sans f" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sans serif is &lt;strong&gt;Sensible&lt;/strong&gt;, &lt;strong&gt;Simple&lt;/strong&gt; and &lt;strong&gt;Straightforward&lt;/strong&gt;. Sans serif have perfect right angles. Mostly startups tend to use sans serif typeface. You can use sans serif for body text because it makes text more readable.&lt;/p&gt;

&lt;p&gt;Tip-1 💡: When choosing fonts don't choose more than two different fonts.&lt;br&gt;
Tip-2 💡: Avoid using these fonts - &lt;strong&gt;comic sans&lt;/strong&gt;, &lt;strong&gt;kristen&lt;/strong&gt;, &lt;strong&gt;curlz&lt;/strong&gt;, &lt;strong&gt;viner&lt;/strong&gt; and &lt;strong&gt;papyrus&lt;/strong&gt;. These fonts are difficult to read and are only for fun.&lt;/p&gt;

&lt;p&gt;Before deciding a font family, go through &lt;a href="https://www.cssfontstack.com"&gt;cssfontstack&lt;/a&gt; to know which fonts are safe to use.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-user-interface-ui"&gt;
  &lt;/a&gt;
  3. User Interface (UI)
&lt;/h2&gt;

&lt;p&gt;After learning about color theory and typography, the next thing you need to know about is User Interface design. UI is about how you use and arrange things on your website. There are five factors of UI - &lt;strong&gt;1.Hierarchy&lt;/strong&gt;, &lt;strong&gt;2.Layout&lt;/strong&gt;, &lt;strong&gt;3.Alignment&lt;/strong&gt; &lt;strong&gt;4.Whitespace&lt;/strong&gt; and &lt;strong&gt;5.Audience&lt;/strong&gt;. Let's understand these factors with examples.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-hierarchy"&gt;
  &lt;/a&gt;
  - Hierarchy
&lt;/h3&gt;

&lt;p&gt;A quick example of text hierarchy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gBxMvwAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8e24eiiq7sukhp05qa5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gBxMvwAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8e24eiiq7sukhp05qa5.png" alt="text hierarchy example" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here the main thing is whose certificate is that and for that left one is more appropriate. User may not have time to read all the text, for that highlight the most important information first hierarchically.&lt;/p&gt;

&lt;p&gt;Example for color hierarchy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a7dkvTXJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62dwyq11s4psv5xbikku.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a7dkvTXJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62dwyq11s4psv5xbikku.png" alt="color hierarchy example" width="880" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See the spots highlighted by green boxes. These are the things most of the people consider about a product, right? So that is color hierarchy. Use color cleverly to highlight the things that need to attract the users.&lt;/p&gt;

&lt;p&gt;Example for size hierarchy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jTHUarO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8nx5xybkyw8hvnokd6wa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jTHUarO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8nx5xybkyw8hvnokd6wa.png" alt="size hierarchy example" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now see this Netflix signup page. Here 1 &amp;gt; 2 &amp;gt; 3 in size. The first thing they want to show visitors is what Netflix is about. The second preferred thing is they want your email. And the third thing is small compared to other two because they don't consider it that much.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-layout"&gt;
  &lt;/a&gt;
  - Layout
&lt;/h3&gt;

&lt;p&gt;Layout is about how you arrange your website elements. Don't be so bland by putting everything at same place like Wikipedia. Separate elements to different parts. If there is so much text, cut each line to 60 characters. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9DUeJ4Ey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7cuuoz9zama73x1vehq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9DUeJ4Ey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7cuuoz9zama73x1vehq.gif" alt="layout example" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check this out - &lt;a href="https://csslayout.io"&gt;csslayout&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-alignment"&gt;
  &lt;/a&gt;
  - Alignment
&lt;/h3&gt;

&lt;p&gt;Alignment is about how you position an element relative to other element.&lt;/p&gt;

&lt;p&gt;See this example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b1bXJ_FY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ndzp9dlz8m974e3ziem.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b1bXJ_FY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ndzp9dlz8m974e3ziem.gif" alt="alignment example" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Got the difference? Even both websites has same content just alignment of different elements makes big difference.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-whitespace"&gt;
  &lt;/a&gt;
  - Whitespace
&lt;/h3&gt;

&lt;p&gt;Whitespace refers to space around elements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V8jnradB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vcte0vsmilzw8vrqkwea.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V8jnradB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vcte0vsmilzw8vrqkwea.gif" alt="whitespace example" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-audience"&gt;
  &lt;/a&gt;
  - Audience
&lt;/h3&gt;

&lt;p&gt;Yes, audience is a factor of UI. Know your target audience, design for your audience. For example, the theme for &lt;strong&gt;YouTube&lt;/strong&gt; and &lt;strong&gt;YouTube kids&lt;/strong&gt; is different.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PmO_0tes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ulee23axj8t8ecfr38av.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PmO_0tes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ulee23axj8t8ecfr38av.gif" alt="audience example" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All the games websites theme is completely different from other websites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--axUwWA8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vchqn84r6bt4i84oo3t.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--axUwWA8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vchqn84r6bt4i84oo3t.gif" alt="games websites" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-user-experience-ux"&gt;
  &lt;/a&gt;
  4. User Experience (UX)
&lt;/h2&gt;

&lt;p&gt;Let's move onto UX. Until now we tried to attract the users, now we need to impress the user. While UI attracts the user, UX makes the user comfortable using your website. Again, there are five factors you need to consider in UX - &lt;strong&gt;1.Simplicity&lt;/strong&gt;, &lt;strong&gt;2.Consistency&lt;/strong&gt;, &lt;strong&gt;3.Reading Patterns&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-simplicity"&gt;
  &lt;/a&gt;
  - Simplicity
&lt;/h3&gt;

&lt;p&gt;Too much content at same place brings headache to the users as they can't understand where to look. Keep things simple by arranging and reducing the content. Simple is beautiful. Amazon website has bad UI and UX(If you know the reason comment below), but there are so many e-commerce websites with simple design.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-consistency"&gt;
  &lt;/a&gt;
  - Consistency
&lt;/h3&gt;

&lt;p&gt;Consistency makes your website easy to understand and easy to navigate, especially if your website is used by non-tech people or kids or old people. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-reading-patterns"&gt;
  &lt;/a&gt;
  - Reading Patterns
&lt;/h3&gt;

&lt;p&gt;Reading patterns refers to how a user looks your website. There are some layouts called Z-layout, F-layout etc.., which can used to design the layout of your elements.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#flayout"&gt;
  &lt;/a&gt;
  F-Layout
&lt;/h4&gt;

&lt;p&gt;In f-layout important content will be on left side.&lt;br&gt;
See this example,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FKXBS-8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdmjuak824fop9g50t4g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FKXBS-8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdmjuak824fop9g50t4g.jpg" alt="f-layout example" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#zlayout"&gt;
  &lt;/a&gt;
  Z-Layout
&lt;/h4&gt;

&lt;p&gt;Z-Layout includes logo(1), signup button(2) or something like that, some text(3) and call to action button(4).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l9KRenb3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ofpfcrlzb47f9c3zxvj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l9KRenb3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ofpfcrlzb47f9c3zxvj.jpg" alt="z-layout example" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-all-platform-design"&gt;
  &lt;/a&gt;
  5. All platform design
&lt;/h2&gt;

&lt;p&gt;At the end of day, you don't just create website for desktop only, it needs to be responsive among different devices.&lt;/p&gt;




&lt;p&gt;So, if you follow these principles, then you can make a great design.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6DxpB11G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rc4hli4014g008j02b51.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6DxpB11G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rc4hli4014g008j02b51.gif" alt="great" width="498" height="259"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;What other principles would you consider for a good web design? &lt;br&gt;
Comment below 👇&lt;/p&gt;




&lt;p&gt;Hope this helps you!&lt;br&gt;
Save for reference.&lt;br&gt;
Follow for more awesomeness 😀.&lt;br&gt;
You can connect with me on &lt;a href="https://twitter.com/rakesh_at_tweet"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/rakesh-potnuru-067a8b1b1"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>design</category>
    </item>
    <item>
      <title>How To Improve Your Productivity.</title>
      <author>Bonnie!</author>
      <pubDate>Mon, 29 Nov 2021 18:08:32 +0000</pubDate>
      <link>https://dev.to/the_greatbonnie/how-to-improve-your-productivity-4297</link>
      <guid>https://dev.to/the_greatbonnie/how-to-improve-your-productivity-4297</guid>
      <description>&lt;p&gt;I have been struggling to get things done because of procrastinating and a lack of self-discipline.&lt;/p&gt;

&lt;p&gt;I decided to bring that to an end and research ways I could improve my productivity to get more things done.&lt;/p&gt;

&lt;p&gt;I discovered some of the methods I have been using and that you too can use to beat procrastination, build self-discipline and get more things done.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-the-202020-formula"&gt;
  &lt;/a&gt;
  1. The 20/20/20 Formula
&lt;/h3&gt;

&lt;p&gt;This is a morning routine I have installed in my life to help me manage my mornings.&lt;/p&gt;

&lt;p&gt;It involves dividing the first hour after waking up into three sections of twenty minutes each.&lt;/p&gt;

&lt;p&gt;The first twenty minutes of the formula require that you move.&lt;/p&gt;

&lt;p&gt;It involves doing some exercise or workout first thing every morning.&lt;/p&gt;

&lt;p&gt;This will revolutionize the quality of your days.&lt;/p&gt;

&lt;p&gt;The second twenty minutes are supposed to be for reflecting, praying, meditating, or planning for the day.&lt;/p&gt;

&lt;p&gt;This will help you boost your self-awareness, dissolve stress, fuel your happiness and restore your inner peace.&lt;/p&gt;

&lt;p&gt;The third twenty minutes are centered around ensuring that you are inspired or motivated.&lt;/p&gt;

&lt;p&gt;Use this time to watch or read something that inspires you or motivates you to go for what you want for yourself in life.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-the-90901-rule"&gt;
  &lt;/a&gt;
  2. The 90/90/1 Rule
&lt;/h3&gt;

&lt;p&gt;This rule suggests that for the next 90 days, schedule yourself to invest the first 90 minutes of your workday on one activity that when completed at world-class, will cause you to own your field.&lt;/p&gt;

&lt;p&gt;This 90-minute period must be completely free of any noise and interruptions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-the-6010-method"&gt;
  &lt;/a&gt;
  3. The 60/10 Method
&lt;/h3&gt;

&lt;p&gt;This method suggests that you work at your best for 60 minutes straight while sitting or standing quietly.&lt;/p&gt;

&lt;p&gt;Just concentrate and create the highest results you can possibly make.&lt;/p&gt;

&lt;p&gt;After your 60-minute productivity sprint is done, refuel for 10 minutes.&lt;/p&gt;

&lt;p&gt;Start over again and repeat.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-the-daily-5-concept"&gt;
  &lt;/a&gt;
  4. The Daily 5 Concept
&lt;/h3&gt;

&lt;p&gt;This concept suggests that you list five things you wish to accomplish over the day.&lt;/p&gt;

&lt;p&gt;Start with the most important thing that needs to get done and move in that order.&lt;/p&gt;

&lt;p&gt;This will help you feel that your day was one that was well spent.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-the-weekly-design-system"&gt;
  &lt;/a&gt;
  5. The Weekly Design System
&lt;/h3&gt;

&lt;p&gt;This system suggests that you set aside 30 minutes early each Sunday morning to create your "Blueprint for a beautiful week."&lt;/p&gt;

&lt;p&gt;Start the process by reflecting on the highlights from the just-finished week. &lt;/p&gt;

&lt;p&gt;Then record the lessons you learned and improvements for making the coming week.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Learn Python</title>
      <author>Vijay Patel</author>
      <pubDate>Mon, 29 Nov 2021 17:52:44 +0000</pubDate>
      <link>https://dev.to/easyawslearn/learn-python-fo5</link>
      <guid>https://dev.to/easyawslearn/learn-python-fo5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Python&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Python is an interpreted high-level general-purpose programming language. Its design philosophy emphasizes code readability with its use of significant indentation. Its language constructs as well as its object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects.&lt;/p&gt;

&lt;p&gt;It supports multiple programming paradigms, including structured (particularly, procedural), object-oriented and functional programming. It is often described as a "batteries included" language due to its comprehensive standard library.&lt;/p&gt;

&lt;p&gt;It was created by Guido van Rossum, and released in 1991.&lt;/p&gt;

&lt;p&gt;It is used for:&lt;br&gt;
web development (server-side),&lt;br&gt;
software development,&lt;br&gt;
mathematics,&lt;br&gt;
system scripting.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/25J4Ruv7E_U"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cLJm5rAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7fwblbz1pr4z97sreku.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What can Python do?&lt;/strong&gt;&lt;br&gt;
Python can be used on a server to create web applications.&lt;br&gt;
Python can be used alongside software to create workflows.&lt;br&gt;
Python can connect to database systems. It can also read and modify files.&lt;br&gt;
Python can be used to handle big data and perform complex mathematics.&lt;br&gt;
Python can be used for rapid prototyping, or for production-ready software development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Python?&lt;/strong&gt;&lt;br&gt;
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).&lt;br&gt;
Python has a simple syntax similar to the English language.&lt;br&gt;
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.&lt;br&gt;
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.&lt;br&gt;
Python can be treated in a procedural way, an object-oriented way or a functional way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=6YVS-qUxukc&amp;amp;t=74s"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VIPToo8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xhnddhekdd4r0px9t8r.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#python-installation"&gt;
  &lt;/a&gt;
  Python Installation:
&lt;/h2&gt;

&lt;p&gt;Many PCs and Macs will have python already installed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ycTc1zAR_iA&amp;amp;t=4s"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h3l0s1xU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltb2ok6th4n2axx6acvl.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To check if you have python installed on a Windows PC, search in the start bar for Python or run the following on the Command Line&lt;br&gt;
 &lt;code&gt;(cmd.exe):&lt;br&gt;
   C:\Users\Your Name&amp;gt;python --version&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To check if you have python installed on a Linux or Mac, then on linux open the command line or on Mac open the Terminal and type:&lt;br&gt;
&lt;code&gt;python --version&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#python-syntax-and-comments"&gt;
  &lt;/a&gt;
  Python Syntax and Comments:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ncbTQeqUb90&amp;amp;t=49s"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--htSnUJtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsfir2fyznpssihhd9zk.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python syntax can be executed by writing directly in the Command Line:&lt;br&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; print("Hello, World!")&lt;br&gt;
Hello, World!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or by creating a python file on the server, using the .py file extension, and running it in the Command Line:&lt;br&gt;
C:\Users\Your Name&amp;gt;python myfile.py&lt;br&gt;
Python Indentation:&lt;br&gt;
Indentation refers to the spaces at the beginning of a code line.&lt;br&gt;
Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important.&lt;br&gt;
Python uses indentation to indicate a block of code.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if 5 &amp;gt; 2:
  print("Five is greater than two!")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Single-Line Comments:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Comments can be used to explain Python code.&lt;br&gt;
Comments can be used to make the code more readable.&lt;br&gt;
Comments can be used to prevent execution when testing code.&lt;/p&gt;

&lt;p&gt;Comments start with a #, and Python will ignore them:&lt;br&gt;
Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#This is a comment
print("Hello, World!")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;**Multi-Line Comments:&lt;br&gt;
**Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"""
This is a comment
written in
more than just one line
"""
print("Hello, World!")

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#python-variable-and-data-types"&gt;
  &lt;/a&gt;
  Python Variable and Data Types:
&lt;/h2&gt;

&lt;p&gt;Variables are containers for storing data values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=raShdX__8BE&amp;amp;t=5s"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kwjDpi20--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcnqabo09koy7lna64ra.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating Variables:&lt;/strong&gt;&lt;br&gt;
Python has no command for declaring a variable.&lt;br&gt;
A variable is created the moment you first assign a value to it.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = 5
y = "John"
print(x)
print(y)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Get the Type:&lt;/strong&gt;&lt;br&gt;
You can get the data type of a variable with the type() function.&lt;br&gt;
Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = 5
y = "John"
print(type(x))
print(type(y))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;**Case-Sensitive:&lt;br&gt;
**Variable names are case-sensitive.&lt;br&gt;
Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;This will create two variables:
a = 4
A = "Sally"
#A will not overwrite a
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Built-in Data Types:&lt;/strong&gt;&lt;br&gt;
In programming, data type is an important concept.&lt;br&gt;
Variables can store data of different types, and different types can do different things.&lt;br&gt;
Python has the following data types built-in by default, in these categories:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Text Type: str&lt;br&gt;
Numeric Types: int, float, complex&lt;br&gt;
Sequence Types: list, tuple, range&lt;br&gt;
Mapping Type: dict&lt;br&gt;
Set Types: set, frozenset&lt;br&gt;
Boolean Type: bool&lt;br&gt;
Binary Types: bytes, bytearray, memoryview&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#python-conditions-and-if-statements"&gt;
  &lt;/a&gt;
  Python Conditions and If statements:
&lt;/h2&gt;

&lt;p&gt;Python supports the usual logical conditions from mathematics:&lt;br&gt;
Equals: a == b&lt;br&gt;
Not Equals: a != b&lt;br&gt;
Less than: a &amp;lt; b&lt;br&gt;
Less than or equal to: a &amp;lt;= b&lt;br&gt;
Greater than: a &amp;gt; b&lt;br&gt;
Greater than or equal to: a &amp;gt;= b&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=BasLA6W7Yhs"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nDS5kxdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7l34rff5a8d2yq8ox9ia.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These conditions can be used in several ways, most commonly in "if statements" and loops.&lt;br&gt;
An "if statement" is written by using the if keyword.&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If statement:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a = 33
b = 200
if b &amp;gt; a:
  print("b is greater than a")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Indentation:&lt;/strong&gt;&lt;br&gt;
Python relies on indentation (whitespace at the beginning of a line) to define scope in the code. Other programming languages often use curly-brackets for this purpose.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Elif:&lt;/strong&gt;&lt;br&gt;
The elif keyword is pythons way of saying "if the previous conditions were not true, then try this condition".&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a = 33
b = 33
if b &amp;gt; a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Getting the Data Type:&lt;/strong&gt;&lt;br&gt;
You can get the data type of any object by using the type() function:&lt;br&gt;
Example&lt;br&gt;
Print the data type of the variable x:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = 5
print(type(x))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#python-loops"&gt;
  &lt;/a&gt;
  Python Loops:
&lt;/h2&gt;

&lt;p&gt;Python has two primitive loop commands:&lt;br&gt;
while loops&lt;br&gt;
for loops&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The while Loop:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=89aw4fD9YeQ&amp;amp;t=19s"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--knQie06p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojvvhvrwl4qqwyd5d992.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the while loop we can execute a set of statements as long as a condition is true.&lt;br&gt;
Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Print i as long as i is less than 6:
i = 1
while i &amp;lt; 6:
  print(i)
  i += 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Python For Loops:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).&lt;br&gt;
This is less like the for keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.&lt;br&gt;
With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=cSdunnrI0ds"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6IHnUJr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2q12l58b0qq0jft3kj6.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example&lt;/p&gt;

&lt;p&gt;Print each fruit in a fruit list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Looping Through a String:&lt;/strong&gt;&lt;br&gt;
Even strings are iterable objects, they contain a sequence of characters:&lt;br&gt;
Example&lt;br&gt;
Loop through the letters in the word "banana":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for x in "banana":
  print(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#break-continue-and-pass"&gt;
  &lt;/a&gt;
  Break, Continue, and Pass:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=css_ijwXOHw"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IlUZ0SpL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxjp3vf0r689jrcm1fov.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Break Statement:&lt;/strong&gt;&lt;br&gt;
With the break statement we can stop the loop before it has looped through all the items:&lt;br&gt;
Example&lt;br&gt;
Exit the loop when x is "banana":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)
  if x == "banana":
    break
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Continue Statement:&lt;/strong&gt;&lt;br&gt;
With the continue statement we can stop the current iteration of the loop, and continue with the next:&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
Do not print banana:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
    continue
  print(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Pass Statement:&lt;/strong&gt;&lt;br&gt;
for loops cannot be empty, but if you for some reason have a for loop with no content, put in the pass statement to avoid getting an error.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for x in [0, 1, 2]:
  pass
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#python-for-else"&gt;
  &lt;/a&gt;
  Python For Else:
&lt;/h2&gt;

&lt;p&gt;The else keyword in a for loop specifies a block of code to be executed when the loop is finished:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=1-woqHzS9n0&amp;amp;t=2s"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZiavEFyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6dmp15jgsx0jir45oxh.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
Print all numbers from 0 to 5, and print a message when the loop has ended:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for x in range(6):
  print(x)
else:
  print("Finally finished!")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#python-functions"&gt;
  &lt;/a&gt;
  Python Functions:
&lt;/h2&gt;

&lt;p&gt;A function is a block of code which only runs when it is called.&lt;br&gt;
You can pass data, known as parameters, into a function.&lt;br&gt;
A function can return data as a result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Qy6bVkOegwU&amp;amp;t=37s"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--te4iQ_KE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iyelhy1m4x2qkm0rj1ql.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating a Function:&lt;/strong&gt;&lt;br&gt;
In Python a function is defined using the def keyword:&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def my_function():
  print("Hello from a function")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Calling a Function:&lt;/strong&gt;&lt;br&gt;
To call a function, use the function name followed by parenthesis:&lt;br&gt;
Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def my_function():
  print("Hello from a function")
my_function()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Arguments:&lt;/strong&gt;&lt;br&gt;
Information can be passed into functions as arguments.&lt;br&gt;
Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma.&lt;br&gt;
The following example has a function with one argument (fname). When the function is called, we pass along a first name, which is used inside the function to print the full name:&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def my_function(fname):
  print(fname + " Refsnes")

my_function("Emil")
my_function("Tobias")
my_function("Linus")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Number of Arguments:&lt;/strong&gt;&lt;br&gt;
By default, a function must be called with the correct number of arguments. Meaning that if your function expects 2 arguments, you have to call the function with 2 arguments, not more, and not less.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
This function expects 2 arguments, and gets 2 arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def my_function(fname, lname):
  print(fname + " " + lname)

my_function("Emil", "Refsnes")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Default Parameter Value:&lt;/strong&gt;&lt;br&gt;
The following example shows how to use a default parameter value.&lt;br&gt;
If we call the function without argument, it uses the default value:&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def my_function(country = "Norway"):
  print("I am from " + country)

my_function("Sweden")
my_function("India")
my_function()
my_function("Brazil")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#python-lambda"&gt;
  &lt;/a&gt;
  Python Lambda:
&lt;/h2&gt;

&lt;p&gt;A lambda function is a small anonymous function.&lt;br&gt;
A lambda function can take any number of arguments, but can only have one expression.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=VkGBzKq7dRs&amp;amp;t=3s"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gOsYGrdt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9pm4jz3fejx5vr2fb8p.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;lambda arguments : expression&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The expression is executed and the result is returned:&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
Add 10 to argument a, and return the result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = lambda a : a + 10
print(x(5))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Why Use Lambda Functions?&lt;/strong&gt;&lt;br&gt;
The power of lambda is better shown when you use them as an anonymous function inside another function.&lt;br&gt;
Say you have a function definition that takes one argument, and that argument will be multiplied with an unknown number:&lt;br&gt;
&lt;code&gt;def myfunc(n):&lt;br&gt;
  return lambda a : a * n&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Use that function definition to make a function that always doubles the number you send in:&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def myfunc(n):
  return lambda a : a * n

mydoubler = myfunc(2)

print(mydoubler(11))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#python-arrays"&gt;
  &lt;/a&gt;
  Python Arrays:
&lt;/h2&gt;

&lt;p&gt;Note: Python does not have built-in support for Arrays, but Python Lists can be used instead.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=G7z19LQcH3g"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PGO7k-0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtxyj8x4elk5o0dxseoh.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is an Array?&lt;/strong&gt;&lt;br&gt;
An array is a special variable, which can hold more than one value at a time.&lt;br&gt;
If you have a list of items (a list of car names, for example), storing the cars in single variables could look like this:&lt;br&gt;
&lt;code&gt;car1 = "Ford"&lt;br&gt;
car2 = "Volvo"&lt;br&gt;
car3 = "BMW"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, what if you want to loop through the cars and find a specific one? And what if you had not 3 cars, but 300?&lt;br&gt;
The solution is an array!&lt;br&gt;
An array can hold many values under a single name, and you can access the values by referring to an index number.&lt;/p&gt;

&lt;p&gt;Access the Elements of an Array:&lt;br&gt;
You refer to an array element by referring to the index number.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
Get the value of the first array item:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = cars[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Adding Array Elements:&lt;/strong&gt;&lt;br&gt;
You can use the append() method to add an element to an array.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
Add one more element to the cars array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cars.append("Honda")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Removing Array Elements:&lt;/strong&gt;&lt;br&gt;
You can use the pop() method to remove an element from the array.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
Delete the second element of the cars array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cars.pop(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also use the remove() method to remove an element from the array.&lt;br&gt;
Example&lt;br&gt;
Delete the element that has the value "Volvo":&lt;br&gt;
&lt;strong&gt;cars.remove("Volvo")&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>python</category>
    </item>
    <item>
      <title>Join me at AWS re:Invent - Level Up as a Developer and Software Engineer with me - DAY 1</title>
      <author>Brian H. Hough</author>
      <pubDate>Mon, 29 Nov 2021 17:43:12 +0000</pubDate>
      <link>https://dev.to/aws-builders/join-me-at-aws-reinvent-level-up-as-developer-and-software-engineer-with-me-day-1-292e</link>
      <guid>https://dev.to/aws-builders/join-me-at-aws-reinvent-level-up-as-developer-and-software-engineer-with-me-day-1-292e</guid>
      <description>&lt;p&gt;I have an exciting announcement friends!! I just touched down in Las Vegas for day 1 of AWS' re:Invent 2021 conference 🌄 and I cannot wait to share this week's exciting updates, announcements, learnings, and opportunities to level up in cloud computing, serverless, and DevOps with you all. &lt;/p&gt;

&lt;p&gt;In this episode of the &lt;a href="https://www.youtube.com/watch?v=kJV-OD_VAJk" rel="noopener noreferrer"&gt;Tech Stack Playbook&lt;/a&gt;, I'll be sharing more about AWS re:Invent - the year's largest global tech conference that brings together leaders, builders, innovators, and creators from cloud, DevOps, serverless, app development, and software engineering from all around the world. I was so fortunate to win an All Builders Grant to attend this year's event, so thank you SO much AWS for this incredible opportunity. 🎉 &lt;/p&gt;

&lt;p&gt;In this blog post and the blog posts to come this week, my hope is to vlog through the entire week and share all that I'm learning and building with you all so whether you are attending virtually or in person, this AWS re:Invent series on the Tech Stack Playbook will help you gain skills, level up in tech, and boost your software engineering abilities from the sessions I'm attending throughout the conference.&lt;/p&gt;

&lt;p&gt;Here’s a glance at what you’ll learn in this blog post:&lt;br&gt;
👉  What AWS re:Invent is all about&lt;br&gt;
👉  Traveling to Las Vegas for the year's largest tech conference&lt;br&gt;
👉  What I'll be learning about and building this week&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kJV-OD_VAJk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's going to be a major week for cloud and tech in general, so I am so excited to bring you along for the ride.&lt;/p&gt;

&lt;p&gt;What do you want to know about AWS, serverless, and DevOps? 💭&lt;/p&gt;

&lt;p&gt;Let me know in the comments below! ⬇️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-out-the-full-recording-below"&gt;
  &lt;/a&gt;
  Check out the full recording below:
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kJV-OD_VAJk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let me know if you found this post helpful! And if you haven't yet, make sure to check out these free resources below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Follow my Instagram for more: &lt;a href="https://instagram.com/brianhhough" rel="noopener noreferrer"&gt;@BrianHHough&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Watch my latest &lt;a href="https://youtube.com/brianhhough" rel="noopener noreferrer"&gt;YouTube video for more&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Listen to my Podcast on &lt;a href="https://podcasts.apple.com/us/podcast/tech-stack-playbook/id1553712082" rel="noopener noreferrer"&gt;Apple Podcasts&lt;/a&gt; and &lt;a href="https://open.spotify.com/show/01bHbabSyBmPfbc3ORMZa9?si=av_16aPbQEqL_bVu3RnO0g" rel="noopener noreferrer"&gt;Spotify&lt;/a&gt;&lt;/b&gt; &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Join my FREE &lt;a href="https://facebook.com/groups/techstackplaybook" rel="noopener noreferrer"&gt;Tech Stack Playbook Facebook Group&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's digitize the world together! 🚀&lt;/p&gt;

&lt;p&gt;-- Brian&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>cloudskills</category>
      <category>devops</category>
    </item>
    <item>
      <title>How to create a sleek "baseline" animation in CSS under 15 lines of code</title>
      <author>ManuTheCoder</author>
      <pubDate>Mon, 29 Nov 2021 17:24:26 +0000</pubDate>
      <link>https://dev.to/manuthecoder/how-to-create-a-sleek-baseline-animation-in-css-under-15-lines-of-code-386o</link>
      <guid>https://dev.to/manuthecoder/how-to-create-a-sleek-baseline-animation-in-css-under-15-lines-of-code-386o</guid>
      <description>&lt;p&gt;Off late, I've been obsessed with this trend in web pages. I saw this animation in Canva. Here's how to make it: &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;Let's create some HTML. We'll need a &lt;code&gt;span&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello, World!&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h3&gt;

&lt;p&gt;Let's create some CSS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="nc"&gt;.text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;-apple-system&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;BlinkMacSystemFont&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;"Segoe UI"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Roboto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Oxygen-Sans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Ubuntu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Cantarell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;"Helvetica Neue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;baseline&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="n"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;.39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1.04&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nb"&gt;baseline&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;140%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Just for basic styles */&lt;/span&gt;
&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#37474f&lt;/span&gt;
  &lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Explained&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;&lt;/code&gt; - This is just for fancy stuff&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;display: inline-block;&lt;/code&gt; - We'll need this to animate the transform property&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@keyframes baseline&lt;/code&gt; - This is the defined animation&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;overflow:hidden&lt;/code&gt; - Hides the overflow of the header&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Great! You've successfully made a baseline CSS animation. Hit the ❤️ button if you liked this post!&lt;br&gt;
Demo: &lt;a href="https://jsfiddle.net/ManuTheCoder/xao1s6kd/68/"&gt;https://jsfiddle.net/ManuTheCoder/xao1s6kd/68/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>React Tips &amp; Tricks: Uploading a File With A Progress Bar</title>
      <author>JB </author>
      <pubDate>Mon, 29 Nov 2021 17:18:03 +0000</pubDate>
      <link>https://dev.to/jbrocher/react-tips-tricks-uploading-a-file-with-a-progress-bar-3m5p</link>
      <guid>https://dev.to/jbrocher/react-tips-tricks-uploading-a-file-with-a-progress-bar-3m5p</guid>
      <description>&lt;p&gt;Forms are often tricky to get right with React. While there are great libraries like &lt;a href="https://formik.org/"&gt;formik&lt;/a&gt; or &lt;a href="https://github.com/final-form/react-final-form"&gt;React Final Form&lt;/a&gt; to do the heavy lefting for us, handling file upload still isn't always straightforward. &lt;/p&gt;

&lt;p&gt;In today's episode of React Tips &amp;amp; Tricks, we'll see how to handle and submit file Data, and how to display a progress bar !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-basic-form"&gt;
  &lt;/a&gt;
  A basic Form
&lt;/h2&gt;

&lt;p&gt;Let's say we need to build a form to create blog posts, with an &lt;code&gt;input&lt;/code&gt; for the title, and a &lt;code&gt;textarea&lt;/code&gt; for the body.&lt;/p&gt;

&lt;p&gt;Here's a simple implementation for such a form, using &lt;a href="https://mui.com/"&gt;Material UI&lt;/a&gt; for the basic components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material/Box&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TextField&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material/TextField&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material/Button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;PostData&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FunctionComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFormValues&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// Handlers for the input&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleTitleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ChangeEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLInputElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setFormValues&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevFormValues&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prevFormValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleBodyChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ChangeEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLInputElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setFormValues&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevFormValues&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prevFormValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt;
      &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;flexDirection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;justifyContent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;alignItems&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;marginY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TextField&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleTitleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Post Title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;marginY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TextField&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleBodyChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;multiline&lt;/span&gt;
          &lt;span class="nx"&gt;minRows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Post Body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;marginY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Submit&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: I'm not using any Form libraries here, as I want to focus on file handling. In a production setting I'd really recommend using somethign like &lt;a href="https://formik.org/docs/api/formik"&gt;Formik&lt;/a&gt; to avoid re-inventing the wheel!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This works like a charm, and renders the following output: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--evn24C1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636902278730/212jbOdu_.png%3Fauto%3Dcompress%26auto%3Dcompress%2Cformat%26format%3Dwebp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--evn24C1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636902278730/212jbOdu_.png%3Fauto%3Dcompress%26auto%3Dcompress%2Cformat%26format%3Dwebp" alt="Post Form" width="387" height="430"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! But now say we also want to submit an image along with the title and the body, to serve as a cover for the article. This is a bit more complicated as we're not juste maniuplating strings anymore.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-an-image-to-the-post"&gt;
  &lt;/a&gt;
  Adding an image to the post
&lt;/h2&gt;

&lt;p&gt;In order to be able to submit an image, we need to add 3 things to our Form : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A button to upload a file from the client's computer;&lt;/li&gt;
&lt;li&gt;A way to handle the file and store it in the sate;&lt;/li&gt;
&lt;li&gt;A handler to submit our form;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's dive in ! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-the-button"&gt;
  &lt;/a&gt;
  Adding the button
&lt;/h3&gt;

&lt;p&gt;To add a file upload button to the form, we use an &lt;code&gt;input&lt;/code&gt; of type &lt;code&gt;file&lt;/code&gt;, wrapped in a &lt;code&gt;Button&lt;/code&gt; component :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="c1"&gt;//Form.tsx&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FunctionComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;marginY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextField&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleBodyChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;multiline&lt;/span&gt;
        &lt;span class="na"&gt;minRows&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Post Body"&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"body"&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"contained"&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;hidden&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt; &lt;span class="na"&gt;marginY&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Submit Post &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  )
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we leverage the fact that a label (Here rendered as a Button) is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label"&gt;programmatically&lt;/a&gt; linked to its input. Meaning, any click event on our "Button" component will be passed to the hidden input. This trick allows us to display any component we want to the user, while still benefiting fro the built-in file handling system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#controlling-the-component"&gt;
  &lt;/a&gt;
  Controlling the component
&lt;/h3&gt;

&lt;p&gt;For now our input is &lt;a href="https://reactjs.org/docs/uncontrolled-components.html"&gt;uncontrolled&lt;/a&gt;: it's not linked to any state variable, so we can't declaratively use its value when submitting the form. We need to change that : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/YO3icZKE2G8OoGHWC9/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/YO3icZKE2G8OoGHWC9/giphy.gif" alt="Give me Control" width="480" height="400"&gt;&lt;/a&gt;&lt;em&gt;I agree with Dwight!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To control our input, as with a normal input, we need to pass it a handler. This handler uses the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/File"&gt;File API&lt;/a&gt; to retrieve the fiels data we interested in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;PostData&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;File&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FunctionComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// Add an image attribute&lt;/span&gt;
  &lt;span class="c1"&gt;// to our formData&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFormValues&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="c1"&gt;// Set up the handler&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleImageChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ChangeEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLInputElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setFormValues&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevFormValues&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prevFormValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="p"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contained&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Upload File&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Bind the handler to the input */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleImageChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;hidden&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when the user uploads an image using our button, the &lt;code&gt;image&lt;/code&gt; attribute will be populated with a File object. This object has a lot of useful&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/File"&gt;properties&lt;/a&gt;, like the name of the file, and its type. We can use them to display the name file currently selected by the user inside our button. Also note that &lt;code&gt;target.files&lt;/code&gt; is an &lt;strong&gt;array&lt;/strong&gt;. Here we're only interested in the first value as we're only uploading one file, but the same method can be used with multiple files !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AmaaGz8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636904350691/JxJAKcamS.png%3Fauto%3Dcompress%26auto%3Dcompress%2Cformat%26format%3Dwebp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AmaaGz8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636904350691/JxJAKcamS.png%3Fauto%3Dcompress%26auto%3Dcompress%2Cformat%26format%3Dwebp" alt="showing the file name in a button" width="226" height="104"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#form-submission"&gt;
  &lt;/a&gt;
  Form submission
&lt;/h3&gt;

&lt;p&gt;Finally, we need a way to submit the data. For testing purposes I've created a small API in Flask you can find it in the &lt;a href="https://github.com/jbrocher/file-upload-progress-bar"&gt;repository&lt;/a&gt; for this article. It's just a single endpoint that listens for POST requests and returns a 201.&lt;/p&gt;

&lt;p&gt;Now, we can't POST our Data as json because we're want to send a file and json doesn't handle binary data. We need to send &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData"&gt;form-data&lt;/a&gt; instead. We'll use &lt;a href="https://github.com/axios/axios"&gt;axios&lt;/a&gt; to send the request, as it comes in handy to display the progress as we'll see in the next section.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;em&gt;Alternatively, we could &lt;a href="https://stackoverflow.com/questions/6150289/how-can-i-convert-an-image-into-base64-string-using-javascript"&gt;encode our image in BASE64&lt;/a&gt; and send it as a string in the json payload. Of course in that case we'd also need to decode it in the backend.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;YOUR&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ENDPOINT&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;multipart/form-data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;

  &lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Several things are happening here : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First we create a new &lt;code&gt;FormData&lt;/code&gt; object;&lt;/li&gt;
&lt;li&gt;Then we add our fomvalues to the data;&lt;/li&gt;
&lt;li&gt;Finally we post it to our endpoint using the correct content headers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#showing-progress"&gt;
  &lt;/a&gt;
  Showing progress
&lt;/h2&gt;

&lt;p&gt;Our form submisssion is working hooray ! But we're not done yet ! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/JNrWNUUNZlIhG/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/JNrWNUUNZlIhG/giphy.gif" alt="Hooray" width="500" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maybe the image our user will posting are going to be heavy, and maybe we'll do some slow processing server side too. &lt;br&gt;
As it's probably gonna take some times to process the request, we'd like to show a progress bar. &lt;/p&gt;

&lt;p&gt;That's where Axios saves the day! It comes with two built-ins callback hook to process progress data: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;onUploadProgress&lt;/code&gt;: send event during the upload phase;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onDownloadProgress&lt;/code&gt;: during the download phase;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now all we have to do is to create a new state variable to stor the progress value and monitor the requests states ! Might as well write this logic in a custom hook, as&lt;br&gt;
we'll probably want to reuse it later. (It's also easier to read). Here's how this looks :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// hooks.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useUploadForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsSuccess&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setProgress&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uploadForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;multipart/form-data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;onUploadProgress&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;progressEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;progress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;progressEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loaded&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;progressEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;setProgress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;onDownloadProgress&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;progressEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;progress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;progressEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loaded&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;progressEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setProgress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;uploadForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;progress&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I made the choice to represent the progress as evenly distributed between the uplaod and download steps, but you're free to do as you please ! It all depends on what you &lt;br&gt;
want to display to your users. I've also added &lt;code&gt;success&lt;/code&gt; boolean we can use to do some conditionnal rendering. &lt;/p&gt;

&lt;p&gt;Now all we have to do is use our custom hook to submit the form, and somehow display the progress value! I'm using &lt;a href="https://mui.com/api/linear-progress/"&gt;linear progress&lt;/a&gt; for thatfrom Material UI here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FunctionComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;uploadForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;progress&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useUploadForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:5000/post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;formValues&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;uploadForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FunctionComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;marginY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Submit&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LinearProgress&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;determinate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what it looks like : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UeTZTAZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636906969200/aYHOb-Czr.gif%3Fauto%3Dcompress%26auto%3Dformat%2Ccompress%26gif-q%3D60%26format%3Dwebm" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UeTZTAZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636906969200/aYHOb-Czr.gif%3Fauto%3Dcompress%26auto%3Dformat%2Ccompress%26gif-q%3D60%26format%3Dwebm" alt="Progress Bar Demonstration" width="852" height="675"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty neat  !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-round-"&gt;
  &lt;/a&gt;
  Bonus Round !
&lt;/h2&gt;

&lt;p&gt;I thought it would be a nice addition to show how to display a little success message after the bar reach 100%.&lt;/p&gt;

&lt;p&gt;To do so we'll use our &lt;code&gt;isSuccess&lt;/code&gt; indicator. But first well add an artificial pause after the request complete to let he user&lt;br&gt;
admire the progress bar reaching 100%. Otherwise React will merge the states updates and dipslay the success message before the progress bar has finished animating.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//hooks.ts&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uploadForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;setIsSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setProgress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now using &lt;code&gt;isSuccess&lt;/code&gt; we can conditionnaly render a success message :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;

&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isSuccess&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success.main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CheckIcon&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Typography&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Success&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Typography&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Submit&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LinearProgress&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;determinate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2GpqRre---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636908105155/WSu_9b6N_.gif%3Fauto%3Dcompress%26auto%3Dformat%2Ccompress%26gif-q%3D60%26format%3Dwebm" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2GpqRre---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636908105155/WSu_9b6N_.gif%3Fauto%3Dcompress%26auto%3Dformat%2Ccompress%26gif-q%3D60%26format%3Dwebm" alt="Success message" width="424" height="110"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading-"&gt;
  &lt;/a&gt;
  Thanks for reading !
&lt;/h2&gt;

&lt;p&gt;That's it for today, hope you learned something ! Form handling in React is not easy, as they are so many ways to do it, and so many ways it could go wrong. All the more reason&lt;br&gt;
to keep trying and learning !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hungry for more React tips ?&lt;/strong&gt; ➡️ &lt;a href="https://twitter.com/JiBRocher"&gt;Follow Me on Twitter !&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/File"&gt;File API documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/axios/axios#axios-api"&gt;Axios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mui.com/api/linear-progress/"&gt;Material Linear Progress Bar&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>react</category>
      <category>typescript</category>
    </item>
    <item>
      <title>100 Languages Speedrun: Episode 09: Ada</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Mon, 29 Nov 2021 17:14:07 +0000</pubDate>
      <link>https://dev.to/taw/100-languages-speedrun-episode-09-ada-34og</link>
      <guid>https://dev.to/taw/100-languages-speedrun-episode-09-ada-34og</guid>
      <description>&lt;p&gt;Ada is an old programming language created to enforce "safe" programming.&lt;/p&gt;

&lt;p&gt;It is best known for tiny accident when such a "safe" Ada program blew up Ariane 5 rocket in 1996, costing approximately $370m.&lt;/p&gt;

&lt;p&gt;If we take ratio of losses due to programming language issues to number of people coding in a given language, Ada would likely rank as the absolute least safe of all languages. Sure, SQL injections cost $billions, but SQL is used by 10000x as many people as Ada, so an average SQL programmer is doing a lot less damage than an average Ada programmer. If that doesn't prove that TDD is more important than "static safety", then I don't know what will.&lt;/p&gt;

&lt;p&gt;Also, as an old language Ada is fairly difficult to run on modern operating systems, so we'll be using Docker to run it.&lt;/p&gt;

&lt;p&gt;It is named after Ada Lovelace, who is often called a "first programmer", &lt;a href="https://twobithistory.org/2018/08/18/ada-lovelace-note-g.html"&gt;which is a considerable exaggeration&lt;/a&gt;, but let's leave all that historical stuff behind and explore the language itself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h3&gt;

&lt;p&gt;Let's start with &lt;code&gt;hello_world.adb&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ada"&gt;&lt;code&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="nn"&gt;Ada&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;Hello_World&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;
  &lt;span class="n"&gt;Ada&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text_IO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put_Line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="n"&gt;Hello_World&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I couldn't find any compiler running on OSX, we'll run it with Docker:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker run --rm -i -t -v $(pwd):/source nacyot/ada-gnat:apt gnatmake hello_world.adb
gcc-4.6 -c hello_world.adb
gnatbind -x hello_world.ali
gnatlink hello_world.ali
$ docker run --rm -i -t -v $(pwd):/source nacyot/ada-gnat:apt ./hello_world
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One thing that's already notable is &lt;code&gt;end Hello_World&lt;/code&gt;. Yes, Ada, for "safety" reasons, requires every &lt;code&gt;end&lt;/code&gt; to specify what it's ending. I know it sounds like a joke, but people who created Ada were absolutely serious about it. In some cases you're allowed to skip saying what you're ending, but we're trying to write Ada the way it was meant to be written.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fibonacci"&gt;
  &lt;/a&gt;
  Fibonacci
&lt;/h3&gt;

&lt;p&gt;Here's Fibonacci in Ada:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ada"&gt;&lt;code&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="nn"&gt;Ada&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;Fibonacci&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Integer&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;
  &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="n"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;begin&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="k"&gt;loop&lt;/span&gt;
    &lt;span class="n"&gt;Ada&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text_IO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put_Line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="n"&gt;Fibonacci&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's run it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker run --rm -i -t -v $(pwd):/source nacyot/ada-gnat:apt gnatmake fibonacci.adb
gcc-4.6 -c fibonacci.adb
gnatbind -x fibonacci.ali
gnatlink fibonacci.ali
$ docker run --rm -i -t -v $(pwd):/source nacyot/ada-gnat:apt ./fibonacci
 1
 1
 2
 3
 5
 8
 13
 21
 34
 55
 89
 144
 233
 377
 610
 987
 1597
 2584
 4181
 6765
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a lot to unpack here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;where's those extra spaces coming from? Ada thinks it's unsafe to convert &lt;code&gt;7&lt;/code&gt; to &lt;code&gt;"7"&lt;/code&gt;. In some weird idea of consistently since &lt;code&gt;-7&lt;/code&gt; converts to &lt;code&gt;-7&lt;/code&gt;, 7 converts to &lt;code&gt;7&lt;/code&gt; with extra space where plus/minus sign would go.&lt;/li&gt;
&lt;li&gt;at least Ada has loops over ranges like &lt;code&gt;for I in 1..20 loop&lt;/code&gt;, it's baffling people make languages even today which don't have that&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Integer'Image&lt;/code&gt; syntax for function in a package looks really weird, especially since we also have more familiar &lt;code&gt;.&lt;/code&gt; on the same line.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;

&lt;p&gt;And finally we get to the FizzBuzz, and it's surprisingly convoluted in Ada. We need to strip that extra space. Well, surely Ada would have strings in its standard library, right? You wish. It its drive for "safety", it provides fixed-width strings only.&lt;/p&gt;

&lt;p&gt;So you can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ada"&gt;&lt;code&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s2"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s2"&gt;"two"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But not this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ada"&gt;&lt;code&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s2"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s2"&gt;"three"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or even this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ada"&gt;&lt;code&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s2"&gt;"three"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s2"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nope, it's not maximum string length (like with SQL &lt;code&gt;varchar&lt;/code&gt; columns), it must literally be exactly the same length.&lt;/p&gt;

&lt;p&gt;Fortunately while local variables are crazy like that, function arguments aren't so we're finally able to write a FizzBuzz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ada"&gt;&lt;code&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="nn"&gt;Ada&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;FizzBuzz&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;LStrip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt;
  &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;First&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;' '&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;First&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Last&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="n"&gt;LStrip&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;begin&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="k"&gt;loop&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="ow"&gt;mod&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="ow"&gt;mod&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
      &lt;span class="n"&gt;Ada&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text_IO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put_Line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"FizzBuzz"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="ow"&gt;mod&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
      &lt;span class="n"&gt;Ada&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text_IO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put_Line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Fizz"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="ow"&gt;mod&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
      &lt;span class="n"&gt;Ada&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text_IO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put_Line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Buzz"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;Ada&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text_IO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put_Line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LStrip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="n"&gt;FizzBuzz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'll skip all the minor weirdness like &lt;code&gt;=&lt;/code&gt; for equality check, &lt;code&gt;()&lt;/code&gt; for substring, indexing starting from 1, &lt;code&gt;S'First&lt;/code&gt; and &lt;code&gt;S'Last&lt;/code&gt;, and so on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#should-you-use-ada"&gt;
  &lt;/a&gt;
  Should you use Ada?
&lt;/h3&gt;

&lt;p&gt;Only if you're trying to sabotage Blue Origin. Otherwise, no.&lt;/p&gt;

&lt;p&gt;If you're really exceedingly safety-obsessed, there's Rust for you.&lt;/p&gt;

&lt;p&gt;Otherwise, just about any modern properly memory-managed language (so all except C and C++) with decent TDD will do just fine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-09-ada"&gt;Code for the Ada episode is available here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>ada</category>
      <category>programming</category>
    </item>
    <item>
      <title>CSS Maker: Wizards Toolkit utility</title>
      <author>Alec</author>
      <pubDate>Mon, 29 Nov 2021 17:10:23 +0000</pubDate>
      <link>https://dev.to/alecbsherman/css-maker-wizards-toolkit-utility-2f9e</link>
      <guid>https://dev.to/alecbsherman/css-maker-wizards-toolkit-utility-2f9e</guid>
      <description>&lt;p&gt;Here is a free utility so you can quickly modify existing color themes and easily create brand new color themes using CSS.&lt;/p&gt;

&lt;p&gt;Originally built for Wizards Toolkit and MaterializeCSS, this can easily be modified for &lt;em&gt;&lt;strong&gt;any&lt;/strong&gt;&lt;/em&gt; HTML/CSS library.&lt;/p&gt;

&lt;p&gt;With the use of JScolor and some fancy JavaScript you can see your color choices change the page in real-time.  The HTML page is built to show all the major elements we use of MaterializeCSS.&lt;/p&gt;

&lt;p&gt;For the video/visual version of this information see:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/t4o8vOx_j80"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The basic concept is your library will have a core CSS file.  For us that’s materialize.css.  Using variables with Cascading Style Sheets is extremely powerful.  We want to override their default colors in a way that affects all the many HTML elements.&lt;/p&gt;

&lt;p&gt;So we created a wtkGlobal.css file with the global overrides.  We wanted both a Light theme and a Dark theme option so we also created a wtkLight.css and wtkDark.css.&lt;/p&gt;

&lt;p&gt;Next we wanted to overlay different color themes.  So we created wtk{SomeColorName}.css files which are nothing but a set of CSS variables.  By listing them in this order in your HTML it properly sets up everything.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;materialize.min.css (or whatever CSS framework you are using)&lt;/li&gt;
&lt;li&gt;wtk{YourColor}.css&lt;/li&gt;
&lt;li&gt;wtkLight.css or wtkDark.css&lt;/li&gt;
&lt;li&gt;wtkGlobal.css&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So this utility allows you to pick any of the CSS files in the folder and see how the page will look.  This requires the CSS file to start with 'wtk' and excludes our wtkLight, wtkDark and wtkGlobal files.  You can then modify each of the main color types and see immediately what the effect is in both Light and Dark mode.  Once you have designed a color theme you like you can save it.&lt;/p&gt;

&lt;p&gt;I also created a page on the web where you can build color themes and have the CSS shown in a browser tab for you to "Save As".  The below link provides you access to this page plus all the source code and all our WTK CSS files.&lt;/p&gt;

&lt;p&gt;For full usage this utility requires PHP (but to use the online website does not).  With that you’ll be able to easily modify it for other HTML/CSS libraries like Bootstrap or whatever you’re using.  Of course any good coder can easily modify this code to work with other languages and still benefit from the JScolor and JavaScript coding for testing and making new CSS color templates.&lt;/p&gt;

&lt;p&gt;Download the free utility at:&lt;br&gt;
&lt;a href="https://wizbits.me/CSSmaker"&gt;https://wizbits.me/CSSmaker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That page will also send you a link where you can generate CSS color themes without needing PHP.&lt;/p&gt;

&lt;p&gt;Brought to you by Wizards Toolkit the PHP, SQL and JavaScript low-code development library.&lt;/p&gt;

&lt;p&gt;Wizards Toolkit&lt;br&gt;
&lt;a href="https://wizardstoolkit.com"&gt;https://wizardstoolkit.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MaterializeCSS&lt;br&gt;
&lt;a href="https://materializecss.com"&gt;https://materializecss.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JScolor&lt;br&gt;
&lt;a href="https://jscolor.com"&gt;https://jscolor.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>php</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
