<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>👾 Mutation testing on Go</title>
      <author>Guilherme Guitte</author>
      <pubDate>Mon, 02 Aug 2021 15:29:44 +0000</pubDate>
      <link>https://dev.to/guilhermeguitte/mutation-testing-on-go-1lbf</link>
      <guid>https://dev.to/guilhermeguitte/mutation-testing-on-go-1lbf</guid>
      <description>&lt;p&gt;One of the Developer's goals is to improve the healthiness of codebases. Fortunately, automated testing is a widely known practice to decrease production cycles and receive accelerated feedback. But, how we can check if our test suite are healthy? One of the techniques on automated testing to identify weak spots of dead/untested code is &lt;strong&gt;Mutation Testing&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-mutation-testing"&gt;
  &lt;/a&gt;
  What is Mutation Testing? 👾
&lt;/h2&gt;

&lt;p&gt;Mutation testing or known as Mutation Analysis, involves to modifies an application in small ways programmatically and running against your test suite looking for weak spots of your code that has not test for a specific mutation. &lt;/p&gt;

&lt;p&gt;Fundamental concepts involved over Mutation Testing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Mutants&lt;/strong&gt;: a modified version that will test against a testing suite.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Mutation Score&lt;/strong&gt;: percentage of &lt;strong&gt;passed mutation/total mutation created total&lt;/strong&gt;. 
0 means all mutations created are &lt;em&gt;alive&lt;/em&gt; 👾, so the tests are probably has not good coverage.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mutation operators/mutators&lt;/strong&gt;: A mutator is an operation applied to the original code. Many types of mutators can be applied. It is important to check which mutators are available for your mutation tool.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Equivalent Mutations&lt;/strong&gt;: Are false-positives mutants. Sometimes, it will found a mutated version that has no practical changes. Often, they can mean a dead/useless code in the application.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-mutation-testing"&gt;
  &lt;/a&gt;
  When to use Mutation Testing?
&lt;/h2&gt;

&lt;p&gt;It is an exciting alternative to the code coverage we see over different open source projects. One caveat about mutation testing that, for larger codebases, mutation testing can consume a significant amount of resources. So it can be decide to run it periodically through the codebase, not each push to your git remote repository.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#mutation-testing-in-go"&gt;
  &lt;/a&gt;
  Mutation Testing in Go
&lt;/h2&gt;

&lt;p&gt;In practice, how mutation testing works? Let's see the follow code sample that will be the production code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GreetingsByLocale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;localestring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="n"&gt;greetings&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;resolveGreetings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;greetings&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Sorry, we didn't identified you"&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;greetings&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;resolveGreetings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;localestring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;iflocale&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"en"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello"&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="n"&gt;iflocale&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"pt"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Olá"&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example above, implements a very straightforward &lt;code&gt;GreetingByLocale&lt;/code&gt; function, that returns the appropriated greetings by locale. Example: &lt;code&gt;en&lt;/code&gt; , &lt;code&gt;pt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To running a mutation testing in Go, we have to install a mutation testing tool. For this article I've choose &lt;a href="https://github.com/zimmski/go-mutesting"&gt;go-mutesting&lt;/a&gt; based what I was looking for at &lt;a href="https://github.com/avelino/awesome-go"&gt;awesome-go&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-install"&gt;
  &lt;/a&gt;
  How to install
&lt;/h2&gt;

&lt;p&gt;Running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go get &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; github.com/zimmski/go-mutesting/...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will be ready to run the follow command without problem normally. If you have any problems, check it out &lt;a href="https://github.com/zimmski/go-mutesting"&gt;documentation&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go-mutesting main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command above, will produce:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nt"&gt;--------&lt;/span&gt; main.go   2021-06-06 14:33:00.000000000 +0200
+++ /var/folders/y0/z16t6n116rxgq599drwq_z31r3w4v8/T/go-mutesting-406451808/basics-ut/main.go.0 2021-06-06 14:41:17.000000000 +0200
@@ &lt;span class="nt"&gt;-5&lt;/span&gt;,7 +5,7 @@
        greetings :&lt;span class="o"&gt;=&lt;/span&gt; resolveGreetings&lt;span class="o"&gt;(&lt;/span&gt;locale&lt;span class="o"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if &lt;/span&gt;greetings &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
-               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Sorry, we didn't identified you"&lt;/span&gt;
+
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return &lt;/span&gt;greetings
@@ &lt;span class="nt"&gt;-21&lt;/span&gt;,4 +21,4 @@
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
-&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="se"&gt;\ &lt;/span&gt;No newline at end of file
+&lt;span class="o"&gt;}&lt;/span&gt;

...

FAIL &lt;span class="s2"&gt;"/var/folders/y0/z16t6n116rxgq599drwq_z31r3w4v8/T/go-mutesting-406451808/basics-ut/main.go.2"&lt;/span&gt; with checksum 7543b5d5e97c3a66dec555fb1c908957
The mutation score is 0.000000 &lt;span class="o"&gt;(&lt;/span&gt;0 passed, 3 failed, 0 duplicated, 0 skipped, total is 3&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#what-information-you-should-take-care-of"&gt;
  &lt;/a&gt;
  What information you should take care of?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Mutation Score&lt;/strong&gt;: Percentage over &lt;strong&gt;passed mutation / mutation created total.&lt;/strong&gt;  0 means all mutation created are &lt;strong&gt;alive,&lt;/strong&gt; so the tests are probably not covering the whole usage of this package.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mutation&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;greetings&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Sorry, we didn't identified you"&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of mutation testing explains which it was modified that make the &lt;strong&gt;testing suite failed&lt;/strong&gt;. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#fixing-mutations"&gt;
  &lt;/a&gt;
  Fixing Mutations
&lt;/h2&gt;

&lt;p&gt;You need to created the appropriated tests that covers the mutation. For it, you can implement something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestGreetingsByLocaleByDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;greetings&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;GreetingsByLocale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;greetings&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;"Sorry, we didn't identified you"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"greeting() = %v; want 'Sorry, we didn't identified you'"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;greetings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running again &lt;code&gt;go-mutesting&lt;/code&gt;, you should see this output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go-mutesting main.go

PASS &lt;span class="s2"&gt;"/var/folders/y0/z16t6n116rxgq599drwq_z31r3w4v8/T/go-mutesting-610805264/basics-ut/main.go.0"&lt;/span&gt; with checksum 73ab3954dddfcf60d062bf280b49e996
PASS &lt;span class="s2"&gt;"/var/folders/y0/z16t6n116rxgq599drwq_z31r3w4v8/T/go-mutesting-610805264/basics-ut/main.go.1"&lt;/span&gt; with checksum 0a29bb0da18ff5c339c726f678c8f4b9
PASS &lt;span class="s2"&gt;"/var/folders/y0/z16t6n116rxgq599drwq_z31r3w4v8/T/go-mutesting-610805264/basics-ut/main.go.2"&lt;/span&gt; with checksum 7543b5d5e97c3a66dec555fb1c908957
The mutation score is 1.000000 &lt;span class="o"&gt;(&lt;/span&gt;3 passed, 0 failed, 0 duplicated, 0 skipped, total is 3&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perfect! We fix all mutations found.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#going-further"&gt;
  &lt;/a&gt;
  Going further
&lt;/h2&gt;

&lt;p&gt;Mutation testing is very powerful technique to spot weak coverage points of your test suite. Some links you can found useful:&lt;/p&gt;

&lt;p&gt;Explanation about mutation testing: &lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Mutation_testing"&gt;https://en.wikipedia.org/wiki/Mutation_testing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mutation testing tools by language:&lt;br&gt;
&lt;a href="https://github.com/theofidry/awesome-mutation-testing"&gt;https://github.com/theofidry/awesome-mutation-testing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mutation testing tool for Go:&lt;br&gt;
&lt;a href="https://github.com/zimmski/go-mutesting"&gt;https://github.com/zimmski/go-mutesting&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>testdev</category>
      <category>testing</category>
    </item>
    <item>
      <title>Burnout: The Price of Passion</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 02 Aug 2021 15:05:37 +0000</pubDate>
      <link>https://dev.to/codesphere/burnout-the-price-of-passion-2kok</link>
      <guid>https://dev.to/codesphere/burnout-the-price-of-passion-2kok</guid>
      <description>&lt;p&gt;Developer burnout is real and it's more common than you might think.&lt;/p&gt;

&lt;p&gt;We are all aware of imposter syndrome and the ever-present "I have no idea what I'm doing" voice that plagues new and experienced developers alike, but burning out can be a little more insidious. While you might have heard stories of overworked and unhappy employees being worked into an early retirement, what we don't prepare for is how much more likely you are to burn out when you are enjoying your work…&lt;/p&gt;

&lt;p&gt;That's right, even when you finally find that project you have been waiting for, that once in a lifetime dream job, you still have to know when enough is enough when to shut your laptop and take a break.&lt;/p&gt;

&lt;p&gt;Just ask the animators of one of your favorite childhood films about toys that come to life…they were so excited to build their vision, many of them were overworked, burned out, developed physical and mental stress related disorders that almost bought the whole show crashing down.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l2P6ozrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lodcz2v1h4la26d7yj7o.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l2P6ozrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lodcz2v1h4la26d7yj7o.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's take a step back and take a look at what developer burnout is.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-burnout"&gt;
  &lt;/a&gt;
  What is burnout?
&lt;/h3&gt;

&lt;p&gt;In short, it is a mental and physical collapse of a developer caused by stress or overworking. Unlike a bad day, which can happen fairly often, burnout can last for weeks at a time and steal a developer's passion for coding altogether.&lt;/p&gt;

&lt;p&gt;The world health organization officially recognizes the workplace phenomenon and defines it as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Burnout is a syndrome conceptualized as resulting from chronic workplace stress that has not been successfully managed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simple right? If you work too much you'll eventually break down..well, not exactly. Everyone suffers from and responds to stress differently and the cause of a burnout can differ from person to person. Some developers might indeed struggle with high workloads, while others may not be able to work with insufficient processes or unclear goals, so it is important to recognize the symptoms of a burnout and to know your limits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#symptoms-of%C2%A0burnout"&gt;
  &lt;/a&gt;
  Symptoms of burnout
&lt;/h3&gt;

&lt;p&gt;Knowing the symptoms of burnout can help you avoid the whole thing. You might also spot some of them in your co-workers, guide them into a healthier work process, save them from an intense workplace breakdown, develop a lifelong friendship and go on to build and deploy an app in Codesphere together that changes the lives of millions of people. You might…&lt;/p&gt;

&lt;p&gt;Look out for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lack of energy&lt;/li&gt;
&lt;li&gt;Physical exhaustion and fatigue&lt;/li&gt;
&lt;li&gt;A loss of interest or passion in your work&lt;/li&gt;
&lt;li&gt;Cynicism toward work-related topics&lt;/li&gt;
&lt;li&gt;No sense of accomplishment&lt;/li&gt;
&lt;li&gt;Sleeplessness&lt;/li&gt;
&lt;li&gt;Frequent headaches&lt;/li&gt;
&lt;li&gt;Feelings of isolations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They might seem obvious but in a fast-paced work environment with a product to build and ideas flowing, it takes an experienced eye to step back and take a look at how much of a price you're paying for your passion. You have to know how to pick yourself back up from the ground.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zmA3YjeG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5x5j3m0agb7ton1j65ag.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zmA3YjeG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5x5j3m0agb7ton1j65ag.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-avoid-a%C2%A0burnout"&gt;
  &lt;/a&gt;
  How to avoid a burnout
&lt;/h2&gt;

&lt;p&gt;Knowing what a burnout is and how to recognize it is a great start, but I hear you asking "how do I stop it from happening?". Well, there are a few tips you can follow if you want to stay on top of your game at both work and home.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-diet"&gt;
  &lt;/a&gt;
  1. Diet
&lt;/h3&gt;

&lt;p&gt;Some of you may be rolling your eyes at another healthy eating article that forces goji berries into your life but look, every civilization in human history has recognized a simple truth - You Are What You Eat!&lt;br&gt;
Now, I don't have a link to a pdf of a dietary plan for you to download and stick to your fridge, but eating smart is the way to go. Developing is a lot of sitting down. Snacks are a great way to get an energy boost, but make sure you're eating right where you can at work. Take-outs and beers might be best used to celebrate the launch of a new feature instead of to take your mind off that syntax error you find…&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-take%C2%A0breaks"&gt;
  &lt;/a&gt;
  2. Take breaks
&lt;/h3&gt;

&lt;p&gt;No brainer, if you sit in front of your work station for 9 hours you're going to pay for it sooner or later. Take breaks often to get up and walk around. Avoiding the obvious health risks of sitting down for a prolonged time, like deep vein thrombosis or heart disease, your brain needs space to process information. Five minutes outside can make a world of difference.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-socialize"&gt;
  &lt;/a&gt;
  3. Socialize
&lt;/h3&gt;

&lt;p&gt;The more perceptive of you would have read that isolation is a symptom to look out for when it comes to burnouts and what better way to combat being alone than not being alone. This doesn't just mean team events or getting smashed on a Friday after work. Time with your team talking about anything other than work can be a great way to strengthen the workflow. Time with family and friends, away from work, can help you build that all-important work/life balance and return to work ready to achieve the healthier, zen-like state of development that we here at Codesphere strive for.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-avoid-carpal-tunnel%C2%A0syndrome"&gt;
  &lt;/a&gt;
  4. Avoid Carpal Tunnel syndrome
&lt;/h3&gt;

&lt;p&gt;It is very common and it is very unpleasant. Make sure you sit in the correct position at your desk and minimize the risk; numb and tingly feelings in your hand can be the sign of the dreaded Carpal Tunnel affliction. It's exactly this kind of extra stress we are trying to avoid!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0yoHYe4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ec5adcopqn0onsw6kd0g.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0yoHYe4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ec5adcopqn0onsw6kd0g.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So there are a few ways you can keep yourself away from burning out. But let's say you didn't read our advice very well, maybe you didn't like the diet advice so you closed the tab and you've since been the victim of burnout and now you're back to find some sage advice on how to recover? Well, let's take a look at how one might get back into a healthy state of mind…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-recover-from%C2%A0burnout"&gt;
  &lt;/a&gt;
  How to recover from burnout
&lt;/h2&gt;

&lt;p&gt;Start slow. Don't make the same mistakes that got you into this state in the first place. If you were taking a 5-minute break every 45 minutes, take a break every 15 minutes now.&lt;/p&gt;

&lt;p&gt;Double down on your emotional detachment from work life, if you want to ease yourself back into developing then focus on the things you do when you're not developing. Be unreachable when you're not in the office or start hobbies that keep you busy. Too busy to get sucked back into solving that one last problem, and busy enough for your mind to relax without throwing it straight back into the deep end.&lt;/p&gt;

&lt;p&gt;Communicate with your team and people around you, let them know what's going on so people can hold you accountable when you start to slip back into that old familiar routine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z5UKeLyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3no8acv7bvqhmcmmmvo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z5UKeLyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3no8acv7bvqhmcmmmvo.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#work-smart"&gt;
  &lt;/a&gt;
  Work smart
&lt;/h3&gt;

&lt;p&gt;Developer Burnout can be an awful experience, leaving you with no desire to string two lines of code together and lose your love to code, but it doesn't have to be your fate. Listen to your body and look out for your colleagues. Building what we love is a blessing we all share in the developing world, but it comes at a price. Knowing that price and how best to pay it is the key to a happy and healthy work-life.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-tip"&gt;
  &lt;/a&gt;
  Bonus Tip!
&lt;/h3&gt;

&lt;p&gt;Another helpful way to avoid burnout is not to spend 5 hours attempting to deploy your next web app. By combining a Web IDE with the cloud, &lt;a href="https://link.codesphere.com/BZ"&gt;Codesphere&lt;/a&gt; streamlines the deployment process, so you can spend less time configuring, and more time doing what your body and mind need.&lt;/p&gt;




&lt;p&gt;Thanks for reading! What advice do you have when you feel burnout?&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Learing ruby - day 3</title>
      <author>aderayevans</author>
      <pubDate>Mon, 02 Aug 2021 14:53:44 +0000</pubDate>
      <link>https://dev.to/aderayevans/learing-ruby-day-3-30gk</link>
      <guid>https://dev.to/aderayevans/learing-ruby-day-3-30gk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#table-of-contents"&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#take-user-input"&gt;Take user input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#convert"&gt;Convert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pass-multiple-arguments"&gt;Pass multiple arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#default-arguments"&gt;Default arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keyword-arguments"&gt;Keyword arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#block"&gt;Block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#proc"&gt;Proc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hey guys, welcome to my blog recording my ruby self-taught process&lt;/p&gt;

&lt;p&gt;I decided to learn this amazing language while I was trying to solving some ruby challenges to get my tenth badge in HackerRank&lt;/p&gt;

&lt;p&gt;At the first two days, We have learned about some common collections such as array and hash in ruby. We have also gotten to know with string.&lt;/p&gt;

&lt;p&gt;Today, we will learn more about methods and arguments &lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#take-user-input"&gt;
  &lt;/a&gt;
  Take user input
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;

&lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="s2"&gt;"hi\n"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I typed &lt;code&gt;hi&lt;/code&gt; and hit Enter&lt;/p&gt;

&lt;p&gt;As you can see, it also gets the NEWLINE character, which we don't want to.&lt;/p&gt;

&lt;p&gt;So use the chomp method we have learned before to delete that last character at every &lt;code&gt;gets&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;One more problem here&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gets&lt;/code&gt; just gets input as raw type, we need to convert it to other type to use it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt;

&lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We converted the input to integer, if you type a non-digit character, &lt;code&gt;i&lt;/code&gt; will be &lt;code&gt;0&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#convert"&gt;
  &lt;/a&gt;
  Convert
&lt;/h2&gt;

&lt;p&gt;Convert variable types in Ruby is pretty simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# String to integer&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt;
&lt;span class="c1"&gt;# String to float&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_f&lt;/span&gt;
&lt;span class="c1"&gt;# Anything to string&lt;/span&gt;
&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_str&lt;/span&gt;

&lt;span class="c1"&gt;# or if you want to catch error unless user type digit&lt;/span&gt;
&lt;span class="c1"&gt;# String to integer&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# String to float&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pass-multiple-arguments"&gt;
  &lt;/a&gt;
  Pass multiple arguments
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
    &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;str&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"the"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"end"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;*rest&lt;/code&gt; is a array of all arguments passed&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#default-arguments"&gt;
  &lt;/a&gt;
  Default arguments
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;increase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;increase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;increase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#keyword-arguments"&gt;
  &lt;/a&gt;
  Keyword arguments
&lt;/h2&gt;

&lt;p&gt;Convert Temperature program using keyword arguments input_scale and output_scale as default arguments&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;celsius_kelvin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;273.15&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;kelvin_celsius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;273.15&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;celsius_fahrenheit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fahrenheit_celsius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;kelvin_fahrenheit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;273.15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fahrenheit_kelvin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;273.15&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert_temp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;input_scale: &lt;/span&gt;&lt;span class="s1"&gt;'celsius'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;output_scale: &lt;/span&gt;&lt;span class="s1"&gt;'celsius'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;input_scale&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;output_scale&lt;/span&gt;
    &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_scale&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"_"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;output_scale&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"(&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;convert_temp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;input_scale: &lt;/span&gt;&lt;span class="s1"&gt;'kelvin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;output_scale: &lt;/span&gt;&lt;span class="s1"&gt;'celsius'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;convert_temp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;393&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;input_scale: &lt;/span&gt;&lt;span class="s1"&gt;'kelvin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;output_scale: &lt;/span&gt;&lt;span class="s1"&gt;'celsius'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;convert_temp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;input_scale: &lt;/span&gt;&lt;span class="s1"&gt;'fahrenheit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;output_scale: &lt;/span&gt;&lt;span class="s1"&gt;'celsius'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;convert_temp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;333&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;input_scale: &lt;/span&gt;&lt;span class="s1"&gt;'fahrenheit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;output_scale: &lt;/span&gt;&lt;span class="s1"&gt;'kelvin'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="m"&gt;-273&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;
&lt;span class="m"&gt;119&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;85000000000002&lt;/span&gt;
&lt;span class="m"&gt;204&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;44444444444443&lt;/span&gt;
&lt;span class="m"&gt;440&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;3722222222222&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could also set a hash parameter &lt;code&gt;**&lt;/code&gt; that helps user pass a key argument&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;str: &lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;num: &lt;/span&gt;&lt;span class="mi"&gt;424242&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each_pair&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;key: &lt;/span&gt;&lt;span class="s2"&gt;"val"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;key2: &lt;/span&gt;&lt;span class="s2"&gt;"val2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="nb"&gt;key&lt;/span&gt;
val
key2
val2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#block"&gt;
  &lt;/a&gt;
  Block
&lt;/h2&gt;

&lt;p&gt;Blocks are nameless methods that can be passed to another method as a parameter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call_block&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Start"&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"End"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; 

&lt;span class="c1"&gt;# Pass a block {puts "I'm in"} to call_block method&lt;/span&gt;
&lt;span class="c1"&gt;# We can pass with do..end&lt;/span&gt;
&lt;span class="n"&gt;call_block&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; 
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"I'm in"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# or&lt;/span&gt;
&lt;span class="n"&gt;call_block&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"I'm in"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Start
I&lt;span class="s1"&gt;'m in
End
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also pass a block to a method that takes parameters&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Start"&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"End"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; 

&lt;span class="n"&gt;call_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Start
&lt;span class="nt"&gt;-11&lt;/span&gt;
End
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#proc"&gt;
  &lt;/a&gt;
  Proc
&lt;/h2&gt;

&lt;p&gt;"&lt;em&gt;A Proc object is an encapsulation of a block of code, which can be stored in a local variable, passed to a method or another Proc, and can be called.&lt;/em&gt;"&lt;/p&gt;

&lt;p&gt;If Block is a nameless method that can be passed to another method right after the method name&lt;/p&gt;

&lt;p&gt;Proc is now the object that holding block, we can pass it as a normal variable to another method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square_of_sum&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proc_sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proc_square&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;proc_sum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;proc_square&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;proc_sum_arr&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;proc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;proc_square_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;proc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;square_of_sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;proc_sum_arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proc_square_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If Block codes are called by &lt;code&gt;yield&lt;/code&gt; key word&lt;/p&gt;

&lt;p&gt;Proc codes are called by call() method&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Today we have learned how to take user input, convert variables in ruby&lt;/p&gt;

&lt;p&gt;We also have learned some advanced ways to create methods and pass arguments&lt;/p&gt;

&lt;p&gt;Knowledged a closure object called Proc, and a nameless method called Block&lt;/p&gt;




&lt;p&gt;I'd like to thank HackerRank for giving me a chance to acknowledge and be interesting in this cool language&lt;/p&gt;

&lt;p&gt;If guys found Ruby is fascinating, please come to the link below and solve some Ruby challenges with me &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.hackerrank.com/domains/ruby"&gt;https://www.hackerrank.com/domains/ruby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any question or suggestion, please let me know at the comment section below.&lt;/p&gt;

&lt;p&gt;OK I'm going to wrap this up here&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Thanks for reading my blog&lt;/code&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Build a React App with Authorization and Authentication</title>
      <author>Ali Spittel</author>
      <pubDate>Mon, 02 Aug 2021 14:42:40 +0000</pubDate>
      <link>https://dev.to/aspittel/build-a-react-app-with-authorization-and-authentication-1mha</link>
      <guid>https://dev.to/aspittel/build-a-react-app-with-authorization-and-authentication-1mha</guid>
      <description>&lt;p&gt;In this tutorial, we'll be talking about authorization and how to implement it with AWS Amplify's DataStore. First, let's get on the same page with what authorization and authentication are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authorization&lt;/strong&gt; - Different users have different actions that they can perform. &lt;strong&gt;Authentication&lt;/strong&gt; - making sure someone is who they say they are, for example through making them enter a password.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/U5Ls-RspRv8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This tutorial will be bypassing teaching React and AWS Amplify - check out &lt;a href="https://welearncode.com/beginners-guide-react/"&gt;this React tutorial&lt;/a&gt; and &lt;a href="https://welearncode.com/intro-amplify-admin-ui/"&gt;this Amplify Admin UI tutorial&lt;/a&gt; if you're new to either. You'll also need to know &lt;a href="https://reactrouter.com/"&gt;React Router&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I created a repo with some &lt;a href="https://github.com/aspittel/react-authorization"&gt;starter code&lt;/a&gt; in order to get to the relevant pieces of the tutorial. Go ahead and clone it down if you want to follow along. Run &lt;code&gt;npm i&lt;/code&gt; within the cloned directory to get all the needed packages installed.&lt;/p&gt;

&lt;p&gt;We'll be building a blogging platform with a frontend and backend authentication system with admin roles and certain actions restricted to content's creators. We'll first have blogs -- similar to Medium publications or Blogger blogs. Only admin users will be able to create new blogs, though anybody can view a list of the blogs. Blogs will have posts within them that anyone can view, but only the person who created the blog will be able to update or delete blogs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-blog-using-the-admin-ui"&gt;
  &lt;/a&gt;
  Create a Blog using the Admin UI
&lt;/h2&gt;

&lt;p&gt;First, we'll need to create the data models for our app. You can go to &lt;a href="https://sandbox.amplifyapp.com/getting-started"&gt;the Amplify Sandbox&lt;/a&gt; in order to get started. We'll create two models, a Blog and a Post. The Blog will be a publication that has a collection of Posts attached to it. The Blog will just have a name, and then Blog will have a title, content, and owner. All fields will be strings, I also made name and title required fields. There will also be a 1:n relationship between the two models.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7uOYq3h8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/auth-react/medium-models.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7uOYq3h8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/auth-react/medium-models.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, go ahead and deploy your data models by following the guided process the Admin UI offers. Once it deploys, go into the Admin UI and create a few blogs and a few posts.&lt;/p&gt;

&lt;p&gt;Then, we'll add authentication. In the Admin UI, click on "Authentication" tab and then configure auth. I deployed with the default options.&lt;/p&gt;

&lt;p&gt;Once your authentication is deployed, add in authorization rules. First, click on the Blog model and on the right-hand panel, configure authorization. Uncheck create, update, and delete from under "Anyone authenticated with API Key can..." -- we'll allow anyone to view a blog but only admins to mutate them. Then, click the add an authorization rule dropdown. From here click "Create new" under "Specific Group", and name your group "admin". Allow admin users to perform all actions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9X0o8UB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/auth-react/blog-auth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9X0o8UB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/auth-react/blog-auth.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we'll configure authorization for posts. Select that model, and again change the permissions for "Anyone authenticated with API Key" to "Read" a post. Then toggle the "Enable owner authorization" to the on state. Under "Deny other authenticated users to perform these operations on an owner’s record:" select "Update" and "Delete" -- we want anyone to be able to read a post, but only the post's owner should be able to mutate existing posts. We also need to allow someone to be able to create posts! Under "add authorization rule" and then "Any signed-in users authenticated using" and then choose "Cognito".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EXOOi75i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/auth-react/post-auth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EXOOi75i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/auth-react/post-auth.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, go to the "User management" page and create a user. Make sure to use the same email that you used for the "owner" field when you created posts before! Also, add a few to an "admin" page.&lt;/p&gt;

&lt;p&gt;Back in your code's directory, run Amplify pull with your app id -- you can find this command under "local setup instructions" in the Admin UI. If you're not using the cloned repository from above, install the Amplify JavaScript and React libraries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm i aws-amplify @aws-amplify/ui-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll also need to configure Amplify in your &lt;code&gt;index.js&lt;/code&gt; file so that your frontend is linked to your Amplify configuration. You'll also need to configure multi-auth within this step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Amplify, { AuthModeStrategyType } from 'aws-amplify'
import awsconfig from './aws-exports'

Amplify.configure({
  ...awsconfig,
  DataStore: {
    authModeStrategyType: AuthModeStrategyType.MULTI_AUTH
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implement-authentication"&gt;
  &lt;/a&gt;
  Implement Authentication
&lt;/h2&gt;

&lt;p&gt;First, we'll need to implement authentication for our site so that users can log in and different accounts can perform different actions. I created a &lt;code&gt;&amp;lt;SignIn&amp;gt;&lt;/code&gt; component with a route to it. Then, add the &lt;code&gt;withAuthenticator&lt;/code&gt; higher order component to implement a user authentication flow!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// SignIn.js

import { withAuthenticator } from '@aws-amplify/ui-react'
import React from 'react'

import { Link } from 'react-router-dom'

function SignIn () {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;
      &amp;lt;Link to='/'&amp;gt;home&amp;lt;/Link&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

+ export default withAuthenticator(SignIn)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'll load all the blogs on to the home page of the app. I'm starting with the following code that will implement different routes for my app. If you're using the cloned boilerplate, you'll already have this in your code. You'll also want to create React components for &lt;code&gt;BlogPage&lt;/code&gt;, &lt;code&gt;PostPage&lt;/code&gt;, and &lt;code&gt;BlogCreate&lt;/code&gt; -- these can just be empty components for now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import './App.css'

import { Auth } from 'aws-amplify'
import { DataStore } from '@aws-amplify/datastore'
import { useEffect, useState } from 'react'
import { Switch, Route, Link } from 'react-router-dom'

import BlogPage from './BlogPage'
import PostPage from './PostPage'
import BlogCreate from './BlogCreate'
import SignIn from './SignIn'

import { Blog } from './models'

function App () {
  const [blogs, setBlogs] = useState([])

  return (
    &amp;lt;div className='App'&amp;gt;
      &amp;lt;Switch&amp;gt;
        &amp;lt;Route path='/sign-in'&amp;gt;
          &amp;lt;SignIn /&amp;gt;
        &amp;lt;/Route&amp;gt;
        &amp;lt;Route path='/blog/create'&amp;gt;
          &amp;lt;BlogCreate isAdmin={isAdmin} /&amp;gt;
        &amp;lt;/Route&amp;gt;
        &amp;lt;Route path='/blog/:name'&amp;gt;
          &amp;lt;BlogPage user={user} /&amp;gt;
        &amp;lt;/Route&amp;gt;
        &amp;lt;Route path='/post/:name'&amp;gt;
          &amp;lt;PostPage user={user} /&amp;gt;
        &amp;lt;/Route&amp;gt;
        &amp;lt;Route path='/' exact&amp;gt;
          &amp;lt;h1&amp;gt;Blogs&amp;lt;/h1&amp;gt;
          {blogs.map(blog =&amp;gt; (
            &amp;lt;Link to={`/blog/${blog.name}`} key={blog.id}&amp;gt;
              &amp;lt;h2&amp;gt;{blog.name}&amp;lt;/h2&amp;gt;
            &amp;lt;/Link&amp;gt;
          ))}
        &amp;lt;/Route&amp;gt;
      &amp;lt;/Switch&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

export default App
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;&amp;lt;App&amp;gt;&lt;/code&gt; component, first import the &lt;code&gt;Blog&lt;/code&gt; model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Blog } from './models'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, create a &lt;code&gt;useEffect&lt;/code&gt; which will be used to pull data to that component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// create a state variable for the blogs to be stored in
const [blogs, setBlogs] = useState([])

useEffect(() =&amp;gt; {
  const getData = async () =&amp;gt; {
    try {
      // query for all blog posts, then store them in state
      const blogData = await DataStore.query(Blog)
      setBlogs(blogData)
    } catch (err) {
      console.error(err)
    }
  }
  getData()
}, [])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'll want to fetch the current user if there is one. We'll also want to check and see if that user is an admin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [blogs, setBlogs] = useState([])
+ const [isAdmin, setIsAdmin] = useState(false)
+ const [user, setUser] = useState({})

useEffect(() =&amp;gt; {
  const getData = async () =&amp;gt; {
    try {
      const blogData = await DataStore.query(Blog)
      setBlogs(blogData)
      // fetch the current signed in user
+ const user = await Auth.currentAuthenticatedUser()
      // check to see if they're a member of the admin user group
+ setIsAdmin(user.signInUserSession.accessToken.payload['cognito:groups'].includes('admin'))
+ setUser(user)
    } catch (err) {
      console.error(err)
    }
  }
  getData()
}, [])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we'll want to render different information depending if the user is signed in or not. First, if the user is signed in, we'll want to show a sign out button. If they're logged out, we'll want to give them a link to the sign in form. We can do this with the following ternary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{user.attributes 
  ? &amp;lt;button onClick={async () =&amp;gt; await Auth.signOut()}&amp;gt;Sign Out&amp;lt;/button&amp;gt; 
  : &amp;lt;Link to='/sign-in'&amp;gt;Sign In&amp;lt;/Link&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also add this snippet to make it so that admin users have a link to create a new blog.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{isAdmin &amp;amp;&amp;amp; &amp;lt;Link to='/blog/create'&amp;gt;Create a Blog&amp;lt;/Link&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I added both lines to the home route for my site.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;Route path='/' exact&amp;gt;
    &amp;lt;h1&amp;gt;Blogs&amp;lt;/h1&amp;gt;
+ {user.attributes 
+ ? &amp;lt;button onClick={async () =&amp;gt; await Auth.signOut()}&amp;gt;Sign Out&amp;lt;/button&amp;gt; 
+ : &amp;lt;Link to='/sign-in'&amp;gt;Sign In&amp;lt;/Link&amp;gt;}
+ {isAdmin &amp;amp;&amp;amp; &amp;lt;Link to='/blog/create'&amp;gt;Create a Blog&amp;lt;/Link&amp;gt;}
    {blogs.map(blog =&amp;gt; (
      &amp;lt;Link to={`/blog/${blog.name}`} key={blog.id}&amp;gt;
        &amp;lt;h2&amp;gt;{blog.name}&amp;lt;/h2&amp;gt;
      &amp;lt;/Link&amp;gt;
    ))}
  &amp;lt;/Route&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the &lt;a href="https://github.com/aspittel/react-authorization/blob/finished/src/App.js"&gt;completed code&lt;/a&gt; for the App component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blog-page"&gt;
  &lt;/a&gt;
  Blog Page
&lt;/h2&gt;

&lt;p&gt;Now, we'll implement the component that shows one blog. We'll first query to get the blog's information, then get the posts attached to it. In my app, I used React Router to create blog detail pages for each blog that follow the url pattern &lt;code&gt;/blog/:blogName&lt;/code&gt;. I'll then use the &lt;code&gt;:blogName&lt;/code&gt; to get all of that blog's information.&lt;/p&gt;

&lt;p&gt;I'll start with a page that renders each post:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { DataStore } from 'aws-amplify'
import { useEffect, useState } from 'react'
import { useParams, Link } from 'react-router-dom'

import { Post, Blog } from './models'

export default function BlogPage ({ user }) {
  const { name } = useParams()

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;
      {
        posts.map(post =&amp;gt; (
          &amp;lt;h2 key={post.id}&amp;gt;
            &amp;lt;Link to={`/post/${post.title}`}&amp;gt;
              {post.title}
            &amp;lt;/Link&amp;gt;
          &amp;lt;/h2&amp;gt;)
        )
    }
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I'll add this &lt;code&gt;useEffect&lt;/code&gt; in order to load all the posts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// body of BlogPage component inside BlogPage.js

  const [posts, setPosts] = useState([])
  useEffect(() =&amp;gt; {
    const getData = async () =&amp;gt; {
      // find the blog whose name equals the one in the url
      const data = await DataStore.query(Blog, p =&amp;gt; p.name('eq', name))
      // find all the posts whose blogID matches the above post's id
      const posts = await DataStore.query(Post, p =&amp;gt; p.blogID('eq', data[0].id))
      setPosts(posts)
    }
    getData()
  }, [])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/aspittel/react-authorization/blob/finished/src/BlogPage.js"&gt;Final code&lt;/a&gt; for the BlogPage component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blog-create"&gt;
  &lt;/a&gt;
  Blog Create
&lt;/h2&gt;

&lt;p&gt;Let's also make it so that people can create a new blog. Inside of the &lt;code&gt;&amp;lt;BlogCreate&amp;gt;&lt;/code&gt; component. First, create a standard React form that will allow a user to create a new blog.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { DataStore } from 'aws-amplify'
import { useState } from 'react'

import { Blog } from './models'

export default function BlogCreate ({ isAdmin }) {
  const [name, setName] = useState('')

  const createBlog = async e =&amp;gt; {
    e.preventDefault()
  }

    return (
      &amp;lt;form onSubmit={createBlog}&amp;gt;
        &amp;lt;h2&amp;gt;Create a Blog&amp;lt;/h2&amp;gt;
        &amp;lt;label htmlFor='name'&amp;gt;Name&amp;lt;/label&amp;gt;
        &amp;lt;input type='text' id='name' onChange={e =&amp;gt; setName(e.target.value)} /&amp;gt;
        &amp;lt;input type='submit' value='create' /&amp;gt;
      &amp;lt;/form&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, implement the &lt;code&gt;createBlog&lt;/code&gt; function by adding the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const createBlog = async e =&amp;gt; {
  e.preventDefault()
  // create a new blog instance and save it to DataStore
  const newBlog = await DataStore.save(new Blog({
    name
  }))
  console.log(newBlog)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, add a conditional around the form - we only want to render it if the user is an admin!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  if (!isAdmin) {
    return &amp;lt;h2&amp;gt;You aren't allowed on this page!&amp;lt;/h2&amp;gt;
  } else {
    return (
      &amp;lt;form&amp;gt;
       ...
      &amp;lt;/form&amp;gt;
    )
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's &lt;a href="https://github.com/aspittel/react-authorization/blob/finished/src/PostPage.js"&gt;this component&lt;/a&gt; all together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#post-page"&gt;
  &lt;/a&gt;
  Post Page
&lt;/h2&gt;

&lt;p&gt;Last component to implement! This one's the post detail page. We'll implement an edit form so that content owners can edit their posts. First, create a React form for the post. We'll again use React Router to send the name of the post to the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { DataStore } from 'aws-amplify'
import { useEffect, useState } from 'react'
import { useParams, Link } from 'react-router-dom'

import { Post } from './models'

export default function BlogPage ({ user }) {
  const { name } = useParams()

  const [post, setPost] = useState([])
  const [title, setTitle] = useState('')
  const [content, setContent] = useState('')

  const handleSubmit = async e =&amp;gt; {
    e.preventDefault()
  }
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;
      &amp;lt;form onSubmit={handleSubmit}&amp;gt;
        &amp;lt;label&amp;gt;Title&amp;lt;/label&amp;gt;
        &amp;lt;input type='text' value={title} onChange={e =&amp;gt; setTitle(e.target.value)} /&amp;gt;
        &amp;lt;label&amp;gt;Content&amp;lt;/label&amp;gt;
        &amp;lt;input type='text' value={content} onChange={e =&amp;gt; setContent(e.target.value)} /&amp;gt;
        &amp;lt;input type='submit' value='update' /&amp;gt;
      &amp;lt;/form&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we'll create a &lt;code&gt;useEffect&lt;/code&gt; that will get the information about the post from DataStore and render it in the form. Note that this won't work well if you have two posts with the same name! In a larger-scale app you'd want to have some differentiator in the urls for each post.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;useEffect(() =&amp;gt; {
  const getData = async () =&amp;gt; {
    const posts = await DataStore.query(Post, p =&amp;gt; p.title('eq', name))
    setPost(posts[0])
    setTitle(posts[0].title)
    setContent(posts[0].content)
  }
  getData()
}, [])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'll need to implement the handleSubmit. We'll want to copy the original post, update the needed attributes and save them to DataStore.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const handleSubmit = async e =&amp;gt; {
  e.preventDefault()
  await DataStore.save(Post.copyOf(post, updated =&amp;gt; {
    updated.title = title
    updated.content = content
  }))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, within the &lt;code&gt;return&lt;/code&gt;, we'll only want to render the form if the user owns the post. Outside the form, add the following conditional to only render it if the post owner is that user!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; {user.attributes &amp;amp;&amp;amp; (post.owner === user.attributes.email) &amp;amp;&amp;amp; (
   &amp;lt;form onSubmit={handleSubmit}&amp;gt;
   ...
   &amp;lt;/form&amp;gt;
 )}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the component's &lt;a href="https://github.com/aspittel/react-authorization/blob/finished/src/PostPage.js"&gt;final code&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this post, we use Amplify's DataStore multi-auth to implement different permissions based on the user's role and ownership of content. You could keep extending this with more forms, styling, and data rendering. I'd love to hear your thoughts on this app and this new Amplify feature!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>aws</category>
    </item>
    <item>
      <title>The Next Evolution of GraphQL Front Ends</title>
      <author>Benny Powers 🇮🇱🇨🇦</author>
      <pubDate>Mon, 02 Aug 2021 14:32:20 +0000</pubDate>
      <link>https://dev.to/bennypowers/the-next-evolution-of-graphql-front-ends-egf</link>
      <guid>https://dev.to/bennypowers/the-next-evolution-of-graphql-front-ends-egf</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally posted on the &lt;a href="https://apolloelements.dev/blog/next-evolution/"&gt;Apollo Elements blog&lt;/a&gt;. Read there to enjoy interactive demos.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Apollo Elements has come a long way since its first release as &lt;code&gt;lit-apollo&lt;/code&gt; in 2017. What started as a way to build GraphQL-querying LitElements has blossomed into a &lt;a href="https://apolloelements.dev/api/libraries/"&gt;multi-library&lt;/a&gt;, multi-paradigm project with &lt;a href="https://apolloelements.dev/api/"&gt;extensive docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today we're releasing the next version of Apollo Elements' packages, including a major change: introducing GraphQL Controllers, and GraphQL HTML Elements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reactive-graphql-controllers"&gt;
  &lt;/a&gt;
  Reactive GraphQL Controllers
&lt;/h2&gt;

&lt;p&gt;The latest version of &lt;a href="https://lit.dev"&gt;Lit&lt;/a&gt; introduced a concept called "reactive controllers". They're a way to pack up reusable functionality in JavaScript classes that you can share between elements. If you've use JavaScript class mixins before (&lt;em&gt;not&lt;/em&gt; the same as React mixins), they you're familiar with sharing code between elements. Controllers go one-better by being sharable and composable without requiring you to apply a mixin to the host element, as long as it implements the &lt;a href="https://lit.dev/docs/composition/controllers/#controller-host-api"&gt;&lt;code&gt;ReactiveControllerHost&lt;/code&gt;&lt;/a&gt; interface.&lt;/p&gt;

&lt;p&gt;You can even have multiple copies of the same controller active on a given host. In the words of the Lit team, controllers represent a "has a _" relationship to the host element, where mixins represent an "is a _" relationship.&lt;/p&gt;

&lt;p&gt;For Apollo Elements, it means now you can add many GraphQL operations to one component, like multiple queries or a query and a mutation. Here's an interactive example of the latter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TextField&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@material/mwc-textfield&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApolloQueryController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ApolloMutationController&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@apollo-elements/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;customElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lit/decorators.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UsersQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AddUserMutation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./graphql.documents.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Users.css.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;customElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users-view&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UsersView&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mwc-textfield&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;nameField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApolloQueryController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UsersQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;addUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApolloMutationController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AddUserMutation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;awaitRefetchQueries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;refetchQueries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UsersQuery&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nameField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`
      &amp;lt;form&amp;gt;
        &amp;lt;h2&amp;gt;Add a New User&amp;lt;/h2&amp;gt;
        &amp;lt;mwc-textfield label="Name" ?disabled="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&amp;lt;/mwc-textfield&amp;gt;
        &amp;lt;mwc-linear-progress indeterminate ?closed="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&amp;lt;/mwc-linear-progress&amp;gt;
        &amp;lt;mwc-button label="Submit" ?disabled="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" @click="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&amp;lt;/mwc-button&amp;gt;
      &amp;lt;/form&amp;gt;
      &amp;lt;h2&amp;gt;All Users&amp;lt;/h2&amp;gt;
      &amp;lt;mwc-list&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`
        &amp;lt;mwc-list-item noninteractive graphic="avatar"&amp;gt;
          &amp;lt;img slot="graphic" ?hidden="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" .src="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" role="presentation"/&amp;gt;
          &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
        &amp;lt;/mwc-list-item&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;
      &amp;lt;/mwc-list&amp;gt;
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://apolloelements.dev/blog/next-evolution/#multiple-controllers"&gt;&lt;em&gt;View a Live Demo of this snippet&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Controllers are great for lots of reasons. One reason we've found while developing and testing Apollo Elements is that unlike the class-based API of e.g. &lt;code&gt;@apollo-elements/lit-apollo&lt;/code&gt; or &lt;code&gt;@apollo-elements/mixins&lt;/code&gt;, when using controllers there's no need to pass in type parameters to the host class. By passing a &lt;a href="https://github.com/dotansimha/graphql-typed-document-node"&gt;TypedDocumentNode&lt;/a&gt; object as the argument to the controller, you'll get that typechecking and autocomplete you know and love in your class template and methods, without awkward &lt;code&gt;&amp;lt;DataType, VarsType&amp;gt;&lt;/code&gt; class generics.&lt;/p&gt;

&lt;p&gt;If you're working on an existing app that uses Apollo Elements' base classes, not to worry, you can still &lt;code&gt;import { ApolloQuery } from '@apollo-elements/lit-apollo'&lt;/code&gt;, We worked hard to keep the breaking changes to a minimum. Those base classes now use the controllers at their heart, so go ahead: mix-and-match query components with controller-host components in your app, it won't bloat your bundles.&lt;/p&gt;

&lt;p&gt;We hope you have as much fun using Apollo Elements controllers as we've had writing them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dynamic-graphql-templates-in-html"&gt;
  &lt;/a&gt;
  Dynamic GraphQL Templates in HTML
&lt;/h2&gt;

&lt;p&gt;The previous major version of &lt;code&gt;@apollo-elements/components&lt;/code&gt; included &lt;code&gt;&amp;lt;apollo-client&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;apollo-mutation&amp;gt;&lt;/code&gt;. Those are still here and they're better than ever, but now they're part of a set with &lt;code&gt;&amp;lt;apollo-query&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;apollo-subscription&amp;gt;&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;With these new elements, and their older sibling &lt;code&gt;&amp;lt;apollo-mutation&amp;gt;&lt;/code&gt;, you can write entire GraphQL apps in nothing but HTML. You read that right, declarative, data-driven GraphQL apps in HTML. You still have access to the Apollo Client API, so feel free to sprinkle in a little JS here and there for added spice.&lt;/p&gt;

&lt;p&gt;This is all made possible by a pair of libraries from the Lit team's Justin Fagnani called &lt;a href="https://github.com/justinfagnani/stampino/"&gt;Stampino&lt;/a&gt; and &lt;a href="https://github.com/justinfagnani/jexpr/"&gt;jexpr&lt;/a&gt;. Together, they let you define dynamic parts in HTML &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; elements, filling them with JavaScript expressions based on your GraphQL data.&lt;/p&gt;

&lt;p&gt;Here's the demo app from above, but written in HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;apollo-client&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;apollo-query&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"application/graphql"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"Users.query.graphql"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Add a New User&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;apollo-mutation&lt;/span&gt; &lt;span class="na"&gt;refetch-queries=&lt;/span&gt;&lt;span class="s"&gt;"Users"&lt;/span&gt; &lt;span class="na"&gt;await-refetch-queries&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"application/graphql"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"AddUser.mutation.graphql"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;mwc-textfield&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"Name"&lt;/span&gt;
                       &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;
                       &lt;span class="na"&gt;data-variable=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;
                       &lt;span class="na"&gt;.disabled=&lt;/span&gt;&lt;span class="s"&gt;"{{ loading }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/mwc-textfield&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;mwc-button&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"Submit"&lt;/span&gt;
                    &lt;span class="na"&gt;trigger&lt;/span&gt;
                    &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;
                    &lt;span class="na"&gt;.disabled=&lt;/span&gt;&lt;span class="s"&gt;"{{ loading }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/mwc-button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;mwc-linear-progress&lt;/span&gt; &lt;span class="na"&gt;indeterminate&lt;/span&gt; &lt;span class="na"&gt;.closed=&lt;/span&gt;&lt;span class="s"&gt;"{{ !loading }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/mwc-linear-progress&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/apollo-mutation&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;All Users&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;mwc-list&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"repeat"&lt;/span&gt; &lt;span class="na"&gt;repeat=&lt;/span&gt;&lt;span class="s"&gt;"{{ data.users ?? [] }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;mwc-list-item&lt;/span&gt; &lt;span class="na"&gt;noninteractive&lt;/span&gt; &lt;span class="na"&gt;graphic=&lt;/span&gt;&lt;span class="s"&gt;"avatar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;.src=&lt;/span&gt;&lt;span class="s"&gt;"{{ item.picture }}"&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"graphic"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            {{ item.name }}
          &lt;span class="nt"&gt;&amp;lt;/mwc-list-item&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/mwc-list&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/apollo-query&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/apollo-client&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"components.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://apolloelements.dev/blog/next-evolution/#html-components"&gt;&lt;em&gt;View a Live Demo of this snippet&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's a tonne of potential here and we're very keen to see what you come up with using these new components. Bear in mind that the stampino API isn't stable yet: there may be changes coming down the pipe in the future, but we'll do our best to keep those changes private.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-flexible-html-mutations"&gt;
  &lt;/a&gt;
  More Flexible HTML Mutations
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;apollo-mutation&amp;gt;&lt;/code&gt; component lets you declare GraphQL mutations in HTML. Now, the latest version gives you more options to layout your pages. Add a stampino template to render the mutation result into the light or shadow DOM. Use the &lt;code&gt;variable-for="&amp;lt;id&amp;gt;"&lt;/code&gt; and &lt;code&gt;trigger-for="&amp;lt;id&amp;gt;"&lt;/code&gt; attributes on sibling elements to better integrate with 3rd-party components, and specify the event which triggers the mutation by specifying a value to the &lt;code&gt;trigger&lt;/code&gt; attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/@shoelace-style/shoelace@2.0.0-beta.47/dist/themes/base.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/@shoelace-style/shoelace@2.0.0-beta.47/dist/shoelace.js?module"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;sl-button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"toggle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Add a User&lt;span class="nt"&gt;&amp;lt;/sl-button&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;sl-dialog&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"Add User"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;sl-input&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"What is your name?"&lt;/span&gt;
            &lt;span class="na"&gt;variable-for=&lt;/span&gt;&lt;span class="s"&gt;"add-user-mutation"&lt;/span&gt;
            &lt;span class="na"&gt;data-variable=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/sl-input&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;sl-button&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;
             &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;
             &lt;span class="na"&gt;trigger-for=&lt;/span&gt;&lt;span class="s"&gt;"add-user-mutation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Add&lt;span class="nt"&gt;&amp;lt;/sl-button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/sl-dialog&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;apollo-mutation&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"add-user-mutation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"application/graphql"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"AddUser.mutation.graphql"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;sl-alert&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt; &lt;span class="na"&gt;duration=&lt;/span&gt;&lt;span class="s"&gt;"3000"&lt;/span&gt; &lt;span class="na"&gt;closable&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="na"&gt;open=&lt;/span&gt;&lt;span class="s"&gt;"{{ data }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;sl-icon&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"info-circle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/sl-icon&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Added {{ data.addUser.name }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/sl-alert&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/apollo-mutation&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"imports.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sl-dialog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add-user-mutation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="nx"&gt;mutation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mutation-completed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Demonstrating how to use &lt;code&gt;&amp;lt;apollo-mutation&amp;gt;&lt;/code&gt; with &lt;a href="https://shoelace.style"&gt;Shoelace&lt;/a&gt; web components. &lt;a href="https://apolloelements.dev/blog/next-evolution/#shoelace"&gt;&lt;em&gt;View a Live Demo of this snippet&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#atomico-support"&gt;
  &lt;/a&gt;
  Atomico support
&lt;/h2&gt;

&lt;p&gt;On the heels of the controllers release, we're happy to add a new package to the roster. Apollo Elements now has first-class support for &lt;a href="https://atomico.gitbook.io"&gt;Atomico&lt;/a&gt;, a new hooks-based web components library with JSX or template-string templating.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@apollo-elements/atomico&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LaunchesQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Launches.query.graphql.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Launches&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LaunchesQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;launches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;launchesPast&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;host&lt;/span&gt; &lt;span class="na"&gt;shadowDom&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"launches.css"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;launches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mission_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mission_patch_small&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Badge"&lt;/span&gt; &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"presentation"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spacex-launches&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Launches&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fast-behaviors"&gt;
  &lt;/a&gt;
  FAST Behaviors
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://fast.design"&gt;FAST&lt;/a&gt; is an innovative web component library and design system from Microsoft. Apollo Elements added support for FAST in 2020, in the form of &lt;code&gt;Apollo*&lt;/code&gt; base classes. The latest release transitions to FAST &lt;a href="https://www.fast.design/docs/api/fast-element.controller.addbehaviors"&gt;Behaviors&lt;/a&gt;, which are analogous to Lit &lt;code&gt;ReactiveControllers&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;customElement&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserProfile&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;FASTElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApolloQueryBehavior&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MyProfileQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;updateProfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApolloMutationBehavior&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UpdateProfileMutation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeQuery&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MyProfileQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateProfile&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The FAST team were instrumental in getting this feature over the line, so many thanks to them.&lt;/p&gt;

&lt;p&gt;If you're already using &lt;code&gt;@apollo-elements/fast&lt;/code&gt;, we recommend migrating your code to behaviors as soon as you're able, but you can continue to use the element base classes, just change your import paths to &lt;code&gt;/bases&lt;/code&gt;. These may be removed in the &lt;em&gt;next&lt;/em&gt; major release, though.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;-  import { ApolloQuery } from '@apollo-elements/fast/apollo-query';
&lt;/span&gt;&lt;span class="gi"&gt;+  import { ApolloQuery } from '@apollo-elements/fast/bases/apollo-query';
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#new-and-improved-docs"&gt;
  &lt;/a&gt;
  New and Improved Docs
&lt;/h2&gt;

&lt;p&gt;It wouldn't be an Apollo Elements release without some docs goodies. This time, in addition to new and updated docs and guides for components and controllers, we've replaced our webcomponents.dev iframes with &lt;code&gt;&amp;lt;playground-ide&amp;gt;&lt;/code&gt; elements. All the "Edit Live" demos on this site, including the ones in this blog post, are running locally in your browser via a service worker. Talk about serverless, &lt;em&gt;amirite&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;The docs also got a major upgrade care of Pascal Schilp's untiring work in the &lt;a href="https://www.w3.org/community/webcomponents/"&gt;Webcomponents Community Group&lt;/a&gt; to get the custom elements manifest v1 published. This latest iteration of the API docs generates package manifests directly from source code, and converts them to API docs via &lt;a href="https://rocket.modern-web.dev"&gt;Rocket&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ssr"&gt;
  &lt;/a&gt;
  SSR
&lt;/h2&gt;

&lt;p&gt;As part of the release, we updated our demo apps &lt;a href="https://leeway.apolloelements.dev"&gt;leeway&lt;/a&gt; and &lt;a href="https://launchctl.apolloelements.dev"&gt;LaunchCTL&lt;/a&gt;. In the case of leeway, we took the opportunity to implement extensive SSR with the help of a new browser standard called &lt;a href="https://web.dev/declarative-shadow-dom/"&gt;Declarative Shadow DOM&lt;/a&gt;. It's early days for this technique but it's already looking very promising. You can try it out in any chromium browser (Chrome, Brave, Edge, Opera) by disabling JavaScript and visiting &lt;a href="https://leeway.apolloelements.dev"&gt;https://leeway.apolloelements.dev&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#behind-the-scenes"&gt;
  &lt;/a&gt;
  Behind the Scenes
&lt;/h2&gt;

&lt;p&gt;Bringing this release into the light involved more than just refactoring and updating the &lt;code&gt;apollo-elements/apollo-elements&lt;/code&gt; repo. It represents work across many projects, including PRs to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/justinfagnani/stampino/pulls?q=is%3Apr+is%3Aclosed+merged%3A%3C2021-06-01+merged%3A%3E2021-01+"&gt;Stampino&lt;/a&gt; and &lt;a href="https://github.com/justinfagnani/jexpr/pulls?q=is%3Apr+is%3Aclosed+merged%3A%3E2021-01"&gt;jexpr&lt;/a&gt;, to iron out bugs, decrease bundle size, and add features&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hybridsjs/hybrids/pull/167"&gt;Hybrids&lt;/a&gt;, to add support for reactive controllers&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/atomicojs/hooks/pull/7"&gt;Atomico&lt;/a&gt; and &lt;a href="https://github.com/matthewp/haunted/pull/239"&gt;Haunted&lt;/a&gt;, to add the &lt;code&gt;useController&lt;/code&gt; hook which underlies &lt;code&gt;useQuery&lt;/code&gt; and co.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, here in apollo-elements, we added the &lt;a href="https://dev.to/api/libraries/mixins/controller-host-mixin/"&gt;&lt;code&gt;ControllerHostMixin&lt;/code&gt;&lt;/a&gt; as a way to maintain the previous element-per-graphql-document API without breaking backwards (too much). You can use this generic mixin to add controller support to any web component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fixes-and-enhancements"&gt;
  &lt;/a&gt;
  Fixes and Enhancements
&lt;/h2&gt;

&lt;p&gt;The last release included support for the web components hooks library &lt;a href="https://github.com/matthewp/haunted"&gt;haunted&lt;/a&gt;, but that support hid a dirty little secret within. Any time you called a hook inside a Haunted function component, apollo elements would sneakily mix the GraphQL interface onto the custom element's prototype. It was a good hack as long as you only call one hook per component, but would break down as soon as you compose multiple operations.&lt;/p&gt;

&lt;p&gt;With controllers at the core, and the &lt;a href="https://github.com/matthewp/haunted#usecontroller"&gt;&lt;code&gt;useController&lt;/code&gt;&lt;/a&gt; hook, you can use as many Apollo hooks as you want in your elements without clobbering each other or polluting the element interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@apollo-elements/haunted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./client.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FruitsQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Fruits.query.graphql.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;VeggiesQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Veggies.query.graphql.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;healthy-snack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;HealthySnack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;FruitsQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;veggies&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;VeggiesQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;snack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;veggies&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;veggies&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`
    &amp;lt;link rel="stylesheet" href="healthy-snack.css"/&amp;gt;
    &amp;lt;ul&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;snack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/li&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/ul&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Demonstrating how to use multiple GraphQL hooks in a &lt;a href="https://hauntedhooks.netlify.app/"&gt;haunted&lt;/a&gt; component. &lt;a href="https://apolloelements.dev/blog/next-evolution/#haunted-multiple-hooks"&gt;&lt;em&gt;View a Live Demo of this snippet&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same is true of the &lt;a href="https://hybrids.js.org"&gt;hybrids&lt;/a&gt; support, it now uses the controllers underneath the hood, letting you mix multiple operations in a single hybrid.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;define&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@apollo-elements/hybrids&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./client.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FruitsQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Fruits.query.graphql.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;VeggiesQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Veggies.query.graphql.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;healthy-snack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;FruitsQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="na"&gt;veggies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;VeggiesQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;snack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;veggies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;veggies&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`
      &amp;lt;link rel="stylesheet" href="healthy-snack.css"/&amp;gt;
      &amp;lt;ul&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;snack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/li&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/ul&amp;gt;
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Demonstrating how to use multiple GraphQL hooks in an &lt;a href="https://atomico.gitbook.io/"&gt;atomico&lt;/a&gt; component. &lt;a href="https://apolloelements.dev/blog/next-evolution/#haunted-multiple-hooks"&gt;&lt;em&gt;View a Live Demo of this snippet&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#try-it-out"&gt;
  &lt;/a&gt;
  Try it Out
&lt;/h2&gt;

&lt;p&gt;Apollo Elements next is available in prerelease on &lt;a href="https://npm.im/@apollo-elements/core"&gt;npm&lt;/a&gt;. We hope you enjoy using it and look forward to seeing what you come up with.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Are you using Apollo Elements at work? Consider &lt;a href="https://opencollective.com/apollo-elements"&gt;sponsoring the project via Open Collective&lt;/a&gt; to receive perks like priority support.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>graphql</category>
      <category>webcomponents</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Humans of Microsoft S02E01: Abel Wang</title>
      <author>Laurent Bugnion</author>
      <pubDate>Mon, 02 Aug 2021 14:24:22 +0000</pubDate>
      <link>https://dev.to/azure/humans-of-microsoft-s02e01-abel-wang-263a</link>
      <guid>https://dev.to/azure/humans-of-microsoft-s02e01-abel-wang-263a</guid>
      <description>&lt;p&gt;A few weeks before Abel Wang's passing, he accepted my invitation to talk about his relocation from the Midwest to Redmond, his favorite software project ever, and his attitude towards life and his health issues.&lt;/p&gt;

&lt;p&gt;Because of the circumstances, and after talking to Abel's family, we decided to publish this video now to remind everyone of Abel's amazing energy and positivity. We miss you Abel.&lt;/p&gt;

&lt;p&gt;This is part of a series titled Humans of Microsoft, which is part of the Hello World show on LearnTV and on Channel9.&lt;br&gt;
More details here&lt;br&gt;
&lt;a href="https://dev.to/t/humansofmicrosoft"&gt;https://dev.to/t/humansofmicrosoft&lt;/a&gt;&lt;br&gt;
and here&lt;br&gt;
&lt;a href="https://channel9.msdn.com/Shows/Hello-World"&gt;https://channel9.msdn.com/Shows/Hello-World&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xCkcKMRrp7s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transcript"&gt;
  &lt;/a&gt;
  Transcript
&lt;/h2&gt;

&lt;p&gt;Laurent: Welcome back to Humans of Microsoft. This is a segment where we talk to people just like you and me, but they all happen to work for Microsoft and today I have a guest who is not really just like you and me because it's a, it's an actual rock star and I'm so happy to welcome my good friend Abel Wang to the show. Hello Abel, how are you?&lt;/p&gt;

&lt;p&gt;Abel: I'm doing really good. Thank you so much for having me.&lt;/p&gt;

&lt;p&gt;Laurent: Oh absolutely, such a pleasure to have you. And as a first guest of Season 2, Abel, you are a Principal Program Manager and you work for Azure Incubations, right?&lt;/p&gt;

&lt;p&gt;Abel: Yes, that is correct. I'm officially the technical advisor to the CTO of Azure, so to Mark Russinovich.&lt;/p&gt;

&lt;p&gt;Laurent: So Abel I know that a few years ago you were living in Houston and you moved to the Pacific Northwest So in the region of Seattle, which is, you know, the headquarters of Microsoft. Why did you decide to move and how do you feel that it impacted your career?&lt;/p&gt;

&lt;p&gt;Abel: That's a great question. I actually, I've always wanted to make it to the West Coast. Well I grew up in the Midwest in the United States, but I wanted to be in California, 'cause clearly that's where I belong. Or somewhere on the West Coast. I definitely didn't belong in the Midwest, but when I graduated from college, I already had my son then. So money was really tight. And you know, I got, I got a CS degree, And I got job offers on the East Coast, West Coast, everywhere, but they all paid the same amount of money. But living in Houston, TX, that was, the cost of living is so cheap, it was kind of a no brainer. So my plan was, move to Houston and then in a couple years I'll find a job somehow and get to the West Coast. But what I didn't realize is once you have children, you're kind of stuck in a place, right? So as soon as my son graduated from high school, I looked at my wife. She looked at me and we said, now is the time right? And I knew I wanted to spend a little bit of time in Redmond, at least just because that's the corporate headquarters for Microsoft and I wanted to be where the action was. I wanted to see what it was like. You know, I knew that I could compete in Microsoft everywhere else, right around the world, doing services, doing sales. But I was like, can I compete with those Redmond people, but then, can I join, like, a product group? Can I? Am I at that level? Can I do this? It was like a challenge. And it was a strategic move on my part in terms of what I wanted for my career. So I actually got a job in product marketing. And I moved over to Seattle and it was amazing coming into work, going into campus every single day, it was, it was freaking amazing. The amount of connections that I built was invaluable, right, the face-to-face time. I think it was a huge positive influence on my career and I'm not saying that it's the only way to do things, but for me, I'm I'm glad I made the move.&lt;/p&gt;

&lt;p&gt;Laurent: What production software that you wrote are you the proudest of?&lt;/p&gt;

&lt;p&gt;Abel:  That's another great question. I think I need to go all the way back in time to, this was my third year out of college. I somehow fooled Chase Bank into thinking that I was actually like a software architect of some sort, and at that time, this was during the dotcom boom. So everybody was getting jobs, but I was, we were trying to get bank information except they stored all their bank information on mainframes, right? So in order to have web servers that could serve a webpage that would pull that live information from the mainframe. Well, that was really tough. They didn't have a way to do that, so if you remember back, I guess this would be the early 90s, or mid 90s there, there really was very few ways that you could remote and do things right, so I ended up having to write a bridge using CORBA. That would talk to both the mainframe and to, like, the web servers to pull data from the main frames. And it's still being used by Chase today. So it was one of my first big projects and one of the funnest things I've done.&lt;/p&gt;

&lt;p&gt;Laurent: Wow, CORBA, it's like a horror show for me.&lt;/p&gt;

&lt;p&gt;Abel: Oh it was horrible. But I didn't know better back then.&lt;/p&gt;

&lt;p&gt;Laurent: Well yeah, I mean back then it was the way, right? So quickly to finish and we could talk, you know, for many more hours probably, but how do you stay positive throughout everything that you're going through?&lt;/p&gt;

&lt;p&gt;Abel: Very good question. So for those that don't know, I was diagnosed with cancer about three years ago and then I beat it. And then in March I was diagnosed with stage four cancer and it spread everywhere, right? So people often ask me, how do you stay positive? But the truth is, life is hard for all of us. All of us, it's hard, right? in in in some certain ways, and you can't wait until life isn't hard enough to decide to be happy. So I decide to be happy every day that I can.&lt;/p&gt;

&lt;p&gt;Laurent:  Wow. This is fantastic. Positivity as a decision, as a conscious decision. I love that. Well, this was fantastic. Thank you so much for coming on the show today, Abel, it was amazing. Thank you so much to all the viewers for watching and we'll see you next time on Humans of Microsoft.&lt;/p&gt;

</description>
      <category>microsoft</category>
      <category>humansofmicrosoft</category>
      <category>helloworld</category>
    </item>
    <item>
      <title>This is How [JavaScript] Promises Really Work</title>
      <author>Clean Code Studio</author>
      <pubDate>Mon, 02 Aug 2021 14:20:33 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/this-is-how-javascript-promises-really-work-a-promising-guide-dlg</link>
      <guid>https://dev.to/cleancodestudio/this-is-how-javascript-promises-really-work-a-promising-guide-dlg</guid>
      <description>&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Promises are one technique to handle asynchronous code, otherwise known as your first class ticket out of callback hell.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5l83yp3D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wit653vmh8e2a7wwteum.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5l83yp3D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wit653vmh8e2a7wwteum.png" alt="JS promise state "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-states-of-a-promise"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3 State's of a Promise&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Pending State&lt;/li&gt;
&lt;li&gt;Resolved State&lt;/li&gt;
&lt;li&gt;Rejected State&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#understanding-javascript-promises"&gt;
  &lt;/a&gt;
  Understanding JavaScript Promises
&lt;/h3&gt;




&lt;p&gt;What is a promise? &lt;/p&gt;

&lt;p&gt;Commonly, a promise is defined as a proxy for a value that will eventually become available. &lt;/p&gt;

&lt;p&gt;Promises have been a part of JavaScript for years (standardized and introduced in ES2015). More recently, the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords (introduced in ES2017) have more deeply integrated and cleaned up the syntax for promises within JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Async functions&lt;/strong&gt; use promises behind the scenes, thus - especially with todays distributed cloud architectures becoming more common - understanding what promises are and how they work is more important than ever!&lt;/p&gt;

&lt;p&gt;Now that we know promises are important, let's dive in.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-promises-work-brief-explanation"&gt;
  &lt;/a&gt;
  How Promises Work (Brief Explanation)
&lt;/h3&gt;




&lt;p&gt;Your code calls a promise. This promise will start in what is known as its &lt;strong&gt;pending state&lt;/strong&gt;. What's this mean?&lt;/p&gt;

&lt;p&gt;This means that the calling function will continue executing while the promise is pending. Once the promise is &lt;strong&gt;resolved&lt;/strong&gt; the calling function will get the data that was being requested by the promise. &lt;/p&gt;

&lt;p&gt;A promise starts in a &lt;strong&gt;pending state&lt;/strong&gt; and eventually ends in a &lt;strong&gt;resolved state&lt;/strong&gt; or a &lt;strong&gt;rejected state&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Whether the final outcome be a promise in its &lt;strong&gt;resolved state&lt;/strong&gt; or a promise in its &lt;strong&gt;rejected state&lt;/strong&gt;, a callback will be called.&lt;/p&gt;

&lt;p&gt;We define two separate callbacks. &lt;/p&gt;

&lt;p&gt;One callback handles the data returned from a promise when it ends in a &lt;strong&gt;resolved state&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The other callback handles the data returned from a promise when it ends in a &lt;strong&gt;rejected state&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We define the callback function that handles the promise data that ends in a &lt;strong&gt;resolved state&lt;/strong&gt; by passing our callback function to &lt;strong&gt;then&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We define the callback function that handles the promise data  that ends in a &lt;strong&gt;rejected state&lt;/strong&gt; by passing our callback function to &lt;strong&gt;catch&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example using axios npm library&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolvedPromiseCallbackFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;rejectedPromiseCallbackFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#which-javascript-apis-use-promises"&gt;
  &lt;/a&gt;
  Which JavaScript APIs use promises?
&lt;/h3&gt;



&lt;p&gt;Your own code and libraries will most likely use promises throughout. That being noted, promises are actually used by standard modern web APIS. Here's a couple web APIs that also use promises.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API"&gt;Service Workers API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;Fetch API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In modern JavaScript, it's pretty unlikely you'll find yourself in a situation where you're not using promises - so let's dive deep and start understanding them. &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#creating-promises"&gt;
  &lt;/a&gt;
  Creating promises
&lt;/h3&gt;



&lt;p&gt;JavaScript has a Promise API. The Promise API exposes a promise constructor, which you initialize using &lt;code&gt;new Promise()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;complete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasItCompleted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;completed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Here is the thing I built&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;withReason&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Still doing something else&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
     &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;withReason&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As shown, we check the &lt;code&gt;complete&lt;/code&gt; global constant. If &lt;code&gt;complete&lt;/code&gt; is true, the promise switched to the &lt;strong&gt;resolved&lt;/strong&gt; state (aka we call the resolve callback which switches the promise to its &lt;strong&gt;resolved&lt;/strong&gt; state). Otherwise, if &lt;code&gt;complete&lt;/code&gt; is false, the &lt;code&gt;reject&lt;/code&gt; callback is executed, putting the promise into a &lt;strong&gt;rejected&lt;/strong&gt; state. &lt;/p&gt;

&lt;p&gt;Okay - easy enough, if we call the &lt;code&gt;resolve&lt;/code&gt; callback then our promise switches to the &lt;strong&gt;resolved&lt;/strong&gt; state where as if we use the &lt;code&gt;reject&lt;/code&gt; callback our promise switches to its &lt;strong&gt;rejected&lt;/strong&gt; state. That leaves us with a question though.&lt;/p&gt;

&lt;p&gt;What if we call neither the &lt;code&gt;resolve&lt;/code&gt; nor the &lt;code&gt;reject&lt;/code&gt; callback? Well, as you might be putting together, then the promise remains in its &lt;strong&gt;pending&lt;/strong&gt; state. &lt;/p&gt;

&lt;p&gt;Simple enough, three states - two callback functions to switch to &lt;strong&gt;Resolved State&lt;/strong&gt; or &lt;strong&gt;Rejected State&lt;/strong&gt;, if we call neither callback then we simply remain in the &lt;strong&gt;Pending State&lt;/strong&gt;.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#promisifying"&gt;
  &lt;/a&gt;
  Promisifying
&lt;/h3&gt;



&lt;p&gt;A more common example that may cross your path is a technique known as &lt;strong&gt;Promisifying&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Promisifying&lt;/strong&gt; is a way to be able to use a classic JavaScript function that takes a callback, and have it return a promise:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileSystem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fileSystem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
               &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; 
           &lt;span class="p"&gt;}&lt;/span&gt;  

           &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/etc/passwd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;getFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;In recent versions of Node.js, you won't have to do this&lt;/em&gt; &lt;br&gt;
&lt;em&gt;manual conversion for a lot of the API. There is a&lt;/em&gt;&lt;br&gt;
&lt;em&gt;promisifying function available in the util module that will&lt;/em&gt; &amp;gt; &lt;em&gt;do this for you, given that the function you're&lt;/em&gt;&lt;br&gt;
&lt;em&gt;promisifying has the correct signature.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#consuming-a-promise"&gt;
  &lt;/a&gt;
  Consuming A Promise
&lt;/h3&gt;



&lt;p&gt;Now that understand how a promise can be created using &lt;code&gt;new Promise()&lt;/code&gt; as well as the &lt;strong&gt;Promisifying&lt;/strong&gt; technique, let's talk about &lt;em&gt;consuming&lt;/em&gt; a promise. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;How do we use a promise (aka how do we consume a promise)&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isItDoneYet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... as above ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkIfItsDone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;isItDoneYet&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Running &lt;code&gt;checkIfItsDone()&lt;/code&gt; will specify functions to execute when the &lt;code&gt;isItDoneYet&lt;/code&gt; promise resolves (in the &lt;code&gt;then&lt;/code&gt; call) or rejects (in the &lt;code&gt;catch&lt;/code&gt; call).&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#fluently-chaining-promises"&gt;
  &lt;/a&gt;
  Fluently Chaining Promises
&lt;/h3&gt;



&lt;p&gt;What if we want to call another promise directly after a previous promise is returned. We can do this, and it's simply called creating a chain of promises.&lt;/p&gt;

&lt;p&gt;An example of chaining promises can be found within the Fetch API, which may be used to get a resource and queue (First in First out line) a chain of promises to execute when the resource is fetched.&lt;/p&gt;

&lt;p&gt;For starters, let's first point out that the &lt;strong&gt;Fetch API&lt;/strong&gt; is a promise-based mechanism. Calling the &lt;code&gt;fetch()&lt;/code&gt; method is equivalent to defining our own promise using &lt;code&gt;new Promise()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here's an example of chaining promises fluently together:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
     &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;
          &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/items.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Request success (with json): &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Request failed: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"&lt;a href="https://www.npmjs.com/package/node-fetch"&gt;node-fetch&lt;/a&gt; is minimal code for window.fetch compatible API on Node.js runtime."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, what'd we just do?&lt;/p&gt;

&lt;p&gt;Well, in the example above we call &lt;code&gt;fetch()&lt;/code&gt; to get a list of items from the &lt;code&gt;items.json&lt;/code&gt; file found in the domain root.&lt;/p&gt;

&lt;p&gt;Then we create a chaing of promises.&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;fetch()&lt;/code&gt; returns a &lt;a href="https://fetch.spec.whatwg.org/#concept-response"&gt;response&lt;/a&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Response contains &lt;code&gt;status&lt;/code&gt; (numeric HTTP status code)&lt;/li&gt;
&lt;li&gt;Response contains &lt;code&gt;statusText&lt;/code&gt; (string message, which is &lt;code&gt;OK&lt;/code&gt; if everything is successful)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;response&lt;/code&gt; also contains a method callable as &lt;code&gt;json()&lt;/code&gt;. Responses json method returns a promise that will resolve with the content of the body data processed and transformed into &lt;code&gt;JSON&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we have a final promise in our chain passed in as a anonymous callback function.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Request success (with json): &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This function simply logs that we were successful and console logs the successful requests json data.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;_"What if the first promise was rejected though?"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the first promise would have been rejected, or the second promise, or the third - then, no matter the step, we're automatically going to default to the &lt;code&gt;catch&lt;/code&gt; callback method that is visually shown at the end of our fluent promise chain. &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#handling-errors"&gt;
  &lt;/a&gt;
  Handling Errors
&lt;/h3&gt;



&lt;p&gt;We have a promise chain, something fails, uh oh - so what happens?&lt;/p&gt;

&lt;p&gt;If anything in the chain of promises fails and raises an error or ultimately sets the promise's state to a &lt;strong&gt;Rejected Promise State&lt;/strong&gt;, the control goes directly to the nearest &lt;code&gt;catch()&lt;/code&gt; statement down our promise chain.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// or&lt;/span&gt;

&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cascading-errors"&gt;
  &lt;/a&gt;
  Cascading errors
&lt;/h3&gt;



&lt;p&gt;What if we raise an error &lt;strong&gt;inside&lt;/strong&gt; a &lt;code&gt;catch()&lt;/code&gt;? Well, check it - we can simply append a second &lt;code&gt;catch()&lt;/code&gt;. The second &lt;code&gt;catch()&lt;/code&gt; will handle the error (or more specifically error message) and so on.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#promises-orchestration"&gt;
  &lt;/a&gt;
  Promises Orchestration
&lt;/h3&gt;



&lt;p&gt;Okay, so now we're solid when it comes to a single promise and our foundational understanding of promises in general.&lt;/p&gt;

&lt;p&gt;Getting more advanced, let's ask another question. If you need to synchronize different promises - say pull data from multiple endpoints and handle the resolved promise data from all of the promises created and used to retrieve results from these differing endpoints - how would we do it?&lt;/p&gt;

&lt;p&gt;How would we synchronize different promises and execute something when they are all resolved?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;Promise.all()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Promise.all()&lt;/code&gt; helps us define a list of promises and execute something when they are all resolved - it allows us to synchronize promises.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Promise.all()&lt;/code&gt; &lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/one.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/two.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Array of results: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With destructuring, we can simplify this example to:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/one.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/two.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;resA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resB&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;results: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resB&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#promiserace"&gt;
  &lt;/a&gt;
  Promise.race()
&lt;/h3&gt;



&lt;p&gt;What if we want to get all of the data from these multiple APIs, but we really only need enough data returned from one endpoint to show on our page?&lt;/p&gt;

&lt;p&gt;That is we need to resolve all of our promises no matter what, however we want to do something with the data from the first resolved promise and we don't care which promise is resolved first. &lt;/p&gt;

&lt;p&gt;To handle the data from the first resolved promise we can use &lt;code&gt;Promise.race()&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Promise.race()&lt;/code&gt; runs when the first of the promises you pass to it resolves, and it runs the attached callback just once, with the result of the first promise resolved.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;second&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;race&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// second&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#useful-packages-using-andor-simplifying-promises"&gt;
  &lt;/a&gt;
  Useful Packages Using and/or Simplifying Promises
&lt;/h3&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package//axios"&gt;Axios (wrapper for fetching data via promises)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.promisejs.org/"&gt;Promise (extends promises)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/fs-extra"&gt;FS-Extra (uses promises)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;




&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://cleancode.studio/clean-code"&gt;Clean Code&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cleancode.studio"&gt;Clean Code Studio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clean Code Studio - Clean Code Clean Life - Simplify!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>coding</category>
      <category>programming</category>
      <category>node</category>
    </item>
    <item>
      <title>Must-Know CSS Flexbox Responsive Multi-Column Layout Explained</title>
      <author>Raja Tamil</author>
      <pubDate>Mon, 02 Aug 2021 14:04:38 +0000</pubDate>
      <link>https://dev.to/hirajatamil/must-know-css-flexbox-responsive-multi-column-layout-explained-1lkd</link>
      <guid>https://dev.to/hirajatamil/must-know-css-flexbox-responsive-multi-column-layout-explained-1lkd</guid>
      <description>&lt;p&gt;In this article, I’ll be showing you how to easily create responsive multi-column mobile friendly layouts using CSS Flexbox.&lt;/p&gt;

&lt;p&gt;If you have a Shopify store, this article will help you design your product description page so that you don’t have to pay a monthly subscription fee for an app that does this.&lt;/p&gt;

&lt;p&gt;What are we building?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BfCOdTGz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flexbox-Mobile-First-Multi-Column-Layout-Explaind.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BfCOdTGz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flexbox-Mobile-First-Multi-Column-Layout-Explaind.gif" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A lot to cover, so let’s get started!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single Column Layout&lt;/li&gt;
&lt;li&gt;Two Column Flexbox Layout&lt;/li&gt;
&lt;li&gt;Two Column Reverse Flexbox Layout&lt;/li&gt;
&lt;li&gt;Two Column Mobile Layout&lt;/li&gt;
&lt;li&gt;Three Column Flexbox Layout&lt;/li&gt;
&lt;li&gt;Three Column Mobile Layout&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#single-column-layout"&gt;
  &lt;/a&gt;
  Single Column Layout
&lt;/h3&gt;

&lt;p&gt;The HTML code for the single column is pretty straight forward.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;!-- SINGLE COLUMN --&amp;gt;
&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"one-column"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;This beautiful 3-piece comforter set takes the guesswork out of coordinating colors and textures.&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.shopify.com/s/files/1/0506/3127/8767/files/301500x1500.jpg?v=1611944972"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The section is the top-level element that has three children elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;section&lt;/strong&gt; → is a block-level element that spans horizontally across the width of its parent in this case &lt;strong&gt;&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;h2&lt;/strong&gt; → is also a block level element and has a title content.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;img&lt;/strong&gt; → is an element where I pulled an image from the URL and set its src attribute (sometimes images comes with fixed width and height which may go beyond its parent width).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make the image fit to its parent width, add these couple of properties to the img CSS selector:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;width:100% → will fit the image to its parent width.&lt;/li&gt;
&lt;li&gt;height:auto → will adjust the image height proportionate to its width.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* ONE COLUMN */&lt;/span&gt;
&lt;span class="nc"&gt;.one-column&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the single column layout works right off the bat like the image below, even in the mobile view without using Flexbox. 🙂&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tx2DaId0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flexbox-Mobile-First-Multi-Column-Layout-Explained-Single-column.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tx2DaId0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flexbox-Mobile-First-Multi-Column-Layout-Explained-Single-column.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s nice!&lt;/p&gt;

&lt;p&gt;Now let’s take a look at how to create a two column layout using Flexbox.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Recommended&lt;/em&gt;&lt;br&gt;
&lt;a href="https://softauthor.com/css-make-a-div-height-full-screen/"&gt;&lt;em&gt;3 Ways To Make A Div Full Screen Using CSS&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#two-column-flexbox-layout"&gt;
  &lt;/a&gt;
  Two Column Flexbox Layout
&lt;/h3&gt;

&lt;p&gt;The two column HTML markup has a top-level section element with the class name two-column and of course two divs inside representing left and right columns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"two-column"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you know, div is a block-level element so the output with the above code looks like the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NLG_CI38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-without-flexbox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NLG_CI38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-without-flexbox.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make the two column layout, make both divs appear beside each other instead of below the other. &lt;/p&gt;

&lt;p&gt;Traditionally, we use inline-block or float to achieve this.&lt;/p&gt;

&lt;p&gt;With Flexbox, we can do it with a couple of CSS Flexbox properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;display:flex&lt;/li&gt;
&lt;li&gt;flex-direction:row → is a default behaviour that you often don’t need. It lays its children beside each other, which is exactly what we want to make the two columns.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* TWO COLUMN FLEXBOX */&lt;/span&gt;
&lt;span class="nc"&gt;.two-column&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aibWwEv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-with-flexbox-.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aibWwEv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-with-flexbox-.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This works.&lt;/p&gt;

&lt;p&gt;Now, let’s spread these two divs evenly to fill its parent width horizontally.&lt;/p&gt;

&lt;p&gt;To do that, add flex:1 css rule to the inner divs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* TWO COLUMN FLEXBOX */&lt;/span&gt;
&lt;span class="nc"&gt;.two-column&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I’ve also added the border to them just for viewing purposes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d9Oxoq8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-equal-width-column.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d9Oxoq8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-equal-width-column.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s add some content on the left column and an image on the right.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"two-column"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Comfy &lt;span class="ni"&gt;&amp;amp;amp;&lt;/span&gt; Cozy&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The ultra-soft &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;300 GSM &lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;hypoallergenic microfiber filling will keep you warm 🔥 for a better sleep during 🥶 cold nights.
      &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt; 
     &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.shopify.com/s/files/1/0506/3127/8767/files/2-1.jpg?v=1611450960"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The layout will look like this right away!&lt;/p&gt;

&lt;p&gt;And its not bad…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KS8Q58-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-left-content-right-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS8Q58-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-left-content-right-image.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s &lt;a href="https://softauthor.com/css-how-to-center-a-div-horizontally-vertically/"&gt;center the content horizontally and vertically&lt;/a&gt; using Flexbox.&lt;/p&gt;

&lt;p&gt;To do that, we need to add these three Flexbox CSS rules to the inner div:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Display:flex;&lt;/li&gt;
&lt;li&gt;Justify-content: center;&lt;/li&gt;
&lt;li&gt;Align-items: center;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* TWO COLUMN FLEXBOX */&lt;/span&gt;
&lt;span class="nc"&gt;.two-column&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;As you can see, I use nested 🕸 Flexbox which is more common when using Flexbox.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xEmIX_1Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-content-aligment-issue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xEmIX_1Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-content-aligment-issue.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wait…&lt;/p&gt;

&lt;p&gt;Something is messed up.&lt;/p&gt;

&lt;p&gt;Both the heading and paragraph are trying to be in the middle of the div horizontally and vertically.&lt;/p&gt;

&lt;p&gt;However, what we want is to keep them one below the other, probably the title at the top and the paragraph at the bottom. Let’s do this first before centering them.&lt;/p&gt;

&lt;p&gt;To do that, wrap both elements with a span element.&lt;/p&gt;

&lt;p&gt;This way, Flexbox properties will be applied to the span element instead of the heading and paragraph inside.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"two-column"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Comfy &lt;span class="ni"&gt;&amp;amp;amp;&lt;/span&gt; Cozy&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The ultra-soft &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;300 GSM &lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;hypoallergenic microfiber filling will keep you warm 🔥 for a better sleep during 🥶 cold nights.
      &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt; 
     &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.shopify.com/s/files/1/0506/3127/8767/files/2-1.jpg?v=1611450960"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, center the heading and paragraph text as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* TWO COLUMN FLEXBOX */&lt;/span&gt;
&lt;span class="nt"&gt;two-column&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;...&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tsVxOl0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-with-proper-alignment.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tsVxOl0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-with-proper-alignment.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This looks good!&lt;/p&gt;

&lt;p&gt;If you look at any landing page layouts, the second two column layout will have an image on the left and content on the right and so on.&lt;/p&gt;

&lt;p&gt;Let’s see how to do exactly that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://softauthor.com/css-flexbox-responsive-multi-column-layout/"&gt;Continue Reading...&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>programming</category>
    </item>
    <item>
      <title>How setup the Arduino IDE to use Luos</title>
      <author>Emanuel Allely</author>
      <pubDate>Mon, 02 Aug 2021 13:55:58 +0000</pubDate>
      <link>https://dev.to/emanuel_allely/how-setup-the-arduino-ide-to-use-luos-4p7e</link>
      <guid>https://dev.to/emanuel_allely/how-setup-the-arduino-ide-to-use-luos-4p7e</guid>
      <description>&lt;p&gt;🎥 Here is a "quick and dirty" video &lt;strong&gt;tutorial&lt;/strong&gt; showing how to set up the &lt;strong&gt;Arduino&lt;/strong&gt; IDE to use Luos with your Arduino and Genuino boards. 🎓 Luos is an &lt;strong&gt;open-source&lt;/strong&gt; project for &lt;strong&gt;embedded systems&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;➔ &lt;a href="https://youtu.be/Y-rUEB65EWw"&gt;https://youtu.be/Y-rUEB65EWw&lt;/a&gt;&lt;/p&gt;

</description>
      <category>arduino</category>
      <category>opensource</category>
      <category>embeddedsystems</category>
      <category>luos</category>
    </item>
    <item>
      <title>Web Performance Optimization- I</title>
      <author>Bipul Sharma</author>
      <pubDate>Mon, 02 Aug 2021 13:43:23 +0000</pubDate>
      <link>https://dev.to/bipul/web-performance-optimization-i-5d39</link>
      <guid>https://dev.to/bipul/web-performance-optimization-i-5d39</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Web performance is all about making web sites fast, including making slow processes seem fast. Good or bad website performance correlates powerfully to user experience, as well as the overall effectiveness of most sites. Websites and applications need to be fast and efficient for all users no matter what conditions the users are under. To make that happen we use performance optimizations. The MDN web docs breaks down performance optimization into four major areas. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Reducing overall load time&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compressing and minifying all files.&lt;/li&gt;
&lt;li&gt;Reducing the number of file and other HTTP requests sent back and forth between the server and the user agent.&lt;/li&gt;
&lt;li&gt;Employing advanced loading and caching techniques and conditionally serving the user with only what they need when they actually need it. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Making the site usable as soon as possible&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is done by loading critical components first to give the user initial content and functionality and then deferring less important features for later using lazy loading to request and display content only when the user gets to or interacts with it. And by pre-loading features, the user is likely to interact with next.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smoothness and Interactivity&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improving the perceived performance of a site through skeleton interfaces, visual loaders and clear indication that something is happening and things are going to work soon. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Performance measurements&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tools and metrics to monitor performance and validate up to station efforts. The thing to keep in mind here is that not every performance optimization will fit your solution and needs.&lt;/li&gt;
&lt;li&gt;Browser tools measuring performance include Lighthouse (Chrome), Network monitor, Performance monitor. There are also hosted third-party tools like PageSpeed Insights (Google), WebPage Test, GTMetrics(actually Lighthouse) which help measure performance. &lt;/li&gt;
&lt;li&gt;Key indicators that these tools use ro describe the performance are:

&lt;ul&gt;
&lt;li&gt;First paint- The time it takes before the user sees changes happening in the browser.
Largest Contentful Paint (LCP)- The time it takes before the user sees content, so text images, something else in the browser.&lt;/li&gt;
&lt;li&gt;First Meaningful Paint (FMP)- The time it takes before the user sees content that is actually meaningful. So when above the full content and web fonts are loaded and the user can derive meaning from what they are seeing.&lt;/li&gt;
&lt;li&gt;Time To Interactive- The time it takes before the content has finished loading and the UI can be interacted with so the user can actually click on buttons, fill forms or do whatever else is going to happen on the site. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The longer it takes for a site to hit each of these points, the higher the chance of the user either getting annoyed or abandoning the user experience altogether. So good performance is better for your visitors, better for you because you don't have to pay as much for your hosting, better for your Google rankings, and finally, better for the environment.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#critical-rendering-path-crp"&gt;
  &lt;/a&gt;
  Critical Rendering Path (CRP)
&lt;/h2&gt;

&lt;p&gt;To understand performance optimization, you first need a solid understanding of how typing something into the address bar of a browser results in the page being rendered in the viewport.&lt;/p&gt;

&lt;p&gt;It all starts with the browser sending a request for some site.com to its Internet Service Provider.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f8OUDPAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0whp661zstc0r2in69t5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f8OUDPAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0whp661zstc0r2in69t5.png" alt="Screenshot (137)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The ISP then sends the request immediately to a DNS domain name service, a phone book for the web which maps the website you're seeking to the address for the website.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JwfMXNu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u58mh7nmte2jxybxj6mb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JwfMXNu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u58mh7nmte2jxybxj6mb.png" alt="Screenshot (170)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This DNS lookup is done for each unique hostname. So if the site you're requesting is using externally hosted fonts, or JavaScript libraries, or images, or videos or other services, this DNS lookup happens for each of those different services. Anytime there's a new domain name, a new DNS lookup have to take effect. This is the first major performance bottleneck. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rZYEIRWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3hghlx511zhbazn2vlq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rZYEIRWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3hghlx511zhbazn2vlq.png" alt="Screenshot (171)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do away with some of this performance overhead, the domain name to IP address association will probably be cached at numerous different steps, your ISP will cached as information, it will also likely be cached in your router and on your computer. That way when you send a request to the same domain you requested before, instead of having to go through the whole DNS lookup again, we're just pulling a cache from somewhere closer to the computer, but that also means if the DNS has changed in the meantime, you'll get an incorrect address pointing and things won't work as expected.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fWAZOeuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tltlow5w40tulns4p1kk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fWAZOeuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tltlow5w40tulns4p1kk.png" alt="Screenshot (172)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the IP address is established, the browser and server now perform what's called a TCP handshake, where they exchange identity keys and other information to establish a temporary connection and working relationship. This is also where the type of connection is determined this is there's a regular HTTP connection or is it an encrypted HTTPS connection? If the latter, encryption keys are exchanged and if both the browser and the server support it, the transaction is updated from HTTP 1.1 to HTTP two, which provides substantial performance enhancements.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NtISzt9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osi7i9mutvo2m9whsbwn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NtISzt9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osi7i9mutvo2m9whsbwn.png" alt="Screenshot (173)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We now have a connection and everything is ready to go. At this point, the browser sends an HTTP GET request for the resource it's looking for. This initial GET request will be for whatever the default file on the server location is, typically index.html or index.php or index.js or something similar to that. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NAejy02n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6h8pwv8h7zdjtcf3r2yg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NAejy02n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6h8pwv8h7zdjtcf3r2yg.png" alt="Screenshot (174)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The time it takes for the browser to finally receive the first byte of the actual page it's looking for, is measured in time to first byte or TTFB. The first piece of data called the packet that the browser receives is always 14 kilobytes, then the packet size doubles with every new transfer. That means if you want something to happen right away, you need to cram it into those first 14 kilobytes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bBTIAIpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odb7h2rwyx1jghfc2w2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bBTIAIpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odb7h2rwyx1jghfc2w2q.png" alt="Screenshot (175)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The browser now gets a file an HTML document, and it starts reading it from top to bottom and then parsing that data. This means the HTML is turned into a DOM tree, the CSS is turned into a CSSOM tree and object model for the CSS of the page, which makes it possible for the browser to render the CSS for JavaScript to interact with it. And as the document is parsed, the browser also loads in any external assets as they are encountered. That means anytime it encounters a new CSS file, or reference to anything else, it'll send a new request, the server responds by sending the request back, then it gets placed into the system, and the browser starts rendering that as well. &lt;/p&gt;

&lt;p&gt;In the case of JavaScript, though, the browser stops everything else and waits for the file to be fully downloaded. Why? Because there's a good chance of JavaScript wants to make changes to either the DOM or the CSSOM or both. This is what's known as render blocking, whatever rendering was happening, stops and is literally blocked for as long as the browser is waiting for the JavaScript to be fully loaded and then fully executed. Once all of this parsing is done, the rendering can begin in earnest and here the browser combines the DOM and CSSOM to style, layout, paint and composite the document in the viewport. &lt;/p&gt;

&lt;p&gt;The metric time to first Contentful paint refers to how long it takes for all of this to happen. What's important for our purposes is to remember what's actually happening, that way we can identify bottlenecks and add performance enhancements to get past them as quickly as possible.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A2MOg_ce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h8l0bwdqztg0g6ibcei.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A2MOg_ce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h8l0bwdqztg0g6ibcei.png" alt="Screenshot (176)"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#optimizing-the-crp"&gt;
  &lt;/a&gt;
  Optimizing the CRP
&lt;/h2&gt;

&lt;p&gt;When you interact with content on the web today, you're using one of two different versions of the HTTP protocol, either the old HTTP/1.1 or the more modern HTTP/2. Which protocol version is in use has a significant impact on the performance of the site. In HTTP/1.1, all files requested by the browser are loaded synchronously, one after the other. So a typical HTML page with two style sheets, a couple of images, and some JavaScript would require the browser to first load the HTML document, then the CSS files, then the JavaScript files, and finally the image files one after the other. This is slow, inefficient, and a recipe for terrible performance.&lt;/p&gt;

&lt;p&gt;To work around this obvious issue, browsers cheat by opening up to six parallel connections to the server to pull down data. However, this creates what's known as head of line blocking, where the first file, the HTML file, holds back the rest of the files from downloading. It also puts enormous strain on the internet connection and the infrastructure, both the browser and the server, because you're now operating with six connections instead of one single connection. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---AkvJwhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6hsxf2tn03kp1ie86yk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---AkvJwhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6hsxf2tn03kp1ie86yk.png" alt="Screenshot (182)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In HTTP/2, we have what's known as multiplexing. The browser can download many separate files at the same time over one connection, and each download is independent of the others. That means with HTTP/2, the browser can start downloading a new asset as soon as it's encountered, and the whole process happens significantly faster.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YuM_Bcdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shimn8xvwxqtqhfecccn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YuM_Bcdr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shimn8xvwxqtqhfecccn.png" alt="Screenshot (177)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, for HTTP to work, a few key conditions need to be met. Number one, the server must support HTTP/2. Number two, the browser must also support HTTP/2. And number three, the connection must be encrypted over HTTPS. If any of these conditions are not met, the connection automatically falls back to HTTP/1.1. So bottom line, for instant performance improvements with minimal work, get an SSL certificate for your domain and ensure your server supports HTTP/2. &lt;/p&gt;

&lt;p&gt;Identifying which bottlenecks cause performance issues for you is the key to performance optimization.The server itself can contribute to poor performance.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6VmhW2cr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl8c6awbw7omopht157c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6VmhW2cr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl8c6awbw7omopht157c.png" alt="Screenshot (178)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next bottleneck is the connection made between the browser and the servers hosting the files necessary to render the page. For each of these connections, that whole DNS and TCP handshake loop needs to take place, which slows down the whole process.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8z0pDoGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gz6u2oj8o29vyhlmguvl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8z0pDoGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gz6u2oj8o29vyhlmguvl.png" alt="Screenshot (186)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How many files are downloaded and in what order those files are downloaded has an impact on performance.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zk4NvG2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzd5bc3pfe73ehmbu0yf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zk4NvG2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzd5bc3pfe73ehmbu0yf.png" alt="Screenshot (185)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Caching(or storing of assets) is also one of the methods for performance optimization. This can be done on the server, on the CDN or in the browser.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Caching on the Server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're running a site relying on server-side rendering, meaning each page or view is generated on the fly by the server when it is requested, caching may provide a huge performance boost. By enabling caching, the server no longer has to render the page every time the page is requested. &lt;br&gt;
Instead when the page is rendered, a snapshot of that page is created and then stored in the server cache. The next time a visitor then comes to the site, there'll be handed at this stored cached snapshot instead of a freshly rendered page. This is why static site generators have become so popular: they produce pre-rendered cacheable static pages and bypass the entire CMS service side rendering problem. The challenge with this type of caching is in dynamic features they have. Like every time a new comment is added, the cache needs to be cleared, and then the page has to be regenerated. Even so, caching should be enabled for all sites relying on server-side rendering because performance benefits are so significant.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Caching on the CDN&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CDNs are effectively external caching services for sites. CDNs can also do edge computing. Here, the CDN renders the page when requested and then caches it itself. This edge approach works well with modern static site generators like Gatsby and all JavaScript based site generators and frameworks because they serve up static assets by default, and are built to work in this modern web architecture. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Caching in the browser&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are two main things we can do here. One, store existing assets. So if the visitor returns to the site it already has all the information cached in the browser and two, push files to the browser early so by the time the browser requests the file, the files that are already sitting in the cache. All browsers do some level of caching automatically and also we can then instruct the browser on exactly how we want to handle caching of our assets. For assets that are unlikely to change such as main style sheets, JavaScript, and other images, long caches makes sense. For assets that are likely to change over time, short cache durations, or no cashing at all may make more sense.&lt;/p&gt;

&lt;p&gt;To ensure new and updated assets always make it to the visitor. We can use cache busting strategies like appending automatic hashes to file names or we can rely on the server itself to document the file name on file date for each file, and then do the caching automatically. You can also split up CSS and JavaScript files into smaller modules and when you update something in CSS or JavaScript, instead of having to recache an entire style sheet for an entire site, you're just recaching the module that has that update.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#prpl-and-performance-budget"&gt;
  &lt;/a&gt;
  PRPL and Performance Budget
&lt;/h2&gt;

&lt;p&gt;To achieve the best possible performance for your website or application always keep the &lt;strong&gt;PRPL&lt;/strong&gt; pattern in mind. &lt;br&gt;
This is an acronym that stands for:&lt;br&gt;
&lt;strong&gt;Push or preload&lt;/strong&gt; important resources to the browser using server push for the initial load and service workers in the next round, the application will run faster.&lt;br&gt;
&lt;strong&gt;Render&lt;/strong&gt; the initial route as soon as possible by serving the browser with critical CSS and JavaScript, the perceived performance of the application will be improved. &lt;br&gt;
&lt;strong&gt;Pre-cache&lt;/strong&gt; remaining assets so they are available when the browser needs them.&lt;br&gt;
&lt;strong&gt;Lazy load&lt;/strong&gt; all non-critical assets so they only load when they are actually needed, such that we reduce the time to initial load and save the visitor from wasting their bandwidth on assets they will never use. &lt;/p&gt;

&lt;p&gt;The number one metric that determines the performance of your site or app is its weight. &lt;br&gt;
&lt;strong&gt;Performance budget&lt;/strong&gt; gives you a metric to measure every new feature against and a tool to use when hard decisions need to be made. A performance budget may include limits on the total page weight, total image weight, number of HTTP requests, maximum number of fonts or images or external assets, et cetera.&lt;br&gt;
We now have tools that we can integrate into our build processes like Webpack's performance options, which you can get directly inside Webpack and Lighthouse's light wallet, which gives you the ability to test your builds against the performance budget at any time to get flags anytime your images are too big or your JavaScript is too big or your CSS is too big or anything else.&lt;/p&gt;

&lt;p&gt;Some best practice metrics for Performance budget are:   &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure that your site meets a speed index under three seconds. &lt;/li&gt;
&lt;li&gt;Time to interactive is under five seconds.&lt;/li&gt;
&lt;li&gt;The largest contentful paint is under one second&lt;/li&gt;
&lt;li&gt;The max potential first input delay is under 130 microseconds.&lt;/li&gt;
&lt;li&gt;The maximum size of the Gzipped JavaScript bundle is under 170kb.&lt;/li&gt;
&lt;li&gt;The total bundle size is under 250kb and that all of this happens on a low powered feature phone on 3G.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now these performance budget metrics are severe and really difficult to hit. They're also the metrics being used by tools like Lighthouse to test for performance.&lt;/p&gt;

&lt;p&gt;So the question here comes how to create a realistic Performance Budget?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build seperate performance budgets on slow networks and laptop/desktop devices on fast networks.&lt;/li&gt;
&lt;li&gt;Do performance audit.&lt;/li&gt;
&lt;li&gt;Set resonable goals based on audit.&lt;/li&gt;
&lt;li&gt;Test production version against perfomance budget.&lt;/li&gt;
&lt;li&gt;Do a competitor performance audit: make your performance goal better than your competitor.&lt;/li&gt;
&lt;li&gt;Test all work against Performance budget though Performance budget are unique to each project and will change overtime.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>performance</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>optimization</category>
    </item>
    <item>
      <title>How I Transitioned From an Intern to a Full-Time Software Developer</title>
      <author>Akash Eldo</author>
      <pubDate>Mon, 02 Aug 2021 13:40:47 +0000</pubDate>
      <link>https://dev.to/aeldo/how-i-transitioned-from-an-intern-to-a-full-time-software-developer-5ee6</link>
      <guid>https://dev.to/aeldo/how-i-transitioned-from-an-intern-to-a-full-time-software-developer-5ee6</guid>
      <description>&lt;p&gt;At this time last year, I was sitting in the corner of my bedroom with the lights off, trying not to wake up my little brother during my dev team’s standup. I was the lone intern in a (virtual) room of three senior software developers. Now, I’m a full-time software developer standing in a room (an actual room this time!) of senior developers, and my brother’s sleeping peacefully back home.&lt;/p&gt;

&lt;p&gt;Getting that full-time offer didn’t just happen. It required me to step outside my comfort zone and really challenge myself as a developer. Now that I’ve been working as a full-time software developer for a few months, I thought I’d share what I learned in the transition and what I did that got me promoted from intern to full-fledged developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ask-questions-no-matter-how-stupid"&gt;
  &lt;/a&gt;
  Ask Questions, No Matter How Stupid
&lt;/h2&gt;

&lt;p&gt;Starting an internship can be pretty daunting. You’re dropped into a group of very talented people and expected to contribute to a code base you know next to nothing about. You might feel intimidated and even a little dumb. I remember feeling so overwhelmed during the first week of my internship that I was sure they had made a mistake in hiring me.&lt;/p&gt;

&lt;p&gt;In a situation like this, you might hold back on asking a question for fear of feeling stupid. However, that’s the last thing you want to do. Asking questions is how you learn. It’s how all those talented people on your team became so talented, and by not asking a question, all you’re doing is delaying your knowledge gain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youre-a-code-owner-not-a-contributor"&gt;
  &lt;/a&gt;
  You’re a Code Owner, Not a Contributor
&lt;/h2&gt;

&lt;p&gt;I should probably explain the difference between a code owner and a code contributor first. Simply put, a contributor is someone who adds value to the code base. This usually takes the form of pull requests that add a new feature or fix a bug. An owner, on the other hand, is tasked with keeping the code base healthy by preventing code smells and bugs from being introduced. A good code owner should also help others contribute to the code base and follow best practices. Of course, an owner also contributes new code in addition to these responsibilities.&lt;/p&gt;

&lt;p&gt;As an intern, it was easy for me to fall into the contributor mindset — especially in the beginning when it felt like I was drowning in a sea of code without a life jacket. While the contributor mindset might be OK at first, it’s important to start thinking like an owner if you want to grow as a software developer. Read and re-read your team’s contributing guide or suggest they make one if it doesn’t exist. Take a look at the comments that senior developers leave on other people’s pull requests. Remember, you’re not just contributing code to a repo. You own the repo. It’s your responsibility to maintain code quality, prevent bugs, and keep the code base healthy. Don’t be afraid to make suggestions on PRs if you see some area for improvement or block them if you feel merging the PR will negatively impact the code base.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-a-lasting-contribution"&gt;
  &lt;/a&gt;
  Make a Lasting Contribution
&lt;/h2&gt;

&lt;p&gt;Think about ways you can improve the current situation. This could be improving the developer workflow, introducing new technologies, or anything else that will benefit your team even after your internship is over.&lt;/p&gt;

&lt;p&gt;For example, a few months into my internship, I found that our team’s deploy process was lacking. There were too many steps and there was too much room for human error. I figured a lot of the manual steps could be automated, so I created a Slack bot to handle the more tedious parts of our deploys. My fellow developers were all pretty excited when I demoed it to the team, and I was excited too because it gave me the opportunity to showcase my abilities. It’s been months since I built that bot, but it continues to provide value, as we still use it for our deploys.&lt;/p&gt;

&lt;p&gt;If you’re looking for a way to make a lasting contribution, a great option is to improve your team’s onboarding docs because they could always be better. Document what your onboarding process was like and any difficulties you had, and then share this information with your team. The next intern or new hire will almost certainly thank you for it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-yourself-heard"&gt;
  &lt;/a&gt;
  Make Yourself Heard
&lt;/h2&gt;

&lt;p&gt;You might be an intern, but that doesn’t mean you don’t have a voice. &lt;em&gt;Use it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Your main motivation behind doing an internship might be to learn new skills (or make that sweet 💸), but it’s equally important to share your thoughts and opinions with the rest of the team. For me, it was pretty intimidating to do this at first. I thought my feedback wouldn’t be helpful to a group of senior developers with more experience than me. Over time, however, I learned that they valued my input and I now frequently weigh in during discussions.&lt;/p&gt;

&lt;p&gt;Everyone has something valuable to contribute to the team, including you. One of the reasons companies hire interns in the first place is to cultivate new ideas. If you have some ideas that you think could be of benefit to others, don’t hesitate to voice them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-forget-to-spend-time-on-you"&gt;
  &lt;/a&gt;
  Don’t Forget To Spend Time on You
&lt;/h2&gt;

&lt;p&gt;Just because your team uses Scrum doesn’t mean you can only do what’s on the board. A lot of the work senior developers do never shows up in the sprint. Take some time to learn a new technology, improve your understanding of the code base, or whatever you think will improve your effectiveness as a software developer.&lt;/p&gt;

&lt;p&gt;Perhaps an example would be helpful. I was fortunate that my team already had a process for this called 10% time, where we could spend 10% of our time doing whatever we wanted. For me, this meant spending my Fridays learning new tools and frameworks. I might be a React developer, but on Fridays, I was learning mobile frameworks, building Slack bots, and messing around with new languages. Hell, I even spent one day learning how to code on the blockchain. While none of these things were directly related to my work, they helped build cross-field connections. This kind of cross-training can help you come up with innovative solutions that you wouldn’t have thought of otherwise. I can honestly say that the time I spent hacking away on Fridays has made me a better developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;Like the best internships, mine was filled with opportunities to learn new things and grow as a developer. I accomplished a lot, made plenty of mistakes, and most importantly, learned more than I could’ve ever anticipated thanks to an awesome team, manager, and group of coworkers. It’s because of their invaluable lessons that I’m the software developer I am today, and hopefully I was able to communicate at least a few of those lessons to you.&lt;/p&gt;

&lt;p&gt;Thanks for reading. Now go out there and make the most of your internship!&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>intern</category>
      <category>internship</category>
    </item>
    <item>
      <title>📖 Use Kedro Catalog Create to boost your pipeline development productivity.</title>
      <author>Waylon Walker</author>
      <pubDate>Mon, 02 Aug 2021 13:31:10 +0000</pubDate>
      <link>https://dev.to/waylonwalker/use-kedro-catalog-create-to-boost-your-pipeline-development-productivity-3d3f</link>
      <guid>https://dev.to/waylonwalker/use-kedro-catalog-create-to-boost-your-pipeline-development-productivity-3d3f</guid>
      <description>&lt;p&gt;I use &lt;code&gt;kedro catalog create&lt;/code&gt; to boost my productivity by automatically generating yaml catalog entries for me.  It will create new yaml files for each pipeline, fill in missiing catalog entries, and respect already existing&lt;br&gt;
catalog entries.  It will reformat the file, and sort it based on catalog key.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/waylonwalker" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Ukb2PhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Izxe95PY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/271838/95e313ca-39fc-4ee6-bf57-ad52b4dcf0d2.png" alt="waylonwalker"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/waylonwalker/what-is-kedro-lob" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🤷‍♀️ What is Kedro (The Parts)&lt;/h2&gt;
      &lt;h3&gt;Waylon Walker ・ Feb 24 '20 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#data&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#dataengineering&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#kedro&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#datascience&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;👆 Unsure what kedro is?  Check out this post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#running-kedro-catalog-create"&gt;
  &lt;/a&gt;
  Running Kedro Catalog Create
&lt;/h2&gt;

&lt;p&gt;The command to ensure there are catalog entries for every dataset in the passed in pipeline.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kedro catalog create &lt;span class="nt"&gt;--pipeline&lt;/span&gt; history_nodes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create's new yaml file, if needed&lt;/li&gt;
&lt;li&gt;Fills in new dataset entries with the default dataset&lt;/li&gt;
&lt;li&gt;Keeps existing datasets untouched&lt;/li&gt;
&lt;li&gt;it will reformat your yaml file a bit

&lt;ul&gt;
&lt;li&gt;default sorting will be applied&lt;/li&gt;
&lt;li&gt;empty newlines will be removed&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#confroot"&gt;
  &lt;/a&gt;
  CONF_ROOT
&lt;/h2&gt;

&lt;p&gt;Kedro will respect your &lt;code&gt;CONF_ROOT&lt;/code&gt; settings when it creates a new catalog file, or looks for existing catalog files.  You can change the location of your configuration files by editing your &lt;code&gt;CONF_ROOT&lt;/code&gt; variable in your projects.  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;settings.py&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# settings.py
# default settings
&lt;/span&gt;&lt;span class="n"&gt;CONF_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"conf"&lt;/span&gt;

&lt;span class="c1"&gt;# I like to package my configuration
&lt;/span&gt;&lt;span class="n"&gt;CONF_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s"&gt;"conf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;I prefer to keep my configuration packaged inside of my project.  This is partly due to how my team operates and deploys pipelines.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#file-location"&gt;
  &lt;/a&gt;
  File Location
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;kedro catalog create&lt;/code&gt; command will look for a &lt;code&gt;yaml&lt;/code&gt; file based on the name of the pipeline (&lt;code&gt;CONF_ROOT/catalog/&amp;lt;pipeline-name&amp;gt;.yml&lt;/code&gt;).  If it does not&lt;br&gt;
find one it will create one and make entries for each dataset in the pipeline. It will not look in all of your existing catalog files for entries, only the one in the exact file for your pipeline.  If you are going to use this command&lt;br&gt;
its important that you follow this pattern or copy what it generates into your own catalog file of choice.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠️ It will not look in all of your existing catalog files for entries, only the one in the exact file for your pipeline.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#memorydatasets"&gt;
  &lt;/a&gt;
  MemoryDataSet's
&lt;/h2&gt;

&lt;p&gt;When you run &lt;code&gt;kedro catalog create&lt;/code&gt; you get &lt;code&gt;MemoryDataSet&lt;/code&gt;, that's it.  As of &lt;code&gt;0.17.4&lt;/code&gt; its hard coded into the library and not configurable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;range12&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MemoryDataSet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#your-free-to-use-what-you-want-though"&gt;
  &lt;/a&gt;
  Your free to use what you want though
&lt;/h2&gt;

&lt;p&gt;Let's switch this dataset over to a &lt;code&gt;pandas.CSVDataSet&lt;/code&gt; so that the file gets stored and we can pick up  and read the file without re-running the whole pipeline.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;range12&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pandas.CSVDataSet&lt;/span&gt;
  &lt;span class="na"&gt;filepath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;data/range12.csv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#continue-adding-nodes"&gt;
  &lt;/a&gt;
  Continue adding nodes
&lt;/h2&gt;

&lt;p&gt;As we work we will keep adding nodes to our kedro pipeline, in this case we added another node that created a dataset called &lt;code&gt;range13&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kedro catalog create &lt;span class="nt"&gt;--pipeline&lt;/span&gt; history_nodes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After telling kedro to create new catalog entries for us we will see that it left our &lt;code&gt;range12&lt;/code&gt; entry alone and created &lt;code&gt;range13&lt;/code&gt; for us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;range12&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pandas.CSVDataSet&lt;/span&gt;
  &lt;span class="na"&gt;filepath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;data/range12.csv&lt;/span&gt;
&lt;span class="na"&gt;range13&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MemoryDataSet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#formatting-is-not-worthwhile"&gt;
  &lt;/a&gt;
  Formatting is not worthwhile
&lt;/h2&gt;

&lt;p&gt;If we decide this is too cramped for us we could add some space between datasets.  The next time we run &lt;code&gt;kedro catalog create&lt;/code&gt; empty lines will be&lt;br&gt;
removed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;range12&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pandas.CSVDataSet&lt;/span&gt;

&lt;span class="na"&gt;range13&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MemoryDataSet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#continuing-to-work"&gt;
  &lt;/a&gt;
  Continuing to work
&lt;/h2&gt;

&lt;p&gt;If we coninue adding new nodes, and tell kedro to create catalog entries again, all of our effort given to formatting will be lost.  I wouldn't worry about it unless you have an autoformatter that you can run on your yaml files.  The productivity gains in an semi-automated catalog are worth it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;range12&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pandas.CSVDataSet&lt;/span&gt;
  &lt;span class="na"&gt;filepath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;data/range12.csv&lt;/span&gt;
&lt;span class="na"&gt;range121&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MemoryDataSet&lt;/span&gt;
&lt;span class="na"&gt;range13&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MemoryDataSet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sorting-order"&gt;
  &lt;/a&gt;
  Sorting Order
&lt;/h2&gt;

&lt;p&gt;Notice the sorting order in the last entry, &lt;code&gt;range121&lt;/code&gt; comes before &lt;code&gt;range13&lt;/code&gt;. This is all based on how pythons &lt;code&gt;yaml.safe_dump&lt;/code&gt; works, kedro has set the &lt;code&gt;default_flow_style&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;.  You can see where they write your file in the source code currently &lt;a href="https://github.com/quantumblacklabs/kedro/blob/master/kedro/framework/cli/catalog.py#L202"&gt;here&lt;/a&gt; &lt;/p&gt;

</description>
      <category>kedro</category>
      <category>python</category>
      <category>datascience</category>
    </item>
  </channel>
</rss>
