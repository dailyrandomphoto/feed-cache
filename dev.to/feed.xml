<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Alternative Constructors in Python</title>
      <author>P0intMaN</author>
      <pubDate>Fri, 29 Oct 2021 15:27:43 +0000</pubDate>
      <link>https://dev.to/p0intman/alternative-constructors-in-python-58gb</link>
      <guid>https://dev.to/p0intman/alternative-constructors-in-python-58gb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#article-agenda"&gt;
  &lt;/a&gt;
  Article Agenda
&lt;/h2&gt;

&lt;p&gt;This post is dedicated towards understanding how we can create &lt;strong&gt;alternative constructors&lt;/strong&gt; in Python. Also, we would be taking a look at a real developmental scenario where I felt comfortable using it. To cut this short, we would be covering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#constructors"&gt;Constructors&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#alternative-constructors"&gt;Alternative Constructors&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#a-real-application-example"&gt;A Real Application Example&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Python OOPs has rocked the world with its &lt;strong&gt;simple yet stunning&lt;/strong&gt; flow of programming. Almost all the programs and software written in Python follow the OOPs paradigm. The OOP in Python is so modernized and enhanced that huge amount of developers are making a shift towards this amazing Programming language.&lt;/p&gt;

&lt;p&gt;In case you are wondering what an OOP is, I already have a &lt;strong&gt;&lt;a href="https://dev.to/p0intman/a-primer-on-object-oriented-programming-with-python-231g"&gt;Python OOP&lt;/a&gt;&lt;/strong&gt; post on this, which gives you a brief overview about it. You may want to give it a thorough read.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#constructors"&gt;
  &lt;/a&gt;
  Constructors
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ex78j93F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/foohjioacc2sj090jvw2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ex78j93F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/foohjioacc2sj090jvw2.png" alt="constructors" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Constructors by definition, is a &lt;strong&gt;subroutine designed to create an object in a particular class&lt;/strong&gt;. In layman's terms, a &lt;em&gt;method&lt;/em&gt;, which gets &lt;strong&gt;automatically called at the time of object creation and assists it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Constructors are like ordinary methods defined inside the class. The only difference being, we need &lt;strong&gt;not&lt;/strong&gt; call it explicitly. Programming languages automatically calls it while creating the object of the class.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;C++&lt;/strong&gt;, constructors have the &lt;strong&gt;same name&lt;/strong&gt; as the class name. For example (I know this is a Python tutorial, but I really felt the urge to show you the difference. So, here you go):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;          &lt;span class="c1"&gt;// Class name&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Constructor. Notice how its name is same as class name&lt;/span&gt;
    &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// I will be automatically executed during instantiation&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="c1"&gt;// instantiation.&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Python, this is &lt;strong&gt;not&lt;/strong&gt; the case. However, there is a &lt;em&gt;huge misconception&lt;/em&gt; out there:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-init-endraw-vs-raw-new-endraw-which-one-is-the-real-constructor"&gt;
  &lt;/a&gt;
  The &lt;code&gt;__init__()&lt;/code&gt; vs &lt;code&gt;__new__()&lt;/code&gt;. Which one is the real constructor?
&lt;/h3&gt;

&lt;p&gt;As opposed to a popular yet &lt;strong&gt;wrong&lt;/strong&gt; belief where &lt;strong&gt;&lt;code&gt;__init__()&lt;/code&gt; method is considered to be constructor, its actually the &lt;code&gt;__new__()&lt;/code&gt; method which is the constructor of the class&lt;/strong&gt;. To put it more clearly:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/strong&gt; : This method is called automatically to &lt;strong&gt;control&lt;/strong&gt; the object creation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/strong&gt; : This method is also called automatically during object creation, but this is more of an &lt;strong&gt;initializer method&lt;/strong&gt; which initializes the object attributes. That's why we used it in our OOPs concept (an earlier post), to initialize our object attributes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Moreover, if both &lt;strong&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/strong&gt; methods exist in the same class, then &lt;strong&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/strong&gt; is called first and then Python interpreter decides whether to call &lt;strong&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/strong&gt; or not. &lt;/p&gt;

&lt;p&gt;So, from the OOP standpoint, and from the above observations, it can be safely concluded that &lt;strong&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/strong&gt; is the &lt;strong&gt;real constructor&lt;/strong&gt;. But several Devs just want to stay out of this pandemonium. Therefore, instead of going after this &lt;strong&gt;&lt;em&gt;"init vs new thing"&lt;/em&gt;&lt;/strong&gt;, they adopted another way to create constructors, enter the &lt;em&gt;Alternative Constructors&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternative-constructors"&gt;
  &lt;/a&gt;
  Alternative Constructors
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oByu8e5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4oebat8xj8gbtvoimvd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oByu8e5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4oebat8xj8gbtvoimvd.png" alt="ac" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Alternative constructors are actually &lt;strong&gt;class methods&lt;/strong&gt; which serves the purpose of object creation. We hack the &lt;strong&gt;class methods&lt;/strong&gt; and command them to control the object creation. This is pretty similar to a constructor's (&lt;code&gt;__new__()&lt;/code&gt;'s) working. &lt;/p&gt;

&lt;p&gt;There is a convention for naming methods to be used as alternative constructors. All such methods should start with &lt;strong&gt;&lt;code&gt;from_&lt;/code&gt;&lt;/strong&gt;. For example, if I have a method say, &lt;strong&gt;&lt;code&gt;getDetails()&lt;/code&gt;&lt;/strong&gt; and if I were to make it an alternative constructor, then I would have to rename it as &lt;strong&gt;&lt;code&gt;from_getDetails()&lt;/code&gt;&lt;/strong&gt;. Although this is not necessary, but it is considered to be a good practice.&lt;/p&gt;

&lt;p&gt;The following snippet shows the basic syntax of defining alternative constructors (AC):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_alternativeConstructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;      &lt;span class="c1"&gt;# Alternative Constructor
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                           &lt;span class="c1"&gt;# returns object
&lt;/span&gt;
&lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_alternativeConstructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# calling AC
&lt;/span&gt;
&lt;span class="c1"&gt;# an object is crafted successfully due to the execution of AC
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-real-application-example"&gt;
  &lt;/a&gt;
  A Real Application Example
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zwn9F0HM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92dh8csug5o5sgg96e31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zwn9F0HM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92dh8csug5o5sgg96e31.png" alt="EXAMPLE" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
While I was developing a backend, I had a long list of strings. I had to come up with a way to convert these &lt;strong&gt;strings to objects&lt;/strong&gt;. Luckily, I had AC by my side and the task went on smoothly. In real world, you would get raw data like these. You would have to circumvent these obstacles and find a solution. &lt;/p&gt;

&lt;p&gt;The following snippet shows a demonstration of how I converted a long list of strings (but here, for the sake of simplicity, lets take a single string) and then converted it into objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Professor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from_getDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;      &lt;span class="c1"&gt;# Alternative Constructor
&lt;/span&gt;        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# split string and assign to variables
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="c1"&gt;# returns object
&lt;/span&gt;
&lt;span class="n"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Jack Robins,2233394,45"&lt;/span&gt;

&lt;span class="n"&gt;prof&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Professor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_getDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;details&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prof&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;prof&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;prof&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="c1"&gt;# prints --&amp;gt; "Jack Robins" 2233394 45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The string is now converted to an object and I can easily access it using its attributes. So, this was all about alternative constructors. One of the most interesting ways to bypass the basic working system of OOPs and also, exploiting the most out of it. After all, we are programmers, its in our DNA to exploit stuff and get things working for us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#would-you-like-to-support-me"&gt;
  &lt;/a&gt;
  Would You Like to Support Me?
&lt;/h2&gt;

&lt;p&gt;If you want to support me and my contents, then go ahead and consider doing it. I would highly appreciate that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UC1QZPervOHLiC4xpVnzbDFg"&gt;YouTube Channel&lt;/a&gt;: Home to all sorts of &lt;strong&gt;peculiar&lt;/strong&gt; tutos.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.github.com/P0intMaN"&gt;GitHub&lt;/a&gt;: Looking forward to your PR 😉&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Which came first work experience or the first tech job?</title>
      <author>Eliot Sanford</author>
      <pubDate>Fri, 29 Oct 2021 15:27:24 +0000</pubDate>
      <link>https://dev.to/techieeliot/which-came-first-work-experience-or-the-first-tech-job-946</link>
      <guid>https://dev.to/techieeliot/which-came-first-work-experience-or-the-first-tech-job-946</guid>
      <description>&lt;p&gt;How can anyone escape the tech chicken and the egg conundrum?&lt;/p&gt;

&lt;p&gt;Like so many people these days, one of the hardest things is to get that first tech job with no experience. Whether you're a recent college grad, bootcamp grad, or a self-taught code newbie, most of these people are having this issue finding that first job.&lt;/p&gt;

&lt;p&gt;It's the chicken and the egg problem. Which came first? It's the first job in tech and the lack of work experience problem. Which came first?&lt;/p&gt;

&lt;p&gt;How does anyone get a job without experience? They have no experience and no one is letting them get experience. How can anyone break in then?&lt;/p&gt;

&lt;p&gt;There are a few key ways to stop the chicken and the egg problems and the hang-ups that employers can have when hiring junior developers.&lt;/p&gt;

&lt;p&gt;One important way to gain some of traction with LinkedIn and your resume is to volunteer to get relevant tech experience. &lt;/p&gt;

&lt;p&gt;Review job descriptions for entry-level roles that you're applying for, then find ways to volunteer to gain primary skills related to those job descriptions. &lt;/p&gt;

&lt;p&gt;Make sure that when you volunteer that you put your best value into making it a success for the people that you've volunteered. Show up early. Stay late. Do things that no one wants to do, and make sure that you communicate through the issue. Find ways to reduce the burden on the leader. If no one is stepping up to lead, then step up and lead. Seek ways to fill into the gaps that employers want to see from you.&lt;/p&gt;

&lt;p&gt;If you're volunteering is 20+ hours per week, then it's worthy of "internship" work experience. If it's education, then it needs to be in the education section only. Aim to have tech volunteering experiences that can be put into work experience because it was worthy of internship work experience.&lt;/p&gt;

&lt;p&gt;Along the way, plug all your big win volunteer experiences into your resume and the featured section on LinkedIn. Ideally, you've got some front facing production code that you can be proud of and can give you conversation starters for interviews.&lt;/p&gt;

&lt;p&gt;Another important way to show your value is to learn how to tell your story well in written form and in conversation. Collect all your relevant experiences and make them shine.&lt;/p&gt;

&lt;p&gt;Giving anyone reviewing your resume and LinkedIn profile a reason to think, "this person is a noob" (even if it is true) is the quickest way to be dismissed.&lt;/p&gt;

&lt;p&gt;Give them reasons to believe that you're a professional with some valuable entry-level experience already.&lt;/p&gt;

&lt;p&gt;See ways to again volunteer and remove this stigma.&lt;/p&gt;

&lt;p&gt;Another great way to improve your chances of getting hired is through recommendations. Once you've finished that experience, seek feedback whether you brought them value. If they say "Thank you. You were amazing.", then don't be shy to ask for a recommendation and ask whether they know someone hiring. &lt;/p&gt;

&lt;p&gt;This step can remove doubts from employers that you're a noob that will need lots of hand-holding because others are saying that you're not a noob but a profession.&lt;/p&gt;

&lt;p&gt;Look at what they say about your skills and jot those down for yourself before you forget what you did. Add it to your LinkedIn and resume. Put those highlights into bullets.&lt;/p&gt;

&lt;p&gt;The last thing is being active in your network to build your reputation as a person worthy of a referral.&lt;/p&gt;

&lt;p&gt;Your network is filled with people that want to help you out. Get to know them. Find ways to help them out. Initially be genuine and seek nothing in return. Use the steps I've highlighted above and aim to be a helpful volunteer on a short-term basis.&lt;/p&gt;

&lt;p&gt;Sometimes those people don't have opportunities to share in the now, but six months later something comes up where they know of a junior developer role that would be perfect for someone looking to break in. Who might be top of their mind at that moment? Aim to make that person you.&lt;/p&gt;

&lt;p&gt;Build those experience to the next level, repeat. It won't happen overnight but start somewhere, then over time you'll build some experience and have better stories to tell in conversations with others in your network and in interviews.&lt;/p&gt;

&lt;p&gt;Seize the opportunities. Play this out and see where it can take you. You can do it.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>career</category>
      <category>beginners</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Electron Adventures: Episode 81: Ideas That Did Not Work</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Fri, 29 Oct 2021 15:24:57 +0000</pubDate>
      <link>https://dev.to/taw/electron-adventures-episode-81-ideas-that-did-not-work-g0i</link>
      <guid>https://dev.to/taw/electron-adventures-episode-81-ideas-that-did-not-work-g0i</guid>
      <description>&lt;p&gt;I'm back from my holidays, so it's time to do the final twenty episodes. But before I get back to coding, let's take a look back at some of the ideas I tried, which ended up not working.&lt;/p&gt;

&lt;p&gt;As the goal of the series is to write a post a day, I cannot spend too much time on an idea that's not working. I'm not saying none of these ideas are possible, just that the obstacles were too great, and after giving them a try, I ended up deciding to do something else instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#imba"&gt;
  &lt;/a&gt;
  Imba
&lt;/h3&gt;

&lt;p&gt;One thing I tried repeatedly is to do some episodes with &lt;a href="https://imba.io/"&gt;Imba&lt;/a&gt;. Imba 1 used to be my favorite frontend framework before I discovered Svelte.&lt;/p&gt;

&lt;p&gt;Then our paths diverged - Imba 2 is a major breaking change, that has been in alpha for two years now, and some of Imba 1 use cases are still not ready, sort of Angular 2 transition style. Meanwhile Svelte solves a lot of the same problems with a much less radical design, is stable, and is very popular.&lt;/p&gt;

&lt;p&gt;Still, I wanted to try writing a few small things in Imba 2. Unfortunately that didn't work out. &lt;code&gt;imba create&lt;/code&gt; even comes with Electron template, but that doesn't work at all. And trying to adapt its regular template to Electron, I ran into too many mysterious errors with Electron not being able to deal with preload etc.&lt;/p&gt;

&lt;p&gt;The problem is not with Imba as such, it's really with various boilerplates tying it to Electron, so I hope they fix it someday.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#opal-ruby"&gt;
  &lt;/a&gt;
  Opal Ruby
&lt;/h3&gt;

&lt;p&gt;Opal Ruby promises to run Ruby in the browser. It's actually in an awkward position, as it's not completely compatible with regular Ruby, making many changes to bring it closer to what JavaScript VM expects - such as making strings immutable, making all numbers floats, regexps being are just limited JavaScript regexps, no support for full Unicode etc. So it will run simple Ruby code, but no real hope of running any bigger codebase without major adaptations.&lt;/p&gt;

&lt;p&gt;On the other hand, these changes don't go far enough to provide seamless interoperability with the JavaScript world - especially browser APIs. Every JavaScript API needs an Opal wrapper, or it's a major pain to use. So Opal is much harder to use than "flavored JavaScript" languages like CoffeeScript or JSX.&lt;/p&gt;

&lt;p&gt;Not to mention a lot of changes it makes to bridge JavaScript - Ruby gap cost a lot of performance. And then there's the whole &lt;code&gt;under_score&lt;/code&gt; vs &lt;code&gt;camelCase&lt;/code&gt; mess.&lt;/p&gt;

&lt;p&gt;As a result, Opal Ruby has its use cases, but they're a lot narrower than the promise of "just run Ruby in a browser" would suggest.&lt;/p&gt;

&lt;p&gt;I tried to make an episode about it, but there was a bit too much fiddling with wrapper code, so I ended up dropping the idea.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-windowrequestanimationframe-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Window.requestAnimationFrame&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;There was a bunch of episodes when I tried to improve performance of the hex editor. One of such ideas was to do recalculations on &lt;code&gt;requestAnimationFrame&lt;/code&gt;, even though that's a bit messy in Svelte.&lt;/p&gt;

&lt;p&gt;I coded the whole thing, and discovered that it's completely unnecessary, as scroll events already debounce to correspond to exactly &lt;code&gt;requestAnimationFrame&lt;/code&gt; rate.&lt;/p&gt;

&lt;p&gt;That's a rare case where episode got derailed because something was too good, rather than not good enough.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wasm"&gt;
  &lt;/a&gt;
  WASM
&lt;/h3&gt;

&lt;p&gt;WASM promises to run any language in a browser. Those promises come with a lot of caveats. Compiled WASM has no direct access to browser APIs, and needs to talk to JavaScript wrappers. Its interoperability with JavaScript is quite painful - WASM code is limited to just passing numbers back and forth, even Strings aren't supported directly - because obviously JavaScript strings don't match what most other languages expect. And it needs to go through wrappers to even run its own code - for basic things like allocating memory it needs to go outside WASM code.&lt;/p&gt;

&lt;p&gt;The good thing is that WASM at least has better track record than Opal Ruby at running nontrivial codebases directly. The bad thing is that even hello world turns into an enormous mess of wrapper code, and after looking at it for a bit I decided I really don't want to be writing about it.&lt;/p&gt;

&lt;p&gt;I think WASM might be worth investigating someday, but it would take a lot more than one quick episode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-javascript-frameworks"&gt;
  &lt;/a&gt;
  Other JavaScript frameworks
&lt;/h3&gt;

&lt;p&gt;I wanted to do some episodes in a lot of different frameworks, but framework landscape is very sparse now. jQuery is the absolute winner form among the first generation of frameworks. React is the clear winner from among the second generation, with Vue and Angular being quite far behind. Svelte so far looks like the clear winner from among the current third generation. Everything else either faded away, or never had a chance.&lt;/p&gt;

&lt;p&gt;I did Marko and Malina, two frameworks you've likely never heard of, which try something interesting. And I guess D3 and Phaser are very sort of frameworks too. But when I was looking for other frameworks to try, it always felt like "well, nobody uses that anymore", or "well, nobody used that ever", and none of the early gen frameworks even look that interesting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-electron-alternatives"&gt;
  &lt;/a&gt;
  Other Electron alternatives
&lt;/h3&gt;

&lt;p&gt;I checked out a few direct alternatives to Electron like NW.js and Neutralino. There's a lot of them, but it's not clear they offer anything new. A lot of them use system browser instead of bundling Chromium, and that leads to so many compatibility issues to save a few MBs I have no idea why anyone would want to do that.&lt;/p&gt;

&lt;p&gt;One thing I thought I'd do but didn't really do much is try other UI frameworks. I tried NodeGui React (NodeGui Svelte wasn't working), which is Electron-like environment based on Qt, and it wasn't too bad.&lt;/p&gt;

&lt;p&gt;I thought about trying out other UIs like Glimmer, JavaFX, Tauri, Flutter, etc., but a lot of them require highly unfun languages like Rust, Dart, or Java; and a lot of them are non-reactive and require painful manual syncing of state and UI. I might still try a few in the remaining time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coming-soon"&gt;
  &lt;/a&gt;
  Coming soon...
&lt;/h3&gt;

&lt;p&gt;Let me know if there's anything you'd like to see me try before the series ends.&lt;/p&gt;

&lt;p&gt;In the next episodes I plan to give JRubyFX and Glimmer a try, as well as just write a few small Electron apps for fun. See you soon!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>electron</category>
    </item>
    <item>
      <title>Creating a Text-To-Speech program in Vanilla JS</title>
      <author>JS Bits with Bill</author>
      <pubDate>Fri, 29 Oct 2021 15:01:23 +0000</pubDate>
      <link>https://dev.to/js_bits_bill/creating-a-text-to-speech-program-in-vanilla-js-586l</link>
      <guid>https://dev.to/js_bits_bill/creating-a-text-to-speech-program-in-vanilla-js-586l</guid>
      <description>&lt;p&gt;If you haven't been too traumatized from using a Microsoft browser, you might have discovered Edge's built-in "Read Aloud" feature which will speak the highlighted text out loud right in your browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Vq-NV9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1635438522/JS%2520Bits/edge-text-to-speech_y88jdn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Vq-NV9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1635438522/JS%2520Bits/edge-text-to-speech_y88jdn.jpg" width="880" height="846"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As of now, Chrome has no such feature so we're going to build it ourselves! Here's the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSelection&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;utterance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SpeechSynthesisUtterance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;voice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFemaleVoice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Optional - select one of several voices&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFemaleVoice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;voiceIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVoices&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="nx"&gt;voiceIndex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So essentially we just pass in the string from &lt;code&gt;window.getSelection().toString()&lt;/code&gt; to a new instance of &lt;code&gt;SpeechSynthesisUtterance&lt;/code&gt; and call the &lt;code&gt;.speak()&lt;/code&gt; method and that's it!&lt;/p&gt;

&lt;p&gt;But we need a way to trigger our &lt;code&gt;speak()&lt;/code&gt; function. You could create a Chrome extension to add this functionality to the context menu but I've chosen to use DevTool's "Snippets" just to keep it simple. Snippets are your own custom saved scripts you can paste into your browser and run at will. They're super handy for utility functions like cookie getter/setters, JS libraries like Lodash or jQuery, custom UI modifications, etc. &lt;/p&gt;

&lt;p&gt;Once you create a snippet, you can run the code either by clicking "Run Snippet" or pressing Command/Control + Enter. You can also run them directly from the DevTools Command Menu. &lt;/p&gt;

&lt;p&gt;Snippets are located in the &lt;b&gt;Sources&lt;/b&gt; tab and then on the sidebar click "Snippets":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dD7x6veM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1635440825/JS%2520Bits/snippet_tnq2qw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dD7x6veM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1635440825/JS%2520Bits/snippet_tnq2qw.jpg" width="591" height="326"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We just need a bit more overhead to account for the asynchronous loading of &lt;code&gt;speechSynthesis.getVoices()&lt;/code&gt; so that our desired voice has loaded before the speech audio runs. The final code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;voiceLoaded&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;voiceschanged&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSelection&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;utterance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SpeechSynthesisUtterance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;voice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFemaleVoice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utterance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFemaleVoice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;voiceIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVoices&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="nx"&gt;voiceIndex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;voiceLoaded&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;speechSynthesis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVoices&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AtrkL5ZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1635441350/JS%2520Bits/text-to-speech-final_d0pssc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AtrkL5ZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1635441350/JS%2520Bits/text-to-speech-final_d0pssc.jpg" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now we can do the laundry and have our article read to us at the same time! 🔊&lt;/p&gt;




&lt;p&gt;&lt;b&gt;Yo!&lt;/b&gt; I post byte-sized tips like these often. Follow me if you crave more! 🍿&lt;/p&gt;

&lt;p&gt;I'm on &lt;a href="https://twitter.com/JS_Bits_Bill"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.tiktok.com/@js_bits"&gt;TikTok&lt;/a&gt; and I have a new &lt;a href="https://jsbits-yo.com/bug-bash/"&gt;debugging course&lt;/a&gt; dropping soon!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>1 line of code: How to get the closest numeric item of an Array </title>
      <author>martin krause</author>
      <pubDate>Fri, 29 Oct 2021 14:46:04 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-get-the-closest-numeric-item-of-an-array-1p2m</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-get-the-closest-numeric-item-of-an-array-1p2m</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const closestTo = (arr, number) =&amp;gt; arr.reduce((acc, current) =&amp;gt; (Math.abs(current - number) &amp;lt; Math.abs(acc - number) ? current : acc) ); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Returns the numerical item closest to the given number.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-repository-amp-npm-package"&gt;
  &lt;/a&gt;
  The repository &amp;amp; npm package
&lt;/h2&gt;

&lt;p&gt;You can find the all the utility functions from this series at &lt;a href="https://github.com/martinkr/onelinecode"&gt;github.com/martinkr/onelinecode&lt;/a&gt;&lt;br&gt;
The library is also published to &lt;a href="https://www.npmjs.com/package/@onelinecode/onelinecode"&gt;npm as @onelinecode&lt;/a&gt; for your convenience.&lt;/p&gt;

&lt;p&gt;The code and the npm package will be updated every time I publish a new article.&lt;/p&gt;




&lt;p&gt;Happy coding and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Highlights from VSCode 1.61</title>
      <author>Derek Ardolf</author>
      <pubDate>Fri, 29 Oct 2021 14:45:36 +0000</pubDate>
      <link>https://dev.to/dendron/highlights-from-vscode-161-25ij</link>
      <guid>https://dev.to/dendron/highlights-from-vscode-161-25ij</guid>
      <description>&lt;p&gt;The open source VSCode project, along with VSCodium&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;, completed their latest monthly release with v1.61&lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;. For those of us that haven't been using the Insider's Build,&lt;sup id="fnref3"&gt;&lt;a href="#fn3"&gt;3&lt;/a&gt;&lt;/sup&gt; it's time to look at what's new.&lt;/p&gt;

&lt;p&gt;As a bonus for this release, Microsoft held a little &lt;a href="https://www.youtube.com/watch?v=G4jjCN8uQAg"&gt;VSCode 1.61 Release Party&lt;/a&gt; on YouTube. Watch the recording, see the devs show off features, and feel like you were actually invited to a party!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#locked-editor-groups"&gt;
  &lt;/a&gt;
  Locked editor groups
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MHRwdTQH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://org-dendron-public-assets.s3.amazonaws.com/images/vscode-lock-groups.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MHRwdTQH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://org-dendron-public-assets.s3.amazonaws.com/images/vscode-lock-groups.gif" alt="Locked editor groups in Visual Studio Code" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: this is an &lt;strong&gt;experimental feature&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don't lose track of a file or terminal you are bouncing back-and-forth between in your gigantic list of editor tabs: use &lt;a href="https://code.visualstudio.com/updates/v1_61#_locked-editor-groups"&gt;locked editor groups&lt;/a&gt;. These prevent VSCode from opening more editor tabs in a group (a collection of tabs).&lt;/p&gt;

&lt;p&gt;I like this feature, as I'm often opening new files in the wrong area of the screen. I want those side-by-side, computer!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Release Party: &lt;a href="https://www.youtube.com/watch?v=G4jjCN8uQAg&amp;amp;t=1985s"&gt;Editor and workspace improvements demo&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#split-an-editor-without-creating-a-new-group"&gt;
  &lt;/a&gt;
  Split an editor without creating a new group
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0UB9au50--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://org-dendron-public-assets.s3.amazonaws.com/images/vscode-split-in-group.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0UB9au50--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://org-dendron-public-assets.s3.amazonaws.com/images/vscode-split-in-group.gif" alt="Split editors in groups in Visual Studio Code" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you find yourself looking at large files, and wish you could scroll down while staying in place elsewhere? Now you can, by doing the splits &lt;a href="https://code.visualstudio.com/updates/v1_61#_split-an-editor-without-creating-a-new-group"&gt;without creating a new group&lt;/a&gt;. Test it out with &lt;code&gt;View: Split Editor in Group&lt;/code&gt; in the command palette (&lt;code&gt;Ctrl+Shift+P&lt;/code&gt;) or with the keybinding shortcut: &lt;code&gt;Ctrl+K Ctrl+Shift+\&lt;/code&gt;. This is useful when converting pieces of code into functions, trimming fat, copy/pasting comment blocks, and whatever else your heart desires.&lt;/p&gt;

&lt;p&gt;No new group means not having yet another tab open in your editor!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Release Party: &lt;a href="https://www.youtube.com/watch?v=G4jjCN8uQAg&amp;amp;t=1985s"&gt;Editor and workspace improvements demo&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#webview-ui-toolkit-for-visual-studio-code"&gt;
  &lt;/a&gt;
  Webview UI Toolkit for Visual Studio Code
&lt;/h2&gt;

&lt;p&gt;For extension authors making use of the &lt;a href="https://code.visualstudio.com/api/extension-guides/webview"&gt;webview API&lt;/a&gt; for customizable views in the editor, life is about to become easier: say hello to the &lt;a href="https://code.visualstudio.com/updates/v1_61#_webview-ui-toolkit-for-visual-studio-code"&gt;Webview UI Toolkit&lt;/a&gt;. This is an open-source component library, providing Visual Studio Code design language, which matches the look and feel of VSCode/VSCodium. This is compatible with your tech stack of choice, bet it React, Vue, or OMGNewJSFramework!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/api/extension-guides/webview"&gt;Webview UI Toolkit Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/microsoft/vscode-webview-ui-toolkit"&gt;Webview UI Toolkit repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Release Party: &lt;a href="https://www.youtube.com/watch?v=G4jjCN8uQAg&amp;amp;t=858s"&gt;Webview UI Toolkit Demo&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#other-notables"&gt;
  &lt;/a&gt;
  Other notables
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;General tip: Wondering what shortcuts are configured in VSCode? One shortcut to rule them all: &lt;code&gt;Ctrl+K Ctrl+S&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Or &lt;code&gt;Ctrl+Shift+P&lt;/code&gt; -&amp;gt; &lt;strong&gt;Preferences: Open Keyboard Shortcuts&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Confusion was caused by a new telemetry config option, &lt;code&gt;telemetry.telemetryLevel&lt;/code&gt;, which would display that telemetry was enabled (even if it was previously disabled). The &lt;a href="https://github.com/microsoft/vscode/issues/134660"&gt;full discussion can be found on GitHub&lt;/a&gt;, which led to improvements being implemented in the &lt;code&gt;1.61.1&lt;/code&gt; update.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=G4jjCN8uQAg&amp;amp;t=170s"&gt;Platform-specific extensions&lt;/a&gt;: no longer try installing a MacOS-only extension on your Windows system, or vice-versa. That is, if the extension developer specifies the supported OS targets. This was previewed at the release party.&lt;/li&gt;
&lt;li&gt;I often came back to my laptop to find that &lt;a href="https://github.com/microsoft/vscode/issues/69665"&gt;my terminal was having a stroke in the VSCode editor&lt;/a&gt;. This seems to be resolved!&lt;/li&gt;
&lt;li&gt;The latest point releases&lt;sup id="fnref4"&gt;&lt;a href="#fn4"&gt;4&lt;/a&gt;&lt;/sup&gt; include fixes for other problems, such as &lt;a href="https://github.com/microsoft/vscode/issues/134757"&gt;high CPU consumption&lt;/a&gt;. Make sure to keep up-to-date!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I can't forget: want to take a look at VSCode in your web browser, without installing a thing? These are called &lt;em&gt;Virtual Workspaces&lt;/em&gt;, such as &lt;a href="https://vscode.dev/"&gt;vscode.dev&lt;/a&gt; and &lt;a href="https://github.dev/"&gt;github.dev&lt;/a&gt;. Reference the &lt;a href="https://code.visualstudio.com/blogs/2021/10/20/vscode-dev"&gt;VSCode Blog Post on vscode.dev&lt;/a&gt; for a full rundown on bringing VSCode to the browser.&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;a href="https://vscodium.com/"&gt;Checkout VSCodium&lt;/a&gt;, for the truly MIT-licensed version of the VSCode IDE (with telemetry/tracking disabled). &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;&lt;a href="https://code.visualstudio.com/updates/v1_61"&gt;VSCode release notes for 1.61&lt;/a&gt;, along with release notes for previous monthly releases. &lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;The &lt;a href="https://code.visualstudio.com/insiders"&gt;VSCode Insiders Build&lt;/a&gt; allows users to get VSCode with new features as soon as they are available, rather than at the monthly cadence. &lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn4"&gt;
&lt;p&gt;Issues resolved in point releases, referred to as "Recovery" releases, can be found on GitHub: &lt;a href="https://github.com/microsoft/vscode/issues?q=is%3Aissue+milestone%3A%22September+2021+Recovery%22+is%3Aclosed"&gt;&lt;code&gt;1.61.1&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/microsoft/vscode/issues?q=is%3Aissue+milestone%3A%22September+2021+Recovery+2%22+is%3Aclosed"&gt;&lt;code&gt;1.61.2&lt;/code&gt;&lt;/a&gt;. &lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>vscode</category>
      <category>tooling</category>
      <category>codenewbie</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to Build OR Queries With Active Record
</title>
      <author>Nicholas Dill</author>
      <pubDate>Fri, 29 Oct 2021 14:30:02 +0000</pubDate>
      <link>https://dev.to/nicholasdill/how-to-build-or-queries-with-active-record-4ce7</link>
      <guid>https://dev.to/nicholasdill/how-to-build-or-queries-with-active-record-4ce7</guid>
      <description>&lt;p&gt;There are a couple of ways to recreate the SQL &lt;code&gt;OR&lt;/code&gt; operator with Ruby on Rails and Active Record.&lt;/p&gt;

&lt;p&gt;Here's how.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#checking-a-single-column-for-multiple-values"&gt;
  &lt;/a&gt;
  Checking a Single Column For Multiple Values
&lt;/h2&gt;

&lt;p&gt;First, if you want to pull records where a certain column can be multiple values you won't need to use the &lt;code&gt;OR&lt;/code&gt; SQL operator.&lt;/p&gt;

&lt;p&gt;Instead, pass a list of the accepted values to Active Record and it will use the SQL &lt;code&gt;IN&lt;/code&gt; operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;column: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate SQL the looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;column&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This pattern is extremely common and very practical. A couple of real examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;role: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:admin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:mod&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="no"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;tags: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ruby_tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rails_tag&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;comment_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# append selected comment ids&lt;/span&gt;
&lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="n"&gt;comment_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#checking-multiple-columns-for-multiple-values"&gt;
  &lt;/a&gt;
  Checking Multiple Columns For Multiple Values
&lt;/h2&gt;

&lt;p&gt;If we need to check multiple columns, we can't get away with using the SQL &lt;code&gt;IN&lt;/code&gt; operator anymore.&lt;/p&gt;

&lt;p&gt;Instead, we need to leverage the full strength and flexibility of &lt;code&gt;OR&lt;/code&gt; queries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-or-operator-in-rails-5"&gt;
  &lt;/a&gt;
  Using the OR Operator in Rails 5+
&lt;/h3&gt;

&lt;p&gt;Rails 5 introduced the OR condition in Active Record.&lt;/p&gt;

&lt;p&gt;Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;category: &lt;/span&gt;&lt;span class="s2"&gt;"featured"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;promoted: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's how to use it:&lt;/p&gt;

&lt;p&gt;We break down our 2 acceptable conditions into individual queries. In this case, we want to fetch all the posts with a &lt;code&gt;category&lt;/code&gt; set to "featured" and then also pull all the posts that have their &lt;code&gt;promoted&lt;/code&gt; field set to true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;category: &lt;/span&gt;&lt;span class="s2"&gt;"featured"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;promoted: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You then call Active Record's &lt;code&gt;.or&lt;/code&gt; method on the first query, and pass it the second query as an argument.&lt;/p&gt;

&lt;p&gt;Here's the SQL output you would get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'featured'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;promoted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! You'll get results the match either condition in your query.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-or-operator-in-rails-4-and-below"&gt;
  &lt;/a&gt;
  Using the OR Operator in Rails 4 and Below
&lt;/h3&gt;

&lt;p&gt;Earlier versions of Rails don't have support for &lt;code&gt;OR&lt;/code&gt; queries in Active Record, but you can still pass raw SQL to your where conditions.&lt;/p&gt;

&lt;p&gt;Here's how that would look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"category = ? or promoted = ?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"featured"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're curious about the &lt;code&gt;?&lt;/code&gt; syntax above, this is a technique to protect your database against SQL injection attacks. More on that next.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#preventing-sql-injection-attacks"&gt;
  &lt;/a&gt;
  Preventing SQL Injection Attacks
&lt;/h2&gt;

&lt;p&gt;It would be irresponsible to not give a quick overview of how you might expose yourself to SQL injection attacks.&lt;/p&gt;

&lt;p&gt;If you're not familiar, it's a vulnerability where user input is passed directly into your database queries. If you unintentionally allow this, the user can purposely input malicious SQL code into the input. And that SQL will be run on your database.&lt;/p&gt;

&lt;p&gt;If we don't substitute variables in our query and instead pass them directly, we might expose our entire database to the user.&lt;/p&gt;

&lt;p&gt;It works like this.&lt;/p&gt;

&lt;p&gt;When you pass a variable to a &lt;code&gt;where&lt;/code&gt; clause directly, it will pass the variable to the database as-is.&lt;br&gt;
If the user has malicious intent, they can pass unescaped strings directly to your database and wreak havoc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't do this:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"category = &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:category&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can't guarantee the input you get from &lt;code&gt;params[:category]&lt;/code&gt; is safe for your database.&lt;/p&gt;

&lt;p&gt;When you pass strings as the second argument in the &lt;code&gt;where&lt;/code&gt; method, Active Record does the proper escaping needed to protect your database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Better example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"category = ?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:featured&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;Active Record is super powerful and gives you multiple ways to construct your OR query.&lt;/p&gt;

&lt;p&gt;A quick note on the SQL outputs though - what you see here should be similar to what your Rails app generates, but it will depend on the database adapter your app is using. Different databases have subtle differences and unfortunately, they aren't all exactly the same. But this is why we have Active Record! It abstracts away that complexity and gives a simple way to interface with any database.&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Formik Components.</title>
      <author>YoussefZidan</author>
      <pubDate>Fri, 29 Oct 2021 14:29:28 +0000</pubDate>
      <link>https://dev.to/youssefzidan/formik-components-54n0</link>
      <guid>https://dev.to/youssefzidan/formik-components-54n0</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;a href="#formik-components"&gt;Formik Components&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#login-form-with-formik-components"&gt;Login Form With Formik Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#formik-reusable-components"&gt;Formik Reusable Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#formik-components"&gt;
  &lt;/a&gt;
  Formik Components
&lt;/h2&gt;

&lt;p&gt;Formik provides a few Components to be used that will save us more time, reduce code duplication, and make the code more consistent and organized.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#login-form-with-formik-components"&gt;
  &lt;/a&gt;
  Login Form With Formik Components
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Import &lt;code&gt;Formik&lt;/code&gt;, &lt;code&gt;Form&lt;/code&gt;, &lt;code&gt;Field&lt;/code&gt; and &lt;code&gt;ErrorMessage&lt;/code&gt; from &lt;code&gt;formik&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Wrap and return the entire form inside &lt;code&gt;&amp;lt;Formik&amp;gt;&lt;/code&gt; Component with &lt;code&gt;formik&lt;/code&gt; as a parameter.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;initialValues&lt;/code&gt;, &lt;code&gt;onSubmit&lt;/code&gt; and &lt;code&gt;validationSchema&lt;/code&gt; as &lt;strong&gt;Props&lt;/strong&gt; to &lt;code&gt;&amp;lt;Formik&amp;gt;&lt;/code&gt; Component.&lt;/li&gt;
&lt;li&gt;Replace the native &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element with the &lt;code&gt;&amp;lt;Form&amp;gt;&lt;/code&gt; Component.&lt;/li&gt;
&lt;li&gt;Wrap and return the &lt;code&gt;label&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt;, and the &lt;code&gt;validation div message&lt;/code&gt; inside &lt;code&gt;&amp;lt;Field&amp;gt;&lt;/code&gt; with &lt;code&gt;formikField&lt;/code&gt; as a parameter.&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;name&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;Field&amp;gt;&lt;/code&gt; component instead of the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element.&lt;/li&gt;
&lt;li&gt;spread &lt;code&gt;{...formikField.field}&lt;/code&gt; inside the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element.&lt;/li&gt;
&lt;li&gt;Wrap and return the &lt;code&gt;validation div&lt;/code&gt; inside &lt;code&gt;&amp;lt;ErrorMessage&amp;gt;&lt;/code&gt; component with &lt;code&gt;ErrMessage&lt;/code&gt; as a parameter and add the &lt;code&gt;name&lt;/code&gt; attribute to it.&lt;/li&gt;
&lt;li&gt;log &lt;code&gt;formikField&lt;/code&gt; inside a &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; to see the entire &lt;code&gt;formikField&lt;/code&gt; object.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Formik&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ErrorMessage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;formik&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * LoginFormikComponents Component
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LoginFormikComponents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;rememberMe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validationSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Please enter a valid email address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email field is required&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Password field is required&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Formik&lt;/span&gt;
      &lt;span class="na"&gt;initialValues&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;initialValues&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;validationSchema&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;validationSchema&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Field&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formikField&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
                      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        email
                      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;formikField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorMessage&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errMessage&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                          &lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ErrorMessage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formikField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
                  &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Field&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formikField&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
                      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        password
                      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
                        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;
                        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;
                        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;formikField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorMessage&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errMessage&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                          &lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ErrorMessage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formikField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
                  &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Field&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"rememberMe"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formikField&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
                      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"rememberMe"&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        remember me
                      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
                        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;
                        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"rememberMe"&lt;/span&gt;
                        &lt;span class="na"&gt;defaultChecked&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formikField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;formikField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formikField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
                  &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;submit&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formik&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Formik&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;LoginFormikComponents&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#formik-reusable-components"&gt;
  &lt;/a&gt;
  Formik Reusable Components
&lt;/h2&gt;

&lt;p&gt;As we can see inside each &lt;code&gt;&amp;lt;Field&amp;gt;&lt;/code&gt; component there are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ErrorMessage&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, it's a good chance to create a Reusable Component that includes all of that.&lt;/p&gt;

&lt;p&gt;FormikErrorMessage.jsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ErrorMessage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;formik&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * FormikErrorMessage Component
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FormikErrorMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorMessage&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errMessage&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ErrorMessage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;FormikErrorMessage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;FormikField.jsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Field&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;formik&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FormikErrorMessage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./FormikErrorMessage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * FormikField Component
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FormikField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Field&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formikField&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
              &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;formikField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;defaultChecked&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formikField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormikErrorMessage&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formikField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;FormikField&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is the final code after using the reusable components.&lt;/p&gt;

&lt;p&gt;LoginFormikComponentsShared.jsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Formik&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;formik&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FormikField&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./shared/FormikField&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * LoginFormikComponents Component
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LoginFormikComponents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;rememberMe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validationSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Please enter a valid email address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email field is required&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Password field is required&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Formik&lt;/span&gt;
      &lt;span class="na"&gt;initialValues&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;initialValues&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;validationSchema&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;validationSchema&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormikField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Email"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormikField&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormikField&lt;/span&gt;
                &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Remember Me"&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"rememberMe"&lt;/span&gt;
                &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;
              &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;submit&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formik&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Formik&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;LoginFormikComponents&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>formik</category>
      <category>components</category>
      <category>reusable</category>
      <category>react</category>
    </item>
    <item>
      <title>Emoticons to emojis again, with live typing</title>
      <author>Nam Phạm</author>
      <pubDate>Fri, 29 Oct 2021 14:22:33 +0000</pubDate>
      <link>https://dev.to/namdx1987/emoticons-to-emojis-again-with-live-typing-ipl</link>
      <guid>https://dev.to/namdx1987/emoticons-to-emojis-again-with-live-typing-ipl</guid>
      <description>&lt;p&gt;Last time, I covered &lt;a href="https://dev.to/namdx1987/using-strings-replaceall-function-to-convert-emoticons-into-emojis-7b8"&gt;Using string's replaceAll function to convert emoticons into emojis&lt;/a&gt; and hope you enjoy. This time, we improve the functionality with live typing emoticons upon &lt;code&gt;&amp;lt;input/&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;textarea/&amp;gt;&lt;/code&gt; will result in emojis. As you can see, in many situations, this live typing is much more pleasant then having to convert the whole text to emojis so here we go. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-ui"&gt;
  &lt;/a&gt;
  The UI
&lt;/h3&gt;

&lt;p&gt;Copy the code here to your main html file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, viewport-fit=cover"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"apple-mobile-web-app-capable"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Emoticons to Emojis&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"regex.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"run.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Emoticons to Emojis live typing
        &lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Type emoticons in the textarea below to see emojis :D&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"live"&lt;/span&gt; &lt;span class="na"&gt;rows=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt; &lt;span class="na"&gt;cols=&lt;/span&gt;&lt;span class="s"&gt;"80"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-the-helper-library"&gt;
  &lt;/a&gt;
  Get the helper library
&lt;/h3&gt;

&lt;p&gt;My script I write use a regex builder from &lt;a href="https://github.com/wyantb/js-regex"&gt;https://github.com/wyantb/js-regex&lt;/a&gt; so grab the script file at &lt;a href="https://github.com/wyantb/js-regex/raw/master/regex.js"&gt;https://github.com/wyantb/js-regex/raw/master/regex.js&lt;/a&gt; and put it into directory. Its name is regex.js as referenced by the html.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-main-script-file"&gt;
  &lt;/a&gt;
  Create the main script file
&lt;/h3&gt;

&lt;p&gt;Create a &lt;code&gt;run.js&lt;/code&gt; file and copy the following code to it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;emoticons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🙃&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🙂&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:')&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🥲&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:))&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;😂&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;=))&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🤣&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;;)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;😉&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:D&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;😀&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:P&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;😋&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;😎&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;😗&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🙁&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:'(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;😥&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:((&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;😭&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:o&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;😮&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;:(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;😠&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;:-(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;😡&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;either&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emoticons&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;literals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endEither&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mlength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emoticons&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getEmoji&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emoticon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emoticon&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;emoticons&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;emoticons&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;emoticon&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cvE2E&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getEmoji&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputType&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;insertText&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionEnd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;mlength&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSelectionRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionEnd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;replaced&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cvE2E&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionEnd&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRangeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;replaced&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionEnd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleInput&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DOMContentLoaded&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;live&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#understand-how-it-works"&gt;
  &lt;/a&gt;
  Understand how it works
&lt;/h2&gt;

&lt;p&gt;To do live typing emoticons to emojis, we will have to attach a listener to the &lt;code&gt;input&lt;/code&gt; event of the &lt;code&gt;input&lt;/code&gt; or &lt;code&gt;textarea&lt;/code&gt;, thus the &lt;code&gt;install&lt;/code&gt; and &lt;code&gt;handleInput&lt;/code&gt; functions. Every time user inputs a blank space, we will extract the text, convert any emoticons found to emojis and put it back into the element. About the replacing, you can read my previous article (link above) to grab the main idea. This time, the idea is basically the same but we have to do a little trick to improve the performance. Rather than extract the whole text, we will extract a short sub string from input position indicated by the &lt;code&gt;selectionEnd&lt;/code&gt; property. To know the length, we will have to iterate through the &lt;code&gt;emoticons&lt;/code&gt; object's keys to find the max length of the emoticons (remember to increase it to 1 to also count the blank space inserted) and store it to the &lt;code&gt;mlength&lt;/code&gt; constant. So now, when user insert a blank space, just extract the sub string with &lt;code&gt;mlength&lt;/code&gt; characters from the inserted position backward and do the replacement. After that, just put the text back and you have the live typing result.&lt;/p&gt;

&lt;p&gt;Again, hope you enjoy the article and have fun typing emoticons^^&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>emoticons</category>
      <category>emojis</category>
      <category>fun</category>
    </item>
    <item>
      <title>Rails: Prevent users from logging out after each deployment</title>
      <author>Can Olcer</author>
      <pubDate>Fri, 29 Oct 2021 14:08:33 +0000</pubDate>
      <link>https://dev.to/canolcer/rails-prevent-users-from-logging-out-after-each-deployment-3ag9</link>
      <guid>https://dev.to/canolcer/rails-prevent-users-from-logging-out-after-each-deployment-3ag9</guid>
      <description>&lt;p&gt;Here's a quick one, and it may be obvious to some of you but I didn't know about it. I noticed that my Rails app (&lt;a href="https://fugu.lol"&gt;Fugu&lt;/a&gt;) kept logging out all users after every deployment.&lt;/p&gt;

&lt;p&gt;First, I thought it's an issue with Devise, but it turns out that it's related to a variabled called &lt;code&gt;secret_key_base&lt;/code&gt; that Rails uses to sign and encrypt cookies (among other things).&lt;/p&gt;

&lt;p&gt;For production, there are multiple places to define &lt;code&gt;secret_key_base&lt;/code&gt;. A glance at the &lt;a href="https://github.com/rails/rails/blob/9f980664fc1bc1fb9845e17d2c5a9ab710156303/railties/lib/rails/application.rb#L411-L419"&gt;Rails soure code&lt;/a&gt; shows that Rails looks for it in &lt;code&gt;ENV["SECRET_KEY_BASE"]&lt;/code&gt;, &lt;code&gt;credentials.secret_key_base&lt;/code&gt;, or &lt;code&gt;secrets.secret_key_base&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In my case, I hadn't set up any credentials or secrets, nor was I providing an environment variable.&lt;/p&gt;

&lt;p&gt;Digital Ocean (and, &lt;a href="https://blog.heroku.com/container_ready_rails_5#secret_key_base"&gt;as it looks, Heroku&lt;/a&gt;) automatically sets the &lt;code&gt;SECRET_KEY_BASE&lt;/code&gt; environment variable for you, and it changes with every deployment. And this was the problem. After each deployment, my Rails app couldn't decrypt the existing session cookies anymore beause &lt;code&gt;secret_key_base&lt;/code&gt; had a different value, and my users needed to log in again.&lt;/p&gt;

&lt;p&gt;To solve the problem, just provide a &lt;code&gt;SECRET_KEY_BASE&lt;/code&gt; environment variable in your production server. The simplest way to generate it is to run &lt;code&gt;rake secret&lt;/code&gt; in your terminal (make sure you're in a Rails project folder).&lt;/p&gt;

</description>
      <category>rails</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>I just bought 👩‍💻👨‍💻.to! </title>
      <author>InHuOfficial</author>
      <pubDate>Fri, 29 Oct 2021 14:07:26 +0000</pubDate>
      <link>https://dev.to/inhuofficial/i-own-to-2lkc</link>
      <guid>https://dev.to/inhuofficial/i-own-to-2lkc</guid>
      <description>&lt;p&gt;Yes, you read that right, I now own &lt;a href="https://%F0%9F%91%A9%E2%80%8D%F0%9F%92%BB%F0%9F%91%A8%E2%80%8D%F0%9F%92%BB.to"&gt;👩‍💻👨‍💻.to&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Now for a split second you may have thought I meant dev.to - of course not, I don't want a 5(6) character long domain, it is way too long! &lt;strong&gt;I want a 4(5) character domain! 😉&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But you can copy and paste &lt;br&gt;
&lt;br&gt;&lt;br&gt;
👩‍💻👨‍💻.to &lt;br&gt;
&lt;br&gt;&lt;br&gt;
into the URL bar and you will end up at my DEV profile...and that is pretty weird and fun!  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-buy-an-emoji-domain"&gt;
  &lt;/a&gt;
  Why buy an Emoji domain?
&lt;/h2&gt;

&lt;p&gt;A sensible answer to that question is that you shouldn't buy an Emoji domain! &lt;/p&gt;

&lt;p&gt;They are not very useful, they end up changing to horrible sets of character codes as the domain name ("xn--qq8hb0wb.to" is the actual domain I bought!) and they are not very professional.&lt;/p&gt;

&lt;p&gt;However I don't care about such things, I want something silly and fun to play with and I like to do weird and wonderful things on the internet...so why not buy an emoji domain, something different!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What next?
&lt;/h2&gt;

&lt;p&gt;I don't really know, it was a silly Friday thing to do, I mean...who buys emoji domains?&lt;/p&gt;

&lt;p&gt;If anyone has any good ideas for what to do with the domain then let me know!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-see-what-problems-it-causes"&gt;
  &lt;/a&gt;
  Let's see what problems it causes
&lt;/h3&gt;

&lt;p&gt;Next step is to set up an email account for the domain. &lt;/p&gt;

&lt;p&gt;I can't wait to see if I can actually set my email address to g@👩‍💻👨‍💻.to as that would be hilarious!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#over-to-you"&gt;
  &lt;/a&gt;
  Over to you!
&lt;/h2&gt;

&lt;p&gt;So have you ever bought an emoji domain? &lt;/p&gt;

&lt;p&gt;Can you think of a good use for my domain? &lt;/p&gt;

&lt;p&gt;Do you think emoji domains will ever catch on?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>🚀10 Trending projects on GitHub for web developers - 29th October 2021</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 29 Oct 2021 13:53:58 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-29th-october-2021-5fao</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-29th-october-2021-5fao</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-sucrase"&gt;
  &lt;/a&gt;
  1. Sucrase
&lt;/h3&gt;

&lt;p&gt;Sucrase is an alternative to Babel that allows super-fast development builds. Instead of compiling a large range of JS features to be able to work in Internet Explorer, Sucrase assumes that you're developing with a recent browser or recent Node.js version.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/alangpierce"&gt;
        alangpierce
      &lt;/a&gt; / &lt;a href="https://github.com/alangpierce/sucrase"&gt;
        sucrase
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Super-fast alternative to Babel for when you can target modern JS runtimes
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Sucrase&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/alangpierce/sucrase/actions"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r81JGWUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/alangpierce/sucrase/workflows/All%2520tests/badge.svg" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/sucrase" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9360f5dddf9122a70204b05ee91699c6ce02895e02e4239be71f532f7d8bc3b1/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f737563726173652e737667" alt="npm version"&gt;&lt;/a&gt;
&lt;a href="https://packagephobia.now.sh/result?p=sucrase" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/57d713d129dfb30cb780b3cee094c24806df4a4dc817a78d2a181c192469a229/68747470733a2f2f7061636b61676570686f6269612e6e6f772e73682f62616467653f703d73756372617365" alt="Install Size"&gt;&lt;/a&gt;
&lt;a href="https://github.com/alangpierce/sucraseLICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/7dbff64e38b71a331d5ccd52e1416f007350ce0eede615805f828a339a6ff8d8/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f657870726573732e7376673f6d61784167653d32353932303030" alt="MIT License"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/sucrasejs/Lobby" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5dbac0213da25c445bd11f168587c11a200ba153ef3014e8408e462e410169b3/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667" alt="Join the chat at https://gitter.im/sucrasejs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://sucrase.io" rel="nofollow"&gt;Try it out&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Sucrase is an alternative to Babel that allows super-fast development builds
Instead of compiling a large range of JS features to be able to work in Internet
Explorer, Sucrase assumes that you're developing with a recent browser or recent
Node.js version, so it focuses on compiling non-standard language extensions
JSX, TypeScript, and Flow. Because of this smaller scope, Sucrase can get away
with an architecture that is much more performant but less extensible and
maintainable. Sucrase's parser is forked from Babel's parser (so Sucrase is
indebted to Babel and wouldn't be possible without it) and trims it down to a
focused subset of what Babel solves. If it fits your use case, hopefully Sucrase
can speed up your development experience!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sucrase has been extensively tested.&lt;/strong&gt; It can successfully build
the &lt;a href="https://benchling.com/" rel="nofollow"&gt;Benchling&lt;/a&gt; frontend code
&lt;a href="https://github.com/babel/babel"&gt;Babel&lt;/a&gt;
&lt;a href="https://github.com/facebook/react"&gt;React&lt;/a&gt;,
&lt;a href="https://github.com/palantir/tslint"&gt;TSLint&lt;/a&gt;,
&lt;a href="https://github.com/apollographql/apollo-client"&gt;Apollo client&lt;/a&gt;, and
&lt;a href="https://github.com/decaffeinate/decaffeinate"&gt;decaffeinate&lt;/a&gt;
with all…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/alangpierce/sucrase"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#2-react-hooks-in-svelte"&gt;
  &lt;/a&gt;
  2. React Hooks in Svelte
&lt;/h3&gt;

&lt;p&gt;React hook examples ported to Svelte&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/joshnuss"&gt;
        joshnuss
      &lt;/a&gt; / &lt;a href="https://github.com/joshnuss/react-hooks-in-svelte"&gt;
        react-hooks-in-svelte
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      React hook examples ported to Svelte
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
React Hooks in Svelte&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://reactjs.org/docs/hooks-intro.html" rel="nofollow"&gt;React Hook&lt;/a&gt; examples ported to &lt;a href="https://svelte.dev" rel="nofollow"&gt;Svelte&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;
useState&lt;/h1&gt;
&lt;p&gt;In Svelte, &lt;code&gt;const [varName, set] = useState(initialValue)&lt;/code&gt; becomes &lt;code&gt;let varName = initialValue&lt;/code&gt;. The setter function is replaced with JavaScript's assignment operator &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/joshnuss/react-hooks-in-svelte/use-state/react/src/Counter.js"&gt;React example&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/joshnuss/react-hooks-in-svelte/use-state/svelte/src/Counter.svelte"&gt;Svelte example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/joshnuss/react-hooks-in-svelte/images/useState.jpeg?raw=true"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b2py0iGy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/joshnuss/react-hooks-in-svelte/images/useState.jpeg%3Fraw%3Dtrue" alt="Diff of useState"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
useEffect&lt;/h1&gt;
&lt;p&gt;In React, there are 3 ways to &lt;code&gt;useEffect()&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;With &lt;code&gt;null&lt;/code&gt; dependencies: &lt;code&gt;useEffect(fn)&lt;/code&gt;. This runs on every render.&lt;/li&gt;
&lt;li&gt;With an empty array as dependencies: &lt;code&gt;useEffect(fn, [])&lt;/code&gt;. This runs during mount, and cleanup function runs on unmount.&lt;/li&gt;
&lt;li&gt;With a list of dependency vars: &lt;code&gt;useEffect(fn, [a, b, c])&lt;/code&gt;. This reavaulates whenever a dependency changes. The cleanup runs whenever dependencies change and during unmount.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is an example of #2, where the callback runs when component is mounted and cleanup runs when unmounted.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/joshnuss/react-hooks-in-svelte/use-effect/react/src/Timer.js"&gt;React example&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/joshnuss/react-hooks-in-svelte/use-effect/svelte/src/Timer.svelte"&gt;Svelte example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/joshnuss/react-hooks-in-svelte/images/useEffect.png?raw=true"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wjEhqmGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/joshnuss/react-hooks-in-svelte/images/useEffect.png%3Fraw%3Dtrue" alt="Diff of useEffect"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
useMemo&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/joshnuss/react-hooks-in-svelte/use-memo/react/src/Fibonacci.js"&gt;React example&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/joshnuss/react-hooks-in-svelte/use-memo/svelte/src/Fibonacci.svelte"&gt;Svelte example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In Svelte, all reactive statements are memoized. Instead of &lt;code&gt;const var = useMemo(() =&amp;gt; expression, dependencies)&lt;/code&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/joshnuss/react-hooks-in-svelte"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#3-hiring-without-whiteboards"&gt;
  &lt;/a&gt;
  3. Hiring Without Whiteboards
&lt;/h3&gt;

&lt;p&gt;A list of companies (or teams) that don't do "whiteboard" interviews. "Whiteboards" is used as a metaphor, and is a symbol for the kinds of CS trivia questions that are associated with bad interview practices.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/poteto"&gt;
        poteto
      &lt;/a&gt; / &lt;a href="https://github.com/poteto/hiring-without-whiteboards"&gt;
        hiring-without-whiteboards
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      ⭐️  Companies that don't have a broken hiring process
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Hiring Without Whiteboards&lt;/h1&gt;
&lt;p&gt;A list of companies (or teams) that don't do "whiteboard" interviews. "Whiteboards" is used as a metaphor, and is a &lt;em&gt;symbol&lt;/em&gt; for the kinds of CS trivia questions that are associated with bad interview practices. Whiteboards are not bad – CS trivia questions are. Using sites like HackerRank/LeetCode &lt;em&gt;probably&lt;/em&gt; fall into a similar category.&lt;/p&gt;
&lt;p&gt;The companies and teams listed here use interview techniques and questions that resemble day-to-day work. For example, pairing on a real world problem or a paid/unpaid take home exercise. Read (and contribute to) &lt;a href="https://github.com/poteto/hiring-without-whiteboardsRECOMMENDATIONS.md"&gt;our recommendations&lt;/a&gt; for ways to conduct better interviews.&lt;/p&gt;
&lt;h3&gt;
tl;dr&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Discussing a real world problem (with or without whiteboard) is 👍
&lt;/li&gt;
&lt;li&gt;Solving CS trivia, technical puzzles, riddles, brainteasers (with or without whiteboard) is 👎
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://twitter.com/dhh/status/834146806594433025?lang=en" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/53ef818d50ab6a1d1f01206bfd31fd09733aa0a12589cee581435baa8d2fc2c5/68747470733a2f2f692e696d6775722e636f6d2f784a56366346342e706e67" width="500"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please open a &lt;a href="https://github.com/poteto/hiring-without-whiteboards/pull/new/master"&gt;PR&lt;/a&gt; to be added.&lt;/p&gt;
&lt;h3&gt;
Duds&lt;/h3&gt;
&lt;p&gt;If you've been through an interview with one of these companies recently, and your experience suggests otherwise from their…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/poteto/hiring-without-whiteboards"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#4-fragstore"&gt;
  &lt;/a&gt;
  4. Fragstore
&lt;/h3&gt;

&lt;p&gt;Tiny (~800 B), easy and simple library to manage your React state. After a store update -&amp;gt; only components that use the updated property are rendered.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/aralroca"&gt;
        aralroca
      &lt;/a&gt; / &lt;a href="https://github.com/aralroca/fragstore"&gt;
        fragstore
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Tiny (~800 B), easy and simple library to manage your React state.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Fragstore
&lt;/h1&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://github.com/aralroca/fragstorelogo.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XtSuGO82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aralroca/fragstorelogo.svg" width="200" alt="Fragstore"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
    Tiny (~800 B), easy and simple (P)React &lt;b&gt;state management library&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
    After a store update -&amp;gt; &lt;b&gt;only&lt;/b&gt; components that use the &lt;b&gt;updated property&lt;/b&gt; are rendered
&lt;/p&gt;

&lt;div&gt;
&lt;p&gt;&lt;a href="https://badge.fury.io/js/fragstore" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/934ba99378bb76f571ad6b35379154feebf92ab966f1a10f9cfa60a83d6ea75e/68747470733a2f2f62616467652e667572792e696f2f6a732f6672616773746f72652e737667" alt="npm version"&gt;&lt;/a&gt;
&lt;a href="http://makeapullrequest.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0ff11ed110cfa69f703ef0dcca3cee6141c0a8ef465e8237221ae245de3deb3d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265" alt="PRs Welcome"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/aralroca/fragstore#contributors-"&gt;&lt;img src="https://camo.githubusercontent.com/3f29481ce9ea7caed48cceaa0255584ec5519f38b00fec3f5aaf7d9aff3cb5c8/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f616c6c5f636f6e7472696275746f72732d342d6f72616e67652e7376673f7374796c653d666c61742d737175617265" alt="All Contributors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;a href="https://twitter.com/intent/follow?screen_name=aralroca" rel="nofollow"&gt;
&lt;img src="https://camo.githubusercontent.com/ad08569dece2b4c4a3968cadc1e70cd32f370ac07741ac403decf4eaf5ae4121/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f6172616c726f63613f7374796c653d736f6369616c266c6f676f3d74776974746572" alt="follow me on Twitter"&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;h2&gt;
Getting started:&lt;/h2&gt;

&lt;p&gt;Install it with Yarn:&lt;/p&gt;

&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;yarn add fragstore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or install it with Npm:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;npm install fragstore --save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;
Usage:&lt;/h2&gt;
&lt;h3&gt;
Store&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Store&lt;/code&gt; is an optional component where you can send the same parameters than the &lt;code&gt;createStore&lt;/code&gt;. Sometimes can be useful, for example, when the initial store is defined by an API, or also if you want to change some component state (not store) after some callback.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s1"&gt;createStore&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;"fragstore"&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; Store &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;createStore&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;function&lt;/span&gt; &lt;span class="pl-v"&gt;App&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;Store&lt;/span&gt; &lt;span class="pl-c1"&gt;store&lt;/span&gt;&lt;span class="pl-c1"&gt;=&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt; 
      &lt;span class="pl-c1"&gt;username&lt;/span&gt;: &lt;span class="pl-s"&gt;"Aral"&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
      &lt;span class="pl-c1"&gt;age&lt;/span&gt;: &lt;span class="pl-c1"&gt;31&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
    &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-c"&gt;/* rest */&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt; 
    &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;Store&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Fragmented store (meaning of Fragstore)&lt;/h3&gt;
&lt;p&gt;The power of…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/aralroca/fragstore"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#5-frontendcollection"&gt;
  &lt;/a&gt;
  5. FrontEndCollection
&lt;/h3&gt;

&lt;p&gt;Notes for Front-end Software Engineers. Covers common data structure and algorithms, basic web concepts, HTML &amp;amp; CSS &amp;amp; Javascript.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/cheatsheet1999"&gt;
        cheatsheet1999
      &lt;/a&gt; / &lt;a href="https://github.com/cheatsheet1999/FrontEndCollection"&gt;
        FrontEndCollection
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Notes for Front-end Software Engineers. Covers common data structure and algorithms, basic web concepts, HTML &amp;amp; CSS &amp;amp; Javascript.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
FrontEndCollection (Keep updating, hopefully...)&lt;/h1&gt;
&lt;h2&gt;
Web Development Basics&lt;/h2&gt;
&lt;h3&gt;
HTML&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/2"&gt;1. What happens when you type in a URL&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/4"&gt;2. GET vs POST&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/5"&gt;3. What can we do to improve a website's performance?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/6"&gt;4. HTML5 offline storage mechanism&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/9"&gt;5. Common time and space-complexity&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/11"&gt;6. What has been deprecated, and what is new on HTML5?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/18"&gt;7. How the DOM really works?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/27"&gt;8. Inline elements, Block elements, and what are the differences?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/28"&gt;9. Several ways to call a function&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/29"&gt;10. A brief introduction of the differences between "src" and "href"&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/30"&gt;11. A brief introduction of Call, Apply, Bind&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/9"&gt;12. Time and space complexity for common sorting algorithm&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
CSS&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/37"&gt;1. What is the difference between display:none and visibility:hidden style?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/38"&gt;2. What is BFC(Block Formatting Context)&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Demo&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/17"&gt;1. Accordion 🪗&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/23"&gt;2. ModalBox 💬&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/tree/main/JS-Day/DrumKit"&gt;3. Drum Kit 🥁&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/tree/main/JS-Day/Mini%20Clock"&gt;4. Mini Clock 🕑&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/siyuan25/FrontEndCollection/tree/main/JS-Day/Playing%20with%20Variables"&gt;5. Playing with Variables 🎩&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Deep Dive in Javascript&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://bigfrontend.dev/" rel="nofollow"&gt;&lt;em&gt;Learn More on BFE.dev&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/cheatsheet1999/FrontEndCollection/issues/33"&gt;1. Implement Curry()&lt;/a&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/cheatsheet1999/FrontEndCollection"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#6-ml5"&gt;
  &lt;/a&gt;
  6. ml5
&lt;/h3&gt;

&lt;p&gt;ml5.js aims to make machine learning approachable for a broad audience of artists, creative coders, and students. The library provides access to machine learning algorithms and models in the browser, building on top of TensorFlow.js.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ml5js"&gt;
        ml5js
      &lt;/a&gt; / &lt;a href="https://github.com/ml5js/ml5-library"&gt;
        ml5-library
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Friendly machine learning for the web! 🤖 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;strong&gt;Read our &lt;a href="https://github.com/ml5js/Code-of-Conduct"&gt;ml5.js Code of Conduct and software licence&lt;/a&gt; here!&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;
&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/10605821/41332516-2ee26714-6eac-11e8-83e4-a40b8761e764.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2SOuEvMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/10605821/41332516-2ee26714-6eac-11e8-83e4-a40b8761e764.png" alt="ml5"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/ml5js/ml5-library#contributors"&gt;&lt;img src="https://camo.githubusercontent.com/3318f00ef918cb0690e1e56bf673adb63a7fbe293d9096a4c5d07d3a95394e36/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f616c6c5f636f6e7472696275746f72732d38362d6f72616e67652e7376673f7374796c653d666c61742d737175617265" alt="All Contributors"&gt;&lt;/a&gt; &lt;a href="https://automate.browserstack.com/public-build/eEtiK0lGeGpGZ2svSGd0WWJnclo3SGtxdEZ5anFmOE4zaFRyOUJkTFhHbz0tLWo1eUNzd0hpQUZjR2Rya0hIQjhIUHc9PQ==--45955c1082b17348f534b62689f945967b4e459e" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e17d620795a5d302b883b42bf60bf27f1d8312b7b444aa4ed9f3f48bac14269d/68747470733a2f2f6175746f6d6174652e62726f77736572737461636b2e636f6d2f62616467652e7376673f62616467655f6b65793d654574694b306c47654770475a3273765347643057574a6e636c6f335347747864455a35616e466d4f45347a614652794f554a6b54466848627a30744c576f3165554e7a6430687051555a6a5232527961306849516a68495548633950513d3d2d2d34353935356331303832623137333438663533346236323638396639343539363762346534353965" alt="BrowserStack Status"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/ml5" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/10da8104277e42a78fcee01c4ac107e6ccf9d9eee622b80572c2f39731e9a5dc/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6d6c352e7376673f7374796c653d666c61742d737175617265" alt="Version"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/ml5js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f19fd2bc29150331a184d6d06fd4d8aa8070424e1b9849d7bb2087546d861029/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f657370616472696e652e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f77" alt="Twitter Follow"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;This project is currently in development.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
Friendly machine learning for the web!&lt;/h2&gt;
&lt;p&gt;ml5.js aims to make machine learning approachable for a broad audience of artists, creative coders, and students. The library provides access to machine learning algorithms and models in the browser, building on top of &lt;a href="https://js.tensorflow.org/" rel="nofollow"&gt;TensorFlow.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The library is supported by code examples, tutorials, and sample data sets with an emphasis on ethical computing. Bias in data, stereotypical harms, and responsible crowdsourcing are part of the documentation around data collection and usage.&lt;/p&gt;
&lt;p&gt;ml5.js is heavily inspired by &lt;a href="https://processing.org/" rel="nofollow"&gt;Processing&lt;/a&gt; and &lt;a href="https://p5js.org/" rel="nofollow"&gt;p5.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please read our &lt;a href="https://github.com/ml5js/Code-of-Conduct"&gt;Code of Conduct&lt;/a&gt;, which establishes our commitment to make ml5.js a friendly and welcoming environment.&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;Before getting started with ml5.js, review our &lt;a href="https://github.com/ml5js/Code-of-Conduct"&gt;Code of Conduct&lt;/a&gt;. There are several ways you can use the ml5.js library:&lt;/p&gt;


&lt;ul&gt;
&lt;li&gt;You can use the latest version…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ml5js/ml5-library"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-typescript-boilerplate-for-2021"&gt;
  &lt;/a&gt;
  7. TypeScript Boilerplate for 2021
&lt;/h3&gt;

&lt;p&gt;A modern TypeScript project setup, for Node.js and browsers (using esbuild).&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/metachris"&gt;
        metachris
      &lt;/a&gt; / &lt;a href="https://github.com/metachris/typescript-boilerplate"&gt;
        typescript-boilerplate
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A modern TypeScript project setup, for Node.js and browsers (using esbuild).
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
TypeScript Boilerplate for 2021&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/metachris/typescript-boilerplate/actions?query=workflow%3A%22Build+and+test%22"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bn5iR8ya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/metachris/typescript-boilerplate/workflows/Lint%2520and%2520test/badge.svg" alt="Build and test status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TypeScript project boilerplate with modern tooling, for Node.js programs, libraries and browser modules. Get started quickly and right-footed 🚀&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/" rel="nofollow"&gt;TypeScript 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Optionally &lt;a href="https://esbuild.github.io/" rel="nofollow"&gt;esbuild&lt;/a&gt; to bundle for browsers (and Node.js)&lt;/li&gt;
&lt;li&gt;Linting with &lt;a href="https://github.com/typescript-eslint/typescript-eslint"&gt;typescript-eslint&lt;/a&gt; (&lt;a href="https://palantir.github.io/tslint/" rel="nofollow"&gt;tslint&lt;/a&gt; is deprecated)&lt;/li&gt;
&lt;li&gt;Testing with &lt;a href="https://jestjs.io/docs/getting-started" rel="nofollow"&gt;Jest&lt;/a&gt; (and &lt;a href="https://www.npmjs.com/package/ts-jest" rel="nofollow"&gt;ts-jest&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Publishing to npm&lt;/li&gt;
&lt;li&gt;Continuous integration (&lt;a href="https://docs.github.com/en/actions"&gt;GitHub Actions&lt;/a&gt; / &lt;a href="https://docs.gitlab.com/ee/ci/" rel="nofollow"&gt;GitLab CI&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Automatic API documentation with &lt;a href="https://typedoc.org/guides/doccomments/" rel="nofollow"&gt;TypeDoc&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See also the introduction blog post: &lt;strong&gt;&lt;a href="https://www.metachris.com/2021/03/bootstrapping-a-typescript-node.js-project/" rel="nofollow"&gt;Starting a TypeScript Project in 2021&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
Getting Started&lt;/h2&gt;

&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Clone the repository (you can also click "Use this template")&lt;/span&gt;
git clone https://github.com/metachris/typescript-boilerplate.git your_project_name
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; your_project_name

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Edit `package.json` and `tsconfig.json` to your liking&lt;/span&gt;
...

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Install dependencies&lt;/span&gt;
yarn install

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Now you can run various yarn commands:&lt;/span&gt;
yarn cli
yarn lint
yarn &lt;span class="pl-c1"&gt;test&lt;/span&gt;
yarn build-all
yarn ts-node &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;filename&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;
yarn esbuild-browser
...&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Take a look at all the scripts in &lt;a href="https://github.com/metachris/typescript-boilerplate/blob/master/package.json"&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;For publishing to npm, use &lt;code&gt;yarn publish&lt;/code&gt; (or…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/metachris/typescript-boilerplate"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#8-react-hooks-for-material-ui"&gt;
  &lt;/a&gt;
  8. React hooks for Material UI
&lt;/h3&gt;

&lt;p&gt;React hooks for Material UI. For each state, each hook accepts an optional default state and returns a state-setting utility function.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/CharlesStover"&gt;
        CharlesStover
      &lt;/a&gt; / &lt;a href="https://github.com/CharlesStover/use-mui"&gt;
        use-mui
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      React hooks for Material UI
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
React hooks for Material UI&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/use-mui" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/272e5b0e36242613686c90b9984a9187bd58825c0220844f40261ba8a2f15991/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f7573652d6d75692e737667" alt="version"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/use-mui" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/61d657292cb6ab580a6017c26c7191259491f07ff7cdfc3c66d239ed43a8f2f4/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e7a69702f7573652d6d75692e737667" alt="minzipped size"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/use-mui" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/81d3c64d029dd3674b0a12dc62ab5c0acc98eb0f1d400d97a094df66ffe74440/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f7573652d6d75692e737667" alt="downloads"&gt;&lt;/a&gt;
&lt;a href="https://github.com/CharlesStover/use-mui/actions/workflows/push.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EeLWczbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/CharlesStover/use-mui/actions/workflows/push.yml/badge.svg" alt="GitHub Action: Push"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;npm install use-mui&lt;/code&gt; or&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yarn add use-mui&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Supported components&lt;/h2&gt;
&lt;p&gt;For each state, each hook accepts an optional default state and returns a
state-setting utility function (that you should not need but is available to fit
any edge cases your may have). For example: a component with a &lt;code&gt;value&lt;/code&gt; prop will
have an accompanying hook with an optional &lt;code&gt;defaultValue&lt;/code&gt; parameter property and
&lt;code&gt;setValue&lt;/code&gt; state property; a component with an &lt;code&gt;open&lt;/code&gt; prop will have an
accompanying hook with an optional &lt;code&gt;defaultOpen&lt;/code&gt; parameter property and
&lt;code&gt;setOpen&lt;/code&gt; state property.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;function&lt;/span&gt; &lt;span class="pl-v"&gt;MyTextField&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; handleChange&lt;span class="pl-kos"&gt;,&lt;/span&gt; setValue&lt;span class="pl-kos"&gt;,&lt;/span&gt; value &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;useTextField&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-c1"&gt;defaultValue&lt;/span&gt;: &lt;span class="pl-s"&gt;'Loading...'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
  &lt;span class="pl-en"&gt;useEffect&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-en"&gt;getAsyncValue&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
      &lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;then&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;asyncValue&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
        &lt;span class="pl-en"&gt;setValue&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;asyncValue&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
      &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
      &lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;catch&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
        &lt;span class="pl-en"&gt;setValue&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;''&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
      &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/CharlesStover/use-mui"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#9-animated-emojis"&gt;
  &lt;/a&gt;
  9. Animated Emojis
&lt;/h3&gt;

&lt;p&gt;Library with animated emojis.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/beerose"&gt;
        beerose
      &lt;/a&gt; / &lt;a href="https://github.com/beerose/animated-emojis"&gt;
        animated-emojis
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Animated emojis 😢💗😡😨😊
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Animated Emojis&lt;/h1&gt;
&lt;p&gt;Library with animated emojis.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/beerose/animated-emojis./assets/e.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0W4qqbk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/beerose/animated-emojis./assets/e.gif" alt="gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Docs&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://animated-emojis.netlify.com/" rel="nofollow"&gt;https://animated-emojis.netlify.com/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;yarn add animated-emojis &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; npm i animated-emojis&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
API&lt;/h2&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;size: Number | undefined
animate: Boolean | undefined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;
Setup&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;yarn &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; npm i&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Run docs&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;yarn docz:dev &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; npm run docz:dev&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Build lib&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;yarn build &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; npm run build&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/beerose/animated-emojis"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#10-checka11ycss"&gt;
  &lt;/a&gt;
  10. Checka11y.css
&lt;/h3&gt;

&lt;p&gt;A CSS stylesheet to quickly highlight a11y concerns.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jackdomleo7"&gt;
        jackdomleo7
      &lt;/a&gt; / &lt;a href="https://github.com/jackdomleo7/Checka11y.css"&gt;
        Checka11y.css
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A CSS stylesheet to quickly highlight a11y concerns.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/jackdomleo7/Checka11y.csslogo/checka11y1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUIb5DYQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/jackdomleo7/Checka11y.csslogo/checka11y1.png" alt="Checka11y.css logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/jackdomleo7" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cd9a722712fec4278ef95ff114b458897a37a52ef8129b6c833efcf8c66e2211/68747470733a2f2f63646e2e6275796d6561636f666665652e636f6d2f627574746f6e732f76322f64656661756c742d6f72616e67652e706e67" alt="Buy Me A Coffee" height="50" width="190"&gt;&lt;/a&gt; &lt;a href="https://www.producthunt.com/posts/checka11y-css?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-checka11y-css" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/01b3c883c2e38b9f8a0b7fb3adb02e6839f848f0c99960539969b89c4a387951/68747470733a2f2f6170692e70726f6475637468756e742e636f6d2f776964676574732f656d6265642d696d6167652f76312f66656174757265642e7376673f706f73745f69643d323639383636267468656d653d6c69676874" alt="Checka11y.css - A CSS stylesheet to quickly highlight a11y concerns. | Product Hunt"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jackdomleo7/Checka11y.css/actions/workflows/pipeline.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2zA14IAL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/jackdomleo7/Checka11y.css/actions/workflows/pipeline.yml/badge.svg%3Fbranch%3Dmaster" alt=".github/workflows/pipeline.yml"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/d8c687d86fbfb6d127a4208b3ba8a442121ad2eec12743f351714b01e243806b/68747470733a2f2f696d672e736869656c64732e696f2f6d61696e74656e616e63652f7965732f32303231"&gt;&lt;img src="https://camo.githubusercontent.com/d8c687d86fbfb6d127a4208b3ba8a442121ad2eec12743f351714b01e243806b/68747470733a2f2f696d672e736869656c64732e696f2f6d61696e74656e616e63652f7965732f32303231" alt="Maintenance"&gt;&lt;/a&gt; &lt;a href="https://github.com/jackdomleo7/Checka11y.css/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/33d56315bd259999723bffc2fb998d171b8db2dcf7a7523b415070eec8bedc5a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d696d706f7274616e74" alt="MIT License"&gt;&lt;/a&gt; &lt;a href="https://github.com/jackdomleo7/Checka11y.css/blob/master/checka11y.css"&gt;&lt;img src="https://camo.githubusercontent.com/3a4676adbecb39b1b68334434df24201100692f8dfa9908bb4d4b35f7538daca/68747470733a2f2f62616467656e2e6e65742f626164676573697a652f62726f746c692f6a61636b646f6d6c656f372f436865636b613131792e6373732f6d61737465722f636865636b613131792e637373" alt="Brotli size"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jackdomleo7/Checka11y.css/stargazers"&gt;&lt;img src="https://camo.githubusercontent.com/3a63f38c63a2e2f9442cfd68de29154e23075b9c3d0ea3e096487931ce99119b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6a61636b646f6d6c656f372f436865636b613131792e6373733f7374796c653d736f6369616c" alt="GitHub stars"&gt;&lt;/a&gt; &lt;a href="https://github.com/jackdomleo7/Checka11y.css/releases"&gt;&lt;img src="https://camo.githubusercontent.com/82356437e62e95d83d28170a474b4563ad19632af2dd3a1c6f6a78f0fd30023b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f6a61636b646f6d6c656f372f436865636b613131792e6373733f7374796c653d736f6369616c" alt="GitHub release (latest by date)"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/checka11y-css" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/113804f31ecad604ad1770d4d65117408db46e91e313a0e0c44145c32363f89f/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f636865636b613131792d6373733f6c6f676f3d6e706d267374796c653d736f6369616c" alt="npm"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/528222f830e2e26a0c8416b9ed23379fea724437ef01b506c8b0c16464f9c691/68747470733a2f2f696d672e736869656c64732e696f2f6a7364656c6976722f6e706d2f686d2f636865636b613131792d6373733f6c6162656c3d4a7344656c697672266c6f676f3d6a7364656c697672267374796c653d736f6369616c"&gt;&lt;img src="https://camo.githubusercontent.com/528222f830e2e26a0c8416b9ed23379fea724437ef01b506c8b0c16464f9c691/68747470733a2f2f696d672e736869656c64732e696f2f6a7364656c6976722f6e706d2f686d2f636865636b613131792d6373733f6c6162656c3d4a7344656c697672266c6f676f3d6a7364656c697672267374796c653d736f6369616c" alt="jsDelivr hits (npm)"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/checka11ycss/npkoehgjmnffjdaelommnfjkflenbfaa" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d0eae8a95587e38dacd92e14770bbfa961567759f74c86e16c0bdccb1cca9570/68747470733a2f2f696d672e736869656c64732e696f2f6368726f6d652d7765622d73746f72652f75736572732f6e706b6f6568676a6d6e66666a6461656c6f6d6d6e666a6b666c656e626661613f6c6162656c3d4368726f6d6525323057656225323053746f72652532307573657273266c6f676f3d676f6f676c652d6368726f6d65267374796c653d736f6369616c" alt="Chrome Web Store"&gt;&lt;/a&gt; &lt;a href="https://addons.mozilla.org/en-GB/firefox/addon/checka11y-css" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8295102a34fdd8ef0301814645d75e3a070d58a29ae539dabc1445fed0a810c6/68747470733a2f2f696d672e736869656c64732e696f2f616d6f2f75736572732f636865636b613131792d6373733f6c6162656c3d46697265666f782532304164642d6f6e2532307573657273266c6f676f3d66697265666f78267374796c653d736f6369616c" alt="Mozilla Add-on"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h1&gt;
Checka11y.css&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A CSS stylesheet to quickly highlight a11y concerns.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Lightweight&lt;/em&gt; • &lt;em&gt;Modern&lt;/em&gt; • &lt;em&gt;Accessibile&lt;/em&gt; • &lt;em&gt;Customisable&lt;/em&gt; • &lt;em&gt;Simple&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The first line of defence for testing accessibility.&lt;/p&gt;
&lt;p&gt;Designed to quickly highlight some common accessibility errors and warnings that can be easily and quickly rectified.&lt;/p&gt;
&lt;p&gt;Recommended before turning to automation tools and scanners such as Lighthouse on Chrome.&lt;/p&gt;
&lt;p&gt;Remember not to push this to production!&lt;/p&gt;
&lt;p&gt;A great tool for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Websites and web applications to begin improving their accessibility.&lt;/li&gt;
&lt;li&gt;Developers and testers/QA to learn more about accessibility and creating accessible websites and applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Features&lt;/h2&gt;
&lt;p&gt;Our features are always checked against the W3C accessibility guidelines.&lt;/p&gt;
&lt;p&gt;A list of some common a11y concerns Checka11y.css will check for and highlight :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check for invalid HTML elements nested inside of &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Check for missing &lt;code&gt;alt&lt;/code&gt; attributes on images&lt;/li&gt;
&lt;li&gt;Check for media that is set to &lt;code&gt;autoplay&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Check &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; is the &lt;strong&gt;only&lt;/strong&gt; direct child of &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jackdomleo7/Checka11y.css"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#stargazing"&gt;
  &lt;/a&gt;
  Stargazing 📈
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 7 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt; +1,625 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt; +860 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/KilledByAPixel/LittleJS"&gt;LittleJS&lt;/a&gt; +823 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +686 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/awesome"&gt;Awesome&lt;/a&gt; +648 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 7 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/KilledByAPixel/LittleJS"&gt;LittleJS&lt;/a&gt; +39%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/CromwellCMS/Cromwell"&gt;Cromwell CMS&lt;/a&gt; +32%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/peppercornstudio/pollen"&gt;Pollen&lt;/a&gt; +28%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/handtracking-io/yoha"&gt;Yoha&lt;/a&gt; +25%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/RajvirSingh1313/Elecrue"&gt;Elecrue&lt;/a&gt; +24%&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 30 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +5,167 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/louislam/uptime-kuma"&gt;Uptime Kuma&lt;/a&gt; +4,986 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt; +4,793 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/awesome"&gt;Awesome&lt;/a&gt; +3,461 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +2,649 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 30 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/csswizardry/ct"&gt;ct&lt;/a&gt; +171%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/louislam/uptime-kuma"&gt;Uptime Kuma&lt;/a&gt; +136%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pankod/refine"&gt;Refine&lt;/a&gt; +136%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NitzanHen/agrippa"&gt;Agrippa&lt;/a&gt; +131%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/eBay/nice-modal-react"&gt;Nice Modal React&lt;/a&gt; +99%&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For all for the latest rankings please checkout &lt;a href="https://stargazing.dev"&gt;Stargazing.dev&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/stargazing_dev"&gt;follow me&lt;/a&gt; on Twitter where I regularly post about HTML, CSS and JavaScript.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
