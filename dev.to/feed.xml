<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Secure Local Storage in Flutter</title>
      <author>Bibek</author>
      <pubDate>Fri, 30 Apr 2021 17:52:54 +0000</pubDate>
      <link>https://dev.to/bibekkakati/secure-local-storage-in-flutter-7bj</link>
      <guid>https://dev.to/bibekkakati/secure-local-storage-in-flutter-7bj</guid>
      <description>&lt;p&gt;In this article,  you will learn how to implement secure local storage in flutter apps.&lt;/p&gt;

&lt;p&gt;If you have experience with front-end web development, you know we use the browser's local storage to store data in key-value pairs. Similarly, we can store data in flutter apps too, but this implementation's under the hood working is a little different as data is getting encrypted.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keychain is used for iOS.&lt;/li&gt;
&lt;li&gt;AES encryption is used for Android. AES secret key is encrypted with RSA and RSA key is stored in KeyStore.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;We will use a flutter plugin called  &lt;a href="https://pub.dev/packages/flutter_secure_storage"&gt;flutter_secure_storage&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Add the following to your &lt;code&gt;pubspec.yaml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dependencies:
  ...
  flutter_secure_storage: ^4.2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Check for the latest version on the plugin's page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#configure-android-version"&gt;
  &lt;/a&gt;
  Configure Android Version
&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;[project]/android/app/build.gradle&lt;/code&gt; set &lt;code&gt;minSdkVersion&lt;/code&gt; to &amp;gt;= 18.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;android {
  ...
  defaultConfig {
    ...
    minSdkVersion 18
    ...
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-instance"&gt;
  &lt;/a&gt;
  Create Instance
&lt;/h3&gt;

&lt;p&gt;Import &lt;code&gt;flutter_secure_storage&lt;/code&gt; in your file and create an instance of it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import 'package:flutter_secure_storage/flutter_secure_storage.dart';

FlutterSecureStorage _localStorage = new FlutterSecureStorage();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#write-data"&gt;
  &lt;/a&gt;
  Write Data
&lt;/h3&gt;

&lt;p&gt;To insert a key-value pair in the storage, we will use the &lt;code&gt;write&lt;/code&gt; method.&lt;br&gt;
We need to pass &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; to this method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;await _localStorage.write(key: key, value: value);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; should be a string.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;key&lt;/code&gt; already exists, the &lt;code&gt;value&lt;/code&gt; will get replaced.&lt;/li&gt;
&lt;li&gt;If we pass a &lt;code&gt;null&lt;/code&gt; value and the &lt;code&gt;key&lt;/code&gt; already exists, it will get deleted.&lt;/li&gt;
&lt;li&gt;Its return type is &lt;code&gt;void&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#read-data"&gt;
  &lt;/a&gt;
  Read Data
&lt;/h3&gt;

&lt;p&gt;To read a &lt;code&gt;value&lt;/code&gt; for a particular &lt;code&gt;key&lt;/code&gt;, we will use the &lt;code&gt;read&lt;/code&gt; method.&lt;br&gt;
We need to pass the &lt;code&gt;key&lt;/code&gt; to this method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;await _localStorage.read(key: key);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;key&lt;/code&gt; should be a string.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;key&lt;/code&gt; exists, the &lt;code&gt;value&lt;/code&gt; will be returned.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;key&lt;/code&gt; doesn't exist the &lt;code&gt;null&lt;/code&gt; will be returned.&lt;/li&gt;
&lt;li&gt;Its return type is always a string.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#read-all-data"&gt;
  &lt;/a&gt;
  Read All Data
&lt;/h3&gt;

&lt;p&gt;To read all the values, we will use the &lt;code&gt;readAll&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;await _localStorage.readAll();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;It will return all the key-value pairs as a &lt;code&gt;Map&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#delete-data"&gt;
  &lt;/a&gt;
  Delete Data
&lt;/h3&gt;

&lt;p&gt;To delete an entry, we will use the &lt;code&gt;delete&lt;/code&gt; method.&lt;br&gt;
We need to pass the &lt;code&gt;key&lt;/code&gt; to this method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;await _localStorage.delete(key: key);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;key&lt;/code&gt; should be a string.&lt;/li&gt;
&lt;li&gt;Its return type is &lt;code&gt;void&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#delete-all-data"&gt;
  &lt;/a&gt;
  Delete All Data
&lt;/h3&gt;

&lt;p&gt;To delete all entries, we will use the &lt;code&gt;deleteAll&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;await _localStorage.deleteAll();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Its return type is void.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;KeyStore was introduced in Android 4.3 (API level 18). The plugin wouldn't work for earlier versions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://bibekkakati.me"&gt;Connect&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>android</category>
      <category>storage</category>
    </item>
    <item>
      <title>Firebase Alternative ?</title>
      <author>Alireza Mohamadzadeh</author>
      <pubDate>Fri, 30 Apr 2021 17:42:10 +0000</pubDate>
      <link>https://dev.to/alirezamxz/firebase-alternative-4471</link>
      <guid>https://dev.to/alirezamxz/firebase-alternative-4471</guid>
      <description>&lt;p&gt;Firebase is not an easy thing to replace, it's a whole suite of tools that include things like authentication, real time database, serverless functions and sdk's that can easily tie this infrastructure together on iOS, Android and web.&lt;br&gt;
let's compare Firebase and Supabase to see how they differ.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#services"&gt;
  &lt;/a&gt;
  Services
&lt;/h3&gt;

&lt;p&gt;Supabase currently offers Database, Authentication, Storage and Functions. There are a lot of features missing from Supabase, like static site hosting, machine learning tools, push notification service and google analytics, so firebase has more features.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h3&gt;

&lt;p&gt;Supabase is a relational database, while Firebase is a NoSQL database. Both database types have their pros and cons. For instance, NoSQL databases are popular for search engines and social media feeds.&lt;br&gt;
Choosing the right database for your app depends on what type of app you're building.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h3&gt;

&lt;p&gt;Authentication with Supabase is same as with Firebase. Your dashboard has all the data about your users and email templates.&lt;br&gt;
The sign-in methods include email and password as well as all major OAuth providers. only the phone authentication is missing which you can find in Firebase.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h3&gt;

&lt;p&gt;both of them have a base free tier, which is only useful for experimentation.&lt;br&gt;
When you build something serious on firebase, you use the pay-as-you-go plan, each individual service has a free tier, so that you only pay for what you use. Supabase has 8GB database storage and 100K users for $25 a month. in firebase you also pay for the number of reads and writes to the database but in Supabase it looks like you have unlimited api calls and network traffic to your database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Supabase only has a JavaScript SDK, on the other hand Firebase is extremely popular with mobile developers and you couldn't really call supabase an alternative to firebase until they release an SDK for iOS and Android.&lt;/p&gt;

</description>
      <category>firebase</category>
      <category>supabase</category>
    </item>
    <item>
      <title>Node.js v10 Is Being End-of-Lifed Today, but What Does It All Mean?</title>
      <author>Alex Lakatos 🥑</author>
      <pubDate>Fri, 30 Apr 2021 17:07:39 +0000</pubDate>
      <link>https://dev.to/lakatos88/node-js-10-is-being-end-of-lifed-today-but-what-does-it-all-mean-44ih</link>
      <guid>https://dev.to/lakatos88/node-js-10-is-being-end-of-lifed-today-but-what-does-it-all-mean-44ih</guid>
      <description>&lt;p&gt;Any Node.js end-of-life day is a good day, but today especially so! Node.js v10 is being end-of-lifed today, so you can finally support ES6 imports in your JavaScript code examples and libraries by default!&lt;/p&gt;

&lt;p&gt;The latest versions of Node.js v12 (not the earlier versions, mind you) support ES6 modules by default, so there is no need to do the ugly hacks you needed to do before if you wanted to write modern JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  Before
&lt;/h2&gt;

&lt;p&gt;Before, you had to save your code a &lt;code&gt;.mjs&lt;/code&gt; instead of &lt;code&gt;js&lt;/code&gt;, and then run &lt;code&gt;node&lt;/code&gt; with the &lt;code&gt;--experimental-modules&lt;/code&gt; flag. Which most Node.js runtimes online were very slow to adopt.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ node --experimental-modules index.mjs&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  After
&lt;/h2&gt;

&lt;p&gt;The latest versions of Node.js v12+ support this out of the box, so there is no need to run with a flag. And most Node.js runtimes update to the latest Maintenance release, so they support it as well.&lt;/p&gt;

&lt;p&gt;If you want to run on your own hosted environment now you can either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;save the file with a &lt;code&gt;.mjs&lt;/code&gt; extension, and run it regularly with &lt;code&gt;node index.mjs&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;save the file with a regular &lt;code&gt;.js&lt;/code&gt; extension, add &lt;code&gt;type: module&lt;/code&gt; to your &lt;code&gt;package.json&lt;/code&gt; file, and then run the file regularly with &lt;code&gt;node index.js&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#changing-old-code"&gt;
  &lt;/a&gt;
  Changing Old Code
&lt;/h2&gt;

&lt;p&gt;If you're migrating from the old &lt;code&gt;require&lt;/code&gt; to the more modern &lt;code&gt;import&lt;/code&gt;, there are a couple of things you'll need to do to your files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;change &lt;code&gt;module.exports = avocados&lt;/code&gt; into &lt;code&gt;export default avocados&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;change &lt;code&gt;const avocados = require('avocados')&lt;/code&gt; into &lt;code&gt;import avocados from 'avocados'&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most IDEs account for this and help you change it. Like &lt;a href="https://umaar.com/dev-tips/222-vs-code-convert-es-import/"&gt;VS Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to see it in action on a slightly bigger project, I've switched over the Fidel sample application using things like express, dotenv and axios a little while back, &lt;a href="https://github.com/FidelLimited/fidel-api-sample-app/commit/300f672b5d119d9d80afe07ac23f67b3bb52f805"&gt;it's all contained in a commit&lt;/a&gt; thought so easy to see the changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wait-what-is-endoflife"&gt;
  &lt;/a&gt;
  Wait, What is End-of-Life?
&lt;/h2&gt;

&lt;p&gt;"End-of-life" or EOL is a term used by older, more enterprise-focused companies, to let everyone know that they're limiting support or outright not supporting a certain version of their product anymore. You could say the OpenJS Foundation has "pulled the plug" on Node.js v10. 😅&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#got-love"&gt;
  &lt;/a&gt;
  Got Love?
&lt;/h2&gt;

&lt;p&gt;If you've loved the pun at the end, or if you just found this mildly useful, please consider &lt;a href="https://twitter.com/lakatos88"&gt;following me on Twitter&lt;/a&gt;. I'd be storked. 😅&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Why you should use Chakra UI in React</title>
      <author>dastasoft</author>
      <pubDate>Fri, 30 Apr 2021 17:03:02 +0000</pubDate>
      <link>https://dev.to/dastasoft/why-you-should-use-chakra-ui-in-react-151o</link>
      <guid>https://dev.to/dastasoft/why-you-should-use-chakra-ui-in-react-151o</guid>
      <description>&lt;p&gt;If you want to build an application or a website you need to take care of many things and in that sea of options which component library, css or ui framework will take a big role in the final version of your product.&lt;/p&gt;

&lt;p&gt;I have tried some component libraries like Material UI, Antd, React Boostrap and other CSS frameworks like styled-components, TailwindCSS and so on, I even tried to make some mini set of components for myself with &lt;a href="https://github.com/dastasoft/react-ui-components"&gt;React and Bit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Maintaining a library, or a set of components for your products that follows consistency is very difficult and choosing a library for UI purposes can be a mess if you are too constrained or the API is too complicated. At the end of the day &lt;strong&gt;you're trying to save time and focus on what really matters to you&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I'm not going to lie, Chakra UI popped up on my radar because I'm a Naruto fan and in the first second I thought I could style it like a ninja.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GwkThE4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.dastasoft.com/_next/image%3Furl%3D%252Fassets%252Fposts%252Fcontent%252Fnaruto-running.gif%26w%3D1920%26q%3D75" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GwkThE4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.dastasoft.com/_next/image%3Furl%3D%252Fassets%252Fposts%252Fcontent%252Fnaruto-running.gif%26w%3D1920%26q%3D75" alt="naruto running" title="Chakra UI, styling like a ninja. It's not an official slogan but I think they should use it. 🤫"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h2&gt;

&lt;p&gt;So what are the main benefits of using this component library.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All components provided by Chakra UI are accessible following WAI-ARIA standards which I think is a pending subject for most of us. If you don't know why this is so important, please check out &lt;a href="https://dev.to/mokkapps/why-a-good-frontend-developer-should-care-about-web-accessibility-545m"&gt;this article&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Components are easy to theme, expand and fully customize.&lt;/li&gt;
&lt;li&gt;Combine components, components are small and are easy to combine to form bigger structures.&lt;/li&gt;
&lt;li&gt;Different colour modes, switching between the typical light and dark colours or even any other set of colours will be a piece of cake.&lt;/li&gt;
&lt;li&gt;You will do more with less in less time, which is in fact the goal of most libraries and frameworks.&lt;/li&gt;
&lt;li&gt;The community is still quite small (which can be a good thing, you can join from the beginning), but it is very active.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;You can go directly to the &lt;a href="https://github.com/dastasoft/handy-tools"&gt;sample project&lt;/a&gt; that uses almost everything I'm going to talk in this article or try &lt;a href="https://handy-tools.dastasoft.com/"&gt;the final PWA version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And be sure to check the &lt;a href="https://chakra-ui.com/"&gt;official Chakra UI webpage&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;The example project and the code samples in this article are made with &lt;a href="https://nextjs.org/"&gt;NextJS&lt;/a&gt; but you can use it with any React-based library/framework such as &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt; or &lt;a href="https://create-react-app.dev/"&gt;Create React App&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code samples in this article will be almost identical to any React platform you choose to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;You need to install Chakra UI and the peer dependencies such as &lt;a href=""&gt;emotion&lt;/a&gt; and &lt;a href=""&gt;framer-motion&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i @chakra-ui/react @emotion/react@^11 @emotion/styled@^11 framer-motion@^4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @chakra-ui/react @emotion/react@^11 @emotion/styled@^11 framer-motion@^4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the packages are installed, a provider need to be configured.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/_app.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ChakraProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/Layout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/styles/theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ChakraProvider&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Layout&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ChakraProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the case of CRA you will configure your provider in the &lt;code&gt;index.js&lt;/code&gt; surrounding your App component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handy-tools-project"&gt;
  &lt;/a&gt;
  Handy Tools project
&lt;/h2&gt;

&lt;p&gt;I built a &lt;a href="https://github.com/dastasoft/handy-tools"&gt;simple project&lt;/a&gt; with NextJS and Chakra UI that has different small utilities like a password generator or a word counter, very basic stuff.&lt;/p&gt;

&lt;p&gt;The idea was to test the component library with the first project and test the speed of building the following utilities.&lt;/p&gt;

&lt;p&gt;I must say that the learning curve was very easy, maybe because I'm used to using &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt; but it was by far the easiest component library I've tried so far. The developer experience was also good, so I'm sure I'll come back to this project and add more utilities for fun.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#atomic-components"&gt;
  &lt;/a&gt;
  Atomic Components
&lt;/h2&gt;

&lt;p&gt;One of the things I like most about Chakra UI is how the components are designed to be small so you can compose them together. The component library provides atomic components and you can build bigger elements quickly and easily as you are used to doing with normal HTML tags.&lt;/p&gt;

&lt;p&gt;For example, let's look at the Layout component composition in Handy Tools:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// components/Layout.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Flex&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/Header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Footer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/Footer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Flex&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;minH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4rem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt;
    &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;flex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1rem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;linkedin.100&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Footer&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3rem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Flex&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Box&lt;/code&gt; and &lt;code&gt;Flex&lt;/code&gt; are the most basic components you can use, they are like regular &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags, as you can guess, Flex is the same as Box but has &lt;code&gt;display: flex&lt;/code&gt; in it.&lt;/p&gt;

&lt;p&gt;Most of your initial time with the library will be spent going through the &lt;a href="https://chakra-ui.com/docs/layout/box"&gt;official Chakra UI documentation&lt;/a&gt;, they have a lot of examples and variations that for sure you will find valuable and sufficient for building your project.&lt;/p&gt;

&lt;p&gt;You will find components for the layout of your webpage, for each component of a form, alerts, modals, loadings, typography, navigation, media and even drawers which are quite useful for mobile resolutions and skeleton ui to show the loading status of your components and avoid &lt;a href="https://web.dev/cls/"&gt;cumulative layout shift&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first contact with Chakra UI for me was quite similar to working with pre-build components in React Native.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#theming"&gt;
  &lt;/a&gt;
  Theming
&lt;/h2&gt;

&lt;p&gt;One of the core values of Chakra UI is the theming, and it is very easy to adapt it to your preferences.&lt;/p&gt;

&lt;p&gt;Inside the styles folder I create a &lt;code&gt;theme.js&lt;/code&gt; file that has:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;extendTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;extendTheme&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lato&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Roboto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this file you can define all the general theme of your application such as font sizes, breakpoints, line heights, etc.&lt;/p&gt;

&lt;p&gt;For colours Chakra UI has a default theme inspired by Tailwind CSS with colours ranging from 50 to 900.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#expanding-further-the-theme"&gt;
  &lt;/a&gt;
  Expanding further the theme
&lt;/h3&gt;

&lt;p&gt;One of the things that can be a barrier when using a component library is that maybe your style or the style provided by the designer is different from the base design. &lt;/p&gt;

&lt;p&gt;That can be a headache, making all those changes can end up thinking that you need more work adapting the library than doing it from scratch.&lt;/p&gt;

&lt;p&gt;Let's see this example extracted from the official documentation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// styles/theme.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;extendTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;extendTheme&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// 1. We can update the base styles&lt;/span&gt;
      &lt;span class="na"&gt;baseStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Normally, it is "semibold"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="c1"&gt;// 2. We can add a new button size or extend existing&lt;/span&gt;
      &lt;span class="na"&gt;sizes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;xl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;56px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;px&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;32px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="c1"&gt;// 3. We can add a new visual variant&lt;/span&gt;
      &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;with-shadow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red.400&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;boxShadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 2px 2px #efdfde&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="c1"&gt;// 4. We can override existing variants&lt;/span&gt;
        &lt;span class="na"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorMode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red.300&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red.500&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think it's clear how much effort the Chakra UI team has made to take the library easly adaptable to your needs. This is just a small example I think if I want to cover all the customisation possibilites of this library that would be enough for a whole article, be sure to check &lt;a href="https://chakra-ui.com/docs/theming/advanced"&gt;the official documentation about theming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Maybe this file can be very large if you need a lot of changes, but the base theme with all the accessibility and consistency still will be available to you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#responsive"&gt;
  &lt;/a&gt;
  Responsive
&lt;/h3&gt;

&lt;p&gt;Working with responsive styles is very easy, forget about media-queries and rewriting css classes (you can use it if you need to of course).&lt;/p&gt;

&lt;p&gt;Chakra UI works with default breakpoints but you can create your own:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createBreakpoints&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@chakra-ui/theme-tools&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;breakpoints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createBreakpoints&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;30em&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;md&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;48em&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;62em&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;xl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;80em&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2xl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;96em&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's say you have a div and you want to resize it according to different breakpoints:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The array will be matched internally so:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;300 will be applied from 30em&lt;/li&gt;
&lt;li&gt;400 will be applied from 48em&lt;/li&gt;
&lt;li&gt;500 will be applied from 62em&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another syntax for responsive values can be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;300px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;md&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;400px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;xl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;500px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above we are doing the same thing but we are targeting a specific breakpoint. To get the same result in the array example we need to pass a null to skip the &lt;code&gt;lg&lt;/code&gt; breakpoint: &lt;code&gt;[300, 400, null, 500]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With this syntax you don't need any media queries (Chakra UI will do it under the bonnet), but if you need to use media queries check out the next section on Hooks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dark-mode"&gt;
  &lt;/a&gt;
  Dark Mode
&lt;/h3&gt;

&lt;p&gt;The components provided by Chakra UI support dark mode. The only configuration you need to provide is a &lt;code&gt;ColorModeScript&lt;/code&gt;:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  NextJS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/_document.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ColorModeScript&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;NextDocument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NextScript&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/document&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/styles/theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;NextDocument&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Html&lt;/span&gt; &lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ColorModeScript&lt;/span&gt; &lt;span class="nx"&gt;initialColorMode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialColorMode&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NextScript&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Html&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#cra"&gt;
  &lt;/a&gt;
  CRA
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ColorModeScript&lt;/span&gt; &lt;span class="nx"&gt;initialColorMode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialColorMode&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's check in the next section which hooks you need to use to switch between topics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hooks"&gt;
  &lt;/a&gt;
  Hooks
&lt;/h2&gt;

&lt;p&gt;Chakra UI also provides a collection of handy hooks to work faster.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usecolormode"&gt;
  &lt;/a&gt;
  useColorMode
&lt;/h3&gt;

&lt;p&gt;In the previous section we were configuring our application with dark mode, let's see how to build a button to switch between light and dark mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// components/ColorChanger.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;IconButton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useColorMode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useColorModeValue&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SunIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MoonIcon&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chakra-ui/icons&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ColorChanger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;toggleColorMode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useColorMode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useColorModeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SwitchIcon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useColorModeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MoonIcon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SunIcon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IconButton&lt;/span&gt;
      &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;md&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;fontSize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`Switch to &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; mode`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ghost&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleColorMode&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SwitchIcon&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;useColorMode&lt;/code&gt; provides the &lt;code&gt;toggleColorMode&lt;/code&gt; function and that's all we need to switch between the two themes, try this hook and see how all the components included in the library switch automatically without any configuration.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#usecolormodevalue"&gt;
  &lt;/a&gt;
  useColorModeValue
&lt;/h4&gt;

&lt;p&gt;In the example above you can see &lt;code&gt;useColorModeValue&lt;/code&gt; this hook is very useful to assign different colours depending on the theme we are in. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// components/WordCounters.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useColorModeValue&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;WordCounters&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;caption&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useColorModeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;whiteAlpha.900&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gray.800&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Flex&lt;/span&gt; &lt;span class="nx"&gt;flexDirection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;alignItems&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1rem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;bg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;fontSize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3xl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;fontWeight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;caption&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Flex&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example we are changing the background of this component from &lt;code&gt;whiteAlpha.900&lt;/code&gt; in the light theme to &lt;code&gt;gray.800&lt;/code&gt; when we switch to the dark theme.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usemediaquery"&gt;
  &lt;/a&gt;
  useMediaQuery
&lt;/h3&gt;

&lt;p&gt;As I said before, if we need to use media-query we can use this hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLargerThan1280&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(min-width: 1280px)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLargerThan1280&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;larger than 1280px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;smaller than 1280px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the help of this hook you can execute code when the media query is triggered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparison-with-other-libraries"&gt;
  &lt;/a&gt;
  Comparison with other libraries
&lt;/h2&gt;

&lt;p&gt;There are other well know libraries like &lt;a href="https://material-ui.com/"&gt;Material UI&lt;/a&gt; and &lt;a href="https://ant.design/"&gt;Antd&lt;/a&gt; or &lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#material-ui"&gt;
  &lt;/a&gt;
  Material UI
&lt;/h3&gt;

&lt;p&gt;My biggest concern about Material UI is the API, you have to learn a lot to use the library and you will get a very nice and clean design but on the other hand it is a difficult design to customize to the point that it looks like your own.&lt;/p&gt;

&lt;p&gt;The beauty of Chakra UI is that you can leave the library as it is or change some colours (like I did in Handy Tools) or customise it to the point where it looks like your own library and all that without pages and pages of API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#antd"&gt;
  &lt;/a&gt;
  Antd
&lt;/h3&gt;

&lt;p&gt;I use Antd before Chakra UI and the atomic components were awesome too, very easy to use and easy to follow documentation but for customisation I find it more difficult than Chakra UI.&lt;/p&gt;

&lt;p&gt;In Antd they did the customisation using Less.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tailwind-css"&gt;
  &lt;/a&gt;
  Tailwind CSS
&lt;/h3&gt;

&lt;p&gt;I love working on projects with Tailwind CSS, it definitely speeds up the development process and I find it very useful when it comes to getting things done. The performance is better and if you or your team have experience with bootstrap, you will get the knowledge in no time.&lt;/p&gt;

&lt;p&gt;The problem I see with Tailwind CSS is keeping the code clean and especially in projects with more members, having a good architecture for that part is not easy. Things like accessibility or keyboard navigation have to be handled manually.&lt;/p&gt;

&lt;p&gt;With Chakra UI in the end it's all props like in any other React component, so I find it easier to use it for teamwork.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#separation-of-concerns"&gt;
  &lt;/a&gt;
  Separation of Concerns
&lt;/h2&gt;

&lt;p&gt;Maybe one of the things you don't like about Chakra UI is the fact that it mixes css-related utilities with the application logic, which is not really a problem of Chakra UI but of the design of any CSS-in-JS solution.&lt;/p&gt;

&lt;p&gt;In the Handy Tools project, the last utility I added follows the same idea as the styles in React Native:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/px-converter.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PxConverter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Px&lt;/span&gt; &lt;span class="nx"&gt;Converter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Heading&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Select&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onOptionChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;defaultValue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pxToREM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;marginBottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.5em&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;marginLeft&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.2em&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;flexCenter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;marginRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.5em&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;maxWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;400px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0 auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;maxWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;600px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1.5em auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;gridItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;marginX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1em&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;buttonGroup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;marginX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.5em&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I copy the idea from React Native's createStylesheet pattern, with this you can easly split the CSS part of the props that are related to the logic.&lt;/p&gt;

&lt;p&gt;But yes, in the end the concern about having separate standard CSS files can be a drawback, check the next section to see if Chakra UI suits your needs or not.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chakra-ui-might-be-for-you-if"&gt;
  &lt;/a&gt;
  Chakra UI might be for you if...
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You are working on a small/medium sized project.*&lt;/li&gt;
&lt;li&gt;You don't want to / can't invest the effort in creating a library of components.&lt;/li&gt;
&lt;li&gt;Accessibility is important to you and you don't want to / can't invest the effort.&lt;/li&gt;
&lt;li&gt;You or your team are more proficient with JS than CSS.**&lt;/li&gt;
&lt;li&gt;You are trying to establish a common architecture in your team.***&lt;/li&gt;
&lt;li&gt;You need your own component library but from a solid base.&lt;/li&gt;
&lt;li&gt;You are using another component library that you find doesn't speed up your development time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*I'm talking about the size of the project because CSS-in-JS have a common problem, they are JS after all, it's easier for the browser to process CSS files instead of running JS, especially if your application is changing data very often but common web applications are perfectly suited to Chakra UI's performance.&lt;/p&gt;

&lt;p&gt;**Don't think you can avoid learning CSS because of Chakra UI or any other CSS-in-JS solution, the syntax is quite similar and knowing proper CSS will help a lot.&lt;/p&gt;

&lt;p&gt;**The weakest point of many front end developers is maintaining CSS files, having a solution like Chakra UI that blends seamlessly with the props we already know from React components helps to keep the project clean and mantainable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chakra-ui-might-not-be-for-you-if"&gt;
  &lt;/a&gt;
  Chakra UI might not be for you if...
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You're working on a big project and/or changing a lot of data.&lt;/li&gt;
&lt;li&gt;You or your team are more proficient with CSS than JS.&lt;/li&gt;
&lt;li&gt;You need to share your style files between several projects that don't have Chakra UI.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#on-top-of-chakra-ui"&gt;
  &lt;/a&gt;
  On top of Chakra UI
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://pro.chakra-ui.com/"&gt;Chakra UI Pro&lt;/a&gt; A collection of bigger components made by the creators of Chakra UI, you can find some free components that are very common and useful.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://choc-ui.tech/"&gt;Choc UI&lt;/a&gt; Another collection of big components for developing common webpages blazing fast. They have a nice roadmap of future components so be sure to check out.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you need a good quality of components ready to start your next project and/or want to customize the components having a good starting point I think Chakra UI has a perfect balance of effort/results.&lt;/p&gt;

&lt;p&gt;For me doing Handy Tools, besides being a very small example project for this article, was a good experience, I would describe Chakra UI as having a clean default design like in Material UI with the simplicity of colours and responsive design provided by TailwindCSS plus the atomic design of the Antd components and a convenient accessibility layer all in one package.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>nextjs</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>NestJS Jaeger(and others) Tracing Module for microservices. You'll loved it! ❤️</title>
      <author>Anuwong Mongkudkornburee</author>
      <pubDate>Fri, 30 Apr 2021 16:41:49 +0000</pubDate>
      <link>https://dev.to/billionaire9/nestjs-jaeger-and-others-tracing-module-for-microservices-you-ll-loved-it-4gh6</link>
      <guid>https://dev.to/billionaire9/nestjs-jaeger-and-others-tracing-module-for-microservices-you-ll-loved-it-4gh6</guid>
      <description>&lt;p&gt;Once my team have to track the application behavior after it had been deployed to production for a few months. We are looking for an easy way to add the tracing things on top of production-ready application. so we developed this package. &lt;a href="https://github.com/dollarsignteam/nestjs-jaeger-tracing"&gt;nestjs-jaeger-tracing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To use this module, you just import &lt;code&gt;TracingModule&lt;/code&gt; to your AppModule and initiate with &lt;code&gt;forRoot()&lt;/code&gt; to add app level interceptor to deserialize microservice payload. Then add serializer which will inject tracing id to payload, like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TracingModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@dollarsign/nestjs-jaeger-tracing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Module&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ClientsModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Transport&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/microservices&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;TracingModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forRoot&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;exporterConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;serviceName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;core-service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// service name that will be shown in jaeger dashboard&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;isSimpleSpanProcessor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// true for development.&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="nx"&gt;ClientsModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MATH_SERVICE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;transport&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Transport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TCP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;TracingModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getParserOptions&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="c1"&gt;// this method will return serializer that inject tracing id to microservice payload.&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;]),&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, your application will be sent data to jaeger agent so you can trace your application in Jaeger Dashboard. hurayyyy!&lt;/p&gt;

&lt;p&gt;It has so much work to do more, so feel free to use and contribute for your works.&lt;/p&gt;

</description>
      <category>nestjs</category>
      <category>jaeger</category>
      <category>tracing</category>
      <category>node</category>
    </item>
    <item>
      <title>Get any SVG on a web page</title>
      <author>Clément Gaudinière</author>
      <pubDate>Fri, 30 Apr 2021 16:36:33 +0000</pubDate>
      <link>https://dev.to/clementgaudiniere/get-any-svg-on-a-web-page-5d3c</link>
      <guid>https://dev.to/clementgaudiniere/get-any-svg-on-a-web-page-5d3c</guid>
      <description>&lt;p&gt;Sometimes it is useful to get SVGs from a web page, but sometimes it can be complicated to get them. That's why I propose you a trick that allows you to retrieve all the SVG on a web page thanks to javascript. Don't be afraid, no javascript skills are required here. &lt;br&gt;
The following procedure is easier to do on Chromium browsers even if it is possible with Mozilla Firefox. In my case, I will illustrate the procedure with Chromium.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First of all you will create a new bookmark, to do so, go to this url in your Chrome/Chromium browser : chrome://bookmarks/&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then click on "Add new bookmark", as shown in the image&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VyGLw_Un--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7g0pd3hjcxprp32o90wc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VyGLw_Un--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7g0pd3hjcxprp32o90wc.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You give it the name you want (ex : get SVG)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In url you enter this JS code :&lt;br&gt;
&lt;code&gt;javascript:javascript: (function () { var e = document.createElement('script'); e.setAttribute('src', 'https://nytimes.github.io/svg-crowbar/svg-crowbar.js'); e.setAttribute('class', 'svg-crowbar'); document.body.appendChild(e); })();&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then you click on "SAVE".&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ua17sK-5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmdjngyh6aam19z2zjsv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ua17sK-5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmdjngyh6aam19z2zjsv.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Then go to a page from which you want to retrieve an SVG, for example the W3Scholls page on vectors: &lt;a href="https://www.w3schools.com/graphics/svg_intro.asp"&gt;https://www.w3schools.com/graphics/svg_intro.asp&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You click on the bookmark previously saved&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SqOW88en--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btpz32k4rpldkrba1rel.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SqOW88en--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btpz32k4rpldkrba1rel.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here, either there are several of them and it gives you a summary of the vector images found on the page, or there is only one and it offers you to download it&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You are now able to download all the vector images!  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>image</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Creators Dilemma: What to do after you create a personal product? </title>
      <author>microideation</author>
      <pubDate>Fri, 30 Apr 2021 16:34:55 +0000</pubDate>
      <link>https://dev.to/microideation/creators-dilemma-what-to-do-after-you-create-a-personal-product-5ao0</link>
      <guid>https://dev.to/microideation/creators-dilemma-what-to-do-after-you-create-a-personal-product-5ao0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#word-of-caution"&gt;
  &lt;/a&gt;
  Word of Caution
&lt;/h2&gt;

&lt;p&gt;If you thought this post is my advice on what needs to be done after you have developed a product (app/website), you are going to be disappointed. &lt;/p&gt;

&lt;p&gt;I am myself a creator who is at a fix as to what needs to be done next after you have created something that you think is useful. &lt;/p&gt;

&lt;p&gt;I am not putting my app link in this post to make sure that it doesn't get degraded as self-promotion. This post is more about me ( or a creator ) asking for advice/help from more experienced folks out there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bit-of-history"&gt;
  &lt;/a&gt;
  Bit of history
&lt;/h2&gt;

&lt;p&gt;During the lock-down of 2020, I had an idea to create a simple and intuitive way of creating and discovering content based on shorts ( 30 seconds read). The idea was to present the crux of the topic using images and rich text as shorts and discover them using simple swipe gestures. &lt;/p&gt;

&lt;p&gt;I spend almost 8 months working on the backend ( Spring java microservices ), creator portal ( ReactJS ), and the app ( React native ). Now, I am primarily a backend developer and I learned to React and React native purely for the purpose of developing this project. &lt;/p&gt;

&lt;p&gt;The same is hosted in GCP with some monthly billing cost and also to provide an idea of what it is, I created over 200+ shorts on Java, Spring framework, React, Data structures, and almost all the things programming I know about. This took another 2 months. &lt;/p&gt;

&lt;p&gt;Even though I used the term "product", I am envisioning this as more of a platform for the experts to create and the users to discover. I don't believe in running ads and would love to provide this as free for as long as I can financially support it. If it ever reaches a level of users where I can no longer support it personally, I plan to charge a nominal subscription so that I can present quality content and also provide a revenue stream to the top creators. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-the-dilemma"&gt;
  &lt;/a&gt;
  Now the Dilemma
&lt;/h2&gt;

&lt;p&gt;Since this is not a cat video I shot and uploaded to YouTube, I didn't have the option to share it with friends and family to like and share.  &lt;/p&gt;

&lt;p&gt;Of course, I can share this with my friends and family and they may say something nice about it and download it once, but that does not provide constructive feedback or momentum to the overall idea. &lt;/p&gt;

&lt;p&gt;As a developer, this where my skills end. I have built something from scratch that I believe is useful to my fellow developers or any learning aspirants, but I don't have a platform or place where I could actually showcase and publish. &lt;/p&gt;

&lt;p&gt;I tried online channels like Reddit and HackerNews, but all of them outright banned or rejected the posts saying that it is self-promoting and that I was not an active member of the communities. I totally agree with their stands as I have set rules for my platform, they also have their own. But wherever I was able to post ( some lesser-known programming reddits), there was a good response from the users and they found it really useful. &lt;/p&gt;

&lt;p&gt;Now the question is, what am I supposed to do at this point?. There is no point in spending so much personal time and money on something that doesn't have enough audience. The saddest part is that I am not able to reach the right audience. Whoever I managed to reach actually likes it but that percentage is pretty low. &lt;/p&gt;

&lt;p&gt;I know that this is not just my case, there are several others who are in the same position as me. I would really appreciate it if you guys have any general advice or can point me in the right direction or group where it makes sense. &lt;/p&gt;

&lt;p&gt;Regards, &lt;br&gt;
A weary fellow developer&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>help</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Turbocharge your Linux terminal productivity with these 12 tips</title>
      <author>Pieter D</author>
      <pubDate>Fri, 30 Apr 2021 16:32:37 +0000</pubDate>
      <link>https://dev.to/pieter/turbocharge-your-linux-terminal-productivity-with-these-12-tips-322h</link>
      <guid>https://dev.to/pieter/turbocharge-your-linux-terminal-productivity-with-these-12-tips-322h</guid>
      <description>&lt;p&gt;The Linux terminal is an incredibly powerful tool to get stuff done quickly. How fast can you go? That greatly depends on how much hotkeys and other power user tricks you know. Here are 12 tips to add to your arsenal.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For details and visual demos, see video below. Read on for the text version.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QETaEdZi2GM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Let your terminal type filenames for you&lt;/strong&gt;. Whenever you're typing the name of a file, folder or command, only type a little bit of it and press Tab. Your shell will try to figure out what you're after and complete the name for you. If multiple matches exist, Tab again to see the options, type a few more characters, then Tab once more.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Quickly jump between words&lt;/strong&gt;. Forgot to add a flag at the start of your command? Alt+Left and Alt+Right let you do word jumps.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Faster backspacing&lt;/strong&gt;. If you need to erase a part of your command, pressing Backspace is kinda slow. Alt+Backspace erases one word at a time.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Repeating past commands&lt;/strong&gt;. Ctrl+R allows you to easily recall commands you've done before. Hit the shortcut, then type a part of a past command, then Enter once you see it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Go back a directory&lt;/strong&gt;. Entering &lt;code&gt;cd -&lt;/code&gt; will bring you right back into the directory you were in before your last &lt;code&gt;cd&lt;/code&gt; command. Similarly, you can jump back to your previous Git branch with &lt;code&gt;git checkout -&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Split your terminal&lt;/strong&gt;. You can have multiple shell prompts on your screen at the same time using Terminator (easiest, mouse-based) or tmux (more powerful, keyboard-based).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Alias long commands&lt;/strong&gt;. Often need to repeat a long command? Create an alias for it so that you can just execute &lt;code&gt;myAlias&lt;/code&gt; next time. Details in the video. An alias looks like &lt;code&gt;alias myAlias="echo Hello world!"&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Send output to clipboard&lt;/strong&gt;. On X with &lt;code&gt;xclip&lt;/code&gt; installed, you can pipe any output to &lt;code&gt;xclip -selection clipboard&lt;/code&gt; to send it to your system clipboard. Bonus points if you alias it for quick access. Say goodbye to tedious manual text selection!&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Make reusable functions&lt;/strong&gt;. If you want to create an alias but some of its parameters should be variable, this is what you need. A Bash function looks like this:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;function &lt;/span&gt;resizeToWidth&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    convert &lt;span class="nt"&gt;-resize&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="nv"&gt;$2&lt;/span&gt; &lt;span class="nv"&gt;$2&lt;/span&gt;.&lt;span class="nv"&gt;$1w&lt;/span&gt;.png
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Once defined, it works like a regular command, e.g. &lt;code&gt;resizeToWidth 500 myImage.png&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Get automatic suggestions&lt;/strong&gt;. Thanks to the Zsh plugin &lt;code&gt;zsh-autosuggestions&lt;/code&gt; your terminal can suggest commands you've previously used as you type – even if you forgot to press Ctrl+R. You can accept suggestions with the Right arrow, or just keep typing if it's not the command you need.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Let your terminal prompt display your current Git branch&lt;/strong&gt;. Many Zsh themes like robbyrussel's will add an indication of your current Git branch name to your prompt if you're in a Git repository. You won't need &lt;code&gt;git status&lt;/code&gt; as much and you'll be less likely to commit to the wrong branch.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Syntax highlighting&lt;/strong&gt;. You already know syntax highlighting from your IDE, but you can also get that in your shell. This is very useful if you're typing up a command that uses strings, variables or advanced features that go beyond your average &lt;code&gt;ls ~/Desktop&lt;/code&gt;. It also shows a visual difference between commands that exist and commands that don't.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What productivity tricks do you use? Share your tips in the comments!&lt;/p&gt;

</description>
      <category>linux</category>
      <category>productivity</category>
      <category>bash</category>
      <category>terminal</category>
    </item>
    <item>
      <title>Scalable Websockets with AWS API Gateway and AWS Lambda</title>
      <author>Leonidas Costas</author>
      <pubDate>Fri, 30 Apr 2021 15:52:22 +0000</pubDate>
      <link>https://dev.to/leonidascostas/scalable-websockets-with-aws-api-gateway-and-aws-lambda-3gke</link>
      <guid>https://dev.to/leonidascostas/scalable-websockets-with-aws-api-gateway-and-aws-lambda-3gke</guid>
      <description>&lt;p&gt;Hi Sparta!&lt;/p&gt;

&lt;p&gt;In this article I will share with you how to add scalable websockets system in your app with AWS API Gateway and AWS Lambda. Websockets are used to implement any real time system in like a chat or a notification system.&lt;/p&gt;

&lt;p&gt;Please note that AWS is not mandatory to implement simple websockets, but it gives us the scalability we are looking for if we are dealing with an app with thousands of users.&lt;/p&gt;

&lt;p&gt;On my side, I used this module on top of the React/Node/MySQL starter. This starter has already been presented to you in &lt;a href="https://dev.to/fastmodularproject/web-starter-react-nestjs-mysql-3o9i"&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-does-it-bring"&gt;
  &lt;/a&gt;
  What does it bring?
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Open source code&lt;/li&gt;
&lt;li&gt;Documentation and "Quick Start"&lt;/li&gt;
&lt;li&gt;Complete integration of websockets in your React / NestJS / MySQL starter (it can be easily adapted to a node backend)&lt;/li&gt;
&lt;li&gt;AWS Lambda functions source code&lt;/li&gt;
&lt;li&gt;20 hours of work saved :D&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h1&gt;

&lt;p&gt;By getting the code &lt;a href="https://fast-modular-project.com/modules/websocket-apigateway-aws-lambda"&gt;here&lt;/a&gt;, you'll have the websockets already integrated in the web starter. You'll get a functional project with an authentication and a websocket system in less than 20 minutes :D&lt;/p&gt;

&lt;p&gt;Note that using the starter is not mandatory, you can also use the module as standalone. The integration won't be as easy as with the starter, but it should still be simple to integrate it in your already created project :)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#websockets-in-3-words"&gt;
  &lt;/a&gt;
  Websockets in 3 words
&lt;/h1&gt;

&lt;p&gt;With a standard (REST/SOAP) API, frontend sends information to the server and get a proper answer. This is enough most of the time but it means that the frontend/user need to perform an action to get up to date datas.&lt;/p&gt;

&lt;p&gt;Let's imagine a chat where users would have to press a "refresh button" to get new messages displayed... this would be quite annoying. Websockets come to the rescue ! &lt;/p&gt;

&lt;p&gt;Websocket is a bidirectional connection that you initiate between a server and a client. This connection allows the frontend to speak to the server and vice-versa without any call to an API. If we take back the example of the chat, websockets allow the server to say to the user that he has a new message (without any action from him).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The entire open source code and a step by step integration on the starter is available&lt;/strong&gt; &lt;a href="https://fast-modular-project.com/modules/websocket-apigateway-aws-lambda"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#high-level-picture-of-the-workflow"&gt;
  &lt;/a&gt;
  High level picture of the workflow
&lt;/h1&gt;

&lt;p&gt;The websocket connection will be setup between the client (browser or mobile app) and API Gateway (for sockets). We could have established a websocket connection directly with the backend but this could lead to a shutdown of your API if your server can't scale and if there is too many connections to be maintained. Thanks to API Gateway, the sockets will be handle in a separated server that can scale, independently from your back server.&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;User logs in&lt;/strong&gt;. He initializes a websocket connection with the API Gateway. The API generates a unique identifier of this connection: &lt;code&gt;connectionId&lt;/code&gt;. Once the connection is established, frontend send to the API Gateway (with the socket created) a "connected event". The AWS Lambda that handle the "websocket connection flow" calls our backend endpoint to link this user with this &lt;code&gt;connectionId&lt;/code&gt; in our database. The backend saves this infos. For every users connected on our app, we now have one or several &lt;code&gt;connectionId&lt;/code&gt; associated.&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;The backend want to send an event to users&lt;/strong&gt;. For all users, it get their connectionId and ask the API Gateway to send a message to the websocket identified by this &lt;code&gt;connectionId&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;Users receive the event&lt;/strong&gt; (without any call to the backend) and adapt their frontend accordingly.&lt;/p&gt;

&lt;p&gt;4) &lt;strong&gt;A user logs out&lt;/strong&gt;. This closes the websocket, and notify the API Gateway with a "disconnected event". The AWS Lambda that handle the "websocket disconnection flow" calls our backend endpoint to delete the link between this user and the &lt;code&gt;connectionId&lt;/code&gt; in our database. The backend saves this infos.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#configure-your-aws-api-gateway"&gt;
  &lt;/a&gt;
  Configure your AWS API Gateway
&lt;/h1&gt;

&lt;p&gt;1) Create an &lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-overview-developer-experience.html#api-gateway-overview-websocket"&gt;API Gateway (for sockets)&lt;/a&gt; with all default parameters &lt;br&gt;
Add 2 routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;auth&lt;/code&gt;: will be called from the frontend when we receive a new connection&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$disconnect&lt;/code&gt;: will be called from the frontend when we receive connection closing event&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2) Set your API Gateway credentials in the environments variables of your backend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ...
    apiGateway: {
      endpoint:
        'https://xxxxxxx.execute-api.eu-west-3.amazonaws.com/env',
      accessKeyId: 'XXXXXXXXXXXXXXXXXX',
      secretAccessKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
      region: 'eu-west-3',
    },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) Set your API Gateway endpoint in the environments variables of your frontend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;socketUrl: "wss://XXXXXXXX.execute-api.eu-west-3.amazonaws.com/env"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#configure-your-aws-lambdas"&gt;
  &lt;/a&gt;
  Configure your AWS Lambdas
&lt;/h1&gt;

&lt;p&gt;1) Setup the "Connection flow" with AWS Lambda.&lt;br&gt;
Create an AWS Lambda anted &lt;code&gt;websocket-connection&lt;/code&gt; and plug it to the &lt;code&gt;auth route&lt;/code&gt; of the API Gateway. &lt;/p&gt;

&lt;p&gt;In the code of this lambda you should call a backend endpoint we'll create soon. This endpoint will be in charge of saving in database the connectionId of the websocket the user just connected too. Please check &lt;a href="https://fast-modular-project.com/modules/websocket-apigateway-aws-lambda"&gt;here&lt;/a&gt; to copy paste the code for this lambda :)&lt;/p&gt;

&lt;p&gt;2) Setup the "Disconnection" flow with AWS Lambda.&lt;br&gt;
Create an AWS Lambda anted &lt;code&gt;websocket-disconnection&lt;/code&gt; and plug it to the &lt;code&gt;$disconnect route&lt;/code&gt; of the API Gateway. &lt;/p&gt;

&lt;p&gt;In the code of this lambda you should call a backend endpoint we'll create soon. This endpoint will be in charge of deleting the association between a user and a connectionId in our database. Please check &lt;a href="https://fast-modular-project.com/modules/websocket-apigateway-aws-lambda"&gt;here&lt;/a&gt; to copy paste the code for this lambda :)&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#setup-the-websockets-in-your-react-frontend"&gt;
  &lt;/a&gt;
  Setup the websockets in your React frontend
&lt;/h1&gt;

&lt;p&gt;1) Install following package&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i reconnecting-websocket@4.4.0&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;2) Init your websocket connection with the API Gateway Socket when the user is connected.&lt;/p&gt;

&lt;p&gt;You should establish the connection with the API Gateway thanks to the endpoint stored in your environment variable previously:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        let ws = new ReconnectingWebSocket(
            environment.socketUrl, [], {
            minReconnectionDelay: 500,
            maxReconnectionDelay: 500,
            reconnectionDelayGrowFactor: 1
        });
        ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should of course implement:&lt;br&gt;
&lt;code&gt;ws.onopen&lt;/code&gt; method: to define &lt;a href="https://fast-modular-project.com/modules/websocket-apigateway-aws-lambda"&gt;what to do when a connection is created&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ws.onmessage&lt;/code&gt; method: to define &lt;a href="https://fast-modular-project.com/modules/websocket-apigateway-aws-lambda"&gt;what to do when receiving a new message&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ws.onclose&lt;/code&gt; method: to define &lt;a href="https://fast-modular-project.com/modules/websocket-apigateway-aws-lambda"&gt;what to do when a connection is closed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;3) Close the connection when he is loging out: &lt;code&gt;ws.close();&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#prepare-our-nestjs-backend-for-websockets"&gt;
  &lt;/a&gt;
  Prepare our NestJS backend for websockets
&lt;/h1&gt;

&lt;p&gt;1) Create a new NestJS module &lt;code&gt;SocketConnectionsModule&lt;/code&gt; to manage websockets connections. Do not forget to add it to the import section of your &lt;code&gt;app.module&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;SocketConnectionEntity&lt;/code&gt; will associate a &lt;code&gt;connectionId&lt;/code&gt; to a &lt;code&gt;User&lt;/code&gt;. A user can have several websockets connections as he may be connected to your app through several browsers or with a mobile application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Entity('users')
export class UserEntity implements User {
    ...
    @OneToMany(type =&amp;gt; SocketConnectionEntity, socketConnection =&amp;gt; socketConnection.user)
    socketConnections: SocketConnectionEntity[];
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Entity('socket_connection')
export class SocketConnectionEntity implements SocketConnection {
    @PrimaryGeneratedColumn()
    id: number;

    @Column({ name: "connection_id" })
    connectionId: string;

    @ManyToOne(() =&amp;gt; UserEntity, user =&amp;gt; user.socketConnections, { onDelete: 'CASCADE' })
    @JoinColumn({ name: "user_id" })
    user: User;

    @Column({ type: "datetime", default: () =&amp;gt; "CURRENT_TIMESTAMP" })
    timestamp: Date;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The controller and the service will let us create, get or delete user's connection in database (the &lt;code&gt;SocketConnectionEntity&lt;/code&gt; we just created). Those two endpoints are used by the AWS Lambdas we created previously.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Controller('socket-connections')
export class SocketConnectionsController {

    constructor(private socketConnectionService: SocketConnectionsService) { }

    @Post()
    @Roles('user', 'premium', 'admin')
    async create(@Body() body, @AuthUser() user) {
        return await this.socketConnectionService.create(user, body.connectionId);
    }

    @Delete(':connectionId')
    async delete(@Param() param) {
        return await this.socketConnectionService.deleteConnection(param.connectionId);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) Create a &lt;code&gt;SocketService&lt;/code&gt; to ask the API Gateway to send a message to a specific &lt;code&gt;connectionId&lt;/code&gt;. Do not forget to import the was sdk &lt;code&gt;import { ApiGatewayManagementApi } from 'aws-sdk';&lt;/code&gt; and create your &lt;code&gt;awsGW&lt;/code&gt; object with your API Gateway credentials stored previously in your environment variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    async sendMessage(userId, data) {
        const connections = await this.socketConnectionService.getUserConnections(userId);

        for (const connection of connections) {
            console.log("Socket post to : ", connection.connectionId);
            this.awsGW.postToConnection({
                ConnectionId: connection.connectionId,
                Data: JSON.stringify(data)
            }, async (err, success) =&amp;gt; {
                if (err) {
                    if (!err.retryable) {
                        // Socket id is disabled
                        await this.socketConnectionService.deleteConnection(connection.connectionId);
                    }
                }
            });
        }
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I hope this module will help you saving some time while trying to implement websockets in your project. If you have any question, I'll be present as usual in the comment section !&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The platform sharing the starter and it's modules : &lt;a href="https://fast-modular-project.com"&gt;Fast Modular Project&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Module "Websocket with API Gateway and AWS Lambda" repository &lt;a href="https://fast-modular-project.com/modules/websocket-apigateway-aws-lambda"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do not hesitate to pin and like if you appreciated the article ❤️&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>node</category>
      <category>aws</category>
    </item>
    <item>
      <title>Clean Code #1 : React, Javascript</title>
      <author>Moni</author>
      <pubDate>Fri, 30 Apr 2021 15:41:24 +0000</pubDate>
      <link>https://dev.to/moni_coder/clean-code-1-react-javascript-494l</link>
      <guid>https://dev.to/moni_coder/clean-code-1-react-javascript-494l</guid>
      <description>&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;lets say we have a object like below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = {
  firstName: 'Vijay',
  lastName: 'Singh'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : firstName and lastName can be empty string or undefined or null.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const fullName = user.firstName 
? ( user.lastName ? `${user.firstName} ${user.lastName}`: user.firstName) 
: user.lastName
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Using || Operator&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const fullName = `${user.firstName || '' } ${user.lastName || ''}`.trim()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nV1woOzVvRQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React Hook Form - A fast, performant and easy way to manage your forms in your react.js apps</title>
      <author>Ahmed Sarhan</author>
      <pubDate>Fri, 30 Apr 2021 15:30:15 +0000</pubDate>
      <link>https://dev.to/ahmedsarhan/react-hook-form-a-fast-performant-and-easy-way-to-manage-your-forms-in-your-react-js-apps-5em6</link>
      <guid>https://dev.to/ahmedsarhan/react-hook-form-a-fast-performant-and-easy-way-to-manage-your-forms-in-your-react-js-apps-5em6</guid>
      <description>&lt;p&gt;In this article you will learn about React Hook Form package and how to easily manage your forms in your react.js app&lt;/p&gt;

&lt;p&gt;Nearly in every web application there's some form where the user enters data ... whether it is a signup / login form or just a contact us form, a job application form or whatever type of user input your business might need.&lt;/p&gt;

&lt;p&gt;Now as a Software Developer or specifically a Front End developer your objective while building those forms is to collect the data from the user, send them to an API or direct them according to the business logic, show the user some error messages according to a validation schema and hopefully doing this in the most performant way possible along the way&lt;/p&gt;

&lt;p&gt;So the question is how do we usually do this with React with no third party libraries involved?&lt;/p&gt;

&lt;p&gt;We can use our state and the two way binding like the example in the screen shot down below &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YRDm8rny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2364swtkz2a6hsc85opd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YRDm8rny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2364swtkz2a6hsc85opd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Now there are two main issues with that approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Performance&lt;/li&gt;
&lt;li&gt;The Cleanliness of our code &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#the-performance"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The Performance:&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Let's assume we have a form of 5 to 10 inputs which is the usual range, now with every character a user types, edits or deletes this &lt;code&gt;onChange&lt;/code&gt; function will run and hence the DOM will Re-render&lt;br&gt;
and to the best of my knowledge that's not a great performance now, is it?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-cleanliness-of-our-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The Cleanliness of our code:&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Now maybe not too many people pay attention to this point, nevertheless when you code something, you always have to keep in mind that other people might need to read it, update it, edit it or learn form it and hence it should be readable and understandable to most people who have working experience in the field &lt;br&gt;
That being said, if you have too many inputs with too many &lt;code&gt;useState&lt;/code&gt; hooks and too many &lt;code&gt;OnChange&lt;/code&gt; Functions, nearly almost the same number of hooks and some sort of if statement validations to validate those inputs and show the user your errors.&lt;/p&gt;

&lt;p&gt;Now this is how your code will look like&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LPEM-4Cz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xlbwgw241li8hpegrrvi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LPEM-4Cz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xlbwgw241li8hpegrrvi.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Not pretty I assume&lt;/p&gt;

&lt;p&gt;So what if I tell you, that you can validate all of your form inputs, connect them all to one hook and only re-render the DOM once when the user submits ? sounds like a solution to the miss right? &lt;br&gt;
but what about the errors you say? Don't worry we will be showing them to the user on the fly, but still with very minimum effects on the rendering&lt;/p&gt;

&lt;p&gt;So to the main topic of this article &lt;strong&gt;React Hook Form&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;I have made a &lt;a href="https://www.youtube.com/playlist?list=PLFh6HAUiGt6GrO1jJhe-y0r7O_mtM_02N"&gt;YouTube tutorial&lt;/a&gt; -  my first to be honest - about React Hook Form and did my best to dive deep into most of the aspects and features it offers to you&lt;/p&gt;

&lt;p&gt;In this tutorial I dive deep in how to connect your form to the React Hook Form &lt;code&gt;useForm hook&lt;/code&gt;, different ways of handling the form validation and their effects on the performance of our application&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z2uWww-1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5bv9k6v3uxij8a7o0n0f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z2uWww-1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5bv9k6v3uxij8a7o0n0f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
I also dive into connecting the React Hook Form to a custom validation Schema using Yup and JOI so that you have a variety of options when it comes to validating and maybe writing a clean code&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ix9FRsYg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8l5ke7wcdjc8wv4kidk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ix9FRsYg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8l5ke7wcdjc8wv4kidk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
by default React Hook Form gives you what's called a resolver that allows you to validate your form using a custom validation library like Yup, Joi, Zod and much more and they have official support for plenty of them which makes your life a lot easier&lt;br&gt;
I will be diving into all of this and more in this &lt;a href="https://www.youtube.com/playlist?list=PLFh6HAUiGt6GrO1jJhe-y0r7O_mtM_02N"&gt;continuing mini series on Youtube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Watch The full Tutorial down below or &lt;a href="https://www.youtube.com/playlist?list=PLFh6HAUiGt6GrO1jJhe-y0r7O_mtM_02N"&gt;on my Channel on YouTube Chanel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/gEt4AW13F3Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>reacthookform</category>
      <category>reactforms</category>
      <category>forms</category>
    </item>
    <item>
      <title>Create Your Own Azure Bastion with Guacamole and Save $100+ a month</title>
      <author>Chairat Onyaem (Par)</author>
      <pubDate>Fri, 30 Apr 2021 15:18:40 +0000</pubDate>
      <link>https://dev.to/pacroy/create-your-own-azure-bastion-with-guacamole-and-save-100-a-month-3fld</link>
      <guid>https://dev.to/pacroy/create-your-own-azure-bastion-with-guacamole-and-save-100-a-month-3fld</guid>
      <description>&lt;p&gt;Microsoft Azure provides &lt;a href="https://azure.microsoft.com/en-us/services/azure-bastion"&gt;Azure Bastion&lt;/a&gt; service which is a jump server so you can securely access your virtual machines via its Azure Portal web interface without exposing SSH or RDP port. Here is its architecture:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LVzwEh68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v15wy165uheqdm4ljb6w.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LVzwEh68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v15wy165uheqdm4ljb6w.jpg" alt="Azure Bastion Architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This service is great except &lt;a href="https://azure.microsoft.com/en-us/pricing/details/azure-bastion/"&gt;it costs $0.19 per hour&lt;/a&gt;. Combining with other components then this may costs you almost $150 a month. Bad news is you can't stop it unless you delete it.&lt;/p&gt;

&lt;p&gt;This post, I will show you how I create my own jump server on  Ubuntu VM to replace Azure Bastion using &lt;a href="https://guacamole.apache.org/"&gt;Apache Guacamole&lt;/a&gt; which is an open source tool which provide similar functionalities (I wonder that Azure Bastion may be even built on top of it). The VM can be a small one that may costs only a few tens bucks per month.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#apache-guacamole"&gt;
  &lt;/a&gt;
  Apache Guacamole
&lt;/h1&gt;

&lt;p&gt;From &lt;a href="(https://guacamole.apache.org/)"&gt;its website&lt;/a&gt;, Apache Guacamole is a clientless remote desktop gateway that supports standard protocols like VNC, RDP, and SSH. Clientless means your clients don't need to install anything but just use a web browser to remotely access your fleet of VMs.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/116207678" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The Guacamole comprises of two main components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Guacamole Server which provides &lt;code&gt;guacd&lt;/code&gt; which is like a proxy server for the client to connect to the remote server.&lt;/li&gt;
&lt;li&gt;Guacamole Client which is a servelet container that user will log in and via web browser.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9fNeSi95--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdmwjtttqn8va262s79b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9fNeSi95--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdmwjtttqn8va262s79b.png" alt="Guacamole Architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information about Guacamole, visit its &lt;a href="https://guacamole.apache.org/doc/gug/guacamole-architecture.html"&gt;architecture page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As my disclaimer, installation is not simple as there are several components you need to install and configure before it is &lt;em&gt;good enough&lt;/em&gt; to use. There may be simpler ways to deploy e.g. using &lt;a href="https://guacamole.apache.org/doc/gug/guacamole-docker.html"&gt;Docker image&lt;/a&gt; or using &lt;a href="https://github.com/prabhatsharma/apache-guacamole-helm-chart/blob/master/values.yaml"&gt;this Helm chart&lt;/a&gt; but I haven't tried them yet. Because of cost is my concern so I'd like to deploy on a small VM that may not run a Kubernetes cluster (and may be I just prefer to learn it in hard way :P).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#network-topology"&gt;
  &lt;/a&gt;
  Network Topology
&lt;/h1&gt;

&lt;p&gt;You use Azure Bastion or a jump server because you want to secure your VMs behind so having the right network design is needed. Here it mine:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZyPG2oFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ve1uz4kmxg65ox3gikj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZyPG2oFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ve1uz4kmxg65ox3gikj.png" alt="Network Topology"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my virtual network (VNet), I split into two subnets:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;snet-gateway&lt;/code&gt; where I will deploy Guacamole on a Ubuntu VM which has a public IP so its web interface can be reached from the Internet.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;snet-default&lt;/code&gt; where I will deploy my backend pool of VM and enable remote access via Guacamole only.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For the sake of security, you should configure Network Security Group (NSG) of your &lt;code&gt;snet-gateway&lt;/code&gt; to limit inbound and outbound connections to/from Ubuntu VM in the same way as you do for &lt;a href="https://docs.microsoft.com/en-us/azure/bastion/bastion-nsg#apply"&gt;AzureBastionSubnet&lt;/a&gt;. But in this example, I just associate NSG to the VM directly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qh-fLExe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9jmik21jh988vk99jwo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qh-fLExe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9jmik21jh988vk99jwo.png" alt="NSG Inbound Rules"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SO3lUBP2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkncp6amdvvjar3ita6q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SO3lUBP2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkncp6amdvvjar3ita6q.png" alt="NSG Outbound Rules"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you setup your network then create the VMs. In this example, I create the following two VMs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;vm-win10&lt;/code&gt; in the &lt;code&gt;snet-default&lt;/code&gt; which is the machine I will remote access to.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;vm-ubuntu1804&lt;/code&gt; in the &lt;code&gt;snet-gateway&lt;/code&gt; where I will install Guacamole and use it as a jump server. I choose &lt;code&gt;B2s&lt;/code&gt; size which cost around $39 per month but, of course, you can change its size later.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#install-guacamole-server"&gt;
  &lt;/a&gt;
  Install Guacamole Server
&lt;/h1&gt;

&lt;p&gt;Once your Ubuntu Server 18.04 is created then log in via SSH. You may need to expose SSH port publicly for now. You can change SSH port to something than 22 to make it more secure. See how to do it in my previous blog.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="https://pacroy.medium.com/setting-up-your-own-vpn-server-with-just-5-a-month-c934cf073ea1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B1fBYwoh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/56/56/2%2A4gvckT_I3cZbFmK6BMHMiA.jpeg" alt="Chairat Onyaem (Par)"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://pacroy.medium.com/setting-up-your-own-vpn-server-with-just-5-a-month-c934cf073ea1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Setting Up Your Own VPN Server with just $5 a month | by Chairat Onyaem (Par) | Medium&lt;/h2&gt;
      &lt;h3&gt;Chairat Onyaem (Par) ・ &lt;time&gt;Mar 13, 2021&lt;/time&gt; ・ 
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ze5yh_2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/medium_icon-90d5232a5da2369849f285fa499c8005e750a788fdbf34f5844d5f2201aae736.svg" alt="Medium Logo"&gt;
        pacroy.Medium
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;From &lt;a href="https://guacamole.apache.org/doc/gug/installing-guacamole.html"&gt;its documentation&lt;/a&gt;, there's no executable binary available for Guacamole server and you need to build it from source (unless you deploy from Docker image).&lt;/p&gt;

&lt;p&gt;First you need to install build tools and all required dependencies for the build process. Missing some of them may result in missing features or build failure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Update &amp;amp; upgrade system&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nt"&gt;--yes&lt;/span&gt; upgrade

&lt;span class="c"&gt;# Install build tools&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--yes&lt;/span&gt; build-essential

&lt;span class="c"&gt;# Install build dependencies&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--yes&lt;/span&gt; libcairo2-dev libjpeg-turbo8-dev libpng-dev libtool-bin libossp-uuid-dev

&lt;span class="c"&gt;# Install optional dependencies&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--yes&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    libavcodec-dev libavformat-dev libavutil-dev libswscale-dev &lt;span class="se"&gt;\&lt;/span&gt;
    freerdp2-dev &lt;span class="se"&gt;\&lt;/span&gt;
    libpango1.0-dev &lt;span class="se"&gt;\&lt;/span&gt;
    libssh2-1-dev &lt;span class="se"&gt;\&lt;/span&gt;
    libtelnet-dev &lt;span class="se"&gt;\&lt;/span&gt;
    libvncserver-dev &lt;span class="se"&gt;\&lt;/span&gt;
    libwebsockets-dev &lt;span class="se"&gt;\&lt;/span&gt;
    libpulse-dev &lt;span class="se"&gt;\&lt;/span&gt;
    libssl-dev &lt;span class="se"&gt;\&lt;/span&gt;
    libvorbis-dev &lt;span class="se"&gt;\&lt;/span&gt;
    libwebp-dev

&lt;span class="c"&gt;# Install runtime dependencies&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--yes&lt;/span&gt; &lt;span class="nt"&gt;--no-install-recommends&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    netcat-openbsd                &lt;span class="se"&gt;\&lt;/span&gt;
    ca-certificates               &lt;span class="se"&gt;\&lt;/span&gt;
    ghostscript                   &lt;span class="se"&gt;\&lt;/span&gt;
    fonts-liberation              &lt;span class="se"&gt;\&lt;/span&gt;
    fonts-dejavu                  &lt;span class="se"&gt;\&lt;/span&gt;
    xfonts-terminus
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, download source codes and extract.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;GUAC_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"1.3.0"&lt;/span&gt;
curl &lt;span class="nt"&gt;-fLO&lt;/span&gt; &lt;span class="s2"&gt;"https://downloads.apache.org/guacamole/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GUAC_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/source/guacamole-server-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GUAC_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.tar.gz"&lt;/span&gt;
&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-xzf&lt;/span&gt; &lt;span class="s2"&gt;"guacamole-server-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GUAC_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.tar.gz"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Configure the build and start the build.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;"guacamole-server-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GUAC_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
./configure &lt;span class="nt"&gt;--with-init-dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/etc/init.d
make
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Once done, install and start the service.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;make &lt;span class="nb"&gt;install
sudo &lt;/span&gt;ldconfig
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl daemon-reload
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl start guacd
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;guacd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;At this point, the Guacamole server (guacd) service should be up and running. Inspect by executing &lt;code&gt;systemctl status guacd --no-pager&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KYUK-hJM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8absf4ibgp8z964tli9w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KYUK-hJM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8absf4ibgp8z964tli9w.png" alt="Guacamole Server Service Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#install-guacamole-client"&gt;
  &lt;/a&gt;
  Install Guacamole Client
&lt;/h1&gt;

&lt;p&gt;Unlike the server, we don't need to build it (but you can if you want). So we will download the WAR file and install on Tomcat server then expose it through nginx via HTTPS.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#install-tomcat"&gt;
  &lt;/a&gt;
  Install Tomcat
&lt;/h2&gt;

&lt;p&gt;First, we need Tomcat to run the WAR file. Use this script to install it.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;TOMCAT_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"8.5.65"&lt;/span&gt;
&lt;span class="nv"&gt;TOMCAT_MAJOR_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TOMCAT_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-F&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'{print $1}'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--yes&lt;/span&gt; default-jdk
&lt;span class="nb"&gt;sudo &lt;/span&gt;groupadd tomcat
&lt;span class="nb"&gt;sudo &lt;/span&gt;useradd &lt;span class="nt"&gt;-s&lt;/span&gt; /bin/false &lt;span class="nt"&gt;-g&lt;/span&gt; tomcat &lt;span class="nt"&gt;-d&lt;/span&gt; /opt/tomcat tomcat
&lt;span class="nb"&gt;sudo &lt;/span&gt;usermod &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;-G&lt;/span&gt; tomcat &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
curl &lt;span class="nt"&gt;-LO&lt;/span&gt; &lt;span class="s2"&gt;"https://downloads.apache.org/tomcat/tomcat-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TOMCAT_MAJOR_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/v&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TOMCAT_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/bin/apache-tomcat-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TOMCAT_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.tar.gz"&lt;/span&gt;
&lt;span class="nb"&gt;sudo mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /opt/tomcat
&lt;span class="nb"&gt;sudo tar&lt;/span&gt; &lt;span class="nt"&gt;-xzf&lt;/span&gt; &lt;span class="s2"&gt;"apache-tomcat-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TOMCAT_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.tar.gz"&lt;/span&gt; &lt;span class="nt"&gt;-C&lt;/span&gt; /opt/tomcat &lt;span class="nt"&gt;--strip-components&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="nb"&gt;sudo chgrp&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; tomcat /opt/tomcat
&lt;span class="nb"&gt;cd&lt;/span&gt; /opt/tomcat
&lt;span class="nb"&gt;sudo chmod&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; g+r conf
&lt;span class="nb"&gt;sudo chmod &lt;/span&gt;g+x conf
&lt;span class="nb"&gt;sudo chown&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; tomcat webapps/ work/ temp/ logs/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Configure Tomcat and start the service.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;JAVA_ALT_TEXT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;update-java-alternatives &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nv"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JAVA_ALT_TEXT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{print $3}'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"[Unit]
Description=Apache Tomcat Web Application Container
After=network.target

[Service]
Type=forking

Environment=JAVA_HOME=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid
Environment=CATALINA_HOME=/opt/tomcat
Environment=CATALINA_BASE=/opt/tomcat
Environment='CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC'
Environment='JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom'

ExecStart=/opt/tomcat/bin/startup.sh
ExecStop=/opt/tomcat/bin/shutdown.sh

User=tomcat
Group=tomcat
UMask=0007
RestartSec=10
Restart=always

[Install]
WantedBy=multi-user.target"&lt;/span&gt; | &lt;span class="nb"&gt;sudo tee&lt;/span&gt; /etc/systemd/system/tomcat.service &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /dev/null
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl daemon-reload
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl start tomcat
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;tomcat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now the Tomcat service should be up and running. Inspect by executing &lt;code&gt;systemctl status tomcat.service --no-pager&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nw_bfs4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h8c1a8tbd591h0wgbsrt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nw_bfs4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h8c1a8tbd591h0wgbsrt.png" alt="Tomcat Service Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#add-guacamole-client-servlet"&gt;
  &lt;/a&gt;
  Add Guacamole Client Servlet
&lt;/h2&gt;

&lt;p&gt;Download and add the WAR file to the Tomcat.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-LO&lt;/span&gt; &lt;span class="s2"&gt;"https://downloads.apache.org/guacamole/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GUAC_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/binary/guacamole-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GUAC_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.war"&lt;/span&gt;
&lt;span class="nb"&gt;sudo cp&lt;/span&gt; &lt;span class="s2"&gt;"guacamole-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GUAC_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.war"&lt;/span&gt; &lt;span class="s2"&gt;"/opt/tomcat/webapps/ROOT.war"&lt;/span&gt;
&lt;span class="nb"&gt;sudo chown &lt;/span&gt;tomcat:tomcat &lt;span class="s2"&gt;"/opt/tomcat/webapps/ROOT.war"&lt;/span&gt;
&lt;span class="nb"&gt;sudo rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; /opt/tomcat/webapps/ROOT
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You may try to access the client at &lt;code&gt;http://&amp;lt;your-server&amp;gt;:8080/&lt;/code&gt; by either open or forward the port and you should see the Guacamole's login screen (but you can't login now).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SfoCKie5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/okirc2h7agxiq27qaste.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SfoCKie5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/okirc2h7agxiq27qaste.png" alt="Guacamole Login"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case you see Tomcat instead of Guacamole, restart Tomcat using command &lt;code&gt;sudo systemctl restart tomcat&lt;/code&gt; and try again.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#install-nginx-and-certbot"&gt;
  &lt;/a&gt;
  Install nginx and certbot
&lt;/h2&gt;

&lt;p&gt;We will use &lt;a href="https://www.nginx.com/"&gt;nginx&lt;/a&gt; as a proxy and &lt;a href="https://certbot.eff.org/"&gt;certbot&lt;/a&gt; to get a certificate from Let's Encrypt.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--yes&lt;/span&gt; nginx-core
&lt;span class="nb"&gt;sudo &lt;/span&gt;snap &lt;span class="nb"&gt;install &lt;/span&gt;core&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;snap refresh core
&lt;span class="nb"&gt;sudo &lt;/span&gt;snap &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--classic&lt;/span&gt; certbot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Configure certbot with a domain and an email address and integrate with nginx.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DOMAIN_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;Your VM FQDN&amp;gt;"&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;EMAIL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;Your Email Address&amp;gt;"&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;certbot &lt;span class="nt"&gt;--nginx&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DOMAIN_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;EMAIL&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;--agree-tos&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Edit the file &lt;code&gt;/etc/nginx/sites-enabled/default&lt;/code&gt; and replace the following section:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    server_name your.server.fqdn; # managed by Certbot

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;with this one:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    server_name your.server.fqdn; # managed by Certbot

        location / {


                proxy_pass http://localhost:8080/;
                proxy_buffering off;
                proxy_http_version 1.1;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $http_connection;
                proxy_cookie_path /guacamole/ /;
                access_log off;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will set nginx as a proxy to your servlet. You don't need to configure to redirect HTTP to HTTPS as that is already done by certbot.&lt;/p&gt;

&lt;p&gt;Test the configuration and restart nginx.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;nginx &lt;span class="nt"&gt;-t&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl restart nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now you should be able to access Guacamole ay &lt;code&gt;https://&amp;lt;your-server&amp;gt;/&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#configure-user-and-connections"&gt;
  &lt;/a&gt;
  Configure User and Connections
&lt;/h2&gt;

&lt;p&gt;We will create a user with two connections in the &lt;code&gt;user-mapping.xml&lt;/code&gt; file so we can test logging on.&lt;/p&gt;

&lt;p&gt;Create the file &lt;code&gt;/etc/guacamole/user-mapping.xml&lt;/code&gt; an put below content. Create the directory &lt;code&gt;/etc/guacamole&lt;/code&gt; first if it does not exist.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;user-mapping&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;authorize&lt;/span&gt; &lt;span class="na"&gt;username=&lt;/span&gt;&lt;span class="s"&gt;"guacadmin"&lt;/span&gt; &lt;span class="na"&gt;password=&lt;/span&gt;&lt;span class="s"&gt;"guacadmin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;connection&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"this-server-ssh"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
             &lt;span class="nt"&gt;&amp;lt;protocol&amp;gt;&lt;/span&gt;ssh&lt;span class="nt"&gt;&amp;lt;/protocol&amp;gt;&lt;/span&gt;
             &lt;span class="nt"&gt;&amp;lt;param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"hostname"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;localhost&lt;span class="nt"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
             &lt;span class="nt"&gt;&amp;lt;param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"port"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;22&lt;span class="nt"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/connection&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;connection&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"some-win10-rdp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
             &lt;span class="nt"&gt;&amp;lt;protocol&amp;gt;&lt;/span&gt;rdp&lt;span class="nt"&gt;&amp;lt;/protocol&amp;gt;&lt;/span&gt;
             &lt;span class="nt"&gt;&amp;lt;param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"hostname"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;vm-win10&lt;span class="nt"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
             &lt;span class="nt"&gt;&amp;lt;param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"port"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;3389&lt;span class="nt"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
             &lt;span class="nt"&gt;&amp;lt;param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;username&lt;span class="nt"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
             &lt;span class="nt"&gt;&amp;lt;param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;thisisyourpassword&lt;span class="nt"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
             &lt;span class="nt"&gt;&amp;lt;param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"ignore-cert"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/connection&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/authorize&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/user-mapping&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The first connection is SSH to local server itself while the second one is RDP to Windows 10 VM. Don't forget to update the username and password.&lt;/p&gt;

&lt;p&gt;Restart Tomcat and test logging in and making the connections.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl restart tomcat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JVrLo7c6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzthl1qgsbhacb59oc0p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JVrLo7c6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzthl1qgsbhacb59oc0p.png" alt="Guacamole with Dummy Connections"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If everything is configured properly, you should be able to connect to your VMs via either SSH and RDP. However, you cannot change anything on the web GUI the configuration is static in the file &lt;code&gt;user-mapping.xml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2-95Uhil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ud6bvfeo2qw0ij2dgost.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2-95Uhil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ud6bvfeo2qw0ij2dgost.png" alt="Guacamole Static Settings"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;To make it editable via the web GUI, we need to install a database. In this example, I will use MySQL but Guacamole also supports other databases e.g. MariaDB, PostgreSQL. You can check for more information in &lt;a href="https://guacamole.apache.org/doc/gug/jdbc-auth.html"&gt;this documentation page&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#install-mysql"&gt;
  &lt;/a&gt;
  Install MySQL
&lt;/h1&gt;

&lt;p&gt;Let's install MySQL.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--yes&lt;/span&gt; mysql-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Check MySQL service status by executing &lt;code&gt;systemctl status mysql --no-pager&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lwFOiZ8N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whmmn8kqfsr7xx8gn5se.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lwFOiZ8N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whmmn8kqfsr7xx8gn5se.png" alt="MySQL Service Status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After install the MySQL, we also need to install the Guacamole extension and library so it knows how to talk to the database.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Download and install JDBC extensions&lt;/span&gt;
curl &lt;span class="nt"&gt;-fLO&lt;/span&gt; &lt;span class="s2"&gt;"https://downloads.apache.org/guacamole/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GUAC_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/binary/guacamole-auth-jdbc-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GUAC_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.tar.gz"&lt;/span&gt;
&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-xzf&lt;/span&gt; &lt;span class="s2"&gt;"guacamole-auth-jdbc-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GUAC_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.tar.gz"&lt;/span&gt;
&lt;span class="nb"&gt;sudo mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /etc/guacamole/extensions
&lt;span class="nb"&gt;sudo cp&lt;/span&gt; &lt;span class="s2"&gt;"guacamole-auth-jdbc-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GUAC_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/mysql/guacamole-auth-jdbc-mysql-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GUAC_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.jar"&lt;/span&gt; &lt;span class="s2"&gt;"/etc/guacamole/extensions/"&lt;/span&gt;

&lt;span class="c"&gt;# Download and install MySQL Connector/J&lt;/span&gt;
&lt;span class="nv"&gt;CONNECTORJ_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"8.0.24"&lt;/span&gt;
curl &lt;span class="nt"&gt;-fLO&lt;/span&gt; &lt;span class="s2"&gt;"https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CONNECTORJ_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.tar.gz"&lt;/span&gt;
&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-xvf&lt;/span&gt; &lt;span class="s2"&gt;"mysql-connector-java-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CONNECTORJ_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.tar.gz"&lt;/span&gt;
&lt;span class="nb"&gt;sudo mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /etc/guacamole/lib
&lt;span class="nb"&gt;sudo cp&lt;/span&gt; &lt;span class="s2"&gt;"mysql-connector-java-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CONNECTORJ_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/mysql-connector-java-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CONNECTORJ_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.jar"&lt;/span&gt; &lt;span class="s2"&gt;"/etc/guacamole/lib/"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#configure-database"&gt;
  &lt;/a&gt;
  Configure Database
&lt;/h2&gt;

&lt;p&gt;Next, we need to create a database and a user. In this example, I will create the database named &lt;code&gt;guacamole_db&lt;/code&gt; and the user named &lt;code&gt;guacamole_user&lt;/code&gt;. Please note the password must meet complexity criteria.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;MYSQL_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;YourPasswordHere&amp;gt;"&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;mysql &lt;span class="nt"&gt;--execute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'CREATE DATABASE guacamole_db;'&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;mysql &lt;span class="nt"&gt;--execute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"CREATE USER 'guacamole_user'@'localhost' IDENTIFIED BY '&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;MYSQL_PASSWORD&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;';"&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;mysql &lt;span class="nt"&gt;--execute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"GRANT SELECT,INSERT,UPDATE,DELETE ON guacamole_db.* TO 'guacamole_user'@'localhost';"&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;mysql &lt;span class="nt"&gt;--execute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'FLUSH PRIVILEGES;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then run the provides scripts to create schema and the Guacamole default user &lt;code&gt;guacadmin&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;guacamole-auth-jdbc-1.3.0/mysql/schema/&lt;span class="k"&gt;*&lt;/span&gt;.sql | &lt;span class="nb"&gt;sudo &lt;/span&gt;mysql guacamole_db
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Lastly, you need to configure Guacamole client so it can connect to the database by creating file &lt;code&gt;/etc/guacamole/guacamole.properties&lt;/code&gt; and put the following content.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# MySQL properties&lt;/span&gt;
&lt;span class="na"&gt;mysql-hostname&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt;
&lt;span class="na"&gt;mysql-port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3306&lt;/span&gt;
&lt;span class="na"&gt;mysql-database&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;guacamole_db&lt;/span&gt;
&lt;span class="na"&gt;mysql-username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;guacamole_user&lt;/span&gt;
&lt;span class="na"&gt;mysql-password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;YourPasswordHere&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you configure the &lt;code&gt;user-mapping.xml&lt;/code&gt; file before then you may no longer need that so remove it.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo rm&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; /etc/guacamole/user-mapping.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Restart Tomcat and test logging in again using default username and password i.e. &lt;code&gt;guacadmin&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl restart tomcat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, you should be able to make changes in the Settings. It is recommended you create a new user and then remove the &lt;code&gt;guacadmin&lt;/code&gt; as soon as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-x4UePh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ul497mrr8pedfsel6r6v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-x4UePh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ul497mrr8pedfsel6r6v.png" alt="Guacamole Dynamic Settings"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#enable-twofactor-authentication"&gt;
  &lt;/a&gt;
  Enable Two-Factor Authentication
&lt;/h1&gt;

&lt;p&gt;If you want you can optionally install TOTP module to enable two-factor authentication to add more security to your VM pool. Just download the extension and restart Tomcat.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Download and install TOTP extension&lt;/span&gt;
curl &lt;span class="nt"&gt;-fLO&lt;/span&gt; &lt;span class="s2"&gt;"https://downloads.apache.org/guacamole/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GUAC_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/binary/guacamole-auth-totp-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GUAC_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.tar.gz"&lt;/span&gt;
&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-xzf&lt;/span&gt; &lt;span class="s2"&gt;"guacamole-auth-totp-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GUAC_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.tar.gz"&lt;/span&gt;
&lt;span class="nb"&gt;sudo mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /etc/guacamole/extensions
&lt;span class="nb"&gt;sudo cp&lt;/span&gt; &lt;span class="s2"&gt;"guacamole-auth-totp-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GUAC_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/guacamole-auth-totp-&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GUAC_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.jar"&lt;/span&gt; &lt;span class="s2"&gt;"/etc/guacamole/extensions/"&lt;/span&gt;

&lt;span class="c"&gt;# Restart tomcat&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl restart tomcat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, when you try logging in again, it will ask you to setup an authenticator and require you to input in every time you log in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WBIghws2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogujgoikwc4m2wwp1m99.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WBIghws2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogujgoikwc4m2wwp1m99.png" alt="Multi-factor Authentication Setup"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#scripts"&gt;
  &lt;/a&gt;
  Scripts
&lt;/h1&gt;

&lt;p&gt;If you don't want to perform all above steps one by one, you may leverage bash scripts I created in this repository.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pacroy"&gt;
        pacroy
      &lt;/a&gt; / &lt;a href="https://github.com/pacroy/guacamole-setup-script"&gt;
        guacamole-setup-script
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Guacamole Setup Script for Ubuntu Linux Server
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Use at your own risk!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Cover Image by &lt;a href="https://unsplash.com/@footluz?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Footluz Blog&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/bastion?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>azure</category>
      <category>bastion</category>
      <category>guacamole</category>
      <category>ubuntu</category>
    </item>
  </channel>
</rss>
