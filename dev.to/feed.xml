<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>4C - The Cool Community of Content Creators</title>
      <author>Francesco Ciulla</author>
      <pubDate>Tue, 12 Oct 2021 13:08:26 +0000</pubDate>
      <link>https://dev.to/francescoxx/4c-the-cool-community-of-content-creators-1oee</link>
      <guid>https://dev.to/francescoxx/4c-the-cool-community-of-content-creators-1oee</guid>
      <description>&lt;p&gt;What do the 4C community members think of the 4C community itself?&lt;br&gt;
Let's ask them.&lt;/p&gt;

&lt;p&gt;Join the community: &lt;a href="https://discord.com/invite/TcmA2kbJeA"&gt;https://discord.com/invite/TcmA2kbJeA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.com/invite/TcmA2kbJeA"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ysqRgoz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634041616139/LIxgbJOci.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vikkybliz"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/Vikkybliz"&gt;Vikkybliz&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is a group for content creators. If you don‚Äôt know how to start or you have even started, 4C is a place to interact with other content creators, share tips and tricks, and just chart. The earlier you join the better &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ayush-agarwal"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/ayushdev_24"&gt;Ayush Agarwal&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you are into content creation and ever felt lonely and unmotivated, You must be a part of 4C. We help each other out , learn lots of new things. And the best part is that we connect weekly where we can share or discuss anything we want. Hope to see you in our community soon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sophyia"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/sophiairoegbu_"&gt;Sophyia&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Hi Francesco, I'm Sophia Iroegbu. &lt;br&gt;
The community is beautiful and helpful. I have been more confident about tech and tech writing and the community and its members helped me achieve that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#merkim"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/KimMerdi"&gt;Merkim&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The 4C community has been an amazing place so far. Having that opportunity to get knowledge from other content creators has been helpful to me. With open-minded people inside the community, everyone gets additional knowledge from others. I would highly recommend this community!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#suraj-kumar-agarwal"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/AgarwalSurajk"&gt;Suraj Kumar Agarwal&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The 4C group helped me to reach excellent community members and to learn and explore how groups work together.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yash-prakash"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/csandyash"&gt;Yash Prakash&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Despite my short time in this community, I‚Äôm very impressed by the number of good resources and helpful people there are here. I‚Äôm very excited to learn from them as I grow as a developer. The exchange of ideas so far looks and feels very coordinated, and led by my favorite devs from Twitter and YouTube, so I find it very encouraging to learn and give back to the community as well.&lt;/p&gt;

&lt;p&gt;Thanks so much! üòÅ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ramya-chinnadurai"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/code_rams"&gt;Ramya Chinnadurai&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is a really cool community, and the members here are really friendly. I could see the tremendous support for the hacktoberfest challenge and interactive guidance to solve PRs. I love the &lt;code&gt;count-to-10k&lt;/code&gt; channel, it‚Äôs really cool and funny. I would add the number whenever I visit this channel and there are a lot more fantastic additional channels here to explore.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#siddharth-shyniben"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/SiddharthShyn"&gt;Siddharth Shyniben&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Even though I‚Äôve only been here for a short time, I can already see the benefits of joining 4C; the viewership and genuine interactions have improved a lot on my blog.&lt;/p&gt;

&lt;p&gt;This is not the only benefit of joining 4C: There are a lot of other things to do. From useful stuff like collaborating, resources, finding work, hacktoberfest to just fun things like a counting channel and off-topic chat.&lt;/p&gt;

&lt;p&gt;If you feel the content you create doesn‚Äôt reach anyone, 4C can be a great way to motivate you and spread your content. And if you do reach others, 4C can still help you ;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#avneesh-agarwal"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/avneesh0612"&gt;Avneesh Agarwal&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is a great community for us content creators. We discuss ideas on what and how to create content. We also have a weekly call where we talk about the latest events like hacktoberfest! I have been loving the 4C community so far.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meenakshi"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/SankarMeenakshi"&gt;Meenakshi &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The 4C community is very supportive and a great platform for collaboration on various activities. It is an exciting space to see developers both new and established lift each other up. I am glad to be a part of this community. It adds great value to anyone who joins.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arjun"&gt;
  &lt;/a&gt;
  Arjun
&lt;/h3&gt;

&lt;p&gt;4C has been a great community for me. I have been meeting a lot of new developers, designers, content creators and like-minded people. I have also learned how to work with a team. The people here are super-patient and extremely talented. We discuss topics and events like Hacktoberfest and help each other with their problems. I‚Äôve been loving it and if you join you‚Äôll love it too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#muthu-annamalai-venkatachalam"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/muthuannamalai_"&gt;Muthu Annamalai Venkatachalam&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is everything anyone could ever wish for in a community. Wonderful, supportive, exciting, and a lot to like. The best thing that ever happened to me. All in all, it's a great opportunity to develop your skills, form connections with people in different fields of the community, and give back to the community. Slide into the server and get ready to ride a roller coaster of learning opportunities! I'll always be grateful to this community and will keep contributing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#savvas-stephanides"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/SavvasStephnds"&gt;Savvas Stephanides&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As someone who loves sharing knowledge through blog posts and articles, the tips and inspiration I‚Äôve found from the 4C community have been more than invaluable. I am so thankful this community exists!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eddy-vinck"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/EddyVinckk"&gt;Eddy Vinck&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I love what you're doing with the 4C community, Francesco! Keep it up!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kaarthik"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/MDvlpr"&gt;Kaarthik&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A good community needs to be filled with people who really want to help and grow together. You can expect this from the 4C community. They're very supportive when it comes to helping people create content.&lt;/p&gt;

&lt;p&gt;I feel like 4C community motto: We water you, You water us, Let's grow together.&lt;br&gt;
I‚Äôve been loving it and if you join you‚Äôll love it too :) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#haseeb-udeen"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/HaseebUdeen"&gt;Haseeb Udeen&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is a great community of content creators. It keeps me motivated. Every new day when I look at the 4C community, it makes me do something extra to work for my self-branding other than the regular job. The job is fine but it‚Äôs not freedom; freedom is working for your own self, not for some giant company. And here at 4C, I get to work for myself and other contributors of the open-source world; and this leads to lasting happiness and cool life where you are not under anyone's pressure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sunrit"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/JanaSunrise"&gt;Sunrit &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is not only a great community for content creators but everyone. Wonderful and incredible community, supportive people, and all the events are superb! Loving all the things that take place, and all the support and love between people, It‚Äôs truly amazing. An exciting place to learn, collaborate with people, get to know and connect with people, and a lot more. It‚Äôs something more than amazing. Keep up the great work, Proud to be a part of it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#anish-de"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/AnishDe12020"&gt;Anish De&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is a great community for anyone who creates content, be it blog posts or be it videos. It is a great place to learn a lot from a very friendly community and also grow from sharing quality content which someone else might find useful. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#palash"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/palashv2"&gt;Palash&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C Community is the best place for Cool Content Creators. Thanks to  Francesco for all the hard work and dedication to building this awesome community! Keep it up!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pratham"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/PrasoonPratham"&gt;Pratham&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I love the effort and care put into making the 4c community, can‚Äôt wait to see where this goes next!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wale-adetona"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/waleadetonahq"&gt;Wale Adetona&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The 4C Community is a place to be for anyone looking to connect with the best and like-minds in the tech industry. You won't regret joining, mark my words. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vasanth-srivatsa"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/vsnthdev"&gt;Vasanth Srivatsa&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The 4C Community is really diverse &amp;amp; inclusive. The opportunities are really great, you just need to get involved.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sumudu-siriwardana"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/sumusiriwardana"&gt;Sumudu Siriwardana&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is the best community for content creators! I‚Äôve been here for a short time, but I can see the effort and contribution that everyone put in for this community. It‚Äôs a great place to learn, collaborate, and share your knowledge with other creators like you. And also we have so much fun here as well. I managed to get into a group call with everyone once and it was fun and productive at the same time. I would love to appreciate Francesco‚Äôs effort on building up this community! And if you are looking for a supportive community, this is the place for you, come and join us! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prathamesh-shanbhag"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/Prathamesh_117"&gt;Prathamesh Shanbhag&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Content Creation is hard, especially doing it by yourself &amp;amp; so the community 4C has been such a huge relief &amp;amp; help because now I have people who relate to my situation plus they help me out &amp;amp; I help them out in situations when we need help. Kudos to Francesco for creating such an amazing &amp;amp; collaborative community for content creators!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vivian-plasencia"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/ViviPlasenciaC"&gt;Vivian Plasencia&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I'm glad to be a part of the 4C community. It's very supportive and welcoming.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.com/invite/TcmA2kbJeA"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ysqRgoz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634041616139/LIxgbJOci.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Join the community: &lt;a href="https://discord.com/invite/TcmA2kbJeA"&gt;https://discord.com/invite/TcmA2kbJeA&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>codenewbie</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>APIs 101 Using Postman </title>
      <author>Maniprakash123-creator</author>
      <pubDate>Tue, 12 Oct 2021 13:00:48 +0000</pubDate>
      <link>https://dev.to/maniprakash123creator/apis-101-using-postman-4ek7</link>
      <guid>https://dev.to/maniprakash123creator/apis-101-using-postman-4ek7</guid>
      <description>&lt;p&gt;7 th of October 2021 I have attended "APIs 101 Using Postman" workshop organised by the Postman Student Experts &lt;a class="mentioned-user" href="https://dev.to/zeoshark"&gt;@zeoshark&lt;/a&gt;
 and Swastik Mishra from ITER SOA virtually on YouTube live. It was a great experience overall and I learn about Postman APIs. Workshop covered basic request methods that are GET, POST ,PUT and DELETE along with data retrieval in JSON format. All these methods were explained in fun manner with examples in which ever member can create their IDs and posts their fun jokes individually.&lt;br&gt;
Overall it was an overwhelming experience to attend this learning along with fun. Kudos to the Postman Student Experts &lt;a class="mentioned-user" href="https://dev.to/zeoshark"&gt;@zeoshark&lt;/a&gt;
 and Swastik Mishra.&lt;br&gt;
Thank you  for the opportunity &lt;a class="mentioned-user" href="https://dev.to/zeoshark"&gt;@zeoshark&lt;/a&gt;
 and @Swastik Mishra .....&lt;br&gt;
Waiting for swags eagerly üòçü§©&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Avoiding the Reason 92% of SaaS Companies Fail</title>
      <author>Jeffrey Fate</author>
      <pubDate>Tue, 12 Oct 2021 12:50:57 +0000</pubDate>
      <link>https://dev.to/jeffreyfate/avoiding-the-reason-92-of-saas-companies-fail-5el</link>
      <guid>https://dev.to/jeffreyfate/avoiding-the-reason-92-of-saas-companies-fail-5el</guid>
      <description>&lt;p&gt;&lt;em&gt;The questions I'm answering as the first step in building a SaaS in 2021.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The employee to business owner transition is awkward and uncomfortable. Worse is making that transition and failing due to the primary downfall of SaaS companies: lack of product market fit.&lt;/p&gt;

&lt;p&gt;Obvious problem? Yes. Obvious solution? Not really.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#questions-im-asking-to-find-product-market-fit"&gt;
  &lt;/a&gt;
  Questions I'm asking to find product market fit
&lt;/h2&gt;

&lt;p&gt;Creating software as an employee is the ONLY part, but now that is just the easy part. The hard part is answering these questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Who am I helping?&lt;/li&gt;
&lt;li&gt;What do they need?&lt;/li&gt;
&lt;li&gt;What are they willing to pay for?&lt;/li&gt;
&lt;li&gt;Is there competition?&lt;/li&gt;
&lt;li&gt;How can I attract people?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#who-am-i-helping"&gt;
  &lt;/a&gt;
  Who am I helping?
&lt;/h2&gt;

&lt;p&gt;I've struggled with this for a long time now. My first try at business was in the summer of 2020. I found my first 3 clients in a couple of weeks because I hustled. I helped each of them toward a goal. I was a health coach and the business didn't fit my personality. Building a customized, healthy lifestyle is incredibly important, but I really love working with other developers.&lt;/p&gt;

&lt;p&gt;Developers have lots to do with limited time. Work. Learning. A personal life. Parenthood. I must be able to help devs who are burned out, looking for the next level, or trying to get better at life.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-they-need"&gt;
  &lt;/a&gt;
  What do they need?
&lt;/h2&gt;

&lt;p&gt;Ok, this one is harder. Actually, this is probably the hardest question (combined with the next one). I think I know what developers need because I am one.&lt;/p&gt;

&lt;p&gt;Shortcuts.&lt;/p&gt;

&lt;p&gt;All developers need shortcuts of one type or another. Really, this is developer experience. Maybe not the way some people think about it, but that's what it is. What shortcuts do they need most? That leads us to...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-they-willing-to-pay-for"&gt;
  &lt;/a&gt;
  What are they willing to pay for?
&lt;/h2&gt;

&lt;p&gt;TODO.&lt;/p&gt;

&lt;p&gt;Seriously, I don't know what most developers will pay for. The only thing I have to go with is a shortcut to get the correct time zone. This came from a recent episode of The Art of Product, straight from Derrick Reimer's mouth:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pca.st/l5bhzmz4#t=32m41s"&gt;187: Wait, There Are How Many Time Zones?! - The Art of Product&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm not taking this idea too seriously. I think of it as a small bet, an experiment, and a way to get my feet wet building a SaaS business. Will someone pay for a quicker, easier, better way to find the correct time zone? I'll build the MVP and find out.&lt;/p&gt;

&lt;p&gt;All the content I've consumed on the topic says I should validate the idea better. But, I'm biasing toward action and speed over accuracy on this one. Maybe I'll find that was the wrong path and correct for it next time. Experiment and learn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-there-competition"&gt;
  &lt;/a&gt;
  Is there competition?
&lt;/h2&gt;

&lt;p&gt;Yes.&lt;/p&gt;

&lt;p&gt;There's &lt;a href="https://dev.timeanddate.com/time/pricing"&gt;timeanddate.com&lt;/a&gt; and &lt;a href="http://worldtimeapi.org/"&gt;worldtimeapi.org&lt;/a&gt; and of course &lt;a href="https://developers.google.com/maps/documentation/timezone/overview"&gt;Google&lt;/a&gt;. People must need this problem solved. The key is finding a way to be different enough and add some value that none of the other services have.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-i-attract-people"&gt;
  &lt;/a&gt;
  How can I attract people?
&lt;/h2&gt;

&lt;p&gt;I have a few ideas about this. Demonstrating the utter rediculousness of time zones is one path. For example, the way time zones are always changing and how it makes development harder. Take this example:&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KzFs2I5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FAv7UPuVEAA87S9.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--sS_bPZiK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1369555721033904131/SkcVjCe3_normal.jpg" alt="Maz Jovanovich profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Maz Jovanovich
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @maz_jovanovich
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      PSA: As of today, Australia has 5 time zones once again. Apologies in advance to our overseas friends trying to make sense of this temporal anarchy. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      04:47 AM - 03 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1444524436548296705" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1444524436548296705" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1444524436548296705" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
Do developers really want to take an extra day or two to add logic for the correct time in Brisbane on January 15th, and also Melbourne, and every other location in all of Australia? Every location in all of the world?

&lt;p&gt;Probably not.&lt;/p&gt;

&lt;p&gt;If I can make this explanation funny and entertaining as well as persuasive, I think it will make many people realize how crazy it is to reinvent the time zone wheel. Why not pay for a shortcut?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What next?
&lt;/h2&gt;

&lt;p&gt;Find some developers to interview. I really need to get some answers to what developers will pay for. The best way to do this is one-on-one interviews. Perhaps nobody wants a time zone solution. Maybe there is a different common problem that I can help solve. Time to get to work.&lt;/p&gt;

&lt;p&gt;What did I miss? I'm new at this, so please leave comments to plug holes in my strategy. Feedback always appreciated!&lt;/p&gt;

</description>
      <category>saas</category>
      <category>startup</category>
    </item>
    <item>
      <title>Free React Admin Dashboard with Recharts Template</title>
      <author>Kishan Sheth</author>
      <pubDate>Tue, 12 Oct 2021 12:33:23 +0000</pubDate>
      <link>https://dev.to/koolkishan/free-react-admin-dashboard-with-recharts-template-87k</link>
      <guid>https://dev.to/koolkishan/free-react-admin-dashboard-with-recharts-template-87k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#you-can-get-the-template-from-the-link-proivided-in-the-description-of-the-video"&gt;
  &lt;/a&gt;
  You can get the template from the link proivided in the description of the video.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#technologies-used-"&gt;
  &lt;/a&gt;
  Technologies Used :-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;REACT&lt;/li&gt;
&lt;li&gt;SASS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#libraries-and-assets-used-"&gt;
  &lt;/a&gt;
  Libraries and Assets Used :-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Node Sass&lt;/li&gt;
&lt;li&gt;React Icons&lt;/li&gt;
&lt;li&gt;Recharts&lt;/li&gt;
&lt;li&gt;Google Fonts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#to-learn-how-to-create-this-template-watch-the-complete-video-you-can-get-the-template-for-free-from-the-link-provided-in-the-description-of-the-video"&gt;
  &lt;/a&gt;
  To learn how to create this template watch the complete video. You can get the template for free from the link provided in the description of the video.
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/S3PpDpEeer8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#please-do-like-the-video-and-subscribe-to-the-channel-it-helps-and-motivates-me-to-create-more-content-like-this"&gt;
  &lt;/a&gt;
  Please do like the video and subscribe to the channel. It helps and motivates me to create more content like this.
&lt;/h2&gt;

</description>
      <category>html</category>
      <category>react</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Css Button | Css Custom Checkbox Style With 3D Toggle Effect 2021</title>
      <author>Sadee</author>
      <pubDate>Tue, 12 Oct 2021 12:24:44 +0000</pubDate>
      <link>https://dev.to/codewithsadee/css-button-css-custom-checkbox-style-with-3d-toggle-effect-2021-53c7</link>
      <guid>https://dev.to/codewithsadee/css-button-css-custom-checkbox-style-with-3d-toggle-effect-2021-53c7</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OpbbPLPqSDc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Css Button | Css Custom Checkbox Style With 3D Toggle Effect 2021&lt;/p&gt;

&lt;p&gt;Today, we'll go through how to create css custom checkbox style with 3d toggle effect step by step.&lt;br&gt;
If you're new here, make sure to Subscribe my youtube channel.&lt;/p&gt;

&lt;p&gt;üÖ∞Ô∏è | Get the font I used&lt;br&gt;
‚Üí  M Plus Rounded 1c : &lt;a href="https://fonts.google.com/specimen/M+PLUS+Rounded+1c?query=m+plu"&gt;https://fonts.google.com/specimen/M+PLUS+Rounded+1c?query=m+plu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚ù§Ô∏è | Interested in seeing more videos? SUBSCRIBE NOW&lt;br&gt;
‚Üí  &lt;a href="https://bit.ly/3m4UgF5"&gt;https://bit.ly/3m4UgF5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üë§ | Like - Follow &amp;amp; Subscribe&lt;br&gt;
‚Üí  Twitter : &lt;a href="https://twitter.com/codewithsadee"&gt;https://twitter.com/codewithsadee&lt;/a&gt;&lt;br&gt;
‚Üí  Github : &lt;a href="https://github.com/codewithsadee"&gt;https://github.com/codewithsadee&lt;/a&gt;&lt;br&gt;
‚Üí  YouTube : &lt;a href="https://bit.ly/3m4UgF5"&gt;https://bit.ly/3m4UgF5&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Caching XHR Responses in Local Storage</title>
      <author>Dave Cozens</author>
      <pubDate>Tue, 12 Oct 2021 12:23:49 +0000</pubDate>
      <link>https://dev.to/davecozens/caching-xhr-responses-in-local-storage-3g33</link>
      <guid>https://dev.to/davecozens/caching-xhr-responses-in-local-storage-3g33</guid>
      <description>&lt;p&gt;So, I've been working on my site recently - &lt;a href="https://uktidetimes.com/"&gt;https://uktidetimes.com/&lt;/a&gt; - and it occurred to me that since I'm serving content that only changes once a day, there's really no reason for the same user to repeatedly hit the service. &lt;/p&gt;

&lt;p&gt;I was already using Axios for my XHR requests, so I've put together an NPM module that wraps Axios but adds additional caching capabilities using local storage in the browser.&lt;/p&gt;

&lt;p&gt;There's two primary benefits to this: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It reduces the amount of traffic to my API (which is running on AWS Lambda) - therefore reducing costs.&lt;/li&gt;
&lt;li&gt;It improves load time for the user if they've already views this data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/xhr-cache-with-ttl"&gt;https://www.npmjs.com/package/xhr-cache-with-ttl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a coder, I obviously want to do as little typing as possible so I wanted to take the approach of wrapping a known-awesome HTTP request library (in this case Axios) because most of the work has been done already. Nobody wants to reinvent that wheel today, thank you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function xhrCache(method, url, options = {}) {
    return new Promise(function (resolve, reject) {
        axios[method](url, options).then((res) =&amp;gt; {
            resolve(res)
        })
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice and easy. Axios wrapped in a promise, passing through the method, URL and options attributes that it already uses.&lt;/p&gt;

&lt;p&gt;This just left me to throw together a basic caching mechanism.&lt;/p&gt;

&lt;p&gt;I decided that I'd create two keys in local storage per cached request - one for the metadata (TTL and timestamp) and one for the response. This avoids a potentially heavy deserialisation cost of expired cache items.&lt;/p&gt;

&lt;p&gt;I'm using the URL of the request as part of the key in local storage. This helps with diagnosing any issues but there's an argument for hashing it for brevity (and differentiating more complex requests). Maybe for another day.&lt;/p&gt;

&lt;p&gt;The flow of the function is nice and simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (cache exists &amp;amp;&amp;amp; cache not expired){
    return cached content
} else {
    fetch content using Axios
    cache content
    return content
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The whole thing comes in at less than 100 lines of code, and it's open source so feel free to make off with it :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/davecozens/xhr-cache-with-ttl"&gt;https://github.com/davecozens/xhr-cache-with-ttl&lt;/a&gt; &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Dynamically direct routes for polymorphic associations</title>
      <author>Harun Sabljakoviƒá</author>
      <pubDate>Tue, 12 Oct 2021 12:01:28 +0000</pubDate>
      <link>https://dev.to/wizardhealth/dynamically-direct-routes-for-polymorphic-associations-5hhb</link>
      <guid>https://dev.to/wizardhealth/dynamically-direct-routes-for-polymorphic-associations-5hhb</guid>
      <description>&lt;p&gt;Have you ever struggled with polymorphic associations? We all have, don‚Äôt worry.&lt;br&gt;
Here‚Äôs an example of a polymorphic relationship.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;I‚Äôve recently bumped into a problem where I had to list out all subjects (employees and products in this case) and when user interacted with one list item, it would redirect to that subject‚Äôs show page.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;You can see the problem, right? The obvious solution here would be to check the type of imageable and set the path helper accordingly. But, there‚Äôs a slightly more advanced technique for this use-case: direct method.&lt;br&gt;
In your routes.rb file simply add this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And now you can use imageable_path(imageable) as a path helper that will dynamically resolve to imageable‚Äôs show page.&lt;br&gt;
Now our example above becomes:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Aaaand voil√†, we‚Äôve got a path helper that resolves to any imageable show page without the need to manually check for the type of imageable.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
    </item>
    <item>
      <title>Under the Hood of Macros in Elixir</title>
      <author>Woo Jia Hao</author>
      <pubDate>Tue, 12 Oct 2021 11:52:21 +0000</pubDate>
      <link>https://dev.to/appsignal/under-the-hood-of-macros-in-elixir-187b</link>
      <guid>https://dev.to/appsignal/under-the-hood-of-macros-in-elixir-187b</guid>
      <description>&lt;p&gt;Welcome back to part two of this &lt;a href="https://blog.appsignal.com/category/under-the-hood-of-metaprogramming.html"&gt;series on metaprogramming in Elixir&lt;/a&gt;. In &lt;a href="https://blog.appsignal.com/2021/09/07/an-introduction-to-metaprogramming-in-elixir.html"&gt;part one&lt;/a&gt;, we introduced metaprogramming and gave a brief overview of macros.&lt;/p&gt;

&lt;p&gt;In this part, we will explore the inner workings and behaviors of macros in more depth.&lt;/p&gt;

&lt;p&gt;As discussed in the previous post, macros are compile-time constructs in Elixir. So, before diving into how macros work, it is important to understand where macros lie within Elixir's compilation process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stages-of-elixirs-compilation-process"&gt;
  &lt;/a&gt;
  Stages of Elixir's Compilation Process
&lt;/h2&gt;

&lt;p&gt;We can boil down the Elixir compilation process to the following basic stages:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4hWMR4CI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-10/compilation_process.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4hWMR4CI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.appsignal.com/images/blog/2021-10/compilation_process.png" alt="Compilation process of an Elixir program"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Note: the actual compilation process of an Elixir program is more intricate than above.)&lt;/p&gt;

&lt;p&gt;The compilation process can be broken down into the following phases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Parsing&lt;/strong&gt; ‚Äî The Elixir source code (program) is parsed into an AST, which we will call the &lt;strong&gt;initial AST&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Expansion&lt;/strong&gt; ‚Äî The initial AST is scanned and macro calls are identified. Macros are executed. Their output (AST) is injected and expanded into the callsite. Expansion occurs recursively, and a &lt;strong&gt;final AST&lt;/strong&gt; is generated.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bytecode generation phase&lt;/strong&gt; ‚Äî After the final AST is generated, the compiler performs an additional set of operations that eventually generate and execute BEAM VM bytecode.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see, macros sit at the expansion phase, right before code is converted into bytecode. Therefore, a good knowledge of the expansion phase helps us understand how macros work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#expansion-phase"&gt;
  &lt;/a&gt;
  Expansion Phase
&lt;/h2&gt;

&lt;p&gt;Let's start by first examining the expansion phase on a general level.&lt;/p&gt;

&lt;p&gt;The compiler will expand macros (as per &lt;code&gt;Macro.expand&lt;/code&gt;) to become part of the program's pre-generated AST. Macro expansion occurs recursively, meaning that Elixir will continue expanding a macro until it reaches its most fundamental AST form.&lt;/p&gt;

&lt;p&gt;As macros expand right before bytecode is generated, they can modify a program's behavior during compile-time.&lt;/p&gt;

&lt;p&gt;If we dig a little deeper, we will find that the compiler first injects the output AST of a macro at its callsite. Then the AST is expanded recursively.&lt;/p&gt;

&lt;p&gt;We can observe this behavior as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;defmacro&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;require&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="p"&gt;{{:&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:__aliases__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;alias:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:Foo&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="ss"&gt;:foo&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;no_parens:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
 &lt;span class="p"&gt;[]}&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Macro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__ENV__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{{:&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:__aliases__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;counter:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;576460752303423391&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;alias:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:IO&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
    &lt;span class="ss"&gt;:inspect&lt;/span&gt;
  &lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;ast&lt;/code&gt; represents the initial AST generated by the compiler before expansion. It holds a reference to the macro &lt;code&gt;Foo.foo&lt;/code&gt; but it is not expanded as the macro has not been evaluated yet.&lt;/p&gt;

&lt;p&gt;When we call &lt;code&gt;Macro.expand&lt;/code&gt; on the given AST, the compiler begins by injecting the behavior of the macro into the callsite. We can expand the AST one step at a time using &lt;a href="https://hexdocs.pm/elixir/1.12/Macro.html#expand_once/2"&gt;&lt;code&gt;Macro.expand_once&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contexts-in-macros"&gt;
  &lt;/a&gt;
  Contexts in Macros
&lt;/h2&gt;

&lt;p&gt;Now that we understand the basics of the expansion phase, we can investigate the parts of a macro.&lt;/p&gt;

&lt;p&gt;Macros contain two contexts ‚Äî a macro context and a caller context:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmacro&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# This is the macro's context, this is executed when the macro is called&lt;/span&gt;

  &lt;span class="c1"&gt;# This is the return value of the macro (AST)&lt;/span&gt;
  &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# This is the caller's context, this is executed when the callsite is called&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the macro's context is any expression declared before the &lt;code&gt;quote&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The caller's context is the behavior declared in the &lt;code&gt;quote&lt;/code&gt;. The &lt;code&gt;quote&lt;/code&gt; generated AST is the macro's output and is injected into and expanded at the callsite.&lt;/p&gt;

&lt;p&gt;The behavior defined under the caller's context 'belongs' to the caller, not the module where the macro is defined. The following example, taken from &lt;a href="https://pragprog.com/titles/cmelixir/metaprogramming-elixir/"&gt;Metaprogramming Elixir&lt;/a&gt;, illustrates this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Mod&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;defmacro&lt;/span&gt; &lt;span class="n"&gt;definfo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"definfo :: Macro's context &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="bp"&gt;__MODULE__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

    &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"definfo :: Caller's context &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="bp"&gt;__MODULE__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;friendly_info&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"friend_info :: Module name &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="bp"&gt;__MODULE__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;MyModule&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;require&lt;/span&gt; &lt;span class="no"&gt;Mod&lt;/span&gt;
  &lt;span class="no"&gt;Mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;definfo&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;"context.exs"&lt;/span&gt;
&lt;span class="n"&gt;definfo&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="no"&gt;Macro&lt;/span&gt;&lt;span class="s1"&gt;'s context Elixir.Mod
definfo :: Caller'&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="no"&gt;Elixir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;MyModule&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;Mod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;MyModule&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;MyModule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;friendly_info&lt;/span&gt;
&lt;span class="n"&gt;friend_info&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="no"&gt;Module&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="no"&gt;Elixir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;MyModule&lt;/span&gt;
&lt;span class="ss"&gt;:ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the module that executes the macro's context is &lt;code&gt;Mod&lt;/code&gt;. But the module that executes the caller's context is &lt;code&gt;MyModule&lt;/code&gt; ‚Äî the callsite where the macro is injected and expanded.&lt;/p&gt;

&lt;p&gt;Similarly, when we declare &lt;code&gt;friendly_info&lt;/code&gt;, we inject this function into the callsite of the macro, which is &lt;code&gt;MyModule&lt;/code&gt;. So the function now 'belongs' to &lt;code&gt;MyModule&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But why does there need to be two different contexts? What exactly makes the macro context and caller context different from one another?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#order-of-evaluation-in-macro-and-caller-contexts"&gt;
  &lt;/a&gt;
  Order of Evaluation in Macro and Caller Contexts
&lt;/h2&gt;

&lt;p&gt;The key difference between the macro context and the caller context is that behavior is evaluated at different times.&lt;/p&gt;

&lt;p&gt;Let's look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;defmacro&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"macro"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"caller"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;require&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="p"&gt;{{:&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:__aliases__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;alias:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:Foo&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="ss"&gt;:foo&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;no_parens:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
 &lt;span class="p"&gt;[]}&lt;/span&gt;

&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Macro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__ENV__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;macro&lt;/span&gt;
&lt;span class="p"&gt;{{:&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:__aliases__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;counter:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;576460752303423293&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;alias:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:IO&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="ss"&gt;:puts&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
 &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"caller"&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we expand the AST of a macro call, the macro context is evaluated and the caller context is injected and expanded into the callsite.&lt;/p&gt;

&lt;p&gt;However, we can go a level deeper.&lt;/p&gt;

&lt;p&gt;Let's look again at the first component of the expansion phase: &lt;em&gt;Macros are executed. Their output (AST) is injected and expanded into the callsite&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For a compiler to know what AST needs to be injected into the callsite, it has to retrieve the output of the macro during compilation (when the expansion phase occurs). The macro call is parsed as an AST during the parsing phase. The compiler identifies and executes these macro call ASTs prior to the expansion phase.&lt;/p&gt;

&lt;p&gt;If we think of macros as regular functions, the macro context is the function body and the caller context is the result of the function. During compilation, a macro is executed and evaluates the macro context. Then the &lt;code&gt;quote&lt;/code&gt; is evaluated, returning the results of the function. The caller context is injected and expanded into the callsite of the macro.&lt;/p&gt;

&lt;p&gt;The macro context is evaluated during compile-time and treated as a regular function body. It executes within and is 'owned' by its containing module.&lt;/p&gt;

&lt;p&gt;The caller context is injected into the callsite, so it is 'owned' by the caller. It is evaluated whenever the callsite is evaluated.&lt;/p&gt;

&lt;p&gt;The example above showcases what happens when a macro is invoked at the module level. But what if we attempt to invoke the macro in a function? When do the macro and caller contexts evaluate?&lt;/p&gt;

&lt;p&gt;Well, we can use another example here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;defmacro&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"macro"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"caller"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Bar&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;require&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"execute"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;macro&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;
&lt;span class="n"&gt;execute&lt;/span&gt;
&lt;span class="n"&gt;caller&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The caller context evaluates when the function is called (as we established earlier).&lt;/p&gt;

&lt;p&gt;However, something interesting happens with our macro context ‚Äî it evaluates when the module compiles. This evaluation only happens once when &lt;code&gt;Bar&lt;/code&gt; compiles, as evidenced by the lack of "macro" in our output when we call &lt;code&gt;Bar.execute&lt;/code&gt;. Why is this the case?&lt;/p&gt;

&lt;p&gt;Well, we only need to evaluate the macro once to retrieve its output (caller context) and inject it into the callsite (which is a function in this case). The caller context behavior evaluates every time the function is called.&lt;/p&gt;

&lt;p&gt;This difference in the order and time of evaluation helps guide us on when to use the macro and the caller contexts.&lt;/p&gt;

&lt;p&gt;We use the macro context when we want the behavior to be evaluated during compile-time. This is regardless of when the caller context is evaluated or where the macro is called in the code.&lt;/p&gt;

&lt;p&gt;We use the caller context when we want to invoke behavior injected into the callsite at evaluation.&lt;/p&gt;

&lt;p&gt;Now that we have a better grasp of the Elixir compilation process, macros, and the order of evaluation, we can revisit &lt;code&gt;unquote&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#revisiting-raw-unquote-endraw-"&gt;
  &lt;/a&gt;
  Revisiting &lt;code&gt;unquote&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;In part one of this series, we established that &lt;code&gt;unquote&lt;/code&gt; evaluates a given expression and injects the result (as an&lt;br&gt;
AST) into the AST built from &lt;code&gt;quote&lt;/code&gt;. This is only a piece of the puzzle.&lt;/p&gt;

&lt;p&gt;Let's dig deeper to understand the behavior of &lt;code&gt;unquote&lt;/code&gt; during compilation and the necessity of using it.&lt;/p&gt;

&lt;p&gt;While the rest of the &lt;code&gt;quote&lt;/code&gt; body is evaluated at the same time as the callsite, &lt;code&gt;unquote&lt;/code&gt; is evaluated (immediately) during compile-time ‚Äî when the macro is evaluated. &lt;code&gt;unquote&lt;/code&gt; aims to evaluate and inject the result of a given expression. This expression might contain information that is only available during the macro evaluation, including variables that are initialized during this process. &lt;code&gt;unquote&lt;/code&gt; must be evaluated during compile-time along with the macro, so that the AST of the result injects into the &lt;code&gt;quote&lt;/code&gt; that we build.&lt;/p&gt;

&lt;p&gt;But why do we need to &lt;code&gt;unquote&lt;/code&gt; the expression to inject it into the AST? To answer this, let's compare the expanded AST of a macro using &lt;code&gt;unquote&lt;/code&gt; against one that does not:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;defmacro&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Bar&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;defmacro&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kn"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;require&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;require&lt;/span&gt; &lt;span class="no"&gt;Bar&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ast_foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ast_bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ast_foo&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Macro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__ENV__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{{:&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:__aliases__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;counter:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;576460752303423448&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;alias:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:IO&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
    &lt;span class="ss"&gt;:inspect&lt;/span&gt;
  &lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;counter:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;576460752303423448&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;}]}&lt;/span&gt;

&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ast_bar&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Macro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__ENV__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{{:&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:__aliases__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;counter:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;576460752303423384&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;alias:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:IO&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
    &lt;span class="ss"&gt;:inspect&lt;/span&gt;
  &lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:+&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;context:&lt;/span&gt; &lt;span class="no"&gt;Elixir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Kernel&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{:&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;context:&lt;/span&gt; &lt;span class="no"&gt;Elixir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Kernel&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]}]}&lt;/span&gt;
 &lt;span class="p"&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Observe that the expanded &lt;code&gt;Foo.foo&lt;/code&gt; AST is vastly different from the &lt;code&gt;Bar.bar&lt;/code&gt; AST even though they are both given the same variable. This is because Elixir is quite literal with variable references. If a variable is referenced without &lt;code&gt;unquote&lt;/code&gt;, an AST of that variable reference injects into the AST.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;unquote&lt;/code&gt; ensures that the underlying AST of the variable's value injects into the &lt;code&gt;quote&lt;/code&gt; body.&lt;/p&gt;

&lt;p&gt;Now you may ask: What is the difference in variable scoping between the evaluation of macros and the execution of the callsite? Why does it matter?&lt;/p&gt;

&lt;p&gt;The scoping of variables in macros can be a confusing subject, so let's demystify it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variable-scoping-in-macros"&gt;
  &lt;/a&gt;
  Variable Scoping in Macros
&lt;/h2&gt;

&lt;p&gt;Now that we understand how macros are evaluated and expanded, we can look at the scoping of variables in macros, and when to use the options &lt;code&gt;unquote&lt;/code&gt; and &lt;code&gt;bind_quoted&lt;/code&gt; in &lt;code&gt;quote&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Due to &lt;a href="https://elixir-lang.readthedocs.io/en/latest/technical/scoping.html#function-clause-scope"&gt;function clause scoping&lt;/a&gt;, the arguments of a variable are initialized and 'in scope' during the macro evaluation of a function. &lt;/p&gt;

&lt;p&gt;Similarly, variables declared and assigned within a function body remain in scope until the function ceases. The same behavior applies to macros.&lt;/p&gt;

&lt;p&gt;When the macro context is evaluated, its arguments and any initialized variables are 'in scope.' This is why &lt;code&gt;unquote&lt;/code&gt; can evaluate variable references declared as arguments of the macro or any variables initialized in the macro context.&lt;/p&gt;

&lt;p&gt;Any evaluation of variable initialization in the caller context will initialize these variables within the callsite during execution.&lt;/p&gt;

&lt;p&gt;To understand this difference better, let's look at a few examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmacro&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kn"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this first example, &lt;code&gt;unquote&lt;/code&gt; will not work. The variable &lt;code&gt;x&lt;/code&gt; has not yet been initialized, but should have been initialized during the execution of the callsite. The immediate evaluation of &lt;code&gt;unquote&lt;/code&gt; runs too early, so we cannot reference our variable &lt;code&gt;x&lt;/code&gt; when we need to. When &lt;code&gt;unquote&lt;/code&gt; evaluates during compile-time, it attempts to evaluate the variable reference expression of &lt;code&gt;x&lt;/code&gt; and finds that it is not in scope.&lt;/p&gt;

&lt;p&gt;How can we fix this? By disabling unquoting. This means disabling the immediate evaluation of &lt;code&gt;unquote&lt;/code&gt;. We only want &lt;code&gt;unquote&lt;/code&gt; to evaluate when our caller context evaluates. This ensures that &lt;code&gt;unquote&lt;/code&gt; can properly reference a variable in scope (&lt;code&gt;x&lt;/code&gt;) as variable initialization would have occurred&lt;br&gt;
during the evaluation of the callsite.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmacro&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="kn"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kn"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example highlights the impact of scoping in macros. If we attempt to access a variable that is available during the evaluation of the macro context, &lt;code&gt;unquote&lt;/code&gt; as-is is perfect for us.&lt;/p&gt;

&lt;p&gt;However, suppose we try to access a variable that is only available during the evaluation of the callsite. In that case, we must disable the immediate unquoting behavior to initialize variables in scope before &lt;code&gt;unquote&lt;/code&gt; attempts to reference them.&lt;/p&gt;

&lt;p&gt;Let's apply this understanding to two other examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmacro&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="ss"&gt;bind_quoted:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;opts:&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Keyword&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kn"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, we have initialized the variable &lt;code&gt;x&lt;/code&gt; from a keyword list. As the keyword list is initialized during compile-time (along with the evaluation of the macro context), we first have to bind it to the caller context to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Generate an initialization of the variable during the evaluation of the callsite, and&lt;/li&gt;
&lt;li&gt;Disable unquoting behavior.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have to bind &lt;code&gt;opts&lt;/code&gt; to the caller context, as the variable is no longer in scope during the evaluation of the callsite.&lt;/p&gt;

&lt;p&gt;Finally, we have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmacro&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kn"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this last example, &lt;code&gt;x&lt;/code&gt; remains a variable in scope during the evaluation of the macro context ‚Äî i.e. when the macro is called. The immediate evaluation of &lt;code&gt;unquote&lt;/code&gt; works in our favor. It renders &lt;code&gt;unquote(x)&lt;/code&gt; valid, as &lt;code&gt;x&lt;/code&gt; is in scope when &lt;code&gt;unquote&lt;/code&gt; is evaluated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#macro-hygiene-in-elixir"&gt;
  &lt;/a&gt;
  Macro Hygiene in Elixir
&lt;/h2&gt;

&lt;p&gt;While we are on the topic of scopes in macros, let's discuss macro hygiene.&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://tutorialspoint.dev/language/c/hygienic-macros-introduction"&gt;tutorialspoint.dev&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hygienic macros are macros whose expansion is guaranteed not to cause the accidental capture of identifiers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means that if we inject and expand a macro into the callsite, we need not worry about the macro's variables (defined in the caller context) conflicting with the caller's variables.&lt;/p&gt;

&lt;p&gt;Elixir ensures this by maintaining a distinction between a caller variable and macro variable. You can explore this further using an example from the &lt;a href="https://elixir-lang.org/getting-started/meta/macros.html#macro-hygiene"&gt;official tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A macro variable is declared within the body of &lt;code&gt;quote&lt;/code&gt;, while a caller variable is declared within the callsite of the macro.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;defmacro&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Bar&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;require&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, &lt;code&gt;a&lt;/code&gt; referenced in &lt;code&gt;change&lt;/code&gt; is not the same variable &lt;code&gt;a&lt;/code&gt; in the scope of &lt;code&gt;go&lt;/code&gt;. Even when we attempt to change the value of &lt;code&gt;a&lt;/code&gt;, the value of &lt;code&gt;a&lt;/code&gt; in the scope of &lt;code&gt;go&lt;/code&gt; remains untouched.&lt;/p&gt;

&lt;p&gt;However, there may be a time where you have to reference a variable from the caller's scope in the macro's scope.&lt;br&gt;
Elixir provides the macro &lt;code&gt;var!&lt;/code&gt; to bridge the gap between these two scopes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;defmacro&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Bar&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;require&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 13&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This distinction ensures no unintended changes to a variable due to changes within a macro (whose source code we may not have access to).&lt;/p&gt;

&lt;p&gt;You can apply the same hygiene to &lt;a href="https://hexdocs.pm/elixir/1.6.1/Kernel.html#alias!/1"&gt;aliases and imports&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-raw-require-endraw-"&gt;
  &lt;/a&gt;
  Understanding &lt;code&gt;require&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;In the code examples shown in this section, we have always used &lt;code&gt;require &amp;lt;module&amp;gt;&lt;/code&gt; before we invoke the macros within the module. Why is that?&lt;/p&gt;

&lt;p&gt;This is the perfect segue into how the compiler resolves modules containing macros ‚Äî particularly the order in which modules are compiled.&lt;/p&gt;

&lt;p&gt;In Elixir, modules compile &lt;a href="https://elixir-lang.org/blog/2012/04/24/a-peek-inside-elixir-s-parallel-compiler/"&gt;in parallel&lt;/a&gt;, and usually ‚Äî for regular modules ‚Äî the compiler is smart enough to compile dependencies of functions in the proper order of use. The parallel compilation process pauses the compilation of a file until the dependency is resolved. This behavior is replicated when handling modules that contain macro invocations.&lt;/p&gt;

&lt;p&gt;However, as macros must be available during compile-time, the module these macros belong to must be compiled beforehand.&lt;br&gt;
Here's where &lt;code&gt;require&lt;/code&gt; comes into the picture. &lt;code&gt;require&lt;/code&gt; explicitly informs the compiler to &lt;a href="https://www.theerlangelist.com/article/macros_2"&gt;compile and load the module containing the macro first&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We can use an example to illustrate this behavior:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Compiling Foo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;defmacro&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Foo.foo := macro"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Foo.foo := caller"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;Bar&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Compiling Bar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kn"&gt;require&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;

  &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Bar := before Foo.foo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Compiling&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;
&lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;macro&lt;/span&gt;
&lt;span class="no"&gt;Compiling&lt;/span&gt; &lt;span class="no"&gt;Bar&lt;/span&gt;
&lt;span class="no"&gt;Bar&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;caller&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(Note that this is just an approximation of the actual compilation process, but it aims to paint a clearer picture of how &lt;code&gt;require&lt;/code&gt; works.)&lt;/p&gt;

&lt;p&gt;Let's try to understand why the outputs are in this order.&lt;/p&gt;

&lt;p&gt;Firstly, &lt;code&gt;Bar&lt;/code&gt; tries to compile. The compiler scans and finds a &lt;code&gt;require&lt;/code&gt; for &lt;code&gt;Foo&lt;/code&gt; before evaluating any module-level expressions within the module (such as &lt;code&gt;IO.puts&lt;/code&gt;). So it pauses the compilation of &lt;code&gt;Bar&lt;/code&gt; and compiles the &lt;code&gt;Foo&lt;/code&gt; module first. As &lt;code&gt;Foo&lt;/code&gt; is compiled, module-level code ‚Äî like &lt;code&gt;IO.puts&lt;/code&gt; ‚Äî is evaluated, and the compiler prints the first line of the output.&lt;/p&gt;

&lt;p&gt;Once &lt;code&gt;Foo&lt;/code&gt; is compiled, the compiler returns to &lt;code&gt;Bar&lt;/code&gt; to resume compilation. &lt;code&gt;Bar&lt;/code&gt; is parsed, macro calls are executed, and the macro context is evaluated. Even though &lt;code&gt;Foo.foo&lt;/code&gt; is called after &lt;code&gt;IO.puts("Bar := before Foo.foo")&lt;/code&gt;, the evaluation of the macro call takes precedence over the evaluation of module-level code.&lt;/p&gt;

&lt;p&gt;During expansion, &lt;code&gt;Foo.foo&lt;/code&gt;'s caller context is injected and expanded into the callsite in &lt;code&gt;Bar&lt;/code&gt;. It then behaves just like a regular module-level function call, printing the last three output lines in order of declaration.&lt;/p&gt;

&lt;p&gt;In essence, &lt;code&gt;require&lt;/code&gt; instructs the compiler on the order of compilation that each module should go through if there are macro dependencies. This ensures that the macros are available during compile-time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#escaping-macros-in-elixir"&gt;
  &lt;/a&gt;
  Escaping Macros in Elixir
&lt;/h2&gt;

&lt;p&gt;Before explaining what &lt;code&gt;Macro.escape&lt;/code&gt; does, let's look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kn"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kn"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{{:&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:__aliases__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;alias:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:IO&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="ss"&gt;:inspect&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}]}&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval_quoted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;CompileError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;nofile:&lt;/span&gt; &lt;span class="n"&gt;invalid&lt;/span&gt; &lt;span class="n"&gt;quoted&lt;/span&gt; &lt;span class="ss"&gt;expression:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="no"&gt;Please&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;sure&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;quoted&lt;/span&gt; &lt;span class="n"&gt;expressions&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;made&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="no"&gt;If&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;introduce&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
&lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;such&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;four&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;tuple&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;sure&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="no"&gt;Macro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt; &lt;span class="mf"&gt;3.15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;erl:&lt;/span&gt;&lt;span class="mi"&gt;1358&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapfoldl&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elixir&lt;/span&gt; &lt;span class="mf"&gt;1.11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="ss"&gt;ex:&lt;/span&gt;&lt;span class="mi"&gt;706&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;Code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval_quoted&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is a strange error. Based on our understanding of &lt;code&gt;unquote&lt;/code&gt; and macros, the code should work as intended, but it doesn't. Why is that?&lt;/p&gt;

&lt;p&gt;Well, the answer is found on &lt;code&gt;iex(2)&lt;/code&gt;. When we attempt to unquote &lt;code&gt;x&lt;/code&gt;, we return not an AST, but a tuple ‚Äî the same one initially assigned to &lt;code&gt;x&lt;/code&gt;. The error then points to the fact that the tuple is an invalid quoted expression.&lt;/p&gt;

&lt;p&gt;When we &lt;code&gt;unquote(x)&lt;/code&gt; as-is, we inject a raw tuple into the AST, which cannot be evaluated as it is not a valid AST and throws an error.&lt;/p&gt;

&lt;p&gt;So, how do we fix it?&lt;/p&gt;

&lt;p&gt;We need to convert the raw tuple referenced by &lt;code&gt;x&lt;/code&gt; into a valid AST. This can be achieved by escaping this value using &lt;code&gt;Macro.escape&lt;/code&gt;. Let's understand what &lt;code&gt;Macro.escape&lt;/code&gt; does:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Macro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{:{},&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kn"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kn"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Macro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{:{},&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;iex(2)&lt;/code&gt;, we see that &lt;code&gt;Macro.escape(a)&lt;/code&gt; returns an AST of the tuple, not the raw tuple ‚Äî and this is exactly what we are looking for. By combining &lt;code&gt;Macro.escape&lt;/code&gt;'s behavior with &lt;code&gt;unquote&lt;/code&gt;, we can inject the AST of the tuple into the &lt;code&gt;quote&lt;/code&gt; as seen in &lt;code&gt;iex(4)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's test this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kn"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Macro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{:{},&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kn"&gt;quote&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kn"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Macro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="p"&gt;{{:&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:__aliases__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;alias:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:IO&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="ss"&gt;:inspect&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
 &lt;span class="p"&gt;[{:{},&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]}]}&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval_quoted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the code works just as intended because we escape the tuple.&lt;/p&gt;

&lt;p&gt;Often when working with data structures like tuples and dictionaries, you may find that the injected data from &lt;code&gt;unquote&lt;/code&gt; does not inject a valid AST. In these cases, you should use &lt;code&gt;Macro.escape&lt;/code&gt; before &lt;code&gt;unquote&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#guard-clauses-and-pattern-matching"&gt;
  &lt;/a&gt;
  Guard Clauses and Pattern Matching
&lt;/h2&gt;

&lt;p&gt;Finally, it's worth mentioning that, much like regular functions defined through &lt;code&gt;def&lt;/code&gt;, macros can use &lt;a href="https://inquisitivedeveloper.com/lwm-elixir-24/"&gt;guard clauses&lt;/a&gt; and &lt;a href="https://elixirschool.com/en/lessons/basics/pattern-matching/"&gt;pattern matching&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmacro&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"macro with x being 4"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;defmacro&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"macro with any other value"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#up-next-applications-of-macros-in-elixir"&gt;
  &lt;/a&gt;
  Up Next: Applications of Macros in Elixir
&lt;/h2&gt;

&lt;p&gt;Congratulations, you've made it to the end of this part! You should now have a better grasp of how macros work internally.&lt;/p&gt;

&lt;p&gt;In part three, we will look at the many applications of macros in Elixir.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S. If you'd like to read Elixir Alchemy posts as soon as they get off the press, &lt;a href="https://blog.appsignal.com/category/elixir-alchemy.html#elixir-alchemy"&gt;subscribe to our Elixir Alchemy newsletter and never miss a single post!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Jia Hao Woo is a developer from the little red dot ‚Äî Singapore! He loves to tinker with various technologies and has been using Elixir and Go for about a year. Follow his programming journey at &lt;a href="https://woojiahao.github.io/blog"&gt;his blog&lt;/a&gt; and on &lt;a href="https://twitter.com/woojiahao_"&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>elixir</category>
    </item>
    <item>
      <title>Best Food Landing Page Design</title>
      <author>Saleh Ahmed</author>
      <pubDate>Tue, 12 Oct 2021 11:35:33 +0000</pubDate>
      <link>https://dev.to/plexpert/best-food-landing-page-design-3hjm</link>
      <guid>https://dev.to/plexpert/best-food-landing-page-design-3hjm</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rgl5cGgi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ay4pgmv6aqcncbeqx1yp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rgl5cGgi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ay4pgmv6aqcncbeqx1yp.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello design lovers. Here we are with another food landing page design. This landing page was created for the food ordering business. It has all the specific features that are needed for any takeaway or fast food business, making it ideal for selling pizzas, sandwiches, or burger menus.&lt;/p&gt;

&lt;p&gt;This template will help you run a successful online food business without spending too much time on design and programming. This food delivery web template design is available to file Figma, Sketch, Adobe XD.&lt;/p&gt;

&lt;p&gt;Download thousands of web templates, mobile app templates, illustrations, SVG icons, and graphic assets for Figma, Sketch, and Adobe XD. From UIKIT.&lt;/p&gt;

&lt;p&gt;Download: &lt;a href="https://uikit.to/downloads/food-landing-page-design/"&gt;https://uikit.to/downloads/food-landing-page-design/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;UIKIT is a design resource platform for UX/UI designers, developers, and founders. Our high-quality design resources will help you to speed up the design process. Resources:&lt;/p&gt;

&lt;p&gt;1000+ Web Templates (Figma, Sketch, XD)&lt;br&gt;
 2500+ Illustrations (Figma, Sketch, XD)&lt;br&gt;
8000+ SVG Icons&lt;br&gt;
500+ Mobile App Screens (Figma, Sketch, XD)&lt;br&gt;
 100+ UI Assets for Web Application (Figma, Sketch, XD)&lt;/p&gt;

&lt;p&gt;We are uploading more resources every day.&lt;/p&gt;

&lt;p&gt;Note: Get Lifetime Access Only for 99$. Use ‚Äúsol10‚Äù coupon for the extra 10% off.&lt;/p&gt;

</description>
      <category>landingpage</category>
      <category>fooddelivery</category>
      <category>websitedesign</category>
    </item>
    <item>
      <title>Top 10 articles about JavaScript of the weeküòâ.</title>
      <author>Kavindu Santhusa</author>
      <pubDate>Tue, 12 Oct 2021 11:31:56 +0000</pubDate>
      <link>https://dev.to/ksengine/top-10-articles-about-javascript-of-the-week-a7f</link>
      <guid>https://dev.to/ksengine/top-10-articles-about-javascript-of-the-week-a7f</guid>
      <description>&lt;p&gt;DEV is a community of software developers getting together to help one another out. The software industry relies on collaboration and networked learning. They provide a place for that to happen.&lt;/p&gt;

&lt;p&gt;Once relegated to the browser as one of the 3 core technologies of the web, JavaScript can now be found almost anywhere you find code.&lt;br&gt;
JavaScript developers move fast and push software development forward; they can be as opinionated as the frameworks they use, so let's keep it clean here and make it a place to learn from each other!&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__6"&gt;
  
    .ltag__tag__id__6 .follow-action-button{
      background-color: #F7DF1E !important;
      color: #000000 !important;
      border-color: #F7DF1E !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/javascript" class="ltag__tag__link"&gt;javascript&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        &amp;lt;p&amp;gt;Once relegated to the browser as one of the 3 core technologies of the web, JavaScript can now be found almost anywhere you find code. &amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;JavaScript developers move fast and push software development forward; they can be as opinionated as the frameworks they use, so let's keep it clean here and make it a place to learn from each other!&amp;lt;/p&amp;gt;
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Here is the most popular articles published on this platform.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1"&gt;
  &lt;/a&gt;
  #1
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://dev.to/shantanu_jana/skeleton-screen-loading-animation-using-html-css-1ec3"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2l4nmHZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VPn8w7BI--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54pcvww3qy3ewjlcfuib.jpg" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/shantanu_jana" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mvgtxsMO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uSjfk6aI--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/629261/e4f99640-18b1-4b0f-b702-cdb730b3a521.jpg" alt="shantanu_jana"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/shantanu_jana/skeleton-screen-loading-animation-using-html-css-1ec3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Skeleton Screen Loading Animation using HTML &amp;amp; CSS&lt;/h2&gt;
      &lt;h3&gt;Shantanu Jana „Éª Oct 5 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#2"&gt;
  &lt;/a&gt;
  #2
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://dev.to/comscience/3-tips-from-atomic-habits-that-helped-me-get-a-job-at-microsoft-56ih"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GxqhVjgl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1NTR0FOn--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8fxot7rrkosfbq7pm3w.png" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/comscience" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RxV24at_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--itHkFn_r--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/185874/e587dd79-ed59-41d0-8fe8-50b345cb7c2b.jpeg" alt="comscience"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/comscience/3-tips-from-atomic-habits-that-helped-me-get-a-job-at-microsoft-56ih" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;3 tips from "Atomic habits" that helped me on my journey to becoming a full-stack dev at Microsoft&lt;/h2&gt;
      &lt;h3&gt;kapeel kokane „Éª Oct 6 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#3"&gt;
  &lt;/a&gt;
  #3
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://dev.to/aviyel/node-js-from-beginners-to-advance-31id"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ow6lBfjH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_v318rT4--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/px9iba7cbwwy7nxiozmy.png" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/aviyel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jk48Byhz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8ml24Y9z--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3818/2fd02162-3471-44cd-8f8f-5336ddc7abc1.png" alt="Aviyel Inc"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X1bzjyno--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--co8MU9_n--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/413418/f04996e5-b2bc-48b2-b362-dbe716bb5b38.JPG" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aviyel/node-js-from-beginners-to-advance-31id" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Node.js from Beginners to Advance&lt;/h2&gt;
      &lt;h3&gt;Pramit Marattha for Aviyel Inc „Éª Oct 8 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mern&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#4"&gt;
  &lt;/a&gt;
  #4
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://dev.to/damiisdandy/pagination-in-javascript-and-react-with-a-custom-usepagination-hook-1mgo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---K-bZ3bE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--l18BZdnJ--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ztvxlsud4r2tdb6cqf6x.jpg" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/damiisdandy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KSLpH_UG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zcBMZiJK--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/473144/13fa2c1c-b784-4bd2-812d-925bb8b6711a.jpeg" alt="damiisdandy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/damiisdandy/pagination-in-javascript-and-react-with-a-custom-usepagination-hook-1mgo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Pagination in Javascript and React, with a custom usePagination() hook&lt;/h2&gt;
      &lt;h3&gt;damilola jerugba „Éª Oct 9 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#5"&gt;
  &lt;/a&gt;
  #5
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://dev.to/stefirosca/5-free-coding-resources-that-helped-me-get-my-first-frontend-developer-job-4ak4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BMDivFIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/social_previews/article/836320.png" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/stefirosca" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6dOP-CWH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--OSIPA_9r--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/698999/870db936-fda4-41d4-904f-e4cd43db5551.jpeg" alt="stefirosca"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/stefirosca/5-free-coding-resources-that-helped-me-get-my-first-frontend-developer-job-4ak4" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;ü¶© 5 Free coding resources that helped me get my first frontend developer job&lt;/h2&gt;
      &lt;h3&gt;Stefi Rosca „Éª Oct 7 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#6"&gt;
  &lt;/a&gt;
  #6
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://dev.to/tyaga001/if-i-were-to-restart-javascript-again-from-scratch-then-i-will-follow-this-roadmap-5c02"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LbE0ud6t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--sGulIqWB--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jj41jkcjvubwhnbtj0ps.jpg" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/tyaga001" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HLEVy15e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--r5R8g_-j--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/350031/8417c751-9076-4e36-a6f5-757c7e279615.jpg" alt="tyaga001"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/tyaga001/if-i-were-to-restart-javascript-again-from-scratch-then-i-will-follow-this-roadmap-5c02" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;If I were to restart JavaScript again from scratch then I will follow this roadmap.&lt;/h2&gt;
      &lt;h3&gt;Ankur Tyagi „Éª Oct 11 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#7"&gt;
  &lt;/a&gt;
  #7
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://dev.to/faisalpathan/why-to-use-map-over-object-in-js-306m"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1U_rzijo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2ooeQHyz--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ouen4ds2unq2dhbiwf8.jpeg" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/faisalpathan" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3qcqmfdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--WFVWziNP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/208788/0432ed4c-15a6-46e5-8bed-14b3dbf46505.jpeg" alt="faisalpathan"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/faisalpathan/why-to-use-map-over-object-in-js-306m" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why to use Maps over Objects in JS ?&lt;/h2&gt;
      &lt;h3&gt;faisal khan „Éª Oct 7 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#8"&gt;
  &lt;/a&gt;
  #8
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://dev.to/ruppysuppy/5-tips-every-react-developer-should-know-1ghh"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qaMRsW4U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--wgG81bEO--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2odb3uhgok4oc9ab8gq.png" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/ruppysuppy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oA7zxE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--E69pqyft--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/530414/941751d8-06b8-41bd-9de9-6ea056b7199f.png" alt="ruppysuppy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ruppysuppy/5-tips-every-react-developer-should-know-1ghh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 Tips Every React Developer Should Know&lt;/h2&gt;
      &lt;h3&gt;Tapajyoti Bose „Éª Oct 10 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#9"&gt;
  &lt;/a&gt;
  #9
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://dev.to/ubahthebuilder/how-to-build-an-accordion-menu-using-html-css-and-javascript-3omb"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sAaczIXT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Tw2vAlSi--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vv8782vlhtpepesrgvq9.png" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/ubahthebuilder" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L3l78C99--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0wqbThHF--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/546743/39bfd054-f855-4f9c-b549-17cbb2ee8ac4.png" alt="ubahthebuilder"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ubahthebuilder/how-to-build-an-accordion-menu-using-html-css-and-javascript-3omb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to build an Accordion Menu using HTML, CSS and JavaScript&lt;/h2&gt;
      &lt;h3&gt;Kingsley Ubah „Éª Oct 7 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#10"&gt;
  &lt;/a&gt;
  #10
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://dev.to/shantanu_jana/create-a-simple-stopwatch-using-javascript-3eoo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p-WF7fip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Q-xBhFBs--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_500%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j88boxbocm22jhebd4v9.jpg" alt="Image of post"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/shantanu_jana" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mvgtxsMO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uSjfk6aI--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/629261/e4f99640-18b1-4b0f-b702-cdb730b3a521.jpg" alt="shantanu_jana"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/shantanu_jana/create-a-simple-stopwatch-using-javascript-3eoo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Create a Simple Stopwatch using JavaScript&lt;/h2&gt;
      &lt;h3&gt;Shantanu Jana „Éª Oct 6 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Orginal authors of this articles are &lt;a class="mentioned-user" href="https://dev.to/shantanu_jana"&gt;@shantanu_jana&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/comscience"&gt;@comscience&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/pramit_armpit"&gt;@pramit_armpit&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/damiisdandy"&gt;@damiisdandy&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/stefirosca"&gt;@stefirosca&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/tyaga001"&gt;@tyaga001&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/faisalpathan"&gt;@faisalpathan&lt;/a&gt;
, ruppysuppy, ubahthebuilder, shantanu_jana .&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Enjoy these articles.&lt;br&gt;
Follow me for more articles.&lt;br&gt;
Thanks üíñüíñüíñ&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>How to use JavaScript to get elements by class name?</title>
      <author>hrishikesh1990</author>
      <pubDate>Tue, 12 Oct 2021 11:30:56 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-use-javascript-to-get-elements-by-class-name-9al</link>
      <guid>https://dev.to/hrishikesh1990/how-to-use-javascript-to-get-elements-by-class-name-9al</guid>
      <description>&lt;p&gt;In this short tutorial, we use JavaScript to get element by class name. We break down the concept, explain the code and then discuss the limitations of the method used.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents-javascript-get-element-by-class"&gt;
  &lt;/a&gt;
  Table of Contents - Javascript get element by class:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#how-does-the-class-attribute-work"&gt;How does the class attribute work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-the-javascript-getelementbyclassname-method"&gt;Using the JavaScript getElementByClassName() method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#limitation-amp-caveats-javascript-get-element-by-class"&gt;Limitation &amp;amp; Caveats - JavaScript get element by class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-does-the-class-attribute-work"&gt;
  &lt;/a&gt;
  How does the class attribute work?
&lt;/h2&gt;

&lt;p&gt;The class attribute is an optional property of an HTML element. This attribute can be used on any HTML element. Once a class is created their name can be used by CSS or JavaScript to apply a particular style or to perform certain tasks. This ensures that all the elements belonging to a particular class behave and appear in a similar fashion.&lt;br&gt;
The below code is an example of a class attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"classname"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Title&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-the-javascript-getelementbyclassname-method"&gt;
  &lt;/a&gt;
  Using the JavaScript getElementByClassName() method:
&lt;/h2&gt;

&lt;p&gt;The JavaScript getElementsByClassName is used to get all the elements that belong to a particular class. When the JavaScript get element by class name method is called on the document object, it searches the complete document, including the root nodes, and returns an array containing all the elements.&lt;/p&gt;

&lt;p&gt;The syntax is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here ‚Äúname‚Äù is the class name you are looking to find and ‚Äúelements‚Äù is a variable that would contain the array of elements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h3&gt;

&lt;p&gt;Let‚Äôs take a sample HTML code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"freelancer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Name&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Skills&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item price"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Cost&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Projects&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now since we intend to look for the element in a particular section we first identify the section along with the ID.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;docs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementByID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#freelancer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;freelancer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;item&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now ‚Äòelements‚Äô contain the list of elements with the class name ‚Äòitem‚Äô.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitation-amp-caveats-javascript-get-element-by-class"&gt;
  &lt;/a&gt;
  Limitation &amp;amp; Caveats - JavaScript get element by class:
&lt;/h2&gt;

&lt;p&gt;When using the aforementioned method, note that&lt;br&gt;
If you are trying to get elements with the different class names their names must be separated by whitespace and not a comma.&lt;br&gt;
Class selectors cannot be used in this method.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Hacktoberfest‚Äô21: Aviyel is Celebrating Open Source with Coffee &amp; Code!</title>
      <author>AnkithaTech11</author>
      <pubDate>Tue, 12 Oct 2021 11:21:32 +0000</pubDate>
      <link>https://dev.to/aviyel/coffee-code-alert-join-mangabo-kolawole-live-at-contributing-to-chatwoot-on-github-24jl</link>
      <guid>https://dev.to/aviyel/coffee-code-alert-join-mangabo-kolawole-live-at-contributing-to-chatwoot-on-github-24jl</guid>
      <description>&lt;p&gt;To all developers and open source enthusiasts, &lt;/p&gt;

&lt;p&gt;Bringing you an evening full of codes and industry experts on some of the most sought-after open source projects out there. Chatwoot‚Äôs open source community is going live with Aviyel and you are invited!&lt;/p&gt;

&lt;p&gt;Join us live for a coding session on Contributing to &lt;strong&gt;Chatwoot&lt;/strong&gt; via &lt;strong&gt;Github&lt;/strong&gt; by &lt;strong&gt;Mangabo Kolawole&lt;/strong&gt;, a full stack developer and a part-time indie maker. &lt;/p&gt;

&lt;p&gt;Learn from the minds behind some trending open source projects (full lineup is a surprise), get exclusive Q&amp;amp;A with Kolawole, and boost your open source journey through hands-on experience with Chatwoot. &lt;/p&gt;

&lt;p&gt;By the end, we promise tons of tactics and programming, you can put into action right away. Don‚Äôt miss out, it‚Äôs October already!&lt;/p&gt;

&lt;p&gt;Mark your Calendar: üìÜ¬†&lt;strong&gt;15th October&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Time: &lt;strong&gt;9 AM PST¬†| 12 PM EST&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Join here üìå&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://bit.ly/3v4aGSe"&gt;https://bit.ly/3v4aGSe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Impressed? Check out the rest of our  &lt;a href="https://bit.ly/2YG9eJE"&gt;events&lt;/a&gt; !&lt;/p&gt;

&lt;p&gt;Let‚Äôs code together,&lt;/p&gt;

&lt;p&gt;Team Aviyel&lt;/p&gt;

</description>
      <category>chatwoot</category>
      <category>developers</category>
      <category>opensource</category>
      <category>chatbots</category>
    </item>
  </channel>
</rss>
