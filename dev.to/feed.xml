<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Getting started with Flask and Cerberus - Building a Chess Analysis App (Part 2)</title>
      <author>propelauthblog</author>
      <pubDate>Tue, 16 Nov 2021 18:43:59 +0000</pubDate>
      <link>https://dev.to/propelauth/getting-started-with-flask-and-cerberus-building-a-chess-analysis-app-part-2-4jo1</link>
      <guid>https://dev.to/propelauth/getting-started-with-flask-and-cerberus-building-a-chess-analysis-app-part-2-4jo1</guid>
      <description>&lt;p&gt;In our &lt;a href="https://blog.propelauth.com/chess-analysis-1-analysis/"&gt;last post&lt;/a&gt;, we learned about chess analysis. We then created a python function &lt;code&gt;analyze_position&lt;/code&gt; that takes in a chess position and outputs a detailed analysis.&lt;/p&gt;

&lt;p&gt;In this post, we'll create an API around that function, so our users can submit positions for us to analyze. We'll use Flask as our web server and Cerberus to validate the input.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-flask"&gt;
  &lt;/a&gt;
  Setting up Flask
&lt;/h2&gt;

&lt;p&gt;Recall that last time we set up our project like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;chess-api
&lt;span class="nv"&gt;$ &lt;/span&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv venv
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;venv/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;python-chess
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're using &lt;a href="https://flask.palletsprojects.com/"&gt;Flask&lt;/a&gt; as our web server because it is very lightweight, so we'll want to install that next.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;Flask
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The quickstart guide shows how easy it is to set up a route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which we can run and test with &lt;code&gt;curl&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# flask run automatically looks for app.py&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;flask run

&lt;span class="c"&gt;# different terminal, flasks default port is 5000&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;curl localhost:5000
&amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also return a dictionary which is returned as JSON.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app.py
&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world_json&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"world"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-v&lt;/span&gt; localhost:5000/json
...
&amp;lt; HTTP/1.0 200 OK
&amp;lt; Content-Type: application/json
&amp;lt; Content-Length: 18
...
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"hello"&lt;/span&gt;:&lt;span class="s2"&gt;"world"&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#validating-json-body-in-flask-with-cerberus"&gt;
  &lt;/a&gt;
  Validating JSON body in Flask with Cerberus
&lt;/h2&gt;

&lt;p&gt;We want to make sure that only valid requests are allowed. &lt;a href="https://docs.python-cerberus.org/en/stable/"&gt;Cerberus&lt;/a&gt; is a lightweight validation library for python. We can define our expected schema and then make sure requests conform to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# A FEN is a standard way of representing a chess board
# Make sure that both the FEN string is valid, 
#   and the resulting board is valid
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_valid_fen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Board&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Invalid FEN"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Invalid FEN"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;SCHEMA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"fen"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"required"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"check_with"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;is_valid_fen&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;"num_moves_to_return"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"integer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"min"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"max"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;"time_limit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"number"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"min"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"max"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;"depth_limt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"integer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"min"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"max"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The schema itself is pretty straightforward. We have 4 fields, 3 of which are optional integers/numbers. For the &lt;code&gt;fen&lt;/code&gt; field, we want to make sure it's both a string and a valid FEN, so we need to define a custom validation function.&lt;/p&gt;

&lt;p&gt;When we are ready, we can check that a dictionary is valid like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Validator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SCHEMA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;is_valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_json_request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and if it isn't valid, &lt;code&gt;v.errors&lt;/code&gt; contains exactly what's wrong with it. &lt;code&gt;v.normalized(some_json_request)&lt;/code&gt; modifies it's input which we will use to fill in defaults for the optional fields.&lt;/p&gt;

&lt;p&gt;Let's put this all together in a new file &lt;code&gt;parser.py&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cerberus&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Validator&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;make_response&lt;/span&gt;

&lt;span class="c1"&gt;# ... schema from above
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_body&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Validator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SCHEMA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# If invalid, exit out with a 400
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_body&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# abort exits early with an HTTP response
&lt;/span&gt;        &lt;span class="n"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;make_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# Fill in defaults
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can hook this up to a new route in our &lt;code&gt;app.py&lt;/code&gt;. For now, let's return the parsed request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;parser&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse_request&lt;/span&gt;

&lt;span class="c1"&gt;# ...
&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/analyze"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;analyze&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parse_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running our new app, we can test it with curl. Here's an example where we only specify the FEN and the&lt;br&gt;
other fields get their defaults filled in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-X&lt;/span&gt; POST 
       &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Content-Type: application/json"&lt;/span&gt; 
       &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'{"fen": "8/8/6P1/4R3/8/6k1/2r5/6K1 b - - 0 1"}'&lt;/span&gt; localhost:5000/analyze
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"fen"&lt;/span&gt;:&lt;span class="s2"&gt;"8/8/6P1/4R3/8/6k1/2r5/6K1 b - - 0 1"&lt;/span&gt;,&lt;span class="s2"&gt;"num_moves_to_return"&lt;/span&gt;:1,&lt;span class="s2"&gt;"time_limit"&lt;/span&gt;:60&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's what happens with an invalid FEN.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nt"&gt;-X&lt;/span&gt; POST 
       &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Content-Type: application/json"&lt;/span&gt; 
       &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'{"fen": "nonsense"}'&lt;/span&gt; localhost:5000/analyze
...
&amp;lt; HTTP/1.0 400 BAD REQUEST
...
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"fen"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Invalid FEN"&lt;/span&gt;&lt;span class="o"&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#analyzing-each-request-synchronously"&gt;
  &lt;/a&gt;
  Analyzing each request synchronously
&lt;/h2&gt;

&lt;p&gt;We already have our &lt;code&gt;analyze_position&lt;/code&gt; from the last post... what if we just use that directly in our route?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/analyze"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;analyze&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;parsed_request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;analysis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;analyze_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;parsed_request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"fen"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                &lt;span class="n"&gt;num_moves_to_return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;parsed_request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"num_moves_to_return"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                &lt;span class="n"&gt;depth_limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;parsed_request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"depth_limit"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                &lt;span class="n"&gt;time_limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;parsed_request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"time_limit"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"analysis"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;analysis&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's test it with our mate in 2 example from before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-X&lt;/span&gt; POST 
       &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Content-Type: application/json"&lt;/span&gt; 
       &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'{"fen": "8/8/6P1/4R3/8/6k1/2r5/6K1 b - - 0 1"}'&lt;/span&gt; localhost:5000/analyze
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"analysis"&lt;/span&gt;:[&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"centipawn_score"&lt;/span&gt;:null,&lt;span class="s2"&gt;"mate_score"&lt;/span&gt;:-2,&lt;span class="s2"&gt;"pv"&lt;/span&gt;:[&lt;span class="s2"&gt;"c2c1"&lt;/span&gt;,&lt;span class="s2"&gt;"e5e1"&lt;/span&gt;,&lt;span class="s2"&gt;"c1e1"&lt;/span&gt;&lt;span class="o"&gt;]}]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works! It's not a terrible v0, but it has an obvious flaw. Analyzing requests can be a very CPU intensive task. Someone could request an hour-long depth 50 search and our webserver will spend a lot of time working on that. Not to mention that the request will likely time out meaning all the work we do is irrelevant. If a bunch of people request similar analyses, we'll quickly get overloaded.&lt;/p&gt;

&lt;p&gt;In our next post, we'll convert this API into an asynchronous API to solve these issues. See you then!&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>'Avoid Surprise Bills from AWS' </title>
      <author>Ryan Bethel</author>
      <pubDate>Tue, 16 Nov 2021 18:43:54 +0000</pubDate>
      <link>https://dev.to/begin/avoid-surprise-bills-from-aws-3d75</link>
      <guid>https://dev.to/begin/avoid-surprise-bills-from-aws-3d75</guid>
      <description>&lt;p&gt;Architect users often ask for some way to avoid large surprise bills from AWS. The budget-watch plugin sets a cost limit for your app and temporarily shuts it down when the limit is reached. It is the first step to solving this problem for our community.&lt;/p&gt;

&lt;p&gt;Scaling is a built-in feature of dynamic apps using cloud functions. But if your app can scale to infinity, so can your bill. Many users have this concern, even though it rarely happens. Amazon has many services to help monitor billing. Setting an account-wide budget alert is a relatively easy first line of defense. But configuring more fine-grained monitoring for a single app is not so easy. It's a little like trying to fix your car by breaking into your mechanic's garage. The billing services are too complicated for a small team to devote their limited resources to.&lt;/p&gt;

&lt;p&gt;The unit of deployment in Architect is an individual app. None of the AWS budget solutions easily scope to a single app. You might have one app you expect to cost $100 per month and a dozen other experimental apps that you expect to be free. You should be able to easily set these limits and have some assurance there will be no surprises.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-budgetwatch-does"&gt;
  &lt;/a&gt;
  What budget-watch does
&lt;/h2&gt;

&lt;p&gt;There are many ways an app could run up your bill. Maybe you hit the top of hacker news, or you might have an infinite loop. The simplest way to stop a runaway app is to shut down the compute resources. By setting reserved concurrency (how many simultaneous executions can run) on all lambdas to zero, you can effectively stop most things that cost money in your app. You install the plugin with &lt;code&gt;npm install @architect/plugin-budget-watch&lt;/code&gt;, and then add the four lines shown below to your app manifest.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@plugins
budget-watch

@budget
limit $40
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the app uses multiple plugins, budget-watch should be listed last so that it is the last one applied. When deployed, it attaches a budget alert scoped to just the resources of the app. If the cost of those resources exceeds the limit set, a shutdown is triggered. To restart the app, the limit can be increased or removed and the app redeployed. This resets the lambda concurrency, and the app will resume operation. You can see the code on &lt;a href="https://github.com/architect/plugin-budget-watch"&gt;github.com/architect/plugin-budget-watch&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation-details-the-messy-parts"&gt;
  &lt;/a&gt;
  Implementation details (the messy parts)
&lt;/h2&gt;

&lt;p&gt;We would love to see Amazon build this feature into the platform. Solving this problem from the outside exposes many rough edges in the billing and CloudFormation APIs. The three biggest challenges are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enabling tags&lt;/li&gt;
&lt;li&gt;Slow billing updates&lt;/li&gt;
&lt;li&gt;Managing configuration drift&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#enabling-tags"&gt;
  &lt;/a&gt;
  Enabling tags
&lt;/h3&gt;

&lt;p&gt;An ideal solution would be deployed entirely through the app manifest using CloudFormation (AWS's infrastructure as code that Architect uses underneath). All that is needed to scope to an app is a single auto-generated tag (&lt;code&gt;aws:cloudformation:stack-name&lt;/code&gt;). But before this tag can be used, someone needs to navigate deep into the AWS console to activate it. This only needs to be done once, but it breaks the ideal user experience of avoiding the console altogether. Some users may not be allowed to activate tags because of account limits set by their organization.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#billing-updates"&gt;
  &lt;/a&gt;
  Billing updates
&lt;/h3&gt;

&lt;p&gt;Amazon bills you by the millisecond but only lets you check three times a day. It's like touching a stove and finding out eight hours later that you got burned. You can set all kinds of alerts on all sorts of dimensions, but you can't do any better than 8-12 hours of granularity. Even if you set an alert for a limit you have already passed, the notification may still be delayed for half a day until the next billing update.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#drift-detection"&gt;
  &lt;/a&gt;
  Drift detection
&lt;/h3&gt;

&lt;p&gt;Deterministic deploys are a core feature of Architect. You get the same infrastructure every time you deploy the same app manifest. This plugin should not break that contract. Setting a budget limit and resetting it after it has triggered are all done from the app manifest. To shut down the app the plugin changes all concurrency by directly calling the lambda API. This causes a drift (out of band configuration changes to infrastructure) between your app and manifest. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nKD42Dl0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/senv4g5rq6my3abtecy9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nKD42Dl0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/senv4g5rq6my3abtecy9.gif" alt="girl drifting in a toy car" width="415" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This drift needs to be reversed if the app is restarted. If you deploy the same CloudFormation template, it will not make any update because the template has not changed. AWS has "Drift Detection" that you can enable to monitor the out-of-band changes, but it requires clicking around the console to enable it. There is no way to turn drift detection on with CloudFormation, and there is no way to automatically reconcile that drift by having your template overwrite those configuration changes. Not only that, drift detection does not even monitor the relevant lambda configurations.&lt;/p&gt;

&lt;p&gt;The workaround for this drift reset is to use a CloudFormation Custom Resource as a reset mechanism. Custom resources are intended for provisioning infrastructure outside of AWS and connect them to your stack through CloudFormation. They have lifecycle hooks for create, update, and delete that run custom logic. After the budget-watch limit is triggered, it can be reset by increasing the limit in the manifest or by removing the limit. This triggers an update in the custom resource that resets the concurrency back to its original settings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-approaches-considered"&gt;
  &lt;/a&gt;
  Other approaches considered
&lt;/h2&gt;

&lt;p&gt;There are many ways to build a feature like this with AWS building blocks, but most suffer from the same limitations (i.e., 3x/day updates). Two promising approaches considered were cost anomaly detection w/SNS alerts and budget triggered actions. Cost anomaly detection was not used primarily because the alerts look for deviations in billing rather than absolute limits. What is the "expected" budget for the app I just deployed for the first time? &lt;/p&gt;

&lt;p&gt;Budget triggered actions seemed like the most promising solution provided by AWS. You set a budget with an alert that has automated actions attached. The challenge is that the actions you can specify are permissions, policy, and instance-based. These actions end up tightly coupled to implementation details of the app and must be updated as the app changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitations"&gt;
  &lt;/a&gt;
  Limitations
&lt;/h2&gt;

&lt;p&gt;The actual causes of large surprise bills are as varied as the many services that AWS offers. This solution cannot possibly catch every one. It focuses on the biggest source and applies the broadest intervention. Architect is a very flexible framework. It is possible (especially with custom plugins) to include infrastructure that will not be shut down by budget-watch. &lt;/p&gt;

&lt;p&gt;This plugin is still in Beta. We encourage people to try it out and give feedback. If you want to add the plugin to your Architect project you can follow the instruction in the GitHub repository (&lt;a href="https://github.com/architect/plugin-budget-watch"&gt;architect/plugin-budget-watch&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-begin-users"&gt;
  &lt;/a&gt;
  What about Begin users?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://begin.com"&gt;Begin.com&lt;/a&gt; has a generous free tier, so users do not have to worry about costs. But for those on the paid tier, we will soon make this feature available to all users of Begin. We hope that AWS will build this into the platform in a more usable way. Until then, we hope to relieve some of the fear of unexpected bills. If you want to build scalable web apps with Begin &lt;a href="https://begin.com/join"&gt;sign up&lt;/a&gt; for a free account today.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>EOL : Python Syntax Error</title>
      <author>Anjali Kumawat</author>
      <pubDate>Tue, 16 Nov 2021 18:27:11 +0000</pubDate>
      <link>https://dev.to/anjalikumawat2002/eol-python-syntax-error-3fl0</link>
      <guid>https://dev.to/anjalikumawat2002/eol-python-syntax-error-3fl0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#eol"&gt;
  &lt;/a&gt;
  EOL
&lt;/h2&gt;

&lt;p&gt;EOL == End Of Line&lt;/p&gt;

&lt;p&gt;An EOL error indicatesthat Python interpreter expected a particular character or set of characters to have occurred in specific line of code, but that those characters were not found before the end of the line . This results in Python stopping the program execution and throwing a syntax error .The EOL error signifies that the Interpreter of Python reached the end of the line while scanning the string literal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syntaxerror-eol-while-scanning-string-literal"&gt;
  &lt;/a&gt;
  syntaxerror : Eol while scanning string literal
&lt;/h2&gt;

&lt;p&gt;Let’s take a look at our error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;syntaxerror: EOL while scanning string literal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If a syntax error is encountered, Python stops executing a program and gives a error . This is because the Python interpreter needs you to rectify the issue before it can read the rest of your code.&lt;/p&gt;

&lt;p&gt;This error is commonly caused by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strings that span multiple lines using the wrong syntax&lt;/li&gt;
&lt;li&gt;Missing quotation marks&lt;/li&gt;
&lt;li&gt;Mismatching quotation marks&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-string-literal-in-python"&gt;
  &lt;/a&gt;
  What is String Literal in Python?
&lt;/h3&gt;

&lt;p&gt;String literal is a set of characters enclosed between quotation marks (“). All the characters are noted as a sequence. In Python, you can declare &lt;a href="https://docs.python.org/3/library/string.html?highlight=string#module-string"&gt;string literals&lt;/a&gt; using three types, single quotation marks (‘ ‘), double quotation marks (” “), and triple quotation marks (“”” “””). Strings are arrays and their characters can be accessed by using square brackets. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;String Literal Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exampleA = 'Single Quotes String'
exampleB = "Single Quotes String"
exampleC = """Single Quotes String"""

print(exampleA[0])  # it will print S
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example-multiple-lines-string"&gt;
  &lt;/a&gt;
  Example : Multiple Lines String
&lt;/h2&gt;

&lt;p&gt;In Python, strings can span multiple lines.  Multi-line strings must be triple quoted, or written using three quotation marks.&lt;/p&gt;

&lt;p&gt;let's look at multiple line string -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def Coder():
    message = "Welcome, Coders!
When to use iterative development? You should use iterative development only on projects that you want to succeed."
        print(message)

Coder()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output is -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SyntaxError: EOL while scanning string literal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An error is returned because a string using single or double quotes cannot span multiple lines. To solve this problem, we need to enclose our string with three single or double quotes.&lt;/p&gt;

&lt;p&gt;Now look at the correct code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def Coder():
    message = """Welcome, Coders!
When to use iterative development? You should use iterative development only on projects that you want to succeed."""
        print(message)

Coder()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output is -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Welcome, Coders!
When to use iterative development? You should use iterative development only on projects that you want to succeed.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example-missing-quotation-mark"&gt;
  &lt;/a&gt;
  Example : Missing Quotation Mark
&lt;/h2&gt;

&lt;p&gt;Strings must be closed after the contents of a string have been declared. Otherwise, Python returns a syntax error. &lt;/p&gt;

&lt;p&gt;Let’s take a look at a string that is not closed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def Coder():
    message = "Welcome, Coders!
        print(message)

Coder()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's check the output -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SyntaxError: EOL while scanning string literal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An We have forgotten to close our string. If you look at the line of code where we declare the “message” variable, there is no closing string character.&lt;br&gt;
We can fix this error by closing our string using the same quotation mark that we used to open our string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def Coder():
    message = "Welcome, Coders!"
        print(message)

Coder()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Welcome, Coders!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now code runs successfully.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-mismatching-quotation-marks"&gt;
  &lt;/a&gt;
  Example : Mismatching Quotation Marks
&lt;/h2&gt;

&lt;p&gt;The type of quote you use to open a string should be the same as the type of quote you use to close a string.&lt;/p&gt;

&lt;p&gt;A syntax error is returned when the types of quotes that you use to open and close a string are different. Let’s take a look at a program that opens a string using a single quote mark (‘) and closes a string using  a double quote mark (”) :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def Coder():
    message = 'Welcome, Coders!"
        print(message)

Coder()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SyntaxError: EOL while scanning string literal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can fix this problem by making our quotations match. We’re going to change our first quotation mark to use double quotes (“):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def Coder():
    message = "Welcome, Coders!"
        print(message)

Coder()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Welcome, Coders!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our code runs successfully.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-eol-while-scanning-string-literal"&gt;
  &lt;/a&gt;
  Conclusion: EOL While Scanning String Literal
&lt;/h2&gt;

&lt;p&gt;Strings have helpful in thousands of ways in Python. As using them can provide easy access to a sequence of characters and their attributes. The only problem is that you have to take care of their syntax. Any invalid syntax and invalid backslashes in the string can cause EOF errors to appear. To avoid this error, follow all the steps from the post above.&lt;/p&gt;

&lt;p&gt;Keep Coding......&lt;br&gt;
Keep learning......💻&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>python</category>
    </item>
    <item>
      <title>Automatically update your CONTRIBUTORS file with this GitHub Action + Workflow</title>
      <author>Erika Heidi</author>
      <pubDate>Tue, 16 Nov 2021 18:15:07 +0000</pubDate>
      <link>https://dev.to/erikaheidi/automatically-update-your-contributors-file-with-this-github-action-workflow-d98</link>
      <guid>https://dev.to/erikaheidi/automatically-update-your-contributors-file-with-this-github-action-workflow-d98</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;I wanted to build something simple but yet useful for open source maintainers. So here's what I built: an action to automatically generate a &lt;code&gt;CONTRIBUTORS.md&lt;/code&gt; file based on a project's top contributors, using the GitHub API to pull information about the project. The workflow then uses another action to create a pull request or commit the changes directly to the same repository where the workflow is configured.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--axKOB70b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g9rz7y5tmedisyahxfv6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--axKOB70b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g9rz7y5tmedisyahxfv6.png" alt="Automated pull request with github actions" width="880" height="628"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The action runs a &lt;a href="https://github.com/minicli/action-contributors/blob/main/minicli"&gt;single-command application&lt;/a&gt; created with &lt;a href="https://docs.minicli.dev"&gt;Minicli&lt;/a&gt;, a minimalist command-line framework for building PHP CLI commands.&lt;/p&gt;

&lt;p&gt;The application, action, and example workflows can be found here:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/minicli"&gt;
        minicli
      &lt;/a&gt; / &lt;a href="https://github.com/minicli/action-contributors"&gt;
        action-contributors
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      GitHub Action to dynamically update CONTRIBUTORS file
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Generate / Update CONTRIBUTORS File - GitHub Action&lt;/h1&gt;
&lt;p&gt;This GitHub Action updates a CONTRIBUTORS file with the top contributors from the specified project, pulling contents from the GitHub API.&lt;/p&gt;
&lt;h2&gt;
Example Usage&lt;/h2&gt;
&lt;p&gt;This action is made to use in conjunction with &lt;a href="https://github.com/marketplace/actions/update-files-on-github"&gt;test-room-7/action-update-file&lt;/a&gt; in order to automatically commit an updated CONTRIBUTORS file in a fixed interval.&lt;/p&gt;
&lt;p&gt;The following example sets a workflow to update the file once a month, committing the changes directly to the main project's branch:&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-ent"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;Update CONTRIBUTORS file&lt;/span&gt;
&lt;span class="pl-ent"&gt;on&lt;/span&gt;
  &lt;span class="pl-ent"&gt;schedule&lt;/span&gt;:
    - &lt;span class="pl-ent"&gt;cron&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;0 0 1 * *&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-ent"&gt;workflow_dispatch&lt;/span&gt;:
&lt;span class="pl-ent"&gt;jobs&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;main&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;runs-on&lt;/span&gt;: &lt;span class="pl-s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="pl-ent"&gt;steps&lt;/span&gt;:
      - &lt;span class="pl-ent"&gt;uses&lt;/span&gt;: &lt;span class="pl-s"&gt;minicli/action-contributors@v3&lt;/span&gt;
        &lt;span class="pl-ent"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Update a projects CONTRIBUTORS file&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
      - &lt;span class="pl-ent"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;Commit changes&lt;/span&gt;
        &lt;span class="pl-ent"&gt;uses&lt;/span&gt;: &lt;span class="pl-s"&gt;test-room-7/action-update-file@v1&lt;/span&gt;
        &lt;span class="pl-ent"&gt;with&lt;/span&gt;:
          &lt;span class="pl-ent"&gt;file-path&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;CONTRIBUTORS.md&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
          &lt;span class="pl-ent"&gt;commit-msg&lt;/span&gt;: &lt;span class="pl-s"&gt;Update Contributors&lt;/span&gt;
          &lt;span class="pl-ent"&gt;github-token&lt;/span&gt;: &lt;span class="pl-s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
        &lt;span class="pl-ent"&gt;env&lt;/span&gt;:
          &lt;span class="pl-ent"&gt;CONTRIB_REPOSITORY&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;minicli/minicli&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/minicli/action-contributors"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Maintainer Must-Haves&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;

&lt;p&gt;Here is an example workflow to run this action once a month and commit the changes directly to the main project's branch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update CONTRIBUTORS file&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;minicli/action-contributors@v2&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;projects&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;CONTRIBUTORS&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;file'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update resources&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;test-room-7/action-update-file@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;file-path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;CONTRIBUTORS.md'&lt;/span&gt;
          &lt;span class="na"&gt;commit-msg&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update Contributors&lt;/span&gt;
          &lt;span class="na"&gt;github-token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;CONTRIB_REPOSITORY&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;minicli/minicli'&lt;/span&gt;
          &lt;span class="na"&gt;CONTRIB_OUTPUT_FILE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;CONTRIBUTORS.md'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You need to replace the &lt;code&gt;CONTRIB_REPOSITORY&lt;/code&gt; value with the GitHub project you want to pull contributors from.&lt;/p&gt;

&lt;p&gt;If you'd prefer to create a pull request instead of committing the changes directly to the main branch, you can use the &lt;a href="https://github.com/marketplace/actions/create-pull-request"&gt;create-pull-request&lt;/a&gt; action instead. For that, you'll also need to include the &lt;a href="https://github.com/actions/checkout"&gt;actions/checkout&lt;/a&gt; GitHub Action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update CONTRIBUTORS file&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;minicli/action-contributors@v3&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;projects&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;CONTRIBUTORS&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;file"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create a PR&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;peter-evans/create-pull-request@v3&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;commit-message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update Contributors&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;[automated]&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Contributors&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;File"&lt;/span&gt;
          &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;CONTRIB_REPOSITORY&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;minicli/minicli'&lt;/span&gt;
          &lt;span class="na"&gt;CONTRIB_OUTPUT_FILE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;CONTRIBUTORS.md'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;Projects using this action:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/minicli/minicli"&gt;minicli/minicli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/minicli/docs"&gt;minicli/docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>opensource</category>
      <category>contributors</category>
    </item>
    <item>
      <title>Grid practice</title>
      <author>Dahye Ji</author>
      <pubDate>Tue, 16 Nov 2021 17:47:29 +0000</pubDate>
      <link>https://dev.to/daaahailey/grid-practice-14ac</link>
      <guid>https://dev.to/daaahailey/grid-practice-14ac</guid>
      <description>&lt;p&gt;I've been using flex more and haven't really used float or grid. I think I should try to use them more often when I write code. &lt;/p&gt;

&lt;p&gt;Grid is suitable for complex layout since you can organise content both into columns and rows.&lt;br&gt;
As it is with flex, grid also has grid container and grid items which are the children of the container. So the whole space of the container gets affected by the grid and according to the each properties and values of each items, the layout changes.&lt;br&gt;
You can specify it as display: grid in container.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ekm3lIX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0esr8cnpgmfrc26x2tl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ekm3lIX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0esr8cnpgmfrc26x2tl.png" alt="Image description" width="880" height="673"&gt;&lt;/a&gt;&lt;/p&gt;
image's from https://studiomeal.com/archives/533

 

&lt;p&gt; &lt;br&gt;
Grid track is row and column of grid, grid cell is a cell of grid. Grid line is the line that divide grid cells. To use grid, we write this in container first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/* display: inline-grid; */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, &lt;strong&gt;&lt;u&gt;nothing will change if the (grid)items are block elements&lt;/u&gt;&lt;/strong&gt;. Inline-grid also behaves like inline-block.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;strong&gt;grid-template-rows&lt;/strong&gt;&lt;/code&gt;, &lt;code&gt;&lt;strong&gt;grid-template columns&lt;/strong&gt;&lt;/code&gt; : these specify size of grid tracks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* grid-template-columns: 1fr 1fr 1fr */&lt;/span&gt;
  &lt;span class="c"&gt;/* grid-template-columns: repeat(3, 1fr) */&lt;/span&gt;
  &lt;span class="c"&gt;/* grid-template-columns: 200px 1fr */&lt;/span&gt;
  &lt;span class="c"&gt;/* grid-template-columns: 100px 200px auto */&lt;/span&gt;

  &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* grid-template-rows: 1fr 1fr 1fr */&lt;/span&gt;
  &lt;span class="c"&gt;/* grid-template-rows: repeat(3, 1fr) */&lt;/span&gt;
  &lt;span class="c"&gt;/* grid-template-rows: 200px 1fr */&lt;/span&gt;
  &lt;span class="c"&gt;/* grid-template-rows: 100px 200px auto */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;fr = fraction. (you can consider it as ratio)&lt;br&gt;
If &lt;code&gt;&lt;strong&gt;grid-template-columns: 1fr 1fr 1fr;&lt;/strong&gt;&lt;/code&gt;, this will make three columns which are 1:1:1.&lt;br&gt;
If &lt;code&gt;&lt;strong&gt;grid-template-columns: 100px 2fr 1fr;&lt;/strong&gt;&lt;/code&gt;, this will set the first column on the left to 100px, second and third column to have 2:1 ratio.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#repeat"&gt;
  &lt;/a&gt;
  repeat
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c"&gt;/* The code above is the same as below */&lt;/span&gt;
  &lt;span class="c"&gt;/* grid-template-columns: 1fr 1fr 1fr 1fr 1fr */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zWI_TTOZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqidw8d2aymtyn39kuxo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zWI_TTOZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqidw8d2aymtyn39kuxo.png" alt="Image description" width="880" height="507"&gt;&lt;/a&gt;&lt;/p&gt;
image's from https://studiomeal.com/archives/533





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* These two select the same area */&lt;/span&gt;

&lt;span class="nc"&gt;.item&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-row-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-row-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.item&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#gridarea"&gt;
  &lt;/a&gt;
  grid-area
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ko"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;flex-1&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.container-color&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;cornsilk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.item-color&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;darkcyan&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="py"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="s2"&gt;'header header header'&lt;/span&gt;
                &lt;span class="s2"&gt;'section section section'&lt;/span&gt;
                &lt;span class="s2"&gt;'footer footer footer'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;tomato&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;deeppink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container-color container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item-color item header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem.&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item-color item section"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem, ipsum.&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item-color item footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit.&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#gridrow-gridcolumn"&gt;
  &lt;/a&gt;
  &lt;code&gt;grid-row&lt;/code&gt;, &lt;code&gt;grid-column&lt;/code&gt;
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ko"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;flex-1&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.container-color&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;cornsilk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="c"&gt;/* height: 500px; */&lt;/span&gt;
            &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.item-color&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;darkcyan&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.aside&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container-color container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item-color item header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem.&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item-color item section"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem, ipsum.&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item-color item aside"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem, ipsum dolor.&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item-color item footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit.&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#grid-practice"&gt;
  &lt;/a&gt;
  Grid practice
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mLZCsKOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzda60jmzfu7r7w42v6b.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mLZCsKOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzda60jmzfu7r7w42v6b.gif" alt="Image description" width="500" height="271"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/daaahailey/likelion/blob/main/css/002.grid/003_codepen_grid_clone3.html"&gt;code&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Some issue from code above&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If the element has transform, z-index gets ignored and the background cards came to the front on the top of other elements.&lt;br&gt;
So, instead of using transform: translate(), used top and left to move element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Something to read: &lt;a href="https://coder-coder.com/z-index-isnt-working/"&gt;Why z-index isn't working?&lt;/a&gt; &lt;br&gt;
&lt;a href="https://erwinousy.medium.com/z-index%EA%B0%80-%EB%8F%99%EC%9E%91%ED%95%98%EC%A7%80%EC%95%8A%EB%8A%94-%EC%9D%B4%EC%9C%A0-4%EA%B0%80%EC%A7%80-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EA%B3%A0%EC%B9%98%EB%8A%94-%EB%B0%A9%EB%B2%95-d5097572b82f"&gt;in Korean&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-you-can-also-check-grid-on-developers-tool-as-well"&gt;
  &lt;/a&gt;
  + You can also check grid on developer's tool as well.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WFo_C9i6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7zgzlfc2o44i8qk934r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WFo_C9i6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7zgzlfc2o44i8qk934r.png" alt="Image description" width="880" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#game-to-practice-css-grid"&gt;
  &lt;/a&gt;
  Game to practice CSS grid
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://cssgridgarden.com/#ko"&gt;CSS Grid garden&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>grid</category>
    </item>
    <item>
      <title>Column selection: simultaneous multi-line editing with IntelliJ!</title>
      <author>scottshipp</author>
      <pubDate>Tue, 16 Nov 2021 17:44:36 +0000</pubDate>
      <link>https://dev.to/scottshipp/column-selection-simultaneous-multi-line-editing-with-intellij-2ddn</link>
      <guid>https://dev.to/scottshipp/column-selection-simultaneous-multi-line-editing-with-intellij-2ddn</guid>
      <description>&lt;p&gt;Did you know that &lt;a href="https://www.jetbrains.com/idea/"&gt;IntelliJ IDEA&lt;/a&gt; can be used to edit &lt;em&gt;multiple&lt;/em&gt; lines at once with its &lt;a href="https://www.jetbrains.com/help/idea/2021.2/multicursor.html#column_selection"&gt;column selection&lt;/a&gt; feature!?&lt;/p&gt;

&lt;p&gt;And..it's really easy. Simply hold down Alt or Option, depending on which OS you use, and drag up- or downward.&lt;/p&gt;

&lt;p&gt;You can see this in action in the following video:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/X8wwrXXgYQA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This can be handy in all kinds of situations from changing the access modifiers of multiple variables at once to adding bullet points in front of multiple lines of Markdown.&lt;/p&gt;

&lt;p&gt;Happy IntelliJ-ing!&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Debugging Azure Static Web Apps in VS Code</title>
      <author>Alex Weininger</author>
      <pubDate>Tue, 16 Nov 2021 17:41:35 +0000</pubDate>
      <link>https://dev.to/azure/debugging-azure-static-web-apps-in-vs-code-3gmm</link>
      <guid>https://dev.to/azure/debugging-azure-static-web-apps-in-vs-code-3gmm</guid>
      <description>&lt;p&gt;We've just released v0.9.0 of the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps"&gt;Azure Static Web Apps extension for VS Code&lt;/a&gt;. This release includes features to help debug your static web app locally, including Azure Functions API routes, authentication, and routing.&lt;/p&gt;

&lt;p&gt;If you're new to Azure Static Web Apps, I highly recommend checking out the &lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/overview"&gt;What is Azure Static Web Apps?&lt;/a&gt; documentation page.&lt;/p&gt;

&lt;p&gt;In this post, we'll learn how to get started debugging a static web app locally. Then we'll add an Azure Functions API route, and debug our backend + frontend together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites 🛠️
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Google Chrome installed, (we make use of the debugger)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Azure Static Web Apps extension for VS Code&lt;/strong&gt; - &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps"&gt;View on Marketplace&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Azure Static Web Apps CLI&lt;/strong&gt; 0.8.0 or greater - &lt;a href="https://github.com/Azure/static-web-apps-cli"&gt;View on GitHub&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g @azure/static-web-apps-cli@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started 🟢
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Clone one of these repositories, and open it up in VS Code.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Framework&lt;/th&gt;
&lt;th&gt;Repository&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Angular&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/staticwebdev/angular-basic"&gt;https://github.com/staticwebdev/angular-basic&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;React&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/staticwebdev/react-basic"&gt;https://github.com/staticwebdev/react-basic&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Svelte&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/staticwebdev/svelte-basic"&gt;https://github.com/staticwebdev/svelte-basic&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vue&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/staticwebdev/vue-basic"&gt;https://github.com/staticwebdev/vue-basic&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FjTTMXng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c00m73mzlt49kkwl4iiw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FjTTMXng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c00m73mzlt49kkwl4iiw.png" alt="Running npm install in VS Code" width="862" height="232"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Theme: &lt;a href="https://marketplace.visualstudio.com/items?itemName=wesbos.theme-cobalt2"&gt;Cobalt2 Theme Official by Wes Bos&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#run-and-debug"&gt;
  &lt;/a&gt;
  Run and debug 🐞
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V778ZYr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pahznac0f8cjqt8haifb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V778ZYr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pahznac0f8cjqt8haifb.png" alt="Show automatic debug configurations" width="858" height="396"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to the "Run and Debug" view.&lt;/li&gt;
&lt;li&gt;Click "Show all automatic debug configurations."&lt;/li&gt;
&lt;li&gt;In the dropdown, select "Azure Static Web Apps...".&lt;/li&gt;
&lt;li&gt;Select the app you want to debug.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will start the Azure Static Web Apps CLI in the VS Code terminal, and launch the Chrome debugger on &lt;code&gt;http://localhost:4280&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you can set and hit breakpoints in your frontend code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--59VAcCcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aprutdzi9opkbegdnf2p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--59VAcCcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aprutdzi9opkbegdnf2p.png" alt="Set breakpoints" width="880" height="907"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-an-api-route-%EF%B8%8F"&gt;
  &lt;/a&gt;
  Add an API route ⚡️
&lt;/h2&gt;

&lt;p&gt;Azure Static Web Apps has integrated API support provided by Azure Functions. In order to add and debug an API route, we must install some Azure Functions tools.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Azure Functions extension for VS Code&lt;/strong&gt; - &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions"&gt;Install from Marketplace&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Azure Functions Core Tools&lt;/strong&gt; - &lt;a href="https://github.com/Azure/azure-functions-core-tools"&gt;View on GitHub&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -g azure-functions-core-tools@3 --unsafe-perm true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you can add an API route to your app by clicking the "Add HTTP Function..." button in the Azure Static Web Apps view.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GlmqIx9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4d3gk3mmgla9xbkbyycp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GlmqIx9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4d3gk3mmgla9xbkbyycp.png" alt="Add HTTP Function" width="733" height="592"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select a language (I chose JavaScript), then name your Function (I put "hello"). And then an API route will be created for you that you can make requests to at &lt;code&gt;/api/hello&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X5Xo87oP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emd9wo9q26m51aboyydd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X5Xo87oP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emd9wo9q26m51aboyydd.png" alt="API route" width="880" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debug-app-with-functions-api"&gt;
  &lt;/a&gt;
  Debug app with Functions API ✨
&lt;/h2&gt;

&lt;p&gt;We can debug our API routes and our frontend app simultaneously in VS Code.&lt;/p&gt;

&lt;p&gt;Select the "SWA: Run ..." debug configuration and click the green "Run and debug" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R74Sc6u_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/234k0e1p9jzmtyeeli56.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R74Sc6u_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/234k0e1p9jzmtyeeli56.png" alt="Run and debug" width="788" height="542"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;VS Code will now run your Functions API routes and your frontend. When it's all started, a Chrome window will open at &lt;code&gt;http://localhost:4280&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Set a breakpoint in your Function endpoint.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AnR6VqgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89kolpnqbsrqysh661ep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AnR6VqgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89kolpnqbsrqysh661ep.png" alt="Function endpoint breakpoint" width="880" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;http://localhost:4280/api/hello&lt;/code&gt; in the Chrome window to hit the breakpoint.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QzzD9C9n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2q8zt9j70wz4dr5h3mcm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QzzD9C9n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2q8zt9j70wz4dr5h3mcm.png" alt="Hitting an API breakpoint" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps 🏃‍♀️
&lt;/h2&gt;

&lt;p&gt;Now that you got your static web app running locally, you can &lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/getting-started?tabs=react"&gt;deploy your static web app to Azure for free&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#troubleshooting"&gt;
  &lt;/a&gt;
  Troubleshooting 🔍
&lt;/h2&gt;

&lt;p&gt;If you're having issues, please check out the &lt;a href="https://github.com/microsoft/vscode-azurestaticwebapps/wiki/Guide:-Debugging-a-Static-Web-App-with-VS-Code#troubleshooting-"&gt;troubleshooting section in our wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links-resources"&gt;
  &lt;/a&gt;
  Links + Resources 🔗
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/"&gt;Azure Static Web Apps documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/AzureStaticApps"&gt;@AzureStaticWebApps on Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/staticwebdev/awesome-azure-static-web-apps"&gt;Awesome Azure Static Web Apps&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/aaronpowell/create-swa-app"&gt;create-swa-app&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/Azure/static-web-apps-cli"&gt;Azure Static Web Apps CLI&lt;/a&gt;&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps"&gt;Azure Static Web Apps extension for VS Code&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Hello 👋 I'm Alex 🤠 and I'm a developer working on the Azure Static Web Apps extension for VS Code. I hope you enjoyed the post! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/alexweininger"&gt;GitHub @alexweininger&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/alexweininger"&gt;Twitter @alexweininger&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>azure</category>
      <category>jamstack</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Synchronous vs Asynchronous Callbacks</title>
      <author>Maxim Orlov</author>
      <pubDate>Tue, 16 Nov 2021 17:33:21 +0000</pubDate>
      <link>https://dev.to/maximization/synchronous-vs-asynchronous-callbacks-3li</link>
      <guid>https://dev.to/maximization/synchronous-vs-asynchronous-callbacks-3li</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published at &lt;a href="https://maximorlov.com/synchronous-vs-asynchronous-callbacks/"&gt;https://maximorlov.com/synchronous-vs-asynchronous-callbacks/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Asynchronous code in JavaScript can be confusing at best, and at worst, preventing you from landing your first job or implementing an urgent feature at work.&lt;/p&gt;

&lt;p&gt;Just when you started to build a mental model of your program, asynchronous code jumps right in and messes it all up leaving you in utter disillusion.&lt;/p&gt;

&lt;p&gt;To understand how asynchronous code works, it's important to know the difference between synchronous and asynchronous callbacks and recognise them in your code.&lt;/p&gt;

&lt;p&gt;Before we dive in, let's first do a refresher on callback functions. If you already know what callback functions are, feel free to skip to the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-callback-function"&gt;
  &lt;/a&gt;
  What is a callback function?
&lt;/h2&gt;

&lt;p&gt;A callback function is a function passed as an &lt;em&gt;argument&lt;/em&gt; to another function in order to be called from &lt;em&gt;inside&lt;/em&gt; that function. This may sound confusing, so let's look at some code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printToConsole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Maxim&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;printToConsole&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Hello Maxim!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the function &lt;code&gt;printToConsole&lt;/code&gt; is passed as an argument to &lt;code&gt;getGreeting&lt;/code&gt;. Inside &lt;code&gt;getGreeting&lt;/code&gt;, we call &lt;code&gt;printToConsole&lt;/code&gt; with a string which is then printed to the console. Because we pass &lt;code&gt;printToConsole&lt;/code&gt; to a function to be called from inside that function, we can say that &lt;code&gt;printToConsole&lt;/code&gt; is a callback function.&lt;/p&gt;

&lt;p&gt;In practice, callback functions are often initialised anonymously and inlined in the function call. The following example is equivalent to the one above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Maxim&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// Hello Maxim!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The difference is that &lt;code&gt;printToConsole&lt;/code&gt; is now an anonymous callback function. Nonetheless, it's still a callback function!&lt;/p&gt;

&lt;p&gt;Here's another example you may be familiar with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;multiplyByTwo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [2, 4, 6, 8]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;multiplyByTwo&lt;/code&gt; is a callback function because we pass it as an argument to &lt;code&gt;.map()&lt;/code&gt;, which then runs the function with each item in the array.&lt;/p&gt;

&lt;p&gt;Similar to the previous example, we can write &lt;code&gt;multiplyByTwo&lt;/code&gt; inline as an anonymous callback function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [2, 4, 6, 8]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#order-of-execution"&gt;
  &lt;/a&gt;
  Order of execution
&lt;/h2&gt;

&lt;p&gt;All the callbacks we've seen so far are synchronous. Before we discuss asynchronous callbacks, let's have a look at the program's order of execution first.&lt;/p&gt;

&lt;p&gt;In what order do you think the following console.log statements are printed?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;before getGreeting&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;getGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Maxim&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If your answer was:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;start
before getGreeting
Hello Maxim!
end
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You got it right! The program starts at the top and executes each line sequentially as it goes to the bottom. We do a mental jump up and down when we call &lt;code&gt;getGreeting&lt;/code&gt; to go to the function's definition and then back to execute the callback function, but otherwise, nothing weird is happening.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asynchronous-callbacks"&gt;
  &lt;/a&gt;
  Asynchronous Callbacks
&lt;/h2&gt;

&lt;p&gt;Now let's have a look at asynchronous callbacks by converting &lt;code&gt;getGreeting&lt;/code&gt; to run asynchronously:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getGreetingAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;before getGreetingAsync&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;getGreetingAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Maxim&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In what order do you think the console.log statements are printed this time around?&lt;/p&gt;

&lt;p&gt;Go ahead, I'll wait.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;/p&gt;

&lt;p&gt;The right answer is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;start
before getGreetingAsync
end
Hello Maxim!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the addition of setTimeout, we're &lt;em&gt;deferring&lt;/em&gt; execution of the callback function to a later point in time. The callback function will run only &lt;em&gt;after&lt;/em&gt; the program has finished executing the code from top to bottom (even if the delay is 0ms).&lt;/p&gt;

&lt;p&gt;The main difference between synchronous and asynchronous callbacks is that &lt;strong&gt;synchronous callbacks are executed immediately, whereas the execution of asynchronous callbacks is deferred to a later point in time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This may be confusing at first, especially if you're coming from synchronous languages like PHP, Ruby or Java. To understand what's going on in the background, you'll have to learn &lt;a href="https://maximorlov.com/javascript-event-loop-talk/"&gt;how the event loop works&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-you-tell-if-a-callback-is-synchronous-or-asynchronous"&gt;
  &lt;/a&gt;
  How can you tell if a callback is synchronous or asynchronous?
&lt;/h2&gt;

&lt;p&gt;Whether a callback is executed synchronously or asynchronously depends on the function which calls it. If the function is asynchronous, then the callback is asynchronous too.&lt;/p&gt;

&lt;p&gt;Asynchronous functions are usually the ones that do a network request, wait for an I/O operation (like a mouse click), interact with the filesystem or send a query to a database. What these functions have in common is that they interact with something &lt;em&gt;outside&lt;/em&gt; the current program and your application is left &lt;em&gt;waiting&lt;/em&gt; until a response comes back.&lt;/p&gt;

&lt;p&gt;Conversely, synchronous callbacks are executed within the program's current context and there's no interaction with the outside world. You'll find synchronous callbacks in functional programming where, for example, the callback is called for each item in a collection (eg. &lt;code&gt;.filter()&lt;/code&gt;, &lt;code&gt;.map()&lt;/code&gt;, &lt;code&gt;.reduce()&lt;/code&gt; etc.). Most prototype methods in the JavaScript language are synchronous.&lt;/p&gt;

&lt;p&gt;If you're not sure whether a callback function is executed synchronously or asynchronously, you can add console.log statements inside and after the callback and see which one is printed first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-how-to-write-asynchronous-code-in-nodejs"&gt;
  &lt;/a&gt;
  Learn how to write asynchronous code in Node.js
&lt;/h2&gt;

&lt;p&gt;Write clean and easy to read asynchronous code in Node.js with this &lt;strong&gt;FREE 5-day email course&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Visual explanations will teach you how to decompose asynchronous code into individual parts and put them back together using a modern async/await approach. Moreover, with &lt;strong&gt;30+ real-world exercises&lt;/strong&gt; you'll transform knowledge into a practical skill that will make you a better developer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EW5SxxJi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic1d6os14bjflg46fuyw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EW5SxxJi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic1d6os14bjflg46fuyw.png" alt="Refactoring Callbacks, a FREE 5-day email course. 30+ real-world exercises, a visual guide and 5 days, 5 lessons." width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://maximorlov.com/refactoring-callbacks-course/"&gt;&lt;strong&gt;Get Lesson 1 now&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>23 Must-Know Linux Commands for Beginners(in 2021)</title>
      <author>RaftLabs - Product Development Agency</author>
      <pubDate>Tue, 16 Nov 2021 16:47:55 +0000</pubDate>
      <link>https://dev.to/raftlabs/23-must-know-linux-commands-for-beginnersin-2021-58ad</link>
      <guid>https://dev.to/raftlabs/23-must-know-linux-commands-for-beginnersin-2021-58ad</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V781dqVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oxngpwk7oyo4vct6t60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V781dqVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oxngpwk7oyo4vct6t60.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Linux is an entire family of open-source Unix operating systems that are based on the Linux Kernel. This includes all the most popular Linux-based systems like Ubuntu, Fedora, Mint, Debian, etc. More accurately, they're called distributions or distros. Linux seems a bit hard to use and understand for people coming from Windows or macOS, and most people give up on using Linux because they are unaware of the commands and shortcuts that Linux provides. Knowing the useful commands and their proper usage can significantly speed up your work on Linux than if you were using other operating systems.&lt;/p&gt;

&lt;p&gt;In this article, we will look at some frequently used Linux commands.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-ls%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. ls command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;ls&lt;/code&gt; is the list command in Linux. It will show the complete list or content of your directory. You can pair it with several options to get different results. Ls with no option list files and directories in a raw format where we won't be able to view details like file types, size, modified date and time, permission and links, etc. Some of the most common options are listed below:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls -l&lt;/code&gt;: shows file or directory, size, modified date and time, file or folder name and owner of the file, and its permission.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls -a&lt;/code&gt;: List all files, including hidden files starting with '. '.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls -lh&lt;/code&gt;: List files in human-readable format.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls -r&lt;/code&gt;: List files in reverse order.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls -R&lt;/code&gt;: Recursively list sub-directories.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-cd%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. cd command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; stands for change directory. You can use the cd command to navigate through Linux files and directories. It requires either the full path or the directory's name, depending on the current working directory that you're in.&lt;/p&gt;

&lt;p&gt;If you want to go to a subdirectory of the directory you are in, type cd followed by the directory name.&lt;/p&gt;

&lt;p&gt;If you want to go to a directory outside the current directory, for example, from /home/user/downloads to /home/user/photos, you have to give the absolute path of the directory like 'cd /home/user/photos. There are also some shortcuts to navigate quickly:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd ..&lt;/code&gt; to move one directory up.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; to go straight to the home folder.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd-&lt;/code&gt; to move to your previous directory&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-pwd%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. PWD command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;PWD&lt;/code&gt; command is used to find the path of the current directory. It will return the absolute path, which contains all the directories from the root that starts with a forward slash. An example of an absolute path is &lt;code&gt;/home/user&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-rmdir%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. rmdir command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;rmdir&lt;/code&gt; command allows you to delete empty directories.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-rm%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. rm command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;rm&lt;/code&gt; command allows you to delete directories with contents inside them. The options that can be used with rm are:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rm -i&lt;/code&gt;: will ask before deleting each file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rm -r&lt;/code&gt;: will recursively delete a directory and all of its contents.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rm -f&lt;/code&gt;: will forcibly delete files without asking.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-touch%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. touch command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;touch&lt;/code&gt; command allows you to create a new blank file with the given file name.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;touch hello.js&lt;/code&gt; will create a file called hello with the extension .js in your current directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;touch home/user/documents/hello.html&lt;/code&gt; will create the given HTML file in the Documents folder.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-cp%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. cp command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;cp&lt;/code&gt; command lets you copy files from your current directory to your desired directory.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cp hello.js&lt;/code&gt; /home/user/documents will copy the hello.js from the current directory to the documents folder.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#8-mv%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;8. mv command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;mv&lt;/code&gt; command is used to move files the same way the &lt;code&gt;cp&lt;/code&gt; command is used to copy files. But it can also be used to rename files.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;p&gt;To move files: &lt;code&gt;mv hello.js /home/user/documents&lt;/code&gt; will move the hello.js from the current directory to the documents folder.&lt;/p&gt;

&lt;p&gt;To rename files, type: &lt;code&gt;mv oldname.ext newname.ext&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#9-cat%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;9. cat command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;cat&lt;/code&gt; is one of the most frequently used commands in Linux. Cat is short for concatenate. Cat is used to concatenate and print the contents of files. Cat command allows us to create single or multiple files, view contents of a file, concatenate files, and redirect output in terminal or files.&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;p&gt;Display contents of a file&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cat /etc/passwd&lt;/code&gt;: will show the contents of passwd.&lt;/p&gt;

&lt;p&gt;View contents of multiple files in terminal&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cat test test1&lt;/code&gt;: will show the contents of the test and test1 in the terminal.&lt;/p&gt;

&lt;p&gt;Create a file&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cat &amp;gt;test2&lt;/code&gt;: will create a file test2. It then awaits input from the user. Write in the desired text and press CTRL+D to exit.&lt;/p&gt;

&lt;p&gt;cat with a redirection operator&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cat test &amp;gt; test1&lt;/code&gt;: We can redirect the standard output into a new file else existing file with '&amp;gt; '. Existing contents of the test1 will be overwritten by the contents of the test file.&lt;/p&gt;

&lt;p&gt;Appending standard output with a redirection operator&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cat test &amp;gt;&amp;gt; test1&lt;/code&gt;: Appends an existing file with '&amp;gt;&amp;gt; '. Here, the contents of the test file will be appended at the end of test1 file.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#10-locate%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;10. locate command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;locate&lt;/code&gt; command in Linux is used to find the files by name. An alternative to locating is find. But, the difference between both commands is that locate command is a background process and searches the file in the database whereas find command searches in the file system. The locate command is much faster than the find command.&lt;/p&gt;

&lt;p&gt;If you cannot find a file with locate command, then it means that your database is out of date, and you can update it with the "updatedb" command.&lt;/p&gt;

&lt;p&gt;Syntax: &lt;code&gt;locate [OPTION]... PATTERN...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;locate sample.txt&lt;/code&gt;: will search for sample.txt.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;locate "*.html" -n 20&lt;/code&gt;: will show 20 results for the searching of file ending with .html.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;locate -c [.txt]*&lt;/code&gt;: will count files ending with .txt and display the result.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;locate -i *SAMPLE.txt*&lt;/code&gt;: Ignore Case Sensitive Locate Outputs. This command is configured to process queries in a case-sensitive manner. It means SAMPLE.TXT will show a different result than sample.txt.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#11-find%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;11. find command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Similar to the locate command, using find also searches for files and directories. The difference is, you use the find command to locate files within a given directory.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  To find files in the current directory use, &lt;code&gt;find . -name notes.txt&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  To look for directories use, &lt;code&gt;/ -type d -name notes.txt&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#12-grep%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;12. grep command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;grep&lt;/code&gt; filter searches a file for a particular pattern of characters and displays all lines that contain that pattern.&lt;/p&gt;

&lt;p&gt;Syntax: &lt;code&gt;grep [options] pattern [files]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grep -i "Unix" file.txt&lt;/code&gt;: Performs a case-insensitive search in the given file and returns the lines that contain the word Unix.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grep -c "Unix" file.txt&lt;/code&gt;: Display the number of lines that match the word Unix.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grep -w "Unix" file.txt&lt;/code&gt;: By default, grep matches the given string/pattern even if it is found as a substring in a file. The -w option to grep makes it match only the whole words.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grep -n "Unix" file.txt&lt;/code&gt;: show the line number of the file with the line matched.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grep "^unix" file.txt&lt;/code&gt;: Matches the lines that start with the given string.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grep "os$" file.txt&lt;/code&gt;: Matches the lines that end with the given string.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#13-sudo%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;13. sudo command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;sudo&lt;/code&gt; stands for "superuser do!". If you prefix "sudo" with any Linux command, it will run that command with elevated privileges. Elevated privileges are required to perform specific administrative tasks.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#14-df%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;14. df command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;df&lt;/code&gt; command is used to get a report on the system's disk space usage. It is shown in percentage and in KBs. To get the report in MBs, type df -m.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#15-du%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;15. du command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;du&lt;/code&gt; command is used to find the disk usage of a file or a directory. The disk usage summary is shown in disk block numbers instead of KBs.&lt;/p&gt;

&lt;p&gt;To see it in bytes, KBs, and MBs, add the -h argument to the command.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#16-echo%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;16. echo command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;echo&lt;/code&gt; is a command that outputs the strings it is being passed as arguments. It is a command available in various operating system shells and typically used in shell scripts and batch files to output status text to the screen or a computer file, or as a source part of a pipeline.&lt;/p&gt;

&lt;p&gt;Syntax: &lt;code&gt;echo [option] [string]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Some options of echo command are mentioned below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Input a line of text and display on standard output:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;echo Hello User&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  echo value of a variable:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;x=5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo The value of x is $x&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Using option' \b ' --- backspace with backslash interpreter '-e 'removes all the spaces between.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;echo -e "This \bis \ba \btest \bmessage"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Output: &lt;code&gt;Thisisatestmessage&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Option' \t ' --- horizontal tab with backspace interpreter '-e 'has horizontal tab spaces. You can use \n or a combination of \n and \t in the same way where \n inserts a new line.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;echo -e "This \tis \ta \ttest \tmessage"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Output: &lt;code&gt;This is a test message&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#17-zip%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;17. zip command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;zip&lt;/code&gt; is used to compress files to reduce file size and is also used as a file package utility. The zip program puts one or more compressed files into a single zip archive, along with information about the files (name, path, date, time of last modification, protection, and check information to verify file integrity).&lt;/p&gt;

&lt;p&gt;Syntax: &lt;code&gt;zip [options] zipfile files list&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;p&gt;Creating a zip file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zip myfile.zip filename.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-d&lt;/code&gt; option removes the file from the zip archive.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zip --d filename.zip file.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-u&lt;/code&gt; option is used to update the specified list of files or add new files to the existing zip file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zip --u filename.zip file.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-r&lt;/code&gt; option is used to recursively zip the files in a directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zip --r filename.zip directory_name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-x&lt;/code&gt; option is used to exclude the specified files while creating the zip.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zip --x filename.zip file_to_be_excluded&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#18-help%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;18. help command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;command-name&amp;gt; --- help&lt;/code&gt; lists all the available commands in the terminal. You can use '-h' or '--help' (help has two hyphens here) option with any command to get help for that specific command.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#19-whatis%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;19. whatis command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;whatis &amp;lt;command-name&amp;gt;&lt;/code&gt; shows a single-line description for the given command.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#20-man%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;20. man command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;man &amp;lt;command-name&amp;gt;&lt;/code&gt; shows the manual page for the given command.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#21-tar%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;21. tar command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;tar&lt;/code&gt; stands for tape archive, which is used by many Linux/Unix system administrators to deal with tape drives backup. The tar is the most widely used command to create compressed archive files that can be moved easily from one disk to another or machine to machine.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tar [options] [archive-file] [file or directory to be archived]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Options:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-c&lt;/code&gt; : Creates Archive&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-x&lt;/code&gt; : Extract the archive&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-f&lt;/code&gt; : creates archive with given filename&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-t&lt;/code&gt; : displays or lists files in archived file&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-u&lt;/code&gt; : archives and adds to an existing archive file&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-v&lt;/code&gt; : Displays Verbose Information&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-A&lt;/code&gt; : Concatenates the archive files&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-z&lt;/code&gt; : zip, tells tar command that creates tar file using gzip&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-j&lt;/code&gt; : filter archive tar file using tbzip&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-W&lt;/code&gt; : Verify an archive file&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-r&lt;/code&gt; : update or add file or directory in already existed .tar file&lt;/p&gt;

&lt;p&gt;Usage:&lt;/p&gt;

&lt;p&gt;Creating an uncompressed tar Archive using option -cvf:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tar cvf file.tar *.c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will create a tar file called file.tar, the Archive of all .c files in the current directory.&lt;/p&gt;

&lt;p&gt;Extracting files from Archive using option -xvf :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tar xvf file.tar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;gzip compression on the tar Archive, using option -z:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tar cvzf file.tar.gz *.c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command creates a tar file called file.tar.gz, the Archive of .c files.&lt;/p&gt;

&lt;p&gt;Extracting a gzip tar Archive *.tar.gz using option -xvzf:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tar xvzf file.tar.gz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Creating compressed tar archive file in Linux using option -j:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tar cvfj file.tar.tbz example.CPP&lt;/code&gt; --- This command compresses and creates archive files less than the gzip size, but it takes more time to compress and decompress.&lt;/p&gt;

&lt;p&gt;Applying pipe to 'grep command' to find what we are looking for:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tar tvf file.tar | grep "text to find"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tar tvf file.tar | grep "filename.file extension"&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#22-gzip%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;22. gzip command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;gzip &amp;lt;filename&amp;gt;&lt;/code&gt; creates and extracts gzip archives. You can use its &lt;code&gt;gzip -d &amp;lt;filename&amp;gt;&lt;/code&gt; to extract gzip archives.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#23-unzip%C2%A0command"&gt;
  &lt;/a&gt;
  &lt;strong&gt;23. unzip command&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;unzip &amp;lt;archive-to-extract.zip&amp;gt;&lt;/code&gt; unzips a given zip archive. You can use &lt;code&gt;unzip -l &amp;lt;archive-to-extract.zip&amp;gt;&lt;/code&gt; to view the zip file's contents without extracting it. It's the same as you using an archive program to extract zip archives in GUI.\&lt;br&gt;
‍&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally posted at&lt;/em&gt; &lt;a href="https://raftlabs.co/development/23-must-know-linux-commands-for-beginners?utm_source=devto&amp;amp;utm_campaign=crosspost"&gt;&lt;em&gt;raftlabs.co&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>1 line of code: How to clean an Array
</title>
      <author>martin krause</author>
      <pubDate>Tue, 16 Nov 2021 16:29:26 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-clean-an-array-82a</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-clean-an-array-82a</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Returns an array without &lt;code&gt;empty strings&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; items.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-repository-amp-npm-package"&gt;
  &lt;/a&gt;
  The repository &amp;amp; npm package
&lt;/h2&gt;

&lt;p&gt;You can find the all the utility functions from this series at &lt;a href="https://github.com/martinkr/onelinecode"&gt;github.com/martinkr/onelinecode&lt;/a&gt;&lt;br&gt;
The library is also published to &lt;a href="https://www.npmjs.com/package/@onelinecode/onelinecode"&gt;npm as @onelinecode&lt;/a&gt; for your convenience.&lt;/p&gt;

&lt;p&gt;The code and the npm package will be updated every time I publish a new article.&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt; and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Netlify vs Cloudflare pages vs AWS Amplify</title>
      <author>chen4119</author>
      <pubDate>Tue, 16 Nov 2021 16:28:00 +0000</pubDate>
      <link>https://dev.to/chen4119/netlify-vs-cloudflare-pages-vs-aws-amplify-1n5k</link>
      <guid>https://dev.to/chen4119/netlify-vs-cloudflare-pages-vs-aws-amplify-1n5k</guid>
      <description>&lt;p&gt;I've been using &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; for a few years now to host my static website and really love how easy it was to get going.  Before Netlify, I hosted my static site on AWS S3 and that experience was painful.  You need to configure S3 for public and CORS access, add cloudfront, then set up a custom domain.  It's a lot of work just to deploy a static website so I'm very happy when I found Netlify.  I know &lt;a href="https://pages.cloudflare.com/"&gt;Cloudflare pages&lt;/a&gt; and &lt;a href="https://aws.amazon.com/amplify/"&gt;AWS Amplify&lt;/a&gt; also provide an easy way to host static websites and I finally had the chance to try them out.  Here are some thoughts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ease-of-use"&gt;
  &lt;/a&gt;
  Ease of use
&lt;/h2&gt;

&lt;p&gt;Both Netlify and Cloudflare made it really easy to get started and deploy a static website directly from your Github repo.  I'll say overall Netlify has a better user experience compare to Cloudflare because it's site is more intuitive and visually appealing whereas Cloudflare pages feel more barebone.  One major downside for Cloudflare is that there is no federated login.  You need to use an email and password to create a Cloudflare account whereas for Netlify, you can just use your Github credential.  In this day and age where we all have hundreds of online accounts, I'll prefer not to have another password for Cloudflare.&lt;/p&gt;

&lt;p&gt;AWS Amplify also kept it really easy to deploy a static website but it's hard to say AWS Amplify is just as easy as Netlify and Cloudflare pages simply because AWS Amplify is a small feature within the AWS beast.  For those who are already familiar with AWS, Amplify will feel pretty simple but new users will be overwhelmed by so much options.  In terms of user experience, it definitely still lags Netlify and Cloudflare.  Instead of filling out a simple form, Amplify makes you edit the config blob below.  Not a big deal but it definitely feel more like a roadblock than a welcome sign.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1w-7BiYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qe5f78xx9bayfxy2zzi7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1w-7BiYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qe5f78xx9bayfxy2zzi7.png" alt="AWS Amplify console screenshot" width="880" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-domain"&gt;
  &lt;/a&gt;
  Custom domain
&lt;/h2&gt;

&lt;p&gt;Both Netlify and AWS Amplify allow you to easily set up custom domains with free ssl certificate.  It works with any third party DNS provider, you just need to set up an ALIAS record for it to work.&lt;/p&gt;

&lt;p&gt;Cloudflare pages on the other hand will force you to use their DNS service in order to set up custom domain.  It won't work with third party DNS providers.  This might be a deal breaker for some people but at least Clouflare offers a free plan for their DNS service and it's really fast.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-time"&gt;
  &lt;/a&gt;
  Build time
&lt;/h2&gt;

&lt;p&gt;I generated my website with &lt;a href="https://sambal.dev"&gt;Sambal&lt;/a&gt; static site generator.  Below is a timing of how fast each platform took from the moment I commit to github to a deployed website.  AWS Amplify was the fastest while Cloudflare took the longest.  For some reason Cloudflare took close to 2 minutes just to initialize the build environment.  By that time, AWS Amplify had already deployed my website.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Build time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AWS Amplify&lt;/td&gt;
&lt;td&gt;1m 58s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Netlify&lt;/td&gt;
&lt;td&gt;2m 33s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cloudflare pages&lt;/td&gt;
&lt;td&gt;2m 53s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#ttfb-test"&gt;
  &lt;/a&gt;
  TTFB test
&lt;/h2&gt;

&lt;p&gt;To test how my static website perform across all regions around the world, I deployed the same website to all 3 platforms then use &lt;a href="https://speedvitals.com/ttfb-test"&gt;SpeedVitals TTFB test&lt;/a&gt; to test the time to first byte across 25 different locations without using custom domain.  I hit each platform with their native URL.  Here is the average latency for the 3 platforms across different regions.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Americas&lt;/th&gt;
&lt;th&gt;Europe&lt;/th&gt;
&lt;th&gt;Asia&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cloudflare pages&lt;/td&gt;
&lt;td&gt;146ms&lt;/td&gt;
&lt;td&gt;107ms&lt;/td&gt;
&lt;td&gt;148ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS Amplify&lt;/td&gt;
&lt;td&gt;142ms&lt;/td&gt;
&lt;td&gt;155ms&lt;/td&gt;
&lt;td&gt;294ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Netlify&lt;/td&gt;
&lt;td&gt;186ms&lt;/td&gt;
&lt;td&gt;67ms&lt;/td&gt;
&lt;td&gt;271ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Overall Cloudflare seem to have consistently good latency across different regions.  I ran the test multiple times for each platform.  The first test is always the worst because the CDN hasn't cached anything yet.  Subsequent tests always show better latency.  The average latencies reported above are measured after 3 - 4 tries to get a more accurate picture.  I noticed with Cloudflare, it took just 2 tries to get consistently good results and it felt like once your page is cached, the traffic is always fast.  AWS Amplify is somewhere in the middle, while Netlify results can vary quite a lot on different tries.  Sometimes it's fast and sometimes it felt like there's a cache miss somewhere so it went back to your origin server.&lt;/p&gt;

&lt;p&gt;To get a better picture, let's also look at the worst latency measured for the 3 platforms across different regions.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Americas&lt;/th&gt;
&lt;th&gt;Europe&lt;/th&gt;
&lt;th&gt;Asia&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cloudflare pages&lt;/td&gt;
&lt;td&gt;232ms&lt;/td&gt;
&lt;td&gt;181ms&lt;/td&gt;
&lt;td&gt;363ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS Amplify&lt;/td&gt;
&lt;td&gt;187ms&lt;/td&gt;
&lt;td&gt;184ms&lt;/td&gt;
&lt;td&gt;407ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Netlify&lt;/td&gt;
&lt;td&gt;744ms&lt;/td&gt;
&lt;td&gt;140ms&lt;/td&gt;
&lt;td&gt;1100ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;From this table, it's more obvious that Netlify latency can be pretty bad at some locations although it seems to be consistently great in Europe.  Every platform has the worst latency in Asia.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Netlify is a great platform for users who don't want to deal too much with technical stuff.  They just want to get their static website up and running.  It's easy to use and it offers pretty much anything you'll need to run a professional website.  Serverless backend, A/B testing, user authentication, forms, etc.  All these features with minimal coding.&lt;/p&gt;

&lt;p&gt;Cloudflare is a great platform for developers who don't mind jumping through a few hoops to get the best performance.  Cloudflare DNS is one of the best DNS provider available and Cloudflare pages has consistently low latency across the globe.  The UX feels barebone and site navigation can be confusing but for the speed you get, I'm sure you can suck it up.&lt;/p&gt;

&lt;p&gt;AWS Amplify is a great choice for existing AWS users or people who don't mind getting their hands dirty with AWS.  It has a fast build time and good latency across the globe.  It integrates with every other AWS offering so you don't have to worry about the limits of the platform as you might with Netlify or Cloudflare.  It has a steeper learning curve but the end result of being familiar with AWS is worth it.&lt;/p&gt;

</description>
      <category>netlify</category>
      <category>cloudflare</category>
      <category>webdev</category>
      <category>aws</category>
    </item>
    <item>
      <title>Django Basics: What is Django? </title>
      <author>Meet Gor</author>
      <pubDate>Tue, 16 Nov 2021 16:24:39 +0000</pubDate>
      <link>https://dev.to/mr_destructive/django-basics-what-is-django-3n65</link>
      <guid>https://dev.to/mr_destructive/django-basics-what-is-django-3n65</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Welcome to Django Basics series, in this series we'll explore the basics of the Django web framework. In this part, we'll understand what this web framework provides and what actually the back-end development consists of. We'll discuss where Django is used and why it is a great choice for beginners as well as experienced developers.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-django"&gt;
  &lt;/a&gt;
  What is Django?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Introduction"&gt;Django&lt;/a&gt; is a back-end web framework. It is based on python which means you have to write most of the project's code in Python. But Django comes with a lot of boilerplate code and thus it becomes quite quick in the development.  &lt;/p&gt;

&lt;p&gt;Django is an open-source framework, it is maintained by the Django Software Foundation Organization. You can view the source code at &lt;a href="https://github.com/django/django"&gt;GitHub&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backend-"&gt;
  &lt;/a&gt;
  BACKEND ?
&lt;/h3&gt;

&lt;p&gt;The term &lt;code&gt;backend&lt;/code&gt; refers to the section or an essential component in Web development, it consists of a &lt;code&gt;database&lt;/code&gt;, &lt;code&gt;API&lt;/code&gt;, and the &lt;code&gt;web server&lt;/code&gt; itself which allows the components to connect together. There might be other components like &lt;code&gt;load-balancers&lt;/code&gt;, &lt;code&gt;middleware&lt;/code&gt;, etc. But the core of web applications revolves around &lt;strong&gt;Databases&lt;/strong&gt; and &lt;strong&gt;API&lt;/strong&gt;.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h4&gt;

&lt;p&gt;A database is a technology or tool that lets you store the data which might be used for serving the actual application, that might be a frontend app, standalone API, etc. The data you want to store might be generally the User Accounts, Content of the App, basically any some form of data(there are exceptions here, you can't directly store media files in DB). The Database allows to make content management and the application dynamic and can be personalized. We have certain types of databases like SQL(relational), NO-SQL, Cloud, Network, etc. The tools of these database management are PostgreSQL, MySQL, MongoDB, HarperDB,etc. These tools allow you to manage your database in a convenient way.   &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#api"&gt;
  &lt;/a&gt;
  API
&lt;/h4&gt;

&lt;p&gt;An API or Application Programming Interface is a way for any frontend app, outside the system to access the database. API allows you to query to the database with GET, POST, DELETE, PUT, etc kinds of operation/requests to the database via the webserver. In API, we have endpoints or (URL routes) at which a particular designated operation can be performed. In APIs, we currently have four primary architectures namely RESTful (quite famous and well established), SOAP, gRPC, and GRAPHQL (new and increasing in popularity).  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#framework"&gt;
  &lt;/a&gt;
  Framework?
&lt;/h3&gt;

&lt;p&gt;A framework is a tool to do a certain task efficiently and avoid some repetitive patterns by abstracting many layers in developing it. Django is a high-level framework which means it abstracts certain processes in making the application. It is ideal for beginners to get up and running with a professional full-stack web application(though it requires some learning). &lt;/p&gt;

&lt;p&gt;Django makes the project ideal for experienced as well as beginner web developers. The community and the ecosystem of Python are quite amazing as well as there are a ton of resources to get you through your projects.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BqP3naP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/dj-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BqP3naP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/dj-1.png" alt="Django overview" width="880" height="625"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The above is a high-level view of how Django project development works, the application might be not only one but several other standalone applications working together to make one project in Django. There is a lot of abstraction in Django like the Middleware, Session Management, Security, etc. This should be a good overview of the development map in Django. &lt;/p&gt;

&lt;p&gt;Django follows an MVT architecture. Architecture is a standard in developing an application/project for the ease of the workflow and making it an even experience.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3I2PyBp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635079576954/WcjcokoiX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3I2PyBp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635079576954/WcjcokoiX.png" alt="Django MVT" width="880" height="624"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The above diagram depicts the architecture in Django, the components in the Django server include the Model, View, and Template. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#model"&gt;
  &lt;/a&gt;
  Model
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Model&lt;/code&gt; refers to the design of the database or a blueprint of the data that is bound with the application in the project.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#view"&gt;
  &lt;/a&gt;
  View
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;View&lt;/code&gt; is the part to control the way the data should be presented or the how response should be given back to a request from the server(client) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#template"&gt;
  &lt;/a&gt;
  Template
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Template&lt;/code&gt; is the markup or the form of document that is to be rendered on the client-side and these are controlled by the views and parsed with the data from the models. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-would-you-need-it"&gt;
  &lt;/a&gt;
  Why would you need it?
&lt;/h2&gt;

&lt;p&gt;As a developer you would find a need to host your projects on the internet, for that learning and deploying a web server from the ground up might be quite complex and time-consuming, Django solves this problem quite well. Not only it is easy but even scalable at a production level, making it quite a robust choice for anyone. And as a bonus thing, it is based on Python, which makes it even easier to write code for people staying at an abstracted perspective in programming. Python has by far the richest sets of libraries and utilities for any domain, this integration with Django is a deadly combination.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#batteries-included"&gt;
  &lt;/a&gt;
  Batteries included?
&lt;/h3&gt;

&lt;p&gt;Django solves many problems by abstracting away many things like managing the database, rendering dynamic templates(HTML), properly structuring and serving static and media files, well-organized project structure, and many other things. You just have to get the actual thing done i.e. the server logic(or how to design the API/Database models). On top of that, Django has a built-in fully fledged Admin section and a User model. An Admin section is where you can manage the project in a better way without touching the code. It also has certain applications/libraries to make the development of APIs, integrating various databases, forms for posting data, support for Bootstrap a lot easier. It's like a &lt;code&gt;plug and play&lt;/code&gt; kind of thing for the development of web applications.  &lt;/p&gt;

&lt;p&gt;Hence, it is rightly called the &lt;code&gt;Batteries Included&lt;/code&gt; web framework. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#key-features-of-django"&gt;
  &lt;/a&gt;
  Key features of Django
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ease in integrating a database &lt;/li&gt;
&lt;li&gt;Flawless Django Template Engine &lt;/li&gt;
&lt;li&gt;Easy to scale up/down &lt;/li&gt;
&lt;li&gt;Python libraries support out of the box &lt;/li&gt;
&lt;li&gt;Amazing Documentation / Helpful community &lt;/li&gt;
&lt;li&gt;Developing Production-ready projects quickly &lt;/li&gt;
&lt;li&gt;Baked in support for testing, APIs, cookies, sessions, etc &lt;/li&gt;
&lt;li&gt;Optimized for security, SEO, and DRY(don't repeat yourself) principles &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#applications-built-with-django"&gt;
  &lt;/a&gt;
  Applications built with Django
&lt;/h2&gt;

&lt;p&gt;Django is used in quite a famous application that you might be using daily.  &lt;/p&gt;

&lt;p&gt;Django along with Python powers the top applications on the internet like: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;YouTube &lt;/li&gt;
&lt;li&gt;Instagram &lt;/li&gt;
&lt;li&gt;Spotify &lt;/li&gt;
&lt;li&gt;Disqus &lt;/li&gt;
&lt;li&gt;Dropbox &lt;/li&gt;
&lt;li&gt;Pinterest &lt;/li&gt;
&lt;li&gt;National Geographic &lt;/li&gt;
&lt;li&gt;Mozilla &lt;/li&gt;
&lt;li&gt;BitBucket &lt;/li&gt;
&lt;li&gt;Discovery Network &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You have to say, it is powerful and has firm grounds in the tech industry. It's highly unlikely that Django will be overtaken by another framework at least some years from now.   &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Django is a tool to build web applications fast and in a scalable and Pythonic way &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-will-this-series-cover"&gt;
  &lt;/a&gt;
  What will this series cover?
&lt;/h2&gt;

&lt;p&gt;Learning Django from the ground up. We will learn the setup, folder structure, architecture of Django, What are apps, views, URLs, models, serializers, static and template files, and there is a ton of stuff to be covered.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-to-learn-django"&gt;
  &lt;/a&gt;
  Resources to learn Django
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.djangoproject.com/start/"&gt;Django Official Docs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/c/veryacademy/playlists?view=50&amp;amp;sort=dd&amp;amp;shelf_id=2"&gt;Very Academy - Django Playlist&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=HHx3tTQWUx0&amp;amp;list=PLCC34OHNcOtqW9BJmgQPPzUpJ8hl49AGy"&gt;Codemy.com - Django&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=UmljXZIypDc&amp;amp;list=PL-osiE80TeTtoQCKZ03TU5fNfx2UY6U4p"&gt;Corey Schafer&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=SIyxjRJ8VNY&amp;amp;list=PLsyeobzWxl7r2ukVgTqIQcl-1T0C2mzau"&gt;Telusko&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;From this article, we were able to understand the Django framework, what is it, and why it should be used on a high level. Further, we explored the web application(backend) components which are targeted by Django for ease of developing applications. We also saw the baseline architecture that Django uses to make projects.  &lt;/p&gt;

&lt;p&gt;In the next section, we'll start the actual coding in Django, firstly how to set up the environment and understanding the folder structure, and so on. So I hoped you enjoyed the article. Thank you for reading. Happy Coding :) &lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
