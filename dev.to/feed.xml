<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to add redux-persist in your react/react-native application</title>
      <author>Ahsan Ihsan</author>
      <pubDate>Thu, 07 Oct 2021 22:36:33 +0000</pubDate>
      <link>https://dev.to/ahsanihsan/how-to-add-redux-persist-in-your-react-react-native-application-4i4f</link>
      <guid>https://dev.to/ahsanihsan/how-to-add-redux-persist-in-your-react-react-native-application-4i4f</guid>
      <description>&lt;p&gt;After adding redux in our applications. We mostly come accross the problem of data being wiped once the browser tab is refreshed. &lt;/p&gt;

&lt;p&gt;To our help we have &lt;a href="https://www.npmjs.com/package/redux-persist"&gt;redux-persist&lt;/a&gt; library which helps us persisting the data of our store even after the web page is closed or refreshed.&lt;/p&gt;

&lt;p&gt;It's very simple to add &lt;code&gt;redux-persist&lt;/code&gt; in our application that uses &lt;code&gt;redux&lt;/code&gt; already.&lt;/p&gt;

&lt;p&gt;Once you setup your redux this is how typically you configure redux store inside your application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";

// Redux Imports
import { Provider } from "react-redux";
import Reducer from "./Redux/Reducer";
import { createStore } from "redux";

const store = createStore(Reducer);

function App() {
  return (
    &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;/Provider&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Step 1: Install Redux Persist &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can install &lt;code&gt;redux-persist&lt;/code&gt; using &lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn install redux-persist&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install redux-persist&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After that we need to do the following imports from &lt;code&gt;redux-persist&lt;/code&gt; library that you just installed.&lt;br&gt;
You have to import them inside the component where you are initialising your redux store.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { persistStore, persistReducer } from "redux-persist";
import { PersistGate } from "redux-persist/integration/react";
import storage from "redux-persist/lib/storage";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that we have to define the configuration for redux persist store&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const persistConfig = {
  key: "root",
  storage,
};

const persistedReducer = persistReducer(persistConfig, Reducer);

const store = createStore(persistedReducer);
let persistor = persistStore(store);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After adding the above code snippet all you need to do is, to wrap your component inside &lt;code&gt;PersistGate&lt;/code&gt; which helps in delaying the rendering of our app's UI until your persisted state has been retrieved and saved to redux.&lt;/p&gt;

&lt;p&gt;Our final code for &lt;code&gt;App.js&lt;/code&gt; or any file where you are initialising your store is gonna look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";

// Redux Imports
import { Provider } from "react-redux";
import Reducer from "./Redux/Reducer";
import { createStore } from "redux";

// Components import
import ListTodos from "./Screen/ListTodos";

// Redux Persist
import { persistStore, persistReducer } from "redux-persist";
import { PersistGate } from "redux-persist/integration/react";
import storage from "redux-persist/lib/storage";

const persistConfig = {
  key: "root",
  storage,
};

const persistedReducer = persistReducer(persistConfig, Reducer);

const store = createStore(persistedReducer);
let persistor = persistStore(store);

function App() {
  return (
    &amp;lt;Provider store={store}&amp;gt;
      &amp;lt;PersistGate loading={null} persistor={persistor}&amp;gt;
        &amp;lt;ListTodos /&amp;gt;
      &amp;lt;/PersistGate&amp;gt;
    &amp;lt;/Provider&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And voila, you have your redux-persist settled in your application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ahsanihsan/redux-tutorial"&gt;Here's&lt;/a&gt; is a working Todo Application that uses redux persist to store Todos.&lt;/p&gt;

&lt;p&gt;For further explanation we can talk about what those different methods are doing in above code snippets.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;persistStore()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;persistStore method accept a store parameter which is going to be the store that it's gonna persist. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;persistReducer()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In persistReducer method you have to pass the config of persist and the reducer that you created so it helps the package to load the data and initialise the actual redux store.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PersistGate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PersistGate component accepts the persistStore() as a prop and it wraps our application code inside of it which helps in delaying the rendering of our app's UI until the persisted state has been retrieved and saved to redux. It also provides a &lt;code&gt;loading&lt;/code&gt; prop which can show any component such as an Activity Indicator to tell the user that the data is being loaded.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>javascript</category>
      <category>redux</category>
    </item>
    <item>
      <title>Learning Redux - Friendly for Beginners</title>
      <author>Ahsan Ihsan</author>
      <pubDate>Thu, 07 Oct 2021 22:01:40 +0000</pubDate>
      <link>https://dev.to/ahsanihsan/learning-redux-friendly-for-beginners-485c</link>
      <guid>https://dev.to/ahsanihsan/learning-redux-friendly-for-beginners-485c</guid>
      <description>&lt;p&gt;When I started learning Redux, there were very less resources on the web for beginners with less complication and more demonstration to show how Redux works and what is the easiest way to understand the flow of Redux. This article would help you understand both, the theoretical and the practical part of Redux.&lt;/p&gt;

&lt;p&gt;We will be using the following packages to look at how Redux work with ReactJS, it is same on React Native as well.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ReactJS app created with CRA&lt;/li&gt;
&lt;li&gt;React Redux&lt;/li&gt;
&lt;li&gt;React Router&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Theoretical Part&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are three main things that you need to understand about redux&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider store as a local storage but fast. The data fetching and storing is so fast and it's not asynchronous that's why redux is so fast and responsive.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Actions&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Actions are just like methods. Major portion of logic building is done in action and you can also use different middle-wares for async requests etc. After that, the action tells the reducer to do something with the data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reducer&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reducer is a function that can be called as a decision maker. Action tells the reducer what to do, after the decision reducer changed the state of the store and returns the new one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2cicplnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96xpgecrq0z3xgwyj0l5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2cicplnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96xpgecrq0z3xgwyj0l5.gif" alt="Data Flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking at the image above, you can somehow get the idea of how the data is being passed on to the component.&lt;/p&gt;

&lt;p&gt;We can start with the View which is the component you want the data in. You are going to call an action which will perform all the instruction you wrote in it.&lt;/p&gt;

&lt;p&gt;Later on, it will dispatch the action and the reducer inside the store will decide what to do with the action that was dispatched. Now the reducer executes the condition that satisfies the type of action that was dispatched before, and the reducer will then change the old state of the store and return the new one to the component via props.&lt;/p&gt;

&lt;p&gt;We will discuss how the things are working using the props in our practical portion using code snippets, so it becomes more clear!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Practical Part&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Practical Part&lt;/p&gt;

&lt;p&gt;For the practical portion we will be creating a very simple todo application like this &lt;a href="https://todosredux.herokuapp.com/"&gt;Link&lt;/a&gt; that will perform a CRUD operation on redux store. To start we will initialise the store first in our application which is created using Create React Application.&lt;/p&gt;

&lt;p&gt;You would have to install react-redux package in your project using npm or yarn.&lt;/p&gt;

&lt;p&gt;For yarn you can use&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add react-redux&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For npm you can use&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install react-redux&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We will also be using a middleware to persist the data in store which is optional. Upon refresh it will preserve the previous state of the redux store and your data will not go away!&lt;/p&gt;

&lt;p&gt;To setup the store we will use the App.js and following code snippet which is self explanatory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import "antd/dist/antd.css";
import "./index.css";

// Redux Imports
import { Provider } from "react-redux";
import Reducer from "./Redux/Reducer";
import { createStore } from "redux";

// Components import
import ListTodos from "./Screen/ListTodos";

const store = createStore(Reducer);

function App() {
  return (
    &amp;lt;Provider store={store}&amp;gt;
      &amp;lt;ListTodos /&amp;gt;
    &amp;lt;/Provider&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet you can see that we are using a &lt;code&gt;createStore()&lt;/code&gt; method from redux and passed on to the Provider component. Provider components makes the Redux store available to all the nested components inside the application. &lt;/p&gt;

&lt;p&gt;Inside the Provider component we can write the rest of the code for the application such as routing etc.&lt;/p&gt;

&lt;p&gt;Now we have 2 steps to complete the setup of redux&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reducers&lt;/li&gt;
&lt;li&gt;Actions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Reducer is where the structure of our entities will be defined. Following snippet shows how a reducer is defined:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {
  DELETE_A_TODO,
  ADD_A_TODO,
  MARK_TODO_STATUS,
} from "../../Constants/Todos";

const initialState = {
  todosList: [],
};

function todosReducer(state = initialState, action) {
  if (action.type === ADD_A_TODO) {
    return {
      ...state,
      todosList: [action.payload, ...state.todosList],
    };
  }
  if (action.type === MARK_TODO_STATUS) {
    let newObject = [...state.todosList];
    newObject[action.payload.index].status = action.payload.status;
    return {
      ...state,
      todosList: newObject,
    };
  }
  if (action.type === DELETE_A_TODO) {
    let newObject = [...state.todosList];
    let index = newObject.findIndex((item) =&amp;gt; {
      return item.key === action.payload;
    });
    newObject.splice(index, 1);
    return {
      ...state, 
      todosList: newObject,
    };
  }
  return state;
}

export default todosReducer;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see that the reducer is just a function with conditions inside, that will conclude what type of action is to be performed.&lt;/p&gt;

&lt;p&gt;But, if you look at the top. We have the initial value of the store which is just an array of &lt;code&gt;todosList: []&lt;/code&gt; where we will be storing our todos and performing CRUD operations on.&lt;/p&gt;

&lt;p&gt;That is all you need to focus on right now. Once we call different actions. We will look at how the dispatched action is being processed inside the reducer.&lt;/p&gt;

&lt;p&gt;Next up, we will be setting our actions. We will have only three actions in our small application.&lt;/p&gt;

&lt;p&gt;1) Add a todo&lt;br&gt;
2) Mark todo status (Done, Pending)&lt;br&gt;
3) Delete a todo&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {
  ADD_A_TODO,
  MARK_TODO_STATUS,
  DELETE_A_TODO,
} from "../Constants/Todos";

export const addATodo = (todo) =&amp;gt; {
  return {
    type: ADD_A_TODO,
    payload: todo,
  };
};

export const deleteATodo = (key) =&amp;gt; {
  return {
    type: DELETE_A_TODO,
    payload: key,
  };
};

export const markTodoStatus = (data) =&amp;gt; {
  return { type: MARK_TODO_STATUS, payload: data };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The actions above are methods that are returning plain objects. Once the action is dispatched by the component. It goes to the reducer with the type of reducer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is type of the action?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have declared constants of plain strings to keep the code clean. They are just unique strings so the reducer can identify what type of action is dispatched.&lt;/p&gt;

&lt;p&gt;Then, there is a payload key using which you can send any kind of data to the reducer. You can also process the data before sending it to the reducer inside the action. And you can also do the minor customisation of the data inside the reducer. We will be going with the latter one and process the data inside the reducer as they are just minor tasks that will be performed on the todoList inside the reducer state.&lt;/p&gt;

&lt;p&gt;We will move on to the main portion, as the setup for the Redux flow is complete. All you need to do is to dispatch the action and redux will do the magic for you!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dispatching actions inside a view&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before moving towards the code side. We have to discuss three methods&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;connect()()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Connect method is provide by react-redux package which allows you to connect any component with the redux tree. So you can have access to the state and dispatch method. You have to pass 2 objects mapDispatchToProps, mapStateToProps which we will talk about later in the next point. And we have to pass the Component that we are working on.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mapDispatchToProps&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;mapDispatchToProps is a plain object in which you pass the actions that you created. And connect will attach the dispatch method with those actions so you can dispatch the actions. The actions will then be accessible via props of the component you passed inside the connect method.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mapStateToProps&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;mapStateToProps is a method that receives a callback param using which you can access the current state of the entire store. And you can access only the keys of the store that you need inside the function and return it. Once done, those keys will be accessible inside the component via props.&lt;/p&gt;

&lt;p&gt;The snippet below shows how connect uses the component and uses mapDispatchToProps and mapStateToProps to map the state and actions with the component you are in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mapDispatchToProps = {
  markTodoStatus,
  addATodo,
  deleteATodo,
};

const mapStateToProps = (state) =&amp;gt; {
  return {
    todos: state.todos.todosList,
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(ListTodos);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;mapDispatchToProps&lt;/code&gt; is just accepting the actions that we created and sending inside the connect method which will be later accessible inside the component &lt;code&gt;ListTodos&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;mapStateToProps is just accepting the current state of the store and only getting the &lt;code&gt;todosList&lt;/code&gt; from the reducer &lt;code&gt;todos&lt;/code&gt; and returning that inside an object. Which will also be later accessible inside the component.&lt;/p&gt;

&lt;p&gt;Now, this is where the real magic happens. Wherever you are inside the hierarchy of your code. All you need to do is to connect any component with redux and you can utilise the data or change the data anywhere inside the application. That's how the state becomes so easy to manage inside a React app using Redux.&lt;/p&gt;

&lt;p&gt;Last but not least, we need to discuss how we are managing the data inside the reducer that is passed when any action is dispatched. We will follow the whole hierarchy of how the method is dispatched inside the component.&lt;/p&gt;

&lt;p&gt;After using &lt;code&gt;dispatchToProps&lt;/code&gt; parameter in &lt;code&gt;connect()()&lt;/code&gt; method. We will have access to any action that was passed inside &lt;code&gt;dispatchToProps&lt;/code&gt; object. Now you can access that particular action inside your component and call it using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;props.addATodo({
  key: props.todos.length,
  task: "Do Something",
  status: false,
  priority: "Important",
};)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the action is called using the above code snippet it goes to the reducer and looks at what type of action is performed. If you look at the actions we defined we have &lt;code&gt;addATodo&lt;/code&gt; action inside our &lt;code&gt;action.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const addATodo = (todo) =&amp;gt; {
  return {
    type: ADD_A_TODO,
    payload: todo,
  };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once it's dispatched the whole flow is shifted towards the reducer. Reducer then looks at what type of action was dispatched and it changes the state of redux store accordingly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (action.type === ADD_A_TODO) {
  return {
    ...state,
    todosList: [action.payload, ...state.todosList],
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we have wrote the instructions to append the payload sent by the action inside the previous state of the store.&lt;/p&gt;

&lt;p&gt;After that you will see that the data will be available in TodoList component. For testing you can place some &lt;code&gt;console.log()&lt;/code&gt; to see how the data is being passed and ends up inside the component. After that if you try to access that data in any component and use &lt;code&gt;mapStateToProps&lt;/code&gt; method. It will return you data even if that component is nested 10 times deep down the hierarchy!&lt;/p&gt;

&lt;p&gt;By this you will get the idea of how the data flow of a very simple application is being controlled. You can have a look at the code the GitHub repository link is here &lt;a href="https://github.com/ahsanihsan/redux-tutorial"&gt;Link&lt;/a&gt;. Fire up the repository code by running &lt;code&gt;yarn install&lt;/code&gt; or &lt;code&gt;npm install&lt;/code&gt; and see the application in action. You can use this concept to map it in your applications and make your state management easier.&lt;/p&gt;

&lt;p&gt;Last we will be looking at how we can implement the redux persist middleware to make sure once the browser screen is refreshed. The data is not lost and it stays in your application.&lt;/p&gt;

&lt;p&gt;Here is the link to &lt;a href="https://dev.to/ahsanihsan/how-to-add-redux-persist-in-your-react-react-native-application-4i4f"&gt;How to add redux-persist in your react/react-native application&lt;/a&gt;&lt;/p&gt;

</description>
      <category>redux</category>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>🧬 JSX at lowest level</title>
      <author>Andrew Luca</author>
      <pubDate>Thu, 07 Oct 2021 21:58:07 +0000</pubDate>
      <link>https://dev.to/iamandrewluca/jsx-at-lowest-level-371b</link>
      <guid>https://dev.to/iamandrewluca/jsx-at-lowest-level-371b</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;this post is a precursor for upcoming JSX posts&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So we all heard that JSX is a specific JavaScript syntax that is used by React to render components. Well, I would say JSX is just HTML in JavaScript. Or &lt;strong&gt;J&lt;/strong&gt;ava-&lt;strong&gt;S&lt;/strong&gt;cript-&lt;strong&gt;X&lt;/strong&gt;ml 😂 because HTML is a sibling of XML and children of &lt;a href="https://en.wikipedia.org/wiki/Standard_Generalized_Markup_Language"&gt;SGML&lt;/a&gt;. Or maybe is just &lt;strong&gt;J&lt;/strong&gt;ava-&lt;strong&gt;S&lt;/strong&gt;cript e-&lt;strong&gt;X&lt;/strong&gt;-tended.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When people ask me what is React? I tell them that React is just JavaScript functions that return HTML. And this is basically a template engine.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;/* ^^^^^^^^^^^^^^^^ */&lt;/span&gt;
&lt;span class="cm"&gt;/*   ^^^ JavaScript */&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"yay"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;lorem ipsum&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="cm"&gt;/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */&lt;/span&gt;
         &lt;span class="cm"&gt;/*       ^^^ HTML                   */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Draft: JSX Specification&lt;br&gt;
XML-LIKE SYNTAX EXTENSION TO ECMASCRIPT&lt;br&gt;
&lt;a href="http://facebook.github.io/jsx/"&gt;http://facebook.github.io/jsx/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, but HTML syntax is allowed only in the DOM, browser JavaScript does not support it. So it means we need to compile that to something that is supported by the browser.&lt;/p&gt;

&lt;p&gt;JSX is just some syntactic sugar that is compiled to valid JavaScript.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is JSX Pragma?&lt;br&gt;
&lt;a href="https://www.gatsbyjs.com/blog/2019-08-02-what-is-jsx-pragma/"&gt;https://www.gatsbyjs.com/blog/2019-08-02-what-is-jsx-pragma/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#pragma"&gt;https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#pragma&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the moment it compiles to something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lorem ipsum&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; syntax sugar is compiled to &lt;code&gt;React.createElement&lt;/code&gt;. That's why we need to have React imported at the top of the file. Otherwise we will get an runtime error that React cannot be found.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Production &lt;a href="https://github.com/facebook/react/blob/6ecad79ccf2c683cb21ac40dee5678358c7b6208/packages/react/src/ReactElement.js#L361"&gt;&lt;code&gt;createElement&lt;/code&gt;&lt;/a&gt; implementation&lt;br&gt;
Development &lt;a href="https://github.com/facebook/react/blob/6ecad79ccf2c683cb21ac40dee5678358c7b6208/packages/react/src/ReactElementValidator.js#L413"&gt;&lt;code&gt;createElement&lt;/code&gt;&lt;/a&gt; implementation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But that was until &lt;a href="https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html"&gt;React v17.0&lt;/a&gt;, &lt;a href="https://babeljs.io/blog/2020/03/16/7.9.0#a-new-jsx-transform-11154httpsgithubcombabelbabelpull11154"&gt;Babel v7.9&lt;/a&gt; and &lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-1/#react-17-jsx-factories"&gt;TypeScript v4.1&lt;/a&gt;, because after that they decided to extract JSX creation in a separate factory detached from React, and it is imported automatically 🚀 🚀 🚀 &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Production &lt;a href="https://github.com/facebook/react/blob/6ecad79ccf2c683cb21ac40dee5678358c7b6208/packages/react/src/jsx/ReactJSXElement.js#L210"&gt;&lt;code&gt;jsx&lt;/code&gt;&lt;/a&gt; implementation&lt;br&gt;
Development &lt;a href="https://github.com/facebook/react/blob/6ecad79ccf2c683cb21ac40dee5678358c7b6208/packages/react/src/jsx/ReactJSXElementValidator.js#L297"&gt;&lt;code&gt;jsx&lt;/code&gt;&lt;/a&gt; implementation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Are you still here? Let's go deeper 😀 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1wrgDc6j07hAlM7Jml/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1wrgDc6j07hAlM7Jml/giphy.gif" alt="man hard working"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So if everything is configured correctly, this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"yay"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;lorem ipsum&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will be compiled to something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;jsx&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react/jsx-runtime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;jsx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lorem ipsum&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In a future stable release (already), React will support a group of new functions for instantiating JSX elements as an alternative to the legacy general-purpose React.createElement function. This will allow optimizing them better in the future.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So we see that &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; syntax sugar is compiled to &lt;code&gt;jsx(...)&lt;/code&gt; at build time, but what happens with this call at runtime? Well, let's console.log this call.&lt;/p&gt;

&lt;p&gt;When React calls &lt;code&gt;Component&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;jsx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lorem ipsum&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will return:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="na"&gt;$typeof&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react.element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lorem ipsum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Actually there is an open &lt;a href="https://github.com/reactjs/rfcs/pull/107"&gt;RFC&lt;/a&gt; that it seems that in the end React team will decide to compile directly JSX down to this object that is returned.&lt;/p&gt;

&lt;p&gt;And for example if we want to render our &lt;code&gt;Compnent&lt;/code&gt; to the DOM. Having this call&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will be compiled to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="na"&gt;$typeof&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react.element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;rootElement&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the end our components are just some functions that return some objects that represent what we want rendered. So when we create our components, what we return is not what is rendered. ReactDOM calls our function components with some props, see this object definition that is returned and decides what and how to render on the screen. And JSX? JSX is just some syntax that is familiar to us because we know HTML.&lt;/p&gt;

&lt;p&gt;But now we know that till our component goes down to ReactDOM it passes through some steps and transformations.&lt;/p&gt;

&lt;p&gt;Also JSX is no more a React only thing, it's already used in a lot of projects, like vue, stenciljs, dom-chef, and many others...&lt;/p&gt;

&lt;p&gt;Have a feeling that noone is reading these articles 😀 &lt;br&gt;
Thanks reader if you are here! ♥️ &lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@alexkixa?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Alexandre Debiève&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/transistor?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>jsx</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>Making beautiful websites: Top 5 FREE icon resources</title>
      <author>martin krause</author>
      <pubDate>Thu, 07 Oct 2021 21:33:38 +0000</pubDate>
      <link>https://dev.to/martinkr/making-beautiful-websites-top-5-free-icon-resources-3apd</link>
      <guid>https://dev.to/martinkr/making-beautiful-websites-top-5-free-icon-resources-3apd</guid>
      <description>&lt;p&gt;Add high quality icon to your next website to enhance the design and the usability at the same time. &lt;/p&gt;

&lt;p&gt;Check out the top five resources for amazing icons ready to use - and make your next design stand out from the crowd.&lt;/p&gt;

&lt;p&gt;PS: Don't forget to check the &lt;em&gt;bonus link&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;PPS: All of these free icons have slightly different licenses (so please check them), but they are free to use in private and commercial work. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fontawesome"&gt;
  &lt;/a&gt;
  &lt;a href="https://fontawesome.com"&gt;Fontawesome&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;More than 7800 icons designed on a grid for pixel-perfect display ready to go makes fontawesome the web's most popular icon set and toolkit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#icomoon"&gt;
  &lt;/a&gt;
  &lt;a href="https://icomoon.io"&gt;IcoMoon&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;More than 5500 free vector fonts designed on a precise pixel grid. The IcoMoon app lets you build and use your own icon packs and download them as SVG, Polymer, PDF, XAML, CSH, icon font with ligatures, or good old PNG/CSS sprites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#material-icons"&gt;
  &lt;/a&gt;
  &lt;a href="https://mui.com/components/material-icons/"&gt;Material icons&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;More than 1700 icons created by google, each in five different themes and available as a React component. The to-go-solution if you are following the Material Design guidelines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#health-icons"&gt;
  &lt;/a&gt;
  &lt;a href="https://healthicons.org"&gt;Health icons&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;More than 1100 icons covering every aspect from blood type to health vehicles. Free and open source.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weather-icons"&gt;
  &lt;/a&gt;
  &lt;a href="https://erikflowers.github.io/weather-icons/"&gt;Weather icons&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;More than 220 weather themed icons, ready to be dropped right into your project as icon font. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-absurddesign"&gt;
  &lt;/a&gt;
  Bonus: &lt;a href="https://absurd.design"&gt;absurd.design&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Absurd illustrations for your projects. Beautiful drawings for an individual journey through your own imagination. Perfect for landing pages, quirky designs and your next website.&lt;br&gt;
Don't forget to check the &lt;a href="https://absurd.design/license.html"&gt;license&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Have fun and if you &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt; I can stay awake and write another post ;)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Fluree in Docker - A Single Instance</title>
      <author>Trey Botard</author>
      <pubDate>Thu, 07 Oct 2021 21:25:12 +0000</pubDate>
      <link>https://dev.to/fluree/fluree-in-docker-a-single-instance-15i8</link>
      <guid>https://dev.to/fluree/fluree-in-docker-a-single-instance-15i8</guid>
      <description>&lt;p&gt;Managing dependencies is a pain in the tuchus. Whether in the cloud, in a private data center, or just on your laptop, ensuring that you have the correct version of Java or Node or whatever other runtime works properly with both the application and the OS and all of the other dependencies can quickly turn into a nightmare. Docker solves this by bundling all of the dependencies together in a single image such that as long as the Docker runtime is deployed on the target infra, your app should function as desired. No muss, no fuss. 🥳&lt;/p&gt;

&lt;p&gt;Let's walk through the set up necessary to get your Fluree backend up and running. (Deployment to a public cloud will be out of scope for this post). This will be the first of a 3 part series on working with Fluree in Docker. The next one will be about setting up a Transactor Group!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;To begin with, you will need to have Docker on your machine. Please visit the &lt;a href="https://www.docker.com/get-started"&gt;Docker Getting Started Docs&lt;/a&gt; to get it set up, if you don't have it configured already.&lt;br&gt;
Once Docker is installed and running you will need to grab the &lt;a href="https://hub.docker.com/r/fluree/ledger"&gt;Fluree ledger image&lt;/a&gt; from DockerHub. The &lt;a href="https://docs.docker.com/engine/reference/run/"&gt;Docker CLI&lt;/a&gt; is a great tool for managing images on your machine. We will use the &lt;code&gt;docker pull&lt;/code&gt; command to grab the fluree/ledger image. Open a terminal and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;docker pull fluree/ledger:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the time of writing, this will pull the 1.0.0 beta 15 ledger image from Docker Hub, which is the most up-to-date version of Fluree. Once the Fluree ledger 1.0.0 is released, beta releases will go under their own tag. At any time, you can pull a specific release, if that is needed. You would simply define the image to pull using the tag like this: &lt;code&gt;fluree/ledger:1.0.0-beta14&lt;/code&gt;.&lt;br&gt;
You can see all of the release tags for Fluree in our &lt;a href="https://github.com/fluree/ledger/tags"&gt;Github Repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#set-up-and-run-the-container"&gt;
  &lt;/a&gt;
  Set up and run the container
&lt;/h2&gt;

&lt;p&gt;Ok, you have the image, now what?&lt;br&gt;
There are a couple of parameters which Fluree needs in order to start up correctly.&lt;br&gt;
These can be passed in when starting the container using the &lt;code&gt;docker run&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;You can simply start the image by calling &lt;code&gt;docker run fluree/ledger&lt;/code&gt;, but this will not expose the ports you will need to have in order to use the HTTP endpoints. Internally, Fluree listens on port 8090 for the HTTP calls, so this port will need to be mapped to an exposed, public port on the container. This can be done with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker run -p 8090:8090 fluree/ledger
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The ports correspond to ExternalPort:InternalPort. So, if you have 2 containers running, you will need to map the first of the two to a different port and leave the second number as-is because that is the port which Fluree is listening on. So for your second container, you would pass &lt;code&gt;-p 8091:8090&lt;/code&gt; or some other port number of your choosing.&lt;br&gt;
This spins up Fluree inside of your container, you will see the default configs print to the terminal and some messages about the consensus and state of the server. You can see the container and some metadata by running &lt;code&gt;docker ps&lt;/code&gt; in another terminal.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#naming-your-container"&gt;
  &lt;/a&gt;
  Naming your Container
&lt;/h3&gt;

&lt;p&gt;By default, Docker will assign your container both a CONTAINER_ID and a NAME, which you can see via the &lt;code&gt;docker ps&lt;/code&gt; command or in the Docker Desktop UI. The name will be 2 randomly assigned words, but you can name your container when you initialize it with the &lt;code&gt;docker run&lt;/code&gt; command. This is useful because you can then use that name to restart your container, if you stop it for whatever reason. (At this point stopping the container will lose any data, but in a bit, we will connect the container's file system to a local directoy for data persistence 🙌). You can do this by adding the &lt;code&gt;--name&lt;/code&gt; flag to the &lt;code&gt;run&lt;/code&gt; command, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker run -p 8090:8090 --name ledger1 fluree/ledger
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when you run &lt;code&gt;docker ps&lt;/code&gt;, the NAMES field will be &lt;code&gt;ledger1&lt;/code&gt; instead of a randomized pair of words.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One caveat to using the &lt;code&gt;--name&lt;/code&gt; flag is that if you stop your container or kill the terminal, that name will still be associated with that container. So you may need to run &lt;code&gt;docker rm ledger1&lt;/code&gt; to remove the container, if you want to &lt;code&gt;docker run&lt;/code&gt; with the name ledger1 again. (This applies to the randomly-assigned container names as well. They will exist on the machine until they are removed.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#interacting-with-your-instance"&gt;
  &lt;/a&gt;
  Interacting with your Instance
&lt;/h2&gt;

&lt;p&gt;Now that your ledger is up and running on your machine, there are a few ways for you to interact with the ledger.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#admin-ui"&gt;
  &lt;/a&gt;
  Admin UI
&lt;/h3&gt;

&lt;p&gt;Every instance of Fluree contains a small uitility for working with the ledgers, called the AdminUI. This is a browser based UI maintained by the Fluree team for working with instances of Fluree, whether as a single instance or in a transactor group. Once you have your Fluree instance ready with the HTTP port exposed, you can start the Admin UI by going to &lt;code&gt;http://localhost:[EXPOSED PORT]&lt;/code&gt; in your browser.&lt;br&gt;
If you used the command above to start up your instance, use 8090 for the &lt;code&gt;[EXPOSED PORT]&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We have a &lt;a href="https://youtube.com/c/fluree"&gt;YouTube&lt;/a&gt; video walkthrough of the AdminUI coming soon.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#http-calls"&gt;
  &lt;/a&gt;
  HTTP Calls
&lt;/h3&gt;

&lt;p&gt;Fluree also contains an HTTP client which exposes several &lt;a href="https://docs.flur.ee/api/1.0.0/downloaded-endpoints/downloaded-examples"&gt;HTTP endpoints&lt;/a&gt; for programmatically working with Fluree. Any of these endpoints can be hit by calling &lt;a href="http://localhost:8090/fdb/%5Bendpoint%5D"&gt;http://localhost:8090/fdb/[endpoint]&lt;/a&gt; or if the endpoint is ledger specific &lt;a href="http://localhost:8090/fdb/%5Bnetwork%5D/%5Bdb%5D%5Bendpoint%5D"&gt;http://localhost:8090/fdb/[network]/[db][endpoint]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At startup, there are no dbs on your instance, so it is recommended to start by using the &lt;a href="https://docs.flur.ee/api/1.0.0/downloaded-endpoints/downloaded-examples#new-db"&gt;/new-db&lt;/a&gt; endpoint first.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-a-persistent-volume"&gt;
  &lt;/a&gt;
  Create a Persistent Volume
&lt;/h2&gt;

&lt;p&gt;Fluree is a ledger and database. Both of these things require persisting data, which Docker does by default, but we'll want to configure it ourselves. To do that, we will need to do what is called mounting a volume to the container. This volume will live on after the container is spun down or goes offline for some reason in the place where we told it to be.&lt;/p&gt;

&lt;p&gt;Fluree already has a mechanism for writing to a file system. In fact, there is a customizable parameter which enables you to specify the path in the file system where you would like Fluree to write its data. You can see all of the &lt;a href="https://docs.flur.ee/docs/1.0.0/getting-started/fluree-anywhere#config-options"&gt;configuration options&lt;/a&gt; in the docs. The config we are interested in now is &lt;code&gt;fdb-storage-file-directory&lt;/code&gt;. By default, this is set to &lt;code&gt;/var/lib/fluree&lt;/code&gt; whether Fluree is being run in a container or in a JVM directly on a server. This means we can use some functionality in the Docker CLI to bind a directory in our local filesystem to this directory &lt;em&gt;inside&lt;/em&gt; the container. Docker run has a flag called --volume (aliased to -v) where you can specify the two directories to be bound together. It will look like this &lt;code&gt;-v "[local/path/to/dir]:[container/path/to/dir]"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For my example, I will tell my container to bind to &lt;code&gt;Users/treybotard/Projects/fluree-data/docker-blog/&lt;/code&gt;. To put this together with the &lt;code&gt;run&lt;/code&gt; command from above; your command should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker run -p 8090:8090 -v "/Users/treybotard/Projects/fluree-data/docker-blog/:/var/lib/fluree" fluree/ledger
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that I've run this command, I can open up the AdminUI, add a new ledger to my Fluree instance, and when I path to my docker-blog folder, I will see 2 folders, &lt;code&gt;group/&lt;/code&gt; and &lt;code&gt;ledger/&lt;/code&gt;. These are the folders Fluree uses to maintain raft logs (in &lt;code&gt;group/&lt;/code&gt;) and the encrypted indexes (in &lt;code&gt;ledger/&lt;/code&gt;). I'm not going to go into too much detail here about this structure. If you are interested in reading more about how Fluree maintains the &lt;a href="https://docs.flur.ee/guides/1.0.0/architecture/indexes"&gt;indexes&lt;/a&gt; or how Fluree interacts with the &lt;a href="https://docs.flur.ee/guides/1.0.0/infrastructure/file-system"&gt;file system&lt;/a&gt; you can read more in the docs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#private-key-file"&gt;
  &lt;/a&gt;
  Private key file
&lt;/h3&gt;

&lt;p&gt;When using the &lt;code&gt;--volume&lt;/code&gt; command to persist your data outside of the container, if a private key is not provided on start-up, Fluree will create a default private key. This key (whether provided or generated at startup) is used for a few access controls in developement mode. What this means is that if you want to reuse the same identity to access the persisted data, you will need to store your key outside of the container and pass it in when spinning up a fresh container. This can be done a few different ways, but for simplicity's sake, we'll just look at passing the private key into the container as an environment variable with &lt;code&gt;-e&lt;/code&gt;. Using an environment variable requires passing in &lt;code&gt;-e FDB_GROUP_PRIVATE_KEY=[PRIVATE_KEY]&lt;/code&gt; when starting the container.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now our command looks like this:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker run -p 8090:8090 -v "/Users/treybotard/Projects/fluree-data/Docker-blog/:/var/lib/fluree" --name ledger1 -e FDB_GROUP_PRIVATE_KEY=123456789 fluree/ledger:latest
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#docker-start-and-stop"&gt;
  &lt;/a&gt;
  Docker start and stop
&lt;/h2&gt;

&lt;p&gt;One very convient way to maintain my development environment is to use the &lt;code&gt;--name&lt;/code&gt; flag on a container with a volume mounted on it. What this enables is the &lt;code&gt;stop&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt; functionality in the Docker CLI. If i have a container specifically for a client project or a demo I am working on, I give it a meaningful name "docker-blog" and mount it to a volume stored next to the source code where I am working. I can then conveniently run &lt;code&gt;docker start docker-blog&lt;/code&gt; when I am ready to work on the container, it knows which ports to uses and can spin up the container exactly the way it was when I ran &lt;code&gt;docker stop docker-blog&lt;/code&gt; when I stopped working on it before.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-convenience-commands-and-flags"&gt;
  &lt;/a&gt;
  Other Convenience Commands and Flags
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-rm-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;--rm&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;If you are just testing out some some ledgers and are making some throw-away ledgers, I recommend adding the &lt;code&gt;--rm&lt;/code&gt; flag. Going to spin up a named container which you forgot to spin down, but getting an error that the container name already exists gets old quickly. This will remove the container when you either CTRL+C or send SIGINT to the container some other way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-d-endraw-and-raw-attach-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;-d&lt;/code&gt; and &lt;code&gt;attach&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;If you have been spun up a Fluree container before, you will have seen that the output is relatively chatty. One easy way to not have to see that in your terminal is to pass the &lt;code&gt;-d&lt;/code&gt; flag when starting up the container. This will run Fluree in a detached process and not print to the console. You can run &lt;code&gt;docker attach [container name]&lt;/code&gt; to reattach to the console and see the logs in your terminal. If you didn't give the container a name, you can look it up with &lt;code&gt;docker ps -a&lt;/code&gt; to see all the containers, including the ones which are stopped.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-docker-exec-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;docker exec&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Sometimes, it can be very useful to have a bash terminal inside a running container &lt;em&gt;while Fluree is running&lt;/em&gt;. You can use the &lt;code&gt;docker exec&lt;/code&gt; command to run a command inside a running container. One useful way which I use this is to run &lt;code&gt;docker exec -it [container name] /bin/bash&lt;/code&gt;. This opens a bash terminal in the working directory of my container where Fluree is running.&lt;/p&gt;

&lt;p&gt;It can also be useful to access the file system in a container with Fluree inside it, even when Fluree is not running. To startup a container without initializing Fluree, you need to use &lt;code&gt;docker run&lt;/code&gt;, but override the &lt;code&gt;--entrypoint&lt;/code&gt;. That looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;docker run -it --entrypoint=bash fluree/ledger
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will start up a container and give you a bash terminal with which to explore.&lt;/p&gt;

&lt;p&gt;With these commands, a large percentage of the functionality needed to work with Fluree locally can be achieved. Next week, we'll take a look at how to set up a Transactor Group (several Fluree instances networked together) in Docker using similar commands &lt;em&gt;and&lt;/em&gt; Docker compose!&lt;/p&gt;

</description>
      <category>docker</category>
      <category>fluree</category>
      <category>blockchain</category>
      <category>database</category>
    </item>
    <item>
      <title>How to add forms to Notion</title>
      <author>Y Ahn (Yawn)</author>
      <pubDate>Thu, 07 Oct 2021 21:22:33 +0000</pubDate>
      <link>https://dev.to/up_to_nonsense/how-to-add-forms-to-notion-38dg</link>
      <guid>https://dev.to/up_to_nonsense/how-to-add-forms-to-notion-38dg</guid>
      <description>&lt;p&gt;Hi Dev.To! This article will explain how to integrate forms with Notion with &lt;a href="https://commotion.page"&gt;Commotion.Page&lt;/a&gt;. With Commotion, you can create forms that you can embed in Notion pages and that save results into a Notion database, so you never need to leave the platform. Here's how you get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-a-notion-database"&gt;
  &lt;/a&gt;
  1. Create a Notion database
&lt;/h3&gt;

&lt;p&gt;This one is fairly straightforward. Go into your Notion workspace and create a Notion database like below.&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NPv0vnXU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://commotion.page/assets/createDatabase.59a785ea.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NPv0vnXU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://commotion.page/assets/createDatabase.59a785ea.gif" alt="Create a Database"&gt;&lt;/a&gt;&lt;br&gt;
  From here, you can add and remove columns to fit what you need. Each column can have a specified type, like a number, text, email, file, etc.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-create-a-commotion-account"&gt;
  &lt;/a&gt;
  2. Create a Commotion account
&lt;/h3&gt;

&lt;p&gt;Head over to &lt;a href="https://commotion.page"&gt;&lt;b&gt;Commotion.page&lt;/b&gt;&lt;/a&gt; and sign up for an account. It's a freemium service, so sign up and check it out for free for as long as you like and upgrade to Pro only when you want!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-connect-to-your-notion-account"&gt;
  &lt;/a&gt;
  3. Connect to your Notion account
&lt;/h3&gt;

&lt;p&gt;You'll need to connect your Notion account in order to create forms with Commotion. Don't worry, Notion has a super easy flow, so just press the connect button, select which pages you want to create forms for, and hit allow access.&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S8yuegTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://commotion.page/assets/connect.da10f557.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S8yuegTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://commotion.page/assets/connect.da10f557.gif" alt="Connect to Notion"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-select-a-notion-database"&gt;
  &lt;/a&gt;
  4. Select a Notion database
&lt;/h3&gt;

&lt;p&gt;Now that you've connect your Notion account, let's actually start creating forms. Head to the dashboard and hit the "Create a New Form" button, and we'll get started. Select which workspace and page that contains the database you want to save to. Then, hit "Create Form".&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LUm54R38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://commotion.page/assets/selectDatabase.68d7fbb9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUm54R38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://commotion.page/assets/selectDatabase.68d7fbb9.gif" alt="Select Notion Database"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-configure-this-new-form"&gt;
  &lt;/a&gt;
  5. Configure this new form
&lt;/h3&gt;

&lt;p&gt;This is where things get fun. If you're in a rush, you don't need to do anything, just hit "Create Form" and you're set. However, this is where Commotion starts to shine. Firstly, you can update the title of the form and add a description. Additionally, you can drag each question around to the order you want them to appear, and then do things like update the title of a question, the default value, the placeholder text, and any additional info, and even make questions required or just hidden from the form.&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xOWJG2ON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://commotion.page/assets/create.279b7d55.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xOWJG2ON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://commotion.page/assets/create.279b7d55.jpg" alt="Configure form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Those are the basics. If you upgrade to our Pro plan, you can do even more with Commotion. For the form, you can add page breaks that paginate the form, changing it from one long list of questions to several screens that users can go between. Very stylish. Also, you can add a password so only some people can see and fill out the form. Finally, our Pro plan supports file uploading, so if you're collecting resumes for example, you can create a simple resume drop form here.&lt;/p&gt;

&lt;p&gt;Another perk of our Pro plan is the functionality once someone does fill out a form. With the Pro plan, once someone completes the form, you can receive an email with that person's response and a confirmation email can be sent to the responder as well. Additionally, if you want to do more with the data, you can send it to a webhook of your choosing. Easy peasy.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#6-share-and-embed-the-new-form"&gt;
  &lt;/a&gt;
  6. Share and embed the new form
&lt;/h3&gt;

&lt;p&gt;Once you hit "Create Form", you'll be moved to a page that has a link you can embed. With this embed link, you can paste it into a Notion page.&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8eVdy2F_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://commotion.page/assets/embed.78f178d9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8eVdy2F_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://commotion.page/assets/embed.78f178d9.gif" alt="Embed Notion form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can embed this link anywhere. The most common way to do this is using an &lt;b&gt;iframe&lt;/b&gt; like so...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;iframe height="530" width="490" src="https://commotion.page/embed/..."&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;... where you adjust the height and width and src link. You can paste this in anywhere you write html.&lt;/p&gt;

&lt;p&gt;If you don't want to go through the hassle, you can also just hit "View Form" and share the link for people to fill out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-start-collecting-responses"&gt;
  &lt;/a&gt;
  7. Start collecting responses!
&lt;/h3&gt;

&lt;p&gt;You're all done! You can now sit back and just collect responses in your Notion database.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Programmers need types or "The Another Billion Dollar Mistake"</title>
      <author>Ughur Huseyn</author>
      <pubDate>Thu, 07 Oct 2021 21:12:45 +0000</pubDate>
      <link>https://dev.to/ughurh/programmers-need-types-or-the-another-billion-dollar-mistake-11kf</link>
      <guid>https://dev.to/ughurh/programmers-need-types-or-the-another-billion-dollar-mistake-11kf</guid>
      <description>&lt;p&gt;Interpreted languages lack performance for large programs. When created they not meant to be used as today. But they must overcome this issue. For fast execution many alternative JIT implementations and even compilers have been created (V8, PyPy, LuaJIT, Crystal, etc.). But efficient JITter or compiler needs type declarations. Therefore we can see many alternative syntaxes have been created also (Crystal, Cython etc.).&lt;br&gt;
And type declarations also make code readable and editor friendly, they document your code. Scripting languages mainly created for automatic memory managment and productivity. But why did they drop type declaraions completely?!. Today we see almost all of them return type declarations back somehow (Python, PHP, Typescript). Is this "The Another Billion Dollar Mistake"?&lt;/p&gt;

&lt;p&gt;Again, We programmers, need types. Not sure?&lt;/p&gt;

&lt;p&gt;Javascript -&amp;gt; TypeScript, V8&lt;br&gt;
Python -&amp;gt; Type hints, Cython, PyPy&lt;br&gt;
PHP -&amp;gt; Type declarations, PHP 8 (JIT Compiler)&lt;br&gt;
Ruby -&amp;gt; Crystal&lt;br&gt;
Lua -&amp;gt; LuaJIT&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>Slatwall Commerce for Contentful App &amp; Starter Kit</title>
      <author>Jon</author>
      <pubDate>Thu, 07 Oct 2021 21:11:19 +0000</pubDate>
      <link>https://dev.to/slatwallcommerce/slatwall-commerce-for-contentful-app-starter-kit-1mde</link>
      <guid>https://dev.to/slatwallcommerce/slatwall-commerce-for-contentful-app-starter-kit-1mde</guid>
      <description>&lt;h2&gt;
  &lt;a href="#big-news-we-just-launched-our-new-app-and-starter-kit-for-contentful-and-couldnt-be-more-excited"&gt;
  &lt;/a&gt;
  Big news! We just launched our new app and starter kit for Contentful and couldn’t be more excited!
&lt;/h2&gt;

&lt;p&gt;You’ll now be able to pull product data directly from the Slatwall Commerce platform into your Contentful pages to create the exact customer experience and storefront design you want.&lt;/p&gt;

&lt;p&gt;The Slatwall Commerce for Contentful app and starter kit empower brands to employ the full benefits of headless commerce and content management by providing everything eCommerce marketing and development teams need to quickly build, launch and continuously optimize unique and high-performing digital commerce storefronts.&lt;/p&gt;

&lt;p&gt;For businesses investing in digital commerce, launching new storefronts or upgrading existing stores, finding eCommerce platforms and services that meet the demands of the marketing and business teams while making easy-to-use tools available to developers has always been a challenge. Developers need a platform that is agile, powerful, and flexible while marketing teams require complete control over the design, content and creative aspects of the storefront. The Slatwall Commerce for Contentful integration and storefront starter kit delivers headless commerce + content to satisfy the requirements of both teams.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k_vC8dBw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.slatwallcommerce.com/default/assets/Image/article-images/slatwall-contentful-product-picker1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k_vC8dBw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.slatwallcommerce.com/default/assets/Image/article-images/slatwall-contentful-product-picker1.png" alt="Slatwall + Contentful" title="Slatwall + Contentful"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are just a few of the many benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Faster time to market. Developers can quickly install the app, connect their Slatwall installation and the storefront is up and running, thanks to a complete storefront template and framework that is purposefully built for integration. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improved flexibility and control. The storefront starter kit is easily customized, extended, and themed, allowing for complete control over the customer experience and storefront design while maintaining all of the power that an integrated storefront has to offer. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;High performance. Not only can the app be installed within minutes, but by leveraging the speed of the API, storefronts built with the new starter kit are high-performing, making them perfect for search engine optimization and mobile shopping experiences.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Merchandising control. Marketing teams have the ability to pull data directly from Slatwall Commerce using the app, allowing them to create pages to exact specifications using product information within the platform.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aJUbXhmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://admin.slatwallcommerce.com/default/assets/Image/article-images/slatwall-contentful-product-picker2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aJUbXhmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://admin.slatwallcommerce.com/default/assets/Image/article-images/slatwall-contentful-product-picker2.png" alt="Slatwall + Contentful" title="Slatwall + Contentful"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get the Slatwall for Contentful app: &lt;a href="https://www.contentful.com/marketplace/app/slatwall-commerce/"&gt;https://www.contentful.com/marketplace/app/slatwall-commerce/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To get the storefront starter kit: &lt;a href="https://www.slatwallcommerce.com/contentful/storefront-starter-kit/"&gt;https://www.slatwallcommerce.com/contentful/storefront-starter-kit/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To learn more about connecting Contentful with Slatwall Commerce: &lt;a href="https://www.slatwallcommerce.com/contentful/"&gt;https://www.slatwallcommerce.com/contentful/&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>headlesscommerce</category>
      <category>contentmanagement</category>
      <category>cms</category>
      <category>ecommerce</category>
    </item>
    <item>
      <title>OSD600 - Week 5 - Release 0.2 - Hacktoberfest</title>
      <author>Kien Nguyen Chi</author>
      <pubDate>Thu, 07 Oct 2021 20:47:06 +0000</pubDate>
      <link>https://dev.to/kiennguyenchi/osd600-week-5-release-0-2-hacktoberfest-3nl</link>
      <guid>https://dev.to/kiennguyenchi/osd600-week-5-release-0-2-hacktoberfest-3nl</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;This week, I start my Release 0.2 Project by working on Hacktoberfest. After few hours or I can say half of a day, scrolling hundreds of projects on Hacktoberfest, I finally find one that interests me. The project is A Discord-Bot to play Werewolf with your friends. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-issue"&gt;
  &lt;/a&gt;
  My Issue
&lt;/h1&gt;

&lt;p&gt;The program is written in Rust - language that I haven't used before. I take me a lot of time to read the code and read about Rust syntax to understand how it works. Although this new thing is unfamiliar with me, I still want to give it a try.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#issue-explanation"&gt;
  &lt;/a&gt;
  Issue Explanation
&lt;/h1&gt;

&lt;p&gt;In the current program, the Bot allows you to start a game round with 0 Players and 0 Roles, which should not happen because it does not make any sense at all.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#working-process"&gt;
  &lt;/a&gt;
  Working Process
&lt;/h1&gt;

&lt;p&gt;After the step of initializing players for the round, I  implement the code to figure out if there is a player or not. If there is more than player, the program will start the round. Otherwise, it will display an appropriate message. The owner supports me a lot to understand how the structure of the program is, so I can implement my code in an appropriate location. Also, the owner supports me about Rust syntax, which I'm not yet familiar.&lt;/p&gt;

&lt;p&gt;After finishing everything supposed to work, the owner realizes the string type in Rust does not implement the std::error::Error (for the program to display error message). So we simply create new type of StringError converting string to make the it usable for Rust Error type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let playerCount: usize = source.state.participants.len();
if playerCount &amp;lt; 1{
      return Err(TransitionError::new(StringError("Cannot start the game with no player".to_string())));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#experiences"&gt;
  &lt;/a&gt;
  Experiences
&lt;/h1&gt;

&lt;p&gt;Overall, in order to implement few lines of code, I have to spend a lot of time to read how the Rust language works. This is also a new interesting experience for me to work in a language that I have never done before.&lt;/p&gt;

&lt;p&gt;The owner of the repo is very nice. He replies me so quickly whenever I have a question or there is a typo needed to be fixed in my code.&lt;/p&gt;

&lt;p&gt;I am very happy that I worked in a project like this. If you are interesting in this project, please take a look at the links provided below.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h1&gt;

&lt;p&gt;Owner's Repository: &lt;a href="https://github.com/Lol3rrr/waswolf"&gt;Original Repo&lt;/a&gt;&lt;br&gt;
My Repository: &lt;a href="https://github.com/kiennguyenchi/waswolf"&gt;My Repo&lt;/a&gt;&lt;br&gt;
My Issue: &lt;a href="https://github.com/Lol3rrr/waswolf/issues/4"&gt;Issue #4&lt;/a&gt;&lt;br&gt;
My Pull Request: &lt;a href="https://github.com/Lol3rrr/waswolf/pull/13"&gt;PR #13&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>How to build an Accordion Menu using HTML, CSS and JavaScript</title>
      <author>Kingsley Ubah</author>
      <pubDate>Thu, 07 Oct 2021 20:42:25 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/how-to-build-an-accordion-menu-using-html-css-and-javascript-3omb</link>
      <guid>https://dev.to/ubahthebuilder/how-to-build-an-accordion-menu-using-html-css-and-javascript-3omb</guid>
      <description>&lt;p&gt;HTML, CSS and JavaScript can help you create stylish and dynamic web elements. One of those kind of element is an Accordion Menu.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will build a simple Accordion Menu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7lqq23Pq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632910257498/EuFFg0l3d.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7lqq23Pq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632910257498/EuFFg0l3d.gif" alt="ezgif.com-gif-maker.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-an-accordion"&gt;
  &lt;/a&gt;
  What is an Accordion?
&lt;/h3&gt;

&lt;p&gt;In UI design, an accordion is a vertically stacked list of information. For each list, there is a labelled header pointing to a corresponding content. The content is hidden by default. Clicking on a particular label will expand its content.&lt;/p&gt;

&lt;p&gt;One very common use case for accordions to hold a list of frequently asked questions. Clicking on any question will toggle a corresponding answer.&lt;/p&gt;

&lt;p&gt;You can get the code for this project from Codepen&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-build-an-accordion-using-html-css-and-js"&gt;
  &lt;/a&gt;
  How to build an accordion using HTML, CSS and JS
&lt;/h3&gt;

&lt;p&gt;We begin by defining the markup. If you are using an IDE like VSCode and you do have emmet installed, create a new index.html file and type &lt;code&gt;!&lt;/code&gt; followed by enter. This should create a HTML boilerplate code for your project.&lt;/p&gt;

&lt;p&gt;Alternatively, you can copy the following code into your &lt;code&gt;index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"ie=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"styles.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The folder structure is simple. We will create a folder called accordion. Inside the folder we will create three files: index.html, styles.css and app.js. We will also link all files into our HTML marjup as observed above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-markup-for-the-accordion"&gt;
  &lt;/a&gt;
  HTML Markup For the Accordion
&lt;/h3&gt;

&lt;p&gt;The HTML for the accordion is also going to be quite simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;


  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"accordion-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"accordion"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Frequently Asked Questions&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;What is HTML&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hypertext Markup Language (HTML) is a computer language that makes up most web pages and online applications. A hypertext is a text that is used to reference other pieces of text, while a markup language is a series of markings that tells web servers the style and structure of a document. HTML is very simple to learn and use.&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;What is CSS?&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CSS stands for Cascading Style Sheets. It is the language for describing the presentation of Web pages, including colours, layout, and fonts, thus making our web pages presentable to the users. CSS is designed to make style sheets for the web. It is independent of HTML and can be used with any XML-based markup language. CSS is popularly called the design language of the web.
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;What is JavaScript?&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;JavaScript is a scripting or programming language that allows you to implement complex features on web pages — every time a web page does more than just sit there and display static information for you to look at — displaying timely content updates, interactive maps, animated 2D/3D graphics, scrolling video jukeboxes, etc. — you can bet that JavaScript is probably involved. It is the third of the web trio.&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;What is React?&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;React is a JavaScript library created for building fast and interactive user interfaces for web and mobile applications. It is an open-source, component-based, front-end library responsible only for the application’s view layer. In Model View Controller (MVC) architecture, the view layer is responsible for how the app looks and feels. React was created by Jordan Walke, a software engineer at Facebook. &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;What is PHP?&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;PHP is a server-side and general-purpose scripting language that is especially suited for web development. PHP originally stood for Personal Home Page. However, now, it stands for Hypertext Preprocessor. It’s a recursive acronym because the first word itself is also an acronym.&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;What is Node JS?&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Node.js is an open-source, cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser. Node.js lets developers use JavaScript to write command line tools and for server-side scripting—running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, our page will look all bare.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gVOi5B_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632478639319/6_WWaZagG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gVOi5B_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632478639319/6_WWaZagG.png" alt="htmlook.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling-up-the-accordion-using-css"&gt;
  &lt;/a&gt;
  Styling Up the Accordion using CSS
&lt;/h3&gt;

&lt;p&gt;The accordion has to look good of course. Time to bring some CSS into play.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@import url('https://fonts.googleapis.com/css2?family=Rubik:wght@300&amp;amp;display=swap');

/* Sets the background color of the body to blue. Sets font to Rubik */

body {
  background-color: #0A2344;
  font-family: 'rubik', sans-serif;
}

/* Aligns the heading text to the center. */

h1 {
  text-align: center;
}

/* Sets the width for the accordion. Sets the margin to 90px on the top and bottom and auto to the left and right */

.accordion {
  width: 800px;
  margin: 90px auto;
  color: black;
  background-color: white;
  padding: 45px 45px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With all of these styled applied, here is how our accordion will look like&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---jlOj6b0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632479039630/X8DyVEIrx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---jlOj6b0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632479039630/X8DyVEIrx.png" alt="withcss1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need to start doing some work on the inside. First, we position each of the containers (holding both the label and content) to relative. That means we can now position it's children relative to the parent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.accordion&lt;/span&gt; &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Position the labels relative to the .container. Add padding to the top and bottom and increase font size. Also make it's cursor a pointer */&lt;/span&gt;

&lt;span class="nc"&gt;.accordion&lt;/span&gt; &lt;span class="nc"&gt;.label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the difference now&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rU4D7yCj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632479377592/ZaOptRvWO5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rU4D7yCj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632479377592/ZaOptRvWO5.png" alt="withcss2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next action will be to append a little '+' sign at the end of each list. We will achieve this using the ::before selector. The ::before and ::after selector is used to place content before of after a specified element. &lt;/p&gt;

&lt;p&gt;Here, we are inserting '+' before the label. However, we will use the offset properties 'top' and right to place it at the far right corner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="c"&gt;/* Position the plus sign 5px from the right. Center it using the transform property. */&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;

&lt;span class="nc"&gt;.accordion&lt;/span&gt; &lt;span class="nc"&gt;.label&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Hide the content (height: 0), decrease font size, justify text and add transition */&lt;/span&gt;

&lt;span class="nc"&gt;.accordion&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;justify&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;780px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Add a horizontal line between the contents */&lt;/span&gt;

&lt;span class="nc"&gt;.accordion&lt;/span&gt; &lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our app will look far far better than it previously did&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x_jQgt3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632480128515/4Q2E4YR5d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x_jQgt3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632480128515/4Q2E4YR5d.png" alt="nowbig.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bringing-in-javascript"&gt;
  &lt;/a&gt;
  Bringing In JavaScript
&lt;/h3&gt;

&lt;p&gt;At this point, our accordion is pretty much static. To make it display the content when clicked, we will need to bring in some JavaScript.&lt;/p&gt;

&lt;p&gt;Navigate to your app.js file and type in the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accordion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;accordion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;accordion&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This script will access all of our lists by classname of 'container'. &lt;/p&gt;

&lt;p&gt;Then we will loop through the list. For each container, we simply want to add an event listener to it. When it gets clicked, we want to toggle the class "active" on that element.&lt;/p&gt;

&lt;p&gt;Now we are going to test this effect. Click the first container with the label &lt;code&gt;What is HTML&lt;/code&gt;, open your DevTool (F12 For Chrome on Windows) and inspect it inside of the elements tab.&lt;/p&gt;

&lt;p&gt;You should find the active class registered on it&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BD6Tiasa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632480884158/5AuG4fo_q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BD6Tiasa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632480884158/5AuG4fo_q.png" alt="active.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicking on the element again will remove the &lt;code&gt;active&lt;/code&gt; class from it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#completing-the-app"&gt;
  &lt;/a&gt;
  Completing the App
&lt;/h3&gt;

&lt;p&gt;There is one last thing we need to do. We need to create an active class within an stylesheet. We will define how we want our accordion to look once JavaScript toggles the class on a container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="c"&gt;/* Unhides the content part when active. Sets the height */&lt;/span&gt;

&lt;span class="nc"&gt;.accordion&lt;/span&gt; &lt;span class="nc"&gt;.container.active&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Changes from plus sign to negative sign once active */&lt;/span&gt;

&lt;span class="nc"&gt;.accordion&lt;/span&gt; &lt;span class="nc"&gt;.container.active&lt;/span&gt; &lt;span class="nc"&gt;.label&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is our app in the end.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7lqq23Pq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632910257498/EuFFg0l3d.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7lqq23Pq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632910257498/EuFFg0l3d.gif" alt="ezgif.com-gif-maker.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h3&gt;

&lt;p&gt;Thanks for following along. I hope you learnt something useful from this tutorial.&lt;/p&gt;

&lt;p&gt;If you are interested in content like this, I make them daily on my blog.&lt;/p&gt;

&lt;p&gt;Have a great week.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P/S: If you are learning JavaScript, I created an eBook which teaches 50 topics in JavaScript with hand-drawn digital notes. Check it out &lt;a href="https://gum.co/js-50"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Building a Backend with Node.js and Express</title>
      <author>Rodrigo Rojas</author>
      <pubDate>Thu, 07 Oct 2021 20:40:20 +0000</pubDate>
      <link>https://dev.to/crrojas88/building-a-backend-with-node-js-and-express-27b5</link>
      <guid>https://dev.to/crrojas88/building-a-backend-with-node-js-and-express-27b5</guid>
      <description>&lt;p&gt;Hey there. I know I’ve been MIA for a couple of months and I promised I’d be more active with posting. The truth is, sometimes life just catches up with you and you gotta take care of yourself first. But I’m here now, so let’s get started!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UY2ppgiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oabr3e7wdddkyqzgx7je.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UY2ppgiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oabr3e7wdddkyqzgx7je.jpeg" alt="Love yourself"&gt;&lt;/a&gt;&lt;/p&gt;
Credit to &lt;a href="https://www.inprnt.com/gallery/titsay/what-do-i-do-with-all-this-love/"&gt;Titsay&lt;/a&gt;



&lt;p&gt;For this (hefty) blog post, our focus shifts towards the backend. That is, towards implementing functionality on the server side of our stack. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xKsEasha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kgkqr3asddlftgbjwuy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKsEasha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kgkqr3asddlftgbjwuy.jpg" alt="Calvin and Hobbes Smock"&gt;&lt;/a&gt;&lt;/p&gt;
We stan Calvin &amp;amp; Hobbes here



&lt;h2&gt;
  &lt;a href="#starting-our-nodejs-backend"&gt;
  &lt;/a&gt;
  Starting our Node.js Backend
&lt;/h2&gt;

&lt;p&gt;Our goal this time is to implement a backend that will work with the phonebook application we’ve been working on from my &lt;a href="https://dev.to/crrojas88/make-http-get-requests-with-axios-23id"&gt;previous posts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s create a new template for our application with the &lt;code&gt;npm init&lt;/code&gt; command. We will answer the questions presented and the result will be a generated &lt;code&gt;package.json&lt;/code&gt; file that contains information about the project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--twETiQHl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojxwowda1as57vju7f6q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--twETiQHl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojxwowda1as57vju7f6q.png" alt="package.json image"&gt;&lt;/a&gt;&lt;/p&gt;
Nice package



&lt;p&gt;Before we continue, let's make one small change to our &lt;code&gt;scripts&lt;/code&gt; object:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--067kZ43B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpaone97krmpa975kk2n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--067kZ43B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpaone97krmpa975kk2n.png" alt="Scripts"&gt;&lt;/a&gt;&lt;/p&gt;
We prefer to type less



&lt;p&gt;We &lt;em&gt;could&lt;/em&gt; run the application directly with &lt;code&gt;node&lt;/code&gt; from the command line like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt; we can run it as an npm script because we’re fancy/lazy like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;npm start&lt;/code&gt; script works because we defined it in the package.json file!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-express-framework"&gt;
  &lt;/a&gt;
  Using the Express Framework
&lt;/h2&gt;

&lt;p&gt;In order to ease server-side development with node and offer an easier interface to work with the built-in http module, we can use a backend framework called &lt;a href="http://expressjs.com/"&gt;Express&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8IMxvk15--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/ImmaterialAggressiveAmericanmarten-size_restricted.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8IMxvk15--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/ImmaterialAggressiveAmericanmarten-size_restricted.gif" alt="NWA Express Yourself"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's install express as a project dependency with the following command which in turn will be added to our &lt;code&gt;package.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The primary purpose of our backend server will be to offer raw data in the &lt;code&gt;JSON&lt;/code&gt; format to the frontend. For this reason, we can now change our &lt;code&gt;index.js&lt;/code&gt; file to return a hardcoded list of people in the &lt;code&gt;JSON&lt;/code&gt; format along with some express functionality:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hannah Rickard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;06-51-99-56-83&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hyun Namkoong&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10987654&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Courtney Martinez&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3691215&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;Phonebook&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/people&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3001&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server running on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right off the bat, at the beginning of our &lt;code&gt;index.js&lt;/code&gt; we import express, which is a function that is used to create an express application stored in the &lt;code&gt;app&lt;/code&gt; variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we define two &lt;code&gt;routes&lt;/code&gt; to the application. The first one defines an event handler that is used to handle HTTP &lt;code&gt;GET&lt;/code&gt; requests made to the application's &lt;code&gt;/&lt;/code&gt; route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;Phonebook&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/people&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;persons&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The event handler function accepts two parameters.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first request parameter contains all of the information of the &lt;code&gt;HTTP&lt;/code&gt; request.&lt;/li&gt;
&lt;li&gt;The second response parameter is used to define how the request is responded to.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For our first instance, the request is answered by using the &lt;code&gt;send&lt;/code&gt; method of the response object. Calling the method makes the server respond to the &lt;code&gt;HTTP&lt;/code&gt; request by sending a response containing the string &lt;code&gt;&amp;lt;h1&amp;gt;Phonebook&amp;lt;/h1&amp;gt;&lt;/code&gt;, that was passed to the &lt;code&gt;send&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;Phonebook&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now for the second instance, our route defines an event handler that handles HTTP &lt;code&gt;GET&lt;/code&gt; requests made to the &lt;code&gt;/people&lt;/code&gt; path of our app (this should look familiar to you if not, refresh your memory &lt;a href="https://dev.to/crrojas88/make-http-get-requests-with-axios-23id"&gt;here&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/people&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;​​The &lt;code&gt;GET&lt;/code&gt; request is responded to with the &lt;code&gt;json&lt;/code&gt; method of the response object. Calling this method will send the people array that was passed to it as a JSON formatted string. How neat is that?&lt;/p&gt;

&lt;p&gt;Finally, the last rows bind the &lt;code&gt;HTTP&lt;/code&gt; server assigned to the app variable, to listen to HTTP requests sent to the &lt;code&gt;PORT 3001&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3001&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server running on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look at you! You made it to the end and we’ve now managed to make two &lt;code&gt;GET&lt;/code&gt; requests using express. One to our &lt;code&gt;/&lt;/code&gt; route, and another to our &lt;code&gt;people&lt;/code&gt; route. In our following posts we will expand the app to uphold RESTful conventions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-you-go"&gt;
  &lt;/a&gt;
  Before You Go…
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oePrAonO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mu97yxl18xg7bk41klv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oePrAonO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mu97yxl18xg7bk41klv.jpeg" alt="Billy Mays"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like extra credit or are an overachiever like myself, then stick around for a little tool called &lt;a href="https://github.com/remy/nodemon"&gt;Nodemon&lt;/a&gt;. What is Nodemon you ask? Well, according to the documentation:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nodemon will watch the files in the directory in which nodemon was started, and if any files change, nodemon will automatically restart your node application.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Usually when we make changes to our backend code we have to painstakingly restart the application in order to see the changes with &lt;code&gt;Ctrl+C&lt;/code&gt; and then relaunching with &lt;code&gt;npm start&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Compared to the convenient workflow in React where the browser automatically reloads after changes are made, this feels slightly &lt;strong&gt;annoying&lt;/strong&gt;. But have no fear, nodemon will take care of us. &lt;/p&gt;

&lt;p&gt;Changes to the backend code now cause the server to restart automatically (You'll still have to refresh the browser though).&lt;/p&gt;

&lt;p&gt;To start, install nodemon and define it as a development dependency:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev nodemon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A dev what now? When we say development dependencies, we mean tools that are needed only during the development of the application. In our case, for automatically restarting the backend.&lt;/p&gt;

&lt;p&gt;To summon nodemon we simply:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules/.bin/nodemon index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s a mouthful, so you already know what’s coming don’t you? Yep, script that ish!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iAiBvo_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbjwxps88vb5r2yut9xf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iAiBvo_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbjwxps88vb5r2yut9xf.png" alt="nodemon image"&gt;&lt;/a&gt;&lt;/p&gt;
Love you scripts


 

&lt;p&gt;You can now start the server in developer mode with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SO&lt;/strong&gt; much better. Ok, I’ve rambled long enough. Check back for when we start to build our backend so it can fetch a single resource, delete, and even receive new data! Remember to take breaks and hydrate. Rod out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://expressjs.com/en/4x/api.html#res.json"&gt;Express &amp;amp; JSON&lt;/a&gt;&lt;br&gt;
&lt;a href="http://expressjs.com/en/4x/api.html#res.send"&gt;Express Send&lt;/a&gt;&lt;br&gt;
&lt;a href="http://expressjs.com/"&gt;Express Library&lt;/a&gt;&lt;br&gt;
&lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/remy/nodemon"&gt;Nodemon utility&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Making a Meal Picker with Redwood</title>
      <author>Milecia</author>
      <pubDate>Thu, 07 Oct 2021 20:37:25 +0000</pubDate>
      <link>https://dev.to/flippedcoding/making-a-meal-picker-with-redwood-1ha5</link>
      <guid>https://dev.to/flippedcoding/making-a-meal-picker-with-redwood-1ha5</guid>
      <description>&lt;p&gt;Deciding what to eat every day is something that a lot of us struggle with. It'd be so much easier if there was a button you could push and it would choose one of your favorite meals for you.&lt;/p&gt;

&lt;p&gt;That's why we're going to make a meal picker in this tutorial. We'll use Redwood to create the front-end and back-end of the app which will let us save recipes and choose a random meal. We'll also be using Cloudinary to host the video we have associated with the recipes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-app"&gt;
  &lt;/a&gt;
  Setting up the app
&lt;/h2&gt;

&lt;p&gt;To get started, let's make a new Redwood app that uses TypeScript. In a terminal, run this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create redwood-app &lt;span class="nt"&gt;--typescript&lt;/span&gt; meal-picker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate a lot of new files and folders in the &lt;code&gt;meal-picker&lt;/code&gt; directory. The main two directories are &lt;code&gt;web&lt;/code&gt; and &lt;code&gt;api&lt;/code&gt;. The &lt;code&gt;web&lt;/code&gt; folder contains all of the code for the front-end and the &lt;code&gt;api&lt;/code&gt; directory contains all of the code for the back-end.&lt;/p&gt;

&lt;p&gt;Most times, it's a good practice to start building the data model of a new app first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-backend"&gt;
  &lt;/a&gt;
  Building the back-end
&lt;/h2&gt;

&lt;p&gt;We'll start by opening the &lt;code&gt;prisma.schema&lt;/code&gt; file in &lt;code&gt;api &amp;gt; db&lt;/code&gt; directory. This file holds all of the models for the tables we'll have in the database. We'll be using a local Postgres instance, so if you need to download that you can find the right version &lt;a href="https://www.postgresql.org/download/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first thing we'll do is update the &lt;code&gt;provider&lt;/code&gt; value to &lt;code&gt;postgresql&lt;/code&gt;. Next, we need to create a &lt;code&gt;.env&lt;/code&gt; file in the root of the project. You'll see the &lt;code&gt;DATABASE_URL&lt;/code&gt; being read from the environment below the type of database we're using. In the &lt;code&gt;.env&lt;/code&gt; file, add the connection string to your local Postgres instance. It might look similar to this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DATABASE_URL=postgres://postgres:admin@localhost:5432/meal_picker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-the-model"&gt;
  &lt;/a&gt;
  Creating the model
&lt;/h3&gt;

&lt;p&gt;Now you have everything set to connect to your database. We need to define the model for the meals we'll be saving to choose from. You can delete the &lt;code&gt;UserExample&lt;/code&gt; model and replace it with this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="nx"&gt;Meal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;      &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;id&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cuid&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt;   &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;recipe&lt;/span&gt;  &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;video&lt;/span&gt;   &lt;span class="nb"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This model defines a table that will hold all of the details for our meals. There has to be a way for users to input their favorite meals and all of the details. With the model ready, we can go ahead and run the migration to get these changes on the database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn rw prisma migrate dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That will define the &lt;code&gt;Meal&lt;/code&gt; table in Postgres. So now we can use one of the Redwood commands to generate this CRUD functionality for us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-meal-collection-management-functionality"&gt;
  &lt;/a&gt;
  Creating the meal collection management functionality
&lt;/h2&gt;

&lt;p&gt;We'll need to have both the GraphQL back-end in place and the front-end in place to allow users to add, edit, and delete meals. This normally takes a bit of time, but the following command generates all of that for us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn rw g scaffold meal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the &lt;code&gt;api &amp;gt; src &amp;gt; graphql&lt;/code&gt; directory and you should see &lt;code&gt;meals.sdl.ts&lt;/code&gt; file that has all of the types for the queries and mutations we need. If you check in &lt;code&gt;api &amp;gt; src &amp;gt; services &amp;gt; meals&lt;/code&gt;, you'll see three files. Two of them are for tests and the &lt;code&gt;meals.ts&lt;/code&gt; file holds all of the resolvers for our queries and mutations. These already connect to the database so we have our entire back-end created!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-to-the-frontend"&gt;
  &lt;/a&gt;
  Moving to the front-end
&lt;/h2&gt;

&lt;p&gt;Now that we have the GraphQL server ready to go, let's take a look at the files the &lt;code&gt;scaffold&lt;/code&gt; command created on the front-end. In &lt;code&gt;web &amp;gt; src &amp;gt; pages &amp;gt; Meals&lt;/code&gt;, you'll see several new directories that correspond to different views of the CRUD for meals.&lt;/p&gt;

&lt;p&gt;If you take a look in &lt;code&gt;web &amp;gt; src &amp;gt; components &amp;gt; Meal&lt;/code&gt;, you'll see a number of components that we created. These components interact with and display the data that we get from the back-end. It's worth taking the time to peek at these different files and see how they work, but you can still run the app and see all of the CRUD in action without ever looking at the code.&lt;/p&gt;

&lt;p&gt;In your terminal, run this command and navigate to &lt;code&gt;http://localhost:8910/meals&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn rw dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see something like this in your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fJfV3PvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1631654470/e-603fc55d218a650069f5228b/bgpn7e5mtzxpo4madk2l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fJfV3PvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1631654470/e-603fc55d218a650069f5228b/bgpn7e5mtzxpo4madk2l.png" alt="how the meals table looks with no entries"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now add a few entries by clicking the "New Meal" button. This will bring up a new page and let you add the details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ae6dE3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1631654448/e-603fc55d218a650069f5228b/xdeywkzh1xiwg8f47pqh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ae6dE3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1631654448/e-603fc55d218a650069f5228b/xdeywkzh1xiwg8f47pqh.png" alt="new meal page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you haven't uploaded any videos for your meals, take a second to go to &lt;a href="https://cloudinary.com/users/register/free"&gt;your Cloudinary account&lt;/a&gt; and add those. Make sure you grab the URLs for the videos you want to use because you'll add them to your new meal entries.&lt;/p&gt;

&lt;p&gt;Once you've added a few meals, you should see a table that lists all of your entries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AFOjXm79--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1631654434/e-603fc55d218a650069f5228b/fmtlss3c16gzn2r9bgvs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AFOjXm79--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1631654434/e-603fc55d218a650069f5228b/fmtlss3c16gzn2r9bgvs.png" alt="table with meal entries"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's everything we need to handle the CRUD functionality for our meals. You might think of this as an admin area in the app. Redwood generated all of this for us with just one command. All that's left is making the random meal picker page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-picker-page"&gt;
  &lt;/a&gt;
  Making the picker page
&lt;/h2&gt;

&lt;p&gt;Let's make a new page for the picker. We'll use another Redwood command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn rw g page picker /
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This updates our routes to make the picker page the root page and it generates some files for us. Go to &lt;code&gt;web &amp;gt; src &amp;gt; pages &amp;gt; PickerPage&lt;/code&gt; and open &lt;code&gt;PickerPage.tsx&lt;/code&gt;. This is where we'll make the button that will tell us what to eat.&lt;/p&gt;

&lt;p&gt;We'll get rid of a lot of the boilerplate code in the &lt;code&gt;PickerPage&lt;/code&gt; component. Let's start by adding the import statements for the methods we'll be using. So your list of import statements should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@redwoodjs/web&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MetaTags&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@redwoodjs/web&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's add the GraphQL query we need to get all of the meals we have available to choose from. This goes right below the import statements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GET_MEALS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  query {
    meals {
      title
      recipe
      video
    }
  }
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One more quick thing before we start using this query. Since this is a TypeScript app, let's add the type for a single meal. Below the query just wrote, add the &lt;code&gt;Meal&lt;/code&gt; type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Meal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;recipe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we get ready to work with the meals data, now we know exactly what to expect. Now we get to delete a lot of code. Inside the &lt;code&gt;PickerPage&lt;/code&gt; component, delete everything except the &lt;code&gt;&amp;lt;MetaTags&amp;gt;&lt;/code&gt; element. Your &lt;code&gt;PickerPage.tsx&lt;/code&gt; should look like this now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@redwoodjs/web&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MetaTags&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@redwoodjs/web&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GET_MEALS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  query {
    meals {
      title
      recipe
      video
    }
  }
`&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Meal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;recipe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PickerPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MetaTags&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Picker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PickerPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All that's left is adding the data and the elements to display it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handling-the-data"&gt;
  &lt;/a&gt;
  Handling the data
&lt;/h3&gt;

&lt;p&gt;Let's add a new &lt;code&gt;meal&lt;/code&gt; state in the component. We'll use our &lt;code&gt;Meal&lt;/code&gt; type to define what values are expected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;meal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMeal&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Meal&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we'll use the &lt;code&gt;useQuery&lt;/code&gt; hook to fetch our data from the GraphQL server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GET_MEALS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We get both the data and a loading state for it. That way we can account for any latency in the request and show the users a loading screen. If we don't handle this, the app will likely crash because the data isn't available yet. Right below the &lt;code&gt;useQuery&lt;/code&gt; call, we'll add the code to handle this loading state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last function we need to add before creating the elements to show our random meal will actually be responsible for choosing that meal. When we click a button on the screen, it'll call this function and set the &lt;code&gt;meal&lt;/code&gt; state to some random selection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadMeal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getRandomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;setMeal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is a tiny helper function we for to get that random integer. Add this code below the &lt;code&gt;PickerPage&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getRandomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have the data in place and all of the accompanying functions we need. Let's finally add the elements to display everything.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-button-and-meal-display"&gt;
  &lt;/a&gt;
  The button and meal display
&lt;/h3&gt;

&lt;p&gt;Below the &lt;code&gt;&amp;lt;MetaTags&amp;gt;&lt;/code&gt; element, add these elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meal&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;meal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Find out what you are going to eat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loadMeal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;18px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;24px 32px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;500px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Tell&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt; &lt;span class="nx"&gt;what&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;eat&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The text on the page will change based on whether or not you've had a random meal selected. Then there's the button with a few styles on it that will call the function to choose a new random meal.&lt;/p&gt;

&lt;p&gt;If you run the app again with &lt;code&gt;yarn rw dev&lt;/code&gt;, you'll see something like this in your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MPD-0sEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1631654385/e-603fc55d218a650069f5228b/y6wduwb9h5e8lism4tdj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MPD-0sEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1631654385/e-603fc55d218a650069f5228b/y6wduwb9h5e8lism4tdj.png" alt="meal selector button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last piece of code is to display the info for the randomly selected meal. We'll do this with a conditional render statement below the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meal&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;recipe&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;controls&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;350&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;500&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/video&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will display the recipe and the video whenever the button is clicked and a meal is selected. Now if you look in the browser, you should see something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---kYntKVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1631654321/e-603fc55d218a650069f5228b/ubxf52p3joar5y65pwvc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---kYntKVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/jesse-thisdot/image/upload/v1631654321/e-603fc55d218a650069f5228b/ubxf52p3joar5y65pwvc.png" alt="page after the button has been clicked and a meal has been selected"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it! You now have a meal picker that will make it hard for you to say you can't decide what to eat anymore.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finished-code"&gt;
  &lt;/a&gt;
  Finished code
&lt;/h2&gt;

&lt;p&gt;If you want to check out the finished front-end and back-end code, check out the code in &lt;a href="https://github.com/flippedcoder/blog-examples/tree/main/food-picker"&gt;the &lt;code&gt;food-picker&lt;/code&gt; folder of this repo&lt;/a&gt;. You can see an example of the front-end in &lt;a href="https://codesandbox.io/s/dawn-cherry-5i9rr"&gt;this Code Sandbox&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Not every project you work on has to be super detailed. Sometimes you just need something to prove a concept or you want to make something for yourself. I know I've definitely used this app to pick what I'm going to eat more than I want to admit.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>graphql</category>
    </item>
  </channel>
</rss>
