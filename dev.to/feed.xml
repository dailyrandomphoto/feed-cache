<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>LEVEL UP with JavaScript! LVL 6</title>
      <author>DevCronin</author>
      <pubDate>Sat, 11 Sep 2021 15:28:32 +0000</pubDate>
      <link>https://dev.to/devcronin/level-up-with-javascript-lvl-6-17ff</link>
      <guid>https://dev.to/devcronin/level-up-with-javascript-lvl-6-17ff</guid>
      <description>&lt;h3&gt;
  &lt;a href="#in-this-blog-series-tutorial-i-will-be-covering-some-of-the-basic-javascript-programming-concepts"&gt;
  &lt;/a&gt;
  In this blog series tutorial, I will be covering some of the basic JavaScript programming concepts.
&lt;/h3&gt;

&lt;p&gt;This is geared toward beginners and anyone looking to refresh their knowledge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#see-the-previous-level-here"&gt;
  &lt;/a&gt;
  See the &lt;a href="https://dev.to/devcronin/level-up-with-javascript-lvl-5-1406"&gt;&lt;strong&gt;Previous Level Here&lt;/strong&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Level 6 will cover: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;String Immutability&lt;/li&gt;
&lt;li&gt;Use Bracket Notation to Find the Nth Character in a String&lt;/li&gt;
&lt;li&gt;Use Bracket Notation to Find the Last Character in a String&lt;/li&gt;
&lt;li&gt;Use Bracket Notation to Find the Nth-to-Last Character in a String&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#string-immutability"&gt;
  &lt;/a&gt;
  String Immutability
&lt;/h2&gt;

&lt;p&gt;Immutable means a string cannot be altered once assigned. The way we make changes to strings is by using methods to change them. We will go over these methods in another tutorial.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// This returns undefined because the string "Lizard" is immutable&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lizard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Wizard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kc"&gt;undefined&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-bracket-notation-to-find-the-nth-character-in-a-string"&gt;
  &lt;/a&gt;
  Use Bracket Notation to Find the Nth Character in a String
&lt;/h2&gt;

&lt;p&gt;If we want to find which character of a string is sitting at a particular value, we again use bracket notation with the number position we want to find [Nth].&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Druid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;u&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-bracket-notation-to-find-the-last-character-in-a-string"&gt;
  &lt;/a&gt;
  Use Bracket Notation to Find the Last Character in a String
&lt;/h2&gt;

&lt;p&gt;When we want to find the last character of a string, we can subtract one from the string's length.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;spell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fireball&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;spell&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;spell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;l&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-bracket-notation-to-find-the-nthtolast-character-in-a-string"&gt;
  &lt;/a&gt;
  Use Bracket Notation to Find the Nth-to-Last Character in a String
&lt;/h2&gt;

&lt;p&gt;Just as we did before to find the Nth and the last character in a string, we can combine the two to find the last to Nth character.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;enemy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Goblin Mage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;secondToLastLetter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;enemy&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;enemy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secondToLastLetter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;g&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-my-blog-this-is-the-sixth-of-my-series-on-javascript-so-if-you-would-like-to-read-more-please-follow"&gt;
  &lt;/a&gt;
  Thank you for reading my blog! This is the sixth of my series on JavaScript so if you would like to read more, please follow!
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#see-the-next-level-here"&gt;
  &lt;/a&gt;
  See the &lt;a href="https://dev.to/devcronin/level-up-with-javascript-lvl-7-l04-temp-slug-2957750"&gt;&lt;strong&gt;Next Level Here&lt;/strong&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#support-and-buy-me-a-coffee"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.buymeacoffee.com/ZachCronin"&gt;&lt;strong&gt;Support and Buy me a Coffee&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How To Choose The Right Frontend Framework</title>
      <author>Eddy Vinck</author>
      <pubDate>Sat, 11 Sep 2021 14:55:06 +0000</pubDate>
      <link>https://dev.to/eddyvinck/how-to-choose-the-right-frontend-framework-1ben</link>
      <guid>https://dev.to/eddyvinck/how-to-choose-the-right-frontend-framework-1ben</guid>
      <description>&lt;p&gt;Should you learn React, Vue, Angular? Or is something like Svelte a better choice?&lt;/p&gt;

&lt;p&gt;This question plagues many frontend developers looking to break into the industry.&lt;/p&gt;

&lt;p&gt;I've seen this question asked and answered hundreds of times online.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#most-of-the-advice-on-social-media-is-not-very-helpful"&gt;
  &lt;/a&gt;
  Most of the advice on social media is not very helpful
&lt;/h2&gt;

&lt;p&gt;That's a pretty bold claim, but hear me out: the advice is not helpful because it most likely does not apply to your circumstances.&lt;/p&gt;

&lt;p&gt;When people are comparing frameworks, they are often comparing one of the following things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amount of GitHub stars&lt;/li&gt;
&lt;li&gt;Amount of NPM downloads&lt;/li&gt;
&lt;li&gt;Amount of code required to build something&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's pretty much always one of those things. Or people are just advocating for their favorite framework.&lt;/p&gt;

&lt;p&gt;Those comparisons are all valid and can help you make a decision, but in my opinion there is a better way to tackle this question.&lt;/p&gt;

&lt;p&gt;The area where most of the popularity comparisons fall flat, however, is that there is not a single one framework that is the most popular in every part of the world. Whereas in some areas it could be React, in other areas it might be Vue (or any other framework).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-out-what-framework-to-learn"&gt;
  &lt;/a&gt;
  Finding out what framework to learn
&lt;/h2&gt;

&lt;p&gt;You should choose a framework that aligns with your goals. &lt;/p&gt;

&lt;p&gt;Chances are that if you are reading this article you are an aspiring or entry-level developer. &lt;/p&gt;

&lt;p&gt;If that is the case, then wouldn't it make more sense to choose the frontend framework that will most likely get you a job? I'm assuming that is why you are reading this in the first place.&lt;/p&gt;

&lt;p&gt;So how do we find out what framework will get you a job?&lt;/p&gt;

&lt;p&gt;Simple: You need to find out what companies are hiring for. You have to do market research.&lt;/p&gt;

&lt;p&gt;The easiest way would be to look at job posts for companies in your area. &lt;/p&gt;

&lt;p&gt;You can do this by going to websites like &lt;a href="https://indeed.com"&gt;Indeed&lt;/a&gt; or your local equivalent. &lt;/p&gt;

&lt;p&gt;Some companies don't hire via websites like that though, so I would advise you to also look at the individual websites of companies in your area or the area where you would like to work.&lt;/p&gt;

&lt;p&gt;If companies in your area are organising Meetups / developer networking events via &lt;a href="https://meetup.com"&gt;meetup.com&lt;/a&gt; or other platforms that would also be a great way to find out what you should learn.&lt;/p&gt;

&lt;p&gt;After doing this research you should take some time to think about what companies you would like to work for. Then learn the framework that is most commonly used amongst those companies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-can-learn-more-than-one-framework"&gt;
  &lt;/a&gt;
  You can learn more than one framework
&lt;/h2&gt;

&lt;p&gt;Maybe after doing your market research you come to the conclusion that companies aren't hiring for the framework you would really like to learn.&lt;/p&gt;

&lt;p&gt;My advice would be to still learn the framework that is most desired by those potential employers. Build some projects. Get a job. Get real world experience. &lt;/p&gt;

&lt;p&gt;You can always learn other frameworks once you have gotten your foot in the door.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-companies-to-apply-for"&gt;
  &lt;/a&gt;
  What companies to apply for?
&lt;/h2&gt;

&lt;p&gt;I recently wrote an article called &lt;a href="https://dev.to/eddyvinck/transform-your-career-and-personal-life-finding-a-great-job-nh2"&gt;Transform Your Career And Personal Life: Finding A Great Job&lt;/a&gt; that could help.&lt;/p&gt;

&lt;p&gt;I also am writing an eBook about this subject. It's called &lt;a href="https://eddyvinck.gumroad.com/l/developer-job-searching"&gt;Developer Job Searching: The Not So Technical Parts&lt;/a&gt;. Right now you can get it for 40% off. It releases September 21st.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://eddyvinck.gumroad.com/l/developer-job-searching"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5o_0TiQy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uc0nj21luz8k06c8h5iz.png" alt="Link to the eBook"&gt;&lt;/a&gt;&lt;br&gt;
Click 👆 for more information&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>career</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What is Open Source Debt? And How to repay it?</title>
      <author>Rajvir Singh</author>
      <pubDate>Sat, 11 Sep 2021 14:26:40 +0000</pubDate>
      <link>https://dev.to/byteslash/what-is-open-source-debt-and-how-to-repay-it-4a46</link>
      <guid>https://dev.to/byteslash/what-is-open-source-debt-and-how-to-repay-it-4a46</guid>
      <description>&lt;p&gt;If you are a developer, then I would say you're in debt to unknown people. Don't worry it is good debt and there's nothing to be worried about whilst you repay it. But, yea, it is a never-ending one.&lt;/p&gt;

&lt;p&gt;Let me explain&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-open-source"&gt;
  &lt;/a&gt;
  What is Open Source
&lt;/h1&gt;

&lt;p&gt;First of all, what is open source?, and I would assume you know it. But if you are getting into this new world of programming so for that, here's the explanation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Open-source software is computer software that is released under a license in which the copyright holder grants users the rights to use, study, change, and distribute the software and its source code to anyone and for any purpose. Open-source software may be developed in a collaborative public manner.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QKUGYKb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/smOFBj4VakkAAAAC/spongebob-rainbow-open-source-opensource-linux.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QKUGYKb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/smOFBj4VakkAAAAC/spongebob-rainbow-open-source-opensource-linux.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Those were the first lines I could find when searching for open source.&lt;br&gt;
So now you know what open source is so let's talk about the good never-ending debt you are in.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-open-source-debt"&gt;
  &lt;/a&gt;
  What is Open Source Debt?
&lt;/h1&gt;

&lt;p&gt;Let me break this down into few pieces&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-people-create-things-for-free"&gt;
  &lt;/a&gt;
  Why do people create things for free?
&lt;/h2&gt;

&lt;p&gt;Open source is all about accessibility for everyone, with ease.&lt;/p&gt;

&lt;p&gt;I am good with examples so let me show one example of me. &lt;br&gt;
I am working on this project named &lt;a href="https://github.com/RajvirSingh1313/elecrue"&gt;Elecrue&lt;/a&gt;. I started this project and made it public for two reasons, I created it for my own because I was looking for a good starter code for electron-react in js but I didn't found one so I created one myself, the second I wanted to repay my open-source debt as &lt;a href="https://github.com/facebook/react"&gt;React&lt;/a&gt;, &lt;a href="https://github.com/electron/electron"&gt;Electron&lt;/a&gt;, &lt;a href="https://github.com/vuejs/vue"&gt;Vue&lt;/a&gt; is open source. And the third and bit selfish one, Is that I wanted to beef up my resume.&lt;/p&gt;

&lt;p&gt;By doing so, I helped a lot of other developers who were having the same problem, now they can use it to create other things to make more amazing things open source, like &lt;a href="https://github.com/yyx990803"&gt;Evan You&lt;/a&gt; did by creating &lt;a href="https://github.com/vuejs/vue"&gt;Vue&lt;/a&gt; open-source, and now hundreds of hundreds of developers and companies use it to create more amazing things. In this great loop, everyone makes their contributions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-repay-open-source-debt"&gt;
  &lt;/a&gt;
  How to repay Open Source Debt?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XInq67bI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/vqtfwk0H9VgAAAAC/im-finally-gonna-be-able-to-pay-off-all-the-money-i-owe-stan.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XInq67bI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/vqtfwk0H9VgAAAAC/im-finally-gonna-be-able-to-pay-off-all-the-money-i-owe-stan.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you understood the debt, now let's talk about the ways you can repay it.&lt;br&gt;
There are many ways of repaying this debt, let's talk about some that are most common ways&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want someone to give you something good then you need to give something good too&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;By writing quality code for a problem and then sharing it&lt;/strong&gt;:-&lt;br&gt;
As the statement itself explains, You should just do like me or Evan You, write a code for a problem or a fun project that you think will both make your resume good and will help someone&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;By Educating others&lt;/strong&gt;:-&lt;br&gt;
Another way is to educate others. There are many ways to do this, Like creating tutorials on youtube, writing blogs, or making Github repositories for storing and sharing learning material like &lt;a href="https://github.com/microsoft/IoT-For-Beginners"&gt;IoT Course from Microsoft&lt;/a&gt; (which I am learning IoT from).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;By Helping Others&lt;/strong&gt;:-&lt;br&gt;
Open Source is all about helping each other, so if you happened to find any bug in your favorite library or framework, then create an issue on its repository. If you have a solution for that bug, make a pull request on it. By doing so you are helping yourself and others, And it will add a big pulse to your resume.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;By Sponsoring the creator or project&lt;/strong&gt;:-&lt;br&gt;
I used Evan You as an example a lot of times to let's use him as the last example too. If you have seen his &lt;a href="https://github.com/yyx990803"&gt;Github profile&lt;/a&gt; and &lt;a href="https://github.com/vuejs/vue"&gt;Vue Github Page&lt;/a&gt; then you would have noticed that there is an option to sponsor a project or the developer, it means you can pay the developer or the project via Github to backup developer. As the project grows large like Vue it needs a lot of maintenance so often developers don't have the time or energy to maintain the project as there is a lot of work and time they need to pour in. So the people or the companies who uses the project, pays the developer a small amount so the developer keep maintaining the project&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As October is coming up, there is a month-long celebration called &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest&lt;/a&gt;, to promote open source. I think it is a good way to remember to repay your open-source debt. To learn about it more check out their website:-  &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;https://hacktoberfest.digitalocean.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it, I hope I explained well this great debt that never ends for good, If you liked it then share this article, If not then don't forget to give me feedback so I can improve myself.&lt;/p&gt;

&lt;p&gt;Have a good day,&lt;br&gt;
Rajvir Singh&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>opensourcedebt</category>
    </item>
    <item>
      <title>AWSSDK.CloudFormation (for AWS CloudFormation)</title>
      <author>Ahmed Adel</author>
      <pubDate>Sat, 11 Sep 2021 14:26:31 +0000</pubDate>
      <link>https://dev.to/ahmedadel/awssdk-cloudformation-o16</link>
      <guid>https://dev.to/ahmedadel/awssdk-cloudformation-o16</guid>
      <description>&lt;p&gt;✦ The Fourth SDK we are going to talk about is &lt;code&gt;AWSSDK.CloudFormation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First of all, let's have a brief about &lt;code&gt;Amazon CloudFormation&lt;/code&gt; in AWS...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#%E2%9E%BDwhat-is-amazon-cloudformation"&gt;
  &lt;/a&gt;
  ➽What is Amazon CloudFormation?
&lt;/h1&gt;

&lt;p&gt;☞ &lt;code&gt;AWS CloudFormation&lt;/code&gt; is a service that helps you model and set up your &lt;strong&gt;AWS resources&lt;/strong&gt; so that you can spend less time managing those resources and more time focusing on your applications that run in AWS. &lt;br&gt;
☞ You create a template that describes all the AWS resources that you want (like &lt;code&gt;Amazon EC2&lt;/code&gt; instances or &lt;code&gt;Amazon RDS&lt;/code&gt; DB instances), and &lt;code&gt;CloudFormation&lt;/code&gt; takes care of provisioning and configuring those resources for you.&lt;br&gt;
☞ You don't need to individually create and configure AWS resources and figure out what's dependent on what; &lt;code&gt;CloudFormation&lt;/code&gt; handles that.&lt;br&gt;
☞ Read more about &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html"&gt;Amazon CloudFormation&lt;/a&gt;&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#%E2%9E%BDinstalling-awssdkcloudformation-"&gt;
  &lt;/a&gt;
  ➽Installing AWSSDK.CloudFormation :
&lt;/h1&gt;

&lt;p&gt;☞&lt;code&gt;AWSSDK.CloudFormation&lt;/code&gt; is installed mainly from &lt;a href="https://www.nuget.org/"&gt;Nuget&lt;/a&gt;&lt;br&gt;
☞There is 3 ways to install &lt;code&gt;AWSSDK.CloudFormation&lt;/code&gt;, they are the same as installing &lt;code&gt;AWSSDK.S3&lt;/code&gt; from &lt;a href="https://dev.to/ahmedadel/aws-sdks-for-net-1-awssdk-s3-5e36"&gt;Part 1 of this series&lt;/a&gt;&lt;br&gt;
☞let's use the easiest one, from Package Manager Console by using the Install-Package command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;PM&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;AWSSDK&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CloudFormation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;🌟 Second step is to connect to our AWS account using __ Access keys (Access Key ID and Secret Access Key)__, this was explained before briefly in the &lt;a href="https://dev.to/ahmedadel/aws-sdks-for-net-1-awssdk-s3-5e36#%E2%9E%BDso-how-can-we-use-it-"&gt;first article under (Get AWS Access keys) &lt;/a&gt;&lt;/p&gt;




&lt;p&gt;✦ The AWS SDK for .NET provides APIs for &lt;code&gt;AWS CloudFormation&lt;/code&gt; clients. The APIs enable you to work with &lt;code&gt;AWS CloudFormation&lt;/code&gt; features such as &lt;strong&gt;templates&lt;/strong&gt; and &lt;strong&gt;stacks&lt;/strong&gt;.&lt;br&gt;
✦ The example uses the low-level API. The application takes no arguments, but simply gathers information for all stacks that are accessible to the user's credentials and then displays information&lt;br&gt;
about those stacks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Threading.Tasks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Amazon.CloudFormation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Amazon.CloudFormation.Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;CFNListResources&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Create the CloudFormation client&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;cfnClient&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AmazonCloudFormationClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="c1"&gt;// List the resources for each stack&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nf"&gt;ListResources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfnClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;cfnClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DescribeStacksAsync&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;//&lt;/span&gt;
        &lt;span class="c1"&gt;// Method to list stack resources and other information&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;ListResources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;IAmazonCloudFormation&lt;/span&gt; &lt;span class="n"&gt;cfnClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DescribeStacksResponse&lt;/span&gt; &lt;span class="n"&gt;responseDescribeStacks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Getting CloudFormation stack information..."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Stack&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;responseDescribeStacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stacks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Basic information for each stack&lt;/span&gt;
                &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\n------------------------------------------------"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"\nStack: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StackName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"  Status: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StackStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"  Created: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreationTime&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="c1"&gt;// The tags of each stack (etc.)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"  Tags:"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;// The resources of each stack&lt;/span&gt;
                &lt;span class="n"&gt;DescribeStackResourcesResponse&lt;/span&gt; &lt;span class="n"&gt;responseDescribeResources&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
                  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;cfnClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DescribeStackResourcesAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DescribeStackResourcesRequest&lt;/span&gt;
                  &lt;span class="p"&gt;{&lt;/span&gt;
                      &lt;span class="n"&gt;StackName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StackName&lt;/span&gt;
                  &lt;span class="p"&gt;});&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseDescribeResources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StackResources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"  Resources:"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StackResource&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;responseDescribeResources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StackResources&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LogicalResourceId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResourceStatus&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\n------------------------------------------------"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt; &lt;a href="https://docs.aws.amazon.com/index.html"&gt;AWS official Documentation&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>cloud</category>
      <category>aws</category>
      <category>csharp</category>
    </item>
    <item>
      <title>What are OAuth 2.0 and OIDC (OpenID Connect)? Step By Step Authorization Code Flow With Endpoints</title>
      <author>Engincan VESKE</author>
      <pubDate>Sat, 11 Sep 2021 14:20:24 +0000</pubDate>
      <link>https://dev.to/engincanv/what-are-oauth-2-0-and-oidc-openid-connect-with-endpoints-25kd</link>
      <guid>https://dev.to/engincanv/what-are-oauth-2-0-and-oidc-openid-connect-with-endpoints-25kd</guid>
      <description>&lt;p&gt;Hello everyone,&lt;/p&gt;

&lt;p&gt;In this article, I would like to talk about OAuth 2.0, which is used as a protocol (industry standard) for &lt;strong&gt;Authorization&lt;/strong&gt; and OIDC (OpenID Connect) which is a top layer of the OAuth 2.0 and used for &lt;strong&gt;Authentication&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-oauth-20-and-oidc-what-are-they-used-for"&gt;
  &lt;/a&gt;
  What are OAuth 2.0 and OIDC? What are they used for?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;OAuth 2.0 and OIDC are industry standards used for &lt;strong&gt;Authorization&lt;/strong&gt; and &lt;strong&gt;Authentication&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Every day we use mobile or web applications for our works. Defining username and password for each application, getting harder at some point. Some "password management" applications come into place etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h3&gt;

&lt;p&gt;In 2005 Brad Fitzpatrick developed an authentication protocol to remove these difficulties.&lt;/p&gt;

&lt;p&gt;The main purpose of this protocol was to enable users to define user credentials to a central system/application (for example, Google) and to enable other applications using this protocol to perform relevant transactions using only the necessary information of the users. And this was done through certificates.&lt;/p&gt;

&lt;p&gt;This developed protocol was not an open protocol, and at the same time, it was making the related transactions through certificates. &lt;strong&gt;OAuth Discussion Group&lt;/strong&gt; which was created in 2007, started to create an open authorization protocol. In December 2007, the OAuth protocol was openly made available as v1.0 and in October 2012 it was finalized as &lt;strong&gt;OAuth 2.0&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this way, OAuth 2.0 was filled the missing &lt;strong&gt;Authorization&lt;/strong&gt; part of the OpenID protocol with a &lt;strong&gt;token based&lt;/strong&gt; structure. Instead of certificates, identity-related transactions started to do with tokens.&lt;/p&gt;

&lt;p&gt;Then, in 2004 an identity layer called OIDC (OpenID Connect) developed on the OAuth 2.0 Framework was added and thus Authentication processes were defined within a standard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#oauth-20-structure"&gt;
  &lt;/a&gt;
  OAuth 2.0 Structure
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V59oyzjP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cayd6nrh8g3gmubr5k9t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V59oyzjP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cayd6nrh8g3gmubr5k9t.png" alt="OAuth 2.0 Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above picture, you can see the base structure of OAuth 2.0. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the most basic sense, when we as a user (&lt;strong&gt;Resource Owner&lt;/strong&gt;) want to access our own data, we enter the relevant website (&lt;strong&gt;Client&lt;/strong&gt;) and send a request to the relevant URL. The relevant website communicates with the &lt;strong&gt;Authorization Server&lt;/strong&gt; to query whether we have access to that resource. As a result, the relevant server indicates that we have authorization. We reach the information we want to access as a result that returned by the &lt;strong&gt;Resource Server&lt;/strong&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;Resource Owner&lt;/strong&gt;, &lt;strong&gt;Client&lt;/strong&gt;, &lt;strong&gt;Authorization Server&lt;/strong&gt;, and &lt;strong&gt;Resource Server&lt;/strong&gt; are defined as Roles in OAuth 2.0 protocol. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;OAuth 2.0 offers different types of &lt;strong&gt;Authorization Flows&lt;/strong&gt; according to different usage conditions and these flows are named as follows. 

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Authorization Code Flow&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implicit Flow&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Resource Owner Password Credential Flow&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client Credential Flow&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Authorization Code Flow is used in &lt;strong&gt;Server Side&lt;/strong&gt; applications and Implicit Flow is used in &lt;strong&gt;Browser Based (SPA's)&lt;/strong&gt; applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In these flows, although the basic logic is the same (authorization, token exchange, etc.), the number of steps and methods applied are different. As an example, let's examine the frequently used &lt;strong&gt;Authorization Code Flow&lt;/strong&gt; together with the related endpoints. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-oauth-20-authorization-code-flow"&gt;
  &lt;/a&gt;
  Example: OAuth 2.0 - Authorization Code Flow
&lt;/h3&gt;

&lt;p&gt;We can examine this flow in 4 steps:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1-) Authorization Request&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v_LIXl1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbot8wl9vxiik0h7xkgf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v_LIXl1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbot8wl9vxiik0h7xkgf.png" alt="Authorization Request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If we examine the related request, we can see that we passed a query parameter named &lt;strong&gt;"client_id"&lt;/strong&gt;. This "client_id" represents our application defined within the OAuth 2.0 protocol. In other word, it's a value that identifies the relevant application. The &lt;strong&gt;"scope"&lt;/strong&gt; parameter specifies the scope of the relevant authorization. In other words, the user is only allowed to see the relevant information in the &lt;code&gt;resource&lt;/code&gt; and &lt;code&gt;profile&lt;/code&gt; scope above. User can't access any other part of the application (e.g. delete contact) by using the generated token. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Redirect_uri" represents the URL where the application we are using will get and use the relevant token.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The most important parameter here, the &lt;strong&gt;"response_type"&lt;/strong&gt; parameter, shows which flow the request will be made with. (&lt;strong&gt;“code”&lt;/strong&gt; for Authorization Code Flow) &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2-) Authorization Response&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After the &lt;strong&gt;Authorization Server&lt;/strong&gt; ensure that the relevant request is valid and in the correct format as well, it sends a GET request with the &lt;strong&gt;Authorization Code&lt;/strong&gt; to the relevant callback url (redirect_uri) specified in the request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_KHm2EyC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9utr5ezo8mvsuwcipei4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_KHm2EyC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9utr5ezo8mvsuwcipei4.png" alt="Authorization Response"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3-) Token Request&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After obtaining the &lt;strong&gt;Authorization Code&lt;/strong&gt;, a token request is made by using the relevant Authorization Code to obtain a &lt;strong&gt;Access Token&lt;/strong&gt;. (Token exchange =&amp;gt; Authorization Code ↔ Access Token)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IaOF8xFQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g0iw4m44d15gj0hkj8p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IaOF8xFQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g0iw4m44d15gj0hkj8p.png" alt="Token Request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As can be seen in this request, &lt;strong&gt;Authorization Code&lt;/strong&gt; is specified as the &lt;code&gt;grant_type&lt;/code&gt; and if this request is successful Authorization Server redirects us to the route specified in the "redirect_uri" parameter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4-) Token Response&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If the "Token Request" we made in the third step is successful, a similar response returns as below and can be used by the &lt;strong&gt;Client&lt;/strong&gt; (the application we want to use).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CH9UxgoT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imhuzmrsphbbvgd6hp80.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CH9UxgoT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imhuzmrsphbbvgd6hp80.png" alt="Token Response"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now, with this "access_token" the user can access its own data from &lt;strong&gt;Resource Server&lt;/strong&gt; through the &lt;strong&gt;Client&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Here, if the "refresh_token" is also returned as a result of the request, when the "access_token" expires, a request can be made to renew the related "access_token" with this token. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#oidc-openid-connect-structure"&gt;
  &lt;/a&gt;
  OIDC (OpenID Connect) Structure
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xzp6JFKB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvyqpzisvvnlhhkg92lk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xzp6JFKB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvyqpzisvvnlhhkg92lk.png" alt="OIDC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Simple &lt;strong&gt;identity layer&lt;/strong&gt; on top of the OAuth 2.0 protocol.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OpenID Connect can be thought of as an &lt;strong&gt;identity layer&lt;/strong&gt; added on top of the OAuth 2.0 protocol to enable the OAuth 2.0 protocol to be used for &lt;strong&gt;Authentication&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;OpenID Connect contains a meta-data document (&lt;strong&gt;.well-known/openid-configuration&lt;/strong&gt;) that defines the information required to login through an application. (Which urls should be used, which scopes it contains, etc.) &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to view the relevant metadata document as an example, you can access the Microsoft's OIDC metadata document by navigating to &lt;a href="https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration"&gt;https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As in OAuth 2.0, transactions are performed using flows in OIDC. As an example, let's examine the endpoints of &lt;strong&gt;Authorization Code Flow&lt;/strong&gt; for OIDC as in OAuth 2.0. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-oauth-20-authorization-code-flow"&gt;
  &lt;/a&gt;
  Example: OAuth 2.0 - Authorization Code Flow
&lt;/h3&gt;

&lt;p&gt;We can examine this flow in 6 steps:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1-) Authentication Request&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pf7GXyzP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bd5fed5c8evacmvhzhg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pf7GXyzP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bd5fed5c8evacmvhzhg1.png" alt="Authentication Request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If we examine the related endpoint, we can see that a value called &lt;strong&gt;openid&lt;/strong&gt; is passed in the scope section. We can actually think of this as the equivalent of the identity layer concept we used when defining OIDC. With this scope added to the OAuth 2.0 protocol, Authorization Server now handles the relevant request within the scope of OIDC. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2-) Authentication Response&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0QxUpz3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9t05qw2399ydpwhx9i4u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0QxUpz3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9t05qw2399ydpwhx9i4u.png" alt="Authentication Response"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Here, as in OAuth 2.0, a &lt;strong&gt;GET&lt;/strong&gt; request is sent to the callback-url (redirect-uri) with the &lt;code&gt;Authorization Code&lt;/code&gt;. In this way, the Client becomes aware of the relevant authorization code. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3-) Token Request&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ja-8G-W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sw7xwsqiqipdozgj40u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ja-8G-W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sw7xwsqiqipdozgj40u.png" alt="Token Request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Then, the relevant Client requests a token from the Authorization Server with the "authorization_code" it has obtained. (Token exchange =&amp;gt; Authorization Code ↔ Access Token)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4-) Token Response&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OdL-bo8E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsicgbg5j8qv8ids1nis.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OdL-bo8E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsicgbg5j8qv8ids1nis.png" alt="Token Response"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we examine the response we can see the "id_token" section.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;ID_Token&lt;/strong&gt;: It can be thought of as an identity card. Contains information about the end user. It is in JWT format. It can be thought of as the add-on that OIDC brings to OAuth 2.0. In this way, the Authentication process can happen. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QprdJd90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ty2f6ljvlut5on8psgrz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QprdJd90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ty2f6ljvlut5on8psgrz.png" alt="ID_Token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5-) UserInfo Request - Obtaining End User's Information&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wrIeRimM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7aidu01ih0ghab6f4hy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wrIeRimM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7aidu01ih0ghab6f4hy.png" alt="UserInfo Request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The UserInfo endpoint returns information about the logged in user (name, surname, etc.). When the client needs the information of the relevant user, he can obtain the necessary information by using this endpoint. (Note that the relevant user is now authenticated and a request is made to the endpoint using the Bearer Authorization.) &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;6-) UserInfo Response&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vG95h6Rt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8u3o5pkngv1g7m5dz6g8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vG95h6Rt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8u3o5pkngv1g7m5dz6g8.png" alt="UserInfo Response"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If the request that we made in the previous step is successful, the user's information receives. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As another method, the user's relevant information can be accessed by decoding the previously generated "Id_Token" value. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Thanks for reading this article, I hope you've enjoyed it. See you in the next article...&lt;/p&gt;

</description>
      <category>oauth2</category>
      <category>authorization</category>
      <category>authentication</category>
      <category>identity</category>
    </item>
    <item>
      <title>GTM - Ferramenta oficial de features temporárias que viverão para sempre.</title>
      <author>Gregory Russo</author>
      <pubDate>Sat, 11 Sep 2021 13:53:36 +0000</pubDate>
      <link>https://dev.to/gregoryjvrusso/gtm-ferramenta-oficial-de-features-temporarias-que-viverao-para-sempre-3c88</link>
      <guid>https://dev.to/gregoryjvrusso/gtm-ferramenta-oficial-de-features-temporarias-que-viverao-para-sempre-3c88</guid>
      <description>&lt;p&gt;No dia a dia de um time de desenvolvimento, a pressão para a implementação de uma feature ou principalmente a correção de um bug é gigantesca e realmente explicável, mas essa pressão acaba nos levando a tomar decisões que a longo prazo podem onerar muito a performance do site.&lt;/p&gt;

&lt;p&gt;Se você precisa ter em mãos os dados de sua página, provavelmente você utiliza a dupla: Google Analytics (GA) e o Google Tag Manager (GTM). Aqui não estarei tão focado em explicar as suas funções, neste &lt;a href="https://www.alura.com.br/artigos/google-analytics-e-google-tag-manager"&gt;artigo da Alura&lt;/a&gt;, temos uma explicação clara sobre a função e importância de cada um. Minha intenção é conseguir te ajudar a argumentar com seu PO sobre o porquê priorizar a soluções definitivas o mais rápido possível sempre que o GTM for utilizado da maneira errada.&lt;/p&gt;

&lt;p&gt;O GTM implementa uma série de tags na nossa página, isso é, blocos de código, com essa facilidade, a área de marketing tem uma ferramenta fácil e rápida para integrar scripts de terceiros na página, manipular cookies ou implementar trackings do GA, porém, junto disso, trazemos a possibilidade de alterar o front-end do nosso site em produção, tornando-se a ferramenta oficial para features temporárias que viverão para sempre no seu site.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qual-o-problema-com-o-gtm"&gt;
  &lt;/a&gt;
  Qual o problema com o GTM?
&lt;/h2&gt;

&lt;p&gt;O GTM nos traz a possibilidade de implementarmos HTML na página, incluindo a tag &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, isso é, podemos rodar qualquer código Javascript, manipulando qualquer elemento do DOM. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kczXgs4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gw7stkm3mi42hh2lomzu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kczXgs4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gw7stkm3mi42hh2lomzu.png" alt="Imagem de uma tag da ferramenta Google Tag Manager"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Porém, sabemos que muitas vezes criar uma feature dentro do fluxo comum de deploy é custoso, algumas empresas passam por processos de aprovação de GMUD’s, podendo levar até dias para que um deploy esteja de fato no ar, nesse momento, ferramentas como o GTM se tornam tentadoras.&lt;/p&gt;

&lt;p&gt;É lógico que, dentro desse cenário citado, caso aconteça um deploy que gere um bug em produção, a busca por uma solução rápida faz todo sentido, não estou aqui para julgar e criticar quem pensa em resolver, antes de qualquer outra coisa, minha crítica é quando não realizamos a priorização dessa correção no código fonte de maneira imediata. &lt;/p&gt;

&lt;p&gt;O script do GTM é implementado no código fonte da sua página, quando se inicia o carregamento do seu site no navegador, uma requisição é realizada para a sua API que responde todas as tags que serão implementadas na sua página, incluindo as suas gambiarras. Apesar da ferramenta até possui um sistema de gatilho para que uma tag seja disparada apenas no momento desejado, por exemplo, podendo definir que uma tag carregue apenas em uma URL específica, porém, independentemente se essa tag será disparada, o seu código é retornado pela API, aumentando o tamanho dessa resposta e carregando mais conteúdo que o necessário.&lt;/p&gt;

&lt;p&gt;De maneira simplória, quanto mais tag criada tivemos no GTM, maior o tamanho do retorno do script, consequentemente, mais lento será o carregamento da sua página.&lt;/p&gt;

&lt;p&gt;Por conta desse carregamento ser feito no navegador, caso você realize uma manipulação no DOM para alterar um elemento HTML, por exemplo, corre o risco que o usuário veja essa mudança acontecendo, gerando um efeito indesejado na página. A grosso modo, o fluxo funcionaria mais ou menos assim: o servidor devolveria o código fonte da sua página com o seu elemento HTML já montado, posteriormente o script do GTM é acionado, realizando uma chamada para a API e aguardando seu retorno, após essa resposta acontecer, as tags serão carregadas uma a uma na sua página e aí sim, sendo disparadas, somente nesse momento que a sua gambiarra aparecerá de fato.&lt;/p&gt;

&lt;p&gt;A minha intenção, caro leitor, é instigar o time de desenvolvedores para que sempre que uma mudança desse tipo seja realizada no GTM, logo, seja priorizada para corrigir em definitivo e excluir a gambiarra nessa ferramenta, que apesar de muito fácil, pode gerar grandes problemas a longo prazo se não for gerenciada da maneira certa.&lt;/p&gt;

&lt;p&gt;E você, qual sua experiência com o GTM? Muita gambiarra implementada nele? Me diga nos comentários.&lt;/p&gt;

</description>
      <category>performance</category>
      <category>javascript</category>
      <category>gtm</category>
      <category>tagmanager</category>
    </item>
    <item>
      <title>React Query Error Handling</title>
      <author>Dominik D</author>
      <pubDate>Sat, 11 Sep 2021 13:28:11 +0000</pubDate>
      <link>https://dev.to/tkdodo/react-query-error-handling-10go</link>
      <guid>https://dev.to/tkdodo/react-query-error-handling-10go</guid>
      <description>&lt;p&gt;Handling errors is an integral part of working with asynchronous data, especially data fetching. We have to face it: Not all requests will be successful, and not all Promises will be fulfilled.&lt;/p&gt;

&lt;p&gt;Oftentimes, it is something that we don't focus on right from the beginning though. We like to handle "sunshine cases" first where error handling becomes an afterthought.&lt;/p&gt;

&lt;p&gt;However, not thinking about how we are going to handle our errors might negatively affect user experience. To avoid that, let's dive into what options React Query offers us when it comes to error handling.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;React Query needs a rejected Promise in order to handle errors correctly. Luckily, this is exactly what you'll get when you work with libraries like &lt;a href="https://axios-http.com/"&gt;axios&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are working with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;the fetch API&lt;/a&gt; or other libraries that &lt;em&gt;do not&lt;/em&gt; give you a rejected Promise on erroneous status codes like 4xx or 5xx, you'll have to do the transformation yourself in the &lt;em&gt;queryFn&lt;/em&gt;. This is covered in &lt;a href="https://react-query.tanstack.com/guides/query-functions#usage-with-fetch-and-other-clients-that-do-not-throw-by-default"&gt;the official docs&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-standard-example"&gt;
  &lt;/a&gt;
  The standard example
&lt;/h1&gt;

&lt;p&gt;Let's see how most examples around displaying errors look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Loading...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// ✅ standard error handling&lt;/span&gt;
  &lt;span class="c1"&gt;// could also check for: todos.status === 'error'&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;An error occurred&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Todo&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we're handling error situations by checking for the &lt;em&gt;isError&lt;/em&gt; boolean flag (which is derived from the &lt;em&gt;status&lt;/em&gt; enum) given to us by React Query.&lt;/p&gt;

&lt;p&gt;This is certainly okay for some scenarios, but has a couple of drawbacks, too:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It doesn't handle background errors very well: Would we really want to unmount our complete Todo List just because a background refetch failed? Maybe the api is temporarily down, or we reached a rate limit, in which case it might work again in a few minutes. You can have a look at &lt;a href="https://tkdodo.eu/blog/status-checks-in-react-query"&gt;#4: Status Checks in React Query&lt;/a&gt; to find out how to improve that situation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It can become quite boilerplate-y if you have to do this in every component that wants to use a query.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To solve the second issue, we can use a great feature provided directly by React itself:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#error-boundaries"&gt;
  &lt;/a&gt;
  Error Boundaries
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/error-boundaries.html#introducing-error-boundaries"&gt;Error Boundaries&lt;/a&gt; are a general concept in React to catch runtime errors that happen during rendering, which allows us to react (pun intended) properly to them and display a fallback UI instead.&lt;/p&gt;

&lt;p&gt;This is nice because we can wrap our components in Error Boundaries at any granularity we want, so that the rest of the UI will be unaffected by that error.&lt;/p&gt;

&lt;p&gt;One thing that Error Boundaries &lt;em&gt;cannot&lt;/em&gt; do is catch asynchronous errors, because those do not occur during rendering. So to make Error Boundaries work in React Query, the library internally catches the error for you and re-throws it in the next render cycle so that the Error Boundary can pick it up.&lt;/p&gt;

&lt;p&gt;I think this is a pretty genius yet simple approach to error handling, and all you need to do to make that work is pass the &lt;em&gt;useErrorBoundary&lt;/em&gt; flag to your query (or provide it via a default config):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ✅ will propagate all fetching errors to the nearest Error Boundary&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;useErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Todo&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Loading...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Starting with &lt;a href="https://github.com/tannerlinsley/react-query/releases/tag/v3.23.0"&gt;v3.23.0&lt;/a&gt;, you an even customize which errors should go towards an Error Boundary, and which ones you'd rather handle locally by providing a function to &lt;em&gt;useErrorBoundary&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// 🚀 only server errors will go to the Error Boundary&lt;/span&gt;
  &lt;span class="na"&gt;useErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also works for &lt;a href="https://react-query.tanstack.com/guides/mutations"&gt;mutations&lt;/a&gt;, and is quite helpful for when you're doing form submissions. Errors in the 4xx range can be handled locally (e.g. if some backend validation failed), while all 5xx server errors can be propagated to the Error Boundary.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#showing-error-notifications"&gt;
  &lt;/a&gt;
  Showing error notifications
&lt;/h1&gt;

&lt;p&gt;For some use-cases, it might be better to show error toast notifications that pop up somewhere (and disappear automatically) instead of rendering Alert banners on the screen. These are usually opened with an imperative api, like the one offered by &lt;a href="https://react-hot-toast.com/"&gt;react-hot-toast&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;toast&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-hot-toast&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Something went wrong&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So how can we do this when getting an error from React Query?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-onerror-callback"&gt;
  &lt;/a&gt;
  The onError callback
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ⚠️ looks good, but is maybe _not_ what you want&lt;/span&gt;
    &lt;span class="na"&gt;onError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Something went wrong: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At first glance, it looks like the &lt;em&gt;onError&lt;/em&gt; callback is exactly what we need to perform a side effect if a fetch fails, and it will also work - for as long as we only use the custom hook once!&lt;/p&gt;

&lt;p&gt;You see, the &lt;em&gt;onError&lt;/em&gt; callback on &lt;em&gt;useQuery&lt;/em&gt; is called for every &lt;em&gt;Observer&lt;/em&gt;, which means if you call &lt;em&gt;useTodos&lt;/em&gt; twice in your application, you will get two error toasts, even though only one network request fails.&lt;/p&gt;

&lt;p&gt;Conceptually, you can imagine that the onError callback functions similar to a &lt;em&gt;useEffect&lt;/em&gt;. So if we expand the above example to that syntax, it will become more apparent that this will run for every consumer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// 🚨 effects are executed for every component&lt;/span&gt;
  &lt;span class="c1"&gt;// that uses this custom hook individually&lt;/span&gt;
  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Something went wrong: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, if you don't add the callback to your custom hook, but to the invocation of the hook, this is totally fine. But what if we don't really want to notify all Observers that our fetch failed, but just notify the user &lt;em&gt;once&lt;/em&gt; that the underlying fetch failed? For that, React Query has callbacks on a different level:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-global-callbacks"&gt;
  &lt;/a&gt;
  The global callbacks
&lt;/h2&gt;

&lt;p&gt;The global callbacks need to be provided when you create the &lt;em&gt;QueryCache&lt;/em&gt;, which happens implicitly when you create a &lt;em&gt;new QueryClient&lt;/em&gt;, but you can also customize that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;queryCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryCache&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;onError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Something went wrong: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will now only show an error toast once for each query, which exactly what we want 🥳. It is also likely the best place to put any sort of error tracking or monitoring that you want to perform, because it's guaranteed to run only once per request and &lt;em&gt;cannot&lt;/em&gt; be overwritten like e.g. the defaultOptions.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h1&gt;

&lt;p&gt;The three main ways to handle errors in React Query are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;em&gt;error&lt;/em&gt; property returned from useQuery&lt;/li&gt;
&lt;li&gt;the &lt;em&gt;onError&lt;/em&gt; callback (on the query itself or the global QueryCache / MutationCache)&lt;/li&gt;
&lt;li&gt;using Error Boundaries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can mix and match them however you want, and what I personally like to do is show error toasts for background refetches (to keep the stale UI intact) and handle everything else locally or with Error Boundaries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;queryCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryCache&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;onError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// 🎉 only show error toasts if we already have data in the cache&lt;/span&gt;
      &lt;span class="c1"&gt;// which indicates a failed background update&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Something went wrong: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;That's it for today. Feel free to reach out to me on &lt;a href="https://twitter.com/tkdodo"&gt;twitter&lt;/a&gt;&lt;br&gt;
if you have any questions, or just leave a comment below ⬇️&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Cyber Security Tools</title>
      <author>Ketan Patil</author>
      <pubDate>Sat, 11 Sep 2021 13:21:14 +0000</pubDate>
      <link>https://dev.to/ketan_patil/cyber-security-tools-4d17</link>
      <guid>https://dev.to/ketan_patil/cyber-security-tools-4d17</guid>
      <description>&lt;p&gt;It is very important to protect systems againts various cyber attacks. There are number of cyber attacks happening on the internet everyday. It is essential for every organization to keep IT environment secure, for that variouse important cyber security tools are used to ensure the security of orgnaization. Out of which 20 most commonly used tools are as follow:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-wireshark"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.wireshark.org/"&gt;Wireshark&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Wireshark is a open source software which is use to monitor network traffic in real-time. It efficiently captures data packets and tries to display that packet data as detailed as possible. &lt;br&gt;
&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free software&lt;/li&gt;
&lt;li&gt;Available for multiple platforms – Windows &amp;amp; UNIX&lt;/li&gt;
&lt;li&gt;Can see detailed information about packets within a network&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-nmap"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://nmap.org/"&gt;Nmap&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nmap is open source free tool which IP packets to determine what hosts are available on the network, Services that are enabled, Operating systems and version of the hosts and many other aspects of network. &lt;br&gt;
&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free and open source&lt;/li&gt;
&lt;li&gt;Powerful: capable to scan huge network &lt;/li&gt;
&lt;li&gt;Portable: Most operating systems are supported, including Linux, Microsoft Windows&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-kali-linux"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.kali.org/"&gt;Kali Linux&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is the excellent penetration testing tool use by many organizations. This contains various security tools used for security auditing. Some of these tools are executable while some are command line based. &lt;br&gt;
&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Advanced Penetration Testing tools&lt;/li&gt;
&lt;li&gt;Open sourced&lt;/li&gt;
&lt;li&gt;provide more security &amp;amp; Stability&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-john-the-ripper"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://www.openwall.com/john/"&gt;John the Ripper&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This tool is used for testing password strength. This tool can quickly look for complex ciphers, encrypted logins, hash-type passwords and identify weak passwords. &lt;a href="https://www.varonis.com/blog/john-the-ripper/"&gt;Download and setup guide&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Automates hash generation&lt;/li&gt;
&lt;li&gt;Makes it easier to run brute-force &lt;/li&gt;
&lt;li&gt;Automates work with sessions&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-xerxes"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://github.com/XCHADXFAQ77X/XERXES"&gt;Xerxes&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Xerxes is the most powerful DOS tool.It provides the capacity to launch multiple independent attacks against several target sites without necessarily requiring a botnet.&lt;br&gt;
&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TLS Support&lt;/li&gt;
&lt;li&gt;Multiprocessing support&lt;/li&gt;
&lt;li&gt;Multiple Attack vectors&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#6-keepass"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://keepass.info/"&gt;KeePass&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;KeePass is a free open source password manager, which helps you to manage your passwords in a secure way. You can store all your passwords in one database, which is locked with a master key. So you only have to remember one single master key to unlock the whole database. Database files are encrypted using the best and most secure encryption algorithms like AES-256.&lt;br&gt;
&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your information is protected by a very high level of encryption.&lt;/li&gt;
&lt;li&gt;You only have to remember one master password.&lt;/li&gt;
&lt;li&gt;You can use this single password to unlock a database that contains all your stored passwords.&lt;/li&gt;
&lt;li&gt;You can organize passwords into groups.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#7-vipre"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://www.vipre.com/"&gt;VIPRE&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;VIPRE is one of the most widely used cyber security tools used to protect computers from malicious attacks, malware, and spam messages with no hassle. It helps to stay safe against new cyber threats and crimes.&lt;br&gt;
&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is quite effective against all kinds of viruses and provides 360-degree protection.&lt;/li&gt;
&lt;li&gt;Its scanning action is quite fast and less time taking.&lt;/li&gt;
&lt;li&gt;It has the ability to scan emails too, from viruses.&lt;/li&gt;
&lt;li&gt;It is reliable, easy-to-use, and provides excellent protection.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#8-metasploit"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://www.metasploit.com/"&gt;Metasploit&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is a Penetration testing software.It discovering vulnerabilities in the system. These penetration testing tools can examine the different security systems, including web-based apps, servers, networks, and so on.&lt;br&gt;
&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open source.&lt;/li&gt;
&lt;li&gt;Supports large networks.&lt;/li&gt;
&lt;li&gt;GUI environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#9-cain-and-abel"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://en.wikipedia.org/wiki/Cain_and_Abel_(software)"&gt;Cain and Abel&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is a password recovery tool for Microsoft Windows. It could recover many kinds of passwords using methods such as network packet sniffing, cracking various password hashes by using methods such as dictionary attacks, brute force.&lt;br&gt;
&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have various supporting functionalities.&lt;/li&gt;
&lt;li&gt;Open source free software.&lt;/li&gt;
&lt;li&gt;Good start for all kinds of packet sniffing exercises&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#10-tcpdump"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://www.tcpdump.org/"&gt;Tcpdump&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is an efficient packet sniffer security tools used to monitor and log TCP/IP traffic connected via a network. it is a command-based tool, it can efficiently define network security and the packet contents of system traffic. &lt;br&gt;
&lt;strong&gt;Advantages:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It can save the captured packets in a file for an advanced analysis.&lt;/li&gt;
&lt;li&gt;Several configuration options are available&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#11-nikto"&gt;
  &lt;/a&gt;
  11. &lt;a href="https://cirt.net/Nikto2"&gt;Nikto&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is used to detect web vulnerabilities and take appropriate actions accordingly. The software contains a database that includes around 6400 different threats. Security professionals keep updating this database so that the users may easily identify the new vulnerabilities.&lt;br&gt;
&lt;strong&gt;Advantages:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open source, Fast and portable.&lt;/li&gt;
&lt;li&gt;Easy to integrate in other penetration testing tools.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#12-paros-proxy"&gt;
  &lt;/a&gt;
  12. &lt;a href="https://paros.soft112.com/"&gt;Paros Proxy&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Paros Proxy is a Java-based security tool that contains a variety of other tools like vulnerability scanners, traffic recorder, web spider, etc. this tool helps to scan security tests for identifying web vulnerabilities and maintaining network activities in real-time.&lt;br&gt;
&lt;strong&gt;Advantages:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web based light weight tool&lt;/li&gt;
&lt;li&gt;Protection And Security&lt;/li&gt;
&lt;li&gt;Anonymity When Using The Internet&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#13-nessus-professional"&gt;
  &lt;/a&gt;
  13. &lt;a href="https://www.tenable.com/products/nessus"&gt;Nessus Professional&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is a vulnerability assessment tool created by Tenable Inc. that can search out various vulnerabilities in a network such as the denial of service vulnerabilities. It helps in finding vulnerabilities that might allow access to unauthorized users or the loss of sensitive information.&lt;br&gt;
&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vulnerability scans on a regular basis and provides a full report.&lt;/li&gt;
&lt;li&gt;Understand the current threats and issues with current network devices.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#14-aircrackng"&gt;
  &lt;/a&gt;
  14. &lt;a href="https://www.aircrack-ng.org/"&gt;Aircrack-ng&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Aircrack-ng is a tool that comes pre-installed in Kali Linux and is used for wifi network security and hacking. Aircrack is an all in one packet sniffer, WEP and WPA/WPA2 cracker, analyzing tool and a hash capturing tool. &lt;br&gt;
&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To list all network interfaces.&lt;/li&gt;
&lt;li&gt;To Star a network interface at a specific channel.&lt;/li&gt;
&lt;li&gt;Free and open source&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#15-tor"&gt;
  &lt;/a&gt;
  15. &lt;a href=""&gt;Tor&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Tor or &lt;strong&gt;The Onion Router&lt;/strong&gt; is a service created to allow people to anonymously browse the Internet. It is a decentralized system that allows users to connect through a network of relays rather than making a direct connection. The benefit of this method is that your IP address is hidden from the sites you visit by bouncing your connection from server to server at random.&lt;br&gt;
&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free and portable&lt;/li&gt;
&lt;li&gt;Deep web access&lt;/li&gt;
&lt;li&gt;Hides information&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cybersecurity</category>
      <category>security</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Intro to Git and GitHub</title>
      <author>samkb@420</author>
      <pubDate>Sat, 11 Sep 2021 13:08:40 +0000</pubDate>
      <link>https://dev.to/samkb420/intro-to-git-and-github-5fig</link>
      <guid>https://dev.to/samkb420/intro-to-git-and-github-5fig</guid>
      <description>&lt;p&gt;Git is  Version Control System(VCS) for tracking changes in computer files&lt;br&gt;
It entails the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Distributed Version Control&lt;/li&gt;
&lt;li&gt;Coordinates work between Multiple developers (Collaboration)&lt;/li&gt;
&lt;li&gt;Who made What changes and When&lt;/li&gt;
&lt;li&gt;Revert back at anytime (rollback)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GitHub is a for-profit company that offers a cloud-based Git repository hosting service.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#concepts-of-github"&gt;
  &lt;/a&gt;
  Concepts of GitHub
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Keep track of code history&lt;/li&gt;
&lt;li&gt;Take 'snapshots' of your files&lt;/li&gt;
&lt;li&gt;You can visit any snapshot at anytime&lt;/li&gt;
&lt;li&gt;Local &amp;amp; Remote repositories&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets make our hands Dirty and get Started by installing and performing basic git commands&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;Click on the below link it will take you to git download page then choose your OS and continue with the installation process follow the Instruction&lt;br&gt;
&lt;a href="https://git-scm.com/downloads"&gt;https://git-scm.com/downloads&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;Love command-line let's Dive in.😎&lt;/p&gt;

&lt;p&gt;Check Git version&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git &lt;span class="nt"&gt;--version&lt;/span&gt;

git version 2.25.1

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Configuring git on Your machine&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.name &lt;span class="s1"&gt;'yourusername'&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.email &lt;span class="s1"&gt;'youremail@abc.com'&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Need help?&lt;br&gt;
&lt;code&gt;git help &amp;lt;verb&amp;gt;&lt;/code&gt; or &lt;code&gt;git &amp;lt;verb&amp;gt; --help&lt;/code&gt;&lt;br&gt;
ie. &lt;code&gt;git git help branch&lt;/code&gt; or &lt;code&gt;git branch --help&lt;/code&gt;&lt;br&gt;
Lets create a directory where we shall do git operation and navigate into the directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir Learning_git 
$ cd Learning_git

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;that's pretty easy,&lt;/p&gt;

&lt;p&gt;Initializing a Git Repository&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git init 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;expected output&lt;br&gt;
&lt;code&gt;Initialized empty Git repository in /home/samkb420/MyHobby/Learning_git/.git/&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
Adding file(s) to index&lt;br&gt;
let use the ls command to list file and folders.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-la&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;output&lt;br&gt;
&lt;code&gt;total 12&lt;br&gt;
drwxrwxr-x  3 samkb420 samkb420 4096 Aug 19 02:14 ./&lt;br&gt;
drwxrwxr-x 52 samkb420 samkb420 4096 Aug 18 19:11 ../&lt;br&gt;
drwxrwxr-x  7 samkb420 samkb420 4096 Aug 19 02:14 .git/&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
lets create a file.&lt;br&gt;
we shall build a simple calculator in python don't worry if you don't know python its not that complex.&lt;br&gt;
let's open our text editor for me am using vscode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;calc.py
&lt;span class="nv"&gt;$ &lt;/span&gt;code &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let do simple add method in python&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def add(a,b):

    return a + b
print(add(5,5))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;having done that let do the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git add -A  
$ git commit -m "[First commit #0001 ]"
$ git status 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;On branch main
nothing to commit, working tree clean
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now lets push the code in a remote repo in this case I Will use github.&lt;br&gt;
continue into github and create a repo.&lt;br&gt;
lets add the github remote url &lt;br&gt;
i.e&lt;br&gt;
&lt;code&gt;git remote add origin https://github.com/BitgritCampus/Learn_Git_Github.git&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$git remote add origin remote_github_url
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let now push to GitHub&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push -u origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add you credentials username and PAT(personal access token)&lt;br&gt;
Hurrryy !! Done &lt;/p&gt;

&lt;p&gt;Next on Merging.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>github</category>
      <category>codenewbie</category>
      <category>datascience</category>
    </item>
    <item>
      <title>How to deploy a strict Content Security Policy (CSP) with Next.js</title>
      <author>Guy Dumais</author>
      <pubDate>Sat, 11 Sep 2021 13:05:07 +0000</pubDate>
      <link>https://dev.to/guydumais/how-to-deploy-a-strict-content-security-policy-csp-with-next-js-nfj</link>
      <guid>https://dev.to/guydumais/how-to-deploy-a-strict-content-security-policy-csp-with-next-js-nfj</guid>
      <description>&lt;p&gt;Based on the most comprehensive study to date from Google, 95% of real-world Content Security Policy (CSP) deployments are bypassed and 99.34% of hosts with CSP use policies that offer no benefit against XSS.&lt;/p&gt;

&lt;p&gt;This is why Google suggests that the model of designating trust by specifying URL whitelists from which scripts can execute should be replaced with an approach based on nonces and hashes, already defined by the CSP specification and available in major browser implementations. Hence the name strict CSP.&lt;/p&gt;

&lt;p&gt;In the context of a Single Page App (SPA) such as the Next.js React framework, we need to use a Hashed-based CSP in order to properly integrate a strict CSP which will offer real protection against CSS attacks.&lt;/p&gt;

&lt;p&gt;Depending on the complexity of your application, the integration of a hash-based Content Security Policy could be trivial and require a lot of code manipulation. That’s why I’ve come to build a package on NPM specifically designed for Next.js to allow developers to integrate strict CSP in a snap with just a few lines of code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextstrictcsp"&gt;
  &lt;/a&gt;
  next-strict-csp
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/next-strict-csp"&gt;next-strict-csp&lt;/a&gt; is a hash-based Strict Content Security Policy generator for Next.js that is easily integrated in the _document.tsx file of your Next.js application. Once in production, it will automatically inject the hashes into the content security policy meta tag and protect against XSS once deployed and cached on CDN.&lt;/p&gt;

&lt;p&gt;Here is an example of &lt;strong&gt;_document.tsx&lt;/strong&gt; with basic integration of next-strict-csp:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...

// Next.js libraries
import Document, { Html, Head, Main, NextScript } from 'next/document'

// Next Strict Content Security Policy
import { NextStrictCSP } from 'next-strict-csp'

...

// Enable Head Strict CSP in production mode only
const HeadCSP = process.env.NODE_ENV === 'production' ? NextStrictCSP : Head

...

// Document component
class MyDoc extends Document {

  render() {
    return (
      &amp;lt;Html&amp;gt;
        &amp;lt;HeadCSP&amp;gt;
          { process.env.NODE_ENV === 'production' &amp;amp;&amp;amp; 
          &amp;lt;meta httpEquiv="Content-Security-Policy" /&amp;gt;
          }

          ...

        &amp;lt;/HeadCSP&amp;gt;
        &amp;lt;body&amp;gt;

          ...

          &amp;lt;Main /&amp;gt;
          &amp;lt;NextScript /&amp;gt;

          ...

        &amp;lt;/body&amp;gt;
      &amp;lt;/Html&amp;gt;
    )
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once put live in production, you'll get a content security policy meta tag that looks like this:&lt;br&gt;
&lt;code&gt;&amp;lt;meta http-equiv="Content-Security-Policy" content="script-src 'strict-dynamic' 'sha256-XOzjewwkvGMLaoj+oYCiOZ3kRwb6RT1Ph6vn4qL+XI0=' 'unsafe-inline' http: https:;" slug="/"&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With a strict CSP, you need to hash your inline scripts as well. This could be easily achieved with next-strict-csp by integrating your inline scripts in an array like this in &lt;strong&gt;_document.tsx&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...

// Next.js libraries
import Document, { Html, Head, Main, NextScript } from 'next/document'

// Next Strict Content Security Policy
import { NextStrictCSP } from 'next-strict-csp'

...

// Cloudflare Insights Script (Optional)
const cloudflareJs = `var s = document.createElement('script')
s.src = 'https://static.cloudflareinsights.com/beacon.min.js'
s.setAttribute('data-cf-beacon', '{"token": "YOUR CLOUDFLARE WEB ANALYTICS TOKEN STRING"}')
document.body.appendChild(s)`

// Google Tag Manager Script (Optional)
const GTMJs = `(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&amp;amp;l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','YOUR GOOGLE TAG MANAGER ID STRING');`

// Next Strict CSP
// Inline scripts to hash  (Optional)
NextStrictCSP.inlineJs = [
  cloudflareJs,
  GTMJs
]

...

// Enable Head Strict CSP in production mode only
const HeadCSP = process.env.NODE_ENV === 'production' ? NextStrictCSP : Head

...

// Document component
class MyDoc extends Document {

  render() {
    return (
      &amp;lt;Html&amp;gt;
        &amp;lt;HeadCSP&amp;gt;
          { process.env.NODE_ENV === 'production' &amp;amp;&amp;amp; 
          &amp;lt;meta httpEquiv="Content-Security-Policy" /&amp;gt;
          }

          ...

          {/* Google Tag Manager */}
          { process.env.NODE_ENV === 'production' &amp;amp;&amp;amp; 
          &amp;lt;script 
            dangerouslySetInnerHTML={{
                __html: GTMJs
            }}
          /&amp;gt;
          }
          {/* End Google Tag Manager */}

        &amp;lt;/HeadCSP&amp;gt;
        &amp;lt;body&amp;gt;
          { process.env.NODE_ENV === 'production' &amp;amp;&amp;amp; 
          &amp;lt;noscript
            dangerouslySetInnerHTML={{
                __html: `&amp;lt;iframe src="https://www.googletagmanager.com/ns.html?id=YOUR GOOGLE TAG MANAGER ID STRING" height="0" width="0" style="display:none;visibility:hidden"&amp;gt;&amp;lt;/iframe&amp;gt;`,
            }}
          /&amp;gt;
          }

          ...

          &amp;lt;Main /&amp;gt;
          &amp;lt;NextScript /&amp;gt;
          {/* Cloudflare Web Analytics */}
          {/*&amp;lt;script defer src='https://static.cloudflareinsights.com/beacon.min.js' data-cf-beacon={`{"token": "YOUR CLOUDFLARE WEB ANALYTICS TOKEN STRING"}`}&amp;gt;&amp;lt;/script&amp;gt;*/}
          {process.env.NODE_ENV === 'production' &amp;amp;&amp;amp; 
          &amp;lt;script dangerouslySetInnerHTML={{
            __html: cloudflareJs
          }} /&amp;gt;
          }
          {/* End Cloudflare Web Analytics */}

          ...

        &amp;lt;/body&amp;gt;
      &amp;lt;/Html&amp;gt;
    )
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once live, your inline scripts hashes will be injected into the content security policy meta tag like this:&lt;br&gt;
&lt;code&gt;&amp;lt;meta http-equiv="Content-Security-Policy" content="script-src 'strict-dynamic' 'sha256-XOzjewwkvGMLaoj+oYCiOZ3kRwb6RT1Ph6vn4qL+XI0=' 'sha256-QSxH3dqIUPdeBvyxSZSuIbZfgtCo/yuqnzU+5gtq9Ak=' 'sha256-7V8IQTE3j8PL2rD62J9XsmUhchGnkkyNIQfwoYVK04I=' 'unsafe-inline' http: https:;" slug="/"&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#last-word"&gt;
  &lt;/a&gt;
  Last word
&lt;/h2&gt;

&lt;p&gt;Hope you enjoyed next-strict-csp and don't hesitate to leave a comment to let me know what you think about it.&lt;/p&gt;

&lt;p&gt;Thanks for reading, see you!&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>security</category>
    </item>
    <item>
      <title>5 Reasons Why Software Engineers Are in High Demand</title>
      <author>Sumeet Vishwakarma</author>
      <pubDate>Sat, 11 Sep 2021 12:39:03 +0000</pubDate>
      <link>https://dev.to/legendsumeet/5-reasons-why-software-engineers-are-in-high-demand-3np</link>
      <guid>https://dev.to/legendsumeet/5-reasons-why-software-engineers-are-in-high-demand-3np</guid>
      <description>&lt;p&gt;‘Software Engineer’ – it is one of the most demanded and rewarding career profiles of the current times all across the world. Whether we talk about higher salary packages, career growth opportunities, collaborative work environment, amazing perks, or any other related aspect – a Software Engineer job at almost every renowned tech company offers you these things! As per a few standard reports, the demand &amp;amp; job opportunities for software engineers are likely to grow by 20-25% in the coming years.  &lt;/p&gt;

&lt;p&gt;But have you ever thought about the reasons behind such rapidly increasing demand for Software Engineers in the professional world…?? No worries, as here in this article, we’re going to discuss the same.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gl7c8wo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3hhkqkn7k49nwuef4gq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gl7c8wo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3hhkqkn7k49nwuef4gq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, before moving further, let’s have a quick look at – Who are Software Engineers and What do they do? A Software Engineer is a tech professional who implements the software engineering principles or concepts in each phase of building a system/product including designing, development, testing, and maintenance. He is basically engaged with the product from the requirements gathering phase to its successful final development &amp;amp; deployment. Though the roles and responsibilities of a Software Engineer majorly depend on his specific domain and the company requirements. &lt;/p&gt;

&lt;p&gt;For example – a Blockchain Software Engineer is usually responsible for analyzing the company’s tech requirements or client’s demands and then concerned with the designing &amp;amp; development of blockchain software/product along with handling or managing several other tasks like testing, troubleshooting, etc.    &lt;/p&gt;

&lt;p&gt;Now, let’s get to know some of the major reasons that why Software Engineers are in great demand in the tech world:  &lt;/p&gt;

&lt;p&gt;Rapid Advent of Tech Advancements  &lt;/p&gt;

&lt;p&gt;One of the primary reasons behind such an immensely increasing demand for Software Engineers is the rapid growth of technology. The exponential growth &amp;amp; evolution of technology in the last few years can clearly be seen considering all the recent tech trends like Quantum Computing, Artificial Intelligence &amp;amp; Machine Learning, 5G, Hyperautomation, Internet of Behaviors (IoB), etc. We’re seeing how almost everything around us in the present day scenario including smartphones, IoT devices, virtual reality and augmented reality platforms, cryptocurrencies, and many other are all supported by the respective software.  &lt;/p&gt;

&lt;p&gt;And thus, there is a huge demand &amp;amp; need for software engineers who can look after the designing, development, and maintenance of this software. And undoubtedly, since the technologies are expected to keep growing at such a fast pace, the future of software engineer looks promising in the upcoming years as well with the generation of numerous job opportunities for these professionals in the tech world.&lt;/p&gt;

&lt;p&gt;The World is Moving Online&lt;/p&gt;

&lt;p&gt;Moving ahead, the massive shift of everyone whether it be an individual or an offline business or education domain or any other, to the digital platforms can be considered as another prominent reason that why the demand for software engineers is surging. Especially after the global covid-19 pandemic, the digital presence for individuals or businesses has remained no more optional but it has become something very much necessary for them to keep going with their respective workflow or operations.  &lt;/p&gt;

&lt;p&gt;The platforms like Uber, Zomato, Flipkart, Paytm, Zoom, etc. are some of the renowned examples that represent today’s digitalized world. And behind all these digital platforms there exists the respective team of software engineers who ensures the successful development and running of the particular product whether it be an app, a website, or any other software. So, tech companies are in great need of skilled software engineers that can help them to create/build such ideal software solutions to thrive in the industry.  &lt;/p&gt;

&lt;p&gt;Code Requires Timely Upgradation/Changes&lt;/p&gt;

&lt;p&gt;This is something very crucial to know to understand the scenario of increasing demand for software engineers. So, most individuals, especially beginners, usually come with a doubt in their mind that once the code is completed and the product is successfully developed, now the project should be over for software engineers except for the tasks like regular maintenance, etc. But the real scenario differs from it, let us tell you why…??  &lt;/p&gt;

&lt;p&gt;You need to know that code usually becomes outdated or obsolete due to various reasons like the advent of new technologies, need for new features, etc. hence it requires regular &amp;amp; consistent updation/changes throughout time. Let us tell you that there are instances where the organization opts to rebuild the existing software or rewrite the entire code from scratch using the latest technologies for various reasons like better &amp;amp; fast performance, cost reduction, etc. And that’s why a software engineer or a team of software engineers is associated and required for the particular product/software even after its successful deployment.  &lt;/p&gt;

&lt;p&gt;Software Engineers are Concerned With Mulitple Phases like Designing, Development, Testing, etc.&lt;/p&gt;

&lt;p&gt;Going down the list, another prominent reason behind such a great demand for software engineers in the tech world is that these professionals are concerned with almost every crucial phase of the product building whether it be designing, development, testing, etc. They work closely with the designing team to let them know the required functionalities of the product (as per the user requirements), they collaborate with programmers for code writing, then they work with the testing team for testing &amp;amp; assessing the code, and so on. Not only this, but also technical design documentation, identifying the improvement areas in the product &amp;amp; recommending the solution for it, improving existing codes, and various other such tasks are also often handled by software engineers. And this vast &amp;amp; impactful role of software engineers in product development is one of the major reasons that why software engineers significantly hold a strong place, popularity, and demand in the tech industry.  &lt;/p&gt;

&lt;p&gt;Lesser Supply of Skilled Software Engineers  &lt;/p&gt;

&lt;p&gt;Last but not least, there comes the supply and demand concept. So, we need to understand that there are not adequate software engineers who’re quite proficient and skillful as per the industries’ requirements and as known to everyone short supply always lead to high and high demand! For example – a software engineer is required to have a strong familiarity with the Software Development Life Cycle (SDLC), should have a decent knowledge of programming concepts and data structures &amp;amp; algorithms, proficiency with the relevant tools, etc. Along with it, if a software engineer is quite updated with the latest development trends &amp;amp; possesses some required soft skills as well like communication, teamwork, etc., it makes his profile more strong. However, as many of the individuals who aspire to start their career as a software engineer lacks the mentioned skills, the software engineers continue to be in great demand.&lt;/p&gt;

&lt;p&gt;So, these are some of the prominent reasons behind the great demand for Software Engineers in the tech industry and job market. And again, the future of software engineer seems quite bright – hence, if you’re looking forward to building your career in this particular domain then you can go for it without giving a second thought and learn all the required skills accordingly!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>DNS introduction</title>
      <author>tcpdump-examples</author>
      <pubDate>Sat, 11 Sep 2021 12:14:50 +0000</pubDate>
      <link>https://dev.to/learnlinux/dns-introduction-54m6</link>
      <guid>https://dev.to/learnlinux/dns-introduction-54m6</guid>
      <description>&lt;p&gt;DNS is short for Domain Name System. It is simply a database that links meaningful names (known as hostnames), such as howtouselinux.com, to a specific IP address, such as 185.230.63.171. &lt;/p&gt;

&lt;p&gt;Each device connected to the Internet has a unique IP address. With the system of DNS, we don't have to memorize IP addresses.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dns-records"&gt;
  &lt;/a&gt;
  DNS records
&lt;/h1&gt;

&lt;p&gt;All domains are required to have at least a few essential DNS records for a user to be able to access their website using a domain name. This is the key concept of DNS.&lt;/p&gt;

&lt;p&gt;Here are 4 commonly used DNS records.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A record - A record is used to map a domain (e.g., howtouselinux.com) or a sub-domain (e.g., blog.howtouselinux.com) to an IP address or many ips.&lt;/li&gt;
&lt;li&gt;PTR record - Provides a domain name in reverse-lookups. eg. (23.236.62.147 -- howtouselinux.com)  check more about A record. &lt;a href="https://www.howtouselinux.com/post/dns-a-record"&gt;Understanding DNS A Record with Examples&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;CNAME record - also known as canonical name records, are used to create aliases that point to other names. They are commonly used to map WWW, FTP and MAIL sub-domains to a domain.&lt;/li&gt;
&lt;li&gt;MX record - MX (Mail Exchange) records control how incoming email is routed for your domain. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check this post to learn more about DNS records. &lt;a href="https://www.howtouselinux.com/post/linux-dns-ptr-mx-srv-spf-aaaa-dns-records"&gt;Understanding DNS Records - PTR MX SRV CNAME AAAA &lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-query-dns-record"&gt;
  &lt;/a&gt;
  How to query DNS record
&lt;/h1&gt;

&lt;p&gt;Each application like Chrome has its own mechanism to get the DNS record. We will explain how to use the Linux command to query DNS records.&lt;/p&gt;

&lt;p&gt;We can use dig name  +   record type + @dns server to query the DNS info from a DNS server. By default, dig performs a lookup for an A record if no type argument is specified.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;server – the IP address or hostname of the name server to query. It is optional and if we don’t provide a server argument then dig uses the name server listed in /etc/resolv.conf.&lt;/li&gt;
&lt;li&gt;name – the name of the resource record that is to be looked up.&lt;/li&gt;
&lt;li&gt;record type – the type of query requested by dig. For example, it can be an A record, MX record, SOA record or any other types. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;check more about &lt;a href="https://www.howtouselinux.com/post/linux-command-use-dig-to-query-dns"&gt;how to use dig command to query DNS info&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#example-of-dns-record"&gt;
  &lt;/a&gt;
  Example of DNS record
&lt;/h1&gt;

&lt;p&gt;We can see that google.com has 6 A records with the following example. The main purpose of this is for load balance and fault tolerance.&lt;/p&gt;

&lt;p&gt;$ dig google.com +short&lt;br&gt;
172.217.194.138&lt;br&gt;
172.217.194.139&lt;br&gt;
172.217.194.102&lt;br&gt;
172.217.194.101&lt;br&gt;
172.217.194.100&lt;br&gt;
172.217.194.113&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#which-port-does-dns-use"&gt;
  &lt;/a&gt;
  Which port does DNS use?
&lt;/h1&gt;

&lt;p&gt;DNS uses both TCP and UDP port 53. The most frequently used port for DNS is UDP 53. This is used for DNS queries on the client-side. Check more info about &lt;a href="https://www.howtouselinux.com/post/dns-port"&gt;DNS port&lt;/a&gt; here. &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#how-to-use-tcpdump-to-filter-dns-query-packets"&gt;
  &lt;/a&gt;
  How to use tcpdump to filter DNS Query packets?
&lt;/h1&gt;

&lt;p&gt;We can use this tcpdump command to filter DNS query packets.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tcpdump -i eth0 udp port 53
We can write these packets to a file with this tcpdump command and analyze these packets with Wireshark GUI.&lt;/li&gt;
&lt;li&gt;tcpdump -i eth0  -w /tmp/dns.pcap udp port 53
We can read these packets from dns.pcap file to get more details about the DNS query.&lt;/li&gt;
&lt;li&gt;tcpdump -vvv -r /tmp/dns.pcap port 53 &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;check more info about &lt;a href="https://www.howtouselinux.com/post/tcpdump-filter-dns-packets"&gt;how to use tcpdump to capture DNS packet&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#example-of-dns-packet-analysis"&gt;
  &lt;/a&gt;
  Example of DNS Packet Analysis
&lt;/h1&gt;

&lt;p&gt;We can get the A record for google.com with the flowing command.&lt;/p&gt;

&lt;p&gt;dig google.com +short&lt;/p&gt;

&lt;p&gt;This is the output of tcpdump command after we run the above dig command. Check more info about how to use dig command to query DNS records here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;20:11:00.466866 IP 10.79.98.233.54127 &amp;gt; 64.104.76.247.53: 60712+ [1au] A? google.com. (39)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the packet we get from the DNS server for this DNS query.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;20:11:00.560294 IP 64.104.76.247.53 &amp;gt; 10.79.98.233.54127: 60712 6/4/1 A 74.125.24.113, A 74.125.24.102, A 74.125.24.139, A 74.125.24.138, A 74.125.24.100, A 74.125.24.101 (207)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, the dig command query the A record for that domain name with UDP protocol. Check this post to learn more about other DNS records like AAAA, MX, PTR etc.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference:
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.howtouselinux.com/post/free-dns-servers-in-2021"&gt;Free DNS Servers in 2021&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.howtouselinux.com/post/flush-dns-cache-with-command"&gt;Flush DNS Cache with Command Quick Guide&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.howtouselinux.com/post/dns-ttl"&gt;Exploring DNS TTL with Examples&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.howtouselinux.com/post/linux-dig-dns"&gt;Understanding Linux Dig Command&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.howtouselinux.com/post/dns_edns"&gt;Exploring EDNS with Examples&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.howtouselinux.com/post/best-dns-server-for-ps4-ps5"&gt;Best and Fastest DNS Server For PS4 PS5&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.howtouselinux.com/post/best-dns-servers-for-gaming"&gt;Best and Fastest DNS Servers For Gaming&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.howtouselinux.com/post/what-is-dns-dns-meaning"&gt;What is DNS? DNS Meaning&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.howtouselinux.com/post/dig-dns-txt-record"&gt;Query DNS Txt Record with Dig Command&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
