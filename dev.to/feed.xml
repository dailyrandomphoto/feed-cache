<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>PHP trim() function: Remove characters from string</title>
      <author>hrishikesh1990</author>
      <pubDate>Mon, 20 Sep 2021 11:47:13 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/php-trim-function-remove-characters-from-string-4ep9</link>
      <guid>https://dev.to/hrishikesh1990/php-trim-function-remove-characters-from-string-4ep9</guid>
      <description>&lt;p&gt;In this tutorial, we look at the PHP trim function. We look at how you can remove whitespaces and characters from a string using the trim function in PHP.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents-php-trim"&gt;
  &lt;/a&gt;
  Table of Contents - PHP Trim:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-does-the-php-trim-function-do"&gt;What does trim do?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-amp-explanation"&gt;Code and Explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#closing-thoughts-php-trim"&gt;Closing thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-does-the-php-trim-function-do"&gt;
  &lt;/a&gt;
  What does the PHP trim() function do?
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;trim()&lt;/code&gt; function in PHP removes whitespace or any other predefined character from both the left and right sides of a string.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ltrim()&lt;/code&gt; and &lt;code&gt;rtrim()&lt;/code&gt; are used to remove these whitespaces or other characters from the left and right sides of the string. However, making use of just the &lt;code&gt;trim()&lt;/code&gt; function without specifying ‚Äòl‚Äô or ‚Äòr‚Äô removes characters from both sides.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-amp-explanation"&gt;
  &lt;/a&gt;
  Code &amp;amp; Explanation:
&lt;/h2&gt;

&lt;p&gt;In this section, we look at the various syntax, parameters, and return values used in the &lt;code&gt;trim()&lt;/code&gt; function. Post that we look at a code snippet using the &lt;code&gt;trim()&lt;/code&gt; function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nb"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$charlist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;$string&lt;/strong&gt; - Required. This is the string or the variable containing the string from which you want to remove whitespaces or characters.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;$charlist&lt;/strong&gt; - Optional. This parameter specifies the character that needs to be removed from the string. If left empty, all the characters mentioned below would be removed.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;‚Äú\0‚Äù&lt;/code&gt; ‚Äì NULL&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;‚Äú\t‚Äù&lt;/code&gt; ‚Äì tab&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;‚Äú\n‚Äù&lt;/code&gt; ‚Äì newline&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;‚Äú\x0B‚Äù&lt;/code&gt; ‚Äì vertical tab&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;‚Äú\r‚Äù&lt;/code&gt; ‚Äì carriage return&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;‚Äù ‚Äù&lt;/code&gt; ‚Äì ordinary white space
### Return Value:
A modified string with whitespaces or the specified characters removed from both sides is returned.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#code-using-php-trim"&gt;
  &lt;/a&gt;
  Code using PHP Trim:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// PHP program using trim() &lt;/span&gt;

&lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"  Hire freelance developer "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Since a second parameter was not passed&lt;/span&gt;
&lt;span class="c1"&gt;// leading and trailing whitespaces are removed&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output for the above code snippet would be as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hire freelance developer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let‚Äôs look at a case where we pass a second argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// removing the predefined character &lt;/span&gt;
&lt;span class="nv"&gt;$str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hire freelance developer"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Hir"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output for this code snippet would be the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;e freelance develope
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the ‚Äúhir‚Äù from ‚ÄúHire‚Äù and the ‚Äúr‚Äù from ‚Äúdeveloper‚Äù were removed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts-php-trim"&gt;
  &lt;/a&gt;
  Closing thoughts - PHP trim():
&lt;/h2&gt;

&lt;p&gt;There are no caveats as such while using the PHP trim() function. I would recommend practicing the &lt;code&gt;trim()&lt;/code&gt; method as it can get tricky at times. Also, try using the &lt;code&gt;ltrim()&lt;/code&gt; and &lt;code&gt;rtrim()&lt;/code&gt; both these functions have very specific use cases.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>I built a social network for developers to showcase their projects</title>
      <author>Nitin Ranganath</author>
      <pubDate>Mon, 20 Sep 2021 11:45:13 +0000</pubDate>
      <link>https://dev.to/itsnitinr/i-built-a-social-network-for-developers-to-showcase-their-projects-m7j</link>
      <guid>https://dev.to/itsnitinr/i-built-a-social-network-for-developers-to-showcase-their-projects-m7j</guid>
      <description>&lt;p&gt;TL;DR: &lt;a href="https://driwwwle.com"&gt;Driwwwle&lt;/a&gt; is an open-source social network to showcase your projects with like, comments, notifications, profiles and real-time chat.&lt;/p&gt;

&lt;p&gt;As developers, we like to look out for new and exciting projects or products. However, finding them is not the easiest task out there. Sure, you can scroll through GitHub's trending section to find a lot of awesome products but what if it is closed source?&lt;/p&gt;

&lt;p&gt;Things aren't so hard for designers though. They can visit a website like Dribbble or Behance and enjoy the thousands of creative designs easily. What if we had something like Dribbble, but for developers?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-driwwwle"&gt;
  &lt;/a&gt;
  Introducing Driwwwle
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WVLHpSwEmYE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Driwwwle is a social network for developers to showcase their projects or products with other developers across the globe. Just like any other social network out there, you can like posts, save them privately, leave a comment and follow your favorite developers to build your own personal feed.&lt;/p&gt;

&lt;p&gt;Some of the other features include:&lt;/p&gt;

&lt;p&gt;‚ö° Server-side rendering with Next.js&lt;br&gt;
üç™ Cookie-based authorization with JSON web tokens&lt;br&gt;
üìú Infinite scrolling feed with React Query&lt;br&gt;
üñºÔ∏è Cloud image upload with Cloudinary&lt;br&gt;
‚ù§Ô∏è Like, save, and comment on posts&lt;br&gt;
üí¨ Realtime chat with Socket.io&lt;br&gt;
ü§ù Follow developers and build personal feed&lt;/p&gt;

&lt;p&gt;and a lot more..&lt;/p&gt;

&lt;p&gt;Sounds interesting? I would love for you to create an account on &lt;a href="https://driwwwle.com"&gt;Driwwwle&lt;/a&gt; and post your awesome creations.&lt;/p&gt;

&lt;p&gt;Did I mention that Driwwwle is also open-source? You can browse through the code on this GitHub repo:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/itsnitinr"&gt;
        itsnitinr
      &lt;/a&gt; / &lt;a href="https://github.com/itsnitinr/driwwwle-v2"&gt;
        driwwwle-v2
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The social network for developers. Discover creative websites and build a community.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/34748469/133837934-3584c5a0-e650-46c1-a0c7-7125d30fd145.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hLT0JKY8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/34748469/133837934-3584c5a0-e650-46c1-a0c7-7125d30fd145.png" height="100" width="100"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;
Driwwwle&lt;/h1&gt;

&lt;h3&gt;
The Social Network for Developers&lt;/h3&gt;


&lt;p&gt;&lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/b350ea89143d830fd3bec1143820119897deec9fb163e911f6a547781cfcdbc0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4e6578742e6a732d3030303030303f7374796c653d666c61742d737175617265266c6f676f3d6e6578742e6a73"&gt;&lt;img src="https://camo.githubusercontent.com/b350ea89143d830fd3bec1143820119897deec9fb163e911f6a547781cfcdbc0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4e6578742e6a732d3030303030303f7374796c653d666c61742d737175617265266c6f676f3d6e6578742e6a73"&gt;&lt;/a&gt;&lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/994f4f1f9cf771cf63f7117720af5cebe66cf7d9851abfc05ad402fad2f9ee74/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d5461696c77696e644353532d3338423241433f7374796c653d666c61742d737175617265266c6f676f3d7461696c77696e642d637373266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/994f4f1f9cf771cf63f7117720af5cebe66cf7d9851abfc05ad402fad2f9ee74/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d5461696c77696e644353532d3338423241433f7374796c653d666c61742d737175617265266c6f676f3d7461696c77696e642d637373266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;&lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/713265309efc25edcf85261d9812b9c6df09528cdaa2c468b6d5e4f9a2440c96/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4a6176615363726970742d4637444631453f7374796c653d666c61742d737175617265266c6f676f3d6a617661736372697074266c6f676f436f6c6f723d626c61636b"&gt;&lt;img src="https://camo.githubusercontent.com/713265309efc25edcf85261d9812b9c6df09528cdaa2c468b6d5e4f9a2440c96/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4a6176615363726970742d4637444631453f7374796c653d666c61742d737175617265266c6f676f3d6a617661736372697074266c6f676f436f6c6f723d626c61636b"&gt;&lt;/a&gt;&lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/efd62dbd0acc4459f0e97d75e26c0475eeb385078d542cad1d13e8bb0b2cb8ce/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d457870726573732d3030303030303f7374796c653d666c61742d737175617265266c6f676f3d65787072657373266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/efd62dbd0acc4459f0e97d75e26c0475eeb385078d542cad1d13e8bb0b2cb8ce/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d457870726573732d3030303030303f7374796c653d666c61742d737175617265266c6f676f3d65787072657373266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;&lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7d1185f225f6a50bec4b592550f74887647c5acf33d02324b51294e0674487ce/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4d6f6e676f44422d3437413234383f7374796c653d666c61742d737175617265266c6f676f3d6d6f6e676f6462266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/7d1185f225f6a50bec4b592550f74887647c5acf33d02324b51294e0674487ce/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4d6f6e676f44422d3437413234383f7374796c653d666c61742d737175617265266c6f676f3d6d6f6e676f6462266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;&lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/077dcdd2d7e74bad8d0818d05431a1419ef7f46fc525a6bdca65f70042483fa2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4a57542d3030303030303f7374796c653d666c61742d737175617265266c6f676f3d6a736f6e2d7765622d746f6b656e73266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/077dcdd2d7e74bad8d0818d05431a1419ef7f46fc525a6bdca65f70042483fa2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4a57542d3030303030303f7374796c653d666c61742d737175617265266c6f676f3d6a736f6e2d7765622d746f6b656e73266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;&lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/828d4bf0b83d6a458eb9ec7cf2546da70edcb507f4c7365ccd07f28e0f0119b5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4865747a6e65722d4435304332443f7374796c653d666c61742d737175617265266c6f676f3d6865747a6e6572266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/828d4bf0b83d6a458eb9ec7cf2546da70edcb507f4c7365ccd07f28e0f0119b5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4865747a6e65722d4435304332443f7374796c653d666c61742d737175617265266c6f676f3d6865747a6e6572266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;&lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0549dc3f325d3e771b571105749984cdec924e99cb40a7284078413dd5d23554/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d536f636b65742e696f2d3031303130313f7374796c653d666c61742d737175617265266c6f676f3d736f636b65742e696f266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/0549dc3f325d3e771b571105749984cdec924e99cb40a7284078413dd5d23554/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d536f636b65742e696f2d3031303130313f7374796c653d666c61742d737175617265266c6f676f3d736f636b65742e696f266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;
&lt;br&gt;


&lt;h3&gt;
Features&lt;/h3&gt;

&lt;div&gt;
  &lt;p&gt;‚ö° Server-side rendering with Next.js&lt;br&gt;
  üç™ Cookie-based authorization with JSON web tokens&lt;br&gt;
  üìú Infinite scrolling feed with React Query&lt;br&gt;
  üñºÔ∏è Cloud image upload with Cloudinary&lt;br&gt;
  ‚ù§Ô∏è Like, save and comment on posts&lt;br&gt;
  üí¨ Realtime chat with Socket.io&lt;br&gt;
  ü§ù Follow developers and build personal feed&lt;br&gt;
  and a lot more..&lt;/p&gt;
&lt;/div&gt;

&lt;h2&gt;
Running Locally&lt;/h2&gt;
&lt;p&gt;Clone this repository and install dependencies by running:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;npm install
#or
yarn install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a new file named &lt;code&gt;config.env&lt;/code&gt; with the following environment variables in the root of the project folder:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;PORT = 
MONGO_URI = 
JWT_SECRET = 
CLOUDINARY_CLOUD_NAME = 
CLOUDINARY_API_KEY = 
CLOUDINARY_API_SECRET = 
SENDGRID_API_KEY = 
SENDER_EMAIL = 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a new file named &lt;code&gt;.env.local&lt;/code&gt; with following configuration:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;NEXT_PUBLIC_BASE_URL = http://localhost:3000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For development mode, run:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For production mode, run:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;npm run build
npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Visit &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; or your custom port environment variable to view the app.&lt;/p&gt;
&lt;h2&gt;
Screenshots&lt;/h2&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/34748469/133844015-c1b49f42-95de-4b4c-93d6-0d74152578cc.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Btusu1Ec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/34748469/133844015-c1b49f42-95de-4b4c-93d6-0d74152578cc.png" alt="Banner Image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Landing Page&lt;/th&gt;
&lt;th&gt;Search&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/34748469/133844238-18e81ef2-ef31-4455-9b8f-08c71754fd97.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VtTEaX2I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/34748469/133844238-18e81ef2-ef31-4455-9b8f-08c71754fd97.png" alt=""&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/34748469/133844365-d01ebbe2-5c37-4ed8-9337-efb6c15a4828.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gA1cjp13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/34748469/133844365-d01ebbe2-5c37-4ed8-9337-efb6c15a4828.png" alt=""&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Personal Feed&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;&lt;/div&gt;‚Ä¶&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/itsnitinr/driwwwle-v2"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
 
&lt;h2&gt;
  &lt;a href="#some-more-screenshots"&gt;
  &lt;/a&gt;
  Some more screenshots
&lt;/h2&gt;

&lt;p&gt;A picture speaks a thousand words but more importantly, I hope it excites you enough to give Driwwwle a try. Here are some screenshots, thanks to &lt;a href="https://mockupbro.com/"&gt;MockupBro&lt;/a&gt; for the awesome mockups.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nHSwSWK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1ylr51nj7q2u3iblrbr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nHSwSWK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1ylr51nj7q2u3iblrbr.png" alt="Landing Page"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Hpx5AOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4lrx08hg7a1pk5uta5q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Hpx5AOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4lrx08hg7a1pk5uta5q.png" alt="Add New Post"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yElCnIK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lgifm57m1dpu7qgthjk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yElCnIK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lgifm57m1dpu7qgthjk.png" alt="Search"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pJf0eT6M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dhncxpfe4lk6snn13qmd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pJf0eT6M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dhncxpfe4lk6snn13qmd.png" alt="Feed"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hOHEldSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wm1iq8yf2gpyqeg0r8e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hOHEldSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wm1iq8yf2gpyqeg0r8e.png" alt="Posts &amp;amp; Profile page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#suggestions-and-feedback-welcome"&gt;
  &lt;/a&gt;
  Suggestions and feedback welcome!
&lt;/h2&gt;

&lt;p&gt;Driwwwle is in its initial stages at the moment and I would highly appreciate any feedback, suggestions and questions you would like to provide. What features would you like to see? What seems unnecessary or what's causing difficulties? &lt;/p&gt;

&lt;p&gt;Thank you for your time and I await to see your posts on Driwwwle soon. Until then, have a nice day!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>nextjs</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Quality assurance fundamentals</title>
      <author>Aatmaj</author>
      <pubDate>Mon, 20 Sep 2021 11:37:54 +0000</pubDate>
      <link>https://dev.to/aatmaj/quality-assurance-fundamentals-19b8</link>
      <guid>https://dev.to/aatmaj/quality-assurance-fundamentals-19b8</guid>
      <description>&lt;h4&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h4&gt;

&lt;p&gt;Prevention is better than cure. Not installing defects in the first place is better than debugging. This can be achieved only through paying attention to quality assurance fundamentals from Day 0 of your project.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qPat74zt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/83284294/133961075-1a4358c1-40ad-4221-98c2-7e1cd5bb5e9e.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qPat74zt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/83284294/133961075-1a4358c1-40ad-4221-98c2-7e1cd5bb5e9e.jpeg" alt="WhatsApp Image 2021-09-20 at 10 25 37 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#does-poor-quality-hit"&gt;
  &lt;/a&gt;
  Does poor quality hit?
&lt;/h4&gt;

&lt;p&gt;After surveying 4000 projects, it is found that poor quality is one of the most common reasons for schedule overruns. Poor quality is the reason for half of the cancelled projects. &lt;/p&gt;

&lt;p&gt;Here is how time and effort are lost due to bad quality.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The original effort spent designing and implementing the 'bad quality code' or 'cut-the-corners-short code' is wasted, because sooner or later the entire code will be thrown away.&lt;/li&gt;
&lt;li&gt;By writing a bad code, you are postponing the problem to later. Time spent unit-testing and debugging the code is down the drain. At a later time of the project, either the bad module will have to be replaced, or worse- scattered with patchwork&lt;/li&gt;
&lt;li&gt;Additional time will be spent to strip the bad module out of the main code and modify it. Additional testing and debugging time will be spent to ensure that the modified code still works.&lt;/li&gt;
&lt;li&gt;Time will be spent in the design and implementation of the entire code due to changes in the bad module. the new code, which should have been designed as an integral part of the system has to be designed around the system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All this could have been prevented if necessary steps would have been taken to ensure a good-quality code from the start.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-stitch-in-time-saves-nine"&gt;
  &lt;/a&gt;
  A stitch in time saves nine.
&lt;/h4&gt;

&lt;p&gt;If you can prevent defects or detect and remove them early, you can realize significant schedule benefits. &lt;br&gt;
Studies have found out that reworking defective requirements, design and code typically consumes 40-50% of the total cost of software development.&lt;br&gt;
Requirements defect that is left undetected until construction or maintenance will cost 50 to 200 times more than at requirements time.&lt;br&gt;
If a defect is not detected in the early stages, it becomes a time bomb later, with 10-100 times much more effort to fix.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OszE7QJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/83284294/133961079-746840f3-bdaf-449c-9cc3-55d1bf82da90.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OszE7QJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/83284294/133961079-746840f3-bdaf-449c-9cc3-55d1bf82da90.jpeg" alt="WhatsApp Image 2021-09-20 at 10 49 01 AM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The longer defects remain undetected, the longer they take to fix. Correct defects while they are young and easy to control&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prevention-is-better-than-cure"&gt;
  &lt;/a&gt;
  Prevention is better than cure.
&lt;/h4&gt;

&lt;p&gt;Every hour you spend on defect prevention will reduce your repair time by 4-5 hours. So the key to success is to implement practices that prevent the errors rather than fix them.&lt;br&gt;
An error-prone module is the one that is responsible for a majority of the bugs. &lt;strong&gt;20% modules are responsible for 80% of bugs.&lt;/strong&gt; Prevent the existence of such modules by using the practises given below.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#practises-to-prevent-errors"&gt;
  &lt;/a&gt;
  Practises to prevent errors
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Testing&lt;/strong&gt; Testing is the black sheep of QA. It is the messenger of disaster to the management. But the best way to tackle it is to plan ahead for the bad news. Deliver it as early as possible. Unit testing, where the developer checks their own code to verify if it works correctly has effectiveness in the range 10-60. System testing, in which an independent tester checks the system operation has an effectiveness of 20-60%&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Technical walkthrough&lt;/strong&gt; Walkthrough is a method by which two or more reviewers review technical work to improve quality. Walkthroughs can find between 30-70 per cent of errors in a program. Such inspections are very effective when performed in the early stages and each hour spent in inspection saves 20 hours of maintenance overhead.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code reading&lt;/strong&gt; In code reading, two or more reviewers (except for the author) review the code. This method is very effective and finds twice the number of defects per hour than testing.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code review&lt;/strong&gt; Code reviews are the most cost-effective on a per0defect basis. This is because they detect both the symptom of the defect and the underlying cause at the same time. Testing detects only the symptom of the defect and not the cause, and the developer still has to find the root cause of the defect. They not only tend to find a higher percentage of defects but also provide a forum for developers to share their knowledge of best practices with each other, which increases their rapid development over time. Thus, technical reviews are a critical component of any development effort that is trying to achieve the shortest possible schedule.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Notes and images from &lt;a href="https://www.amazon.com/Rapid-Development-Taming-Software-Schedules/dp/1556159005"&gt;Rapid Development: Taming Wild Software Schedules by Steve McConnell&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Laravel 8 Multi Auth (Authentication) Example Tutorial</title>
      <author>avani-trivedi</author>
      <pubDate>Mon, 20 Sep 2021 11:26:05 +0000</pubDate>
      <link>https://dev.to/avanitrivedi/laravel-8-multi-auth-authentication-example-tutorial-1en5</link>
      <guid>https://dev.to/avanitrivedi/laravel-8-multi-auth-authentication-example-tutorial-1en5</guid>
      <description>&lt;p&gt;Hi Artisan,&lt;/p&gt;

&lt;p&gt;In this Article I will share something new about how actually work multi auth (authentication)integrate with laravel 8.I will create multiple authentications using middleware.&lt;/p&gt;

&lt;p&gt;First of all i will exaplain previous example how to create simple authentication using laravel-ui you will learn this first follow this article&lt;/p&gt;

&lt;p&gt;So, in this example i will create two simple authentication one for main admin and another is all user.&lt;/p&gt;

&lt;p&gt;Here, laravel 8 multi auth tutorial, multiple authentication in laravel 8, implement multiple authentication in laravel 8, laravel 8 multiple authentication using middleware.&lt;/p&gt;

&lt;p&gt;More...&lt;br&gt;
&lt;a href="https://www.mywebtuts.com/blog/laravel-8-multi-auth-authentication-example-tutorial"&gt;https://www.mywebtuts.com/blog/laravel-8-multi-auth-authentication-example-tutorial&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>laravel8</category>
    </item>
    <item>
      <title>Create Mind Map App with React üî•üî•üî•</title>
      <author>101samovar</author>
      <pubDate>Mon, 20 Sep 2021 10:55:30 +0000</pubDate>
      <link>https://dev.to/101samovar/create-mind-map-app-with-react-4o9l</link>
      <guid>https://dev.to/101samovar/create-mind-map-app-with-react-4o9l</guid>
      <description>&lt;p&gt;Let‚Äôs create a React single page application.&lt;br&gt;
The application to remember how to create React applications.&lt;/p&gt;

&lt;p&gt;One of the best ways to remember something is to create a mind-map.&lt;br&gt;
A mind-map is a chart with a hierarchy of keywords or topics.&lt;br&gt;
Big topic is divided into several smaller ones.&lt;br&gt;
Each small topic in turn is divided into smaller parts.&lt;/p&gt;

&lt;p&gt;This  application is simple.&lt;br&gt;
Still it has charts, tables, toolbars, data-storage and routing.&lt;br&gt;
All you need to create  a single page application.&lt;/p&gt;

&lt;p&gt;The application can change screens, create new items and delete items.&lt;br&gt;
The application can zoom-in and zoom-out.&lt;/p&gt;

&lt;p&gt;Nice simple single page application. The application to create a mind map.&lt;br&gt;
The mind map to remember how to create single page applications with React.&lt;br&gt;
So, let‚Äôs get it started!&lt;/p&gt;

&lt;p&gt;Source code:&lt;br&gt;
&lt;a href="https://github.com/101samovar/react-mindmap.git"&gt;https://github.com/101samovar/react-mindmap.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Youtube channel:&lt;br&gt;
&lt;a href="https://youtu.be/X_p4G-SW1tM"&gt;https://youtu.be/X_p4G-SW1tM&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>mindmap</category>
    </item>
    <item>
      <title>What is AWS Security? Risks, Best Practices, and More</title>
      <author>Lion king ishu</author>
      <pubDate>Mon, 20 Sep 2021 10:37:09 +0000</pubDate>
      <link>https://dev.to/ishupanday/what-is-aws-security-risks-best-practices-and-more-49ef</link>
      <guid>https://dev.to/ishupanday/what-is-aws-security-risks-best-practices-and-more-49ef</guid>
      <description>&lt;p&gt;Learn about Amazon Web Services (AWS) security in Data Protection 101, our series on the fundamentals of information security.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FV0Wr5ym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipfbmbnzlnxnmmq4gvl9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FV0Wr5ym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipfbmbnzlnxnmmq4gvl9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;INTRODUCTION TO AMAZON WEB SERVICES&lt;/p&gt;

&lt;p&gt;Amazon Web Services (AWS) is the leading provider of on-demand cloud services with more than a million customers.&lt;/p&gt;

&lt;p&gt;When the cloud was still new, the perceived lack of security hindered people from adopting it. While cloud security has come a long way, there are still many risks associated with it. Following recommended best practices can help mitigate those risks as you build your infrastructure and store and transmit your data with AWS.&lt;/p&gt;

&lt;p&gt;AWS SECURITY RISKS&lt;/p&gt;

&lt;p&gt;AWS security is not fail-safe and operates on a Shared Security Responsibility model. This means that Amazon secures its infrastructure while you have your own security controls in place for the data and applications you deploy and store in the cloud.&lt;/p&gt;

&lt;p&gt;Unlike your on-site systems, which have a hierarchical structure and a peripheral network that scrubs and analyzes data being transmitted, AWS makes it possible for every instance to communicate with the Internet. The exposed applications structure requires you to strengthen existing security controls. This includes continuously updating your security configurations with sufficient patching, strong firewall configurations, and proper network security implementations.&lt;/p&gt;

&lt;p&gt;Furthermore, you should constantly manage your users, including third party vendors and suppliers, and limit privileges. Be sure to delete unused accounts with old credentials as they can easily be targets for breaches.&lt;/p&gt;

&lt;p&gt;BEST PRACTICES FOR AWS SECURITY&lt;br&gt;
In August 2016, Amazon released a 74-page document detailing the best practices for AWS users. Some of the biggest takeaways are:&lt;/p&gt;

&lt;p&gt;Think of security at every layer. Instead of using just one firewall to secure all of your virtual networks, be sure to use virtual firewalls on every network that you create.&lt;br&gt;
Make sure that every activity is traceable and that you manage privileges meticulously. You should be able to see which users did what on your systems. Be strict with access controls and have authentication. Only a few trusted people should be able to access the root and modify settings at that level.&lt;br&gt;
Keep track of all actions, modifications, and points of exit and entry in your AWS deployments. Not only should you be able to tell who did what on your cloud platform, but you should also create alerts to warn you of unusual activities.&lt;/p&gt;

&lt;p&gt;Have customized image templates of all of your virtual servers. You can use these images when you launch a new server. The Amazon Machine Image service can create these reusable templates every time you spin up an EC2 instance. These images will already include your security settings.&lt;/p&gt;

&lt;p&gt;Be sure to encrypt every piece of sensitive data that you store in or transmit over your AWS environment. You can opt to encrypt your data on-site and then send it to your AWS deployment. You can also store the encryption keys behind your own firewall and just use Amazon‚Äôs hardware security module to make sure that they work properly. Data key caching is a recent introduction from AWS which offers benefits such as reduced latency, but there are some security tradeoffs to consider.&lt;/p&gt;

&lt;p&gt;Perform regular audits to ensure regulatory compliance. AWS offers a robust suite of Compliance Resources, including an auditing security checklist which helps businesses perform self-audits to ensure that regulatory requirements are met.&lt;br&gt;
GO DEEPER&lt;/p&gt;

&lt;p&gt;Cloud Data Protection&lt;/p&gt;

&lt;p&gt;AWS SECURITY TOOLS&lt;br&gt;
Amazon has a variety of security tools available to help implement the aforementioned AWS security best practices. Here are the top AWS security tools:&lt;/p&gt;

&lt;p&gt;CloudTrail allows you to monitor your systems by recording the API requests used to manage SDK deployments, management consoles, accounts, services, and command lines. With these event logs, you can troubleshoot incidents and simplify compliance auditing.&lt;br&gt;
AWS WAF (Web Application Firewall) allows you to create custom rules to keep your agile developments secure from common attacks such as SQL injections and XSS.&lt;br&gt;
Amazon Inspector gives you security evaluations for your applications and looks for vulnerabilities.&lt;/p&gt;

&lt;p&gt;Amazon Cognito is used for identity management. It can detect brute force authentication, as well as fraudulent login attempts. Amazon Cognito works with third party services such as Microsoft Active Directory, Google and Facebook, allowing you to specify additional validation methods.&lt;br&gt;
CloudHSM helps you generate encryption keys using managed hardware security modules, or HSMs, stored on your AWS deployments.&lt;/p&gt;

&lt;p&gt;CloudFront is Amazon‚Äôs content delivery network. It protects your applications from DDoS attacks and allows you to transfer data securely at high speeds.&lt;/p&gt;

&lt;p&gt;BEST PRACTICES FOR CHOOSING AN AWS SECURITY SOLUTION&lt;br&gt;
With the help of a cloud security solution, businesses can easily manage their responsibilities for securing their sensitive data and applications in the cloud. Here are some best practices to help you choose the right solution:&lt;/p&gt;

&lt;p&gt;Easy integration. Choose a security solution that integrates with AWS to make the process painless.&lt;br&gt;
Maintain visibility and control. To be able to effectively audit and control compliance, choose a solution that allows total visibility and control. Ideally, a security solution will provide the visibility necessary for identifying sensitive data in the cloud and then implement automated, immediate responses to keep your organization in compliance.&lt;/p&gt;

&lt;p&gt;Context, system, and user awareness. A security solution should be context-, system-, and user-aware to more effectively identify and block suspicious behavior and protect your data without interrupting the flow of operations.&lt;br&gt;
Automatic response to user activity. Choose a cloud security solution that automatically prompts or blocks user activity based on context, logs the event, and audits the activity for forensic analysis.&lt;/p&gt;

&lt;p&gt;Detailed logging and reporting. A good cloud security solution offers detailed logging and reporting for analysis, allowing you to identify patterns and trends and adjust data protection programs accordingly.&lt;/p&gt;

&lt;p&gt;Unified cloud and on-premise security. Some solutions work in tandem with on-premise data protection solutions, allowing for more comprehensive security and consistent policies. By simplifying policy management, you will cut down on costs and eliminate policy gaps that can lead to vulnerabilities.&lt;br&gt;
While Amazon has helped lower security risks by publishing best practices and developing a suite of tools, you must also enforce the proper controls and protocols and manage your users to secure your data and applications. In addition, implementing a third-party cloud security solution will help ensure compliance and unify your cloud and on-premise policies and initiatives to achieve maximum security for your organization.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to mint an NFT via CLI</title>
      <author>Emanuel Ferreira</author>
      <pubDate>Mon, 20 Sep 2021 10:26:34 +0000</pubDate>
      <link>https://dev.to/emanuelferreira/how-to-mint-an-nft-via-cli-25ea</link>
      <guid>https://dev.to/emanuelferreira/how-to-mint-an-nft-via-cli-25ea</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;In this article we will create a script with NodeJS to create an NFT via CLI, passing in its private address and a URL containing the NFT metadata.&lt;/p&gt;

&lt;p&gt;To do this tutorial, I recommend looking at our series to understand the previous steps and see how we got here&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://dev.to/emanuelferreira/how-to-create-a-smart-contract-to-mint-a-nft-2bbn"&gt;How to create a Smart Contract to mint an NFT&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/emanuelferreira/how-to-deploy-smart-contract-to-rinkeby-testnet-using-infura-and-hardhat-5ddj"&gt;How to deploy a Smart Contract to Rinkeby Testnet using Infura and Hardhat&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#boilerplate"&gt;
  &lt;/a&gt;
  Boilerplate
&lt;/h3&gt;

&lt;p&gt;To be faster, I will provide a boilerplate containing the babel, typescript, file structure, packages, scripts, environment variables...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/EmanuelCampos/mint-nft-script/tree/boilerplate"&gt;Click here to go to the GitHub with boilerplate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our boilerplate contains the following packages to run the script:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y481ZgMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f70vp4jg92gyjyl0svjk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y481ZgMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f70vp4jg92gyjyl0svjk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#taking-the-provider"&gt;
  &lt;/a&gt;
  Taking the Provider
&lt;/h3&gt;

&lt;p&gt;Our application provider will help us interact with our contract by defining the network we want to access as mainnet or testnet.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: To get the provider we are going to use Infura, you can see my previous article on how to use Infura: &lt;a href="https://dev.to/emanuelferreira/how-to-deploy-smart-contract-to-rinkeby-testnet-using-infura-and-hardhat-5ddj"&gt;How to deploy a Smart Contract to Rinkeby Testnet using Infura and Hardhat&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Going into the &lt;code&gt;getProvider&lt;/code&gt; file in the &lt;code&gt;src/getProvider.ts&lt;/code&gt; directory we will take the code below and edit it to get our provider.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;getProvider.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Library to connect to the ethereum&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// Library to get the enviroment variables&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// starting the dotenv&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// function to get provider&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are going to edit our file and leave it the same as below(I will explain in the code what each line does).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;getProvider.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;infuraProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InfuraProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NETWORK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Our enviroment variable with network (rinkeby, mainnet, ropsten)&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PROJECT_ID&lt;/span&gt; &lt;span class="c1"&gt;// Our environment variable with the id of our project in infura&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Function in ethers to connect to Infura&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;infuraProvider&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// returning the provider&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ready, we finished our first function!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contract-addresses"&gt;
  &lt;/a&gt;
  Contract Addresses
&lt;/h3&gt;

&lt;p&gt;In the &lt;code&gt;contractAddresses.ts&lt;/code&gt; file in &lt;code&gt;src/contractAddresses.ts&lt;/code&gt; we have an export of the environment variable which is the address of the contract we deployed in the previous article.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;contractAddresses.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FactoryNFTAddress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONTRACT_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-the-mint-script"&gt;
  &lt;/a&gt;
  Creating the Mint Script
&lt;/h3&gt;

&lt;p&gt;Now finally let's create our script to mint an NFT using only 1 command.&lt;/p&gt;

&lt;p&gt;We have some basic settings to run our script:&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;mintNFT.ts&lt;/code&gt; file in &lt;code&gt;src/mintNFT.ts&lt;/code&gt; we have some basic settings to run our script, let's complete by adding the desired functions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mintNFT.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#getting-the-args"&gt;
  &lt;/a&gt;
  Getting the args
&lt;/h4&gt;

&lt;p&gt;Let's start by getting the two arguments that are &lt;code&gt;privateKey&lt;/code&gt; and &lt;code&gt;tokenURI&lt;/code&gt; and validating if at least 2 arguments were sent.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mintNFT.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// getting the args&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn es ./src/mintNft &amp;lt;privatekey&amp;gt; &amp;lt;tokenuri&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// validating whether the 2 arguments were sent&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tokenUri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// destructuring to get the arguments&lt;/span&gt;


&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#getting-the-provider"&gt;
  &lt;/a&gt;
  Getting the Provider
&lt;/h4&gt;

&lt;p&gt;After we get the arguments we need to know which address is being used to mint the NFT and sign the contract.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mintNFT.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// getting the args&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn es ./src/mintNft &amp;lt;privatekey&amp;gt; &amp;lt;tokenuri&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// validating whether the 2 arguments were sent&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tokenUri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// destructuring to get the arguments&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#connecting-with-the-wallet-and-the-contract"&gt;
  &lt;/a&gt;
  Connecting with the wallet and the contract
&lt;/h4&gt;

&lt;p&gt;First, we need to import some things which are the ABI of our contract that we got after compiling it, the address of our contract, and our getProvider&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mintNFT.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./getProvider&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FactoryNFT&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../artifacts/contracts/factoryNFT.sol/FactoryNFT.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FactoryNFTAddress&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./contractAddresses&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// getting the args&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn es ./src/mintNft &amp;lt;privatekey&amp;gt; &amp;lt;tokenuri&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// validating whether the 2 arguments were sent&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tokenUri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// destructuring to get the arguments&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can get your ABI contract after compiling your contract, just dragging the artifacts folder to the root folder. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VD3_2oQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1873w7fdsovon9w2u93v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VD3_2oQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1873w7fdsovon9w2u93v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need to pass the wallet that we are using for our transaction to our contract, for that we will use ethers on both occasions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mintNFT.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// getting the args&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn es ./src/mintNft &amp;lt;privatekey&amp;gt; &amp;lt;tokenuri&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// validating whether the 2 arguments were sent&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tokenUri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// destructuring to get the arguments&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wallet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Wallet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// getting your wallet&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factoryNFTContract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Contract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;FactoryNFTAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your contract address&lt;/span&gt;
    &lt;span class="nx"&gt;FactoryNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your contract ABI&lt;/span&gt;
    &lt;span class="nx"&gt;wallet&lt;/span&gt; &lt;span class="c1"&gt;// your wallet&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// getting the contract&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#making-the-transaction"&gt;
  &lt;/a&gt;
  Making the transaction
&lt;/h4&gt;

&lt;p&gt;And now the last step is to use our contract to make our transaction.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mintNFT.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// getting the args&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn es ./src/mintNft &amp;lt;privatekey&amp;gt; &amp;lt;tokenuri&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// validating whether the 2 arguments were sent&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tokenUri&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unsanitizedArgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// destructuring to get the arguments&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wallet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Wallet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;privateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// getting your wallet&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factoryNFTContract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Contract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;FactoryNFTAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your contract address&lt;/span&gt;
    &lt;span class="nx"&gt;FactoryNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// your contract ABI&lt;/span&gt;
    &lt;span class="nx"&gt;wallet&lt;/span&gt; &lt;span class="c1"&gt;// your wallet&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// getting the contract&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;minting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;factoryNFTContract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokenUri&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// interacting with the contract&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// waiting the minting of the block&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tokenId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toNumber&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// getting the created tokenId&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;tokenId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// returns&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can run the command below and see the result in the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn es ./src/mintNft &amp;lt;privatekey&amp;gt; &amp;lt;tokenuri&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1CHR4TN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqiz2hd2447vt355joie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1CHR4TN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqiz2hd2447vt355joie.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The script is done, now you can get your tokenID and consult the contract that will return your metadata.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;thanks &lt;a href="https://twitter.com/sseraphini"&gt;Sibelius&lt;/a&gt; for helping with the script.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now you can Follow me on &lt;a href="https://twitter.com/manelferreira_"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Project Repository(Complete): &lt;a href="https://github.com/EmanuelCampos/mint-nft-script/tree/master"&gt;https://github.com/EmanuelCampos/mint-nft-script/tree/master&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Project Repository(Blank Template): &lt;a href="https://github.com/EmanuelCampos/mint-nft-script/tree/boilerplate"&gt;https://github.com/EmanuelCampos/mint-nft-script/tree/boilerplate&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>solidity</category>
      <category>script</category>
      <category>web3</category>
    </item>
    <item>
      <title>How to Create Customizable WebAR Experiences</title>
      <author>echoAR</author>
      <pubDate>Mon, 20 Sep 2021 10:21:40 +0000</pubDate>
      <link>https://dev.to/echoar/how-to-create-customizable-webar-experiences-3ahd</link>
      <guid>https://dev.to/echoar/how-to-create-customizable-webar-experiences-3ahd</guid>
      <description>&lt;p&gt;Interested in creating an AR experience catered specifically to you without needing to code at all? Try using &lt;a href="https://www.echoar.xyz/"&gt;echoAR&lt;/a&gt;‚Äôs 3D-ready cloud platform to create personalized WebAR experiences!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IOw2Fpmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132415641/Pi2iblg2_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IOw2Fpmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132415641/Pi2iblg2_.png" alt="1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many developers and content creators are overwhelmed by the complexity of creating AR experiences, especially when it comes to coding for different platforms. This is where &lt;a href="https://www.echoar.xyz/"&gt;echoAR&lt;/a&gt; comes in. With echoAR, no technical knowledge is required to create personalized WebAR experiences. &lt;strong&gt;Here is a step by step guide to quickly and easily create personalized and customizable WebAR experiences using echoAR:&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-a-3d-model"&gt;
  &lt;/a&gt;
  Adding a 3D Model
&lt;/h3&gt;

&lt;p&gt;Once your &lt;a href="https://console.echoar.xyz/#/auth/register"&gt;register&lt;/a&gt; to the echoAR platform, you can add content by clicking the ‚Äú&lt;strong&gt;Add To Cloud&lt;/strong&gt;‚Äù button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C5kx-1Wv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132484116/2ANLWZJFt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C5kx-1Wv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132484116/2ANLWZJFt.gif" alt="2.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can upload your own models and also use the &lt;strong&gt;&lt;a href="https://docs.echoar.xyz/quickstart/add-a-3d-model"&gt;search&lt;/a&gt;&lt;/strong&gt; bar to find free 3D models that you can instantly add to the console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-webar-customizer"&gt;
  &lt;/a&gt;
  Using the WebAR Customizer
&lt;/h3&gt;

&lt;p&gt;You can now use our &lt;strong&gt;&lt;a href="https://console.echoar.xyz/#/pages/customizer"&gt;WebAR Customizer&lt;/a&gt;&lt;/strong&gt; to generate no-code WebAR experiences. You can personalize all the experiences you create through the platform by adding buttons, actions, audio, and a custom background.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fgb9DF_I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132537169/zCYWEy1-L.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fgb9DF_I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132537169/zCYWEy1-L.png" alt="3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This allows you to generate webAR experiences that are more engaging and interactive, and include your branding:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KYjoHPZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132581119/iZTT7Cryz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KYjoHPZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132581119/iZTT7Cryz.gif" alt="4.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that this feature is only available to &lt;a href="https://www.echoar.xyz/pricing"&gt;enterprise clients&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-a-background-image"&gt;
  &lt;/a&gt;
  Setting a Background Image
&lt;/h3&gt;

&lt;p&gt;Use the Background card to set a background image for the webAR experience. Click the ‚Äúupload‚Äù button and choose an image file (.png or .jpg) or an HDR file (.hdr).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fMlSA8CP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132671388/E1HLChnTR.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fMlSA8CP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132671388/E1HLChnTR.gif" alt="55.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that the image will only appear in the preview screen prior to clicking the ‚ÄúSee in AR‚Äù button.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-audio"&gt;
  &lt;/a&gt;
  Adding Audio
&lt;/h3&gt;

&lt;p&gt;Use the Audio card to add an audio file to serve as background music for the webAR experience. Audio will only start playing after a user interaction of any type (screen touch gesture, click, etc.).&lt;/p&gt;

&lt;p&gt;Click the ‚Äúupload‚Äù button and choose an audio file (.mp3 or .wav). You can also toggle the audio on and off by clicking the Audio card.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jCx2cB4c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132660716/1fGKd6RrD.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jCx2cB4c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132660716/1fGKd6RrD.jpeg" alt="6.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#including-camera-capture-functionality"&gt;
  &lt;/a&gt;
  Including Camera Capture Functionality
&lt;/h3&gt;

&lt;p&gt;Use the Camera card to include a camera capture button in the webAR experience. It will allow viewers to grab a snapshot of the AR scene. You can toggle the camera capture on and off by clicking the Camera card.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VArbBw0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132692282/SYtPZvJ19.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VArbBw0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132692282/SYtPZvJ19.jpeg" alt="7.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-buttons-actions-and-a-logo"&gt;
  &lt;/a&gt;
  Adding Buttons, Actions, and a Logo
&lt;/h3&gt;

&lt;p&gt;Use the Button and Logo card to introduce clickable buttons, actions, and your own logo to the WebAR experience.&lt;/p&gt;

&lt;p&gt;You can set up to nine (9) UI elements on screen at once (on the &lt;strong&gt;top right&lt;/strong&gt; corner, &lt;strong&gt;top center&lt;/strong&gt;, &lt;strong&gt;top left&lt;/strong&gt; corner, &lt;strong&gt;middle right&lt;/strong&gt;, &lt;strong&gt;center&lt;/strong&gt;, &lt;strong&gt;middle left&lt;/strong&gt;, &lt;strong&gt;bottom right&lt;/strong&gt; corner, &lt;strong&gt;bottom center&lt;/strong&gt;, and/or &lt;strong&gt;bottom left&lt;/strong&gt; corner).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kp7bv7iT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132746443/xFUIVHW2Z.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kp7bv7iT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132746443/xFUIVHW2Z.jpeg" alt="8.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See all the button type options &lt;a href="https://docs.echoar.xyz/web-console/compute-pages/customize-page#adding-buttons-actions-and-a-logo"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#viewing-click-analytics-and-clickthroughrates"&gt;
  &lt;/a&gt;
  Viewing Click Analytics and Click-through-Rates
&lt;/h3&gt;

&lt;p&gt;When buttons are configured, the number of button clicks and the overall click-through-rate (CRT) will display alongside each button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b9HWEwe6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132775163/gOLplARtx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b9HWEwe6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132775163/gOLplARtx.png" alt="9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You did it! üéâ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ohxmdnet--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132819306/YLMcwGH7q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ohxmdnet--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632132819306/YLMcwGH7q.gif" alt="10.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h3&gt;

&lt;p&gt;echoAR allows users to create WebAR experiences with endless possibilities. Each experience can be used for different purposes ‚Äî recreational, educational, commercial, and more. with echoAR, you can create customized WebAR experience for a verity of uses ‚Äî &lt;a href="https://medium.com/echoar/all-the-ways-augmented-reality-and-virtual-reality-are-shaping-sports-ef91b6f4423f"&gt;sports&lt;/a&gt;,  &lt;a href="https://medium.com/echoar/augmented-reality-virtual-reality-fashion-try-before-you-buy-fcd281ef6d4b"&gt;fashion&lt;/a&gt; (try before you buy!), &lt;a href="https://medium.com/echoar/how-augmented-reality-is-redefining-online-shopping-and-my-own-shopping-experience-125fa42e921c"&gt;shopping&lt;/a&gt;, &lt;a href="https://medium.com/echoar/how-augmented-reality-and-virtual-reality-are-revolutionizing-healthcare-db46c462d8bf"&gt;healthcare&lt;/a&gt;, &lt;a href="https://medium.com/echoar/how-ar-vr-are-transforming-the-real-estate-industry-25d183d7e5"&gt;real estate&lt;/a&gt;, and so much more! If you want to create a customized WebAR experience, try &lt;br&gt;
&lt;a href="https://www.echoar.xyz/"&gt;echoAR&lt;/a&gt; today.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#troubleshooting"&gt;
  &lt;/a&gt;
  Troubleshooting
&lt;/h3&gt;

&lt;p&gt;Troubleshoot issues &lt;a href="https://docs.echoar.xyz/unity/troubleshooting"&gt;here&lt;/a&gt;. You can check out our full documentation for other useful tutorials &lt;a href="https://docs.echoar.xyz/"&gt;here&lt;/a&gt; and also reach out to our support team &lt;a href="http://go.echoar.xyz/join"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frequently-asked-questions-faqs"&gt;
  &lt;/a&gt;
  Frequently Asked Questions (FAQs):
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;How do I get access to the WebAR Customizer?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This feature is available to our &lt;a href="https://www.echoar.xyz/pricing"&gt;enterprise clients&lt;/a&gt;. You can &lt;a href="//enterprise@echoAR.xyz"&gt;email us&lt;/a&gt; to be granted access.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is White labeling of for this platform possible?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes! For &lt;a href="https://www.echoar.xyz/pricing"&gt;enterprise clients&lt;/a&gt;, white labeling is an option! You can &lt;a href="//enterprise@echoAR.xyz"&gt;email us&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is echoAR compatible with different AR/VR technologies?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes! You can use echoAR to create no-code WebAR experiences but this is just the tip of the iceberg. Our cross-platform system supports any AR/VR client-side SDK for developers to choose to build their app, such as ARCore, ARKit, Vuforia, WebXR, AR.js, Swift, Flutter, Oculus SDK, Unity-based SDKs, Microsoft HoloLens, MagicLeap, and more. echoAR is also a Unity Verified Solutions Partner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where can I learn more?&lt;/strong&gt;&lt;br&gt;
Check out our AR/VR dev workshop recording on &lt;a href="https://www.youtube.com/watch?v=J_h_ygpxqbg&amp;amp;list=PLlNGTOzDSLPMaoyhYpoOm_nKPx3BHsBje"&gt;YouTube&lt;/a&gt; and our &lt;a href="https://www.echoar.xyz/"&gt;website&lt;/a&gt;. You can check out our full documentation for other useful tutorials &lt;a href="https://docs.echoar.xyz/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do I get in touch?&lt;/strong&gt;&lt;br&gt;
If you have any other questions, join our &lt;a href="http://go.echoar.xyz/join"&gt;Slack&lt;/a&gt;, send us an &lt;a href="//enterprise@echoAR.xyz"&gt;email&lt;/a&gt;, reach out on &lt;a href="https://www.facebook.com/echoARInc/"&gt;Facebook&lt;/a&gt;, connect on &lt;a href="https://www.linkedin.com/company/echoar/"&gt;LinkedIn&lt;/a&gt;, or &lt;a href="https://twitter.com/_echoAR_"&gt;tweet&lt;/a&gt; to say hello.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;echoAR (&lt;a href="http://www.echoAR.xyz"&gt;http://www.echoAR.xyz&lt;/a&gt;; Techstars ‚Äô19) is a cloud platform for augmented reality (AR) and virtual reality (VR) that provides tools and server-side infrastructure to help developers &amp;amp; companies quickly build and deploy AR/VR apps and experiences.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rxNYfQoy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632133123007/D1hYGpQT0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rxNYfQoy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632133123007/D1hYGpQT0.png" alt="11.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>augmentedreality</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Software Engineering is a Loser‚Äôs Game</title>
      <author>Tyler Hawkins</author>
      <pubDate>Mon, 20 Sep 2021 09:53:40 +0000</pubDate>
      <link>https://dev.to/thawkin3/software-engineering-is-a-loser-s-game-2k20</link>
      <guid>https://dev.to/thawkin3/software-engineering-is-a-loser-s-game-2k20</guid>
      <description>&lt;p&gt;I‚Äôve recently become fascinated by the idea of ‚Äúwinner‚Äôs games‚Äù and ‚Äúloser‚Äôs games.‚Äù There are several great articles which explain the idea in depth, but here‚Äôs a quick summary:&lt;/p&gt;

&lt;p&gt;An observation was made by Simon Ramo in 1973 that there is big difference in how games are won in amateur tennis versus professional tennis.&lt;/p&gt;

&lt;p&gt;When two amateur opponents are playing, the game is often won not through the winner‚Äôs great skill but because of the loser‚Äôs mistakes. The loser often commits unforced errors by hitting the ball out of bounds, missing easy shots, or double faulting. In other words, the loser beats himself. Points are ‚Äúlost‚Äù by the loser more than they are ‚Äúwon‚Äù by the winner. This is a ‚Äúloser‚Äôs game.‚Äù&lt;/p&gt;

&lt;p&gt;When two professional opponents are playing, the game is won primarily due to the winner‚Äôs skill. Neither player commits many unforced errors. The winner places his shots well and outperforms his opponent to defeat him. Points in this kind of game are ‚Äúwon‚Äù by the winner more than they are ‚Äúlost‚Äù by the loser. This is a ‚Äúwinner‚Äôs game.‚Äù&lt;/p&gt;

&lt;p&gt;So, if you‚Äôre playing a loser‚Äôs game, a winning strategy is to simply try to avoid making mistakes and let your opponent beat himself.&lt;/p&gt;

&lt;p&gt;(If you‚Äôve ever played tennis or ping pong before, I hope at this point you‚Äôre nodding your head in recognition. As an avid ping pong player, I‚Äôve seen this scenario play out in the office at work on a daily basis.)&lt;/p&gt;

&lt;p&gt;The application of this observation is that you should attempt to understand whether any given activity you‚Äôre involved in is a winner‚Äôs game or a loser‚Äôs game. Gaining that understanding teaches you how you should play the game.&lt;/p&gt;

&lt;p&gt;You can read more about these ideas in this &lt;a href="https://www.empirical.net/wp-content/uploads/2012/06/the_losers_game.pdf"&gt;article by Charles Ellis&lt;/a&gt;, this &lt;a href="https://fs.blog/2014/06/avoiding-stupidity/"&gt;article from the FS blog&lt;/a&gt;, or this &lt;a href="https://thehosk.medium.com/software-development-is-a-losers-game-fc68bb30d7eb"&gt;article from Ben Hosking&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#parallels-to-software-engineering"&gt;
  &lt;/a&gt;
  Parallels to Software Engineering
&lt;/h2&gt;

&lt;p&gt;Now, what if we consider software engineering to be a loser‚Äôs game? That is to say, we often beat ourselves by committing unforced errors and making mistakes. If we are amateurs, so to speak, how can we keep the ball in play rather than hitting it into the net?&lt;/p&gt;

&lt;p&gt;It‚Äôs a simple thing to say, ‚ÄúIf you want to be good, just stop making mistakes.‚Äù But that‚Äôs somewhat unhelpful. That‚Äôs like saying to those in poverty, ‚ÄúWhy don‚Äôt you just stop being poor?‚Äù&lt;/p&gt;

&lt;p&gt;It‚Äôs also unhelpful if we take this analogy too far. If avoiding mistakes is the ultimate goal of software engineering, is the best software engineer the one who writes no code or does nothing? Obviously, no. Software engineers are paid to write code to help bring to life some product in order to achieve some vision (make the business money, solve a real-world problem, simplify a task, etc.), so that must be the real ultimate goal.&lt;/p&gt;

&lt;p&gt;So it appears that we must balance producing valuable output with avoiding mistakes. This leads to an interesting thought experiment: In what ways do we beat ourselves, and how can we avoid making these amateur mistakes?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#unforced-errors"&gt;
  &lt;/a&gt;
  Unforced Errors
&lt;/h2&gt;

&lt;p&gt;Here‚Äôs a list of possible unforced errors we commit. I‚Äôm sure you may be able to add more to this list as well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Not understanding the problem before trying to code a solution&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not understanding the tools or programming languages we use&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not carefully reviewing our own code before asking for a code review&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not manually testing our own code before asking for a code review&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not writing unit tests&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not following agreed-upon company standards&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#solving-these-unforced-errors"&gt;
  &lt;/a&gt;
  Solving These Unforced Errors
&lt;/h2&gt;

&lt;p&gt;Now that we‚Äôve identified some potential unforced errors, how do we avoid making them?&lt;/p&gt;

&lt;p&gt;For starters, we can put safeguards in place to help us catch and correct our mistakes before they become too costly. All code repos should be configured with code linters, code formatters, and a suite of automated tests. These safeguards can be run as part of a CI pipeline prior to allowing any code to be merged.&lt;/p&gt;

&lt;p&gt;We can also be more thorough in our own attention to detail when writing code. After creating a merge request, we should always do a self code review before asking others to review our code. We should always manually validate our changes as well.&lt;/p&gt;

&lt;p&gt;Nothing is more frustrating as a code reviewer than reviewing someone else‚Äôs code who clearly didn‚Äôt do these checks themselves. It wastes the code reviewer‚Äôs time when he has to catch simple mistakes like commented out code, bad formatting, failing unit tests, or broken functionality in the code. All of these mistakes can easily be caught by the code author or by a CI pipeline.&lt;/p&gt;

&lt;p&gt;When merge requests are frequently full of errors, it turns the code review process into a gatekeeping process in which a handful of more senior engineers serve as the gatekeepers. This is an unfavorable scenario that creates bottlenecks and slows down the team‚Äôs velocity. It also detracts from the higher purpose of code reviews, which is knowledge sharing.&lt;/p&gt;

&lt;p&gt;We can use checklists and merge request templates to serve as reminders to ourselves of things to double check. Have you reviewed your own code? Have you written unit tests? Have you updated any documentation as needed? For frontend code, have you validated your changes in each browser your company supports? Have you ensured that all user-facing text is translated? Have you ensured that the UI meets accessibility standards and guidelines?&lt;/p&gt;

&lt;p&gt;By performing these checks ourselves, aided by automated tools, we show an added measure of professionalism and respect for our coworkers. Trust will grow and velocity will increase. The key is to be diligent and disciplined.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Software engineering is a loser‚Äôs game. So let‚Äôs learn to play the game and stop losing to ourselves.&lt;/p&gt;

</description>
      <category>leadership</category>
      <category>productivity</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to learn Machine Learning?
</title>
      <author>Nephilem</author>
      <pubDate>Mon, 20 Sep 2021 09:40:51 +0000</pubDate>
      <link>https://dev.to/jameskirk308/how-to-learn-machine-learning-258</link>
      <guid>https://dev.to/jameskirk308/how-to-learn-machine-learning-258</guid>
      <description>&lt;p&gt;Machine learning is the process of applying analytical and statistical models to enable computer systems to execute a range of activities in the absence of human-provided step-by-step instructions. As a consequence, machine learning may be used to generate various data-driven hypotheses.&lt;/p&gt;

&lt;p&gt;Many industries have benefited from data science, but machine learning has always been a fundamental driver of digital transformation and automation. With the quantity of data created every day increasing exponentially, the world requires experts who can extract insights from that data and forecast the future.&lt;/p&gt;

&lt;p&gt;Machine learning is prevalent all around the world. It can be beneficial to data scientists, software engineers, and business analysts. Students must spend months, if not years, mastering the theory and mathematics of machine learning. Without question, this is the best way to start your adventure. If you want to work in the subject of Machine Learning, you'll need a good background in math and statistics.&lt;/p&gt;

&lt;p&gt;Are you interested in the opportunities that machine learning offers? Check out the path you may take to become an expert in machine learning.&lt;br&gt;
Step 1. Learn Python/R&lt;br&gt;
Machine learning capabilities are available in a variety of languages. In addition, there is a lot of development work going on in a lot of language addition; there is a lot of development work going on in many languages. The most widely used languages are ‚ÄúR‚Äù and ‚ÄúPython,‚Äù and both have extensive support and community. Before diving into the realm of machine learning, I recommend picking one of these two languages (R or Python) to assist you in focusing on machine learning.&lt;/p&gt;

&lt;p&gt;Here are some book recommendations to get started with,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://amzn.to/2L604fM"&gt;Python Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/31UAr9J"&gt;R in a Nutshell&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Step 2. Learn Basic Statistics&lt;br&gt;
Let's get started or brush up on our statistics knowledge. Before you begin significant machine learning development, you need to have a strong understanding of the below mathematical topics,&lt;/p&gt;

&lt;p&gt;Probability distribution&lt;br&gt;
Theory of graphs&lt;br&gt;
Testing of Hypothesis&lt;br&gt;
Aspects of Bayesian thinking&lt;br&gt;
Coordinate geometry of curves&lt;br&gt;
Conditional probability&lt;br&gt;
Linear discriminant analysis&lt;br&gt;
Multivariate calculus.&lt;br&gt;
Prior and posteriors&lt;br&gt;
Least squares and mean square errors.&lt;br&gt;
Mean, median, and mode&lt;br&gt;
Maximum likelihoods.&lt;br&gt;
Principal component analysis (PCA)&lt;/p&gt;

&lt;p&gt;Here are some book recommendations to get started with,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://amzn.to/2F6WT6L"&gt;Practical Statistics for Data Scientists: 50 Essential Concepts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Elements-Statistical-Learning-Prediction-Statistics/dp/0387848576/ref=as_li_ss_tl?currency=INR&amp;amp;ie=UTF8&amp;amp;language=en_US&amp;amp;linkCode=ll1&amp;amp;linkId=b760a6048cf9e065d77392a286c19d3c&amp;amp;tag=learnds-20"&gt;The Elements of Statistical Learning: Data Mining, Inference, and Prediction (‚ÄúESL‚Äù)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Step 3. Learn Data Preparation&lt;br&gt;
Although each form of data, such as pictures in computer vision, text in natural language processing, and sequence data in time series forecasting, requires specialized processes, data preparation is a crucial issue for all. The quality of their feature engineering and data cleaning on the original data can separate great machine learning professionals from poor ones. Make the most of your stay here. Because this is the most time-consuming phase of the procedure, planning ahead is essential.&lt;/p&gt;

&lt;p&gt;Some of the important topics,&lt;br&gt;
Variable Identification&lt;br&gt;
Univariate and Multivariate analysis&lt;br&gt;
Missing values treatment&lt;br&gt;
Outlier treatment&lt;br&gt;
Feature Engineering&lt;/p&gt;

&lt;p&gt;Here are some book recommendations to get started with,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/gp/product/149190142X/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=149190142X&amp;amp;linkCode=as2&amp;amp;tag=petacrunch-20&amp;amp;linkId=edf06af7b6694a8bc86289c37f4378e4"&gt;Data Science from Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/35wjsvx"&gt;Best Practices in Data Cleaning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/35DoLcU"&gt;Data Wrangling in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/2zZOQXN"&gt;Feature Engineering for Machine  Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Step 4. Learn Machine  Learning&lt;br&gt;
If you want to study in incremental stages and require additional guidance, start with working on some &lt;a href="https://www.projectpro.io/article/top-10-machine-learning-projects-for-beginners-in-2021/397"&gt;beginner-level machine learning projects&lt;/a&gt;. Projects are the best way for beginners to get some hands-on experience with real-world machine learning problems. Also, it's simple and easy to understand concepts by actually working on them. Work on diverse ML projects covering all the fundamental algorithms and a few advanced subjects such as neural networks and recommendation systems. If you understand the concepts and algorithms well, you will be able to code them in R or Python easily.&lt;/p&gt;

&lt;p&gt;Under the machine learning concepts, you need to learn&lt;br&gt;
Machine learning models&lt;br&gt;
Machine learning types&lt;br&gt;
Supervised algorithms (regression, classification)&lt;br&gt;
Unsupervised and semi-supervised algorithms (clustering, dimensionality reduction, graph-based algorithms)&lt;br&gt;
Deep learning (CNNs and RNNs)&lt;br&gt;
Reinforcement learning (dynamic programming, Monte Carlo methods, heuristic methods)&lt;br&gt;
Clustering&lt;br&gt;
Separation of features&lt;br&gt;
Output variable&lt;br&gt;
Outliers&lt;br&gt;
Label/ target&lt;br&gt;
Data training&lt;br&gt;
Time series analysis&lt;br&gt;
Clustering&lt;/p&gt;

&lt;p&gt;Under the machine learning algorithms, you need to learn&lt;br&gt;
Linear regression&lt;br&gt;
Logistic regression&lt;br&gt;
Decision tree&lt;br&gt;
SVM&lt;br&gt;
KNN&lt;br&gt;
Naive Bayes&lt;br&gt;
Random Forest, &lt;br&gt;
XgBoost&lt;br&gt;
ADABoost etc.&lt;/p&gt;

&lt;p&gt;Here are some book recommendations to get started with,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://geni.us/DkXs"&gt;Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow: Concepts, Tools, and Techniques to Build Intelligent Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.in/dp/199957950X?tag=hackr0df-21&amp;amp;geniuslink=true"&gt;The Hundred Page Machine Learning Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.in/Machine-Learning-Absolute-Beginners-Introduction/dp/1549617214/"&gt;Machine Learning For Absolute Beginners: A Plain English Introduction (2nd Edition)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.in/Machine-Learning-Hackers-Studies-Algorithms/dp/9350236745/"&gt;Machine Learning for Hackers: Case Studies and Algorithms to Get You Started (1st Edition)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;Step 5. Get your hands dirty with Beginner Level ML Projects&lt;br&gt;
Machine learning is a rapidly growing field with applications in various areas, including health, finance, retail, and many more. If you're a novice interested in pursuing a career in new technologies such as machine learning or deep learning, it's important to have hands-on experience with the ideas.&lt;/p&gt;

&lt;p&gt;Here is a selected selection of machine learning projects to get you started on your ML adventure,&lt;/p&gt;

&lt;p&gt;House Price Prediction&lt;br&gt;
Titanic Survival Prediction&lt;br&gt;
Stock Prices Prediction&lt;br&gt;
Iris Flowers Classification Project&lt;br&gt;
Movie Ticket Pricing Prediction&lt;br&gt;
Handwritten Digit Classification&lt;/p&gt;

&lt;p&gt;Step 6. Advanced Machine Learning&lt;br&gt;
Now that you've learned the fundamentals of machine learning, it's time to consider more advanced machine learning techniques, such as Deep Learning and Natural Language Processing (NLP), to better grasp different data formats.&lt;/p&gt;

&lt;p&gt;Deep Learning&lt;br&gt;
In machine learning, deep learning allows computers to learn by doing, similar to how people learn. Self-driving cars rely heavily on deep learning because it will enable them to see a stop sign or tell the difference between a pedestrian and a lamppost from a distance. Consumer electronics, such as smartphones, tablets, TVs, and hands-free speakers, include voice control capabilities. Deep learning has gotten a lot of press lately, and for a good reason. It's all about reaching previously unattainable targets.&lt;/p&gt;

&lt;p&gt;Here are some book recommendations to get started with,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Deep-Learning-Coders-fastai-PyTorch/dp/1492045527"&gt;Deep Learning for Coders with Fastai and PyTorch: AI Applications Without a PhD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.in/Deep-Learning-Practitioners-Josh-Patterson/dp/9352136047"&gt;Deep Learning: A Practitioner's Approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.in/Deep-Learning-Python-Francois-Chollet/dp/1617294438/ref=sr_1_3?adgrpid=59218639416&amp;amp;dchild=1&amp;amp;ext_vrnc=hi&amp;amp;gclid=Cj0KCQjwnJaKBhDgARIsAHmvz6cBk2WME2ph2y0mazgFPm53MfiIwKlQZwDgbLm-7bFwXweNkbRQAUQaAjCnEALw_wcB&amp;amp;hvadid=294146687174&amp;amp;hvdev=c&amp;amp;hvlocphy=9303409&amp;amp;hvnetw=g&amp;amp;hvqmt=e&amp;amp;hvrand=14580621618843395660&amp;amp;hvtargid=kwd-304805565088&amp;amp;hydadcr=25368_1776648&amp;amp;keywords=deep+learning+with+python&amp;amp;qid=1631966348&amp;amp;sr=8-3"&gt;Deep Learning with Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Deep-Learning-Adaptive-Computation-Machine/dp/0262035618/ref=sr_1_1?ie=UTF8&amp;amp;qid=1472485235&amp;amp;sr=8-1&amp;amp;keywords=deep+learning+book"&gt;Deep Learning (Adaptive Computation and Machine Learning series)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Natural Language Processing&lt;br&gt;
&lt;a href="https://www.projectpro.io/article/nlp-projects-ideas-/452"&gt;Natural Language Processing (NLP)&lt;/a&gt; is a field of AI that allows machines to comprehend human language. Its objective is to create systems that can automatically understand the text and execute activities like translation, spell check, and classification. However, machine learning will be required to automate these procedures and provide correct replies. Machine learning is the process of teaching machines how to learn and develop without being explicitly programmed by applying algorithms.&lt;/p&gt;

&lt;p&gt;Here are some book recommendations to get started with,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/natural-language-processing/9780596803346/"&gt;Natural Language Processing with Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.in/Natural-Language-Processing-Action-Understanding/dp/1617294632"&gt;Natural Language Processing in Action: Understanding, analyzing, and generating text with Python&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Computer Vision&lt;br&gt;
In the artificial intelligence (AI) field, computer vision is the study of how computers and systems can derive useful information from visual inputs such as digital pictures, videos, and other types of media and take action or make suggestions in response to that data. &lt;a href="https://www.projectpro.io/article/computer-vision-projects/437"&gt;Computer vision&lt;/a&gt; and artificial intelligence go hand in hand because computer vision allows computers to perceive, observe, and comprehend. Computer vision has made great progress in recent years because of advancements in artificial intelligence, deep learning, and neural networks, exceeding humans in numerous tasks related to object identification and classification.&lt;/p&gt;

&lt;p&gt;Here are some book recommendations to get started with,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://szeliski.org/Book/"&gt;Computer Vision: Algorithms and Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.computervisionmodels.com/"&gt;Computer Vision: Models, Learning, and Inference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://programmingcomputervision.com/"&gt;Programming Computer Vision with Python&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, once you've completed this, you can start practicing machine learning skills on a dataset from websites like Kaggle, and once you've become proficient and comfortable with that, the sky's the limit; you can write research papers, compete in live competitions, and win both laurels and cash prizes.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>machinelearningprojects</category>
      <category>datascienceprojects</category>
    </item>
    <item>
      <title>Using Socket.io in express-generator.</title>
      <author>Abhishek shah</author>
      <pubDate>Mon, 20 Sep 2021 09:34:06 +0000</pubDate>
      <link>https://dev.to/shahiscoding/using-socket-io-in-express-generator-4pkp</link>
      <guid>https://dev.to/shahiscoding/using-socket-io-in-express-generator-4pkp</guid>
      <description>&lt;p&gt;Socket.io has documentation on how to use it with express but it a bit tricky to use socket.io with express-generator because the server is created in www file and the io is created in app or server but the use of io is in the router .So how can you use socket.io in express-generator ?&lt;br&gt;&lt;br&gt;
           Its very simple you can create a new file as mysocket and create instance of io over there and export it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-the-mysocket-file"&gt;
  &lt;/a&gt;
  In the mysocket file.
&lt;/h2&gt;

&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let socketIo = require('socket.io');
let io = socketIo();
let socketApi = {};
socketApi.io = io;
module.exports = socketApi;
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#in-the-www-file"&gt;
  &lt;/a&gt;
  In the www file
&lt;/h2&gt;

&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var server = http.createServer(app);
socketAPI.io.attach(server);
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;So, you can import io from mysocket file into the router and use it.&lt;br&gt;
If you have anything to add you can leave a comment.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>node</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is Ethereum</title>
      <author>Shadmehr</author>
      <pubDate>Mon, 20 Sep 2021 09:22:31 +0000</pubDate>
      <link>https://dev.to/shadmehra/what-is-ethereum-37mn</link>
      <guid>https://dev.to/shadmehra/what-is-ethereum-37mn</guid>
      <description>&lt;p&gt;If Bitcoin (BTC) is the alleged future of money, then what is Ethereum? For someone new to the cryptocurrency space, that‚Äôs the logical question to ask, considering they probably see Ethereum and its native Ether (ETH) cryptocurrency next to Bitcoin everywhere on exchanges and in the news. However, it‚Äôs not exactly fair to consider Ethereum to be in direct competition with Bitcoin. It has different goals, features and even technology.&lt;/p&gt;

&lt;p&gt;Ethereum is a decentralized blockchain network powered by the Ether token that enables users to make transactions, earn interest on their holdings through staking, use and store nonfungible tokens (NFTs), trade cryptocurrencies, play games, use social media and so much more.&lt;/p&gt;

&lt;p&gt;It‚Äôs currently a proof-of-work (PoW) blockchain but is making the move to proof-of-stake (PoS) with Ethereum 2.0 for scalability purposes and for a more environmentally friendly approach.&lt;/p&gt;

&lt;p&gt;Many consider Ethereum to be the internet‚Äôs next step. If centralized platforms like Apple‚Äôs App Store represent Web 2.0, a decentralized, user-powered network like Ethereum is Web 3.0. This ‚Äúnext-generation web‚Äù supports decentralized applications (DApps), decentralized finance (DeFi) and decentralized exchanges (DEXs), for instance. &lt;/p&gt;

&lt;p&gt;All of these are trustless, automated versions of traditional finance and internet usage, and they‚Äôre widely used. DeFi is already holding billions in total value locked in projects, and that‚Äôs expected to grow even higher.&lt;/p&gt;

&lt;p&gt;History of Ethereum&lt;br&gt;
Ethereum wasn‚Äôt always the second-largest blockchain project in the world. Vitalik Buterin actually co-created the project to answer for Bitcoin‚Äôs shortcomings. Buterin published the Ethereum white paper in 2013, detailing smart contracts ‚Äî automated, immutable ‚Äúif-then‚Äù statements ‚Äî enabling the development of decentralized applications. While DApp development already existed in the blockchain space, platforms weren‚Äôt interoperable. Buterin intended Ethereum to unify them. To him, unifying the way DApps run and interact was the only way to maintain adoption.&lt;/p&gt;

&lt;p&gt;Thus, Ethereum 1.0 was born. Think of it as Apple‚Äôs App Store: one space for tens of thousands of different applications, all abiding by the same ruleset, only that ruleset is hardcoded into the network and enforced autonomously, with developers able to enforce their own rules within DApps. There isn‚Äôt a central party, like with Apple changing and enforcing regulations. Instead, the power is in the hands of the people who act as a community.&lt;/p&gt;

&lt;p&gt;Of course, building such a network isn‚Äôt cheap. So, Buterin and his co-founders ‚Äî Gavin Wood, Jeffrey Wilcke, Charles Hoskinson, Mihai Alisie, Anthony Di Iorio and Amir Chetrit ‚Äî held a token presale to raise $18,439,086 in Ether, funding Ethereum‚Äôs present and future developments.&lt;/p&gt;

&lt;p&gt;The group also founded the Ethereum Foundation in Switzerland, with the mission to maintain and develop the network. Soon after, Buterin announced the foundation would run as a nonprofit, which caused some co-founders to leave.&lt;/p&gt;

&lt;p&gt;Over time, developers came to Ethereum with their own decentralized ideas. In 2016, these users founded The DAO, a democratic group that voted on network changes and proposals. The organization was backed by a smart contract and circumvented the need for a CEO heralding power over Ethereum. Instead, a majority needed to vote on changes for them to be implemented.&lt;/p&gt;

&lt;p&gt;However, this all went south when an unknown hacker stole $40 million in funds from The DAO‚Äôs holdings, due to a security exploit. To reverse the theft, The DAO voted to ‚Äúhard fork‚Äù Ethereum, diverging from the old network and upgrading to a new protocol, essentially undergoing a major software update. This new fork retained the name Ethereum, while the original network exists as Ethereum Classic.&lt;br&gt;
&lt;a href="https://arzdigital.academy/what-is-ethereum/"&gt;https://arzdigital.academy/what-is-ethereum/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>pow</category>
    </item>
  </channel>
</rss>
