<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How To: Build A Simple Search Bar in JavaScript</title>
      <author>Adriana DiPietro</author>
      <pubDate>Mon, 15 Nov 2021 03:35:15 +0000</pubDate>
      <link>https://dev.to/am20dipi/how-to-build-a-simple-search-bar-in-javascript-4onf</link>
      <guid>https://dev.to/am20dipi/how-to-build-a-simple-search-bar-in-javascript-4onf</guid>
      <description>&lt;p&gt;Hi Everyone!&lt;/p&gt;

&lt;p&gt;Today, we will be walking through how to build a functional, yet very simple search bar in JavaScript. This mini project will also utilize CSS and HTML. &lt;/p&gt;

&lt;p&gt;💭💭💭💭💭💭💭💭💭💭💭&lt;/p&gt;

&lt;p&gt;Let's look at our goals:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#base"&gt;Creating Base Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#HTML-base"&gt;Building out the Basics of the HTML File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#data"&gt;Creating Simple Data&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#event-listeners"&gt;Establishing Event Listeners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#results"&gt;Showing Results on the Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#clear-results"&gt;Clearing Results from the Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#no-results"&gt;Showing No Results/Invalid Input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#test"&gt;Testing Our Code&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that we have a clear outline of what we need to achieve... let's get started!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#creating-base-files"&gt;
  &lt;/a&gt;
  Creating Base Files&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Remember: this is a simple project. You may want to add and embellish this as you want. But for today's needs, we will only need three (3) files:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;index.js&lt;/li&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;style.css&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have one (1) JavaScript file which will hold our event listeners, functions, variable declarations + assignments, and our basic data.&lt;/p&gt;

&lt;p&gt;We have one (1) HTML file which will hold our DOM elements and portray our code in a visible format onto the web page. &lt;/p&gt;

&lt;p&gt;And we have one (1) CSS file which we will use to style our HTML elements and add some flair + creativity. &lt;/p&gt;

&lt;p&gt;You can create these files directly in your code editor(by right clicking and choosing "new file" or using the new file button) or in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch index.html
touch index.js
touch style.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#building-out-the-basics-of-html"&gt;
  &lt;/a&gt;
  Building out the Basics of HTML&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I usually utilize the standard pattern of HTML5 to get started; it looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Search Bar&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the title tags, you may name your project anything you would like. This is not necessarily visible on the browser page, but visible as the tab label on your browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Search Bar&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Two (2) important things to initially add (and by initially, I mean &lt;strong&gt;right away&lt;/strong&gt;!) are the necessary &lt;strong&gt;link&lt;/strong&gt; and &lt;strong&gt;script tags&lt;/strong&gt;. Get into the practice of adding a link tag of style.css file and a script tag of your index.js file as you begin to build out your HTML file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The stylesheets should go in the head tag portion of your HTML file. This tag allows whatever styling you program in your CSS file to appear visibly on the browser. &lt;/p&gt;

&lt;p&gt;While the script tag to your JavaScript file should go in the body tag. It is common to put it toward the bottom. It is important to connect your HTML file with any of your JS files. Your JS files will reference DOM elements from your HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we will need some elements nested in the body of our HTML. We will definitely need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a form element with an input field&lt;/li&gt;
&lt;li&gt;a "clear" button to clear our results&lt;/li&gt;
&lt;li&gt;an unordered list element to hold our results&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"search..."&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"clear"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"clear-results"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;clear&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"results-container&amp;gt;
       &amp;lt;ul class="&lt;/span&gt;&lt;span class="na"&gt;results-list&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"list"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

       &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

       &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With each element, provide a "class" name and/or "id". Make sure the class names or id names reflect what the element is doing or providing. &lt;/p&gt;

&lt;p&gt;From outside-in, I created a div element called "form-container"; this is a regular standard in JavaScript. We want our different sections, that have specific roles, to be nested in their own containers. So, our form container contains the form and the adjacent buttons. Then, we have another div called "results-container", this will hold our results. &lt;/p&gt;

&lt;p&gt;Within our form container, I created a form element. This holds our succeeding form elements. I created an input tag with a type of "text". This allows the user to type inside the input form. I also provided a class name, id and a placeholder. I then created a "submit" button with a type of "submit"; this button also has a class name. The text between the button tags will showcase "search" on the button in the browser. The same idea goes for the "clear" button. &lt;/p&gt;

&lt;p&gt;Our browser should look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LENnZ2aJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jg7hwe30paoeu6l15a6z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LENnZ2aJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jg7hwe30paoeu6l15a6z.png" alt="search bar" width="698" height="248"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, our HTML file is set: let's continue onto our JavaScript file. &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#creating-simple-data"&gt;
  &lt;/a&gt;
  Creating Simple Data &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Since we are not referencing an API, as this is a simple project, we are going to create some simple data to be rendered onto the page as search results. Head into your index.js file. &lt;/p&gt;

&lt;p&gt;I like to create data using JavaScript nested arrays. For today's example, our data is going to be people's names. So our array is going to be called "people".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each array item is going to be an object --- meaning each array item is going to have a property and value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;adri&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;becky&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chris&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dillon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;evan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;frank&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;georgette&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hugh&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;igor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jacoby&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kristina&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lemony&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;matilda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ophelia&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;patrick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;quincy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;roslyn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;solene&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;timothy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uff&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;violet&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wyatt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yadri&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is our simple data! Feel free to create an array of food, colors, TV shows... anything you want!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#establishing-event-listeners"&gt;
  &lt;/a&gt;
  Establishing Event Listeners &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We have to establish two (2) event listeners. An event listener waits for an event to happen (a "click", a "keystroke", "input") and then invokes an action. In this case, we need to have something happen when input is typed into the input form and when the clear button is clicked. In JavaScript, event listener syntax looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;whateverElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;event type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, for our input form to have an event listener attached to it, I am going to use a querySelector to retrieve the button by its class name and set it to a constant (so that it can be used later).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;searchInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am now going to attach the event listener to the constant we declared and assigned:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;searchInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// inside, we will need to achieve a few things:&lt;/span&gt;
    &lt;span class="c1"&gt;// 1. declare and assign the value of the event's target to a variable AKA whatever is typed in the search bar&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;

    &lt;span class="c1"&gt;// 2. check: if input exists and if input is larger than 0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// 3. redefine 'value' to exclude white space and change input to all lowercase&lt;/span&gt;
         &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;// 4. return the results only if the value of the search is included in the person's name&lt;/span&gt;
        &lt;span class="c1"&gt;// we need to write code (a function for filtering through our data to include the search input value)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 5. return nothing&lt;/span&gt;
        &lt;span class="c1"&gt;// input is invalid -- show an error message or show no results&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's create a foundation for the clear button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clearButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clear&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;clearButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 1. write a function that removes any previous results from the page&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#showing-results-on-the-page"&gt;
  &lt;/a&gt;
  Showing Results on the Page &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;To show our results, we have to ultimately iterate through our simple data and if any of the data matches the input value, then append the data to the page (visibly). &lt;/p&gt;

&lt;p&gt;Let's create a function that first appends the results to the webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// creating and declaring a function called "setList"&lt;/span&gt;
&lt;span class="c1"&gt;// setList takes in a param of "results"&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// creating a li element for each result item&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resultItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// adding a class to each item of the results&lt;/span&gt;
        &lt;span class="nx"&gt;resultItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;result-item&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// grabbing the name of the current point of the loop and adding the name as the list item's text&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// appending the text to the result item&lt;/span&gt;
        &lt;span class="nx"&gt;resultItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// appending the result item to the list&lt;/span&gt;
        &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resultItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, that we have written &lt;strong&gt; how to &lt;/strong&gt; append the results to the page; we need to focus on figuring out what &lt;strong&gt;should be&lt;/strong&gt; appended to the page. &lt;/p&gt;

&lt;p&gt;If we go back to our event listener, we left off at #4. &lt;br&gt;
We are going to call "setList()" and pass in our people array, but not the whole array. We are going to filter through the people array and only use the items of "people" whose name value's include the value of the search input.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;searchInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
         &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;//returning only the results of setList if the value of the search is included in the person's name&lt;/span&gt;
        &lt;span class="nx"&gt;setList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's test this, if we type "be" into our search bar, "becky" should appear on the page underneath the search bar. &lt;/p&gt;

&lt;p&gt;What do you see ?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#clearing-results-from-the-page"&gt;
  &lt;/a&gt;
  Clearing Results from the Page &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;To remove the results from the page, we need to call on our "list" element and remove each child because right now our result items are &lt;strong&gt;children elements&lt;/strong&gt; of "list".&lt;/p&gt;

&lt;p&gt;An easy, quick way to do this is to remove the first child of the parent element, until there is no more... we can do this using a "while" loop. &lt;/p&gt;

&lt;p&gt;** While Loops: while the condition is still true, do the action described. **&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;clearList&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;// looping through each child of the search results list and remove each child&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can refer to this function, clearList(), in our event listeners --&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;searchInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// inside, we will need to achieve a few things:&lt;/span&gt;
    &lt;span class="c1"&gt;// 1. declare and assign the value of the event's target to a variable AKA whatever is typed in the search bar&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;

    &lt;span class="c1"&gt;// 2. check: if input exists and if input is larger than 0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// 3. redefine 'value' to exclude white space and change input to all lowercase&lt;/span&gt;
         &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;// 4. return the results only if the value of the search is included in the person's name&lt;/span&gt;
        &lt;span class="c1"&gt;// we need to write code (a function for filtering through our data to include the search input value)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 5. return nothing&lt;/span&gt;
        &lt;span class="nx"&gt;clearList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;clearButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;clearList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#showing-no-results"&gt;
  &lt;/a&gt;
  Showing No Results &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Well, we have to ask ourselves, what happens if the input value renders no matches? no results? We need to tell the user exactly that!&lt;/p&gt;

&lt;p&gt;Let's build a function called "noResults()". This function will render an error message onto the page, where the results would've been.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;noResults&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;// create an element for the error; a list item ("li")&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// adding a class name of "error-message" to our error element&lt;/span&gt;
    &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error-message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// creating text for our element&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;No results found. Sorry!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// appending the text to our element&lt;/span&gt;
    &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// appending the error to our list element&lt;/span&gt;
    &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use this function within our setList() function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;clearList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resultItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;resultItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;result-item&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;resultItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resultItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;noResults&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#testing-our-code"&gt;
  &lt;/a&gt;
  Testing Our Code &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now, that we have beautifully written JavaScript file and HTML file, loaded with event listeners, variable declarations and functions, we can test our code. &lt;/p&gt;

&lt;p&gt;Head over to your browser... in your terminal, type:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;open index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Here is what I see... I added a title and did some slight styling...&lt;/p&gt;

&lt;p&gt;Case # 1: No Input (yet)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kRNQfchI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6q5dsrfc9vfbonh5jg7j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kRNQfchI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6q5dsrfc9vfbonh5jg7j.png" alt="no input yet" width="880" height="273"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Case # 2: Results!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YD6ivAfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohxprm0y3oemrsvslibr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YD6ivAfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohxprm0y3oemrsvslibr.png" alt="Image description" width="880" height="392"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Case # 3: No Matching Results &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RkE1EbZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xv7jy0jvt21gmigqy54.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RkE1EbZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xv7jy0jvt21gmigqy54.png" alt="Image description" width="880" height="302"&gt;&lt;/a&gt;&lt;/p&gt;







&lt;p&gt;Thank you so much for reading along and coding with me. I hope you learned as much as I have with this mini-JavaScript project.&lt;/p&gt;

&lt;p&gt;Please leave comments, questions or suggestions. Let's continue to learn together. &lt;br&gt;
💭💭💭💭💭💭💭💭💭💭💭💭💭💭💭&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Converting a Git master Branch to main</title>
      <author>Kristen Kinnear-Ohlmann</author>
      <pubDate>Mon, 15 Nov 2021 02:58:56 +0000</pubDate>
      <link>https://dev.to/kristenkinnearohlmann/converting-a-git-master-branch-to-main-1c9h</link>
      <guid>https://dev.to/kristenkinnearohlmann/converting-a-git-master-branch-to-main-1c9h</guid>
      <description>&lt;p&gt;Many organizations began to be aware of and change non-inclusive language in the second decade of the 21st century. Many of those changes affected technology, including the choice for &lt;code&gt;git&lt;/code&gt; to replace &lt;code&gt;master&lt;/code&gt; with &lt;code&gt;main&lt;/code&gt; for the default repo branch to avoid connotations with slavery.&lt;/p&gt;

&lt;p&gt;While GitHub took actions to ensure new repos created on the site used &lt;code&gt;main&lt;/code&gt;, older projects still used &lt;code&gt;master&lt;/code&gt; as the default branch. In addition, some generator libraries still create new projects with &lt;code&gt;master&lt;/code&gt; as the default and Azure DevOps also creates new repos with &lt;code&gt;master&lt;/code&gt; as the default.&lt;/p&gt;

&lt;p&gt;I had some time between projects at work in the last week and I wanted to tackle making the change for some organization repos I created to manage SQL objects and SSIS projects. This will allow all developers and contributors to have a common reference regardless of repo. There is a small process involved in making the change, as well as communicating the change to any other developers or contributors to the repo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rename-raw-master-endraw-to-raw-main-endraw-and-push-to-remote"&gt;
  &lt;/a&gt;
  Rename &lt;code&gt;master&lt;/code&gt; to &lt;code&gt;main&lt;/code&gt; and push to remote
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In the local environment, open a terminal and navigate to the project to be updated&lt;/li&gt;
&lt;li&gt;Move (rename) the &lt;code&gt;master&lt;/code&gt; branch to &lt;code&gt;main&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git branch &lt;span class="nt"&gt;-m&lt;/span&gt; master main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Push the new branch to the remote
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push -u origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reset-default-branch-on-github"&gt;
  &lt;/a&gt;
  Reset default branch on GitHub
&lt;/h2&gt;

&lt;p&gt;I use GitHub for my personal projects.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose &lt;strong&gt;Settings&lt;/strong&gt; &amp;gt; &lt;strong&gt;Branches&lt;/strong&gt;; &lt;code&gt;master&lt;/code&gt; will display as the default branch
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dMMSIrns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/49e545a34ff47fd332989e72cc19a5ea/11ff9/personal-100days-01-settings-branches.jpg" alt="GitHub master as default" width="880" height="243"&gt;
&lt;/li&gt;
&lt;li&gt;Click the arrows icon to &lt;strong&gt;Switch to another branch&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7_5CVCO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/492607f81c6f457b44ee008cfc19f459/3b78f/personal-100days-02-switch.jpg" alt="GitHub switch to another branch as default" width="880" height="369"&gt;
&lt;/li&gt;
&lt;li&gt;Select the new &lt;code&gt;main&lt;/code&gt; branch and click &lt;strong&gt;Update&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--enb5xH1r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/43836c981780dd10415421e41a6ab8f8/7aa7d/personal-100days-03-switch-main.jpg" alt="GitHub select main branch" width="597" height="247"&gt;
&lt;/li&gt;
&lt;li&gt;Acknowledge the warning for changing the default branch (ideally, you will communicate separately with others working in this repo that the default branch has changed)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SC71gNgZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/396bfc3c50cce9c32c86955655ec8801/52eca/personal-100days-04-switch-main-confirm.jpg" alt="GitHub acknowledge warning" width="585" height="380"&gt;
&lt;/li&gt;
&lt;li&gt;A message will display confirming the change
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ypey68kU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/8a68aee61a1b8c2dddb5db0c93c653fb/37c2d/personal-100days-05-switch-main-confirm-notif.jpg" alt="GitHub default branch changed" width="453" height="170"&gt;
&lt;/li&gt;
&lt;li&gt;Review the branches for the project and confirm that &lt;code&gt;main&lt;/code&gt; is set as the default
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4v-aODQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/3194ec823fca5f5b233d3266c0f679ae/7f450/personal-100days-06-final.jpg" alt="GitHub main default" width="728" height="547"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reset-default-branch-azure-devops"&gt;
  &lt;/a&gt;
  Reset default branch Azure DevOps
&lt;/h2&gt;

&lt;p&gt;My organization uses Azure Devops for version control.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose &lt;strong&gt;Repos&lt;/strong&gt; &amp;gt; &lt;strong&gt;Branches&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CVmeE3Bc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/0a7f3cf1022d08ab12de8046819d68e0/7b996/azdo-01-branches.jpg" alt="Azure DevOps branches" width="331" height="367"&gt;
&lt;/li&gt;
&lt;li&gt;Click the 3 dots menu on the &lt;code&gt;main&lt;/code&gt; record and choose &lt;strong&gt;Set as default branch&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XV0tYERg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/28cd375aada425d6e0088eba9ad1cfc5/f2a9a/azdo-02-branches-set-main-default.jpg" alt="Azure DevOps set main as default" width="880" height="431"&gt;
&lt;/li&gt;
&lt;li&gt;Confirm the change to &lt;code&gt;main&lt;/code&gt; as the default branch
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GQtEhDSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/91af972b9d5eaa99c2f7c725e371eab7/f2a9a/azdo-03-branches-main-default.jpg" alt="Azure DevOps confirm main" width="880" height="189"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#postconversion"&gt;
  &lt;/a&gt;
  Post-conversion
&lt;/h2&gt;

&lt;p&gt;In each case, I plan to leave the &lt;code&gt;master&lt;/code&gt; branch in place for about a week before removing it. At my work organization, I am in the process of informing other contributors about the need to change to using &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;

</description>
      <category>github</category>
      <category>tutorial</category>
      <category>azure</category>
    </item>
    <item>
      <title>18 amazing 🤩 GitHub repositories that will help you 🪄 make a Beautiful Project </title>
      <author>Jarvis</author>
      <pubDate>Mon, 15 Nov 2021 02:44:29 +0000</pubDate>
      <link>https://dev.to/jvscode/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-4d25</link>
      <guid>https://dev.to/jvscode/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-4d25</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Today I would like to give examples of good GitHub repositories that will help you implement complex animations, as well as useful functions in your projects.&lt;/p&gt;
&lt;p&gt;So let's get started &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/10-awesome-github-repos-every-web-developer-should-know/&amp;amp;ved=2ahUKEwiw1e_qpqbzAhU78HMBHVvBAWkQFnoECBAQAQ&amp;amp;usg=AOvVaw1YdY91hlP3suK6HGMF0MXW"&gt;18 amazing 🤩 GitHub repositories that will help you 🪄 make a Beautiful Project&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>40+ Vuejs Projects for Beginners – Easy Ideas to Get Started Coding Vuejs [Beginners - Advance]</title>
      <author>Jarvis</author>
      <pubDate>Mon, 15 Nov 2021 02:43:56 +0000</pubDate>
      <link>https://dev.to/jvscode/40-vuejs-projects-for-beginners-easy-ideas-to-get-started-coding-vuejs-beginners-advance-50a5</link>
      <guid>https://dev.to/jvscode/40-vuejs-projects-for-beginners-easy-ideas-to-get-started-coding-vuejs-beginners-advance-50a5</guid>
      <description>&lt;p&gt;In this article, I’m going to share another list of project ideas, today for the Vue.js apps.&lt;/p&gt;
&lt;p&gt;You could realize that we’re publishing articles with a list of project ideas for the particular front-end technology to provide you some apps ideas that you can create to practice coding and create an excellent portfolio. It’s also helpfull if you wonder how to practice Javascript. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/vuejs-project-for-beginners/&amp;amp;ved=2ahUKEwjnzOvzuIf0AhWDj-YKHf8IATAQFnoECA8QAQ&amp;amp;usg=AOvVaw2n3XO5CZAnv9fpZ08vYyWu"&gt;40+ Vuejs Projects for Beginners – Easy Ideas to Get Started Coding Vuejs &lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Criando variáveis no Kotlin - Explorando a documentação</title>
      <author>Morganna Giovanelli</author>
      <pubDate>Mon, 15 Nov 2021 02:21:59 +0000</pubDate>
      <link>https://dev.to/kotlinautas/criando-variaveis-no-kotlin-explorando-a-documentacao-4a4g</link>
      <guid>https://dev.to/kotlinautas/criando-variaveis-no-kotlin-explorando-a-documentacao-4a4g</guid>
      <description>&lt;p&gt;Pensando em formas diferentes de aproximar a comunidade da documentação do Kotlin, darei início a uma série de postagens para traduzir o conteúdo dessa documentação. Fiquem a vontade para compartilhar seus feedbacks e complementar o conteúdo.&lt;/p&gt;

&lt;p&gt;De qualquer forma, ainda que você já esteja trabalhando com kotlin, aconselho a consultar a documentação sempre que puder. Muitas das vezes, existem recursos da linguagem que facilitam nosso dia a dia, mas por costume de outras linguagens de programação com as quais já trabalhamos, temos a tendência de estruturar o código da forma como conhecemos até então.&lt;/p&gt;

&lt;p&gt;Vamos dar os primeiros passos?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kF-wXzFn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ex5bu69g7ledxr5tclmj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kF-wXzFn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ex5bu69g7ledxr5tclmj.gif" alt='gif bruxa subindo em uma vassoura dizendo "e lá vamos nós"' width="498" height="264"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se ainda não conhece a documentação, você pode consultar o conteúdo por &lt;a href="https://kotlinlang.org/docs/home.html"&gt;aqui&lt;/a&gt;. Ela está em inglês e não existe, até o momento, uma tradução oficial para outras línguas, como o português.&lt;/p&gt;

&lt;p&gt;Dentro do tópico &lt;em&gt;&lt;a href="https://kotlinlang.org/docs/basic-syntax.html"&gt;Basic Syntax&lt;/a&gt;&lt;/em&gt;, que seria a Sintaxe Básica, estão os primeiros tópicos da linguagem. Vamos iniciar aqui pelas &lt;a href="https://kotlinlang.org/docs/basic-syntax.html#variables"&gt;variáveis&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#vari%C3%A1veis"&gt;
  &lt;/a&gt;
  Variáveis
&lt;/h1&gt;

&lt;p&gt;Variáveis são utilizadas para guardar valores durante a execução do nosso código. Esses valores podem ser apenas de leitura, ou seja, não podemos alterá-lo durante a execução do programa. Mas também podem ser mutáveis, ou seja, podem mudar de valor durante o processamento e de acordo com a necessidade.&lt;/p&gt;

&lt;p&gt;No Kotlin, as variáveis de leitura, as chamadas &lt;em&gt;read-only&lt;/em&gt; em inglês, são definidas no código quando utilizamos a palavra-chave &lt;strong&gt;val&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para variáveis que podem ter seu valor alterado durante a execução de um programa, utilizamos a palavra-chave &lt;strong&gt;var&lt;/strong&gt; para sua criação no código.&lt;/p&gt;

&lt;p&gt;Vejamos os exemplos a seguir.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#vari%C3%A1veis-somente-leitura"&gt;
  &lt;/a&gt;
  Variáveis somente leitura
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#uma-vari%C3%A1vel-pode-ter-seu-tipo-declarado-e-receber-uma-atribui%C3%A7%C3%A3o-durante-a-sua-cria%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Uma variável pode ter seu tipo declarado e receber uma atribuição durante a sua criação:
&lt;/h3&gt;

&lt;p&gt;No trecho de código abaixo, estamos criando uma variável apenas de leitura chamada "a". Seu tipo é Int, ou seja, ela recebe valores que são números inteiros. E foi declarada com o valor 1.&lt;br&gt;
&lt;iframe src="https://play.kotlinlang.org/embed?short=e53Je697Aq&amp;amp;from=2&amp;amp;to&amp;amp;theme&amp;amp;readOnly"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uma-vari%C3%A1vel-pode-ter-seu-tipo-n%C3%A3o-declarado-e-receber-uma-atribui%C3%A7%C3%A3o-durante-a-sua-cria%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Uma variável pode ter seu tipo não declarado e receber uma atribuição durante a sua criação:
&lt;/h3&gt;

&lt;p&gt;Quando atribuímos um valor diretamente a uma variável, o Kotlin entende qual será o seu tipo. No caso abaixo, o tipo é Int, pois recebeu o valor 1, que é um número inteiro.&lt;br&gt;
&lt;iframe src="https://play.kotlinlang.org/embed?short=3zXo0Rau2&amp;amp;from=2&amp;amp;to&amp;amp;theme&amp;amp;readOnly"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uma-vari%C3%A1vel-pode-ter-seu-tipo-declarado-e-n%C3%A3o-receber-uma-atribui%C3%A7%C3%A3o-durante-a-sua-cria%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Uma variável pode ter seu tipo declarado e não receber uma atribuição durante a sua criação:
&lt;/h3&gt;

&lt;p&gt;No caso abaixo, a variável foi criada e, só durante a execução do programa, ela receberá um valor. Não necessariamente precisa ter uma atribuição diretamente em sua criação.&lt;br&gt;
&lt;iframe src="https://play.kotlinlang.org/embed?short=KjTUxNuiC&amp;amp;from=2&amp;amp;to&amp;amp;theme&amp;amp;readOnly"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uma-vari%C3%A1vel-de-leitura-n%C3%A3o-poder%C3%A1-ter-seu-valor-alterado"&gt;
  &lt;/a&gt;
  Uma variável de leitura não poderá ter seu valor alterado:
&lt;/h3&gt;

&lt;p&gt;No caso abaixo, se você executar o código, verá que retornará um erro dizendo &lt;em&gt;Val cannot be reassigned&lt;/em&gt;, ou seja, a variável declarada como somente leitura não poderá ter um novo valor atribuído.&lt;br&gt;
&lt;iframe src="https://play.kotlinlang.org/embed?short=BKUI0ABeA&amp;amp;from&amp;amp;to&amp;amp;theme&amp;amp;readOnly=false"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vari%C3%A1veis-mut%C3%A1veis"&gt;
  &lt;/a&gt;
  Variáveis mutáveis
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#uma-vari%C3%A1vel-pode-ter-seu-tipo-declarado-e-receber-uma-atribui%C3%A7%C3%A3o-durante-a-sua-cria%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Uma variável pode ter seu tipo declarado e receber uma atribuição durante a sua criação:
&lt;/h3&gt;

&lt;p&gt;No trecho de código abaixo, estamos criando uma variável mutável chamada "a". Seu tipo é Int, ou seja, ela recebe valores que são números inteiros. E foi inicializada com o valor 1. Posteriormente, teve seu valor alterado para 2, pois é var.&lt;br&gt;
&lt;iframe src="https://play.kotlinlang.org/embed?short=6wTZ10Mab&amp;amp;from&amp;amp;to&amp;amp;theme&amp;amp;readOnly=false"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uma-vari%C3%A1vel-pode-ter-seu-tipo-n%C3%A3o-declarado-e-receber-uma-atribui%C3%A7%C3%A3o-durante-a-sua-cria%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Uma variável pode ter seu tipo não declarado e receber uma atribuição durante a sua criação:
&lt;/h3&gt;

&lt;p&gt;Quando atribuímos um valor diretamente a uma variável, o Kotlin entende qual será o seu tipo. No caso abaixo, o tipo é Int, pois recebeu o valor 1, que é um número inteiro. E, por ser var, teve seu valor alterado para 2 sem problemas.&lt;br&gt;
&lt;iframe src="https://play.kotlinlang.org/embed?short=9hAwY5Gk-P&amp;amp;from&amp;amp;to&amp;amp;theme&amp;amp;readOnly=false"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uma-vari%C3%A1vel-pode-ter-seu-tipo-declarado-e-n%C3%A3o-receber-uma-atribui%C3%A7%C3%A3o-durante-a-sua-cria%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Uma variável pode ter seu tipo declarado e não receber uma atribuição durante a sua criação:
&lt;/h3&gt;

&lt;p&gt;No caso abaixo, a variável foi criada e, só durante a execução do programa, ela receberá um valor. Não necessariamente precisa ter uma atribuição diretamente em sua criação.&lt;br&gt;
&lt;iframe src="https://play.kotlinlang.org/embed?short=vI0uFRfTz&amp;amp;from&amp;amp;to&amp;amp;theme&amp;amp;readOnly=false"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mundo-real"&gt;
  &lt;/a&gt;
  Mundo real
&lt;/h2&gt;

&lt;p&gt;Precisamos avaliar e entender um contexto para tomar uma decisão entre deixar uma variável como mutável ou como somente leitura. Tudo depende da necessidade e dos requisitos que estamos atendendo, além de pontos de controle e de segurança que podem ser importantes em nosso código.&lt;br&gt;
Normalmente, uma variável é criada como &lt;strong&gt;val&lt;/strong&gt;, impedindo alterações diretas de seu valor. E, se houver necessidade, alteramos para &lt;strong&gt;var&lt;/strong&gt; durante o desenvolvimento de um projeto.&lt;br&gt;
Contudo, além disso, também avaliamos a necessidade de uma variável ser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;uma constante;&lt;/li&gt;
&lt;li&gt;local, que atenda apenas a um escopo;&lt;/li&gt;
&lt;li&gt;global, que esteja disponível a todo o projeto;&lt;/li&gt;
&lt;li&gt;uma propriedade, controlando de acordo com o modificador de acesso.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pontos extremamente importantes e que abordaremos no próximo artigo.&lt;/p&gt;

&lt;p&gt;Caso tenha algo a acrescentar, sugestões ou queira tirar alguma dúvida, fique a vontade para enviar nos comentários. Até a próxima!&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>braziliandevs</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Easy use of F-Strings with Python.</title>
      <author>Sam Sonter</author>
      <pubDate>Mon, 15 Nov 2021 01:48:12 +0000</pubDate>
      <link>https://dev.to/asapsonter/easy-use-of-f-strings-with-python-55ja</link>
      <guid>https://dev.to/asapsonter/easy-use-of-f-strings-with-python-55ja</guid>
      <description>&lt;h1&gt;
  &lt;a href="#fstrings"&gt;
  &lt;/a&gt;
  F-Strings
&lt;/h1&gt;

&lt;p&gt;Here, I am going to jump straight  to printing out strings with Python. Take a look at this code using place holder format method. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;first_name = 'sam'
last_name = 'sonter'

intro = "My name is {} {}".format (first_name,last_name)
print(intro)

output:  My name is sam sonter
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Python can also allow us to use the F-String to get same output. Check this out.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;first_name = 'sam'
last_name = 'sonter'

intro = f"My name is {first_name} {last_name}" 
print(intro)

output:  My name is sam sonter
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I got ride of the &lt;strong&gt;format&lt;/strong&gt; method and introduced the &lt;strong&gt;F&lt;/strong&gt; string. I now put the variables inside the place holders making the block of code easier to understand.&lt;/p&gt;

&lt;p&gt;Now, I am going to use a dictionary in the next example.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;person = {'name': 'Sam', 'height': 188}
sentence = "My name is {} I am {} cm tall".format(person['name'],person['age'])

print(sentence)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This example is pretty much the same with the first one except here we are using a dictionary. Now, let's use the &lt;strong&gt;F&lt;/strong&gt; string.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;person = {'name': 'Sam', 'height': 188}
sentence = f"My name is {person['name']} I am {person['height']} cm tall"
print(sentence)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Many people might make syntax errors by using the wrong quotes. If you pay attention you can see i used double &lt;strong&gt;"&lt;/strong&gt;  outside my statement and single &lt;strong&gt;'&lt;/strong&gt; inside the statement to avoid syntax errors. &lt;br&gt;
 That is it for this article, thanks for reading and I hope you find this useful.&lt;br&gt;
&lt;em&gt;Sam Sonter&lt;/em&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Introducing hRPC: a simple RPC system for user-facing APIs</title>
      <author>Janet Blackquill</author>
      <pubDate>Mon, 15 Nov 2021 00:53:47 +0000</pubDate>
      <link>https://dev.to/harmonydevelopment/introducing-hrpc-a-simple-rpc-system-for-user-facing-apis-16ge</link>
      <guid>https://dev.to/harmonydevelopment/introducing-hrpc-a-simple-rpc-system-for-user-facing-apis-16ge</guid>
      <description>&lt;p&gt;&lt;em&gt;Co-authored by: Yusuf Bera Ertan (&lt;a href="https://github.com/yusdacra"&gt;yusdacra@GitHub&lt;/a&gt;), Danil Korennykh (&lt;a href="https://github.com/Bluskript"&gt;Bluskript@GitHub&lt;/a&gt;), Janet Blackquill (&lt;a href="https://github.com/pontaoski"&gt;pontaoski@GitHub&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;hRPC is a new RPC system that we, at &lt;a href="https://github.com/harmony-development"&gt;Harmony&lt;/a&gt;, have been developing and using for our decentralized chat protocol. It uses Protocol Buffers (Protobufs) as a wire format, and supports streaming&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;hRPC is primarily made for user-facing APIs and aims to be as simple to use as possible.&lt;/p&gt;

&lt;p&gt;If you would like to learn more, the hRPC specification can be found &lt;a href="https://github.com/harmony-development/hrpc/blob/main/protocol/SPEC.md"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What is an RPC system?&lt;/strong&gt;&lt;br&gt;
If you know traditional API models like REST, then you can think of RPC as a more integrated version of that. Instead of defining requests by endpoint and method, requests are defined as methods on objects or services. With good code generation, an RPC system is often easier and safer to use for both clients and servers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#why-hrpc"&gt;
  &lt;/a&gt;
  Why hRPC?
&lt;/h2&gt;

&lt;p&gt;hRPC uses REST to model plain unary requests, and WebSockets to model streaming requests. As such, it should be easy to write a library for the languages that don't already support it.&lt;/p&gt;

&lt;p&gt;hRPC features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type safety&lt;/li&gt;
&lt;li&gt;Strict protocol conformance on both ends&lt;/li&gt;
&lt;li&gt;Easy streaming logic&lt;/li&gt;
&lt;li&gt;More elegant server and client code with interfaces/traits and endpoint generation.&lt;/li&gt;
&lt;li&gt;Cross-language code generation&lt;/li&gt;
&lt;li&gt;Smaller request sizes&lt;/li&gt;
&lt;li&gt;Faster request parsing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-not-twirp"&gt;
  &lt;/a&gt;
  Why Not Twirp?
&lt;/h2&gt;

&lt;p&gt;Twirp and hRPC have a lot in common, but the key difference that makes Twirp a dealbreaker for harmony is its lack of support for &lt;strong&gt;streaming RPCs&lt;/strong&gt;. Harmony's vision was to represent all endpoints in Protobuf format, and as a result Twirp became fundamentally incompatible. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-not-grpc"&gt;
  &lt;/a&gt;
  Why Not gRPC?
&lt;/h2&gt;

&lt;p&gt;gRPC is the de-facto RPC system, in fact protobuf and gRPC come together a lot of the time. So the question is, why would you want to use hRPC instead?&lt;/p&gt;

&lt;p&gt;Unfortunately, gRPC has many limitations, and most of them result from its low-level nature.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-lack-of-web-support"&gt;
  &lt;/a&gt;
  The lack of web support
&lt;/h3&gt;

&lt;p&gt;At Harmony, support for web-based clients was a must, as was keeping things simple to implement. gRPC had neither. As stated by gRPC:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is currently impossible to implement the HTTP/2 gRPC spec in the browser, as there is simply no browser API with enough fine-grained control over the requests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#the-grpc-slowloris"&gt;
  &lt;/a&gt;
  The gRPC slowloris
&lt;/h3&gt;

&lt;p&gt;gRPC streams are essentially just a long-running HTTP request. Whenever data needs to be sent, it just sends a new HTTP/2 frame. The issue with this, however, is that &lt;strong&gt;most reverse proxies do not understand gRPC streaming.&lt;/strong&gt; At Harmony, it was fairly common for sockets to disconnect because they are idle for long stretches of time. NGINX and other reverse proxies would see these idle connections, and would close them, causing issues to all of our clients. hRPC's use of WebSockets solves this use-case, as reverse proxies are fully capable to understand them.&lt;/p&gt;

&lt;p&gt;In general, with hRPC we retain the bulk of gRPC's advantages while simplifying stuff massively.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-not-plain-rest"&gt;
  &lt;/a&gt;
  Why not plain REST?
&lt;/h2&gt;

&lt;p&gt;Protobuf provides a more compact binary format for requests than JSON. It lets the user to define a schema for their messages and RPCs which results in easy server and client code generation. Protobuf also has features that are very useful for these kind of schemas (such as extensions), and as such is a nice fit for hRPC.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-simple-chat-example"&gt;
  &lt;/a&gt;
  A Simple Chat Example
&lt;/h2&gt;

&lt;p&gt;Let's try out hRPC with a basic chat example. This is a simple system that supports posting chat messages which are then streamed back to all clients. Here is the protocol:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight protobuf"&gt;&lt;code&gt;&lt;span class="na"&gt;syntax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"proto3"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;chat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Empty object which is used in place of nothing&lt;/span&gt;
&lt;span class="kd"&gt;message&lt;/span&gt; &lt;span class="nc"&gt;Empty&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Object that represents a chat message&lt;/span&gt;
&lt;span class="kd"&gt;message&lt;/span&gt; &lt;span class="nc"&gt;Message&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;service&lt;/span&gt; &lt;span class="n"&gt;Chat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Endpoint to send a chat message&lt;/span&gt;
  &lt;span class="k"&gt;rpc&lt;/span&gt; &lt;span class="n"&gt;SendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Endpoint to stream chat messages&lt;/span&gt;
  &lt;span class="k"&gt;rpc&lt;/span&gt; &lt;span class="n"&gt;StreamMessages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By the end, this is what we will have:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zjh0AzYK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iasl6fvuswwod99f09nu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zjh0AzYK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iasl6fvuswwod99f09nu.gif" alt="vue client being demonstrated" width="880" height="813"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you don't want to follow along, you can find the full server example at &lt;a href="https://github.com/harmony-development/hrpc-examples/tree/main/chat"&gt;hRPC examples repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's start by writing a server that implements this. We will use &lt;a href="https://github.com/harmony-development/hrpc-rs"&gt;hrpc-rs&lt;/a&gt;, which is a Rust implementation of hRPC.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you don't have Rust installed, you can install it from &lt;a href="https://rustup.rs/"&gt;the rustup website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We get started with creating our project with &lt;code&gt;cargo new chat-example --bin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we will need to add a few dependencies to &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[build-dependencies]&lt;/span&gt;
&lt;span class="c"&gt;# `hrpc-build` will handle generating Protobuf code for us&lt;/span&gt;
&lt;span class="c"&gt;# The features we enable here matches the ones we enable for `hrpc`&lt;/span&gt;
&lt;span class="nn"&gt;hrpc-build&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.29"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;features&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"recommended"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
&lt;span class="c"&gt;# `prost` provides us with protobuf decoding and encoding&lt;/span&gt;
&lt;span class="py"&gt;prost&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.9"&lt;/span&gt;
&lt;span class="c"&gt;# `hrpc` is the `hrpc-rs` main crate!&lt;/span&gt;
&lt;span class="c"&gt;# Enable hrpc's server features, and the recommended transport&lt;/span&gt;
&lt;span class="nn"&gt;hrpc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.29"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;features&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"recommended"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;# `tokio` is the async runtime we use&lt;/span&gt;
&lt;span class="c"&gt;# Enable tokio's macros so we can mark our main function, and enable multi&lt;/span&gt;
&lt;span class="c"&gt;# threaded runtime&lt;/span&gt;
&lt;span class="nn"&gt;tokio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;features&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"rt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"rt-multi-thread"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"macros"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;# `tower-http` is a collection of HTTP related middleware&lt;/span&gt;
&lt;span class="nn"&gt;tower-http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;features&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;["cors"]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;# Logging utilities&lt;/span&gt;
&lt;span class="c"&gt;# `tracing` gives us the ability to log from anywhere we want&lt;/span&gt;
&lt;span class="py"&gt;tracing&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.1"&lt;/span&gt;
&lt;span class="c"&gt;# `tracing-subscriber` gives us a terminal logger&lt;/span&gt;
&lt;span class="py"&gt;tracing-subscriber&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.3"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to check if your project compiles with &lt;code&gt;cargo check&lt;/code&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-the-protobufs"&gt;
  &lt;/a&gt;
  Building the Protobufs
&lt;/h3&gt;

&lt;p&gt;Now, let's get basic protobuf code generation working.&lt;/p&gt;

&lt;p&gt;First, go ahead and copy the chat protocol from earlier into &lt;code&gt;src/chat.proto&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After that we will need a build script. Make a file called &lt;code&gt;build.rs&lt;/code&gt; in the root of the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// build.rs&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// The path here is the path to our protocol file&lt;/span&gt;
    &lt;span class="c"&gt;// which we copied in the previous step!&lt;/span&gt;
    &lt;span class="c"&gt;//&lt;/span&gt;
    &lt;span class="c"&gt;// This will generate Rust code for our protobuf definitions.&lt;/span&gt;
    &lt;span class="nn"&gt;hrpc_build&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;compile_protos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"src/chat.proto"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"could not compile the proto"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And lastly, we need to import the generated code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// src/main.rs&lt;/span&gt;
&lt;span class="c"&gt;// Our chat package generated code&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;chat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// This imports all the generated code for you&lt;/span&gt;
    &lt;span class="nn"&gt;hrpc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;include_proto!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"chat"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// This is empty for now!&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can run &lt;code&gt;cargo check&lt;/code&gt; to see if it compiles!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementing-the-protocol"&gt;
  &lt;/a&gt;
  Implementing the Protocol
&lt;/h3&gt;

&lt;p&gt;In this section, we will implement the protocol endpoints.&lt;/p&gt;

&lt;p&gt;First, get started by importing the stuff we will need:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// src/main.rs&lt;/span&gt;
&lt;span class="c"&gt;// top of the file&lt;/span&gt;

&lt;span class="c"&gt;// Import everything from chat package, and the generated&lt;/span&gt;
&lt;span class="c"&gt;// server trait&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;chat&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;chat_server&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c"&gt;// Import the server prelude, which contains&lt;/span&gt;
&lt;span class="c"&gt;// often used code that is used to develop servers.&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;hrpc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;server&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;prelude&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's define the business logic for the Chat server. This is a simple example, so we can just use channels from &lt;code&gt;tokio::sync::broadcast&lt;/code&gt;. This will allow us to broadcast our chat messages to all clients connected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// ... other `use` statements&lt;/span&gt;

&lt;span class="c"&gt;// The channel we will use to broadcast our chat messages&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Afterwards we can define our service state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;ChatService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// The sender half of our broadcast channel.&lt;/span&gt;
    &lt;span class="c"&gt;// &lt;/span&gt;
    &lt;span class="c"&gt;// We will use it's `.subscribe()` method to get a&lt;/span&gt;
    &lt;span class="c"&gt;// receiver when a client connects.&lt;/span&gt;
    &lt;span class="n"&gt;message_broadcast&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Sender&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we define a simple constructor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;ChatService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Creates a new `ChatService`&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Self&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Create a broadcast channel with a maximum 100&lt;/span&gt;
        &lt;span class="c"&gt;// amount of items that can be pending. This&lt;/span&gt;
        &lt;span class="c"&gt;// doesn't matter in our case, so the number is&lt;/span&gt;
        &lt;span class="c"&gt;// arbitrary.&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Self&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;message_broadcast&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to implement the generated trait for our service:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Chat&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ChatService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// This corresponds to the SendMessage endpoint&lt;/span&gt;
    &lt;span class="c"&gt;// &lt;/span&gt;
    &lt;span class="c"&gt;// `handler` is a Rust macro that is used to transform&lt;/span&gt;
    &lt;span class="c"&gt;// an `async fn` into a properly typed hRPC trait method.&lt;/span&gt;
    &lt;span class="nd"&gt;#[handler]&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;send_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ServerResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// we will add this in a bit&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// This corresponds to the StreamMessages endpoint&lt;/span&gt;
    &lt;span class="nd"&gt;#[handler]&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;stream_messages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c"&gt;// We don't use the request here, so we can just ignore it.&lt;/span&gt;
        &lt;span class="c"&gt;// The leading `_` stops Rust from complaining about unused&lt;/span&gt;
        &lt;span class="c"&gt;// variables!&lt;/span&gt;
        &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Socket&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ServerResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// we will add this in a bit&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now for the actual logic, let's start with message sending:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[handler]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;send_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ServerResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Extract the chat message from the request&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="nf"&gt;.into_message&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// Try to broadcast the chat message across the channel&lt;/span&gt;
    &lt;span class="c"&gt;// if it fails return an error&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.message_broadcast&lt;/span&gt;&lt;span class="nf"&gt;.send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.is_err&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;HrpcError&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new_internal_server_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"couldn't broadcast message"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Log the message we just got&lt;/span&gt;
    &lt;span class="nn"&gt;tracing&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;info!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"got message: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="py"&gt;.content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;&lt;span class="nf"&gt;.into_response&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Streaming logic is simple. Simply subscribe to the broadcast channel, and then read messages from that channel forever until there's an error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[handler]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;stream_messages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Socket&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ServerResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Subscribe to the message broadcaster&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;message_receiver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.message_broadcast&lt;/span&gt;&lt;span class="nf"&gt;.subscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c"&gt;// Poll for received messages...&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message_receiver&lt;/span&gt;&lt;span class="nf"&gt;.recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// ...and send them to client.&lt;/span&gt;
        &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="nf"&gt;.send_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's put all of this together in the &lt;code&gt;main&lt;/code&gt; function. We'll make a new chat server, where we pass in our implementation of the service. We'll be serving using the Hyper HTTP transport for the server, although this can be swapped out with another transport if needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// ...other imports&lt;/span&gt;

&lt;span class="c"&gt;// Import our CORS middleware&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;tower_http&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;CorsLayer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;// Import the Hyper HTTP transport for hRPC&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;hrpc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;server&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;transport&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;http&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Hyper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;// `tokio::main` is a Rust macro that converts an `async fn`&lt;/span&gt;
&lt;span class="c"&gt;// `main` function into a synchronous `main` function, and enables&lt;/span&gt;
&lt;span class="c"&gt;// you to use the `tokio` async runtime. The runtime we use is the&lt;/span&gt;
&lt;span class="c"&gt;// multithreaded runtime, which is what we want.&lt;/span&gt;
&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;BoxError&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Initialize the default logging in `tracing-subscriber`&lt;/span&gt;
    &lt;span class="c"&gt;// which is logging to the terminal&lt;/span&gt;
    &lt;span class="nn"&gt;tracing_subscriber&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c"&gt;// Create our chat service&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;ChatServer&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;ChatService&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="c"&gt;// Create our transport that we will use to serve our service&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;transport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Hyper&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"127.0.0.1:2289"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// Layer our transport for use with CORS.&lt;/span&gt;
    &lt;span class="c"&gt;// Since this is specific to HTTP, we use the transport's layer method.&lt;/span&gt;
    &lt;span class="c"&gt;//&lt;/span&gt;
    &lt;span class="c"&gt;// Note: A "layer" can simply be thought of as a middleware!&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;transport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="nf"&gt;.layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;CorsLayer&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;permissive&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="c"&gt;// Serve our service with our transport&lt;/span&gt;
    &lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="nf"&gt;.serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how in the code above, we needed to specify a CORS layer. The next step of the process, of course, is to write a frontend for this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend-cli"&gt;
  &lt;/a&gt;
  Frontend (CLI)
&lt;/h3&gt;

&lt;p&gt;If you don't want to use the web client example, you can try the CLI client &lt;a href="https://github.com/harmony-development/hrpc-examples/tree/main/chat"&gt;at hRPC examples repository&lt;/a&gt;. Keep in mind that this post doesn't cover writing a CLI client.&lt;/p&gt;

&lt;p&gt;To run it, after you &lt;code&gt;git clone&lt;/code&gt; the repository linked, navigate to &lt;code&gt;chat/tui-client&lt;/code&gt; and run &lt;code&gt;cargo run&lt;/code&gt;. Instructions also available in the READMEs in the repository.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend-vue-3-vite-ts"&gt;
  &lt;/a&gt;
  Frontend (Vue 3 + Vite + TS)
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you don't want to follow along, you can find the full web client example at &lt;a href="https://github.com/harmony-development/hrpc-examples/tree/main/chat"&gt;hRPC examples repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The setup is a basic Vite project using the Vue template, with all of the boilerplate demo code removed. Once you have the project made, install the following packages:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i @protobuf-ts/runtime @protobuf-ts/runtime-rpc @harmony-dev/transport-hrpc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i -D @protobuf-ts/plugin @protobuf-ts/protoc windicss vite-plugin-windicss&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In order to get Protobuf generation working, we'll use &lt;a href="https://buf.build"&gt;Buf&lt;/a&gt;, a tool specifically built for building protocol buffers. Start by making the following &lt;code&gt;buf.gen.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ts&lt;/span&gt;
    &lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gen&lt;/span&gt;
    &lt;span class="na"&gt;opt&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;generate_dependencies,long_type_string&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./node_modules/@protobuf-ts/plugin/bin/protoc-gen-ts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The config above invokes the code generator we installed, and enables a string representation for longs, and generating code for builtin google types too.&lt;/p&gt;

&lt;p&gt;Now, paste the protocol from earlier into &lt;code&gt;protocol/chat.proto&lt;/code&gt; in the root of the folder, and run &lt;code&gt;buf generate ./protocol&lt;/code&gt;. If you see a &lt;code&gt;gen&lt;/code&gt; folder appear, then the code generation worked! ✅&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-implementation"&gt;
  &lt;/a&gt;
  The Implementation
&lt;/h4&gt;

&lt;p&gt;When building the UI, it's useful to have a live preview of our site. Run &lt;code&gt;npm run dev&lt;/code&gt; in terminal which will start a new dev server.&lt;/p&gt;

&lt;p&gt;The entire implementation will be done in &lt;code&gt;src/App.vue&lt;/code&gt;, the main Vue component for the site.&lt;/p&gt;

&lt;p&gt;For the business logic, we'll be using the new fancy and shiny Vue 3 &lt;a href="https://v3.vuejs.org/api/sfc-script-setup.html"&gt;script setup syntax&lt;/a&gt;. Start by defining it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;setup&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, inside this block, we first create a chat client by passing our client configuration into the HrpcTransport constructor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ChatClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../gen/chat.client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HrpcTransport&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@harmony-dev/transport-hrpc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ChatClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HrpcTransport&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;baseUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://127.0.0.1:2289&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;insecure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will &lt;strong&gt;define a reactive list of messages, and content of the text input&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;msgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These refs are used in the UI, and these are what we'll ultimately need to use in order to reflect a change.&lt;/p&gt;

&lt;p&gt;Now let's add our API logic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// when the component mounts (page loads)&lt;/span&gt;
&lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// start streaming messages&lt;/span&gt;
  &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;streamMessages&lt;/span&gt;&lt;span class="p"&gt;({}).&lt;/span&gt;&lt;span class="nx"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onMessage&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// add the message to the list&lt;/span&gt;
    &lt;span class="nx"&gt;msgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// keyboard handler for the input&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;KeyboardEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// only send a message on enter&lt;/span&gt;
  &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// send a message to the server&lt;/span&gt;
  &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// clear the textbox later&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's add some layouting and styling, with registered event handlers for the input and a &lt;code&gt;v-for&lt;/code&gt; loop to display the messages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-100vh w-100vw bg-surface-900 flex flex-col justify-center p-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex-1 p-3 flex flex-col gap-2 overflow-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"p-3 max-w-30ch rounded-md bg-surface-800"&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"m in msgs"&lt;/span&gt; &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"m"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ m }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
      &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"
        p-2
        bg-surface-700
        rounded-md
        focus:outline-none focus:ring-3
        ring-secondary-400
    mt-2
      "&lt;/span&gt;
      &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;
      &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;keydown=&lt;/span&gt;&lt;span class="s"&gt;"send"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are unsure what these classes mean, take a look at &lt;a href="https://windicss.org"&gt;WindiCSS&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;p&gt;And with that we complete our chat application!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-implementations"&gt;
  &lt;/a&gt;
  Other Implementations
&lt;/h2&gt;

&lt;p&gt;While we used Rust for server and TypeScript for client here, hRPC is cross-language. The &lt;a href="https://github.com/harmony-development"&gt;harmony-development organisation on GitHub&lt;/a&gt; has other implementations, most located in the &lt;a href="https://github.com/harmony-development/hrpc"&gt;hRPC repo&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>vue</category>
    </item>
    <item>
      <title>50 Ways You can Improve as a Programmer </title>
      <author>Edwin Torres</author>
      <pubDate>Mon, 15 Nov 2021 00:23:27 +0000</pubDate>
      <link>https://dev.to/realedwintorres/50-ways-you-can-improve-as-a-programmer-7g2</link>
      <guid>https://dev.to/realedwintorres/50-ways-you-can-improve-as-a-programmer-7g2</guid>
      <description>&lt;p&gt;I have been a professional programmer for over 30 years. Programming is a lifelong journey of learning, practice, and improvement. During my career, I have found different ways to improve my programming skills. &lt;/p&gt;

&lt;p&gt;Here are 50 ways to improve as a programmer:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Write lots of programs&lt;/strong&gt;. Every program you write, no matter how big or small, gives you experience. Practice enhances your understanding of programming concepts.Malcolm Gladwell, author &lt;em&gt;Outliers&lt;/em&gt;, wrote that it takes 10,000 hours to become an expert. So keep practicing.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Make programming your hobby&lt;/strong&gt;. Developing programs for your own personal projects creates enthusiasm and passion. If you like what you do, learning is easy.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Search for answers on Stack Overflow&lt;/strong&gt;. If you have a programming question, you will likely find the answer on &lt;a href="https://stackoverflow.com/"&gt;Stack Overflow&lt;/a&gt;. Be critical of the answers and use them as learning opportunities. When you are ready, answer some questions too.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Get a good book and work through the examples&lt;/strong&gt;. Good programming books have plenty of content that is organized for learning. The &lt;a href="https://deitel.com/"&gt;Deitel books&lt;/a&gt; are very thorough, with lots of examples and explanations. If you are a beginner, take a look at my book: &lt;a href="https://www.amazon.com/dp/1718198450"&gt;The Super Simple Programming Book&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learn one way, ignore the rest&lt;/strong&gt;. Programming languages often provide more than one way to accomplish the same task. For example, there are several ways to increase an integer variable by &lt;code&gt;1&lt;/code&gt;. Learn one way for now, so you can continue learning other programming concepts.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Focus on the basic programming concepts&lt;/strong&gt;. When you are learning programming, the fundamentals are most important. Learn about data types, input/output, selection, repetition, etc. Focus on the &lt;a href="https://dev.to/realedwintorres/five-basic-programming-concepts-to-learn-first-3bil"&gt;basic programming concepts&lt;/a&gt;. These concepts will help you learn any programming language.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Find a mentor&lt;/strong&gt;. Connect with a colleague, social media contact, or anyone who has programming experience. You will learn more from a mentor than you will from any book or website.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Participate in coding challenges and events&lt;/strong&gt;. Coding challenges and events are fun ways to practice programming. Twitter has &lt;code&gt;#100DaysOfCode&lt;/code&gt;. Code.org has &lt;a href="https://code.org/"&gt;Hour of Code&lt;/a&gt;. The &lt;a href="https://adventofcode.com/"&gt;Advent of Code&lt;/a&gt; is a really fun programming challenge that happens during the first 25 days of December. There are many more online.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Take a free programming course&lt;/strong&gt;. &lt;a href="https://www.coursera.org/search?query=programming"&gt;Coursera&lt;/a&gt; has excellent computer science courses from top universities. There are similar courses on &lt;a href="https://www.udemy.com/courses/search/?src=ukw&amp;amp;q=programming"&gt;Udemy&lt;/a&gt;. &lt;a href="https://ocw.mit.edu/search/ocwsearch.htm?q=programming"&gt;MIT OpenCourseWare&lt;/a&gt; publishes course materials for some of its computer science courses.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use code linters&lt;/strong&gt;. Code linters provide immediate feedback for your programs. The online &lt;a href="https://validator.w3.org/#validate_by_input"&gt;W3C Markup Validation Service&lt;/a&gt; checks web documents for validity. &lt;a href="https://eslint.org/"&gt;ESlint&lt;/a&gt; helps you find and fix problems in JavaScript code. &lt;a href="https://pylint.org/"&gt;Pylint&lt;/a&gt; is a linter for Python code. Linters are available as plugins for IDEs like Visual Studio Code. Linters force you to learn by flagging errors and suggesting changes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Take advantage of static code analysis&lt;/strong&gt;. &lt;a href="https://www.sonarqube.org/developer-edition/"&gt;SonarQube&lt;/a&gt; performs static code analysis on programs. It helps you write clean, correct, and secure code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Participate in code reviews&lt;/strong&gt;. Participate as both an author and a reviewer. Do not fear code reviews; embrace them. We all make mistakes. And mistakes are excellent learning opportunities.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Watch YouTube videos&lt;/strong&gt;. There are lots of YouTube tutorials, explanations, and lessons on almost any programming topic. These videos are easy ways to learn programming simply by watching. For example, here are some YouTube videos on &lt;a href="https://www.youtube.com/results?search_query=Node.js"&gt;Node.js&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Solve Project Euler problems&lt;/strong&gt;. &lt;a href="https://projecteuler.net/"&gt;Project Euler&lt;/a&gt; has lots of mathematical and computer science problems to solve with code. The website lists how many people have solved each problem.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Participate in Google coding competitions&lt;/strong&gt;. &lt;a href="https://codingcompetitions.withgoogle.com/"&gt;Google coding competitions&lt;/a&gt; are great for practice, and you don’t have to compete officially. &lt;em&gt;Code jam&lt;/em&gt; is an annual, worldwide coding competition. It lists past and present problems. Also see the Google &lt;em&gt;kick start&lt;/em&gt; and &lt;em&gt;hash code&lt;/em&gt; competitions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use an IDE&lt;/strong&gt;. An integrated development environment (IDE) is a programming tool that helps you create, edit, execute, and debug programs. IDEs find and highlight errors while you type in your programs. They suggest corrections. An IDE puts an interactive programming reference at your fingertips. Plugins add additional tools like linters and viewers. One of the most popular IDEs today is &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Go back to school&lt;/strong&gt;. If you have the means, take a computer science course at your local college or university. Pursue a bachelor's degree or certification in computer science. Obtaining a master's degree will qualify you to teach at the university level.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Consider a coding bootcamp&lt;/strong&gt;. Coding bootcamps offer specialized training in specific programming skills. The skills are often in high demand. Just be careful when selecting a bootcamp. They are not all the same, and most are expensive.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Create a programming blog&lt;/strong&gt;. To learn something, it helps to read it, hear it, and write it. Writing about your daily programming experiences in a blog will enhance your learning. It will also motivate you to learn more. Two popular blogging platforms are &lt;a href="https://dev.to/"&gt;Dev Community&lt;/a&gt; and &lt;a href="https://hashnode.com/"&gt;Hashnode&lt;/a&gt;. These free blogging platforms make it easy to start blogging right away.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Work through online tutorials&lt;/strong&gt;. There are many excellent online programming tutorials. Some are for reading. Others are interactive. The &lt;a href="https://www.w3schools.com/"&gt;W3Schools&lt;/a&gt; online tutorials are simple, interactive, and quick. &lt;a href="https://www.codecademy.com/"&gt;Codecademy&lt;/a&gt; has excellent interactive tutorials on different programming languages.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Participate in programming forums&lt;/strong&gt;. Read and respond to posts. These interactions are excellent learning opportunities. For example, &lt;a href="https://javaranch.com/"&gt;JavaRanch&lt;/a&gt; and &lt;a href="https://www.javaprogrammingforums.com/"&gt;Java Programming Forums&lt;/a&gt; are popular online communities for Java programmers.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Teach programming&lt;/strong&gt;. Teaching others how to code is a very effective way to enhance your programming knowledge. Tutor university or local students. To teach programming, you must prepare lectures, create examples, and answer questions. This forces you to really understand programming. Even volunteering to teach programming has benefits.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Create your own website&lt;/strong&gt;. If web development is your passion, learn how to develop your own website. This includes activities like domain registration, hosting, and maintenance. Personal projects like this one give plenty of motivation to learn and code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Participate in coding interviews&lt;/strong&gt;. Many companies require live coding sessions or take-home assignments as part of the interview process. These activities provide excellent learning opportunities and real-world practice. You must prepare and learn ahead of time. Coding interviews are valuable, even if you do not get the job.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learn from open source software projects&lt;/strong&gt;. Open source software projects on sites like &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; and &lt;a href="https://about.gitlab.com/"&gt;GitLab&lt;/a&gt; offer excellent examples to learn from. Many of these software projects are popular in the industry. Contributing to these open source projects offers more programming practice.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Follow coding standards, best practices, and style guides&lt;/strong&gt;. Coding standards and best practices improve code. They make code more readable, maintainable, and correct. Google publishes coding standards and &lt;a href="https://google.github.io/styleguide/"&gt;style guides&lt;/a&gt; for a variety of programming languages. &lt;a href="http://pep8online.com/"&gt;PEP8 Online&lt;/a&gt; checks Python code and suggests best practices and guidelines. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Become a freelance programmer&lt;/strong&gt;. Offer your programming expertise as a service. You can find many freelance programming assignments online. This is a great way to practice, while earning some extra money.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Join a programming community&lt;/strong&gt;. Find programming communities in your area. There are many online programming groups at &lt;a href="https://www.linkedin.com/groups/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://www.facebook.com/groups/search/groups_home/?q=programming"&gt;Facebook&lt;/a&gt;, &lt;a href="https://www.meetup.com/find/?keywords=programming&amp;amp;source=GROUPS"&gt;Meetup&lt;/a&gt;, and other websites. You can interact with people who share your passion for programming.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Get a job&lt;/strong&gt;. Get a programming job, any programming job. Nothing beats industry experience and learning.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Volunteer your programming skills&lt;/strong&gt;. Every industry has a need for programming skills. Many cannot afford to hire programmers. There are plenty of volunteer opportunities for programming. A local school, club, or organization may have programming tasks that you can assist with. &lt;a href="https://code.org/volunteer"&gt;Code.org&lt;/a&gt; can match you with volunteer coding opportunities in your area.
1, &lt;strong&gt;Write plain vanilla code&lt;/strong&gt;. Yes, frameworks and external libraries make coding easier. But there is a lot to learn from coding with native statements. For example, try coding with plain vanilla JavaScript instead of &lt;code&gt;jQuery&lt;/code&gt;. Try using the plain array construct instead of the Java &lt;code&gt;ArrayList&lt;/code&gt; class. Coding with built-in programming features will force you to think more and write resourceful solutions. It will also make you appreciate the many useful external libraries out there.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Do not reinvent the wheel&lt;/strong&gt;. For important programs, do not reinvent the wheel. For specific programming tasks and logic, search for an existing solution. These solutions are often tried and tested. For example, &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt; is an online repository of Node.js libraries. &lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt; hosts external Python libraries. Be critical when selecting external libraries for your programs. Some are better than others.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Attend a programming conference&lt;/strong&gt;. Programming conferences bring developers of all levels together for presentations, demonstrations, and other learning opportunities. The &lt;a href="https://ghc.anitab.org/"&gt;Grace Hopper Celebration&lt;/a&gt; is a popular conference that celebrates women in computing. &lt;a href="https://io.google/2021/?lng=en"&gt;Google I/O&lt;/a&gt; is another popular developer conference. There are many other programming conferences. Some offer virtual attendance. If not, be sure that they offer proper social distancing if you attend.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Join a professional organization&lt;/strong&gt;. Professional organizations like the Institute of Electrical and Electronics Engineers (&lt;a href="https://www.ieee.org/"&gt;IEEE&lt;/a&gt;) and the Association for Computing Machinery (&lt;a href="https://www.acm.org/"&gt;ACM&lt;/a&gt;) offer collaboration opportunities, journals, conferences, groups, and other learning opportunities. These organizations charge a membership fee, but they offer student discounts.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Write a book&lt;/strong&gt;. There are endless topics for programming books. No matter what your programming level is, there is a book topic for you. Self-publishing sites like &lt;a href="https://kdp.amazon.com/en_US/"&gt;Amazon Kindle Direct Publishing&lt;/a&gt; make it easy to publish and sell your book. Writing a book will force you to really learn the material, create examples, and test your programs.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Program a robot&lt;/strong&gt;. What is more fun than seeing your programs come to life? Beginners and experts can program robots to complete tasks. The &lt;a href="https://sphero.com/products/sphero-bolt"&gt;Sphero BOLT&lt;/a&gt; is a programmable plastic orb that features sensors, movement, and an LED display. &lt;a href="https://www.lego.com/en-us/themes/mindstorms/learntoprogram"&gt;LEGO MINDSTORMS&lt;/a&gt; is another programmable robot kit that has advanced capabilities. Some software robots are available in &lt;a href="https://education.minecraft.net/en-us/homepage"&gt;Minecraft Education edition&lt;/a&gt;, Java &lt;a href="https://robocode.sourceforge.io/"&gt;Robocode&lt;/a&gt;, and Python &lt;a href="https://docs.python.org/3/library/turtle.html"&gt;turtle graphics&lt;/a&gt;. Programming robots makes programming really fun, because they visualize your program output.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Visit Code.org&lt;/strong&gt;. &lt;a href="https://code.org/"&gt;Code.org&lt;/a&gt; deserves its own spot on this list. The website is dedicated to learning, teaching, and promoting computer science. There are online coding activities for beginners, coding statistics, inspirational videos, and more. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Try Alice&lt;/strong&gt;. &lt;a href="https://www.alice.org/"&gt;Alice&lt;/a&gt; is a 3D teaching tool for computer science. It makes learning computer science visual and fun. The late Randy Pausch oversaw development of Alice at Carnegie Mellon University.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learn Git version control&lt;/strong&gt;. Although this does not specifically relate to programming, you will undoubtedly use Git to maintain versions of your programs. Online Git repositories such as GitHub, &lt;a href="https://bitbucket.org/"&gt;Bitbucket&lt;/a&gt;, and GitLab are powerful tools for collaborating in software development. However, they are excellent for individual use too. For example, many developers use GitHub to host online coding portfolios. See the &lt;a href="https://git-scm.com/"&gt;Git website&lt;/a&gt; for more information on Git version control.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Embrace real-time communication&lt;/strong&gt;. This is another tip that is not directly related to programming. Real-time communication tools provide immediate feedback and answers when working with others on programming tasks. &lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt; is a very popular real-time communication tool that offers persistent text, voice, and video chat. The tool allows you to create public and private channels for different topics. It lets you thread conversations for more organization.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code on the go&lt;/strong&gt;. Your mobile phone is also a computer. Why not code on the go? &lt;a href="https://play.google.com/store/apps/details?id=org.qpython.qpy3&amp;amp;hl=en_US&amp;amp;gl=US"&gt;QPython&lt;/a&gt; is a Python interpreter for Android phones. &lt;a href="https://apps.apple.com/us/app/python2ide/id984990674"&gt;Python2IDE&lt;/a&gt; is on iOS phones. With apps like these, you can practice coding right from your mobile phone.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code without help&lt;/strong&gt;. Take a programming task and write a program for it without searching online or using help from an IDE. See if you can code from memory. This type of coding practice will force you to commit important concepts to memory. It is also good practice for live coding interviews.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Refactor your programs&lt;/strong&gt;. Learn how to refactor your programs. Even if a program produces the correct outputs for all the possible inputs, it may still have room for improvement. For example, make your programs more maintainable, more readable, and less complicated.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learn other programming languages&lt;/strong&gt;. Once you have a good foundation of the basic programming concepts and a strong understanding of a given programming language, it may be time to branch out. Learning another language can increase your understanding of programming languages in general. It is helpful to see how different languages implement the same programming concepts or offer new features. For example, the Java programming language improved on C++ by addressing memory leaks.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Program for art&lt;/strong&gt;. Programs are not just for business. Programs can &lt;a href="https://dev.to/realedwintorres/the-programming-of-art-5aof"&gt;create art&lt;/a&gt;. With random behavior, graphics, and processing, programs can create beautiful outputs. This takes the passion for programming to a whole new level. Python turtle graphics and HTML Canvas graphics are two ways to create simple and complex art with programs.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Have the right attitude&lt;/strong&gt;. Be humble. You cannot know everything about programming. If you think you do, I promise you that there is someone who knows more. Programming is an endless learning loop. Accept that you do not know, and you will soon know.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Leverage public APIs&lt;/strong&gt;. There are many public application programming interfaces (APIs) that you can connect your programs to. &lt;a href="https://developer.twitter.com/en"&gt;Twitter&lt;/a&gt;, &lt;a href="https://developers.google.com/youtube/v3"&gt;YouTube&lt;/a&gt;, and &lt;a href="https://developers.google.com/maps"&gt;Google Maps&lt;/a&gt; are just some APIs that you can develop against. You can create impressive software applications by leveraging these powerful APIs in your programs.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Assess your programming skills with Soloway's Rainfall problem&lt;/strong&gt;. &lt;a href="https://web.cs.wpi.edu/~kfisler/Pubs/icer14-rainfall/icer14.pdf"&gt;Soloway's Rainfall problem&lt;/a&gt; is a problem that tests programming skills for introductory computer science students. If you can complete this programming task, you have a good understanding of programming fundamentals. If not, keep learning.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learn from console input and output&lt;/strong&gt;. There are fancy websites and graphical user interfaces. However, do not ignore what simple programs can teach. Programs that accept input from &lt;code&gt;stdin&lt;/code&gt; and write output to &lt;code&gt;stdout&lt;/code&gt; can be powerful, complicated, and full of functionality. These programs have a lot to teach.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learn assembly language and computer architecture&lt;/strong&gt;. When a program executes, it uses computer resources. Understanding how computer memory, the central processing unit (CPU), and other computer hardware components work will help you understand how programs work. Assembly language is a low-level programming language. Its instructions correspond to machine code instructions. A single IF-ELSE statement in C may require multiple statements in assembly language. Understanding low-level assembly language and computer architecture will explain how a program interacts with the computer, teach you to write more efficient code, and make you a better programmer overall.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Whatever you do, keep practicing programming! Most of all, be safe, practice social distancing, and be well!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;Follow me on Twitter &lt;a href="https://twitter.com/realEdwinTorres"&gt;&lt;code&gt;@realEdwinTorres&lt;/code&gt;&lt;/a&gt; for more programming tips. 😀&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>ddosify action</title>
      <author>NaveenKumar Namachivayam ⚡</author>
      <pubDate>Mon, 15 Nov 2021 00:06:16 +0000</pubDate>
      <link>https://dev.to/qainsights/ddosify-action-20ae</link>
      <guid>https://dev.to/qainsights/ddosify-action-20ae</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;Ddosify action helps you to performance test your application or web services using &lt;code&gt;ddosify&lt;/code&gt; tool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Wacky Wildcards&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/QAInsights"&gt;
        QAInsights
      &lt;/a&gt; / &lt;a href="https://github.com/QAInsights/ddosify-action"&gt;
        ddosify-action
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      GitHub Action for DDosify tests
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
About ddosify action&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://dev.to/qainsights/ddosify-action-20ae" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f42af6629e744b24e84f7cb76325bc0bef1bb68e15b17540442445f1aa2af926/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6465762e746f2d416374696f6e732532304861636b6174686f6e2d626c7565" alt=""&gt;&lt;/a&gt;
&lt;a href="https://saythanks.io/to/catch.nkn%40gmail.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/50f8660b167095dfbd5746fc775885471aa7bb346603dd6015f7226b30e8eb6a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7361792d7468616e6b732d3145414544422e737667" alt="saythanks"&gt;&lt;/a&gt;
&lt;a href="https://qainsights.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ecd7acbf6fce09919858f5ee16a05016cd6acbc883415ca4b260b1268b657d87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d3061306130612e7376673f7374796c653d666c617426636f6c6f72413d314541454442" alt=""&gt;&lt;/a&gt;
&lt;a href="https://qainsights.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/69365e1c7656698921d4ad31d8605ddc754038eeaa056594dba80a41a5b537f7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2545322539442541342d5141496e7369676874732d3061306130612e7376673f7374796c653d666c617426636f6c6f72413d314541454442" alt=""&gt;&lt;/a&gt;
&lt;a href="https://www.youtube.com/user/QAInsights?sub_confirmation=1" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/79a988794a14e85ceb8074f54f2d3e4766152570af7466dd12ce98b0fc634648/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2545322539442541342d596f75547562652532304368616e6e656c2d3061306130612e7376673f7374796c653d666c617426636f6c6f72413d314541454442" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ddosify GitHub action for dev.to hackathon.&lt;/p&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/QAInsights/ddosify-action/main/assets/ddosify-action.jpeg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s5MS7wkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/QAInsights/ddosify-action/main/assets/ddosify-action.jpeg"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#how-to-use-this-github-action" class="anchor"&gt;
  &lt;/a&gt;
  How to use this GitHub Action?
&lt;/h1&gt;

&lt;h2&gt;
Prerequisites&lt;/h2&gt;

&lt;p&gt;Following are the prerequisites for this GitHub Action:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;args&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Mandatory&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Usage&lt;/h2&gt;

&lt;h3&gt;
Example&lt;/h3&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;- name: Ddosify Test
  uses: QAInsights/ddosify-action@v1.0.1
  with:
    args: "-t example.com"
    
- name: Upload Results
  uses: actions/upload-artifact@v2
  with:
    name: ddosify-results
    path: ./*.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;
Download Test Results&lt;/h2&gt;
&lt;p&gt;By default, this GitHub Action will log the performance statistics under &lt;code&gt;*.log&lt;/code&gt;. After the execution, it will be uploaded to the GitHub artifacts.&lt;/p&gt;
&lt;p&gt;To download the results, go to your &lt;code&gt;Actions&lt;/code&gt; and then click on the executed workflow, then click on the workflow run to download the log.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/QAInsights/ddosify-action./assets/ddosify-results.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mEJoKeSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/QAInsights/ddosify-action./assets/ddosify-results.png" alt="Download-Ddosify-Results"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/QAInsights/ddosify-action"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/ddosify/ddosify"&gt;ddosify&lt;/a&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>performance</category>
      <category>webperf</category>
    </item>
    <item>
      <title>Day 9 of #100daysofcode: States and Hooks; a day's lesson</title>
      <author>Ryan Whelchel</author>
      <pubDate>Mon, 15 Nov 2021 00:00:03 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/day-9-of-100daysofcode-states-and-hooks-a-days-lesson-187k</link>
      <guid>https://dev.to/rydwhelchel/day-9-of-100daysofcode-states-and-hooks-a-days-lesson-187k</guid>
      <description>&lt;p&gt;As I've said in previous updates, I have 2 projects going on simultaneously. One of these is an assignment which is a group project. This assignment is what is taking up most of my time, as I am acting as a sort of project lead. These two projects have had a lot of crossover as the tech-stacks are the same and the projects are similar in scope. They also have a lot of crossover in what I am learning and because of that, I jump back and forth between the projects as I make mistakes and learn how to fix them. While it is a little frustrating to not be completing these projects faster, I feel as if I am learning a lot more than I would if I were just trying to get the project done with. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;As I mentioned yesterday, I decided to start today with FreeCodeCamp's tutorial on Basic JS. The first 75 lessons were pretty straightforward. Even still, I learned a bit about how array manipulation works in JS and a bit more about how variable scope works. I'm going to continue these lessons just to make sure I have a decent grasp on JS syntax and mechanics.&lt;/p&gt;

&lt;p&gt;As for the projects I'm working on, the entire day was devoted to working on and understanding how the states function in my group project. I mention this work because it's very relevant to my work in the artist app. Today was a loaded day, I tried 3 different structures for my group project before I finally got to a point where things were functioning as I expected them to. &lt;/p&gt;

&lt;p&gt;My biggest problem with states was understanding how they worked with parent components and how states were passed down to child components and how to utilize setState in light of that. Many of my functions which modified state were located in the parent component, while the location of where that state was actually used was one level down. This worked sometimes, but when modifying state I would run into unexpected issues. I've since moved the functions which modify the state into the same level in which they were used and have had much more success.&lt;/p&gt;

&lt;p&gt;I tackled this problem today by going straight to the roots of how state works and how components work in general. As such, I read a lot of documentation and watched a couple videos. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrow"&gt;
  &lt;/a&gt;
  Tomorrow
&lt;/h2&gt;

&lt;p&gt;Today, my team's project took precedent as I needed to get the app into a state where my other team members could actually work on their parts. Tomorrow, I plan on assessing the states of artist app the same way I assessed my team's app. This (should) take much less time as I feel I have a much, much better grasp of states than I did when I began today. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-im-struggling-on"&gt;
  &lt;/a&gt;
  What I'm Struggling on
&lt;/h2&gt;

&lt;p&gt;The entirety of today was spent on tackling what I was struggling on, and I did not stop working until I reached a point where I "solved" my struggles. There's a lot of edge cases and unexpected interactions between things in React, so I'm sure there is still more to learn here. All in all, I feel much better off with states than I did before. &lt;/p&gt;

&lt;p&gt;If you've been following this for a little while, you might remember that my main goal for this first project of mine is to fix &lt;em&gt;styling&lt;/em&gt;. In tackling styling, I started running into issues that stemmed from my poorly structured app. As you might imagine, the rabbit hole got pretty deep. &lt;/p&gt;

&lt;p&gt;Anyways, thanks for following my updates! As usual, if you have any suggestions for things to look into, changes to the format you think are a good idea or ideas for my apps/projects in general, please leave a comment!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"&gt;JS - FreeCodeCamp&lt;/a&gt;&lt;br&gt;
&lt;a href="https://infinitypaul.medium.com/reactjs-useeffect-usecallback-simplified-91e69fb0e7a3"&gt;useEffect() &amp;amp; useCallback() - Infinitypaul&lt;/a&gt;&lt;br&gt;
&lt;a href="https://reactjs.org/docs/lifting-state-up.html"&gt;Lifting State Up - React Tutorial&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The Fullscreen API</title>
      <author>Bruno Noriller</author>
      <pubDate>Sun, 14 Nov 2021 23:28:24 +0000</pubDate>
      <link>https://dev.to/noriller/the-fullscreen-api-4mbj</link>
      <guid>https://dev.to/noriller/the-fullscreen-api-4mbj</guid>
      <description>&lt;p&gt;This will be a weird one for many people. (What a great way to start a post!)&lt;/p&gt;

&lt;p&gt;The Fullscreen API... I've been working heavily on the front end for at least 4 years and had never used it.&lt;br&gt;
Not that it was a problem... after all I just never had the need to use it.&lt;/p&gt;

&lt;p&gt;So, when the time came, I've believed that it was beyond me to do a Youtube or Netflix clone because "how do they make the controls?"&lt;/p&gt;

&lt;p&gt;And when you learn "the secret" it's so obvious it makes you feel stupid...&lt;/p&gt;

&lt;p&gt;BTW: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API"&gt;https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can never go wrong just going to the documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-two-main-methods"&gt;
  &lt;/a&gt;
  The two main methods
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Element.requestFullscreen()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.exitFullscreen()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's it!&lt;/p&gt;

&lt;p&gt;You call from an &lt;code&gt;element&lt;/code&gt;, and always exit from the &lt;code&gt;document&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This means, any element you have... lets say a overlay with buttons and sliders and a video behind it... all of that just goes together to fullscreen. It's that simple. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-two-additional-methods"&gt;
  &lt;/a&gt;
  The two additional methods
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.fullscreenElement&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.onfullscreenchange&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;document.fullscreenElement&lt;/code&gt; will give either &lt;code&gt;null&lt;/code&gt; or the element that is currently in fullscreen.&lt;/p&gt;

&lt;p&gt;So, if for any reason you need to know if it's in fullscreen, you use that.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;document.onfullscreenchange&lt;/code&gt; is null by default, so you need to save a &lt;code&gt;function&lt;/code&gt; in it.&lt;/p&gt;

&lt;p&gt;ex: &lt;code&gt;document.onfullscreenchange = () =&amp;gt; console.log("Hey! I'm toggling!")&lt;/code&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stuff-to-consider"&gt;
  &lt;/a&gt;
  Stuff to consider
&lt;/h3&gt;

&lt;p&gt;Funny thing about those two: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the default &lt;code&gt;F11&lt;/code&gt; for fullscreen and clicking the default HTML5 video player don't trigger the &lt;code&gt;onfullscreenchange&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;Esc&lt;/code&gt; or &lt;code&gt;F11&lt;/code&gt; to exit fullscreen will trigger it if it entered fullscreen with &lt;code&gt;requestFullscreen()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;after the default &lt;code&gt;F11&lt;/code&gt; for fullscreen, &lt;code&gt;document.fullscreenElement&lt;/code&gt; will give you &lt;code&gt;null&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;but will give you the video element when you click the default fullscreen button.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#there-is-more-to-it"&gt;
  &lt;/a&gt;
  There is more to it...
&lt;/h2&gt;

&lt;p&gt;Even a simple API like fullscreen still have a lot more to it than just what I've put here.&lt;/p&gt;

&lt;p&gt;But for today, this will do.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://buymeacoffee.com/noriller"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GkTMbOQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cl9j5m3mvsunwqf3kt2c.png" alt="buy me a coffee" width="170" height="37"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@johnschno?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;John Schnobrich&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/computer-screen?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Changelog 0001 — 🌓 Light theme and more</title>
      <author>claudiatd</author>
      <pubDate>Sun, 14 Nov 2021 23:15:02 +0000</pubDate>
      <link>https://dev.to/pie/changelog-0001-light-theme-4ebl</link>
      <guid>https://dev.to/pie/changelog-0001-light-theme-4ebl</guid>
      <description>&lt;p&gt;Hello, World! 👋 In recent months, we’ve been busy building &lt;a href="https://htptie.io/product"&gt;HTTPie for Web &amp;amp; Desktop&lt;/a&gt;. It’s part of our mission to &lt;a href="https://htptie.io/about"&gt;make APIs simple and intuitive&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Last week, we started inviting developers enrolled in our waitlist to a &lt;a href="https://htptie.io/beta"&gt;private beta&lt;/a&gt;, and we’ve been thrilled to receive some great feedback already.&lt;/p&gt;

&lt;p&gt;So starting today, we’ll publish a weekly changelog post for both HTTPie for Web &amp;amp; Desktop and Terminal. Check out what’s new this week 👇&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#httpie-for-web-amp-desktop"&gt;
  &lt;/a&gt;
  HTTPie for Web &amp;amp; Desktop
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#light-theme"&gt;
  &lt;/a&gt;
  🌓 Light theme
&lt;/h3&gt;

&lt;p&gt;It’s hard to find something everyone agrees upon these days. And—when it comes to user interfaces—one of the never-ending debates is about dark theme vs. light theme.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E34iyMSb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqwd8k7najjjivdof4x0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E34iyMSb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqwd8k7najjjivdof4x0.jpg" alt="Light mode" width="880" height="655"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, whatever side you are on (and we’re not judging), you can feel right at home in the app. Find the new theme switcher in the account menu, where you can stay with the original dark theme, switch to the new light one, or have the app automatically adjust to fit your system theme. On the website, you’ll find the same settings in the footer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improvements"&gt;
  &lt;/a&gt;
  ✨ Improvements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;There’s a new &lt;em&gt;dirty&lt;/em&gt; badge on the preview icon. When you see it, it means the request you are building has un-sent changes from the previous one.&lt;/li&gt;
&lt;li&gt;Check out the new method selector: you can now see a different color for each method.&lt;/li&gt;
&lt;li&gt;Did you know there are suggestions for header names? Yes, and now it’s easier to accept its auto-completions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fixes"&gt;
  &lt;/a&gt;
  🪲 Fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Maybe you noticed a slight layout jump when the preview panel was closed. You shouldn’t be able to see it anymore.&lt;/li&gt;
&lt;li&gt;Auth was embarrassingly broken before, but that’s no longer the case. You won’t stay out of your API again.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#httpie-for-terminal"&gt;
  &lt;/a&gt;
  HTTPie for Terminal
&lt;/h2&gt;

&lt;p&gt;We’ve improved the &lt;a href="https://github.com/httpie/httpie"&gt;development version&lt;/a&gt; of &lt;a href="https://htptie.io/cli"&gt;HTTPie for Terminal&lt;/a&gt; as well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multiple headers that share the same name are now possible. HTTP allows them, and so does HTTPie. (&lt;a href="https://github.com/httpie/httpie/issues/130"&gt;#130&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Keep &lt;code&gt;://&lt;/code&gt; in the URL argument if you want to. Pasting URLs into HTTPie calls has never been easier: just add a space the protocol name, e.g., &lt;code&gt;$ https ://pie.dev&lt;/code&gt; → &lt;code&gt;https://pie.dev&lt;/code&gt;. (&lt;a href="https://github.com/httpie/httpie/issues/1195"&gt;#1195&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#happy-testing-and-see-you-next-week"&gt;
  &lt;/a&gt;
  Happy testing, and see you next week!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;💁🏻‍♀️ If you’re not on the private beta yet, you can &lt;a href="https://htptie.io/beta"&gt;join the waitlist here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;👉 You can also follow &lt;a href="https://twitter.com/httpie"&gt;@httpie&lt;/a&gt; and join our &lt;a href="https://htptie.io/discord"&gt;Discord community&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Originally published on &lt;a href="https://httpie.io/blog/changelog-0001"&gt;HTTPie blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devtools</category>
      <category>api</category>
      <category>testing</category>
      <category>httpie</category>
    </item>
  </channel>
</rss>
