<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Font-end learning and knowledge system</title>
      <author>Benny Guo</author>
      <pubDate>Wed, 05 May 2021 18:50:57 +0000</pubDate>
      <link>https://dev.to/tridiamond/font-end-learning-and-knowledge-system-120m</link>
      <guid>https://dev.to/tridiamond/font-end-learning-and-knowledge-system-120m</guid>
      <description>&lt;h1&gt;
  &lt;a href="#0intro"&gt;
  &lt;/a&gt;
  „Äå0„ÄçIntro
&lt;/h1&gt;

&lt;p&gt;Many people feel very confused when they face higher knowledge mountains in their front-end career.&lt;/p&gt;

&lt;p&gt;Many of my fans had texted me asking "What should I learn?" and "When will I be finished with this front-end learning loop?"&lt;/p&gt;

&lt;p&gt;Don't worry, buddy! Once you read this article, you'll know a bit more about what makes a great front-end engineer. Creating a knowledge management system and building a career development plan will make sense to you.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#1how-do-you-define-a-good-developer"&gt;
  &lt;/a&gt;
  „Äå1„ÄçHow do you define a good developer?
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Think about the following question:&lt;/em&gt;&lt;br&gt;
"What does an excellent front-end developer possess?"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After interviewing many front-end engineers, here is what I got:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Familiarized with frameworks such as Angular, React, Vue.&lt;/li&gt;
&lt;li&gt;Knowing the web standards is essential.&lt;/li&gt;
&lt;li&gt;Experience with Webpack and Babel&lt;/li&gt;
&lt;li&gt;Ten years of experience in development&lt;/li&gt;
&lt;li&gt;Performance tuning and optimization&lt;/li&gt;
&lt;li&gt;Object-oriented programming and closures&lt;/li&gt;
&lt;li&gt;A NodeJS expert.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;A good front-end developer will have more important qualities than these.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#so-how-to-determine-the-quality-of-a-developer"&gt;
  &lt;/a&gt;
  So how to determine the quality of a developer?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#knowledge-of-the-field"&gt;
  &lt;/a&gt;
  üî≠ Knowledge of the field
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Different type of engineer has different field knowledge&lt;/li&gt;
&lt;li&gt;Different fields of knowledge are interrelated&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#abilities-and-potentials"&gt;
  &lt;/a&gt;
  üß¨ Abilities and potentials
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;As long as the ability of the individual matches the  requirements of the role, you will be promoted&lt;/li&gt;
&lt;li&gt;Potential is the upper limit of our abilities, anyone with the same potential should be able to write the same quality code.&lt;/li&gt;
&lt;li&gt;The difference is the ability to come up with solutions to problems and solve them independently&lt;/li&gt;
&lt;li&gt;Each engineer will be assigned with a KPI (Eg. 30% - outstanding, 60% - normal, 10% - unqualified)&lt;/li&gt;
&lt;li&gt;Each individual's potential will be assessed and a  prediction will be given as to when they will be promoted.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#%F0%9F%97%93-career-planning"&gt;
  &lt;/a&gt;
  üóì Career planning
&lt;/h3&gt;

&lt;p&gt;According to Alibaba's engineer ranking&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Junior Engineer (P5) ‚Äî‚Äî Ability to work independently&lt;/li&gt;
&lt;li&gt;Senior Engineer (P6) ‚Äî‚Äî Core developer, work as a team leader, who can lead the team to break through difficult problems.&lt;/li&gt;
&lt;li&gt;Expert (P7) ‚Äî‚Äî A field expert. Become an authority in one area, drive development, and apply common solutions to solve problems in this area.&lt;/li&gt;
&lt;li&gt;Manager (P8)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-get-promoted"&gt;
  &lt;/a&gt;
  üìà How to get promoted?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Continuously improve technical capabilities&lt;/li&gt;
&lt;li&gt;Precipitation is occurring in your area of speciality&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#achievements"&gt;
  &lt;/a&gt;
  üèÜ Achievements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Your achievements prove your abilities and potentials.&lt;/li&gt;
&lt;li&gt;A reflection of what you have contributed and took on in your previous work experiences&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#2how-to-become-a-good-developer"&gt;
  &lt;/a&gt;
  „Äå2„ÄçHow to become a good developer?
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#career-planning"&gt;
  &lt;/a&gt;
  Career Planning
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt; You &lt;/em&gt; are the owner of your career.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Many thinks career planning is the responsibility of their "boss", their "parents" or their "teachers". The reality is, it is you who is responsible for your career.&lt;/li&gt;
&lt;li&gt;Many get out of shape when implementing their career planning. They think that career promotion is the consciousness of the boss. &lt;/li&gt;
&lt;li&gt;Do we just give up if our boss doesn't promote us? &lt;strong&gt;No! we are the boss of our career, we need to take full responsibility for our career growth.&lt;/strong&gt; So we have to act for ourselves!&lt;/li&gt;
&lt;li&gt;A career plan is the most important aspect of a successful professional life, therefore we should act as if &lt;strong&gt;we are in charge of it&lt;/strong&gt;, and we have to come up with a solution to ensure our results.&lt;/li&gt;
&lt;li&gt;You need to know when and where you want to be in the company or your role, and if not, how to get there!&lt;/li&gt;
&lt;li&gt;So we should always keep a sense of urgency and crisis in the workplace&lt;/li&gt;
&lt;li&gt;No one will be responsible for your career success. This is why you need to exert enough effort. The same applies to career development.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#advancements-in-career"&gt;
  &lt;/a&gt;
  Advancements in Career
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Growth ‚Äî‚Äî Develop your skills through continuous learning&lt;/li&gt;
&lt;li&gt;Achievement ‚Äî‚Äî As you advance in skill, you will acquire achievements that can be used to prove your technical abilities&lt;/li&gt;
&lt;li&gt;Promotion ‚Äî‚Äî You can be promoted to the next level by demonstrating your achievements.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hence, achievements are paramount to career advancement. What achievements can we acquire in the course of our daily routine?&lt;/p&gt;

&lt;p&gt;There are &lt;em&gt;three&lt;/em&gt; main types of achievements we can obtain!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#achieve-project-objectives"&gt;
  &lt;/a&gt;
  üé° Achieve Project Objectives
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Business objectives

&lt;ul&gt;
&lt;li&gt;Understand the core objectives of your company's business&lt;/li&gt;
&lt;li&gt;Turn objectives into metrics (UV, PV, page load time, profits)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Technical solutions

&lt;ul&gt;
&lt;li&gt;Conversion of the business target to technical target&lt;/li&gt;
&lt;li&gt;Put the plan to work and complete small size trials&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Implementing the plan

&lt;ul&gt;
&lt;li&gt;Determine implementation objectives and participants&lt;/li&gt;
&lt;li&gt;Manage the implementation progress&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Result evaluation

&lt;ul&gt;
&lt;li&gt;Collecting data and form into a data report&lt;/li&gt;
&lt;li&gt;Then report to a superior&lt;/li&gt;
&lt;li&gt;No promotion is possible without positive results, else all you get is a "diligent and hard-working" reputation&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;A study case:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Business goals &amp;amp; metrics:

&lt;ul&gt;
&lt;li&gt;Improve click-through rate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Technical solution:

&lt;ul&gt;
&lt;li&gt;Add gesture operation to TAB component&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implementation 1:

&lt;ul&gt;
&lt;li&gt;Add corresponding feature&lt;/li&gt;
&lt;li&gt;Push to production*&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Result:

&lt;ul&gt;
&lt;li&gt;Click-through rate increased 3 times&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implementation 2:

&lt;ul&gt;
&lt;li&gt;Compile general TAB components&lt;/li&gt;
&lt;li&gt;Helping making a good base UI/UX guideline&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#achieve-development-automation"&gt;
  &lt;/a&gt;
  ‚öôÔ∏è Achieve Development Automation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Target

&lt;ul&gt;
&lt;li&gt;Improved code quality&lt;/li&gt;
&lt;li&gt;Improved development efficiency&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Plan and implementation

&lt;ul&gt;
&lt;li&gt;Rules and regulations&lt;/li&gt;
&lt;li&gt;Repo / Pacakges&lt;/li&gt;
&lt;li&gt;Tools / CLI&lt;/li&gt;
&lt;li&gt;Systems&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;End result

&lt;ul&gt;
&lt;li&gt;Ability to monitor production&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;A case study: Prevention of XSS attacks&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Target: 

&lt;ul&gt;
&lt;li&gt;XSS attack white hat feedback vulnerability&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Technical solution: 

&lt;ul&gt;
&lt;li&gt;Organize the security manual&lt;/li&gt;
&lt;li&gt;Review the historical code&lt;/li&gt;
&lt;li&gt;Building a code scan tool&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implementation:

&lt;ul&gt;
&lt;li&gt;Change the code release process&lt;/li&gt;
&lt;li&gt;Review the entire code&lt;/li&gt;
&lt;li&gt;Preach to all the front-end developers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Result: 

&lt;ul&gt;
&lt;li&gt;XSS vulnerabilities significantly reduced&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#resolving-technical-difficulties"&gt;
  &lt;/a&gt;
  ü™Ñ Resolving technical difficulties
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Target a:

&lt;ul&gt;
&lt;li&gt;Recognized technical difficulties&lt;/li&gt;
&lt;li&gt;One that can affect the business&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Planning and implementation

&lt;ul&gt;
&lt;li&gt;Rely on solid programming skills&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;A case study:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Case: Crawling commodity prices&lt;/li&gt;
&lt;li&gt;Background:

&lt;ul&gt;
&lt;li&gt;In a browser plug-in project, you need to crawl the price comparison of each website&lt;/li&gt;
&lt;li&gt;But each website will use image prices and other means to defend&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solution:

&lt;ul&gt;
&lt;li&gt;Introduce Javascript terminal digital recognition technology&lt;/li&gt;
&lt;li&gt;Rely on AI technology to solve the problem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#3frontend-and-learning-methods"&gt;
  &lt;/a&gt;
  „Äå3„ÄçFront-end and learning methods
&lt;/h1&gt;

&lt;p&gt;Being a good developer requires us to know how to study as a front-end developer.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#a-better-approach-to-learning"&gt;
  &lt;/a&gt;
  üîÆ A better approach to learning
&lt;/h2&gt;

&lt;p&gt;No pressure should be put on learning the knowledge system, instead one should try to understand the integrity and the framework of the knowledge system. &lt;/p&gt;

&lt;p&gt;A knowledge system should be accomplished by analyzing things from multiple perspectives.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Many developers are questioning whether what they have learned is useful.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The following tips can help you approach learning better:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Although some knowledge is useless, some small points may be useful during the course of a working day&lt;/li&gt;
&lt;li&gt;Most of the time there's no way to find out for certain how effective a piece of knowledge is&lt;/li&gt;
&lt;li&gt;In order to extract the most meaningful knowledge, we must have a knowledge system to sort them.&lt;/li&gt;
&lt;li&gt;We need to have a good study habit, whenever we see a new 
the knowledge we should try to understand it regardless of its usefulness&lt;/li&gt;
&lt;li&gt;The fact is that we do not have to fully comprehend new knowledge; it becomes clearer once you are faced with it again and again from different situations or environments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conclusion is:&lt;br&gt;
"Combining systematic learning with random learning"&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#%F0%9F%8F%97-frontend-skill-model"&gt;
  &lt;/a&gt;
  üèó Front-end skill model
&lt;/h2&gt;

&lt;p&gt;Once we have a better understanding of the learning approach, then we must then decide which categories to focus our learning efforts on.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Domain Knowledge

&lt;ul&gt;
&lt;li&gt;Different fields will have different knowledge&lt;/li&gt;
&lt;li&gt;Learning by practice&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Frontend knowledge

&lt;ul&gt;
&lt;li&gt;Establish a knowledge system&lt;/li&gt;
&lt;li&gt;The focus is to mastery the knowledge not the magnitude of the knowledge system&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Abilities ‚Äî‚Äî deliberate practice

&lt;ul&gt;
&lt;li&gt;Programming ability&lt;/li&gt;
&lt;li&gt;Architecture capability&lt;/li&gt;
&lt;li&gt;Engineering capability&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;"Frontend technology is not a magic spell book,&lt;br&gt;
the real ability is obtained by practice."&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#learning-method"&gt;
  &lt;/a&gt;
  üìö Learning method
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#relating-pieces-of-knowledge"&gt;
  &lt;/a&gt;
  Relating pieces of knowledge
&lt;/h3&gt;

&lt;p&gt;To build our knowledge system, we want to pursue completeness but not perfection.&lt;/p&gt;

&lt;p&gt;The first key goal is to find the key logical relationship between all your knowledge.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sequential relation

&lt;ul&gt;
&lt;li&gt;Record the relationship between processes in a system.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Combination relationship

&lt;ul&gt;
&lt;li&gt;Find the relationship between combinations&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Perspective relationship

&lt;ul&gt;
&lt;li&gt;When you look at knowledge, Each perspective you see is a complete thing on its own&lt;/li&gt;
&lt;li&gt;Understand a complete thing by looking at a piece of knowledge from various angles&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Classification relationship

&lt;ul&gt;
&lt;li&gt;Sort knowledge by category&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#organizing-and-sorting"&gt;
  &lt;/a&gt;
  Organizing and sorting
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;You can find clues by searching or by reading manuals or articles.&lt;/li&gt;
&lt;li&gt;Find multiple sources of information.&lt;/li&gt;
&lt;li&gt;Make sure your knowledge is complete by comparing and strengthening it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#finding-the-source"&gt;
  &lt;/a&gt;
  Finding the source
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Source of knowledge

&lt;ul&gt;
&lt;li&gt;Establish the knowledge base from the source and enhance the credibility&lt;/li&gt;
&lt;li&gt;Find the earliest published papers or magazines&lt;/li&gt;
&lt;li&gt;Study the initial implementation case&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Standards and documents

&lt;ul&gt;
&lt;li&gt;Read the ones with high authorities&lt;/li&gt;
&lt;li&gt;Make a good comparison to ensure accuracy&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#4knowldege-system"&gt;
  &lt;/a&gt;
  „Äå4„ÄçKnowldege System
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QMudCEv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8e8l5xfxiu9ccn8wmjit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QMudCEv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8e8l5xfxiu9ccn8wmjit.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following all the tips in this article, you will able to build the above knowledge system.&lt;/p&gt;

&lt;p&gt;Building a complete knowledge system by filling in missing pieces of knowledge while learning. In the end, this knowledge system will be carved into your head, not just in your computer.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#recommended-open-source-projects"&gt;
  &lt;/a&gt;
  Recommended Open Source Projects
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#hexo-theme-aurora"&gt;
  &lt;/a&gt;
  Hexo Theme Aurora
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ctpx4rEa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img-blog.csdnimg.cn/20210504220315253.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ctpx4rEa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img-blog.csdnimg.cn/20210504220315253.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IZq4SVca--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img-blog.csdnimg.cn/2021042520203350.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IZq4SVca--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img-blog.csdnimg.cn/2021042520203350.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/tridiamond" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a0Ftdgk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--FiE5zImT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/289909/7452f918-5f0b-4ac3-af65-840f88576cfc.jpeg" alt="tridiamond image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/auroral-ui/hexo-aurora-theme-released-today-51he" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Hexo Aurora Theme released today! &lt;/h2&gt;
      &lt;h3&gt;Benny Guo „Éª Mar 30 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#vue&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#hexo&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://aurora.tridiamond.tech/zh/"&gt;Usage Document&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#vscode-aurora-future-theme"&gt;
  &lt;/a&gt;
  VSCode Aurora Future theme
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k80-HjpH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img-blog.csdnimg.cn/20210425202156787.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k80-HjpH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img-blog.csdnimg.cn/20210425202156787.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/tridiamond" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a0Ftdgk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--FiE5zImT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/289909/7452f918-5f0b-4ac3-af65-840f88576cfc.jpeg" alt="tridiamond image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/auroral-ui/a-futuristic-dark-theme-aurora-future-310p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A futuristic dark theme `Aurora Future`&lt;/h2&gt;
      &lt;h3&gt;Benny Guo „Éª Apr 17 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#vscode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#firefox-aurora-future"&gt;
  &lt;/a&gt;
  Firefox Aurora Future
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f2h9Aq8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img-blog.csdnimg.cn/20210425202747477.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f2h9Aq8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img-blog.csdnimg.cn/20210425202747477.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/tridiamond" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a0Ftdgk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--FiE5zImT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/289909/7452f918-5f0b-4ac3-af65-840f88576cfc.jpeg" alt="tridiamond image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/auroral-ui/firefox-theme-aurora-future-48ei" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Firefox theme `Aurora Future`&lt;/h2&gt;
      &lt;h3&gt;Benny Guo „Éª Apr 25 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#firefox&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aurora&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#theme&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/aurora-future/"&gt;Theme page&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>frontend</category>
      <category>webdev</category>
      <category>leadership</category>
      <category>career</category>
    </item>
    <item>
      <title>Finding what matters to you</title>
      <author>John Papa</author>
      <pubDate>Wed, 05 May 2021 18:49:56 +0000</pubDate>
      <link>https://dev.to/john_papa/finding-what-matters-to-you-3anj</link>
      <guid>https://dev.to/john_papa/finding-what-matters-to-you-3anj</guid>
      <description>&lt;p&gt;Are you happy?&lt;/p&gt;

&lt;p&gt;I've been asked this question many times by co-workers and my leaders over the years. I've been lucky enough to have many leaders who cared enough to ask it and cared enough to help shape the environment around me and my colleagues. But for years I answered that question not even knowing there was a question that must be asked and answered first. A question that will shape whether I am happy or not.&lt;/p&gt;

&lt;p&gt;That question is "What makes you happy?".&lt;/p&gt;

&lt;p&gt;At some point in my career I decided to invest some time into thinking through that question. it's one that may be different for a lot of people. After all, what motivates you vs your colleague may be different. Sure, there will be overlapping aspects, but we are all different.&lt;/p&gt;

&lt;p&gt;First, I realized I am thankful for having a job that compensates me. Not everyone does. More specifically, I am thankful that this allows me to take care of my family.&lt;/p&gt;

&lt;p&gt;I'll cut to the end of the story here as I have 3 main points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I found it helpful to carefully consider and be honest with myself on what makes me happy in a job.&lt;/li&gt;
&lt;li&gt;My list evolves as my life evolves. Sometimes items are added, sometimes they drop off that list.&lt;/li&gt;
&lt;li&gt;Being happy with my job is not the same as being happy with my life.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I'll share here some of the most important aspects that make me happy at work. Maybe you have different ones or some of the same.&lt;/p&gt;

&lt;p&gt;This list is not in order, nor are they all equal to me.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Do I have the time to truly be with my family outside of my "work hours"?&lt;/li&gt;
&lt;li&gt;Do I find a challenge that stretches me and fits with how I like to build teams/processes/technology to achieve business solutions?&lt;/li&gt;
&lt;li&gt;Do I find the work interesting?&lt;/li&gt;
&lt;li&gt;Do I have support from my leaders?&lt;/li&gt;
&lt;li&gt;Do I have freedom to control how I get to the objectives?&lt;/li&gt;
&lt;li&gt;Do I have opportunity to influence direction?&lt;/li&gt;
&lt;li&gt;Do I find authenticity and character to be valued at work?&lt;/li&gt;
&lt;li&gt;Am I fairly compensated?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Are there other things I value? Absolutely! The point of this exercise for me was not to list a thousand items. Wow I'd be pressured into making sure I didn't leave something out (there is always something else to add). For example, I highly value working with collaborative people ... I could add that easily to the list above. And maybe I should. But at some point the list serves its purpose to me, which is to help me consider what matters to me.&lt;/p&gt;

&lt;p&gt;I'll leave you with this thought ... do you know what matters to you and influences what makes you happy at work? If not, maybe creating your own list will help.&lt;/p&gt;

</description>
      <category>devrel</category>
      <category>career</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Timezone for DateTime Field at Laravel¬†Nova</title>
      <author>mirac sengonul</author>
      <pubDate>Wed, 05 May 2021 18:47:15 +0000</pubDate>
      <link>https://dev.to/miracsengonul/timezone-for-datetime-field-at-laravel-nova-44fn</link>
      <guid>https://dev.to/miracsengonul/timezone-for-datetime-field-at-laravel-nova-44fn</guid>
      <description>&lt;p&gt;Hi there üëã&lt;/p&gt;

&lt;p&gt;You can want to see &lt;strong&gt;created_at&lt;/strong&gt; field or more fields like this with timezone. You follow me.&lt;/p&gt;

&lt;p&gt;Nova allows us for override any field.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'CreatedAt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Carbon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setTimezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Europe/Istanbul'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y-m-d'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
           &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We was able to manipulate &lt;strong&gt;created_at&lt;/strong&gt; field.&lt;/p&gt;

&lt;p&gt;We have been registering the records that date time types without UTC. But after we had made changes we saw that with timezone.&lt;/p&gt;

&lt;p&gt;Have good day üéä&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>nova</category>
      <category>timezone</category>
    </item>
    <item>
      <title>12 Simple Button Hover Animation Using CSS</title>
      <author>Kiran Raj R</author>
      <pubDate>Wed, 05 May 2021 18:41:37 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/12-simple-button-hover-animation-using-css-1ff1</link>
      <guid>https://dev.to/kiranrajvjd/12-simple-button-hover-animation-using-css-1ff1</guid>
      <description>&lt;p&gt;Almost every web project has one or more buttons, when the button is clicked we need to give an indication to the person that the button was clicked. It can be through a message or change in the button's visual properties. The change in the visual property help to convey the message quickly and easily. The visual indicators are better if the user need to click one button from a group of buttons, here I listed 12 ways that can be used to provide visual indication that the user has clicked the button. All are simple designs using CSS properties, no JavaScript is used. The working logic is given as comments in the CSS area, I tried to keep the CSS code simple, you can use your creativity to make these better. I just tried to show different ways of creating hover effects, if you find any errors let me know. If you have any suggestion, please comment, Happy Coding.&lt;br&gt;
 Here is the &lt;a href="https://codepen.io/kiran-r-raj/pen/vYxYKQK"&gt;codepen&lt;/a&gt; that contain all the 12 button hover effect examples.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kiran-r-raj/embed/vYxYKQK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/19-simple-hover-animation-using-css-1l36" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;19 Simple Hover Animation Using CSS&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R „Éª May  4 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/24-html-tags-you-may-not-know-37be" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;24 HTML Tags you may not know.&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R „Éª May  4 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/awesome-css-generators-3709" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;25+ Awesome CSS Code Generators For Your Next Project&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R „Éª Apr 29 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/15-awesome-css-animation-resources-4mhi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;15+ Awesome CSS Animation Resources&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R „Éª Apr 21 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/10-best-javascript-based-github-repos-for-web-developers-49pc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 Awesome GitHub Repos For Web Developers &lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R „Éª Apr 26 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Write Documentation in the Python World!</title>
      <author>Niklas Tiede</author>
      <pubDate>Wed, 05 May 2021 18:39:50 +0000</pubDate>
      <link>https://dev.to/niklastiede/writing-documentation-for-python-apps-44d8</link>
      <guid>https://dev.to/niklastiede/writing-documentation-for-python-apps-44d8</guid>
      <description>&lt;p&gt;This is part 7 of the multi-part series "The Evolution of a Script". The code of this post can be found on Github (see &lt;a href="https://github.com/NiklasTiede/tinyHTTPie/tree/7-Documentation"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#1-clean-and-self-descriptive-code"&gt;Clean and Self Descriptive Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-docstrings-comments-and-git-commit-messages"&gt;Comments, Docstrings and Git Commit Messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-readme-files"&gt;README Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-sphinx-documentation"&gt;Sphinx Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this post I wanna talk about a few dimensions of how to document a project in the python world. This makes it easier for the user or fellow developers to understand the project as a whole or separate parts of it. We will start at the lowest level and move toward higher abstraction levels.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-clean-and-self-descriptive-code"&gt;
  &lt;/a&gt;
  1. Clean and Self Descriptive Code
&lt;/h1&gt;

&lt;p&gt;The lowest level of documentation is the code itself. The goal is to create readable and reusable software.  This can be achieved by adhering to a few principles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Meaningful, pronounceable and consistent &lt;strong&gt;naming&lt;/strong&gt; of variables/functions/classes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Single-responsibility principle&lt;/strong&gt;: Each function fulfills only 1 purpose, same applies for classes/modules on a higher abstraction level.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;static typing&lt;/strong&gt; for bigger projects, enforce type checking with &lt;a href="https://github.com/python/mypy"&gt;mypy&lt;/a&gt;. Dynamic languages like Python make object identification difficult.&lt;/li&gt;
&lt;li&gt;Avoid reinventing the wheel and make good use of &lt;strong&gt;Python's standard library&lt;/strong&gt;. A good developer uses existing code strategically to his advantage.&lt;/li&gt;
&lt;li&gt;Stick to a consistent style, I like &lt;a href="https://google.github.io/styleguide/pyguide.html"&gt;&lt;strong&gt;Googles styleguide&lt;/strong&gt;&lt;/a&gt; for Python.&lt;/li&gt;
&lt;li&gt;Is the code elegant and pleasing? &lt;strong&gt;Listen to your intuition&lt;/strong&gt;, your subconscious will point to the right things.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#2-docstrings-comments-and-git-commit-messages"&gt;
  &lt;/a&gt;
  2. Docstrings, Comments and Git Commit Messages
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
&lt;span class="s"&gt;'This module is always available.  It provides access to the'&lt;/span&gt;
&lt;span class="s"&gt;'mathematical functions defined by the C standard.'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Docstrings are string literals which occur as first statement in a function, class, method or module definition. The docstrings become the &lt;code&gt;__doc__&lt;/code&gt; special attribute of that object. They're used to explain the general purpose of an object whereas comments explain smaller parts of the code. Comments are used to explain non-obvious portions of the code. Docstrings are surrounded by &lt;code&gt;"""triple quotes"""&lt;/code&gt; and divided into one-line or multi-line docstrings whereas comments starts with &lt;code&gt;#&lt;/code&gt; at the beginning.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;"""This is a docstring"""&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="c1"&gt;# docstring of the function
&lt;/span&gt;&lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;

&lt;span class="c1"&gt;# displays documentation of the function
&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are many docstring formats available. Most commonly used are NumPy, PyDoc and Googles docstring style. It's a good idea to stick with a format which supports the Python documentation generator &lt;a href="https://github.com/sphinx-doc/sphinx"&gt;Sphinx&lt;/a&gt;. This generates a part of your documentation automatically from your docstrings. The last section of this post will show how to generate and host documentation with Sphinx and &lt;a href="https://github.com/readthedocs/readthedocs.org"&gt;readthedocs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A convenient VSCode extension is the &lt;a href="https://github.com/NilsJPWerner/autoDocstring"&gt;Python Docstring Generator&lt;/a&gt; to facilitate the creation of docstrings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""[summary]

    Args:
        x (int): [description]
        y (int): [description]

    Returns:
        int: [description]
    """&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It detects parameters automatically and you just have to fill out the marked fields. It uses the Google style by default.&lt;/p&gt;




&lt;p&gt;Another source of documentation is available if the project has a Git history. A good git history gives you information about the reason for each code change. You can supercharge the git capabilities of VSCode by &lt;a href="https://github.com/eamodio/vscode-gitlens"&gt;GitLens&lt;/a&gt; and you will see each commit message next to the code it was committed to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rFULLG9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adqc2e7gfi2gs7l5pzzi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rFULLG9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adqc2e7gfi2gs7l5pzzi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, I like to use &lt;a href="https://github.com/carloscuesta/gitmoji"&gt;gitmoji&lt;/a&gt; to make the reading of my commit messages visually more appealing and force myself to commit only code changes which fall into one category of the gitmojis.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-readme-files"&gt;
  &lt;/a&gt;
  3. README Files
&lt;/h1&gt;

&lt;p&gt;A nicely written README is the first document the visitor of a project will see. Here's a screenshot of &lt;a href="https://github.com/thelounge/thelounge"&gt;THELOUNGE&lt;/a&gt;, an IRC client for self-hosting:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3-x3IY9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gygay6fv9dzghg4xtbuy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3-x3IY9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gygay6fv9dzghg4xtbuy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What a beautiful README! What does it make so good? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It has a visually &lt;strong&gt;appealing and memorable logo&lt;/strong&gt; which is compatible with Github's light and dark theme by using a transparent &lt;code&gt;.png&lt;/code&gt; picture.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;concise self-description&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Badges&lt;/strong&gt; from &lt;a href="https://shields.io/"&gt;shields.io&lt;/a&gt; which visualize the quality of the project.&lt;/li&gt;
&lt;li&gt;Links to &lt;strong&gt;documentation&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;example&lt;/strong&gt;, here screenshot of the application when running.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;list of&lt;/strong&gt; contained &lt;strong&gt;features&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Often README files also contain instructions for the installation or a tutorial on how to use it. The READMEs file format is &lt;code&gt;.md&lt;/code&gt; (markdown) or &lt;code&gt;.rst&lt;/code&gt; (reStructuredText). Sometimes it's also a good idea to provide examples to the user for certain, common use cases. Projects with a data scientific background tend to use jupyter notebooks (&lt;code&gt;.ipynb&lt;/code&gt;) to demonstrate the capabilities of the project. Other projects use plain python files for demonstration purposes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-sphinx-documentation"&gt;
  &lt;/a&gt;
  4. Sphinx Documentation
&lt;/h1&gt;

&lt;p&gt;For smaller projects the &lt;code&gt;README.md&lt;/code&gt; can be sufficient whereas projects like libraries benefit from a more extensive hosted technical documentation. I will show you here how simple it is to create your own freely hosted documentation with &lt;a href="https://github.com/sphinx-doc/sphinx"&gt;Sphinx&lt;/a&gt;, &lt;a href="https://readthedocs.org/"&gt;readthedocs&lt;/a&gt; and &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;OK, let's create some documentation! &lt;code&gt;Sphinx&lt;/code&gt; is the tool that will help us to simplify this process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip install sphinx

$ mkdir docs
$ cd docs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sphinx will ask us a couple of questions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sphinx-quickstart

&amp;gt; Separate source and build directories (y/n) [n]: y
&amp;gt; Project name: tinyHTTPie
&amp;gt; Author name(s): Niklas Tiede
&amp;gt; Project release []: 0.1.0
&amp;gt; Project language [en]: enter
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create the documentation we have to use the &lt;code&gt;make html&lt;/code&gt; command within the &lt;code&gt;docs&lt;/code&gt; directory. This creates the HTML of our documentation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd ..
$ make html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we open the &lt;code&gt;index.html&lt;/code&gt; file with the browser via live server we can see how it will look like. But its appearance is pretty puristic yet. Therefore we use the popular &lt;code&gt;RTD&lt;/code&gt; theme to give it a professional look. We install the theme...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip install sphinx_rtd_theme
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and customize the &lt;code&gt;conf.py&lt;/code&gt; file. We add the following lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sphinx_rtd_theme&lt;/span&gt;

&lt;span class="n"&gt;extensions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"sphinx_rtd_theme"&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;span class="n"&gt;pygments_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"sphinx"&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'0.1.0'&lt;/span&gt;
&lt;span class="n"&gt;html_theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'sphinx_rtd_theme'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And render again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ make html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it looks way better! Ok, next we wanna write some more content. The documentation should be written in the reStructuredText (.rst) syntax. Here's a nice &lt;a href="https://github.com/ralsina/rst-cheatsheet/blob/master/rst-cheatsheet.rst"&gt;cheat sheet&lt;/a&gt;. A &lt;code&gt;.rst&lt;/code&gt; previewer in your IDE will speed up things. I've added some documentation about tinyHTTPie, see &lt;a href="https://github.com/NiklasTiede/tinyHTTPie/blob/7-Documentation/docs/source/index.rst"&gt;index.rst&lt;/a&gt;, &lt;a href="https://github.com/NiklasTiede/tinyHTTPie/blob/7-Documentation/docs/source/install.rst"&gt;install.rst&lt;/a&gt; and &lt;a href="https://github.com/NiklasTiede/tinyHTTPie/blob/7-Documentation/docs/source/tutorial.rst"&gt;tutorial.rst&lt;/a&gt;. The last step is to publish our documentation. We have to register at &lt;a href="https://readthedocs.org/"&gt;readthedocs.org&lt;/a&gt; and let it hook our repository.&lt;/p&gt;

&lt;p&gt;Voil√†! A nice &lt;a href="https://tinyhttpie.readthedocs.io/en/latest/"&gt;documentation&lt;/a&gt; was created! I hope you see how easy it is to setup such a good-looking documentation and that documentation has so many interesting aspects we're typically not aware of! üòÉ&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>productivity</category>
      <category>python</category>
      <category>devops</category>
    </item>
    <item>
      <title>How To Use Vibration API in Your Website</title>
      <author>Bibek</author>
      <pubDate>Wed, 05 May 2021 18:14:39 +0000</pubDate>
      <link>https://dev.to/bibekkakati/how-to-use-vibration-api-in-your-website-4dp4</link>
      <guid>https://dev.to/bibekkakati/how-to-use-vibration-api-in-your-website-4dp4</guid>
      <description>&lt;p&gt;Hello everyone üëã&lt;/p&gt;

&lt;p&gt;In this article, we will see how can we use &lt;code&gt;Vibration API&lt;/code&gt; in our websites.&lt;/p&gt;

&lt;p&gt;We can use the &lt;code&gt;Vibration API&lt;/code&gt; to provide haptic or vibration feedback to the user using the website for their actions.&lt;/p&gt;

&lt;p&gt;Most modern mobile devices include vibration hardware, which lets software code provide physical feedback to the user by causing the device to shake. So this API works well with mobile devices only and targeted for the same.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Vibration API&lt;/code&gt; allows the web apps to access the vibration hardware if it exists.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation üë®‚Äçüíª
&lt;/h3&gt;

&lt;p&gt;Let's explore the API.&lt;/p&gt;

&lt;p&gt;We can access the API from the browser's &lt;code&gt;window.navigator&lt;/code&gt; object.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#check-raw-vibration-api-endraw-support"&gt;
  &lt;/a&gt;
  Check &lt;code&gt;Vibration API&lt;/code&gt; Support
&lt;/h4&gt;

&lt;p&gt;It is always a good idea to check for API support.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vibrate&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// It Supports&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;vibrate&lt;/code&gt; is a method that is responsible for the vibration.&lt;/li&gt;
&lt;li&gt;It expects one argument.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Argument is a number or an array of numbers for a series of vibrations. Those numbers are considered as &lt;code&gt;milliseconds&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the method was unable to vibrate because of invalid parameters, it will return &lt;code&gt;false&lt;/code&gt; else it returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#single-vibration"&gt;
  &lt;/a&gt;
  Single Vibration  üì≥
&lt;/h4&gt;

&lt;p&gt;For a single vibration, we can pass a single number directly or in an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Will vibrate the device for 500ms&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vibrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Same as the above line&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vibrate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#pattern-vibration"&gt;
  &lt;/a&gt;
  Pattern Vibration  üì≥ üì≥ üì≥
&lt;/h4&gt;

&lt;p&gt;To vibrate the device in a pattern, we can pass an array of numbers.&lt;/p&gt;

&lt;p&gt;Even indices numbers are responsible for the vibration and odd indices numbers will delay that much millisecond before the next vibration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Vibrate for 500ms, Wait for 200ms, Vibrate for 800ms&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vibrate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#cancelling-vibrations"&gt;
  &lt;/a&gt;
  Cancelling Vibrations
&lt;/h4&gt;

&lt;p&gt;To cancel an ongoing vibration pattern, we need to pass a &lt;code&gt;0&lt;/code&gt; or an empty array or an array containing all zeroes to the &lt;code&gt;vibrate&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vibrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vibrate&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fun-example"&gt;
  &lt;/a&gt;
  Fun Example ‚ú®
&lt;/h3&gt;

&lt;p&gt;Vibrate &lt;strong&gt;&lt;code&gt;SOS&lt;/code&gt;&lt;/strong&gt; in morse code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vibrate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Enjoyed? Give it a thumbs-up üëç&lt;/p&gt;

&lt;p&gt;Thank you for reading | Feel free to &lt;a href="https://bibekkakati.me"&gt;connect&lt;/a&gt; üëã&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/bibekkakati"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Open letter to AWS: Please, give us a price cap</title>
      <author>Ibrahim Cesar</author>
      <pubDate>Wed, 05 May 2021 17:58:45 +0000</pubDate>
      <link>https://dev.to/aws-builders/open-letter-to-aws-please-give-us-price-cap-4ge6</link>
      <guid>https://dev.to/aws-builders/open-letter-to-aws-please-give-us-price-cap-4ge6</guid>
      <description>&lt;p&gt;Hello AWS,&lt;/p&gt;

&lt;p&gt;One book (which I bought for my kindle in amazon.com.br) changed my life. No, it wasn‚Äôt ‚ÄúThe Secret‚Äù. As I stated so many times before this book was &lt;em&gt;&lt;a href="https://amzn.to/2Rh9paY"&gt;Accelerate: The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations&lt;/a&gt;&lt;/em&gt; by &lt;a href="https://twitter.com/nicolefv"&gt;Dr. Nicole Forsgren&lt;/a&gt; &lt;em&gt;et al.&lt;/em&gt; Delivering software quickly, reliably, and safely is at the heart of technology transformation and organizational performance and &lt;strong&gt;All paths start on creating a culture of psychological safety&lt;/strong&gt; (Other resource to read along with her &lt;em&gt;magnus opum&lt;/em&gt; is &lt;a href="https://services.google.com/fh/files/misc/state-of-devops-2019.pdf"&gt;The State of DevOps 2019&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We cannot have psychological safety with the risk of being charged hundreds of dollars&lt;/strong&gt;. I certainly can. I speak as a Brazilian, a developer from the Global South. And I, in my context, have several privileges myself. I lead a (small) team. I‚Äôm male and I have a stable job as stable as the new media industry is.&lt;/p&gt;

&lt;p&gt;I was thinking about this a lot when yesterday &lt;a href="https://twitter.com/forrestbrazeal"&gt;Forrest Brazeal&lt;/a&gt;, whose surname sounds a lot like of the name of my country, published his rant &lt;a href="https://cloudirregular.substack.com/p/please-fix-the-aws-free-tier-before"&gt;Please fix the AWS Free Tier before somebody gets hurt&lt;/a&gt;. I want to add weight and my perspective on this.&lt;/p&gt;

&lt;p&gt;Last year, as part of a hiring process I gave as assignment follow the &lt;a href="https://aws.amazon.com/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/?nc1=h_ls"&gt;‚ÄúBuild a Serverless Web Application‚Äù&lt;/a&gt; and then send me a narrative of the process on so on. To eliminate any doubts, I asked them to send me the last links I would avail under 24 hours and made sure any expenses they could have we would have paid them. One of our prospects never answered back. But this kind of ‚Äúghosting‚Äù is normal, and we moved on. Months later, we reconnect. And I learned that this person at that moment didn‚Äôt have a credit card.&lt;/p&gt;

&lt;p&gt;When I open an account, I‚Äôm on some cases ‚Äúawarded‚Äù with the possibility of gain some credits. Sometimes I got the credits. Sometimes not. Even when I didn‚Äôt get the credits, AWS called me back to talk with me - in Brazilian Portuguese, which is great. But to be in this position, to get some credits, I had to add my credit card and validate its funds. And yes, I have times in my life my credit card at certain times didn‚Äôt validate me in ‚Äúfree trials‚Äù.&lt;/p&gt;

&lt;p&gt;There are great initiatives, as I learned, the &lt;a href="https://aws.amazon.com/education/awseducate/aws-educate-faqs/"&gt;AWS Educate&lt;/a&gt; which I definitely need to know more about and will apply.&lt;/p&gt;

&lt;p&gt;There are two things, I always say in the trainings with people in my team, you &lt;strong&gt;must&lt;/strong&gt; do when create the account: Lock the account (MFA for root and do not use root, create an iam_admin with billing access turned on and MFA in it too) and the other thing is... Create the CloudWatch billing alarm. We put in $5 USD per month usually (which at the time of writing is $26,89 BRL. An accident of 100 USD would be $537,87 BRL. Just for reference, the monthly minimum wage, here is $1.100 BRL (also today, would be $204,54 USD). As defined by &lt;a href="https://br.indeed.com/career/programador-j%C3%BAnior/salaries"&gt;Indeed&lt;/a&gt; the medium junior developer has a monthly salary of $2.459 BRL (but this can vary widely depending on where you live in the country) - 456,94 USD. What if the dollar prices rises and rises?&lt;/p&gt;

&lt;p&gt;And this is my reality from Brazil. Latin America is huge and has several countries. There are Asia, Africa and inside each developed country there are people trying to get better and learn cloud skills. Besides limitations with the &lt;a href="https://www.lastweekinaws.com/blog/is-the-aws-free-tier-really-free/"&gt;Free Tier&lt;/a&gt; - and thank Bezos we have 1 million Lambda invocations free per month because I use half of them just testing. &lt;/p&gt;

&lt;p&gt;I will not forget to remember we had some good advancements. Now in Brazil we can pay AWS with other forms besides Credit Card. This was a huge thing they added in the last year. Our billings are in BRL (which is great, but the base services still in USD and still depending on the current price of conversion). We can paid by TED now. And they are still reviewing the payment in our &lt;a href="https://aws.amazon.com/pt/legal/aws-sbl/"&gt;beloved Boleto&lt;/a&gt;. But to open the account, we still having to have a credit card.&lt;/p&gt;

&lt;p&gt;They had to worry about the bill. What if the alarm be too slow?. Or you add a resource so pricey that will blowout any expectations you had? Remember, a lot of ‚Äúwarnings‚Äù put in place are great. But sometimes people are following some instructions and they &lt;em&gt;don‚Äôt read it&lt;/em&gt;. We can blame users all day. But I saw people with Doctor‚Äôs degree that get the error message or the warning in the screen, &lt;em&gt;in plain English&lt;/em&gt;, and they just don‚Äôt read. The console is the first way to interact with the Cloud and UX and other factors will pile up here but simply put, some people just don't read. &lt;strong&gt;Yes, I read the terms of use&lt;/strong&gt; and every other warning is the biggest lie we tell our systems or worse, we are just blind, following the golden blocks click in everything on the way. This is what is expected of a Cloud Developer? An Architect? No. definitely no. I'm here talking for people that wants to learn, that are trying for the first time. The builders of tomorrow. &lt;/p&gt;

&lt;p&gt;Now think in someone with a cognitive load of learning Cloud. Cloud is big, right? Every day a new service. Every region a different price (&lt;em&gt;fun fact&lt;/em&gt;: for several projects we pay more to run here in Sao Paulo than anywhere else)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#please-put-a-price-cap"&gt;
  &lt;/a&gt;
  Please, put a price cap.
&lt;/h2&gt;

&lt;p&gt;Just let us say how far we can pay. Could be an opt-in type of account, very limited. But we need a playground. Learning cloud is a burden enough to worry if it will blow up in our faces. There really does need to be more protection against running up a large unexpected bill.&lt;/p&gt;

&lt;p&gt;And &lt;em&gt;we mean business&lt;/em&gt;, right? Is from the Global South the promised &lt;a href="https://nextbillionusers.google/"&gt;‚ÄúNext Billion Users‚Äù&lt;/a&gt; will be. We don‚Äôt have all that is needed to run our &lt;em&gt;on premises&lt;/em&gt; resources like the Basecamp guys, we need the Cloud to empower us and our economies, and I believe I speak for many people when I say this would help us a lot. A LOT. We need psychological safety to deliver better software, to comply with the Well-Architected Framework and even more, when we are learning.&lt;/p&gt;

&lt;p&gt;Please take into consideration AWS!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#signed"&gt;
  &lt;/a&gt;
  Signed:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://ibrahimcesar.cloud"&gt;Ibrahim Cesar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to sign in with me? Please leave your name and link in the comments, thanks!&lt;/p&gt;

&lt;p&gt;Or just help spread the word!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Cover is a detail from photo by &lt;a href="https://unsplash.com/@sahand_hoseini?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Sahand Hoseini&lt;/a&gt; on &lt;a href="https://unsplash.com/images/things/money?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Transforming Types in TypeScript with Utility Types</title>
      <author>Maina Wycliffe</author>
      <pubDate>Wed, 05 May 2021 17:44:10 +0000</pubDate>
      <link>https://dev.to/this-is-learning/transforming-types-in-typescript-with-utility-types-3mhl</link>
      <guid>https://dev.to/this-is-learning/transforming-types-in-typescript-with-utility-types-3mhl</guid>
      <description>&lt;p&gt;Every once in a while, you end up in a situation where you need some variation of a type. For instance, you might want to omit some keys, retain some keys only, or even mark all keys as undefined or required on a type, among other use cases.&lt;/p&gt;

&lt;p&gt;Typescript offers Utility Types, which are intended to solve this particular problem. In this article, we are going to have a look at these built-in utility types and a third-party library (with examples) that offers more utilities you might find helpful in achieving the above goal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#builtin-utility-types"&gt;
  &lt;/a&gt;
  Built-in Utility Types
&lt;/h2&gt;

&lt;p&gt;This section focuses on TypeScript built-in utility types, they are numerous and I won't be able to cover all of them, I will just look at a few key ones, with examples, in my own opinions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#partial"&gt;
  &lt;/a&gt;
  Partial
&lt;/h3&gt;

&lt;p&gt;This utility type constructs a new type from an existing one, with the keys at the top level being marked as optional &lt;code&gt;(?)&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface Type {
    field: string;
}

type Type2 = Partial&amp;lt;Type&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YZ9c7sl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/partial_type.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YZ9c7sl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/partial_type.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; This only runs one level, meaning keys below one level will not be affected. If you want to mark all keys as optional, regardless the level they are in, check out PartialDeep below. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#required"&gt;
  &lt;/a&gt;
  Required
&lt;/h3&gt;

&lt;p&gt;This utility type does the opposite of the above, constructing a new type with all keys from the old type that are optional being marked as required.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface Type {
    field?: string;
    optional?: string;
}

type Type2 = Required&amp;lt;Type&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HrM7yNmV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/required_utility_type.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HrM7yNmV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/required_utility_type.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#omit"&gt;
  &lt;/a&gt;
  Omit
&lt;/h3&gt;

&lt;p&gt;This utility type constructs a new type from an existing type while omitting specified keys from the new type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface Type {
    field1?: string;
    field2: string;
    field3: string;
}

type Type2 = Omit&amp;lt;Type, "field3" | "field1"&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FDsd9Zo8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/omit_utility_type.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FDsd9Zo8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/omit_utility_type.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pick"&gt;
  &lt;/a&gt;
  Pick
&lt;/h3&gt;

&lt;p&gt;This utility type constructs a new type by picking keys specified from the old type. It does the opposite of Omit, as described above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface Type {
    field1?: string;
    field2: string;
    field3?: string;
    field4: string;
    field5?: string;
}

type Type2 = Pick&amp;lt;Type, "field2" | "field3"&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lov-hnLe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/pick_utility_type.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lov-hnLe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/pick_utility_type.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#readonly"&gt;
  &lt;/a&gt;
  Readonly
&lt;/h3&gt;

&lt;p&gt;This utility type constructs a new type from an existing one and marks all keys as read-only i.e. they cannot be re-assigned. This is useful for types of a frozen object - i.e. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze"&gt;&lt;code&gt;Object.freeze()&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface Type {
    field1?: string;
    field2: string;
    field3: string;
}

type Type2 = Readonly&amp;lt;Type&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FZJpJs-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/readonly_utility_types.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZJpJs-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/readonly_utility_types.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#record"&gt;
  &lt;/a&gt;
  Record
&lt;/h3&gt;

&lt;p&gt;This utility type constructs a new type with union members as keys and the type as the type of the keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface Name {
    firstName: string;
    lastName: string;
}

type Names = "user1" | "user2";

type Type2 = Record&amp;lt;Names, Name&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KbMNXbb3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/record_utility_type.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KbMNXbb3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/record_utility_type.png" alt="Record Utility Type"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Above are a few built-in utility types that I find very useful, you can find out more about built-in utility types in the official documentation &lt;a href="https://www.typescriptlang.org/docs/handbook/utility-types.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extending-builtin-utility-types"&gt;
  &lt;/a&gt;
  Extending Built-in Utility Types
&lt;/h2&gt;

&lt;p&gt;While the above built-in utility types are amazing, they don't cover all use cases, and this is where libraries that provide more utilities fill in the gap. A good example of such a library is &lt;a href="https://github.com/sindresorhus/type-fest"&gt;type-fest&lt;/a&gt;, which provides even more utilities. &lt;/p&gt;

&lt;p&gt;While I won't look in to all utilities provided by type-fest, I will highlight a few that are quite help and build on the built-in types utilities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#except"&gt;
  &lt;/a&gt;
  Except
&lt;/h3&gt;

&lt;p&gt;This is a variation of the Omit utility type described above, but stricter. It constructs a new type by omitting specified keys from a Type, but unlike Omit, the keys being emitted must strictly exist in the Type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// import { Except } from "type-fest"

interface X {
  a: string;
  b: string;
  c: string;
}

// Omit Example
type Y = Omit&amp;lt;X, "d"&amp;gt;

// Except Example
type Z = Except&amp;lt;X, "d" &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the image below, Except throws an error if you provide a Key that doesn't exist.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--flpIMmZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/typefest-except-example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--flpIMmZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/typefest-except-example.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#merge"&gt;
  &lt;/a&gt;
  Merge
&lt;/h3&gt;

&lt;p&gt;Constructs a new type by merging two Types, with keys of the second type overriding the keys of the first type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// import { Merge } from "type-fest"

interface X {
  a: string;
  b: string;
  c: string;
}

interface Y {
  c: number;
  d: number;
  e: number;
}

type Z = Merge&amp;lt;X, Y&amp;gt;

const x : Z = {
  a: "is string",
  b: "is string",
  c: 1,
  d: 2,
  e: 3,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lgtANnOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/typefest-merge-type.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lgtANnOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/typefest-merge-type.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#partialdeep"&gt;
  &lt;/a&gt;
  PartialDeep
&lt;/h3&gt;

&lt;p&gt;This utility type constructs a new type where all keys in all levels are optional. This is quite similar to the &lt;code&gt;Partial&lt;/code&gt; built-in utility type, with one significant difference, it runs deeply to all levels, while the former does it at the first level.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// import { PartialDeep } from "type-fest";

interface X {
  a: string;
  b: string;
  c: string;
}

interface Y {
  c: number;
  d: number;
  e: number;
  f: X;
}

type Z = PartialDeep&amp;lt;Y&amp;gt;;

const x: Z = {};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CmI1EtZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/typefest-partial_deep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CmI1EtZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/typefest-partial_deep.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#readonlydeep"&gt;
  &lt;/a&gt;
  ReadonlyDeep
&lt;/h3&gt;

&lt;p&gt;This utility type constructs a new type with all keys on all levels marked as required. This is also similar to the built-in &lt;code&gt;Readonly&lt;/code&gt; utility type, but unlike the built-in utility type, this one goes down to all keys in all levels, making them immutable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h2Lwd-Lh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/typefest-readonlydeep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h2Lwd-Lh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/typefest-readonlydeep.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mutable"&gt;
  &lt;/a&gt;
  Mutable
&lt;/h3&gt;

&lt;p&gt;This utility type constructs a type that strips out &lt;code&gt;readonly&lt;/code&gt; from a keys in a type, essentially the opposite of what the built-in utility type &lt;code&gt;Readonly&lt;/code&gt; does.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// import { Mutable } from "type-fest";

interface X {
  readonly a: string;
  readonly d: string;
}

type Y = Mutable&amp;lt;X&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BCbxTWK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/typefest-mutable.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BCbxTWK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cms.mainawycliffe.dev/content/images/2021/05/typefest-mutable.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, I looked into typescript utility types and how they can help you automatically create types from existing ones without resulting to duplicating eliminating the need to keep related types in sync. &lt;/p&gt;

&lt;p&gt;I highlighted a few built-in utility types that I find particularly useful on my day to day job as a developer. On top of that, we looked into type-fest, a library with a lot of utility types that extends the built-in types, and highlighted just a few.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/utility-types.html"&gt;Utility Types - Typescript Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sindresorhus/type-fest"&gt;type-fest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>A Visual Guide To: Sustainability City (Minecraft)</title>
      <author>Nitya Narasimhan</author>
      <pubDate>Wed, 05 May 2021 17:25:16 +0000</pubDate>
      <link>https://dev.to/azure/a-visual-guide-to-sustainability-city-minecraft-597e</link>
      <guid>https://dev.to/azure/a-visual-guide-to-sustainability-city-minecraft-597e</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Things you can do to improve your GreenTech IQ&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn &lt;a href="https://aka.ms/visual-greentech"&gt;The Principles Of Sustainable Software Engineering&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Watch the &lt;a href="https://channel9.msdn.com/Shows/Hello-World/Hello-World-April-22-2021-Special-Hello-Earth?WT.mc_id=mobile-24661-ninarasi"&gt;#EarthDay Special&lt;/a&gt; episode of Hello World!&lt;/li&gt;
&lt;li&gt;Read the &lt;a href="https://techcommunity.microsoft.com/t5/green-tech-blog/a-visual-guide-to-sustainabilitycity-let-s-talk-minecraft/ba-p/2326878"&gt;Tech Community&lt;/a&gt; post on this #SustainabilityCity guide&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#exploring-sustainability-through-minecraft"&gt;
  &lt;/a&gt;
  Exploring Sustainability Through Minecraft
&lt;/h2&gt;

&lt;p&gt;Did you know Minecraft has an &lt;a href="https://education.minecraft.net/how-it-works/what-is-minecraft"&gt;Education Edition&lt;/a&gt; with &lt;a href="https://education.minecraft.net/class-resources/worlds"&gt;crafted worlds&lt;/a&gt; that help students (K-12) and adults explore various environments or concepts interactively? &lt;/p&gt;

&lt;p&gt;Many of these come with lessons for educators to use to define activities and facilitate discussions that enhance learning. I was particularly excited to realize they had a dedicated &lt;a href="https://education.minecraft.net/earth-day"&gt;EarthDay&lt;/a&gt; with worlds and lesson plans that are perfect for parent-child or teacher-student contexts. &lt;/p&gt;

&lt;p&gt;In my case, I realized that as a Microsoft employee, I had access to the Microsoft Education Edition. So I did what any parent would do - I enlisted my 12yo to help me navigate Minecraft!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jZlslFRn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/Ex-yhOLWUAg6Rz-.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hCF7KqCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1336782118924455944/K4ZDwHHg_normal.png" alt="Nitya Narasimhan | üôèüèΩ üë©üèΩ‚Äçüíª üé® üåé profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nitya Narasimhan | üôèüèΩ üë©üèΩ‚Äçüíª üé® üåé
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nitya"&gt;@nitya&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      What we're doing on my wellness day off .. goldfish-sittong for neighbors and starting off a &lt;a href="https://twitter.com/PlayCraftLearn"&gt;@PlayCraftLearn&lt;/a&gt; learning journey.&lt;br&gt;&lt;br&gt;Bonus: I earned huge cred with 12yo when we realized my work account gave me access to Education Edition. I am such a fan and can't wait to learn &amp;amp;share 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:07 PM - 02 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1378016297590661122" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1378016297590661122" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1378016297590661122" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;h2&gt;
  &lt;a href="#visual-guide-to-sustainability-city"&gt;
  &lt;/a&gt;
  Visual Guide To Sustainability City
&lt;/h2&gt;

&lt;p&gt;This is the visual guide that I created based on our exploration together. Check out my &lt;a href="https://techcommunity.microsoft.com/t5/green-tech-blog/a-visual-guide-to-sustainabilitycity-let-s-talk-minecraft/ba-p/2326878"&gt;Tech Community&lt;/a&gt; for a longer post on how you can navigate the visual guide, and what you can learn in the process. Plus links to resources for you to explore this Minecraft world on your own.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aoD8_UGp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz2rca6kmciiyu4mnp49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aoD8_UGp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz2rca6kmciiyu4mnp49.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Curious to know how the visual guide was built? Here's a time lapse video showing how the information was synthesized and composed into a single visual sketchnote.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eggNm_UF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1389389274743726083/pu/img/9Dqh9ghbEFFLlW3g.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hCF7KqCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1336782118924455944/K4ZDwHHg_normal.png" alt="Nitya Narasimhan | üôèüèΩ üë©üèΩ‚Äçüíª üé® üåé profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nitya Narasimhan | üôèüèΩ üë©üèΩ‚Äçüíª üé® üåé
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nitya"&gt;@nitya&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/hashtag/VisualGuide"&gt;#VisualGuide&lt;/a&gt; to &lt;a href="https://twitter.com/Minecraft"&gt;@Minecraft&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/SustainabilityCity"&gt;#SustainabilityCity&lt;/a&gt; from &lt;a href="https://twitter.com/MicrosoftEDU"&gt;@MicrosoftEDU&lt;/a&gt; &lt;br&gt;Spent April working with 12yo on this as part of &lt;a href="https://twitter.com/hashtag/VisualGreenTech"&gt;#VisualGreenTech&lt;/a&gt;. Hugely recommend it to parents &amp;amp; teachers as a great way to learn/teach sustainable living!&lt;br&gt;&lt;br&gt;Hi-res image coming tomorrow!! (watch &lt;a href="https://twitter.com/sketchthedocs"&gt;@sketchthedocs&lt;/a&gt;) 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      01:22 AM - 04 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1389389953826754560" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1389389953826754560" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1389389953826754560" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;h2&gt;
  &lt;a href="#background-context"&gt;
  &lt;/a&gt;
  Background Context
&lt;/h2&gt;

&lt;p&gt;April 22 was Earth Day. People around the world used this as a day to drive awareness, engagement, and action, around climate action, sustainable development, and green technology. At Microsoft, I was thrilled to co-host a special episode of Hello World focused entirely on green technology topics. You can learn more about it here:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/fboucheros" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6H48P7M0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--YHmzziYF--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/140121/dc4cba6f-e82f-44cc-a754-d7c803bad6d3.jpg" alt="fboucheros image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/azure/hello-world-hello-earth-1f8l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Hello World, Hello Earth&lt;/h2&gt;
      &lt;h3&gt;Frank Boucher ‚òÅ „Éª Apr 22 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#news&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#podcast&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#technology&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;In reality though, we need to treat every day as Earth Day and take measures to actively educate ourselves, our families, and communities, about sustainability challenges and best practices for reducing our carbon footprint. Earlier this year, I released the Visual Guide to Sustainable Software Engineering, illustrating the 2 core philosophies and 8 core principles defined in &lt;a href="https://aka.ms/visual-greentech"&gt;this Learn module&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nitya" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vOJaOvLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bjwYsbM9--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/8619/686ae69d-8c31-462d-bd5e-c373a688e99d.png" alt="nitya image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/azure/a-visual-guide-to-sustainable-software-engineering-53hh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A Visual Guide To: Sustainable Software Engineering&lt;/h2&gt;
      &lt;h3&gt;Nitya Narasimhan „Éª Feb 12 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#greentech&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#azure&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sustainability&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sketchnote&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#the-visualgreentech-challenge"&gt;
  &lt;/a&gt;
  The #VisualGreenTech challenge
&lt;/h2&gt;

&lt;p&gt;One of those philosophies states that &lt;code&gt;everyone has a part to play&lt;/code&gt; in driving better sustainability practices. It was this philosophy that motivated us to launch the #VisualGreenTech challenge in the lead-up to #EarthDay&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--60hripa1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EyYP_42VcAIaeAb.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftMgimRk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1142087623109779457/WVm78Lez_normal.png" alt="Rae Lyon profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Rae Lyon
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/raerlyon"&gt;@raerlyon&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      üåçJoin the &lt;a href="https://twitter.com/hashtag/EarthDay"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/EarthDay"&gt;#EarthDay&lt;/a&gt; challenge and learn to sketch!üåè&lt;br&gt;üåüWe'll post one action prompt daily with a resource link&lt;br&gt;üåüVisit the link &amp;amp; answer the prompt *with a sketch*&lt;br&gt;üåüTag your sketch &lt;a href="https://twitter.com/hashtag/VisualGreenTech"&gt;#VisualGreenTech&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/EarthDay"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/EarthDay"&gt;#EarthDay&lt;/a&gt; &lt;br&gt;üåü We'll plant 1,000 trees üå≤üå≥üå≤&lt;br&gt;Visit: &lt;a href="https://t.co/Mcg31vsJ51"&gt;aka.ms/earthday-Visua‚Ä¶&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:47 PM - 07 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1379808135162982405" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1379808135162982405" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1379808135162982405" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;The challenge consisted of 24 prompts asking readers to explore the linked resources, then share their learnings using a simple visual. You can find all the images shared by the community in &lt;a href="https://twitter.com/i/events/1379862491656781825"&gt;this Twitter moment&lt;/a&gt; and read an early &lt;a href="https://sketchthedocs.dev/visual-green-tech/post/challenge-retro/"&gt;retrospective&lt;/a&gt; on the outcomes.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UAuMOZ05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EyZCNvrW8AQypg9.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hCF7KqCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1336782118924455944/K4ZDwHHg_normal.png" alt="Nitya Narasimhan | üôèüèΩ üë©üèΩ‚Äçüíª üé® üåé profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nitya Narasimhan | üôèüèΩ üë©üèΩ‚Äçüíª üé® üåé
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nitya"&gt;@nitya&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The first prompt goes live in just 30 minutes or so - but thought I'd give a sneak peek at what we have in store for the next &lt;a href="https://twitter.com/hashtag/30Days"&gt;#30Days&lt;/a&gt; - leading up to &lt;a href="https://twitter.com/hashtag/EarthDay"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/EarthDay"&gt;#EarthDay&lt;/a&gt; and extending just a bit beyond that ...&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/VisualGreenTech"&gt;#VisualGreenTech&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/HelloWorldLive"&gt;#HelloWorldLive&lt;/a&gt; &lt;br&gt;&lt;a href="https://twitter.com/hashtag/EarthDay"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/EarthDay"&gt;#EarthDay&lt;/a&gt; &lt;a href="https://t.co/8dKAXhCqbs"&gt;twitter.com/nitya/status/1‚Ä¶&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:30 PM - 07 Apr 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Nitya Narasimhan | üôèüèΩ üë©üèΩ‚Äçüíª üé® üåé
          &lt;/span&gt;
          &lt;a class="mentioned-user" href="https://dev.to/nitya"&gt;@nitya&lt;/a&gt;

        &lt;/div&gt;
        IT'S LIVE!
Join the challenge and let's educate ourselves on Sustainability this April 
üåü One action prompt daily with resource link
üåü Visit link, answer prompt *with a sketch!*
üåü Tag it #VisualGreenTech #EarthDay 

We'll plant 1000 trees!üòç
Learn more: https://t.co/obmhF1fzvt https://t.co/gA21CUu7Fc https://t.co/vpuYbw0lk4
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1379864083525156865" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1379864083525156865" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1379864083525156865" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#my-moment-of-zen"&gt;
  &lt;/a&gt;
  My Moment of Zen
&lt;/h2&gt;

&lt;p&gt;The prompt for #SustainabilityCity exploration &lt;a href="https://twitter.com/nitya/status/1386005767195561987"&gt;happened on April 24&lt;/a&gt;. By then my 12yo and I had finished exploring Sustainability City and I wanted to motivate him to translate awareness to some kind of action.&lt;/p&gt;

&lt;p&gt;So we taught ourselves to use a Stop-Motion-Animation app and created this animated film, hopefully the first of many. And we published it on Apr 24 - right on time!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YXId8-If--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1386110558668214280/pu/img/EBi5EboBwEB7Y6EH.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hCF7KqCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1336782118924455944/K4ZDwHHg_normal.png" alt="Nitya Narasimhan | üôèüèΩ üë©üèΩ‚Äçüíª üé® üåé profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nitya Narasimhan | üôèüèΩ üë©üèΩ‚Äçüíª üé® üåé
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nitya"&gt;@nitya&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/hashtag/VisualGreenTech"&gt;#VisualGreenTech&lt;/a&gt; &lt;br&gt;&lt;br&gt;The Battle For Planet Earth&lt;br&gt;An AJ-NN Animated Film&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/Sketchmation"&gt;#Sketchmation&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      00:12 AM - 25 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1386110718143959044" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1386110718143959044" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1386110718143959044" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;p&gt;I hope this inspires you to check out Minecraft Sustainability City. And don't forget:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Things you can do to improve your GreenTech IQ&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn &lt;a href="https://aka.ms/visual-greentech"&gt;The Principles Of Sustainable Software Engineering&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Watch the &lt;a href="https://channel9.msdn.com/Shows/Hello-World/Hello-World-April-22-2021-Special-Hello-Earth?WT.mc_id=mobile-24661-ninarasi"&gt;#EarthDay Special&lt;/a&gt; episode of Hello World!&lt;/li&gt;
&lt;li&gt;Read the &lt;a href="https://techcommunity.microsoft.com/t5/green-tech-blog/a-visual-guide-to-sustainabilitycity-let-s-talk-minecraft/ba-p/2326878"&gt;Tech Community&lt;/a&gt; post on this #SustainabilityCity guide&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

</description>
      <category>azure</category>
      <category>sketchnote</category>
      <category>greentech</category>
      <category>sustainability</category>
    </item>
    <item>
      <title>Announcing Demo Day! üéâ</title>
      <author>Arit Amana</author>
      <pubDate>Wed, 05 May 2021 17:18:02 +0000</pubDate>
      <link>https://dev.to/ourtimefortech/announcing-demo-day-c4c</link>
      <guid>https://dev.to/ourtimefortech/announcing-demo-day-c4c</guid>
      <description>&lt;p&gt;For almost 12 weeks, as part of our CodeCollab track, early-career developers Timi (&lt;a class="mentioned-user" href="https://dev.to/timilehin08"&gt;@timilehin08&lt;/a&gt;
), Gabrielle (&lt;a class="mentioned-user" href="https://dev.to/gabrielleeaston"&gt;@gabrielleeaston&lt;/a&gt;
), Sara (&lt;a class="mentioned-user" href="https://dev.to/saradotlog"&gt;@saradotlog&lt;/a&gt;
) and Cam (&lt;a class="mentioned-user" href="https://dev.to/dordsichord"&gt;@dordsichord&lt;/a&gt;
) have been building The Shiftwork App from scratch.&lt;/p&gt;

&lt;p&gt;The process has been exciting. ü•≥&lt;/p&gt;

&lt;p&gt;It has also been challenging. üò≠&lt;/p&gt;

&lt;p&gt;Above all, this project has expanded the team's technical, communication and collaborations skills like never before. &lt;/p&gt;

&lt;p&gt;On March 27th, the team shall present The Shiftwork App at Our Time For Tech's first-ever Demo Day!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And YOU are invited!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.tickettailor.com/events/ourtimefortech/519355"&gt;&lt;strong&gt;Grab a free ticket here&lt;/strong&gt;&lt;/a&gt; and please show up to support our hard-working fellows! üôèüèæ&lt;/p&gt;

&lt;p&gt;At the virtual event, the team will summarize the app's features, share on what they learned and how they grew, and entertain questions from the audience.&lt;/p&gt;

&lt;p&gt;We hope you will join us! üß°&lt;/p&gt;

</description>
      <category>womenintech</category>
      <category>codenewbie</category>
      <category>rails</category>
    </item>
    <item>
      <title>TypeScript:  What's the Point?</title>
      <author>Shaundai Person</author>
      <pubDate>Wed, 05 May 2021 17:10:08 +0000</pubDate>
      <link>https://dev.to/shaundai/typescript-what-s-the-point-51l6</link>
      <guid>https://dev.to/shaundai/typescript-what-s-the-point-51l6</guid>
      <description>&lt;p&gt;TypeScript is just a superset of JavaScript, meaning it's &lt;em&gt;just&lt;/em&gt; JavaScript - but with enhanced functionality.  When you run an application built in TypeScript, the code is compiled into the same JavaScript you know and love before being run in your browser.  &lt;em&gt;(btw - for this reason, you can use TypeScript anywhere you‚Äôd normally use JavaScript ‚Äì on the frontend &lt;strong&gt;and&lt;/strong&gt; on the backend!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The only issue with is that TypeScript - to someone who has never used a statically-typed language - is annoying af.  When you‚Äôre used to the carefree life of declaring variables without having to worry about their future, what they‚Äôll eventually become, and the functions they‚Äôll have to interact with, adding types to your code just seems like a bunch of extra work for little reward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-why-not-just-use-javascript"&gt;
  &lt;/a&gt;
  So, Why Not Just Use JavaScript?
&lt;/h2&gt;

&lt;p&gt;The short answer is: TypeScript makes code &lt;strong&gt;less error prone&lt;/strong&gt; and &lt;strong&gt;more readable&lt;/strong&gt; than JavaScript.  It was designed especially for projects that meet the following criteria:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Large or complex (enterprise-level applications)&lt;/li&gt;
&lt;li&gt;Maintained by multiple people&lt;/li&gt;
&lt;li&gt;Will evolve or be updated over time&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#less-error-prone"&gt;
  &lt;/a&gt;
  Less Error Prone
&lt;/h4&gt;

&lt;p&gt;The big difference between TypeScript and JavaScript is &lt;strong&gt;when typechecking happens&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First, what is &lt;em&gt;&lt;strong&gt;typechecking&lt;/strong&gt;&lt;/em&gt;?  &lt;strong&gt;Typecheckers&lt;/strong&gt; are type police built into JavaScript to enforce the type laws (for example, it‚Äôs against the rules to multiply a string with an array).  Typechecking is the process where typecheckers verify that your code follows all of the rules of the language.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;dynamically-typed languages&lt;/strong&gt; like JavaScript, typechecking occurs during &lt;em&gt;runtime&lt;/em&gt;.  This means you‚Äôll find out about your mistakes when you run your program.  This may happen locally as you‚Äôre testing, during your unit tests or smoke tests, or even in production after you‚Äôve shipped it to your customers.&lt;/p&gt;

&lt;p&gt;By contrast, &lt;strong&gt;statically-typed languages&lt;/strong&gt; like TypeScript check types during &lt;em&gt;compile time&lt;/em&gt; - right in your text editor!  This means that you‚Äôll instantaneously see mistakes that could potentially break your code &lt;em&gt;as you make them&lt;/em&gt;.  Not only does this prevent you from shipping a buggy app, it also closes the gap between when you &lt;strong&gt;make&lt;/strong&gt; the mistake and when you &lt;strong&gt;find out&lt;/strong&gt; you‚Äôve made a mistake, getting you to a fix, faster.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#more-readable"&gt;
  &lt;/a&gt;
  More Readable
&lt;/h4&gt;

&lt;p&gt;With explicitly typed code, others can look at your code and easily understand what it‚Äôs meant to do.  If you‚Äôre working in a huge code base with other engineers, this added level of readability is crucial for preventing new type errors.&lt;/p&gt;

&lt;p&gt;Once you‚Äôve got a solid understanding of how to use TypeScript, you‚Äôll also notice that the way you think about code will start to change.  Because static typing forces you to think about types before you‚Äôve even declared any values, you'll get great at mapping out the relationships between your components and their functions in your head before you even declare any variables!  You'll be able to identify and account for new edge cases before deploying to production.  Overall, you can expect that your code will be sturdier and much easier to maintain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-vs-typescript"&gt;
  &lt;/a&gt;
  JavaScript vs TypeScript
&lt;/h2&gt;

&lt;p&gt;Now let's look at some examples.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-1"&gt;
  &lt;/a&gt;
  Example 1:
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#adding-two-numbers-to-calculate-padding-on-a-button"&gt;
  &lt;/a&gt;
  Adding two numbers to calculate padding on a button.
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buttonPadding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You wrote the above code earlier today to calculate the amount of padding for buttons in your app.  If the button does not have an icon, we want 6px of extra padding.  &lt;code&gt;const a&lt;/code&gt; is the potential amount of padding we‚Äôll have, and we‚Äôll concatenate &lt;code&gt;a&lt;/code&gt; and ‚Äòpx‚Äô before plugging it into our CSS.&lt;/p&gt;

&lt;p&gt;As long as &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are both numbers, &lt;code&gt;buttonPadding&lt;/code&gt; will work fine!  But let‚Äôs say that you‚Äôre coding along and accidentally change &lt;code&gt;a&lt;/code&gt; to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buttonPadding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's a small mistake, but now &lt;code&gt;a&lt;/code&gt; will return a string.  If you‚Äôre using JavaScript, this may still &lt;em&gt;run&lt;/em&gt; just fine, but you‚Äôll wonder why you're not getting &lt;em&gt;any&lt;/em&gt; of that extra padding on that button.  It's because buttonPadding is now &lt;code&gt;undefined&lt;/code&gt;.  &lt;strong&gt;And let‚Äôs be honest - it‚Äôs always silly little code errors like that these take up &lt;em&gt;so&lt;/em&gt; much of our debugging time and patience to try to resolve!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you instead used TypeScript, though, you would‚Äôve gotten one of those &lt;del&gt;annoying&lt;/del&gt; super helpful red squigglies under &lt;code&gt;buttonPadding&lt;/code&gt; &lt;b&gt;as you were coding&lt;/b&gt;, letting you know that we expected &lt;code&gt;a&lt;/code&gt; to be a number, but it‚Äôs a string.  When you hover over the squiggly, you will see this error message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buttonPadding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="c1"&gt;// error: Type 'string' is not assignable to type 'number'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;TypeScript gives you the context you need to easily find out what‚Äôs wrong and where the mistake happened, saving you a huge headache.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-2"&gt;
  &lt;/a&gt;
  Example 2:
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#calling-an-array-method"&gt;
  &lt;/a&gt;
  Calling an array method
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;southernBreakfastItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;biscuits&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gravy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sausage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;grits&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;breakfastList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;southernBreakfast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You wrote this block of code 6 months ago.  &lt;code&gt;breakfastList&lt;/code&gt; maps over this array (&lt;code&gt;southernBreakfastItems&lt;/code&gt;) of food items you‚Äôve gotten back from a menu API (let's just imagine that this is what your Promise is returning) and just returns the name of each item.&lt;/p&gt;

&lt;p&gt;Your colleague opens the codebase today and starts working with this old component.  They unknowingly change the Promise returned in &lt;code&gt;southernBreakfast&lt;/code&gt; to a single string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;southernBreakfast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;biscuits&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;breakfastList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;southernBreakfast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A type error like this has the potential to break your app.  Without static types, it can be really difficult to track down where the source of the issue is coming from.&lt;/p&gt;

&lt;p&gt;If you use explicit types instead, you get a helpful error line under the &lt;code&gt;.map&lt;/code&gt; in the text editor letting you know that you're trying to run a &lt;code&gt;.map&lt;/code&gt; on a string instead of an array.  TypeScript once again saves you from 3 hours of &lt;code&gt;console.log&lt;/code&gt;-ing. üôå&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Property 'map' does not exist on type 'string'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example-3"&gt;
  &lt;/a&gt;
  Example 3:
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#accessing-the-properties-on-an-object"&gt;
  &lt;/a&gt;
  Accessing the properties on an object
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;musician&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;Duke&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;Ellington&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;genre&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;jazz&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;birthplace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;Washington&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;D&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;placeOfBirth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;brthplace&lt;/span&gt; &lt;span class="c1"&gt;//typo&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;yearsActive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;years&lt;/span&gt; &lt;span class="c1"&gt;// years does not exist on this object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Neither &lt;code&gt;placeOfBirth&lt;/code&gt; or &lt;code&gt;yearsActive&lt;/code&gt; will actually work, but if you‚Äôre using JavaScript you won‚Äôt &lt;em&gt;find out&lt;/em&gt; that they don‚Äôt work until you run your app locally (or worse - after you ship it to the customer).  By contrast, TypeScript gives you helpful and specific feedback within your text editor &lt;em&gt;as you type&lt;/em&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;placeOfBirth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;brthplace&lt;/span&gt;
&lt;span class="c1"&gt;// Property 'brthplace' does not exist on type `'{ firstName: string; lastName: string; genre: string; birthplace: string; }'`. Did you mean 'birthplace'?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, TypeScript sees that you made a small spelling typo and tries to gently guide you toward the error as you‚Äôre coding.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;yearsActive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;years&lt;/span&gt;
&lt;span class="c1"&gt;// Property 'years' does not exist on type '{ firstName: string; lastName: string; genre: string; birthplace: string; }'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, TypeScript tells you that this won‚Äôt work because you said &lt;code&gt;musician&lt;/code&gt; would have 4 key-value pairs, none of which have &lt;code&gt;years&lt;/code&gt; as a key.&lt;/p&gt;

&lt;p&gt;I hope this post has convinced you that TypeScript is a worthwhile tool for scaling and managing large apps.  Now go add some static ‚ö° to your app!&lt;/p&gt;

&lt;p&gt;Connect with me on &lt;a href="https://www.twitter.com/shaundai"&gt;Twitter&lt;/a&gt; and on &lt;a href="https://www.linkedin.com/in/shaundai"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The Curse of the A-word</title>
      <author>Sergey Bykov</author>
      <pubDate>Wed, 05 May 2021 17:04:53 +0000</pubDate>
      <link>https://dev.to/temporalio/the-curse-of-the-a-word-1o7i</link>
      <guid>https://dev.to/temporalio/the-curse-of-the-a-word-1o7i</guid>
      <description>&lt;p&gt;I wanted to write this post ever since I saw David Fowler's tweet and the discussion it triggered.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---A5bMP84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qt8irq2n337p5tsf7u4i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---A5bMP84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qt8irq2n337p5tsf7u4i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
While it may have taken me quite some time to get around to answering it, 2020 wasn't an ordinary year by any measure.&lt;/p&gt;

&lt;p&gt;I took my first steps into the Actor Model space more than a decade ago, when I started working on the Orleans project. I have been and will continue to be an enthusiast of actors. We published a few papers and I gave a number of talks about them. However, over time I gradually stopped using the term 'actors' even when explaining the properties and benefits of the Actor Model. This post is an attempt to explain why.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#minefield-of-conflations"&gt;
  &lt;/a&gt;
  Minefield of Conflations
&lt;/h2&gt;

&lt;p&gt;When we open-sourced Orleans in January of 2015, I was surprised by the amount of debate it generated on the seemingly trivial topic. The debate was about whether or not Orleans was in fact a faithful implementation of the Actor Model and if grains were actors at all. Even though we published the tech report "&lt;a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/Orleans-MSR-TR-2014-41.pdf"&gt;Orleans: Distributed Virtual Actors for Programmability and Scalability&lt;/a&gt;" nine months beforehand, it didn't seem to help much in those discussions.&lt;/p&gt;

&lt;p&gt;It honestly took us more than a year to reach a point when Virtual Actors of Orleans were generally recognized as a legitimate interpretation of the Actor Model. It was not just another interpretation, but one that has its unique benefits, especially for high-scale applications like cloud services. I was shocked by the uphill battle it took to get there. Over time, I came to realize that a big reason for these debates is the fact that actors are inherently a minefield of conflations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conflation-1-distributed-amp-local"&gt;
  &lt;/a&gt;
  Conflation #1: Distributed &amp;amp; Local
&lt;/h3&gt;

&lt;p&gt;Whenever somebody would say "we are using actors", I learned to first ask, "is it for a distributed system or a single-process?" This question was necessary because many developers use actors as a concurrency mechanism, leveraging their "processes one message at a time" property. The Orleans team was coming from the C#/.NET background where there was already a strong support for concurrency and asynchrony, with features like Promises (Tasks) and await. So from our vantage point, there was little reason to use actors just for basic concurrency. However, in languages with less native support for concurrency (ie: Java), local actors (used within a single process) continue to be a useful mechanism for concurrency and asynchrony.&lt;/p&gt;

&lt;p&gt;Both local and distributed actors adhere to the same three rules of the Actor Model definition ‚Äî in response to a message, an actor can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Send messages to other actors&lt;/li&gt;
&lt;li&gt;Create actors&lt;/li&gt;
&lt;li&gt;Change its behavior for next message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, distributed actors that live in a cluster of servers exist in a very different and more hostile environment; an environment of network messages, latencies, failure modes, and uncertainty about their state.&lt;/p&gt;

&lt;p&gt;Despite the commonality of the core three rules that apply to both, I would argue there's very little else in common between local and distributed actors, especially when it comes to application design, tradeoffs, failure modes, and major aspects of how actors supporting runtimes are implemented.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conflation-2-supervision-trees-amp-actors"&gt;
  &lt;/a&gt;
  Conflation #2: Supervision Trees &amp;amp; Actors
&lt;/h3&gt;

&lt;p&gt;Erlang was the first popular implementation of the Actor Model. Arguably, it was Erlang that is responsible for bringing actors into the mainstream and pioneering a number of important design choices. One of them was the idea of supervisors which are actors that are responsible for handling failures of other actors by recreating or restarting them, etc. Supervisors are usually used in hierarchies, known as supervision trees. These trees make it easy to reset a system of interconnected actors into a known state after a failure.&lt;/p&gt;

&lt;p&gt;Akka, being a faithful adaptation of Erlang ideas to the JVM world, also implemented supervision trees as the key failure handling mechanism. When your goal is to build a resilient system that cleanly resets chunks of its state in response to a failure this makes a ton of sense. The subtlety of the fact that supervision trees of Erlang and Akka are just a way to implement actors was lost on many people. In their minds, supervisors and supervision trees became part of the Actor Model itself.&lt;/p&gt;

&lt;p&gt;It took us a lot of effort to explain why we chose a different approach (Virtual Actors) to handling failures in Orleans. The Virtual Actor method of automatic lifecycle management by the runtime doesn't use supervisors and has its benefits, especially in many cloud scenarios. Keep in mind that the supervision tree approach may be superior in other cases, such as where you have a hierarchy of actors and need the ability to reset it. The point is that "actors" ‚â† "supervision trees", and it's a tax having to explain it to new people coming from the Erlang/Akka background.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conflation-3-message-passing-amp-oneway-messages"&gt;
  &lt;/a&gt;
  Conflation #3: Message Passing &amp;amp; One-Way Messages
&lt;/h3&gt;

&lt;p&gt;In the world of traditional actors, it is more common to send one-way messages without expecting an immediate response. More than that, the request-response (RPC) pattern is considered dangerous. Actor developers are told to use it with extra care because the calling actor will be blocked until a response is received.&lt;/p&gt;

&lt;p&gt;In Orleans, we chose the opposite default, with asynchronous RPC being the primary way of invoking actors. Each such RPC call has a built-in timeout. That removes the need for developers to worry about their actor getting blocked forever. Actors can also be marked as reentrant, so that they aren‚Äôt blocked from processing other calls at all while awaiting for a response.&lt;/p&gt;

&lt;p&gt;Multiple asynchronous RPC calls can be made by an actor concurrently, e.g. to fan out to a number of other actors. The elegance of async/await makes merging of the resulting promises in a desired way and awaiting a joint Promise for the whole fan-out operation a trivial pattern.&lt;/p&gt;

&lt;p&gt;One-way messages are also supported in Orleans, but they are not the primary pattern because in most cases developers want to know at least if a call successfully arrived to the caller or failed or timed out.&lt;/p&gt;

&lt;p&gt;This is yet another fundamental area with a significant "explanation tax", incurred by the different choices other implementations of the Actor Model have made. I suspect that if we had not used the term "actor" in defining Orleans from the beginning, we wouldn't have spent so much effort explaining ourselves. The async/await pattern for efficiently managing asynchrony had been established in the .NET ecosystem a long time ago, and there's no expectation of supervision trees in that developer community.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conflation-4-state-transition-amp-become"&gt;
  &lt;/a&gt;
  Conflation #4: State transition &amp;amp; Become
&lt;/h3&gt;

&lt;p&gt;This is a smaller issue. However, I‚Äôve had several conversations with people who insisted on a specific interpretation of the third rule of actors (that they can change their behavior of processing subsequent messages). They interpreted it to mean that there must be an explicit way to tell an actor to become something different. The claim was that if your actors don't support an explicit feature like that, they are not real actors.&lt;/p&gt;

&lt;p&gt;In my opinion, this rule simply means that an actor can change its internal state, whether it‚Äôs a formal state machine or a boolean/enum flag that will define how the actor should process another call. For example, Digital Twins are a mainstream pattern to model program entities that shadow physical IoT devices in order to reflect their state and to communicate with them. Actors are an obvious fit to implement Digital Twins.&lt;/p&gt;

&lt;p&gt;When a Digital Twin actor receives a "turn device off" command, it is very natural for the actor to flip an internal state variable that reflects the ‚Äúoff‚Äù state. In that state, the actor ignores or rejects all commands except for a "turn device on", which flips that variable back to ‚Äúon‚Äù.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#elephant-in-the-room-actors-amp-models"&gt;
  &lt;/a&gt;
  Elephant in the Room: Actors &amp;amp; Models
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U4bGulFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgwatx1rr8zxfamkbnx0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U4bGulFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgwatx1rr8zxfamkbnx0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've seen a number of presentations about actors that start with a meme slide showing some famous actor‚Äôs photo. This is because the vast majority of developers have never heard of the Actor Model. This would be ok if the term "actor" carried some intuitive connotation for them. In my experience, it does not. Even worse, when presenting about Orleans, the minority of the audience that knew about actors often had the above listed conflations in mind. It was a no-win situation, for both parts of the audience. Every time I presented, I had to spend energy and time pushing that boulder up the hill. At some point I stopped doing that by avoiding talking about actors altogether.&lt;/p&gt;

&lt;p&gt;Instead, I started describing grains in Orleans as objects that live somewhere within a cluster of servers. These objects have stable identities and are always available for an invocation. Objects are a widely understood concept. It is easy to build on the concept by adding that each such object has a unique identifier of your choosing, hides (encapsulates) its state, and is only accessible via asynchronous method calls defined as part of an interface. Object, interface, method call ‚Äî these are no new concepts to grasp. You just have to imagine objects working transparently across machine boundaries in the combined memory and compute space of a cluster. This approach was more effective, catering to a wide range of audiences, from academic to experienced cloud developers to ‚ÄúI want to learn about building scalable applications‚Äù developers.&lt;/p&gt;

&lt;p&gt;I'm happy that we chose to call Orleans actors "grains", not "actors". "Grain" is not a perfect term by any means, but at least it conveys the general idea of a rather small piece of an application. I would argue it is much better than "actor".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dotnet.github.io/orleans/docs/index.html"&gt;The landing page of Orleans documentation&lt;/a&gt; nowadays only mentions actors once ‚Äî in reference to our &lt;a href="https://www.microsoft.com/en-us/research/publication/orleans-distributed-virtual-actors-for-programmability-and-scalability/"&gt;Orleans: Distributed Virtual Actors for Programmability and Scalability&lt;/a&gt; 2014 paper. This is a result of our conscious effort of reducing the cognitive load on people that come to the page to learn about Orleans.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/reubenbond"&gt;Reuben Bond&lt;/a&gt; recently started describing grains as Cloud Native Objects. Again, not a perfect term. But I like it because it tries to convey the benefits of the model and where it is most applicable. &lt;a href="https://twitter.com/RogerAlsing"&gt;Roger Johansson&lt;/a&gt; even suggested a CNOB acronym for it. üôÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--150LKncU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjtxg7phtl0vu8yfk6jh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--150LKncU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjtxg7phtl0vu8yfk6jh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I am a big fan of the Actor Model as a simple and clean model of computations. In particular, it is an excellent fit for building distributed systems, whether it be on premises or in the cloud. I am forever grateful to Carl Hewitt, Peter Bishop, and Richard Steiger for their original insight, and to many subsequent followers that pushed those ideas forward. Implementations of the Actor Model and the ideas it pioneered power many high-scale and mission-critical systems today.&lt;/p&gt;

&lt;p&gt;At the same time, I‚Äôm convinced now that the name of the term "actor" was a rather unfortunate choice. It took me years to gradually arrive to this realization.  In my view, the very word ‚Äúactor‚Äù continues to be a major barrier for adoption of the Actor Model ideas for the broader population of developers. I cannot formally prove it. This is just my speculation, of course. I listed several other contributing factors that in my opinion add to this confusion.&lt;/p&gt;

&lt;p&gt;Remember that old saying about two hard things in computer science: naming things and cache invalidation? I believe it is part of the answer to the question, ‚ÄúWhy aren‚Äôt actor frameworks more popular?&lt;/p&gt;

&lt;p&gt;In my opinion, the Cloudflare folks made a pragmatic choice to call their (for all practical purposes) virtual actors "durable objects." Once again not perfect, but much more developer friendly than "actors." I like Reuben's idea of calling grains Cloud Native Objects. It helps people quickly get a high-level intuitive understanding of what it is and decide if it's relevant to them.&lt;/p&gt;

&lt;p&gt;If there‚Äôs a better term, I'm open to your ideas. Just not "actors", please.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>discuss</category>
      <category>career</category>
      <category>architecture</category>
    </item>
  </channel>
</rss>
