<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Updates on dev.to clone in Angular - Sept 10</title>
      <author>Ajit Singh</author>
      <pubDate>Fri, 10 Sep 2021 03:17:58 +0000</pubDate>
      <link>https://dev.to/this-is-angular/updates-on-dev-to-clone-in-angular-sept-10-22mj</link>
      <guid>https://dev.to/this-is-angular/updates-on-dev-to-clone-in-angular-sept-10-22mj</guid>
      <description>&lt;h5&gt;
  &lt;a href="#help-me-improve-these-updates-by-giving-suggestions"&gt;
  &lt;/a&gt;
  Help me improve these updates by giving suggestions.
&lt;/h5&gt;

&lt;p&gt;Github Repo - &lt;a href="https://github.com/ajitsinghkaler/devto-clone"&gt;https://github.com/ajitsinghkaler/devto-clone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deployed on Firebase - &lt;a href="https://dev-toclone.firebaseapp.com/"&gt;https://dev-toclone.firebaseapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last week I did some research on how to implement login or signup in the clone but was to no avail the Oauth2 is still in private alpha. Then I tried keys with local storage too which did not work because the API does not allow you to make calls with the api_key header its allows in postman but nit in the browser. If it was allowed I would have saved the key in local storage and delete it on sign out but with that out of the window only a few things are left in this project&lt;/p&gt;

&lt;p&gt;Adding tests&lt;br&gt;
Tags Page&lt;br&gt;
Cleanup&lt;/p&gt;

&lt;p&gt;After understanding that I will not be able to add any post features to the app I was bit dejected that is why I did not post any updates last week.&lt;/p&gt;

&lt;p&gt;Now what I did this week I added a user details page and the top dropdown that is in the header. To implement the user details page was fairly simple as the api does not give much  details of the the user and does not even allow me signin. So I built a fairly simple webpage. There was only thing we have the article component in the home module and we needed it in the user module too so to separate them I used a module for one component ie SCAM. You can check it &lt;a href="https://github.com/ajitsinghkaler/devto-clone/blob/9fae16ddfe4d74818a63bf2265c927bb55449499/src/app/pages/home/articles/article-card/article-card.component.ts#L25"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Most of the stuff in my dev.to clone is finished. Next time I'll add tags and do finalization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/issues/37"&gt;Things left to do&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#commits"&gt;
  &lt;/a&gt;
  Commits
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/ac0726293f86dac2131efcc539456a5462d68010"&gt;Header Dropdown&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/9fae16ddfe4d74818a63bf2265c927bb55449499"&gt;User details page added&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can only learn new things on this so suggest some cool new experiments that you want me to do on this repo.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>typescript</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Tips To Become Great Programmer</title>
      <author>Coder</author>
      <pubDate>Fri, 10 Sep 2021 02:59:38 +0000</pubDate>
      <link>https://dev.to/csscodesz/tips-to-become-great-programmer-39l6</link>
      <guid>https://dev.to/csscodesz/tips-to-become-great-programmer-39l6</guid>
      <description>&lt;p&gt;¬†A good programmer is someone who always looks both ways before crossing a one-way street. ~Doug Linder&lt;/p&gt;

&lt;p&gt;Let me start by saying that I do not consider myself to be a competent coder. I consider my coding abilities to be mediocre, and I am still learning and have a long way to go before I am even remotely satisfied with them.Yes, I am better at programming than a lot of others, but that is just because they are lazy and choose to sit about idle all day instead of programming. Their dreadful abilities make my less dreadful abilities appear fantastic.&lt;/p&gt;

&lt;p&gt;So most of the tips I will mention below are lessons learnt from failed endeavours, they are what I have wanted to be and I am not. So lets dive in.¬†&lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/tips-to-become-a-great-programmer/"&gt;Tips to become a great programmer&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>SHIFT15M: Multiobjective Large-scale Fashion Dataset with Distributional Shifts</title>
      <author>Masanari KIMURA</author>
      <pubDate>Fri, 10 Sep 2021 01:34:05 +0000</pubDate>
      <link>https://dev.to/nocotan/shift15m-multiobjective-large-scale-fashion-dataset-with-distributional-shifts-3ebp</link>
      <guid>https://dev.to/nocotan/shift15m-multiobjective-large-scale-fashion-dataset-with-distributional-shifts-3ebp</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DQqwUFzU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l72ux3fhh2mzreh3mtip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DQqwUFzU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l72ux3fhh2mzreh3mtip.png" alt="Overview of the SHIFT15M dataset."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi, everyone.&lt;/p&gt;

&lt;p&gt;We present a novel dataset aimed at properly evaluating machine learning models under distributional shifts.&lt;/p&gt;

&lt;p&gt;Our SHIFT15M dataset has several good properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multiobjective. Each instance in the dataset has several numerical values that can be used as target variables.&lt;/li&gt;
&lt;li&gt;Large-scale. The SHIFT15M dataset consists of 15million fashion images.&lt;/li&gt;
&lt;li&gt;Coverage of types of dataset shifts. SHIFT15M contains multiple dataset shift problem settings (e.g., covariate shift or target shift). SHIFT15M also enables the performance evaluation of the model under various magnitudes of dataset shifts by switching the magnitude.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, we provide software to handle SHIFT15M in a very simple way.&lt;/p&gt;

&lt;p&gt;If you are interested feel free to check out:&lt;/p&gt;

&lt;p&gt;Arxiv: &lt;a href="https://arxiv.org/abs/2108.12992"&gt;https://arxiv.org/abs/2108.12992&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href="https://github.com/st-tech/zozo-shift15m"&gt;https://github.com/st-tech/zozo-shift15m&lt;/a&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>deeplearning</category>
    </item>
    <item>
      <title>How to contribute to OSS AsyncAPI Initiative üåà</title>
      <author>Alejandra Quetzalli üêæ</author>
      <pubDate>Fri, 10 Sep 2021 01:31:16 +0000</pubDate>
      <link>https://dev.to/alejandra_quetzalli/how-to-contribute-to-oss-asyncapi-initiative-dh7</link>
      <guid>https://dev.to/alejandra_quetzalli/how-to-contribute-to-oss-asyncapi-initiative-dh7</guid>
      <description>&lt;p&gt;You may remember that I joined Postman, focusing solely on the &lt;em&gt;Open-Source (OSS)&lt;/em&gt; &lt;a href="https://www.asyncapi.com"&gt;AsyncAPI Initiative&lt;/a&gt;. üíï &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2WpNFXiT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxega686n9l16aijr4kh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2WpNFXiT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxega686n9l16aijr4kh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yesterday, someone on social media asked me what contributions are needed the most for AsyncAPI Initiative. After asking my team, they gave me a comprehensive list of what is most needed. Ready to contribute? üòÉ &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-contributions-are-needed-most"&gt;
  &lt;/a&gt;
  What contributions are needed most
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Volunteers and speakers for the &lt;a href="https://www.asyncapi.com/blog/events2021"&gt;upcoming October Hackathon and our Online Conference&lt;/a&gt; running from November 16-18. &lt;/li&gt;
&lt;li&gt;More &lt;a href="https://www.asyncapi.com/docs/getting-started"&gt;docs&lt;/a&gt;! &lt;/li&gt;
&lt;li&gt;Dev effort in our react component in the 1.0 version so that we can start working on &lt;a href="https://github.com/asyncapi/studio"&gt;Studio UI&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;More hands-on CLI development; we're using TS and &lt;a href="https://github.com/vadimdemedes/ink"&gt;Ink&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Regular maintenance for our &lt;a href="https://github.com/asyncapi/vs-asyncapi-preview"&gt;VS Code plugin&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Continue improvements and add new features to core tools such as our &lt;a href="https://github.com/asyncapi/parser-js"&gt;spec parser/validator&lt;/a&gt; and &lt;a href="https://github.com/asyncapi/generator"&gt;code generator&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Test out our new baby &lt;a href="https://github.com/asyncapi/glee"&gt;Glee&lt;/a&gt; and share feedback.&lt;/li&gt;
&lt;li&gt;Our &lt;a href="https://www.asyncapi.com/"&gt;website&lt;/a&gt; sorely needs a Front-End Dev that is willing to work without designs; we're using React, Tailwind, and Next.js. (&lt;strong&gt;Note:&lt;/strong&gt; Since our OSS team doesn't have a designer, this means being open to improve stuff via trial/error and having the patience to accept that in open source, any contributor can jump into a PR and comment.) &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mWS-q3A2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmrfv2yseumh0sle4y0w.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mWS-q3A2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmrfv2yseumh0sle4y0w.jpeg" alt="AsyncAPI, the future of event-driven architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-contributing"&gt;
  &lt;/a&gt;
  Thank you for contributing üíï
&lt;/h2&gt;

&lt;p&gt;We constantly need help at &lt;strong&gt;AsyncAPI Initiative&lt;/strong&gt; and look forward to regular contributors. In return, we offer any onboarding support you need and a lovely community of people!&lt;/p&gt;

&lt;p&gt;Let us know if you need anything to get started! üåà &lt;/p&gt;

&lt;p&gt;üëâüèΩ Don't forget to join our &lt;a href="https://asyncapi.slack.com/join/shared_invite/enQtNDY3MzI0NjU5OTQyLTM5NTlkYzFmZDQyMGVkNzVkOTRhMGU2N2VmMWRlOTdkNWE0YzdjMGQ2NzRlOWU1NGJkYjUyZDEzMzM3ZGYzYzM#/shared-invite/email"&gt;Slack channel&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>contributorswanted</category>
      <category>opensource</category>
      <category>eventdriven</category>
      <category>tooling</category>
    </item>
    <item>
      <title>My First Blog - Exploring Open Source! </title>
      <author>MizuhoOkimoto</author>
      <pubDate>Fri, 10 Sep 2021 00:07:01 +0000</pubDate>
      <link>https://dev.to/okimotomizuho/my-first-blog-exploring-open-source-40ab</link>
      <guid>https://dev.to/okimotomizuho/my-first-blog-exploring-open-source-40ab</guid>
      <description>&lt;p&gt;Hi, I'm Mizuho Okimoto!&lt;/p&gt;

&lt;p&gt;I'm a junior programmer, and student in my 5th semester, at Seneca College in Toronto. One of my current courses, Open Source Development(OSD600), gave me a great opportunity to write blogs here.&lt;/p&gt;

&lt;p&gt;First of all, let me introduce myself!&lt;br&gt;
Before I came to Toronto, I lived in Japan. I worked as a human resource consultant, where my role included providing websites and human resource management systems and collecting and analyzing data. At the time I wished I could build websites and software myself for my clients, to improve their business issues.&lt;br&gt;
After my one-year Canadian visa expired, I was going to go back to Japan, but I have decided to make a change and achieve my wish.&lt;/p&gt;

&lt;p&gt;I chose the OSD600 course as one of my optional courses because when I attended a career session to find my Co-op job, all of the Seneca students who worked for the company recommended us to take the course by David Humphrey. After I watched his first lecture video on YouTube, I was fascinated by the course concepts.&lt;br&gt;
He said we have to write a bunch of code, and it's challenging, so I'm still worried if I can do it. However, I thought if I didn't challenge myself during school, there was no way to improve my skills.&lt;/p&gt;

&lt;p&gt;This term, my accomplishment is to get a Co-op job from January as a web developer and be involved the Open Source community through this course to expand my programming knowledge. I haven't made up my mind about what kind of project I want to work on yet, but I would like to find something specifically with JavaScript.&lt;/p&gt;

&lt;p&gt;As part of the tasks I forked the following Open Source repository on GitHub.&lt;br&gt;
30 Seconds of Code: &lt;a href="https://github.com/MizuhoOkimoto/30-seconds-of-code"&gt;https://github.com/MizuhoOkimoto/30-seconds-of-code&lt;/a&gt;&lt;br&gt;
It's an open source JavaScript snippet that you can understand in 30 seconds or less. It's more like documentation, not a project, but I thought it was an interesting concept and very useful.&lt;/p&gt;

&lt;p&gt;Finally, I'm working on creating my portfolio which is approximately 3/4 complete. Please take a look :D&lt;br&gt;
-&amp;gt; &lt;a href="https://www.okimotomizuho.com/"&gt;https://www.okimotomizuho.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading my first blog. See you soon!&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>programming</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Feature Flags Simply Explained üé•[video]</title>
      <author>Davide 'CoderDave' Benvegn√π</author>
      <pubDate>Thu, 09 Sep 2021 23:44:31 +0000</pubDate>
      <link>https://dev.to/n3wt0n/feature-flags-simply-explained-video-11n1</link>
      <guid>https://dev.to/n3wt0n/feature-flags-simply-explained-video-11n1</guid>
      <description>&lt;p&gt;What are Feature Flags (or Feature Toggles)? How do they work? Why they are important?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feature Flags are a super important tool&lt;/strong&gt; to use in your application, but many are still confused about them&lt;/p&gt;

&lt;p&gt;This is why I put together a video with a &lt;strong&gt;simple explanation&lt;/strong&gt; on how Feature Flags work, how to implement them, and what &lt;strong&gt;benefits&lt;/strong&gt; they bring.&lt;/p&gt;

&lt;p&gt;‚è≤Ô∏è The overall outline of the video is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What are Feature Flags&lt;/li&gt;
&lt;li&gt;Release vs Deployment&lt;/li&gt;
&lt;li&gt;Feature Flag Implementation theory&lt;/li&gt;
&lt;li&gt;Continuous Experimentation&lt;/li&gt;
&lt;li&gt;Platforms with Feature Flags&lt;/li&gt;
&lt;li&gt;Controlling Feature Flags&lt;/li&gt;
&lt;li&gt;Recap&lt;/li&gt;
&lt;li&gt;Final Considerations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoy the watch!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/c8KgKTgyFUE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/c8KgKTgyFUE"&gt;Link to the video: https://youtu.be/c8KgKTgyFUE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What do you think of it? How do you plan to use or already use Feature Flags? Any more questions about this topic?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let me know in the comment section below&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üöÄ for more content:&lt;/p&gt;

&lt;p&gt;üìΩ &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
‚òï &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
üíñ &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
üìß &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
üåê &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
üëï &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
üë¶üèª &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
üê±‚Äçüíª &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
üë≤üèª &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
üë¥üèª &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
üîâ &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/c8KgKTgyFUE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>devops</category>
      <category>video</category>
      <category>explained</category>
    </item>
    <item>
      <title>Go tutorial: Build a card game with Golang</title>
      <author>Erin Schaffer</author>
      <pubDate>Thu, 09 Sep 2021 23:10:47 +0000</pubDate>
      <link>https://dev.to/educative/go-tutorial-build-a-card-game-with-golang-35ph</link>
      <guid>https://dev.to/educative/go-tutorial-build-a-card-game-with-golang-35ph</guid>
      <description>&lt;p&gt;Golang, or Go, is a popular programming language used by many top tech companies. If you dream of working for one of these top companies, it‚Äôs important to have experience with the programming languages they use. The best way to learn any programming language is to dive right in and get real-world, hands-on experience. A solid portfolio with coding projects can help demonstrate your skills and experience in a programming language. Today, we‚Äôre going to walk you through a real-world Go portfolio project. &lt;/p&gt;

&lt;p&gt;Let‚Äôs get started!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We‚Äôll cover&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#description"&gt;Project description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#featureone"&gt;Building feature 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#featuretwo"&gt;Building feature 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrapup"&gt;Project wrap up and related interview questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nextsteps"&gt;Next steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-description"&gt;
  &lt;/a&gt;
  Project description
&lt;/h2&gt;

&lt;p&gt;Card games are popular all around the world, with people of all ages playing different variations of them. Let's say that you work for a startup that wants to create a web app to play different card games. They want to design common games, like poker and solitaire, as well as create their own unique games. All of the games can be played in single-player or multiplayer mode. Since there will be a single-player option, your team needs to create an ‚Äúopponent‚Äù to play against users.&lt;/p&gt;

&lt;p&gt;The first part of the project involves implementing a feature that helps the user &lt;strong&gt;play a variation of poker&lt;/strong&gt;. You will have to design the feature so that it can determine if a given hand of cards is a hand of straights or not. The second part of the project involves creating a feature for a &lt;strong&gt;custom card game&lt;/strong&gt; named &lt;em&gt;Fizzle&lt;/em&gt;. You will have to design the feature so that the user can find the maximum points that can be obtained by picking out cards from a set of ten random cards.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Feature 1&lt;/strong&gt;: Determine if a hand of straights is possible.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Feature 2&lt;/strong&gt;: Find the maximum number of points that can be obtained from a set of ten random cards.
Now that you know the background, let‚Äôs get started working on the first feature!

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-feature-1"&gt;
  &lt;/a&gt;
  Building feature 1
&lt;/h2&gt;

&lt;p&gt;For feature #1, we‚Äôre working on a poker game variation concerned with a hand of straights. In traditional poker, players have sets of five cards (called &lt;strong&gt;&lt;em&gt;hands&lt;/em&gt;&lt;/strong&gt;). Normally, a hand of straights is formed by five cards of sequential ranks, like &lt;em&gt;9&lt;/em&gt;, &lt;em&gt;8&lt;/em&gt;, &lt;em&gt;7&lt;/em&gt;, &lt;em&gt;6&lt;/em&gt;, and &lt;em&gt;5&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;In our new variation of poker, a number &lt;em&gt;k&lt;/em&gt; will be determined by a dice roll. If the dice roll a 1, it should be rolled again. That way, &lt;em&gt;k&lt;/em&gt; will always be in the range of 2-6. A &lt;strong&gt;hand of straights&lt;/strong&gt; is only possible if &lt;em&gt;k&lt;/em&gt; sets of cards can be formed using all of the cards in the given hand. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kd9MnFxO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqas0squo706hj9f2lcd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kd9MnFxO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqas0squo706hj9f2lcd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, we can see that we were dealt a hand of nine cards. The dice rolled a 3, so &lt;em&gt;k&lt;/em&gt; is &lt;strong&gt;3&lt;/strong&gt;. Then, the cards were arranged into three groups. Each group contains three cards in sequential order. During implementation, we‚Äôll receive these cards in an array, like &lt;code&gt;{10, 3, 6, 2, 13, 12, 5, 4, 7}&lt;/code&gt;. The jack, king, and queen cards are denoted by 11, 12, and 13 respectively. The number after the dice roll is given as an integer. The module should return &lt;code&gt;true&lt;/code&gt; if a hand of straights can be formed. If a hand of straights can‚Äôt be formed, it should return &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;The common intuition behind the solution is to try and &lt;strong&gt;form groups of size *k&lt;/strong&gt;&lt;em&gt;, starting with the lowest card. Once the lowest card is identified, a hand of straights is only possible if the lowest card is at the bottom end of a *k-sized&lt;/em&gt; group. For example, if &lt;em&gt;k&lt;/em&gt; is &lt;em&gt;4&lt;/em&gt; and the lowest card is &lt;em&gt;2&lt;/em&gt;, we know that the group will be &lt;em&gt;2, 3, 4, 5&lt;/em&gt;. If we can‚Äôt find this group, the hand isn‚Äôt a hand of straights. &lt;/p&gt;

&lt;p&gt;Let‚Äôs get started coding the feature! We‚Äôll break the solution down into steps. Before we get started, we need to import the proper packages so we can test our code at the end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main
import (
  "fmt"
  "sort"
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Set up the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func isHandOfStraights(hand []int, k int) bool{
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Check if the number of cards in the hand is divisible by &lt;em&gt;k&lt;/em&gt;. If not, we can‚Äôt create groups, so return &lt;code&gt;false&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    if len(hand) % k != 0{
        return false
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Count the occurrences of each card in the given hand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    count := make(map[int]int)
    for _, i := range hand{
        count[i] = count[i] + 1
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: Sort the list and start traversing it from the lowest-ranking card. We can use a hash map by storing card numbers as keys and occurrences as values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    sort.Ints(hand)
    i := 0
    n := len(hand)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: Use a nested loop that runs &lt;em&gt;k&lt;/em&gt; times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        for i &amp;lt; n {
                current := hand[i]
                for j := 0; j &amp;lt; k; j++ {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 5.1&lt;/strong&gt;: Check if the current card and the next &lt;em&gt;k-1&lt;/em&gt; cards (in increasing ranking) are in the &lt;code&gt;count&lt;/code&gt; map. If any of them don‚Äôt exist, return &lt;code&gt;false&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;            if _, ok := count[current + j]; !ok || count[current + j] == 0 {
                return false
            }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 5.2&lt;/strong&gt;: When each of the required cards is found, decrease its number of occurrences in the &lt;code&gt;count&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;            count[current + j]--
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 5.3&lt;/strong&gt;: After a complete group is found, use a while loop to find the next group‚Äôs smallest card and determine which of the next cards in &lt;code&gt;count&lt;/code&gt; has more than zero occurrences left.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        for i &amp;lt; n &amp;amp;&amp;amp; count[hand[i]] == 0{
            i++
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt;: Return &lt;code&gt;true&lt;/code&gt; if all cards are sorted into groups.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   return true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let‚Äôs test our feature using two sample hands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main
import (
  "fmt"
  "sort"
)
func isHandOfStraights(hand []int, k int) bool{
    if len(hand) % k != 0{
        return false
    }

    count := make(map[int]int)
    for _, i := range hand{
        count[i] = count[i] + 1
    }

    sort.Ints(hand)
    i := 0
    n := len(hand)

    for i &amp;lt; n {
        current := hand[i]
        for j := 0; j &amp;lt; k; j++ {
            if _, ok := count[current + j]; !ok || count[current + j] == 0 {
                return false
            }
            count[current + j]--
        }
        for i &amp;lt; n &amp;amp;&amp;amp; count[hand[i]] == 0{
            i++
        }
    }
    return true
}

func main() {
    hand := []int{5,2,4,4,1,3,5,6,3}
    k := 3
    fmt.Println(isHandOfStraights(hand, k))

    hand2 := []int{1,9,3,5,7,4,2,9,11}
    k = 2
    fmt.Println(isHandOfStraights(hand2, k))
}

=&amp;gt; true
=&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-feature-2"&gt;
  &lt;/a&gt;
  Building feature 2
&lt;/h2&gt;

&lt;p&gt;For feature #2, we‚Äôre working on a custom card game called &lt;em&gt;Fizzle&lt;/em&gt;. In this game, the dealer shuffles the deck of cards, and then linearly spreads out all of the cards facing upwards. Then, the players take turns rolling a dice. The number rolled is &lt;em&gt;k&lt;/em&gt;. Players will then take turns to &lt;strong&gt;remove &lt;em&gt;k&lt;/em&gt; cards&lt;/strong&gt; from the deck, but they can only choose cards from the &lt;strong&gt;left or right side&lt;/strong&gt; of the cards. The goal is to pick out the cards with the maximum number of points. Each card has point values that correspond to its number, and the face cards: jack, queen, king, and ace, have 11, 12, 13, and 14 points respectively.&lt;/p&gt;

&lt;p&gt;We want to create a feature for &lt;em&gt;Fizzle&lt;/em&gt; players that analyzes the deck‚Äôs current state and the number the player rolled and &lt;strong&gt;determines the maximum score&lt;/strong&gt; that the player can get on that turn.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ihuloJrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bdu6lz0jubn5v8folil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ihuloJrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bdu6lz0jubn5v8folil.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, the player chose the cards &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;6&lt;/code&gt;, and &lt;code&gt;3&lt;/code&gt; to get the maximum amount of points possible. During implementation, we‚Äôll get a deck of cards in array form, like &lt;code&gt;{5, 3, 4, 4, 2, 3, 4, 6, 3}&lt;/code&gt;. The number we get after rolling the dice will be given as an integer. The module should return the maximum number of points as an integer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;To implement this feature, we need to test &lt;strong&gt;every possible combination&lt;/strong&gt; in which &lt;em&gt;k&lt;/em&gt; cards can be picked from the deck from the left or right side. We can‚Äôt pick the &lt;em&gt;n*th card from the right (or left), unless the (*n&lt;/em&gt; - 1)th card from the right (or left) is picked. If we pick &lt;em&gt;k&lt;/em&gt; - 1 cards from the right, then 1 card will be picked from the left side, and so on. We can find all possible combinations by &lt;strong&gt;assuming a sliding window&lt;/strong&gt; of &lt;em&gt;k&lt;/em&gt; size that wraps from right to left. The output will be the maximum sum found by trying all of the possible combinations.&lt;/p&gt;

&lt;p&gt;Let‚Äôs get started coding this feature! We‚Äôll break it down into steps. Before we get started, we need to import the proper packages so we can test our code at the end.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main
import (
  "fmt"
  "math"
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Set up the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func maxPoints(deck []int, k int) int{
    left := 0;
    right := len(deck) - k
    var total, best int
    total = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Assume that &lt;em&gt;k&lt;/em&gt; cards on the right side give us the maximum points.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    for i := right; i &amp;lt; len(deck); i++ {
        total += deck[i]
    }
    best = total
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Use a loop that runs &lt;em&gt;k&lt;/em&gt; times and test all the combinations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    for i := 0; i &amp;lt; k; i++ {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: Remove the points of the card on the right side and add the points on the left side.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        total += deck[left] - deck[right]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: Compare the &lt;code&gt;total&lt;/code&gt; points with the current &lt;code&gt;best&lt;/code&gt; points and keep the maximum.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        best = int(math.Max(float64(best), float64(total)))
        left++
        right++
    }
    return best
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let‚Äôs test our feature using a sample deck.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main
import (
  "fmt"
  "math"
)
func maxPoints(deck []int, k int) int{
    left := 0;
    right := len(deck) - k
    var total, best int
    total = 0
    for i := right; i &amp;lt; len(deck); i++ {
        total += deck[i]
    }
    best = total
    for i := 0; i &amp;lt; k; i++ {
        total += deck[left] - deck[right]
        best = int(math.Max(float64(best), float64(total)))
        left++
        right++
    }
    return best
}

func main() {
    deck := []int{5,3,4,4,2,3,2,6,3}
    k := 4
    fmt.Println(maxPoints(deck, k))
}

=&amp;gt; 17
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-wrap-up-and-related-interview-questions"&gt;
  &lt;/a&gt;
  Project wrap up and related interview questions
&lt;/h2&gt;

&lt;p&gt;Congrats! You made it to the end of the project. Throughout this project, we learned how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build a feature that can identify a hand of straights by grouping cards in &lt;strong&gt;sequential order&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Use the &lt;strong&gt;sliding window technique&lt;/strong&gt; to build a feature to find cards with the maximum point values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problems that we solved today are also commonly asked interview questions at top tech companies. After our experience building the project, you now can identify problems with the same patterns and solve those problems using the techniques we implemented today. Let‚Äôs take a look at a couple of &lt;strong&gt;related interview questions&lt;/strong&gt; that we can solve using a similar approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Divide an array in sets of K consecutive numbers&lt;/li&gt;
&lt;li&gt;Find the maximum sum from either end of an array

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;Building a strong coding portfolio gets you hands-on practice with real-world software development problems. A strong portfolio is a great way to set yourself apart from the competition as a Go developer. We completed just one project today, but there are so many more real-world projects that you could work on to learn more about the software development world and help you better prepare yourself for your Go interview. Some more project ideas include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improving the user experience in finding content to watch on Netflix&lt;/li&gt;
&lt;li&gt;Implementing productivity-enhancing features for Google Calendar&lt;/li&gt;
&lt;li&gt;Optimizing customer-facing features on Amazon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get hands-on with these projects and more, check out Educative‚Äôs course &lt;a href="https://www.educative.io/courses/decode-the-coding-interview-go"&gt;&lt;strong&gt;Decode the Coding Interview in Go: Real-World Examples&lt;/strong&gt;&lt;/a&gt;. In this curated course, you‚Äôll prepare for your Go interview by tackling real-world problems faced by top tech companies. After each project, you‚Äôll learn about what kinds of interview questions are related to the project, so you‚Äôre even more prepared for your interview.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to prepare for more coding interviews, check out our &lt;strong&gt;Decode the Coding Interview&lt;/strong&gt; series. We have courses in the following languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/courses/decode-coding-interview-python"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/courses/decode-coding-interview-js"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/courses/decode-coding-interview-cpp"&gt;C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/courses/decode-coding-interview-java"&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/courses/decode-the-coding-interview-csharp"&gt;C#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-learning-about-coding-interview-projects"&gt;
  &lt;/a&gt;
  Continue learning about coding interview projects
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/react-instagram-tutorial"&gt;React tutorial: How to build the Instagram UI with React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/javascript-snake-game-tutorial"&gt;JavaScript snake game tutorial: Build a simple, interactive game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/how-to-develop-an-android-app"&gt;Android tutorial: How to develop an Android app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>programming</category>
      <category>beginners</category>
      <category>go</category>
    </item>
    <item>
      <title>What is Jekyll and why might you want to learn it?</title>
      <author>Arnold Ho</author>
      <pubDate>Thu, 09 Sep 2021 22:18:12 +0000</pubDate>
      <link>https://dev.to/_arnoldho/what-is-jekyll-and-why-might-you-want-to-learn-it-cg3</link>
      <guid>https://dev.to/_arnoldho/what-is-jekyll-and-why-might-you-want-to-learn-it-cg3</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-jekyll-and-why-might-you-want-to-learn-it"&gt;
  &lt;/a&gt;
  What is Jekyll and why might you want to learn it?
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer: I am not an expert, I am only &lt;a href="https://www.swyx.io/learn-in-public/"&gt;Learning in Public&lt;/a&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;strong&gt;Also, this post is not meant to be a comprehensive tutorial on how to set up Jekyll, for that I recommend this &lt;a href="https://happycoding.io/tutorials/html/jekyll"&gt;Jekyll guide from Happy Coding&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; is a powerful tool written in Ruby that lets you do two handy things with your website:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It lets you set your layout once and apply it to all of your pages&lt;/li&gt;
&lt;li&gt;It lets you convert markdowns into HTML&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will run through each of these points.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-your-layout"&gt;
  &lt;/a&gt;
  Setting your layout
&lt;/h2&gt;

&lt;p&gt;Without Jekyll, if you try to create a blog from scratch or a site that's kind of like a library with many different pages on it, you will set up an HTML file for each page. Your page might look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt; My Awesome blog &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;HTML&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CSS&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;JavaScript&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Python&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt; Here is my blog title &lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; Here are my content &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;#twitter&amp;lt;/a&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;#&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;facebook&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;#&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Youtube&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;#&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;GitHub&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(code might not be exactly how you would write to get all your CSS write, the above is for illustration purpose only)&lt;/p&gt;

&lt;p&gt;Why is this a problem you might ask, imagine you grew your blog now and you have more than a hundred pages. Now, suddenly you thought of a new feature to implement, maybe a comment section below your blog, or maybe you would want to change the style and add an extra link to your navbar. Now you would have to change all your html on every single page. This sounds extremely tedious and error prone, as programmers we'd rather not be doing that.&lt;/p&gt;

&lt;p&gt;Fortunately, with Jekyll you would be able to automate your code. You will need to create a default layout page, call it &lt;code&gt;default.html&lt;/code&gt;. Your &lt;code&gt;default.html&lt;/code&gt; would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt; My Awesome blog &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;HTML&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CSS&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;JavaScript&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Python&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;

{{ content }}

&lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;#twitter&amp;lt;/a&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;#&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;facebook&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;#&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Youtube&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;#&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;GitHub&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;{{ content }}&lt;/code&gt; tells Jekyll that this is the place that they will fetch the content from your other files (either HTML or Markdown).&lt;/p&gt;

&lt;p&gt;Now, when you create your new pages, you just need to write these instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;---
layout: default
---

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt; Here is my blog title &lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; Here are my content &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These blocks of html code goes straight into the &lt;code&gt;{{ content }}&lt;/code&gt; part of the default layout for every new page that you have created.&lt;/p&gt;

&lt;p&gt;By using Jekyll, you will be able to automate the repetitive parts of your html script. Now if you want to change your navbar or add a sidebar feature and your page, you only need to change it once in your &lt;code&gt;default.html&lt;/code&gt; file. This is super handy and eliminate most of your sources of errors in one step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#converting-markdown-into-html"&gt;
  &lt;/a&gt;
  Converting markdown into HTML
&lt;/h2&gt;

&lt;p&gt;If you used markdown before (which you would have if you use GitHub or have created a post on &lt;code&gt;dev.to&lt;/code&gt;), you would know how much more handy it is to write markdown files compared to writing HTML. Jekyll converts your markdown into html for you so that if you have a large website or blog, you can write everything in markdown and host it on a site that runs Jekyll (Github does that, so you can do this by hosting your blog on GitHub for example). This saves loads of time and eliminates sources of error.&lt;br&gt;
If you haven't written markdown before, here is a comparison between html and markdown for the same article:&lt;/p&gt;

&lt;p&gt;Your HTML looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;This is my header&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is my paragraph&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;This is my subheader&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;item 1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;item 2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;item 3&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;item 4&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;github.com&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;here is a link to github&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your markdown looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;#This is my header&lt;/span&gt;

This is my paragraph

&lt;span class="gu"&gt;##This is my subheader&lt;/span&gt;

-item 1
-item 2
-item 3
-item 4

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;here is a link to github&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;github.com&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you have a lot of content, this starts to make a significant difference to how much time you need to put in to create each page. So being able to convert your markdown into HTML is an extremely powerful tool for if you want to create a large blog.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt;: I haven't gone through the nitty gritty of how to set up Jekyll, this post is mainly to illustrate the power of using Jekyll. For a more in-depth tutorial, I would highly recommend this &lt;a href="https://happycoding.io/tutorials/html/jekyll"&gt;Jekyll guide from Happy Coding&lt;/a&gt;, or to go to the &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; site itself to learn form the source.&lt;/p&gt;

&lt;p&gt;Let me know if there are any important details of Jekyll you felt like I have missed out, I am always happy to be corrected :)&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>html</category>
      <category>markdown</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 tips for creating dysfunctional teams</title>
      <author>Jethro Larson</author>
      <pubDate>Thu, 09 Sep 2021 22:08:49 +0000</pubDate>
      <link>https://dev.to/jethrolarson/making-dysfunctional-teams-1lci</link>
      <guid>https://dev.to/jethrolarson/making-dysfunctional-teams-1lci</guid>
      <description>&lt;p&gt;There are so many blog articles showing how to make teams more effective but what if you need your team or organization to go belly-up or grind productivity to a halt? This guide will give you concrete strategies for making sure that success is a distant memory.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-find-the-weakest-links"&gt;
  &lt;/a&gt;
  1. Find the Weakest Links
&lt;/h1&gt;

&lt;p&gt;Whenever something goes wrong make sure that one individual receives a majority of the blame. That person should be one of the individual contributors. While it may seem more effective to blame a manager for the mistakes of their team as that could cause loss of faith in management, the effect of dragging a worker through the coals will be more widespread. Quickly workers will learn that mistakes aren't learning opportunities but career-destroying disasters that they must protect themselves from at all costs. Workers also learn that their managers don't have their back when mistakes happen no worry there.&lt;/p&gt;

&lt;p&gt;Within a couple sprints everyone will be covering their asses, and spending a lot of time making sure everyone knows how careful and productive they are. They'll also jump at the smallest provocation to disclaim responsibility for any minor infraction and will sabotage each other to avoid the Eye of Sauron.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-make-strong-commitments"&gt;
  &lt;/a&gt;
  2. Make Strong Commitments
&lt;/h1&gt;

&lt;p&gt;One of the best ways to harm a team long term is to develop a crunch-culture and the best way to do that is to make time-bound promises to stakeholders before work has even begun. Commit to public demos at industry conferences, set drop-dead dates that really mean something. Make plans that fully utilize all your available funding so that the only way that the team even partially succeeds is by everything going impossibly perfect or by working hellacious overtime.&lt;/p&gt;

&lt;p&gt;When the team starts getting progress back into green make sure to set "stretch goals" that affect management bonuses to keep that heat cranked.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-reward-the-heroes"&gt;
  &lt;/a&gt;
  3. Reward the Heroes
&lt;/h1&gt;

&lt;p&gt;This one is unintuitive but works really well. You may think that people that are super-smart and working crazy hours to bail the team out of near-miss disasters are your worst enemy, but remember that your goal is to prevent sustained engineering. Lavish praise and bonuses on these champions and everyone else will realize that success doesn't come from sustainable practices but from letting things fall apart and clawing a janky success from the jaws of defeat.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-make-the-data-work-for-you"&gt;
  &lt;/a&gt;
  4. Make the Data Work for You
&lt;/h1&gt;

&lt;p&gt;Even though data-driven decision-making is a hallmark of effective organizations, all you have to do to flip this around is massage the data a little. You'll find with very little effort that with careful analysis and omission you can justify any claim or project you want to. To pull this off however you need to horde your data and only give others the graphs that you curate. An alternative approach is cast doubt on any existing metrics you don't like. When your audience is confused that's the perfect place to insert your opinion. Then everyone in the room will fight over whose opinion is right and your job is done.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-make-the-workplace-competitive"&gt;
  &lt;/a&gt;
  5. Make the Workplace Competitive
&lt;/h1&gt;

&lt;p&gt;This approach is easy to defend as being based on Charles Darwin's natural selection. Take your workforce and separate it into as many small groups as you can, and make the org tree really deep. Then have have competition reign at every level. ICs should compete with each other for fixed bonuses and promotions. Managers should compete with each other for headcount and be paid relative to the number of people working for them so they're encouraged to scale their teams massively. Project managers have to fight for schedule time and development resources for every project. Make sure that everyone learns that the best way to succeed is to take the biggest slice of the pie.&lt;/p&gt;

</description>
      <category>management</category>
      <category>satire</category>
    </item>
    <item>
      <title>Fazendo ci√™ncia de dados com docker</title>
      <author>Edinei Cavalcanti</author>
      <pubDate>Thu, 09 Sep 2021 21:22:05 +0000</pubDate>
      <link>https://dev.to/edinei_dev/fazendo-ciencia-de-dados-com-docker-1l3i</link>
      <guid>https://dev.to/edinei_dev/fazendo-ciencia-de-dados-com-docker-1l3i</guid>
      <description>&lt;p&gt;Supondo que voc√™ j√° tenha &lt;a href="https://docs.docker.com/get-docker/"&gt;docker instalado e devidademente configurado seja Windows/Linux/Mac&lt;/a&gt;. Temos uma &lt;a href="https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html"&gt; documenta√ß√£o sobre as imagens do Jupyter&lt;/a&gt; se quiser uma outra configura√ß√£o vamos usar a &lt;code&gt;jupyter/datascience-notebook&lt;/code&gt; mas temos diversas outras.&lt;/p&gt;

&lt;p&gt;Usando o &lt;code&gt;docker run&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run --rm -p 10000:8888 -e JUPYTER_ENABLE_LAB=yes -v .\my-notebook:/home/jovyan/work jupyter/datascience-notebook
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fobdq6r4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yo48b43mkv8sis8ytgo6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fobdq6r4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yo48b43mkv8sis8ytgo6.png" alt="Veja que o token do jupyter ser√° exposto e ser√° usado a porta 8888 mas vamos usar 10000"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ficando no final &lt;a href="http://127.0.0.1:10000/?token=6f2fa7151f0fa43cd17af52a830bb76114e20e9b3cd31078"&gt;http://127.0.0.1:10000/?token=6f2fa7151f0fa43cd17af52a830bb76114e20e9b3cd31078&lt;/a&gt; ao acessar:&lt;/p&gt;

&lt;p&gt;Imagem do launcher do jupyter&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JevwLVww--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdndhbqjt3wgv98w0ysz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JevwLVww--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdndhbqjt3wgv98w0ysz.png" alt="Imagem do launcher do jupyter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos selecionar a pasta work&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_-iis-sG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jgpbrrkjgf8qvz0nj5j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_-iis-sG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jgpbrrkjgf8qvz0nj5j.png" alt="Vamos selecionar a pasta work"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E escolher Python 3 no Notebook&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QPhPWxsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ovbs4i5bib0ll2l9c42.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QPhPWxsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ovbs4i5bib0ll2l9c42.png" alt="E escolher Python 3 no Notebook"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Escrever &lt;code&gt;!python ‚Äî version&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y6EHoHWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h8jkexyesg3ahdapk64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y6EHoHWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h8jkexyesg3ahdapk64.png" alt="Escrever !python ‚Äî version"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos notar que o nosso arquivo Untitled.ipynb do jupyter foi para nosso host.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BFnI6Unx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szlhedvngezcqiu6hb7h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BFnI6Unx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szlhedvngezcqiu6hb7h.png" alt="Vamos notar que o nosso arquivo Untitled.ipynb do jupyter foi para nosso host."&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>devops</category>
      <category>datascience</category>
    </item>
    <item>
      <title>September 9th, 2021: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Thu, 09 Sep 2021 21:20:37 +0000</pubDate>
      <link>https://dev.to/nickytonline/september-9th-2021-what-did-you-learn-this-week-184i</link>
      <guid>https://dev.to/nickytonline/september-9th-2021-what-did-you-learn-this-week-184i</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1xpm1nTQiRL96Di3Q6/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1xpm1nTQiRL96Di3Q6/giphy.gif" alt="A picture it a dog waving their paw with the caption ‚ÄúLearning, cool at school or at home‚Äù"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>weeklylearn</category>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Leveraging JS Proxies for the DOM</title>
      <author>Nathan Pham</author>
      <pubDate>Thu, 09 Sep 2021 21:06:03 +0000</pubDate>
      <link>https://dev.to/phamn23/leveraging-js-proxies-for-the-dom-3ppm</link>
      <guid>https://dev.to/phamn23/leveraging-js-proxies-for-the-dom-3ppm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;A recurring problem for many front-end developers is choosing what framework to use. Maybe your mind skipped to React, or the new star, Vue. Or maybe you're into Ember and Mithril. No one cares about Angular though. We all know it's a bloated relic living somewhere in the Great Pacific Garbage Patch.&lt;/p&gt;

&lt;p&gt;It's strange how we always skip over to &lt;code&gt;create-[framework]-app&lt;/code&gt; or another boilerplate template without noticing the extreme amounts of overhead. Relatively simple side or personal projects don't require a framework at all. Choosing the vanilla JS option is considerably more responsible (we're not killing the client's poor Nokia browser with our 10 GB library) and requires no extensive bundler configuration. The browser was built for JavaScript, so use JavaScript.&lt;/p&gt;

&lt;p&gt;Frameworks were created to boost productivity, modularize elements into reusable components, provide a novel way of manipulating data, ensure faster rendering through the virtual DOM, and supply a well supported developer toolset. We're missing out on a lot if we pick vanilla. Using native JS APIs is also an absolute nightmare. Who wants to write &lt;code&gt;document.querySelectorAll&lt;/code&gt; 50 times? &lt;/p&gt;

&lt;p&gt;Regardless, there isn't a need to re-invent the wheel. Although it may seem cool to have a functioning SPA, what you're really doing is writing another hundred lines of code or importing a heavy library with extensive polyfills just to rewrite the JS history API. It's not like the user cares if the url changed without refreshing the page. It's "smooth", but not if the page can't even load because of all of the crap you packed into it. Even Webpack can't save your file sizes now. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-elements"&gt;
  &lt;/a&gt;
  Creating Elements
&lt;/h2&gt;

&lt;p&gt;There are several ways to tackle vanilla JS's lack of maintainability and ease of use. You could use this simple function I described in an &lt;a href="https://dev.to/phamn23/making-a-very-simple-jquery-clone-49dj"&gt;earlier post on jQuery&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, querying elements is not the only tool we need as developers. Oftentimes, it's creating the elements that's the problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create a div element&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// create a paragraph element &amp;amp; fill it with "Hello World!"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// append nodes to div and then to the body element&lt;/span&gt;
&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vanilla JS gets really ugly. Really fast. Feeling the itch to go back to React yet?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#proxies"&gt;
  &lt;/a&gt;
  Proxies
&lt;/h2&gt;

&lt;p&gt;Here's where the proxies come in. Proxies in JS allow you to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"&gt;"intercept and redefine fundamental operations for that object"&lt;/a&gt;. As a bonus, it's supported by all the major browsers. Obviously, now that IE is dead, we don't have to worry about it anymore. Kinda like Angular!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I highly recommend reading the first few paragraphs of the MDN docs I linked above.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can create proxies with the built-in &lt;code&gt;Proxy&lt;/code&gt; class. It takes two arguments: a target object and a handler function that indicates how the target should be manipulated. &lt;/p&gt;

&lt;p&gt;I like to think proxies are useful for "listening" to when a property in an object is accessed or changed. For example, you could extend arrays to support negative indexes, similar to Python.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allowNegativeIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;allowNegativeIndex&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dom-manipulation"&gt;
  &lt;/a&gt;
  DOM Manipulation
&lt;/h2&gt;

&lt;p&gt;I randomly stumbled upon this &lt;a href="https://twitter.com/mfandl/status/1421073961652310019"&gt;code snippet&lt;/a&gt; when I was scrolling through my Twitter feed. I can't explain how genius this is. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_JR7pVTf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlsuc3aui1hueuzjlgtf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_JR7pVTf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlsuc3aui1hueuzjlgtf.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Using a proxy to create elements! While this clearly applies to Hyperapp (a &lt;a href="https://github.com/jorgebucaran/hyperapp"&gt;"tiny framework for building hypertext applications"&lt;/a&gt;), there's no reason why this couldn't apply to vanilla JS. &lt;/p&gt;

&lt;p&gt;Imagine writing this instead of &lt;code&gt;document.createElement&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; 
    &lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is a paragraph&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="cm"&gt;/*
&amp;lt;div&amp;gt;
    &amp;lt;h1 id="test"&amp;gt;Hello World&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;This is a paragraph&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It doesn't require JSX or a fancy framework, and using functions based on the literal HTML5 tag actually makes a lot of sense. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;

&lt;p&gt;You can find a working demo on &lt;a href="https://codepen.io/nathan-pham/pen/qBjrYVw?editors=0110"&gt;Codepen&lt;/a&gt; and &lt;a href="https://testing-h.phamn23.repl.co/"&gt;Replit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First we need to have some logic to easily create elements. I'll call it &lt;code&gt;h&lt;/code&gt;. &lt;code&gt;h&lt;/code&gt; should accept three arguments: an HTML tag, a list of attributes/event listeners that should be applied to the element, and an array of children that should be appended to the element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// create the element&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// loop through the props&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// if the prop starts with "on" then add it is an event listener&lt;/span&gt;
    &lt;span class="c1"&gt;// otherwise just set the attribute&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;on&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// loop through the children&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// if the child is a string then add it as a text node&lt;/span&gt;
    &lt;span class="c1"&gt;// otherwise just add it as an element&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// return the element&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could use this function as-is and immediately see some  benefits.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; 
    &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is much more developer friendly, but we can still make it better with proxies. Let's create a proxy called &lt;code&gt;elements&lt;/code&gt;. Every time we access a property from &lt;code&gt;elements&lt;/code&gt;, we want to return our newly created &lt;code&gt;h&lt;/code&gt; function using the property as the default tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
      &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can write stuff that looks kinda like HTML directly in our vanilla JS. Amazing isn't it?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt;
  &lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is a paragraph&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bruh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click me&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// this also works but destructuring is cleaner&lt;/span&gt;
&lt;span class="c1"&gt;// elements.h1({}, "")&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#state-management"&gt;
  &lt;/a&gt;
  State Management
&lt;/h2&gt;

&lt;p&gt;Proxies also have a &lt;code&gt;set&lt;/code&gt; method, meaning you can trigger an action (ie: a re-render) when a variable is changed. Sound familiar? I immediately thought of state management. In a brief attempt to marry proxies with web components, I went on to build a library called &lt;a href="https://github.com/nathan-pham/stateful-components"&gt;stateful components&lt;/a&gt;. Proxy-based state (Vue) and "functional" elements (Hyperapp) aren't a new idea. If you're looking for something a little more fleshed out you should give &lt;a href="https://hyperapp.dev"&gt;Hyperapp&lt;/a&gt; a go. I know this article railed on frameworks a lot, but that doesn't mean I don't recognize their utility and purpose in a given context. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing"&gt;
  &lt;/a&gt;
  Closing
&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed this short article. A lot of thanks to &lt;a href="https://twitter.com/mfandl"&gt;Matej Fandl&lt;/a&gt; for discovering this awesome hack, and I look forward to seeing what you build with proxies!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>proxy</category>
      <category>dom</category>
    </item>
  </channel>
</rss>
