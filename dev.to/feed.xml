<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I built my app in React, React Native and NextJS. Lessons learned.</title>
      <author>Ash G</author>
      <pubDate>Thu, 24 Jun 2021 19:47:53 +0000</pubDate>
      <link>https://dev.to/ash_grover/i-built-my-app-in-react-react-native-and-nextjs-lessons-learned-3f38</link>
      <guid>https://dev.to/ash_grover/i-built-my-app-in-react-react-native-and-nextjs-lessons-learned-3f38</guid>
      <description>&lt;p&gt;I developed an offline-first personal Kanban app called &lt;a href="https://brisqi.com"&gt;Brisqi&lt;/a&gt; and launched it for 5 different platforms. I started this project with 2 purposes - to learn React and to build my own offline Kanban app as I always wanted one. I've been working on Brisqi since June last year.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#heres-the-tech-stack-i-used-in-case-youre-curious"&gt;
  &lt;/a&gt;
  Here's the tech stack I used in case you're curious:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ReactJS + BlueprintJS + custom styling for desktop app.&lt;/li&gt;
&lt;li&gt;React Native + React Native elements + custom styling for Android/iOS App.&lt;/li&gt;
&lt;li&gt;NextJS + BulmaCSS for the website.&lt;/li&gt;
&lt;li&gt;Firebase Auth for authentication + Firestore for the database.&lt;/li&gt;
&lt;li&gt;Google cloud functions - to handle backend operations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Electron framework was the obvious choice to make it cross-platform as it has good eco-system around it so I went ahead with it as the underlying framework.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#following-are-the-things-i-learned-and-followed-specific-to-react-hope-its-helpful-to-you"&gt;
  &lt;/a&gt;
  Following are the things I learned and followed specific to React, hope its helpful to you:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Start with Context API for state management if your app is small, learn how it works. This will get you use-to the reducer pattern in React. &lt;strong&gt;Don't worry about the performance in the beginning&lt;/strong&gt;, React is smart enough and optimizes rendering for you. Optimize for performance or re-renders only if performance becomes an issue. And only move to Redux if you feel your app needs more than a simple state management.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Learn Immer and how it works. It's a great library  to &lt;strong&gt;modify state in an immutable way&lt;/strong&gt;. It makes life so much easier by modifying the "draft" of a state directly without the use of spread operators if the state is made of nested objects. It also comes in handy when implementing reducers with Context API. &lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you move to Redux, use &lt;strong&gt;Redux Toolkit&lt;/strong&gt;. It's a great toolkit made by the same people who made/maintain Redux.&lt;/p&gt;

&lt;p&gt;It states following on their &lt;a href="https://redux.js.org/redux-toolkit/overview"&gt;website&lt;/a&gt;:&lt;br&gt;
&lt;em&gt;"Redux Toolkit is our official, opinionated, batteries-included toolset for efficient Redux development. It is intended to be the standard way to write Redux logic, and we strongly recommend that you use it."&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;This one's subjective I feel. Learn how to use Functional Components and Hooks effectively. All my apps are written using Functional components and Hooks. I personally feel they are &lt;strong&gt;easier to read and understand&lt;/strong&gt;, it certainly helps in avoiding the need of HOC or render props which is a plus for me. If you're starting new projects, start using Functional components and Hooks.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Optimizing performance in React Native can be a tricky thing to do if you have lot of data to display. If you're using lists, use FlatList instead of iterating over values using map function or similar. Using Redux here can be beneficial to you here so you can avoid unnecessary re-renders. Remember, in Context API, &lt;strong&gt;using useContext within a component will re-render that component and child components everytime unless you use React.memo&lt;/strong&gt; on child components. Check out this Github &lt;a href="https://github.com/facebook/react/issues/15156"&gt;link&lt;/a&gt; to learn more. In Redux, accessing part of state using useSelector hook prevents re-rendering if that part hasn't changed. &lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Speaking of unnecessary re-renders, learn how to use &lt;strong&gt;React.memo(), useCallback() and useMemo()&lt;/strong&gt; effectively. Learn them, understand them and use them to avoid re-renders if performance becomes a problem. If you're using Redux, learn about &lt;strong&gt;Reselect&lt;/strong&gt; library to create memoized selector functions. All of this helped me a lot in improving performance of Brisqi mobile app. If you're developing on iOS first, you might not see performance issues immediately, test it on Android. In my personal experience, an app written in React Native performs better on iOS than Android. I go by this rule of thumb, if it's performant on Android, it probably performs equally well or better on iOS, but I still test thoroughly on both platforms.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Break components into smaller components if necessary&lt;/strong&gt;. Smaller components are re-usable, easier to work with when using React.memo(), easier to manage state in them and code is easier to read and maintain when you come back to it after a couple of months.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Use third-party utility libraries sparingly&lt;/strong&gt;. Use them if you think you cannot reproduce that functionality on your own "reliably". For example, I wrote my own Keyboard avoiding/aware view from scratch because - 1) I could simplify it, 2) tweak it according to my needs , 3) adapt it for both Android and iOS platforms and 4) I'd avoid external dependency. I'm not saying that other solutions are not good enough, they might be and some are, but less dependency = more stability because you know the functionality in and out. &lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;For styling/convention, &lt;strong&gt;be consistent&lt;/strong&gt; with whatever you pick. Airbnb style guide can be a good starting point, however I don't follow everything they say. For example - I disagree with them on the usage of single and double quotes. I use double quotes everywhere to be consistent where as they use both single quotes and double quotes.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Keep things simple&lt;/strong&gt;, don't over-complicate your architecture. Add things as you go along. Similarly, don't prematurely optimize for performance, do it when it becomes an issue.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;NextJS is for websites or multi-page apps and React is for single page apps. I personally don't try to adapt one into another. Makes things easier that way.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Keep refactoring&lt;/strong&gt; as you find out better approaches of doing things. It's part of the learning process.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Keep learning, don't stop and share your knowledge with others.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Links:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow me on &lt;a href="https://twitter.com/ash_grover"&gt;Twitter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://brisqi.com"&gt;Brisqi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Getting started with React Cosmos</title>
      <author>Matt Angelosanto</author>
      <pubDate>Thu, 24 Jun 2021 19:18:32 +0000</pubDate>
      <link>https://dev.to/logrocket/getting-started-with-react-cosmos-50mn</link>
      <guid>https://dev.to/logrocket/getting-started-with-react-cosmos-50mn</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/elizabethamaechi/"&gt;Elizabeth Amaechi&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;One of the many selling points of React is that users can build components and reuse them repeatedly within a specific codebase. You can take this feature further with the help of the React Cosmos developer tool.&lt;/p&gt;

&lt;p&gt;React Cosmos is used for building isolated and scalable React components. It lets you create a sole component for your React application. You can consider different use cases as well as different design patterns when making use of React Cosmos, which will allow you to create very versatile, isolated components that fit many other conditions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-using-react-cosmos"&gt;
  &lt;/a&gt;
  Benefits of using React Cosmos
&lt;/h2&gt;

&lt;p&gt;React Cosmos works by making use of component features. The sum of these component features is what makes up your component library. This is then rendered on a UI for easy tracking. A major benefit of using &lt;a href="https://reactcosmos.org/"&gt;React Cosmos&lt;/a&gt; is that it can scan any of your React projects and let you render the components within each of them, with any combination of props or in any state.&lt;/p&gt;

&lt;p&gt;In this section, we’ll go over some of the many benefits of using React Cosmos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reusable-component-creation"&gt;
  &lt;/a&gt;
  Reusable component creation
&lt;/h3&gt;

&lt;p&gt;As stated earlier, React Cosmos takes the reusability benefits of &lt;a href="https://blog.logrocket.com/tag/react/"&gt;React&lt;/a&gt; to the next level, allowing for the creation of isolated and reusable components. This gives you more room to create a robust architecture while preventing you from having to rewrite an already defined UI.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ui-sharing-across-different-projects"&gt;
  &lt;/a&gt;
  UI sharing across different projects
&lt;/h3&gt;

&lt;p&gt;In addition to reusing a UI within a given project, React Cosmos allows for the reusability of a component across various projects in your portfolio. This is really helpful in creating solid and uniform branding across your project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easy-debugging"&gt;
  &lt;/a&gt;
  Easy debugging
&lt;/h3&gt;

&lt;p&gt;It is much easier to identify and fix errors in your application when you use React Cosmos because it isolates components into individual units, rather than forces you to work with non-isolated components. This makes development much easier and faster because it’s much easier to figure out your error sources.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-and-publish-your-component-library"&gt;
  &lt;/a&gt;
  Build and publish your component library
&lt;/h3&gt;

&lt;p&gt;You can make any of your React Cosmos components publicly available for your coworkers or anyone on the internet. This can come in handy should you decide to build or launch your own component library for public use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#realtime-external-api-mocking"&gt;
  &lt;/a&gt;
  Real-time external API mocking
&lt;/h3&gt;

&lt;p&gt;Users can see the current state of their application in real-time by mocking external APIs. This makes development faster and can also come in handy during debugging.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-react-cosmos"&gt;
  &lt;/a&gt;
  Installing React Cosmos
&lt;/h2&gt;

&lt;p&gt;React Cosmos can be used on any React or React Native project, but for this article, we will focus on React. Make sure that you’ve &lt;a href="https://blog.logrocket.com/getting-started-with-create-react-app"&gt;installed your React project&lt;/a&gt; beforehand with the use of &lt;code&gt;npx create-react-app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, let’s install React Cosmos in our React project using either npm (Node Package Manager):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;--D&lt;/span&gt; react-cosmos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or Yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; react-cosmos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can confirm that installation is successful by checking the &lt;code&gt;package.json&lt;/code&gt; file in your React project.&lt;/p&gt;

&lt;p&gt;After installation, the next step is to create a &lt;code&gt;package.json&lt;/code&gt; script in your application. This will enable you to start your Cosmos project. Include the following code under the script section of your &lt;code&gt;package.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"cosmos"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cosmos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"cosmos:export"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cosmos-export"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your whole &lt;code&gt;package.json&lt;/code&gt; file should look as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"reactcosmos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"private"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@testing-library/jest-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^5.12.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@testing-library/react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^11.2.7"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@testing-library/user-event"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^12.8.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react-scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"4.0.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"web-vitals"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.1.2"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts start"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eject"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react-scripts eject"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"cosmos"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cosmos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"cosmos:export"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cosmos-export"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"eslintConfig"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"react-app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"react-app/jest"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"browserslist"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"production"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;0.2%"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"not dead"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"not op_mini all"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"development"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"last 1 chrome version"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"last 1 firefox version"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"last 1 safari version"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react-cosmos"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^5.6.2"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s proceed to start our application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#launching-our-react-app-with-react-cosmos"&gt;
  &lt;/a&gt;
  Launching our React app with React Cosmos
&lt;/h2&gt;

&lt;p&gt;Run the below command within your terminal:&lt;/p&gt;

&lt;p&gt;Using npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run cosmos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, using Yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn cosmos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should be prompted to visit &lt;code&gt;localhost:5000&lt;/code&gt; to view your component libraries. You won’t see any components there yet because we haven‘t built any.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oe9uCYiL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/empty-component-library.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oe9uCYiL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/empty-component-library.png" alt="Your empty component library"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you’re faced with an error message, you should do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Create a file called &lt;code&gt;babel.config.js&lt;/code&gt; and update its content with the code below:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="na"&gt;presets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@babel/preset-env&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}}],&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@babel/preset-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}}]&lt;/span&gt; &lt;span class="c1"&gt;// add this&lt;/span&gt;
       &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt; Create another file called &lt;code&gt;postcss.config.js&lt;/code&gt; and update its content as so:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should fix any Babel or PostCSS issues. If the error persists, then you can read through the message and try to troubleshoot or browse the error message on your favorite browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-our-first-react-component"&gt;
  &lt;/a&gt;
  Building our first React component
&lt;/h2&gt;

&lt;p&gt;To build our first component, we need to create a fixture. Fixture files usually contain only one default export — either a React component or a React node. To create one, we need to add &lt;code&gt;.fixture&lt;/code&gt; to the name of the file containing our component — we’ll use &lt;code&gt;main.fixture.js&lt;/code&gt;. This way, React Cosmos can easily track it.&lt;/p&gt;

&lt;p&gt;Proceed to create a file named &lt;code&gt;button.fixture.jsx&lt;/code&gt; within the &lt;code&gt;src&lt;/code&gt; folder of your React application. The next step is to update the file with the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// button.fixture.jsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello, World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hurray! You just created your first isolated component using React Cosmos. To confirm this, proceed to &lt;code&gt;localhost:5000&lt;/code&gt; again, where you should see your first component listed under &lt;strong&gt;All Fixtures&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e0MicGLx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/first-component-created.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e0MicGLx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/first-component-created.png" alt="Your first component has been created"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#updating-your-react-components"&gt;
  &lt;/a&gt;
  Updating your React components
&lt;/h2&gt;

&lt;p&gt;Now that we have successfully created our first component, we can proceed to update it. In this section, we’ll build a button component. Proceed to update the content of our &lt;code&gt;button.fixture.jsx&lt;/code&gt; file as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./button.fixture.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; Hey, Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we did above is create a button tag and linked our yet-to-be-created CSS stylesheet. Now, create another file called &lt;code&gt;button.fixture.css&lt;/code&gt; for our button component styling. Update the content of the new file as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;teal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will style the newly-created button. You can once again proceed to &lt;code&gt;localhost:5000&lt;/code&gt; to see the changes we made to our component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aOVm4FGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/new-button-changes.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aOVm4FGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/new-button-changes.png" alt="Your new button with changes in the component library"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have successfully created and updated our isolated button component! It can now be used for our different applications. As you create more components, they will show up within your pre-rendered dashboard for viewing.&lt;/p&gt;

&lt;p&gt;Note that fixture files must be located within the &lt;code&gt;src&lt;/code&gt; folder of your React application. You can create a fixture either by adding &lt;code&gt;.fixture&lt;/code&gt; to your filename or creating a &lt;code&gt;__fixtures__&lt;/code&gt; folder and placing all your fixture files within it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multifixture-files"&gt;
  &lt;/a&gt;
  Multi-fixture files
&lt;/h2&gt;

&lt;p&gt;It can be challenging to export more than one component from a single fixture file, especially when you allow for just one default export. You can walk around this issue by placing your components in the form of an &lt;code&gt;object&lt;/code&gt;, as shown below; this will enable you to export multiple components with one fixture file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PrimaryButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;PrimaryButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="na"&gt;primaryDisabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PrimaryButton&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;PrimaryButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="na"&gt;secondary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SecondaryButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;SecondaryButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="na"&gt;secondaryDisabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SecondaryButton&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;SecondaryButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;React Cosmos is an excellent way to create an isolated component for your current or future React application, particularly as it comes easy-to-use and with swift debugging, among other benefits. Try out React Cosmos for easy and faster development the next time you’re building components!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#full-visibility-into-production-react-apps"&gt;
  &lt;/a&gt;
  Full visibility into production React apps
&lt;/h2&gt;

&lt;p&gt;Debugging React applications can be difficult, especially when users experience issues that are difficult to reproduce. If you’re interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;try LogRocket&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="The LogRocket Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your React app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.&lt;/p&gt;

&lt;p&gt;The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.&lt;/p&gt;

&lt;p&gt;Modernize how you debug your React apps — &lt;a href="https://www2.logrocket.com/react-performance-monitoring"&gt;start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Using Hotwire and Rails to build a live commenting system</title>
      <author>David Colby</author>
      <pubDate>Thu, 24 Jun 2021 19:17:34 +0000</pubDate>
      <link>https://dev.to/davidcolbyatx/using-hotwire-and-rails-to-build-a-live-commenting-system-aj9</link>
      <guid>https://dev.to/davidcolbyatx/using-hotwire-and-rails-to-build-a-live-commenting-system-aj9</guid>
      <description>&lt;p&gt;Today we're exploring &lt;a href="https://hotwire.dev/"&gt;Hotwire&lt;/a&gt;, a new-old way of building web applications by sending HTML instead of JSON over the wire.&lt;/p&gt;

&lt;p&gt;We'll learn how Hotwire works with Ruby on Rails by building a simple application that allows users to leave comments on a project and see those comments in real-time, without requiring full page turns. &lt;/p&gt;

&lt;p&gt;This guide presents an alternative approach to &lt;a href="https://www.colby.so/posts/building-a-simple-commenting-form-with-stimulus-js-and-rails-6"&gt;a guide&lt;/a&gt; I wrote last year which guides you through creating a similar experience using Stimulus. Either approach is valid and works well. The approach presented today presents a way of delivering the experience without writing any JavaScript code, and should feel very natural for any Ruby on Rails developer.&lt;/p&gt;

&lt;p&gt;Here is what it will look like when we are finished. It won't be pretty, but it will work and we won't write a single line of JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Da29t68i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92hbzfvc7woykf85ba4b.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Da29t68i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92hbzfvc7woykf85ba4b.gif" alt="A screen recording of a user typing in a comment in a text input and the comment being added to a list of comments"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To accomplish this, we will start with a new Rails 6.1 application, install Hotwire in the application, and then walk through the basics of adding Hotwire to our views and controllers.&lt;/p&gt;

&lt;p&gt;I'm writing this assuming that you are comfortable with the basics of Ruby on Rails development and that you've never used Hotwire before. &lt;/p&gt;

&lt;p&gt;You can find the complete source code for this tutorial &lt;a href="https://github.com/DavidColby/hotwire-comments-demo"&gt;on Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's dive in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-our-project"&gt;
  &lt;/a&gt;
  Set up our project
&lt;/h2&gt;

&lt;p&gt;To get started we will create a new Rails application and scaffold up a Project resource to build our commenting system against. While you can work from an existing application of your own, you will find this guide easier to follow if you start from scratch along with me.&lt;/p&gt;

&lt;p&gt;First, run these console comamnds to create and setup our Rails app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails new hotwire-comments &lt;span class="nt"&gt;-T&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;hotwire-comments
rails g scaffold Project name:string
rails g model Comment body:text project:references
rails db:migrate
rails s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your browser, head to &lt;a href="http://localhost:3000/projects"&gt;http://localhost:3000/projects&lt;/a&gt; and create a project. We'll use this project as we build the commenting system.&lt;/p&gt;

&lt;p&gt;Once that's done, open the application's code in your favorite editor and add &lt;code&gt;has_many :comments&lt;/code&gt; to &lt;code&gt;app/models/project.rb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, display comments on the project show page by updating &lt;code&gt;app/views/projects/show.html.erb&lt;/code&gt; with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- app/views/projects/show.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"notice"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;notice&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Name:&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'Edit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edit_project_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt; |
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'Back'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;projects_path&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add a few comments in the rail console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Project.first.comments &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="sh"&gt;.create(body: "Hotwire comments are coming soon!")
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wonderful. &lt;/p&gt;

&lt;p&gt;If you've followed along successfully so far, when you visit &lt;a href="http://localhost:3000/projects/1"&gt;http://localhost:3000/projects/1&lt;/a&gt; you should see something that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FKIpo4cy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6od0rpez04o0zp6ckit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FKIpo4cy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6od0rpez04o0zp6ckit.png" alt="A screenshot of a page that shows the name of a project and a comment entered by a user"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we're ready to install Hotwire and start learning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-hotwire"&gt;
  &lt;/a&gt;
  Installing Hotwire
&lt;/h2&gt;

&lt;p&gt;To install Hotwire, first add the hotwire-rails gem to your Gemfile by running this commend in your console or by manually updating your Gemfile and running &lt;code&gt;bundle install&lt;/code&gt; in your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bundle add hotwire-rails
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the gem is added, run the installer from your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails hotwire:install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the installer runs, restart your rails server or you may encounter some undefined method errors later in this guide.&lt;/p&gt;

&lt;p&gt;Now that we have Hotwire installed, let's start with getting comments to render in real time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-comments-stream"&gt;
  &lt;/a&gt;
  Adding a comments stream
&lt;/h2&gt;

&lt;p&gt;Hotwire as we're using it relies on frameworks designed and maintained by the Basecamp team. One of those frameworks is &lt;a href="https://turbo.hotwire.dev/"&gt;Turbo&lt;/a&gt;. Turbo is a set of "complimentary techniques for speeding up page changes and form submissions". &lt;/p&gt;

&lt;p&gt;For our purposes, we'll be interested in two key components of the Turbo package, &lt;a href="https://turbo.hotwire.dev/reference/frames"&gt;Turbo Frames&lt;/a&gt; and &lt;a href="https://turbo.hotwire.dev/reference/streams"&gt;Turbo Streams&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A Turbo Stream delivers page changes to the browser over Websocket. By adding the Hotwire Rails project to our application, we gain access to a set of helper methods that make working with Turbo Streams simple. &lt;/p&gt;

&lt;p&gt;Let's see how this works by updating our project show page as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- app/views/projects/show.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"notice"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;notice&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Name:&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_stream_from&lt;/span&gt; &lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:comments&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;dom_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_comments"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;created_at: :desc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'Edit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edit_project_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt; |
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'Back'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;projects_path&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's walk through the changes here one-by-one. &lt;/p&gt;

&lt;p&gt;First, we add a turbostream that listens for broadcasts on the comments channel for our Project. This stream is how we subscribe to comment updates for our project. Note that because we’re working with a nested resource here (comments belong to a project), our stream subscribes to comments for just the current project.&lt;/p&gt;

&lt;p&gt;We also add an id to the parent div of our comments list. This id is used to identify where to add broadcasted comments to the DOM. If this id is not present or does not match the id in the broadcast, no DOM updates will occur when comment changes are broadcast.&lt;/p&gt;

&lt;p&gt;Finally, we’re using a _comment partial to render each comment. That partial doesn’t exist yet, let’s add it now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;app/views/comments
&lt;span class="nb"&gt;touch &lt;/span&gt;app/views/comments/_comment.html.erb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then fill in the comment partial with the below content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- app/views/comments/_comment.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;dom_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that here, we're ensuring each comment has a unique id in the DOM, which ensures that new comments are properly inserted into the DOM.&lt;/p&gt;

&lt;p&gt;Our last step towards getting our stream setup and comments prepending in real time is to add a callback to the comment model. &lt;/p&gt;

&lt;p&gt;When this callback runs, the newly created comment will be broadcast on the project_comments stream that our project#show page is now subscribed to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="c1"&gt;# app/models/comment.rb&lt;/span&gt;
&lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;ActionView&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;RecordIdentifier&lt;/span&gt;

&lt;span class="n"&gt;after_create_commit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;broadcast_prepend_to&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:comments&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;target: &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;dom_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_comments"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are using the &lt;code&gt;broadcast_prepend_to&lt;/code&gt; method provided by turbo-rails. There are a variety of methods that can be used to add, remove, and replace DOM content through callbacks triggered by model changes. The best place to find these methods is by reading the &lt;a href="https://github.com/hotwired/turbo-rails/blob/main/app/models/concerns/turbo/broadcastable.rb"&gt;turbo-rails code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that the &lt;code&gt;target&lt;/code&gt; value passed to &lt;code&gt;broadcast_prepend_to&lt;/code&gt; must exactly match the id set in the DOM earlier. &lt;/p&gt;

&lt;p&gt;The dom_id method used to set the broadcast channel target is not normally available in models so we include the relevant ActionView helper class in the model. This simplifies our method of broadcasting to the appropriate channel. H/T to Chris Oliver at &lt;a href="https://gorails.com/"&gt;GoRails&lt;/a&gt; for this helpful trick.&lt;/p&gt;

&lt;p&gt;With these changes in place, let's test out our stream and see how it works.&lt;/p&gt;

&lt;p&gt;Make sure you've got your project open in a web browser, and then open your Rails console and create a comment. If you've followed along successfully, immediately after you create the comment in the console, you should see the comment added to the project page open in your browser, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CDjOWDb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sgce1ezu0lpludll4o1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CDjOWDb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sgce1ezu0lpludll4o1.gif" alt="A screen recording of a user typing in a command in their terminal to add a comment. Next to the terminal, the user's web browser is open and the comment is added to the browser window after the command is run in the terminal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-comments-with-a-form"&gt;
  &lt;/a&gt;
  Adding comments with a form
&lt;/h2&gt;

&lt;p&gt;While our subscription is working great, users aren't going to add content through the Rails console. Let's finish up this tutorial by adding a form to add comments in the UI without requiring a page turn.&lt;/p&gt;

&lt;p&gt;First, let's create a partial to render our form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;app/views/comments/_form.html.erb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add the below to the form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- app/views/comments/_form.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="s2"&gt;"comment_form"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form_with&lt;/span&gt; &lt;span class="ss"&gt;model: &lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;url: &lt;/span&gt;&lt;span class="n"&gt;project_comments_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;any?&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"error_explanation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;pluralize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt; prohibited this comment from being saved:&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
          &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;full_message&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;text_field&lt;/span&gt; &lt;span class="ss"&gt;:body&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;submit&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is pretty close to a standard Rails form partial, with the added turbo_frame_tag that wraps the entire &lt;/p&gt; element. 

&lt;p&gt;This frame_tag allows us to selectively replace the content of the form partial on form submission without writing any special Javascript. &lt;/p&gt;

&lt;p&gt;Now we’ll need a controller to handle submissions from this form.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;rails g controller Comments
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Fill in the controller with the below content:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/comments_controller.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CommentsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@project&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:project_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="vi"&gt;@comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;respond_to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
        &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;turbo_stream&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;turbo_stream: &lt;/span&gt;&lt;span class="n"&gt;turbo_stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s1"&gt;'comment_form'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s1"&gt;'comments/form'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;comment: &lt;/span&gt;&lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s1"&gt;'comments/form'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;comment: &lt;/span&gt;&lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;turbo_stream&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;turbo_stream: &lt;/span&gt;&lt;span class="n"&gt;turbo_stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s1"&gt;'comment_form'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s1"&gt;'comments/form'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;comment: &lt;/span&gt;&lt;span class="vi"&gt;@comment&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s1"&gt;'comments/form'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;comment: &lt;/span&gt;&lt;span class="vi"&gt;@comment&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;comment_params&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:comment&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;permit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Our comments controller create method is a fairly standard Rails controller with one twist: the create method responds to turbo_stream requests. &lt;/p&gt;

&lt;p&gt;When a turbo_stream request is sent to this endpoint, the controller responds with a turbo_stream response to replace the comment_form DOM element with the comments/form partial, both on a successful request and a failed request. Note that, as before, the "comment_form" id in our turbo_frame needs to match the target passed to the turbo_stream.replace method. &lt;/p&gt;

&lt;p&gt;The only difference between the failure and success responses is using the existing @comment on failed responses so that errors can be rendered. On success, we set the comment local variable for the form partial to a new comment to clear out the body field on the form.&lt;/p&gt;

&lt;p&gt;To test out the error path, you can update your Comment model to validate the presence of the body field.&lt;/p&gt;

&lt;p&gt;Next, before we can create comments, we need to add the appropriate route to the routes.rb file:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/routes.rb&lt;/span&gt;

&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:projects&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:comments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="sx"&gt;%i[create]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Finally, let's display the comment form on the project show page:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- app/views/projects/show.html.erb --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"notice"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;notice&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Name:&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;partial: &lt;/span&gt;&lt;span class="s2"&gt;"comments/form"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;locals: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;comment: &lt;/span&gt;&lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_stream_from&lt;/span&gt; &lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:comments&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;dom_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_comments"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;created_at: :desc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'Edit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edit_project_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt; |
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;'Back'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;projects_path&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Refresh your project page after you update the view.&lt;/p&gt;

&lt;p&gt;If everything is set up correctly, you should see new comments added without a page turn. If you submit with the comment body left blank, you should see error messages added to the page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Da29t68i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92hbzfvc7woykf85ba4b.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Da29t68i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92hbzfvc7woykf85ba4b.gif" alt="A screen recording of a user typing in a comment in a text input and the comment being added to a list of comments"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Combining Hotwire and Rails, with a sprinkling of Stimulus for client-side interactivity is a powerful way to build performant, scalable, developer-and-user friendly web applications.&lt;/p&gt;

&lt;p&gt;While single page applications and independent frontends built with the latest JavaScript framework have their place, if you’re a small team building standard SaaS applications, I encourage you to spend time learning about Hotwire-powered applications to keep your team productive and focused on solving problems for your users, not fighting with your tech stack.&lt;/p&gt;

&lt;p&gt;Helpful Hotwire resources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://hotwire.dev/"&gt;Hotwire intro video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://turbo.hotwire.dev/handbook/introduction"&gt;Turbo handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stimulus.hotwire.dev/handbook/introduction"&gt;Stimulus handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gorails.com/episodes/hotwire-rails"&gt;GoRails Hotwire introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hotwired/turbo-rails"&gt;turbo-rails source&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks for reading! As always, get in touch if you have any questions or if I can be of any help.&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>hotwire</category>
      <category>turbo</category>
    </item>
    <item>
      <title>AzureFunBytes Episode 48 - @Azure Arc Enabled Data Services with @sqldbawithbeard</title>
      <author>Jay Gordon</author>
      <pubDate>Thu, 24 Jun 2021 19:00:42 +0000</pubDate>
      <link>https://dev.to/azure/azurefunbytes-episode-48-azure-arc-enabled-data-services-with-sqldbawithbeard-3g28</link>
      <guid>https://dev.to/azure/azurefunbytes-episode-48-azure-arc-enabled-data-services-with-sqldbawithbeard-3g28</guid>
      <description>&lt;p&gt;AzureFunBytes is a weekly opportunity to learn more about the fundamentals and foundations that make up Azure. It's a chance for me to understand more about what people across the Azure organization do and how they do it. Every week we get together at 11 AM Pacific on &lt;a href="https://cda.ms/226"&gt;Microsoft LearnTV&lt;/a&gt; and learn more about Azure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJzmXQeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z7BxBMz1--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2xzw2g664tj31jij13t.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJzmXQeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z7BxBMz1--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2xzw2g664tj31jij13t.gif" alt="AzureFunBytes animation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We've discussed &lt;a href="https://cda.ms/2cd"&gt;Azure Arc&lt;/a&gt; before with people like &lt;a href="https://cda.ms/2cf"&gt;Thomas Maurer&lt;/a&gt;, but this time we'll focus on &lt;a href="https://cda.ms/2ch"&gt;Azure Arc-Enabled Data Services&lt;/a&gt;.  Azure Arc gives you a single platform to manage all of your data services no matter where they are.  You can manage your &lt;a href="https://cda.ms/2cj"&gt;Azure Arc enabled PostgreSQL Hyperscale&lt;/a&gt; and your &lt;a href="https://cda.ms/2ck"&gt;Azure Arc enabled SQL Managed Instance&lt;/a&gt; with &lt;a href="https://cda.ms/2cm"&gt;the Arc Data Controller&lt;/a&gt;.  With Azure Arc makes it possible to run your Azure data services in your datacenter, at the edge, and in public clouds using Kubernetes and the infrastructure of your choice. You're not just limited to Azure, you can enable your data from any public cloud you may feel like using.  If you need a place to get started learning, there's tons of great documentation and even some zero to hero training with &lt;a href="https://azurearcjumpstart.io/overview/"&gt;Azure Arc Jumpstart&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This time we dip into the Microsoft MVP community and get the assistance of Data Platform, Cloud, and Datacenter MVP, &lt;a href="https://twitter.com/sqldbawithbeard"&gt;Rob Sewell&lt;/a&gt;.  Rob has done a number of presentations on how &lt;a href="https://cda.ms/2cr"&gt;Azure Arc can simplify connecting your data anywhere&lt;/a&gt; you can find online.  &lt;/p&gt;

&lt;p&gt;From Rob's bio on his blog, SQLDBAWithABeard:&lt;/p&gt;

&lt;p&gt;Rob &lt;strong&gt;was&lt;/strong&gt; a SQL Server DBA. Now he just helps people with Powershell, Azure, Automation, and Data.  He is a Cloud and Data Center MVP and a Data Platform MVP, co-leader of Data South West UK user group and PSConfEU organiser. &lt;a href="https://datasaturdays.com"&gt;One of the Admins for Data Saturdays&lt;/a&gt;. He is a proud supporter of the Data and Powershell communities. He has a fabulous beard!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Cw319V1qRRY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Our agenda includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Azure Arc-Enabled Data Services enables a single pane for your data services no matter where your data services are. &lt;/li&gt;
&lt;li&gt; Dashboards, metrics, logs built in both in Azure and wherever your cluster is&lt;/li&gt;
&lt;li&gt; Self provisioning and scaling using the tooling that you choose, Portal, ARM, Bicep, Az Cli, Azure Data Studio&lt;/li&gt;
&lt;li&gt; Its all Kubernetes so application and state (data) are taken care of for you. Data people find this part scary so it might be good for you to say that.&lt;/li&gt;
&lt;li&gt; Connected and disconnected options and use cases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So don't miss out on this session!  No need to fear the beard, let's hear what Rob has to teach us about connecting all of our data, anywhere!&lt;/p&gt;




&lt;p&gt;Learn about Azure fundamentals with me!&lt;/p&gt;

&lt;p&gt;Live stream is normally found on Twitch, YouTube, and LearnTV at 11 AM PT / 2 PM ET Thursday. You can also find the recordings here as well:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitch.tv/azurefunbytes"&gt;AzureFunBytes on Twitch&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aka.ms/jaygordononyoutube"&gt;AzureFunBytes on YouTube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UC-ikyViYMM69joIAv7dlMsA"&gt;Azure DevOps YouTube Channel&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/azurefunbytes"&gt;Follow AzureFunBytes on Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Useful Docs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cda.ms/219"&gt;Get $200 in free Azure Credit&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/243"&gt;Microsoft Learn: Introduction to Azure fundamentals&lt;/a&gt; &lt;br&gt;
&lt;a href="https://cda.ms/2cq"&gt;Microsoft Learn: Manage hybrid infrastructure with Azure Arc&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2cg"&gt;Azure Arc Overview&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2cf"&gt;AzureFunBytes Episode 42 with Thomas Maurer&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2ch"&gt;What are Azure Arc enabled data services (preview)?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2cj"&gt;What is Azure Arc enabled PostgreSQL Hyperscale?&lt;/a&gt; &lt;br&gt;
&lt;a href="https://cda.ms/2ck"&gt;Azure Arc enabled SQL Managed Instance Overview&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2cm"&gt;Create the Azure Arc data controller&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2cn"&gt;Azure Arc enabled data services&lt;/a&gt; &lt;br&gt;
&lt;a href="https://azurearcjumpstart.io/overview/"&gt;Azure Arc Jumpstart&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2cp"&gt;Azure Arc–enabled data services PREVIEW&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.apress.com/de/book/9781484267042"&gt;Azure Arc-Enabled Data Services Revealed&lt;/a&gt;&lt;/p&gt;

</description>
      <category>azure</category>
      <category>hybrid</category>
      <category>database</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Pushing and running Docker images</title>
      <author>Ujjwal Goyal</author>
      <pubDate>Thu, 24 Jun 2021 18:54:47 +0000</pubDate>
      <link>https://dev.to/importhuman/pushing-and-running-docker-images-3hmp</link>
      <guid>https://dev.to/importhuman/pushing-and-running-docker-images-3hmp</guid>
      <description>&lt;p&gt;&lt;em&gt;(This post assumes you have a DockerHub account.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the previous post, we built a Docker image. Now, we're going to "push", or upload it to DockerHub, and also see how to run it in a container!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dockerhub"&gt;
  &lt;/a&gt;
  DockerHub
&lt;/h2&gt;

&lt;p&gt;DockerHub is a library for container images. By pushing our image (with an appropriate tag), we can make our image available to others (or keep it private if we so require), or use the same image on different systems.&lt;/p&gt;

&lt;p&gt;Before we can push our image, we need to give a proper name to it. This name will include our DockerHub username, the image name, and a version tag. &lt;br&gt;
Consider a local image named "python-helloworld". We run the following command.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker tag python-helloworld importhuman/python-helloworld:v1.0.0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let's break this down. With the &lt;code&gt;docker tag&lt;/code&gt; command, we take our local image, &lt;code&gt;python-helloworld&lt;/code&gt;, and give it the name &lt;code&gt;importhuman/python-helloworld:v1.0.0&lt;/code&gt;. Here,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;importhuman&lt;/code&gt; is the name of my DockerHub account. This is needed to decide which account the image is pushed to. &lt;strong&gt;Replace this with your account name.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;python-helloworld&lt;/code&gt; is the image I want to push. This is also the name that will be given to the DockerHub repository. Replace this with the name you gave your image (see &lt;a href="https://dev.to/importhuman/writing-dockerfiles-for-python-application-ln6"&gt;previous post in this series&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;v1.0.0&lt;/code&gt; is the tag name. Tags are used to version images.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, if we run &lt;code&gt;docker images&lt;/code&gt;, we should see both our local image and the newly tagged image.&lt;/p&gt;

&lt;p&gt;(If you haven't logged in to DockerHub in the terminal, run &lt;code&gt;docker login&lt;/code&gt;, and input your username and password.)&lt;/p&gt;

&lt;p&gt;To push the image, we simply run&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker push importhuman/python-helloworld:v1.0.0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and we should have a new repository on DockerHub with our newly tagged image!&lt;/p&gt;

&lt;p&gt;To pull this image to our system, we would simply run&lt;br&gt;
&lt;code&gt;docker pull importhuman/python-helloworld:v1.0.0&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-the-image"&gt;
  &lt;/a&gt;
  Running the image
&lt;/h2&gt;

&lt;p&gt;Let's see the command to run our image in a container, and then we'll break it down.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run -d -p 8080:5000 importhuman/python-helloworld:v1.0.0&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-d&lt;/code&gt; runs the container in "detached mode". This essentially starts the container while leaving you free to run other commands in the terminal window. Without this flag (foreground mode), the terminal attaches to the process’s standard input, output, and standard error. (Source: &lt;a href="https://docs.docker.com/engine/reference/run/"&gt;Docker&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-p 8080:5000&lt;/code&gt; specifies that host port 8080 is connected to container port 5000. The container port here is 5000 as it is the default port exposed by Flask. Thus, if we open "localhost:8080" in a browser, we'll see the expected "Hello World!" output.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;importhuman/python-helloworld:v1.0.0&lt;/code&gt; is the image we want to run in a container (a local image can be used rather than the tagged version as well).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(For more information on the above explanation, or on running images in Docker containers, please &lt;a href="https://docs.docker.com/engine/reference/run/"&gt;see here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;To see more information about currently running containers, run&lt;br&gt;
&lt;code&gt;docker ps&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To stop a running container, run the command&lt;br&gt;
&lt;code&gt;docker stop &amp;lt;container-id&amp;gt;&lt;/code&gt; &lt;br&gt;
OR&lt;br&gt;
&lt;code&gt;docker stop &amp;lt;container-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You now know how to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tag Docker images&lt;/li&gt;
&lt;li&gt;push and pull Docker images from DockerHub&lt;/li&gt;
&lt;li&gt;run Docker images in containers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please feel free to ask any questions you have in the comments or on &lt;a href="https://twitter.com/ImportHuman"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>tutorial</category>
      <category>python</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Desenvolva um código melhor com Object Calisthenics</title>
      <author>Marcelo Augusto</author>
      <pubDate>Thu, 24 Jun 2021 18:35:36 +0000</pubDate>
      <link>https://dev.to/pixelwolfhq/desenvolva-um-codigo-melhor-com-object-calisthenics-efe</link>
      <guid>https://dev.to/pixelwolfhq/desenvolva-um-codigo-melhor-com-object-calisthenics-efe</guid>
      <description>&lt;h3&gt;
  &lt;a href="#o-famoso-c%C3%B3digo-hadouken"&gt;
  &lt;/a&gt;
  O famoso código Hadouken
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2KtdUBTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ord38gsx267in4ej1vk6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2KtdUBTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ord38gsx267in4ej1vk6.jpg" alt="Baixo, frente + soco = Hadouken"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;18 horas em plena sexta-feira, você doido para jogar um game e se depara com um código desse.&lt;br&gt;
A vontade é de sair gritando, mas você como uma ótimo profissional, vai refatorar o código e deixar ele brilhando o/ o/&lt;/p&gt;

&lt;p&gt;Eis que eu te apresento o Object Calisthenics&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1AdZgkFXp5Ybrj6dZ1/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1AdZgkFXp5Ybrj6dZ1/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#o-que-%C3%A9-object-calisthenics"&gt;
  &lt;/a&gt;
  O que é Object Calisthenics?
&lt;/h1&gt;

&lt;p&gt;É um conjunto de boas práticas e regras criado pelos desenvolvedores Java, mas que servem para as demais linguagens.&lt;br&gt;
Ao todo são 9 regras, vou explicar as mais simples e eficientes.&lt;/p&gt;

&lt;p&gt;Essas regras vão ajudar na manutenção do código, nos testes e até mesmo na compreensão.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#regras"&gt;
  &lt;/a&gt;
  Regras
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;OBS: A linguagem utilizada é JavaScript, mas nada impede que você aplique os conceitos em outras linguagens.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#um-n%C3%ADvel-de-identa%C3%A7%C3%A3o-por-m%C3%A9todo"&gt;
  &lt;/a&gt;
  Um nível de identação por método
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayPyramid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numberOfLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;numberOfLine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numberOfLine&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;secondIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;secondIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;secondIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;thirdIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;thirdIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;thirdIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#podemos-extrair-os-dois-la%C3%A7os-for-por-duas-fun%C3%A7%C3%B5es-separadas"&gt;
  &lt;/a&gt;
  Podemos extrair os dois laços for por duas funções separadas.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getBlankSpace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numberOfLine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentLineIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numberOfLine&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;currentLineIndex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFilledPyramid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentLineIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;currentLineIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayPyramid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numberOfLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;numberOfLine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;getBlankSpace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numberOfLine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;getFilledPyramid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#n%C3%A3o-use-else"&gt;
  &lt;/a&gt;
  Não use ELSE
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printSeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ticketCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ticketCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;ticketCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;printVipSeat&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;printBasicSeat&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fa%C3%A7a-um-retorno-antecipado"&gt;
  &lt;/a&gt;
  Faça um retorno antecipado
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printSeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ticketCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ticketCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;ticketCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;printVipSeat&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;printBasicSeat&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#benef%C3%ADcios"&gt;
  &lt;/a&gt;
  Benefícios:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Reduz a complexidade e aumenta a legibilidade do fluxo lógico&lt;/li&gt;
&lt;li&gt;Reduz a duplicação de validações mais complexas, te forçando a criar métodos para determinada validação&lt;/li&gt;
&lt;li&gt;Te força a pensar em um código mais limpo&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%A3o-use-abrevia%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Não use abreviações
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;! = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deixe-seu-c%C3%B3digo-mais-claro-uma-mudan%C3%A7a-simples-dessa-evita-que-o-seu-colega-perca-horas-tentando-adivinhar-o-que-cada-vari%C3%A1vel-faz"&gt;
  &lt;/a&gt;
  Deixe seu código mais claro, uma mudança simples dessa evita que o seu colega perca horas tentando adivinhar o que cada variável faz
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;temporary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;temporary&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;! = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;temporary&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#benef%C3%ADcios"&gt;
  &lt;/a&gt;
  Benefícios:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Revelar a intenção da variável&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://medium.com/@davidsen/clean-code-object-calisthenics-f6f4dec07c8b"&gt;Clean Code — Object Calisthenics in Javascript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://imasters.com.br/desenvolvimento/desenvolva-um-codigo-melhor-com-object-calisthenics"&gt;Desenvolva um código melhor com Object Calisthenics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/pbouillon/writing-cleaner-code-with-object-calisthenics-1ea0"&gt;Writing cleaner code with Object Calisthenics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://williamdurand.fr/2013/06/03/object-calisthenics/"&gt;Object Calisthenics&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;Quando falamos de um código limpo o que não falta é material disponível sobre o assunto. O que passei aqui foi só a ponta do ‘iceberg’, para vermos que pequenas mudanças no processo de escrita do código já podemos obter melhorias significativas na qualidade do que é produzido. Se ainda têm interesse sobre o assunto, pesquise mais sobre Object Calisthenics.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Run Scripts on websites using this simple technique</title>
      <author>BIKASH MISHRA</author>
      <pubDate>Thu, 24 Jun 2021 18:12:58 +0000</pubDate>
      <link>https://dev.to/forkbikash/run-scripts-on-websites-using-this-simple-technique-lpn</link>
      <guid>https://dev.to/forkbikash/run-scripts-on-websites-using-this-simple-technique-lpn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-bookmarklets"&gt;
  &lt;/a&gt;
  What are bookmarklets?
&lt;/h2&gt;

&lt;p&gt;A bookmarklet is a bookmark stored in a web browser that contains JavaScript commands that add new features to the browser.&lt;/p&gt;

&lt;p&gt;Developing a bookmarklet is simple and easy to use.&lt;/p&gt;

&lt;p&gt;They can even make a post request with the fetch api.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-develop-one"&gt;
  &lt;/a&gt;
  How to develop one
&lt;/h2&gt;

&lt;p&gt;Use javascript in &lt;code&gt;href&lt;/code&gt; attribute of &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags in HTML.&lt;br&gt;
An example would be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="javascript: alert('hello world');"&amp;gt;click me&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make that in HTML and drag it into your bookmarks bar, you have just added a bookmarklet to your browser. Isn't it simple?&lt;/p&gt;

&lt;p&gt;All the javascript in your bookmarklet has to be minified.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="javascript: fetch('https://api.website.com/endpoint').then((data) =&amp;gt; { alert('data'); })"&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bookmarklet can be used to modify(or filter) the content of a website.&lt;br&gt;
Below is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="javascript: document.body.innerHTML = '&amp;lt;h1&amp;gt;yeah!&amp;lt;/h1&amp;gt;' })"&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Main reason you should consider developing or using a bookmarklet is for productivity.&lt;/p&gt;

&lt;p&gt;You can find many pre-built bookmarklets on internet.&lt;/p&gt;

&lt;p&gt;I hope this helps someone out there.&lt;/p&gt;

&lt;p&gt;Don't forget to mention what you've made in the comments below!&lt;/p&gt;

</description>
      <category>bookmarklet</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>What is serverless PHP and how does it work?</title>
      <author>Carl Alexander</author>
      <pubDate>Thu, 24 Jun 2021 17:53:34 +0000</pubDate>
      <link>https://dev.to/carlalexander/what-is-serverless-php-and-how-does-it-work-4m5b</link>
      <guid>https://dev.to/carlalexander/what-is-serverless-php-and-how-does-it-work-4m5b</guid>
      <description>&lt;p&gt;Serverless computing is a new cloud computing model centred on &lt;a href="https://en.wikipedia.org/wiki/Function_as_a_service"&gt;Functions as a Service&lt;/a&gt; (FaaS). A serverless PHP application is simply a PHP application that runs on one of those serverless computing platforms. But what's so special about it, and why is there interest in using it instead of a regular server for PHP?&lt;/p&gt;

&lt;p&gt;Well, as web developers, we always have to consider where we host our code. It doesn't matter whether we're using &lt;a href="https://en.wikipedia.org/wiki/JavaScript"&gt;JavaScript&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/PHP"&gt;PHP&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Python_(programming_language)"&gt;Python&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Ruby_(programming_language)"&gt;Ruby&lt;/a&gt;. (Just to name a few.) They all need a hosting service where that code can run and render the HTML sent to the browser.&lt;/p&gt;

&lt;p&gt;There are a lot of different hosting services. You can pay for a server on &lt;a href="https://www.digitalocean.com/"&gt;DigitalOcean&lt;/a&gt; or some other some other &lt;a href="https://en.wikipedia.org/wiki/Cloud_computing"&gt;cloud&lt;/a&gt; provider. This is often the cheapest option, but then you have a server to manage.&lt;/p&gt;

&lt;p&gt;If you don't want to do that, you can use a &lt;a href="https://en.wikipedia.org/wiki/Platform_as_a_service"&gt;Platform as a Service&lt;/a&gt; (PaaS) like &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;. You tell them how big of a server you want and they take care of the rest. On your end, you just need to deploy your code and that's it. &lt;a href="https://en.wikipedia.org/wiki/WordPress"&gt;WordPress&lt;/a&gt; hosting works similarly.&lt;/p&gt;

&lt;p&gt;While platforms as a service help you worry less about your server, they don't completely remove all server issues. You still have to wonder if you can handle spikes in traffic. That's because most of these services won't scale automatically to handle these scenarios.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Serverless_computing"&gt;Serverless computing&lt;/a&gt; offers a solution to this problem. It distills your cloud computing needs to its barest essence. Your cloud provider will run your code on-demand and only charge you for that.&lt;/p&gt;

&lt;p&gt;This lets you only pay for what you use. (If your site receives no traffic, you pay nothing.) This architecture also lets you scale infinitely. In fact, serverless computing can scale to handle thousands of visitors almost instantly.&lt;/p&gt;

&lt;p&gt;This is a transformative change for all programming languages. But even more so for PHP, since it's a language uniquely positioned to leverage the benefits of serverless. Let's explore why that is.&lt;/p&gt;

&lt;h1&gt;How does a traditional PHP application work?&lt;/h1&gt;

&lt;p&gt;PHP differs from most other programming languages because it's an &lt;a href="https://en.wikipedia.org/wiki/Interpreted_language"&gt;interpreted language&lt;/a&gt;. You don't need to compile your code. You can just upload your PHP files to a web server, and that's it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1-uwwSI---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ymirapp.com/uploads/2021/04/server-php-architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1-uwwSI---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ymirapp.com/uploads/2021/04/server-php-architecture.png" alt="PHP server architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The web server (&lt;a href="https://en.wikipedia.org/wiki/Nginx"&gt;nginx&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Apache_HTTP_Server"&gt;apache&lt;/a&gt; most of the time) does all the magic. It figures out what PHP file you're trying to access. Often, it's just the &lt;code&gt;index.php&lt;/code&gt; file in the root directory which then loads other PHP files. (Fun fact: &lt;a href="https://twitter.com/levelsio/status/1381709793769979906"&gt;Pieter Levels makes $100k/month from a single index.php file!&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The web server then sends this PHP file to the PHP interpreter. The interpreter reads the file, parses it and then executes it. Once the execution completes, it'll return some output. That output is the generated HTML that the web server sends back to your browser as an HTTP response.&lt;/p&gt;

&lt;h1&gt;What happens when you use serverless PHP&lt;/h1&gt;

&lt;p&gt;Now that we've gotten a basic idea of how a PHP application works, we can look at what happens to it when you use serverless PHP. First, serverless computing is &lt;a href="https://en.wikipedia.org/wiki/Event-driven_programming"&gt;event-driven&lt;/a&gt;. Your serverless PHP interpreter awaits for an event, and this triggers the PHP code to run.&lt;/p&gt;

&lt;p&gt;In a way, it’s similar to how things work with a web server. Your web server receives an &lt;a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_message"&gt;HTTP request&lt;/a&gt; (an event) and this event would cause the web server to tell the PHP interpreter to process your code. This is the primary reason serverless computing works so well with PHP.&lt;/p&gt;

&lt;p&gt;So what's different about serverless PHP then? The big change is that, not only do you not have a server with serverless PHP, you don't have a web server anymore either. Instead of a web server, you use an API gateway which is a special service offered by the cloud provider. Let's look at what that looks like in more detail.&lt;/p&gt;

&lt;h2&gt;The life of a serverless PHP request&lt;/h2&gt;

&lt;p&gt;Below is a diagram showing what happens when you make a request to a serverless PHP application. As you can see, it looks very similar to what we had before.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WDRLyiCQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ymirapp.com/uploads/2021/04/serverless-php-architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WDRLyiCQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.ymirapp.com/uploads/2021/04/serverless-php-architecture.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The browser sends the HTTP request to the API gateway. The gateway receives the HTTP request, converts it to an event, and forwards it to the serverless PHP application. It reads, parses, and executes the requested PHP file and returns the result to the API gateway. The gateway generates the HTTP response and sends it back to the browser.&lt;/p&gt;

&lt;p&gt;Of note is the serverless PHP application. It has two parts: the PHP runtime and your PHP code.&lt;/p&gt;

&lt;p&gt;The PHP runtime contains the PHP interpreter. But it also has code to process the event sent by the API gateway and return it the response from the interpreter. Your PHP application code is the same PHP code you’d deploy to a regular server.&lt;/p&gt;

&lt;p&gt;These two parts get packaged together as a function (this is where the name Function as a Service comes from) when you deploy your serverless PHP application to the cloud provider. This function is what the API gateway sends an event to whenever it receives a request.&lt;/p&gt;

&lt;h1&gt;What's the advantage of this?&lt;/h1&gt;

&lt;p&gt;Now that we've seen how serverless PHP application works, you might wonder, "Why would I want to use this instead of my trusty Linux server?"&lt;/p&gt;

&lt;h2&gt;Near infinite scaling&lt;/h2&gt;

&lt;p&gt;Once you've deployed a new version of your serverless PHP application, the cloud provider can create as many copies of it as necessary. It can also create these copies almost instantly. This allows your PHP application to handle large spikes of traffic without breaking a sweat. (For example, &lt;a href="https://blog.ymirapp.com/why-serverless-perfect-hosting-woocommerce/"&gt;Ymir can help your WooCommerce site scale to handle hundreds of customers instantly&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;With a normal server setup, you need to have the server capacity already provisioned and ready to go. Otherwise, you need to have a &lt;a href="https://en.wikipedia.org/wiki/Horizontal_scalability"&gt;horizontally scaling&lt;/a&gt; setup ready to handle these traffic spikes. But these types of setup take a few minutes to scale which can make the application unavailable until then.&lt;/p&gt;

&lt;h2&gt;No need to manage servers&lt;/h2&gt;

&lt;p&gt;This is a good way to bring up the next advantage of using serverless. You don't have a server to manage anymore. If you've ever had to manage servers, you know the responsibilities that come with managing one. (Being on call when it goes down, handling updates, keeping it secure, etc.)&lt;/p&gt;

&lt;p&gt;With serverless, all that you have to do is deploy your PHP code to your serverless platform and you're good to go! This gives you a peace of mind that's hard to put a price on. But once you've experienced it, it's hard to go back. (It's why I built &lt;a href="https://ymirapp.com"&gt;Ymir&lt;/a&gt;.)&lt;/p&gt;

&lt;h2&gt;Pay per use&lt;/h2&gt;

&lt;p&gt;The server doesn't just change how we host our code. It's also changes how we pay for hosting it. Before you'd pay for a server that had to stay on at all times. This was true regardless that you had a droplet on DigitalOcean or code deployed to a Heroku dyno.&lt;/p&gt;

&lt;p&gt;With serverless, you only pay when your code runs. (For example, &lt;a href="https://en.wikipedia.org/wiki/AWS_Lambda"&gt;AWS Lambda&lt;/a&gt; charges you by the millisecond!) In a lot of cases, this offers significant cost saving. &lt;a href="https://mnapoli.fr/serverless-case-study-externals/"&gt;One case study&lt;/a&gt; shows how &lt;a href="https://externals.io/"&gt;external.io&lt;/a&gt; went from paying $50/month on &lt;a href="https://platform.sh"&gt;platform.sh&lt;/a&gt; to ~$17/month on &lt;a href="https://en.wikipedia.org/wiki/Amazon_Web_Services"&gt;AWS&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;The tradeoffs&lt;/h1&gt;

&lt;p&gt;If serverless sounds too good to be true, that's because it generally is! That said, it's not the ideal solution in all situations. Here are some the tradeoffs you have to consider if you're looking to use serverless,&lt;/p&gt;

&lt;h2&gt;Harder to predict costs&lt;/h2&gt;

&lt;p&gt;When you pay for a server, you know it'll be $X/month. It's simple and easy to plan for. If you need a larger server, you know you'll go from paying $X/month to $Y/month.&lt;/p&gt;

&lt;p&gt;With serverless that whole cost calculation is more complicated, you have to think, "How many requests do I get? How long do they last on average?" So while pay per use pricing model offers great cost saving potential, you might prefer the predictability of regular hosting costs. Even if you might pay 2-3 times more for it.&lt;/p&gt;

&lt;h2&gt;Not cheaper than a low-end VPS&lt;/h2&gt;

&lt;p&gt;If you're running your PHP application on a $5/month &lt;a href="https://en.wikipedia.org/wiki/Virtual_private_server"&gt;VPS&lt;/a&gt;, serverless won't offer any cost saving. In general, serverless PHP becomes cost competitive when you're paying $25/month for hosting. $25/month isn't that expensive for hosting, but a lot of us just host projects on smaller VPCs.&lt;/p&gt;

&lt;p&gt;That said, &lt;a href="https://twitter.com/JackEllis/status/1337425341103521792"&gt;it's also disingenuous to just compare server costs like this&lt;/a&gt;. You should also consider how much it costs to manage that server. Either it costs your time or you have to pay someone to do it.&lt;/p&gt;

&lt;h2&gt;Generally limited to AWS&lt;/h2&gt;

&lt;p&gt;While serverless computing exists on all the major cloud providers, your serverless architecture is very provider dependent. An API gateway on &lt;a href="https://en.wikipedia.org/wiki/Microsoft_Azure"&gt;Microsoft Azure&lt;/a&gt; won't work the same as the one on &lt;a href="https://en.wikipedia.org/wiki/Google_Cloud_Platform"&gt;Google Cloud&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The reality is that, at this time, most of the energy around serverless PHP is focused on one provider: AWS. Not everyone can use AWS for a wide range of reasons. That said, if you can't use AWS, you're going to have a harder time finding resources or services (&lt;a href="http://vapor.laravel.com/"&gt;Laravel Vapor&lt;/a&gt; and Ymir are both AWS only) to create a serverless PHP application.&lt;/p&gt;

&lt;h1&gt;A great alternative to servers&lt;/h1&gt;

&lt;p&gt;The point of this article wasn't necessarily to show you you shouldn't host a PHP application on a server. Hosting a PHP application on a server still has a bright future ahead of it. It's sometimes more cost effective to do so. You can choose which provider you want to use, and there are countless resources and tools to help you manage one.&lt;/p&gt;

&lt;p&gt;But if you're using an expensive hosting provider or a platform as a service or some complex horizontally scaling setup, serverless might be the thing you're waiting for. It's easier to manage and deploy to while often costing less.&lt;/p&gt;

&lt;p&gt;And that's something to be excited about.&lt;/p&gt;

</description>
      <category>php</category>
      <category>serverless</category>
    </item>
    <item>
      <title>💡 Quick Tips: Make your DEV.TO home feed better with "Anti-follow" Tag Weightings </title>
      <author>InHuOfficial</author>
      <pubDate>Thu, 24 Jun 2021 17:45:43 +0000</pubDate>
      <link>https://dev.to/inhuofficial/quick-tips-make-your-dev-to-home-feed-better-with-anti-follow-weightings-3kpi</link>
      <guid>https://dev.to/inhuofficial/quick-tips-make-your-dev-to-home-feed-better-with-anti-follow-weightings-3kpi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;In a rush? This article two sentences: Set a higher value on your tags weighting so they appear higher up your home feed. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add a negative value&lt;/strong&gt; to a tag weighting to suppress that tag and make it appear lower down your home feed. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Maybe you are new to dev.to, maybe you have been here a while, but one thing is for sure you will probably spend most of your time looking at your home feed for new and interesting articles to read.&lt;/p&gt;

&lt;p&gt;But do you find yourself getting loads of random things that aren't relevant to your interests on your dev.to feed? We can fix this with tag weightings and in-particular "anti-follow" weightings. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tag-weightings"&gt;
  &lt;/a&gt;
  Tag weightings
&lt;/h2&gt;

&lt;p&gt;If you are on a PC viewing dev.to you will see the main navigation on the left.&lt;/p&gt;

&lt;p&gt;Below that are the tags you follow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iuT7Z1L5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eovv0weiy7az4aqfxgxy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iuT7Z1L5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eovv0weiy7az4aqfxgxy.jpg" alt="My Tags section located below main navigation on dev.to"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will notice next to the title "My Tags" there is an icon that looks a little bit like a nut (as in nut and bolt).&lt;/p&gt;

&lt;p&gt;Clicking on that will take you to the "Following Tags" page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adjusting-your-weightings"&gt;
  &lt;/a&gt;
  Adjusting your weightings
&lt;/h2&gt;

&lt;p&gt;Now this is really straight forward. &lt;/p&gt;

&lt;p&gt;If you want a particular subject to appear more often in your feed just increase the number in the input under that tag.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Co4LjFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6rmo52v5bm0n1vh44zi2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Co4LjFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6rmo52v5bm0n1vh44zi2.jpg" alt="location of the weightings input underneath each tag you follow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obviously if you give a tag a higher number than another tag it has a higher priority. &lt;/p&gt;

&lt;p&gt;I am sure you are already aware of this, but there is something most people aren't aware of.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#antifollow"&gt;
  &lt;/a&gt;
  Anti-follow
&lt;/h2&gt;

&lt;p&gt;Yet again really straight forward but maybe not immediately obvious.&lt;/p&gt;

&lt;p&gt;Lets say you are like me and want to have accessibility (a11y) have a high priority. But you have been in the accessibility game for years so the last thing you need are a load of "beginner" posts cluttering up your feed and telling you the same information you have seen before.&lt;/p&gt;

&lt;p&gt;You can set an "anti-follow" on the "beginner" tag in this instance. That way anything with the "beginner" tag will get less priority in your feed.&lt;/p&gt;

&lt;p&gt;To set this all you need to do is set a &lt;strong&gt;negative&lt;/strong&gt; number of the weighting for a tag.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h3&gt;

&lt;p&gt;So although it seems a little counter intuitive you first head to the &lt;a href="https://dev.to/tags"&gt;tags page&lt;/a&gt; and follow a tag you want to suppress ("beginner")&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gFparxXD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbnjwwd72swisdch37a0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gFparxXD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbnjwwd72swisdch37a0.jpg" alt="top tags page - followed the beginner tag"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h3&gt;

&lt;p&gt;Now just head to &lt;a href="https://dev.to/dashboard/following"&gt;your followed tags&lt;/a&gt; via the URL or using the nut icon discussed earlier.&lt;/p&gt;

&lt;p&gt;Locate your newly followed tag (which will have a weighting of 1 initially) and then simply set a negative number.&lt;/p&gt;

&lt;p&gt;Finally click "Update Weights" button below all of your tags.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CMH89kG8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnbw5fjgnr62u573003r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CMH89kG8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnbw5fjgnr62u573003r.jpg" alt="Beginners tag set to minus one and location of update weights button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#all-done"&gt;
  &lt;/a&gt;
  All Done!
&lt;/h3&gt;

&lt;p&gt;Once you press "Update Weights" you will see the page reload and the tag(s) you gave a negative value to will now have the "anti-follow" badge attached.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DmlGwStd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18wte0rc645xpnbdxnm6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DmlGwStd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18wte0rc645xpnbdxnm6.jpg" alt='beginner tag now with an "anti follow" badge next to it'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now go back to your home page and notice that items you aren't interested in are lower down your feed!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Just a super simple trick to help you get the articles you want to see in your feed (or more accurately supress topics you don't want to see).&lt;/p&gt;

&lt;p&gt;Using tag weightings and "anti-follow" weightings for tags on dev.to helps make your home feed even better, start using them today!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/intent/tweet?url=https://dev.to/inhuofficial/quick-tips-make-your-dev-to-home-feed-better-with-anti-follow-and-weightings-4g0k-temp-slug-5798594&amp;amp;text=%22Using%20tag%20weightings%20and%20%22anti-follow%22%20weightings%20for%20tags%20on%20dev.to%20helps%20make%20your%20home%20feed%20even%20better,%20start%20using%20them%20today!%22%20-%20@InHuOfficial%20"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MNncMyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2tpr2x1d2r8tto04nlz.jpg" alt='Click to Tweet: "Using tag weightings and "anti-follow" weightings for tags on dev.to helps make your home feed even better, start using them today!"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let me know if you find this useful or if you already knew this and have managed to fine tune your home feed to perfection!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Tailwind CSS User? Read this!</title>
      <author>Saad Irfan</author>
      <pubDate>Thu, 24 Jun 2021 17:30:00 +0000</pubDate>
      <link>https://dev.to/msaaddev/tailwind-css-user-read-this-488n</link>
      <guid>https://dev.to/msaaddev/tailwind-css-user-read-this-488n</guid>
      <description>&lt;p&gt;So, if you are like me, a frontend developer who loves to work with Tailwind CSS, then this article may just save you a minute or two in the future. You see folks when I started my journey with Tailwind, I went to the place where all the secrets lie when it comes to any framework or library. And yeah! you guessed it right. The holy documentation. 👨🏻‍💻&lt;/p&gt;

&lt;p&gt;I opened the Next.js Tailwind set up guide and found out that that there are a bunch of steps that I needed to perform in order to get started with this beauty. And just like you, I did all the steps and voila! I had Tailwind integrated with my project.&lt;/p&gt;

&lt;p&gt;After this, I started reading documentation and found out that the setting up process of Tailwind varies from framework to framework. So now, if you want to use Tailwind with your React.js project after using it with Next.js, the same set up steps won't do the trick.&lt;/p&gt;

&lt;p&gt;Turns out I really hate when I have to spend an extra minute or two to get started with something. So like any other developer, I used my magic prowess to automate the crap out of it. And voila! Here comes the era of &lt;a href="https://github.com/msaaddev/new-tailwind-app"&gt;new-tailwind-app&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-newtailwindapp"&gt;
  &lt;/a&gt;
  ⚡️ new-tailwind-app
&lt;/h2&gt;

&lt;p&gt;So, &lt;a href="https://github.com/msaaddev/new-tailwind-app"&gt;new-tailwind-app&lt;/a&gt; is a zero-configuration cross-platform tool that can integrate Tailwind with six different kinds of web frameworks using a single command. Yeah! I know. Magic, right?!&lt;/p&gt;

&lt;p&gt;All you need to do is have Node installed in your computer and from there I got you covered. Just run the following in your terminal, and you are good to go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx new-tailwind-app@latest 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see all the supported frameworks by typing the following command in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# see all the features you get with the CLI&lt;/span&gt;
npx new-tailwind-app@latest &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/msaaddev/new-tailwind-app"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kp9Kk_1l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/inm56vhnxzjm4m9539rn.png" alt="help"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's a wrap, folks! If you find this tool useful, don't forget to star it. Now go ahead and utilise the power of open-source to do good and save yourself some time. &lt;/p&gt;

&lt;p&gt;Cheerios 🤞🏻&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Front End Testing Types And Tools</title>
      <author>AmiraArafa</author>
      <pubDate>Thu, 24 Jun 2021 17:27:40 +0000</pubDate>
      <link>https://dev.to/amiraarafa/front-end-testing-types-and-tools-4a0l</link>
      <guid>https://dev.to/amiraarafa/front-end-testing-types-and-tools-4a0l</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-front-end-testing"&gt;
  &lt;/a&gt;
  What is Front End Testing?
&lt;/h3&gt;

&lt;p&gt;Front End Testing is a testing technique in which Graphical User Interface (GUI), functionality and usability of web applications or a software are tested. The goal of Front end testing is testing overall functionalities to ensure the presentation layer of web applications or a software is defect free with successive updates.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-front-end-testing-is-needed"&gt;
  &lt;/a&gt;
  Why Front End Testing Is Needed
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Detecting Client-Side Performance Issues.&lt;/li&gt;
&lt;li&gt;Validating Application Behavior on Different Browsers and Systems.&lt;/li&gt;
&lt;li&gt;Improving Quality of User Interaction and Experience.&lt;/li&gt;
&lt;li&gt;Detect changing in features which depends on each other.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#types-of-front-end-testing"&gt;
  &lt;/a&gt;
  Types Of Front End Testing
&lt;/h3&gt;

&lt;p&gt;Essentially, testing Front-End testing can be divided into 3 categories:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JzKnIGdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0x3b1ftucnpi75xamsr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JzKnIGdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0x3b1ftucnpi75xamsr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-e2e-testing"&gt;
  &lt;/a&gt;
  1) E2E Testing
&lt;/h3&gt;

&lt;p&gt;E2E Testing or end-to-end testing, is the practice of testing if the execution of an application is performing as designed from start to finish. The entire application is tested in real-world scenarios, which includes testing the communication between components such as the database, network, APIs etc. and executing your code in a diversity of browsers. Basically testing everything. It takes a lot of time to set up and costs the most.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-integration-testing"&gt;
  &lt;/a&gt;
  2) Integration Testing
&lt;/h3&gt;

&lt;p&gt;Integration Testing consists of testing the interaction between elements of your application, for example, communication between your UI and an API. It takes a shorter amount of time to set up, and isn't too expensive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-unit-testing"&gt;
  &lt;/a&gt;
  3) Unit Testing
&lt;/h3&gt;

&lt;p&gt;Unit Testing is different as it consists of testing isolated parts of the code, as units. These units usually take the form of methods, properties, UI element actions etc. It is the fastest and cheapest to implement.&lt;/p&gt;

&lt;p&gt;You've probably noted that the higher you go in our pyramid, the more time and money it takes to set up our tests. That's why a lot of projects tend to focus on unit tests as they can help you know if your code truly works by covering most scenarios, save time, and simplify deployment processes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recommended-testing-tools"&gt;
  &lt;/a&gt;
  Recommended Testing Tools
&lt;/h3&gt;

&lt;p&gt;There are many types of testing tools , We can refer to two of most important types of testing in React.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-jest"&gt;
  &lt;/a&gt;
  1) Jest
&lt;/h3&gt;

&lt;p&gt;Jest is a JavaScript test runner that lets you access the DOM via jsdom. While jsdom is only an approximation of how the browser works, it is often good enough for testing React components. Jest provides a great iteration speed combined with powerful features like mocking modules and timers so you can have more control over how the code executes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-react-testing-library"&gt;
  &lt;/a&gt;
  2) React Testing Library
&lt;/h3&gt;

&lt;p&gt;React Testing Library is a set of helpers that let you test React components without relying on their implementation details. This approach makes refactoring a breeze and also nudges you towards best practices for accessibility. Although it doesn’t provide a way to “shallowly” render a component without its children.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-create-a-frontend-website-testing-plan"&gt;
  &lt;/a&gt;
  How To Create A Frontend Website Testing Plan?
&lt;/h3&gt;

&lt;p&gt;Creating Frontend testing plan is a simple 4 step process.&lt;/p&gt;

&lt;p&gt;Step 1) Find out tools for Managing Your Test Plan.&lt;/p&gt;

&lt;p&gt;Step 2) Decide the budget for Front End Testing.&lt;/p&gt;

&lt;p&gt;Step 3) Set the timeline for the entire process.&lt;/p&gt;

&lt;p&gt;Step 4) Decide the entire scope of the project. The scope includes the following items.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OS and browsers used by users ISP plans of your audience.&lt;/li&gt;
&lt;li&gt;Popular devices used by audience.&lt;/li&gt;
&lt;li&gt;Proficiency of your audience.&lt;/li&gt;
&lt;li&gt;Internet correction speed of the audience.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/testing.html"&gt;https://reactjs.org/docs/testing.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.guru99.com/frontend-testing.html#1"&gt;https://www.guru99.com/frontend-testing.html#1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/christopherkade/introduction-to-front-end-unit-testing-510n"&gt;https://dev.to/christopherkade/introduction-to-front-end-unit-testing-510n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.testim.io/blog/front-end-testing-complete-overview/"&gt;https://www.testim.io/blog/front-end-testing-complete-overview/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.perfecto.io/blog/comprehensive-guide-front-end-testing#frontendtestingchallenges"&gt;https://www.perfecto.io/blog/comprehensive-guide-front-end-testing#frontendtestingchallenges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>testing</category>
      <category>react</category>
      <category>test</category>
      <category>testdev</category>
    </item>
    <item>
      <title>Getting Started with NodeJS</title>
      <author>Christopher Glikpo</author>
      <pubDate>Thu, 24 Jun 2021 17:25:29 +0000</pubDate>
      <link>https://dev.to/cglikpo/getting-started-with-nodejs-130h</link>
      <guid>https://dev.to/cglikpo/getting-started-with-nodejs-130h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this article, I am going to introduce NodeJS with Node Package Module (NPM), step-by-step basic implementation and explanation.&lt;/p&gt;

&lt;p&gt;This article covers the following areas of NodeJS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduction of NodeJS&lt;/li&gt;
&lt;li&gt;Installation of NodeJS and NPM&lt;/li&gt;
&lt;li&gt;Node Package Module (NPM)&lt;/li&gt;
&lt;li&gt;Package.json&lt;/li&gt;
&lt;li&gt;Basic Example&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#nodejs"&gt;
  &lt;/a&gt;
  NodeJS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://nodejs.org/en/"&gt;NodeJS&lt;/a&gt; is an open-source, cross-platform runtime environment for developing server-side web applications. NodeJS also has an event-driven architecture capable of &lt;a href="https://en.wikipedia.org/wiki/Asynchronous_I/O"&gt;asynchronous I/O&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NodeJS uses an event-driven, non-blocking I/O model that makes it lightweight and efficient&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation-of-nodejs-and-npm"&gt;
  &lt;/a&gt;
  Installation of NodeJS and NPM
&lt;/h2&gt;

&lt;p&gt;Installation of NodeJS and NPM is straightforward using the installer package available at NodeJS official web site.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download the installer from &lt;a href="https://nodejs.org/en/"&gt;NodeJS WebSite.&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Run the installer.&lt;/li&gt;
&lt;li&gt;Follow the installer steps, agree the license agreement and click the next button.&lt;/li&gt;
&lt;li&gt;Restart your system/machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, test NodeJS by printing its version using the following command in Command Prompt:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; 1. &amp;gt; node -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and test npm by printing its version using command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; 1. &amp;gt; npm -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simple way to test nodeJS work in your system is to create a javascript file which print a message.&lt;/p&gt;

&lt;p&gt;Lets create app.js file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* app.js file */
console.log("Node is working");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the app.js file using Node command &amp;gt; node app.js in command prompt.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; E:\&amp;gt; node -v
 v14.16.0
 E:\&amp;gt; npm -v
 v6.14.11
 E:\&amp;gt; node app.js
 Node is working
 E:\&amp;gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You are done with installation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#node-package-module"&gt;
  &lt;/a&gt;
  Node Package Module
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/"&gt;NPM&lt;/a&gt; is the package module which helps javascript developers load dependencies effectively. To load dependencies we just have to run a command in command prompt:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 &amp;gt; npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is finding a json file named as &lt;code&gt;package.json&lt;/code&gt; in root directory to install all dependencies defined in the file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#packagejson"&gt;
  &lt;/a&gt;
  Package.json
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.npmjs.com/cli/v7/configuring-npm/package-json"&gt;Package.json&lt;/a&gt; looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "ApplicationName",
  "version": "0.0.1",
  "description": "Application Description",
  "main": "app.js",
  "scripts": {
    "start": "node app.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/npm/npm.git"
  },
  "dependencies": {
    "express": "~3.0.1",
    "sequelize": "latest",
    "q": "latest",
    "tedious": "latest",
    "angular": "latest",
    "angular-ui-router": "~0.2.11",
    "path": "latest",
    "dat-gui": "latest"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most important things in your package.json are name and version. Those are actually required, and your package won't install without them. The name and version together form an identifier that is assumed to be completely unique. Changes to the package should come along with changes to the version.&lt;/p&gt;

&lt;p&gt;Repository&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "repository": {
    "type": "git",
    "url": "https://github.com/npm/npm.git"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Specify the place where your code lives. Through this repository, developers can reach out and contribute to your application. If the git repository is not GitHub, then the &lt;code&gt;npm docs&lt;/code&gt; command will be able to find you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scripts"&gt;
  &lt;/a&gt;
  Scripts
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
 "scripts": {
    "start": "node app.js"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NPM provide many useful &lt;a href="https://docs.npmjs.com/cli/v7/using-npm/scripts"&gt;Scripts&lt;/a&gt; like &lt;code&gt;npm install&lt;/code&gt;, &lt;code&gt;npm start&lt;/code&gt;, &lt;code&gt;npm stop&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;Some default script values are based on package contents.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 "start": "node server.js"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If there is a app.js file in the root of your package, then npm will default the start command to node app.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependencies"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
"dependencies": {
    "express": "~3.0.1",
    "sequelize":"latest",
    "q":"latest",
    "tedious":"latest",
    "angular":"latest",
    "angular-ui-router": "~0.2.11",
    "path":"latest",
    "dat-gui":"latest"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://docs.npmjs.com/cli/v7/configuring-npm/package-json#dependencies"&gt;Dependencies&lt;/a&gt; are specified in a simple object that maps a package name to a version range. Version Name must be Version exactly.&lt;/p&gt;

&lt;p&gt;If you want to install the &lt;code&gt;latest&lt;/code&gt; version of a file, you just have to put latest in place of the version name.&lt;/p&gt;

&lt;p&gt;Tilde(~) is used to tell "Approximately equivalent to version".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-example"&gt;
  &lt;/a&gt;
  Basic Example
&lt;/h2&gt;

&lt;p&gt;Create a app.js javascript file with following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/*app.js*/

const http = require('http');

const hostname = '127.0.0.1';
const port = 3000;

const server = http.createServer(function(req, res) {
  res.statusCode = 200;
  res.setHeader('Content-Type', 'text/plain');
  res.end('Hello World\n');
});

server.listen(port, hostname, function() {
  console.log('Server running at http://'+ hostname + ':' + port + '/');
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we need &lt;code&gt;http&lt;/code&gt; to create an http server we use &lt;code&gt;require('http')&lt;/code&gt; and pass it to a variable named &lt;code&gt;http&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 var http = require('http');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need to defined hostname and port number, here we use &lt;code&gt;localHost&lt;/code&gt; i.e &lt;code&gt;127.0.0.1&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; number &lt;code&gt;3000&lt;/code&gt; and assign this to the variables &lt;code&gt;hostname&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt;, respectively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var hostname = '127.0.0.1';
var port = 3000;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we create the http server using the &lt;code&gt;createServer&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var server = http.createServer(function(req, res){
    res.statusCode = 200;
    res.setHeader('Content-Type', 'text/plain');
    res.end('Hello World\n');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This created the server as well as a response having &lt;code&gt;statusCode: 200&lt;/code&gt;, &lt;code&gt;Content-Type&lt;/code&gt; header of plain text and and ends with the string &lt;code&gt;Hello World&lt;/code&gt;. This is the response that the server can send to browser.&lt;/p&gt;

&lt;p&gt;the function has two parameters &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;res&lt;/code&gt; which is the &lt;code&gt;request&lt;/code&gt; from and &lt;code&gt;response&lt;/code&gt; to the server, respectively.&lt;/p&gt;

&lt;p&gt;In our example we are creating responses.&lt;/p&gt;

&lt;p&gt;We created the server, now we have to assign it a hostname and port number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server.listen(port, hostname, function() {
  console.log('Server running at http://'+ hostname + ':' + port + '/');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the server listens to localhost on port 3000 and prints "Server running at &lt;a href="http://127.0.0.1:3000/"&gt;http://127.0.0.1:3000/&lt;/a&gt;" in command prompt.&lt;/p&gt;

&lt;p&gt;Now Run app.js file un node using command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open a browser and enter url &lt;a href="http://127.0.0.1:3000/"&gt;http://127.0.0.1:3000/&lt;/a&gt;. The browser will display Hello World message on the screen.&lt;/p&gt;

&lt;p&gt;Now Run server.js file un node using command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;E:\ &amp;gt;node app.js
Server running at http://127.0.0.1:3000/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WCOIBPuT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xe7esph7qqe7d3g7jnv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WCOIBPuT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xe7esph7qqe7d3g7jnv.png" alt="Browser"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you guys for reading my posts.If you  want to learn more about Web Development, feel free to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo/featured"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
