<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My Vue Experience after 3 projects in 18 months </title>
      <author>crisarji</author>
      <pubDate>Sun, 13 Jun 2021 23:52:08 +0000</pubDate>
      <link>https://dev.to/crisarji/my-vue-experience-after-3-projects-in-18-months-456c</link>
      <guid>https://dev.to/crisarji/my-vue-experience-after-3-projects-in-18-months-456c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#my-vue-experience-after-3-projects-in-18-months"&gt;
  &lt;/a&gt;
  My Vue Experience after 3 projects in 18 months
&lt;/h2&gt;

&lt;p&gt;Hello developer pal!, glad to see you here.&lt;/p&gt;

&lt;p&gt;In this post, I'll share my experience after 3 projects written/maintained in Vue 2.* during the last 18 months.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-me-the-topics"&gt;
  &lt;/a&gt;
  Show Me The Topics
&lt;/h2&gt;

&lt;p&gt;The topics to be focused on are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Agile Methodology and frameworks used&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Design Systems&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Infrastructure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Backend&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;State Management&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Frontend&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: This post comes from my own experience during this lapse, not saying this is the best way to go, nor the worst, any contribution is more than welcome in the threads below!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#agile-methodology-and-frameworks-used"&gt;
  &lt;/a&gt;
  Agile Methodology and Frameworks used
&lt;/h2&gt;

&lt;p&gt;Are you familiar with &lt;a href="https://www.agilealliance.org/agile-essentials/"&gt;Agile Software Development&lt;/a&gt;?, cause I really am right now!, I really like this simple sentence as a summary:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Agile is the ability to create and respond to change. It is a way of dealing with, and ultimately succeeding in, an uncertain and turbulent environment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Source: &lt;a href="https://www.agilealliance.org/agile101/"&gt;What is Agile?&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nice, simple, straight to the point, isn't it?, during the last year and a half my teams passed over 3 different of its frameworks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.agilealliance.org/glossary/scrum"&gt;Scrum&lt;/a&gt;: from my perspective, the most interesting, this framework allowed our &lt;a href="https://www.visual-paradigm.com/scrum/what-is-cross-functional-team-in-agile/"&gt;cross functional team&lt;/a&gt; to interact as a whole, splitting the work up in 2-weeks sprints, and constantly adjusting the business requirements, it is a quite nice experience!, highly recommended.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.agilealliance.org/glossary/kanban"&gt;Kanban&lt;/a&gt;: my second favorite from top to bottom, a good option when the work to be done does not follow the same path, for instance working on different repos at the same time(MonoRepos, MFEs, Legacy Systems)l; when this happens perhaps &lt;em&gt;Scrum&lt;/em&gt; is not enough cause the time-frames.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.agilealliance.org/glossary/xp"&gt;Extreme Programming (XP)&lt;/a&gt;: required for an MVP one of my teams had, from my experience, the most risky one since you dynamically change requirements and some heavy lifting could magically appear/disappear down the road, highly not-recommended unless it is "Extreme"-ly necessary(pun intended), and please be "Extreme"-ly cautious(pun intended X2).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In case you want to read about the &lt;code&gt;Agile Manifesto&lt;/code&gt;(the corner stone of the methodology) you can do it right &lt;a href="http://agilemanifesto.org/principles.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-system"&gt;
  &lt;/a&gt;
  Design System
&lt;/h2&gt;

&lt;p&gt;I learned that after defining the &lt;a href="#agile-methodology-and-frameworks-used"&gt;Methodology&lt;/a&gt;, it is good to have a robust &lt;code&gt;Design System&lt;/code&gt;, you have 2 options: reuse an existing one or create one custom from scratch, either way the benefits are amazing!, when present it covers up 3 different areas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;code&gt;UI/UX&lt;/code&gt; does not repeat itself&lt;/li&gt;
&lt;li&gt; &lt;code&gt;WebDev&lt;/code&gt; has one-and-only-one source of truth&lt;/li&gt;
&lt;li&gt; &lt;code&gt;QA&lt;/code&gt; can evacuate questions on its own&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In case you want to have some existing guide lines, &lt;a href="https://designerup.co/blog/10-best-design-systems-and-how-to-learn-and-steal-from-them/"&gt;here&lt;/a&gt; you can find a list of available resources on the wild.&lt;/p&gt;

&lt;p&gt;In the teams I was working on, those where custom, a recipe for success was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vuejs.org/"&gt;VueJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://storybook.js.org/"&gt;StoryBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A great strategy that we found was to create &lt;code&gt;Vue&lt;/code&gt; components using &lt;code&gt;Tailwind&lt;/code&gt; and creating its respectives stories on &lt;code&gt;Storybook&lt;/code&gt;; I can say this is a great approach cause you can define your &lt;code&gt;Design System&lt;/code&gt; in &lt;code&gt;Storybook&lt;/code&gt; itself, and publish this to an accessible page for all your team members(under a VPN is even more secure), so it is available for everybody, they can see the components running in an isolated scope before even implementing it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#infrastructure"&gt;
  &lt;/a&gt;
  Infrastructure
&lt;/h2&gt;

&lt;p&gt;Oh right, we had the &lt;a href="#agile-methodology-and-frameworks-used"&gt;Methodology&lt;/a&gt; and the &lt;a href="#design-system"&gt;Design System&lt;/a&gt; then what?&lt;/p&gt;

&lt;p&gt;I learned that here it comes the &lt;code&gt;Infrastructure&lt;/code&gt;, well the approaches we had the opportunity to work with where &lt;a href="https://www.jenkins.io/"&gt;Jenkins&lt;/a&gt;, &lt;a href="https://travis-ci.org/"&gt;TravisCI&lt;/a&gt; and &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For experience, in big projects, &lt;code&gt;Jenkins&lt;/code&gt; is a great way to go, among all its pros, you can set it up for running on your behalf the &lt;em&gt;unit testing&lt;/em&gt; and &lt;em&gt;end-to-end&lt;/em&gt; testing before deploying!, in case of failure you are notified and a fix can be included.&lt;/p&gt;

&lt;p&gt;In small projects, or side projects, you can use the &lt;a href="https://travis-ci.org/"&gt;TravisCI&lt;/a&gt; + &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; approach; &lt;code&gt;GitHub&lt;/code&gt; already has some built-in options for setting up &lt;code&gt;ymls&lt;/code&gt; and help you with &lt;em&gt;Merge Requests&lt;/em&gt; and &lt;em&gt;Deployments&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: &lt;a href="https://travis-ci.org/"&gt;TravisCI&lt;/a&gt; gives you 10,000 builds for free with your sign up, for small projects, proof of concepts or side projects it is a great deal!.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backend"&gt;
  &lt;/a&gt;
  Backend
&lt;/h2&gt;

&lt;p&gt;Also I learned for these projects, that a &lt;code&gt;Backend&lt;/code&gt; on &lt;a href="https://nodejs.org/en/docs/"&gt;NodeJS&lt;/a&gt; and &lt;a href="https://firebase.google.com/docs"&gt;Firebase&lt;/a&gt; is easily handle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nodejs.org/en/docs/"&gt;NodeJS&lt;/a&gt; + &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt; give you the chance to handle the routing for &lt;em&gt;CRUD&lt;/em&gt; operations, it is easy to handle the &lt;em&gt;request/responses&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://firebase.google.com/docs"&gt;Firebase&lt;/a&gt; is ready to go as soon as you import it in your &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt; project; with a few lines of code you are able to do a lot!; Authentication, Storage, Realtime DB, a whole bunch of options are available for you.&lt;/p&gt;

&lt;p&gt;I wrote non-canonical series related to some Firebase features if you want to check them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#state-management"&gt;
  &lt;/a&gt;
  State Management
&lt;/h2&gt;

&lt;p&gt;I learned about &lt;a href="https://vuejs.org/"&gt;VueJS&lt;/a&gt; + &lt;a href="https://vuex.vuejs.org/"&gt;Vuex&lt;/a&gt;. I'm used to Rxjs, NgRx but Vuex is from my experience the easiest; with a little of knowledge you are able to start creating on your own, the separation of concerns through modules, and the way to reference then is crystal clear:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;store/
   ├── index.js
   └── modules/
       ├── module1.store.js
       ├── module2.store.js
       ├── module3.store.js
       ├── module4.store.js
       └── module5.store.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Referencing the modules in the &lt;code&gt;index.js&lt;/code&gt; make them importable through out your project, this includes &lt;code&gt;State&lt;/code&gt;, &lt;code&gt;Getters&lt;/code&gt;, &lt;code&gt;Mutations&lt;/code&gt;, &lt;code&gt;Actions&lt;/code&gt;; a new module is just the addition of a new entry in the &lt;code&gt;index.js&lt;/code&gt;, a deprecated module is the removal of that entry(conditions may apply).&lt;/p&gt;

&lt;p&gt;I also learned that you can &lt;code&gt;namespace&lt;/code&gt; the modules!, then you can differentiate the elements by module instead of having dozens of lines with no context(trust me, with several modules this is amazing for debugging purposes, scalability and visual sake).&lt;/p&gt;

&lt;p&gt;A clear example can be found below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mapState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mapGetters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mapActions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mapMutations&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Accessing root properties&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;property&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="c1"&gt;// Accessing getters&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapGetters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;property&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="c1"&gt;// Accessing non-root properties&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Accessing actions&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapActions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myAction&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="c1"&gt;// Accessing mutations&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapMutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myMutation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It doesn't matter how small or how big is your project, it will be ready to scale, you can read here a bit more about &lt;a href="https://vuex.vuejs.org/"&gt;Vuex&lt;/a&gt; and &lt;a href="https://www.telerik.com/blogs/10-good-practices-building-maintaining-large-vuejs-projects"&gt;Namespaces&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h2&gt;

&lt;p&gt;I learned that &lt;code&gt;Vue&lt;/code&gt; has a smaller learning curve than &lt;code&gt;Angular&lt;/code&gt;, and it is very similar to &lt;code&gt;React&lt;/code&gt;(&lt;em&gt;Note&lt;/em&gt;: assuming you have a strong base of Javascript, otherwise the curve is high on either of them).&lt;/p&gt;

&lt;p&gt;As a dev who was mostly involved in &lt;code&gt;Angular&lt;/code&gt; projects, understanding the core concepts and starting to be productive was easier than expected; I really think that the other way around must be harder, cause &lt;code&gt;Angular&lt;/code&gt; has its own world.&lt;/p&gt;

&lt;p&gt;Also learned about some core concepts that made my development faster and easier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://vuedose.tips/how-to-structure-a-vue-js-app-using-atomic-design-and-tailwindcss/"&gt;Atomic Design Pattern&lt;/a&gt;: structure your folders as =&amp;gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Atoms&lt;/em&gt;: these are basic components, dummy ones; could be buttons, inputs, dropdowns, any imagiable component small enough to be functional and testable&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Molecules&lt;/em&gt;: a group of &lt;em&gt;Atoms&lt;/em&gt;, at this level just a little logic included, it should not include communication with you state(if possible)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Organisms&lt;/em&gt;: mixture!, can have &lt;em&gt;Atoms&lt;/em&gt; and &lt;em&gt;Molecules&lt;/em&gt;, at this tier communication with you &lt;em&gt;State&lt;/em&gt; can be allowed; Mappers, Getters, here are accepted&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Templates&lt;/em&gt;: here you add together the aforementioned structures&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Pages&lt;/em&gt;: every page you add is an instance that can be accessed from your routing strategy
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://router.vuejs.org/guide/advanced/lazy-loading.html"&gt;Vue Lazy Routing&lt;/a&gt;: it is trivially easy to lazy load the route components; after defining your &lt;em&gt;routerOptions&lt;/em&gt; in 5 lines of code it is set and done.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routerOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;routerOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* webpackChunkName: "{{route.component}}" */&lt;/span&gt; &lt;span class="s2"&gt;`../views/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.vue`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://vue-test-utils.vuejs.org/"&gt;Vue Test Utils&lt;/a&gt;: &lt;code&gt;Vue&lt;/code&gt; has its own utils for testing purposes, and it is quite easy to understand and use, let me show the most simple sample I found:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal-content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/slot&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chai&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;shallowMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vue/test-utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;BaseModal&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/atoms/BaseModal.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;BaseModal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;existence of the element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should exist 'modal' element&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;shallowMount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BaseModal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[data-test='modal']&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://vuejs.org/v2/guide/components-registration.html"&gt;Global Registration of Components&lt;/a&gt;: There are components widely used, these are candidates to be registered globally so they can be referenced without importing them.
An easy way to accomplished this is creating a &lt;code&gt;_globals.js&lt;/code&gt; file and fill it in with:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Globally register all base components for convenience, because they&lt;/span&gt;
&lt;span class="c1"&gt;// will be used very frequently. Components are registered using the&lt;/span&gt;
&lt;span class="c1"&gt;// PascalCased version of their file name.&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// https://webpack.js.org/guides/dependency-management/#require-context&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requireComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="c1"&gt;// Look for files in the current directory&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./atoms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Do not look in subdirectories&lt;/span&gt;
  &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Only include .vue files&lt;/span&gt;
  &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[\w&lt;/span&gt;&lt;span class="sr"&gt;-&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;vue$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// For each matching file name...&lt;/span&gt;
&lt;span class="nx"&gt;requireComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Get the component config&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;componentConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requireComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Get the PascalCase version of the component name&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;componentName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fileName&lt;/span&gt;
    &lt;span class="c1"&gt;// Remove the "./" from the beginning&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;\.\/&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// Remove the file extension from the end&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.\w&lt;/span&gt;&lt;span class="sr"&gt;+$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;componentConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;componentConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, just import that file in &lt;em&gt;main.js&lt;/em&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/_globals&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some other good practices can be found:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learnvue.co/2020/01/12-vuejs-best-practices-for-pro-developers/"&gt;Syntax and Logic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.telerik.com/blogs/10-good-practices-building-maintaining-large-vuejs-projects"&gt;Slots use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.bitsrc.io/4-best-practices-for-large-scale-vue-js-projects-9a533450bdb2"&gt;Large Scale Vue.js Projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As shown above, I had a long way during the last 18 months, I'm giving my two cents in here in the way I understood the concepts, and what I think were the best practices applied; maybe you could have a better way to do it, let's discuss in a thread below!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vue</category>
      <category>github</category>
    </item>
    <item>
      <title>WWDC 2021: State of the Union Recap</title>
      <author>Joseph Maurer</author>
      <pubDate>Sun, 13 Jun 2021 22:53:56 +0000</pubDate>
      <link>https://dev.to/mwrpwr/wwdc-2021-state-of-the-union-recap-1adc</link>
      <guid>https://dev.to/mwrpwr/wwdc-2021-state-of-the-union-recap-1adc</guid>
      <description>&lt;p&gt;
Here’s a quick recap of Apple’s State of the Union at WWDC (World Wide Developer Confrence 2021). You can find the &lt;a href="https://developer.apple.com/videos/play/wwdc2021/102/?time=2036"&gt;full video here&lt;/a&gt;.
&lt;/p&gt;


  
Your browser does not support the video tag.



&lt;h2&gt;XCode Build&lt;/h2&gt;

&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KB9YXBBO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0d2h1765otfujio9z7h.png" alt="alt_text" title="image_tooltip"&gt;

 

&lt;p&gt;
A new continuous integration and delivery service built right into Xcode and hosted in the cloud, Xcode Build is Apple’s take on simplifying the process of building an app while helping you focus on what’s important. It helps you offload your builds, test, and code signing for distribution. It publishes your result right back into Xcode’s report navigator so you never have to switch context out of where you are building your app. 
&lt;/p&gt;

&lt;p&gt;
One cool feature is that you can have the build notify you when it completes and publish it to your Slack or any other service. There is also a public API that you can dive into for grabbing information about your builds. I can see how building apps this way is way more integrated and convenient. This actually seems like a fun way to write tests for your app!
&lt;/p&gt;

&lt;p&gt;
Code reviews also look to make massive improvements on commenting and reviewing code. The new views allow you to select between multiple ways to see what code has changed, and even view comments as you are fixing any potential bugs. Anyone who does code reviews how confusing it can get when there are multiple revisions and files removed or added to a pull request. 
&lt;/p&gt;


&lt;h2&gt;Swift Concurrency Support&lt;/h2&gt;


&lt;p&gt;
Most developers and engineers are used to the idea of writing concurrent code as it’s such a vital part of making fast and responsive code. 
&lt;/p&gt;

&lt;blockquote&gt;
&lt;a href="https://developer.apple.com/videos/play/wwdc2021-102/?time=1209"&gt;Concurrency enables your apps to perform multiple tasks at the same time, which helps your apps stay responsive to user input while doing work in the background, like a weather app fetching forecast data while the user selects a city.&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The problem? Swift never had native support for concurrent code, so it was unnecessarily difficult to write good concurrent code. Apple’s new approach to this is &lt;strong&gt;Structured Concurrency&lt;/strong&gt;. Actors are an industry standard and are vital to safe concurrent programming. 
&lt;/p&gt;

&lt;blockquote&gt;
&lt;a href="https://developer.apple.com/videos/play/wwdc2021-102/?time=1483"&gt;Conceptually, an actor is an object that protects its own state by only providing mutually exclusive access. This completely eliminates concurrent access and the low-level data races that come with it. &lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Actors’ are now a first class citizen in Swift and have a much simpler declaration:
&lt;/p&gt;

&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F3n6FJUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x29vjw5swqvo40hn01xd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F3n6FJUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x29vjw5swqvo40hn01xd.png" alt="alt_text" title="image_tooltip"&gt;&lt;/a&gt;
 

&lt;/p&gt;

&lt;p&gt;
Another benefit is MainActor, which lets you decorate a function to always run on the main thread. This is vital for API calls that are needed for the UI.
&lt;/p&gt;

&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--03djmYTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vket45ofwyu1gd9qunvw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--03djmYTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vket45ofwyu1gd9qunvw.png" alt="alt_text" title="image_tooltip"&gt;&lt;/a&gt;

&lt;/p&gt;


&lt;h2&gt;Swift Playgrounds&lt;/h2&gt;


&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7X6GsG3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v1usqhckjjdwl88fkn5r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7X6GsG3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v1usqhckjjdwl88fkn5r.png" alt="alt_text" title="image_tooltip"&gt;&lt;/a&gt;
 
&lt;/p&gt;

&lt;p&gt;
This year, Swift playgrounds 4 allows you to work on your ideas wherever you go. It allows you to switch between Playgrounds and Xcode. Once you have created an app, you can even publish your app to TestFlight right from the Playgrounds app. 
&lt;/p&gt;


&lt;h2&gt;VR and AR Kits&lt;/h2&gt;


&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I9d55oxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4l1bqcsnu0jfy4j1papb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I9d55oxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4l1bqcsnu0jfy4j1papb.png" alt="alt_text" title="image_tooltip"&gt;&lt;/a&gt;
 

&lt;/p&gt;

&lt;p&gt;
You can now add cool effects to your AR objects with Custom metal shaders and dynamic textures. You can see these effects in the Birthday Cake demo with confetti falling around the object.
&lt;/p&gt;


&lt;h2&gt;Metal Improvements&lt;/h2&gt;


&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v0bi6tKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dp17f09ljn1edukc5r30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v0bi6tKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dp17f09ljn1edukc5r30.png" alt="alt_text" title="image_tooltip"&gt;&lt;/a&gt;

&lt;/p&gt;

&lt;p&gt;
One thing that stood out to me as a Game Engineer is that you can now have more control over the display refresh rate. Especially if you are developing games that are going to run on the IPad Pro with ProMotion or on Macs that are connected to high end monitors, having control over the refresh rate can be useful for making your game look like it’s running smoothly!
&lt;/p&gt;

&lt;p&gt;
Game controller support is also easier to add now, with haptic support. You can add a new on screen controller with only a few lines of code. 
&lt;/p&gt;


&lt;h2&gt;Notifications&lt;/h2&gt;


&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RDKtFfRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkyhks52rdqbb2zrqcvh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDKtFfRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkyhks52rdqbb2zrqcvh.png" alt="alt_text" title="image_tooltip"&gt;&lt;/a&gt;

&lt;/p&gt;

&lt;p&gt;
iOS is now changing how notifications work and at what level they are delivered. Focus allows the user to select what types of notifications are delivered. There are now 4 levels of notifications: Low, Active, Time Sensitive, and Urgent. Notifications summary allows users to get a brief overview of what was delivered with some marks of relevance. 
&lt;/p&gt;




&lt;p&gt;
There was lots more covered, but those are the highlights that stuck out to me. &lt;strong&gt;Let me know what you found interesting in the comments below!&lt;/strong&gt;
&lt;/p&gt;

</description>
      <category>swift</category>
      <category>wwdc</category>
      <category>news</category>
      <category>ios</category>
    </item>
    <item>
      <title>How Did I build My First React Package</title>
      <author>Ziad Adeela</author>
      <pubDate>Sun, 13 Jun 2021 21:17:17 +0000</pubDate>
      <link>https://dev.to/ziadadeela/how-did-i-build-my-first-react-package-3f3l</link>
      <guid>https://dev.to/ziadadeela/how-did-i-build-my-first-react-package-3f3l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;There are a lot of use cases that require the concept of repetition or recurring. A basic example for that is recurring events.&lt;/p&gt;

&lt;p&gt;A highly customizable component that you can plug into your project to have the recurring logic in no time is quite needed for such cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#development-process"&gt;
  &lt;/a&gt;
  Development Process
&lt;/h2&gt;

&lt;p&gt;At first, I didn't have the full picture of how my component will look like, what will be the end result, what are the internal components, or how can I make it as customizable as possible. Since recurring logic is mostly used with calendar events, The first step I did is checking existing behavior in different well-known calendars such as Google Calendar and Outlook Calendar. After that, I was able to imagine the main parts of my component, which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Start Date&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Frequency&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ending Condition&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;if it's all day or with Start and End Time.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#make-it-work-make-it-better-ideology"&gt;
  &lt;/a&gt;
  "Make it work, Make it better" Ideology
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#make-it-work"&gt;
  &lt;/a&gt;
  Make it work
&lt;/h4&gt;

&lt;p&gt;When I started the development process, I had one big react component that contains all the logic of the main parts I mentioned. I built the general structure from UI perspective with some stylings here and there until I got the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dVtNLGSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7caz239lwfq752x6fee0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dVtNLGSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7caz239lwfq752x6fee0.png" alt="React Recurrence general structure."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step was defining my recurrence object and the type of each internal field. And here it came the blessings of typescript. At first, I had some difficulties dealing with it, but then, I realized how helpful it is.&lt;/p&gt;

&lt;p&gt;After that, I defined the click/change events for each input I had in the component in order to correctly fill the recurrence object fields.&lt;/p&gt;

&lt;p&gt;So I got a working component! (but really, not a one I can be proud of yet, nor a customizable one. 😏)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#make-it-better"&gt;
  &lt;/a&gt;
  Make it better
&lt;/h4&gt;

&lt;p&gt;The most challenging part during the component development is the continuous thoughts of how can I make it better. Making a component better is by making it cleaner as code along with a cleaner logical separation into sub-components.&lt;br&gt;
More importantly, make it as customizable as possible by thinking of other use cases that the consumers or the users of your component will face  while using it. Of course, adding some unit tests is another strength to make sure nothing breaks when any refactor is done in any part of the component.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Component Separation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The following GIF sums up the process of separating the large component I started with, into  sub components. Each sub-component represents the main parts I mentioned earlier since each part is a separated logic and can live inside its own component.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7JXwDrlM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws8uphi36p4df0hhzbhy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7JXwDrlM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws8uphi36p4df0hhzbhy.gif" alt="Internal Components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://reactjs.org/docs/context.html"&gt;React Context&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After doing the components separation, I first used the tradition way in react for passing the data between the children which is using props. But then, I realized that the result was a tree of components and some props needed to be passed into deeper children. Here, React Context came into play.&lt;/p&gt;

&lt;p&gt;The first advantage I had from using Context is that the recurrence object is shared between the sub-components and no need to pass each field as a prop. &lt;/p&gt;

&lt;p&gt;Another advantage was giving the consumer the flexibility of structuring the sub-components according to their needs. As a result of this, the component can be used in either the default structure:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;
  &lt;span class="na"&gt;recurrence&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;recurrence&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleRecurrenceChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Or in a custom one:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;
  &lt;span class="na"&gt;recurrence&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;recurrence&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleRecurrenceChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;
      &lt;span class="na"&gt;container&lt;/span&gt;
      &lt;span class="na"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'column'&lt;/span&gt;
      &lt;span class="na"&gt;justify&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'center'&lt;/span&gt;
      &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'center'&lt;/span&gt;
      &lt;span class="na"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt; &lt;span class="na"&gt;item&lt;/span&gt; &lt;span class="na"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StartDateSelector&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FrequencySelector&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt; &lt;span class="na"&gt;item&lt;/span&gt; &lt;span class="na"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;EndingConditionSelector&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt; &lt;span class="na"&gt;item&lt;/span&gt; &lt;span class="na"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;TimeSelector&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Styling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://material-ui.com/styles/basics/"&gt;Material UI styling&lt;/a&gt; solution was the choice to build a dynamic UI for the component.&lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://storybook.js.org/"&gt;Storybook&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Storybook helped a lot in representing the different states of the recurrence component along with the subcomponents in an isolated way. &lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Unit Tests Using &lt;a href="https://jestjs.io/docs/tutorial-react"&gt;Jest&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unit tests helped me a lot when I reached the refactor part to make my component better. I wanted to make sure that no change will affect the logic of the component. &lt;/p&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#useful-tools"&gt;
  &lt;/a&gt;
  Useful Tools
&lt;/h2&gt;

&lt;p&gt;The following tools made my life easier while developing the component and publishing it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/transitive-bullshit/create-react-library"&gt;create-react-library&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This package helps a lot when creating a new react library since it saves you from all the boilerplate code and the setup needed. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/sindresorhus/np"&gt;np&lt;/a&gt;&lt;br&gt;
This package makes your life easier when dealing with publishing and releasing your component to NPM.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;A live demo for the component can be found &lt;a href="https://ziadadeela.github.io/react-recurrence/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-repository"&gt;
  &lt;/a&gt;
  Github Repository
&lt;/h2&gt;

&lt;p&gt;Feel free to review the component to give any technical feedback or drop any suggestions on how to make it even more customizable. You can find it &lt;a href="https://github.com/ziadadeela/react-recurrence"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-help"&gt;
  &lt;/a&gt;
  Get Help
&lt;/h2&gt;

&lt;p&gt;A great source for getting help around the library or the tool you're using is its community. Most of the times you will find people to help you when you're stuck or to take their opinion in some cases to make sure you're following the best practice of the tool.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.reactiflux.com/"&gt;Reactiflux&lt;/a&gt;&lt;/strong&gt; helped a lot in React, Context, and Jest for some of the cases I faced in react-recurrence. Same thing regarding &lt;a href="https://storybook.js.org/community"&gt;Storybook&lt;/a&gt; community.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>frontend</category>
      <category>recurrence</category>
    </item>
    <item>
      <title>Add Notifications to your React application</title>
      <author>Semir Teskeredzic</author>
      <pubDate>Sun, 13 Jun 2021 20:32:24 +0000</pubDate>
      <link>https://dev.to/semirteskeredzic/add-notifications-to-your-react-application-epc</link>
      <guid>https://dev.to/semirteskeredzic/add-notifications-to-your-react-application-epc</guid>
      <description>&lt;p&gt;Proper notifications are crucial for functional UI. Imagine you are using one of many web applications and you enter a wrong password or any kind of input just to see that nothing happens and you are left baffled. That is why integrating notifications, alerts or other kind of signals what has happened is important for any application with user interface.&lt;/p&gt;

&lt;p&gt;In this post I will go through the simple integration of &lt;code&gt;react-notifications-component&lt;/code&gt; library that has some 23k of weekly downloads on npmjs.com.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#add-package-to-your-project"&gt;
  &lt;/a&gt;
  Add package to your project
&lt;/h1&gt;

&lt;p&gt;You can use npm to add this package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm i react-notifications-component
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you need to build library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm run build:library:dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You are ready to go! Now you can start your application&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#import-and-setup"&gt;
  &lt;/a&gt;
  Import and Setup
&lt;/h1&gt;

&lt;p&gt;Now in your App.js you need to import &lt;code&gt;ReactNotification&lt;/code&gt; and its &lt;code&gt;css&lt;/code&gt; file like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import ReactNotification from 'react-notifications-component'
import 'react-notifications-component/dist/theme.css'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we put &lt;code&gt;ReactNotification&lt;/code&gt; component alongdside of our main app content in order not to collide with other absolute positioned elements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App() {
  return (
    &amp;lt;div&amp;gt;
        &amp;lt;ReactNotification /&amp;gt;
        &amp;lt;Application /&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are now ready to use notification when we need it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#use-in-component"&gt;
  &lt;/a&gt;
  Use in Component
&lt;/h1&gt;

&lt;p&gt;Let's say you have a small component that throws a great success notification when you enter your name and click hello button and it throws bad red notification when you don't enter your name but nevertheless click hello button.&lt;/p&gt;

&lt;p&gt;First we import &lt;code&gt;store&lt;/code&gt; from our new package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { store } from 'react-notifications-component'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notification is called like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;store.addNotification({
  title: "Success!",
  message: "You have been successful!",
  type: "success",
  insert: "top",
  container: "top-right",
  animationIn: ["animate__animated", "animate__fadeIn"],
  animationOut: ["animate__animated", "animate__fadeOut"],
  dismiss: {
    duration: 5000,
    onScreen: false
  }
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see the notification in action we will create a component that will evaluate if the user entered name, if yes then success notification will be executed if not then danger notification will be executed. So here is a simple component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from "react";
import { store } from "react-notifications-component";

function Application() {
  const [name, setName] = useState("");

  const handleChange = (e) =&amp;gt; {
    setName(e.target.value);
  };

  const handleSubmit = (e) =&amp;gt; {
    e.preventDefault();
    if (name) {
      store.addNotification({
        title: "Great",
        message: `Hello ${name}`,
        type: "success",
        insert: "top",
        container: "top-right",
        animationIn: ["animate__animated", "animate__fadeIn"],
        animationOut: ["animate__animated", "animate__fadeOut"],
        dismiss: {
          duration: 5000,
          onScreen: false
        }
      });
      setName("");
    } else {
      store.addNotification({
        title: "OOh OOh!",
        message: "Don't be shy!",
        type: "danger",
        insert: "top",
        container: "top-right",
        animationIn: ["animate__animated", "animate__fadeIn"],
        animationOut: ["animate__animated", "animate__fadeOut"],
        dismiss: {
          duration: 5000,
          onScreen: false
        }
      });
    }
  };

  return (
    &amp;lt;&amp;gt;
      &amp;lt;input
        value={name}
        onChange={(e) =&amp;gt; handleChange(e)}
        placeholder="Enter name here!"
      /&amp;gt;
      &amp;lt;button onClick={(e) =&amp;gt; handleSubmit(e)}&amp;gt;Say Hello&amp;lt;/button&amp;gt;
    &amp;lt;/&amp;gt;
  );
}

export default Application;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simple setup is available in codesandbox &lt;a href="https://codesandbox.io/s/old-http-dznz8?file=/src/Application.js"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can configure notifications object with values:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#position"&gt;
  &lt;/a&gt;
  Position:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;container:
- top-left
- top-right
- top-center
- center
- bottom-left
- bottom-right
- bottom-center
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#types"&gt;
  &lt;/a&gt;
  Types:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type:
- success
- danger
- info
- default
- warning
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find more in the package documentation &lt;a href="https://www.npmjs.com/package/react-notifications-component"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for reading and happy notifying!&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Review: a React Todo App Tutorial                                 </title>
      <author>Jonathan Hammond</author>
      <pubDate>Sun, 13 Jun 2021 20:11:38 +0000</pubDate>
      <link>https://dev.to/jonamichahammo/review-a-react-todo-app-tutorial-i52</link>
      <guid>https://dev.to/jonamichahammo/review-a-react-todo-app-tutorial-i52</guid>
      <description>&lt;p&gt;Recently I followed along a &lt;a href="https://www.youtube.com/watch?v=pCA4qpQDZD8"&gt;'Build A Todo App With REACT'&lt;/a&gt; tutorial by Dev Ed on YouTube. I wanted to review and write about what I learned, as this is a new technique I would like to add into my habits.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Note: this is an ongoing draft and is currently only 1/3 done. If you would like to get straight to the tutorial, just click above. Otherwise, enjoy what I have reviewed thus far!&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Obligatory Spoiler Alert&lt;/strong&gt; The tutorial was amazing. You create a Todo list. It's not perfectly mobile responsive. Some of the concepts you will learn about by following this tutorial include Component building, Properties (prop) drilling, State managing and storing through the &lt;code&gt;localStorage&lt;/code&gt; object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-begin"&gt;
  &lt;/a&gt;
  How do you begin?
&lt;/h2&gt;

&lt;p&gt;Ed begins with a simple introduction to the project, explaining that this is  straightforward Todo app in React, which gives you a good grasp on how to make future projects in React as well. He also adds a quick aside about his health, which overall I enjoyed for one particular reason (other than that he is focusing on his health!). You will notice early on that Ed is a very friendly and humorous content creator. If this style is your cup of tea, then I think you will have a lot of fun learning through his content.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;One plus about this video is that he installs react in the beginning, so if you are new to coding in some way, don't be afraid.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After your &lt;code&gt;react app&lt;/code&gt; is created, you will delete several unnecessary files, and run the app with &lt;code&gt;npm start&lt;/code&gt; as your first test.&lt;/p&gt;

&lt;p&gt;One of the first items that are covered is the usage of &lt;code&gt;className&lt;/code&gt; while writing JSX code. The reason for this is that, while you are basically writing what looks like HTML, you are still writing this in JavaScript, and as you may already know, the &lt;code&gt;class&lt;/code&gt; keyword is a reserved keyword, but worry not. If you forget and you define an HTML attribute with class on accident, the app will let you know shortly afterwards.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-quick-aside-past-code-required"&gt;
  &lt;/a&gt;
  A Quick Aside - Past Code Required
&lt;/h3&gt;

&lt;p&gt;Ed references a previously made project of the same app except in vanilla JavaScript, which you can find &lt;a href="https://github.com/developedbyed/vanilla-todo"&gt;here&lt;/a&gt;. You won't be covering custom CSS much at all in this project, so this is where you will be getting a lot of the content to copy over.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h2&gt;

&lt;p&gt;The components covered in this tutorial are named &lt;code&gt;&amp;lt;Form&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;TodoList&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;Todo&amp;gt;&lt;/code&gt;. The Form component is essentially an input element, a dropdown option menu, and a submit button.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#form"&gt;
  &lt;/a&gt;
  Form
&lt;/h3&gt;

&lt;p&gt;You begin by importing React. You have the option of creating components through the function keyword, but the author chooses to go with arrow function syntax. This makes sense, because it is 2021, React came out in 2013, and ES6 syntax (such as arrow functions) came out in 2015. But if you prefer to go with the function keyword, both should work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-quick-aside-using-raw-return-endraw-in-jsx"&gt;
  &lt;/a&gt;
  A Quick Aside - Using &lt;code&gt;return&lt;/code&gt; in JSX
&lt;/h3&gt;

&lt;p&gt;It took me a few projects to remember that parentheses are used in JSX to return multi-line JSX code. I believe this is because JavaScript doesn't support functions that return multiple values, though you can wrap multiple values into an array or an object and return that. I think that is what is going on with return ( ), but I am not 100% sure. You can read more about this &lt;a href="https://scotch.io/starters/react/returning-jsx"&gt;here&lt;/a&gt; and &lt;a href="https://www.javascripttutorial.net/javascript-return-multiple-values/"&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After creating your component, you will follow up the function with &lt;code&gt;export default [component name]&lt;/code&gt; and import the item within your App.js file.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;best practice&lt;/em&gt; that seems apparent is to name your component after your file name. Here is when TodoList is first created, but there was not enough time spent on it for me to write about it yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h2&gt;

&lt;p&gt;Ed describes how the React library works with data, and how you will be telling your App "what to do."&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Based on that data, the application is going to react. The whole goal is to get our Todos, is to get any inputs or whatever that we're using on our web app, and get them into state ... Once it's in state, your UI is going to automatically react to all the changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#a-quick-aside-state"&gt;
  &lt;/a&gt;
  A Quick Aside - State
&lt;/h3&gt;

&lt;p&gt;Simplilearn has a great short video on what State is in ReactJS and can be viewed &lt;a href="https://www.youtube.com/watch?v=DPdc5Z-Tf4U"&gt;here&lt;/a&gt;. In a nutshell, State "is an object that stores the values of properties belonging to a component that could change over a period of time." These changes are generally updated by event handlers. They can change the data they hold over time, and store the data that has to be rendered to view. Dev Ed also has an entire hour-long video (in a playlist!) on React State and Props that can be found &lt;a href="https://www.youtube.com/watch?v=dMH1_YtUTSQ"&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usestate"&gt;
  &lt;/a&gt;
  useState
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useState&lt;/code&gt; is a React hook that lets you &lt;a href="https://daveceddia.com/usestate-hook-examples/"&gt;add state to function components.&lt;/a&gt;. What is a hook? According to &lt;a href="https://reactjs.org/docs/hooks-state.html"&gt;React documentation:&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Hook is a special function that lets you "hook into" React features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;useState&lt;/code&gt; hook is called directly inside a component. Calling it declares a state variable, which can be named basically anything. This variable preserves some values between function calls. It is basically a newer version of &lt;code&gt;this.state&lt;/code&gt;, if you have ever initialized state in React by using class components. The only argument passed to this hook is the initial state, such as an empty string or array, or even a default dropdown option value (as we see in this tutorial with &lt;code&gt;value="all"&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appjs-coding-a-text-state"&gt;
  &lt;/a&gt;
  App.js - Coding a text &lt;em&gt;state&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;[a, b]&lt;/code&gt; pattern consists of an actual value, followed by a function that allows you to change this value. For example, this is how Ed declares a constant &lt;code&gt;useState&lt;/code&gt; hook of an empty string:&lt;br&gt;
&lt;code&gt;const [inputText, setInputText] = useState("");&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Within our App.js file component (&lt;code&gt;App()&lt;/code&gt;), we return multi-line JSX including some basic HTML, as well as our components &lt;code&gt;&amp;lt;Form&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;TodoList&amp;gt;&lt;/code&gt;. Within our Form component, we pass our &lt;code&gt;inputText&lt;/code&gt; and &lt;code&gt;setInputText&lt;/code&gt; state as properties. I was able to better understand this by reading this great article (~10-minute read) &lt;a href="https://www.pluralsight.com/guides/how-to-send-state-of-current-component-as-a-parameter-to-another-external-method-using-react"&gt;on PluralSight.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#formjs-creating-raw-inputtexthandler-endraw-"&gt;
  &lt;/a&gt;
  Form.js - Creating &lt;code&gt;inputTextHandler&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Ed next shows us how to "arrive to this position" (in reference to our text state in the App.js file). So, we write a function that updates a piece of state within our Form component. He creates functions with the suffix &lt;code&gt;Handler&lt;/code&gt; so we know what they do. This one, &lt;code&gt;inputTextHandler&lt;/code&gt;, takes one argument as a parameter - the event. To &lt;code&gt;console.log&lt;/code&gt; our event as a test, Ed adds an &lt;code&gt;onChange&lt;/code&gt; event listener to our &lt;code&gt;&amp;lt;input/&amp;gt;&lt;/code&gt; element like so:&lt;br&gt;
&lt;code&gt;&amp;lt;input onCHange={inputTextHandler}&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Each time our input changes, this function is being ran. The event tells [us] information about what just happened on this input.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Console logging &lt;code&gt;e.target&lt;/code&gt; gives us the input element itself, and logging &lt;code&gt;e.target.value&lt;/code&gt; prints out exactly what we we enter into the input box, nothing more and nothing less. Great success!&lt;/p&gt;

&lt;p&gt;Next, what we do is change the aforementioned state's &lt;code&gt;value&lt;/code&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#appjs-passing-down-raw-setinputtext-endraw-as-a-prop"&gt;
  &lt;/a&gt;
  App.js - Passing down &lt;code&gt;setInputText()&lt;/code&gt; as a prop
&lt;/h2&gt;

&lt;p&gt;This will be the function that updates the input text. As Ed says, the &lt;code&gt;inputText&lt;/code&gt; value will be like "our data/variable that we want to inject". We are then able to access these items by heading back into the Form.js file and passing props as a parameter into our Form component like as you see below:&lt;br&gt;
&lt;code&gt;const Form = (props) =&amp;gt; { ... }&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a-quick-aside-destructuring-props"&gt;
  &lt;/a&gt;
  A Quick Aside - Destructuring props
&lt;/h3&gt;

&lt;p&gt;Destructuring Props is a simple concept, but it takes some time getting used to. Overall this makes our code more readable and clear, especially when passing down props in React. More on this can be read &lt;a href="https://medium.com/@lcriswell/destructuring-props-in-react-b1c295005ce0"&gt;here in a very straightforward Medium article!&lt;/a&gt;. Doing this in our Form component allows us to write code that looks more like this:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const Form = ({ setInputText }) =&amp;gt; {&lt;br&gt;
  setInputText(e.target.value); &lt;br&gt;
}&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Having state in App.js allows us to use it anywhere in our application. Per Ed,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every piece of state that you have, data and React automatically updates to everything (as long as you use it in different places), ... and renders it out for us.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#a-quick-aside-react-developer-tools"&gt;
  &lt;/a&gt;
  A Quick Aside - React Developer Tools
&lt;/h3&gt;

&lt;p&gt;This is a great Chrome extension for the ReactJS library, which allows you to inspect the React component hierarchies in the Chrome Developer Tools. &lt;a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en"&gt;More information on this can be found here!&lt;/a&gt; This is great for seeing our state and props, just by hovering of them in DevTools. This includes other data such as hooks!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appjs-coding-a-todos-state"&gt;
  &lt;/a&gt;
  App.js - Coding a todos &lt;em&gt;state&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;As implied, this state will be for coding our Todos. Since we will be storing an array of objects (a collection/list of items), Ed instructs us to use an empty array in our hook:&lt;br&gt;
&lt;code&gt;const [todos, setTodos] = useState([]);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The next goal is to submit data and create an object when we do so. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#formjs-creating-raw-submittodohandler-endraw-"&gt;
  &lt;/a&gt;
  Form.js - Creating &lt;code&gt;submitTodoHandler&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This function also takes an event argument as a parameter. We begin this function by tackling the issue of the browser window refreshing each time the submit-type &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; is clicked, which is a natural out-of-the-box behavior. Fixing this is super easy:&lt;br&gt;
&lt;code&gt;e.preventDefault();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, the page refreshing will not be prevented until we add the event handler function via JSX into our &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; attributes:&lt;br&gt;
&lt;code&gt;&amp;lt;button onClick={submitTodoHandler}&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-quick-aside-jsx"&gt;
  &lt;/a&gt;
  A Quick Aside - JSX
&lt;/h3&gt;

&lt;p&gt;JavaScript XML (JSX) syntax is an extension to the JavaScript language syntax. Their tags have a name, attributes, and children. It transpiles to pure JS. It uses camelCase as a property naming convention, hence such attributes as &lt;code&gt;onClick&lt;/code&gt; and &lt;code&gt;className&lt;/code&gt;. An example of this information can be viewed &lt;a href="https://www.youtube.com/watch?v=7fPXI_MnBOY&amp;amp;t=5s"&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Understanding this syntax will help out a lot, in case you run into any confusion during this tutorial. What we are doing above is passing our event handler function &lt;code&gt;submitTodoHandler&lt;/code&gt; without the parentheses into our component. I could be mistaken, but based off Googling I believe we are binding our function to the component, so that our context remains the same even though we are passing our function from one object to another, and are doing so from JavaScript syntax to JSX syntax. Our event handlers are passed as properties.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By default you can't access properties, state and component methods like setState from event handlers. To do so, you need to bind them explicitly. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I could be wrong about my interpretation of this. However, the reason why I brought this up is so you, the reader, spent some time understanding that if your event handler is not passed into wherever you use it, it won't work simply by declaring the function above the return value. More information on what I've read can be found &lt;a href="https://reactkungfu.com/2015/07/why-and-how-to-bind-methods-in-your-react-component-classes/"&gt;here, albeit a little outdated&lt;/a&gt;, and here in the &lt;a href="https://reactjs.org/docs/faq-functions.html"&gt;React documentation&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Service Reliability Math That Every Engineer Should Know</title>
      <author>mrick</author>
      <pubDate>Sun, 13 Jun 2021 19:52:19 +0000</pubDate>
      <link>https://dev.to/mrick/service-reliability-math-that-every-engineer-should-know-afg</link>
      <guid>https://dev.to/mrick/service-reliability-math-that-every-engineer-should-know-afg</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wgFiKu7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/311mw93ltrjizvstm43i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wgFiKu7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/311mw93ltrjizvstm43i.png" alt="Screen Shot 2021-06-09 at 9.50.37 AM"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>devops</category>
      <category>codenewbie</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How to use Database Sharding and Scale an  ASP.NET Core Microservice Architecture</title>
      <author>Christian Zink</author>
      <pubDate>Sun, 13 Jun 2021 19:37:25 +0000</pubDate>
      <link>https://dev.to/christianzink/how-to-use-database-sharding-and-scale-an-asp-net-core-microservice-architecture-5h5l</link>
      <guid>https://dev.to/christianzink/how-to-use-database-sharding-and-scale-an-asp-net-core-microservice-architecture-5h5l</guid>
      <description>&lt;p&gt;Load Balance a C# ASP.NET Core Service and Use MySql App-Layer Sharding. Shows the Concepts, Which Also Apply to MongoDB, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sVNrTWC4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AqfNgu11fAZHUkZeohvUzzA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sVNrTWC4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AqfNgu11fAZHUkZeohvUzzA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the &lt;strong&gt;big advantages of microservices&lt;/strong&gt; is, that they can be &lt;strong&gt;scaled independently&lt;/strong&gt;. This article shows the &lt;strong&gt;benefits and challenges of scaling&lt;/strong&gt; one &lt;strong&gt;microservice and its database&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You will create a &lt;strong&gt;working example application&lt;/strong&gt; and manually &lt;strong&gt;implement application-layer sharding&lt;/strong&gt;. It shows how to &lt;strong&gt;choose a shard key&lt;/strong&gt; based on the use-cases and data model. This helps to apply the same principles to DBMS with integrated scaling like MongoDB, etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Further reading: &lt;a href="https://dev.to/alex_barashkov/microservices-vs-monolith-architecture-4l1m"&gt;Microservices vs. Monolith Architecture&lt;/a&gt; and &lt;a href="https://dev.to/renaissanceengineer/database-sharding-explained-2021-database-scaling-tutorial-5cej"&gt;Database Sharding Explained- 2021 Database Scaling Tutorial&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is the first of two parts. You will implement the microservice and use a sharded DB.&lt;/p&gt;

&lt;p&gt;In the second part, you will scale and run multiple container instances of the microservice and databases. You will use docker compose and a load balancer. Finally, you run JMeter load tests to see how the application scales when using a different number of instances.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-usecases-and-datamodell"&gt;
  &lt;/a&gt;
  1. Usecases and Datamodell
&lt;/h2&gt;

&lt;p&gt;The example application consists of a &lt;strong&gt;user and a post microservice&lt;/strong&gt;. They &lt;strong&gt;communicate via messages&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ixHPzMWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ADN2QzWP1oFpvFM0fh9gKrQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ixHPzMWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ADN2QzWP1oFpvFM0fh9gKrQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See also my previous article &lt;a href="https://dev.to/christianzink/how-to-build-an-event-driven-asp-net-core-microservice-architecture-4fnh"&gt;How to Build an Event-Driven ASP.NET Core Microservice Architecture&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;User&lt;/em&gt; microservice handles adding and modifying users. The &lt;em&gt;Post&lt;/em&gt; microservices handles viewing and adding posts. There is far more interaction with the &lt;em&gt;Post&lt;/em&gt; microservice. So when the load to the app increases &lt;strong&gt;the &lt;em&gt;Post&lt;/em&gt; microservice will be the first microservice that needs to scale&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The name of the author is part of the &lt;em&gt;PostService&lt;/em&gt; bounded context and therefore the &lt;em&gt;Post&lt;/em&gt; microservice. Adding and modifying authors is done in the &lt;em&gt;User&lt;/em&gt; microservice. The &lt;em&gt;User&lt;/em&gt; microservice sends events when a new user is added or a username changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logical-data-model-of-the-postservice"&gt;
  &lt;/a&gt;
  Logical Data Model of the &lt;em&gt;PostService&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pbHqcnBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AN-i4KoRko3WrIakewYLykQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pbHqcnBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AN-i4KoRko3WrIakewYLykQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Users can write posts in categories. They can also read the posts by category including the author name. Newest posts are on top. The categories are fixed and change seldom.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Based on these use-cases I decided to shard by category:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y91ALsWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2056/1%2AvBwiakd1uV_MnOKckNe-8A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y91ALsWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2056/1%2AvBwiakd1uV_MnOKckNe-8A.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-implement-the-microservice"&gt;
  &lt;/a&gt;
  2. Implement the Microservice
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Install &lt;a href="https://visualstudio.microsoft.com/en/vs/community/"&gt;Visual Studio Community&lt;/a&gt;&lt;/strong&gt; (it’s free) with the ASP.NET and web development workload.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a solution&lt;/strong&gt; and add an ASP.NET Core 5 Web API project with the name “&lt;em&gt;PostService&lt;/em&gt;”. Disable HTTPS and activate OpenAPI Support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install the following NuGet packages&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Microsoft.EntityFrameworkCore.Tools&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Microsoft.EntityFrameworkCore.Sqlite&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Newtonsoft.Json&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Create the Entities&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The index of the &lt;em&gt;Post&lt;/em&gt; entity should speed up the retrieval of the latest posts in a category:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The Version in the &lt;em&gt;User&lt;/em&gt; entity will later help to handle out-of-order messages:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Create the PostServiceContext&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Add connection strings for the shards in appsettings.Development.json&lt;/strong&gt; (you will use two shards during debugging)&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Add the &lt;em&gt;DataAccess&lt;/em&gt; Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GetConnectionString(string category)&lt;/code&gt; calculates the hash of the CategoryId. The first part of the hash modulo the number of configured shards (connection strings) determines the shard for the given category.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;InitDatabase&lt;/em&gt; drops and recreates all tables in all shards and inserts dummy users and categories.&lt;/p&gt;

&lt;p&gt;The other methods create and load posts.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Register DataAccess as a singleton in Startup.cs&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Create the PostController&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It uses the &lt;em&gt;DataAccess&lt;/em&gt; class&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#3-access-a-database-from-the-postservice"&gt;
  &lt;/a&gt;
  3. Access a Database from the PostService
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Install &lt;a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows"&gt;Docker Desktop&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create two MySql Containers (each command as one line)&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\dev&amp;gt;docker run -p 3310:3306 --name=mysql1 -e MYSQL_ROOT_PASSWORD=pw -d mysql:5.6

C:\dev&amp;gt;docker run -p 3311:3306 --name=mysql2 -e MYSQL_ROOT_PASSWORD=pw -d mysql:5.6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Start the &lt;em&gt;Post&lt;/em&gt; service in Visual Studio. The browser opens at &lt;a href="http://localhost:5001/swagger/index.html"&gt;http://localhost:5001/swagger/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use the swagger UI to interact with the service:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Init the Databases with 100 users and 10 categories:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GloZxkU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AfBl-wzNlTuKb9U2O9eJuPA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GloZxkU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AfBl-wzNlTuKb9U2O9eJuPA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add a post to “Category1”:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "title": "MyTitle",
  "content": "MyContent",
  "userId": 1,
  "categoryId": "Category1"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Read the top 10 posts&lt;/strong&gt; in “Category1” to see your new post:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5rRfhKU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AqrfNkc28IBcL-Lp7Qg3ONQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rRfhKU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AqrfNkc28IBcL-Lp7Qg3ONQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect to the database containers and &lt;strong&gt;verify which database contains the new post&lt;/strong&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\dev&amp;gt;docker container exec -it mysql1 /bin/sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Login to MySql with the password “pw” and read the posts:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OryUVK1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Adi3f8KF_WZBu0NY59Mno8w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OryUVK1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Adi3f8KF_WZBu0NY59Mno8w.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second instance does not contain any post:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\dev&amp;gt;docker container exec -it mysql2 /bin/sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oWVBYumc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AGVUXZpvsfZIjDcSTr8JM2Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oWVBYumc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AGVUXZpvsfZIjDcSTr8JM2Q.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-final-thoughts-and-outlook"&gt;
  &lt;/a&gt;
  4. Final Thoughts and Outlook
&lt;/h2&gt;

&lt;p&gt;You created a &lt;strong&gt;working application and implemented application-layer sharding&lt;/strong&gt; and used the concept of shard keys.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;second part&lt;/strong&gt;, you will &lt;strong&gt;scale&lt;/strong&gt; and &lt;strong&gt;run multiple container instances&lt;/strong&gt; of the microservice and database. You will use &lt;strong&gt;docker compose&lt;/strong&gt; and a &lt;strong&gt;load balancer&lt;/strong&gt;. You will then run &lt;strong&gt;JMeter load tests&lt;/strong&gt; to see how the application scales when using a different number of instances. Finally, you will &lt;strong&gt;simulate user events&lt;/strong&gt; from the &lt;em&gt;User&lt;/em&gt; microservice via &lt;strong&gt;RabbitMQ&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please contact me if you have any questions, ideas, or suggestions.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>architecture</category>
      <category>dotnet</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Understanding async and await in javascript</title>
      <author>Avinash Kr</author>
      <pubDate>Sun, 13 Jun 2021 19:26:05 +0000</pubDate>
      <link>https://dev.to/aviiwithu/understanding-async-and-await-in-javascript-4fka</link>
      <guid>https://dev.to/aviiwithu/understanding-async-and-await-in-javascript-4fka</guid>
      <description>&lt;p&gt;Async await is another way of handling promises in JavaScript.&lt;br&gt;
One of the main advantage of using it is clean code.&lt;/p&gt;

&lt;p&gt;In this article we will understand with examples and use cases.&lt;/p&gt;

&lt;p&gt;In general, we use .then().catch() to handle promises:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts/1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's handle it using async await&lt;/p&gt;

&lt;p&gt;We can write using function statement or function expression. Both will be valid, only difference is use of anonymous function in function expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//function statement&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//function expression&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
         &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Please keep in mind that we are not handling with error in the above code, the value of response will only be return when operation is success.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-we-handle-error-in-async-await-"&gt;
  &lt;/a&gt;
  HOW CAN WE HANDLE ERROR IN ASYNC AWAIT ??
&lt;/h2&gt;

&lt;p&gt;To handle error in async await, we can use 'try and catch'&lt;/p&gt;

&lt;p&gt;Look at the code below for the same:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;something went wrong in getting post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-handle-multiple-promises-using-async-await-"&gt;
  &lt;/a&gt;
  HOW TO HANDLE MULTIPLE PROMISES USING ASYNC AWAIT ??
&lt;/h2&gt;

&lt;p&gt;suppose we have to fetch user, post and comment in async await.&lt;/p&gt;

&lt;p&gt;Look at the code below and guess how will it work&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/users/1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/posts/1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/comments/1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userRes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;userRes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

           &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postRes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;postRes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

           &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;commentRes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;commentData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;commentRes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;In the above line of code javascript will wait on every line to complete its work, then move to next line. In simple words it will first fetch user, once its is completed, js will fetch post, then comment. Javascript will work synchronously.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-we-make-multiple-fetch-requests-at-the-same-time"&gt;
  &lt;/a&gt;
  CAN WE MAKE MULTIPLE FETCH REQUESTS AT THE SAME TIME??
&lt;/h2&gt;

&lt;p&gt;We can fetch multiple at the same time, every request will be made independently or it will not block other request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allRes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)]);&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;allRes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;finalData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;promise not fulfilled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;In above code, every request will be made in parallel, and value will be returned once resolved, in case of error code in catch will run.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I hope it might helped you to get idea of how to use async await in javascript.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>5 Reasons why to learn EKS practicing</title>
      <author>mariomerco</author>
      <pubDate>Sun, 13 Jun 2021 19:06:29 +0000</pubDate>
      <link>https://dev.to/aws-builders/5-reasons-why-to-learn-eks-practicing-5gaf</link>
      <guid>https://dev.to/aws-builders/5-reasons-why-to-learn-eks-practicing-5gaf</guid>
      <description>&lt;p&gt;Have you ever been in the position of learning some new tool on tech and think &lt;strong&gt;“this is awesome!”&lt;/strong&gt; but when you start applying it find multiple issues that makes it actually harder? Well, if you’ve been there, you definitely work on IT!&lt;/p&gt;

&lt;p&gt;That’s not a secret that information technologies evolve all the time and very quick, making things better and faster, but also some times a bit overwhelming. And even beyond that, this scenario could happen in multiple other domains of knowledge and live experiences! &lt;/p&gt;

&lt;p&gt;Now, landing a more in our topic, Kubernetes in AWS, there are really good examples, documentations, labs and exercises out there that can get you started with some new knowledge, so this gives you the tools as lego pieces to build your own solution, whether from scratch or with some baseline. This is great and works just like that in most of IT pieces. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-kubernetes-is-complicated-too-many-moving-pieces"&gt;
  &lt;/a&gt;
  1. Kubernetes is complicated - too many moving pieces
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wb0d2IGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nk7mpo68acqyj5wcfnq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wb0d2IGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nk7mpo68acqyj5wcfnq.jpg" alt="Complicated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While Kubernetes is getting more and more like a standard when talking about container orchestration, is also truth that handling for production workloads is challenging. Kubernetes is a set of multiple components as a baseline, then start counting as you deploy pods, configmaps, secrets, services, and a long etc (not even talking about CRDs…), so before commiting something to production, it requires testing of, not only the app itself, but it’s infrastructure deployed in Kubernetes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-networking-needs-attention"&gt;
  &lt;/a&gt;
  2. Networking needs attention
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fPn1u3wV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/852epm7i3sb3rljqduk2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fPn1u3wV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/852epm7i3sb3rljqduk2.jpg" alt="Network"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you start deploying your apps (specially if they talk to each other) you immediately will face with DNS, IPs, load balancing, etc. Although most of this is handled with simple concepts by Kubernetes, your underlying infrastructure requires a well established networking infrastructure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-iam-permissions-is-very-granular"&gt;
  &lt;/a&gt;
  3. IAM permissions is very granular
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M_MjZ2el--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a09ukhnz55fmv4uy08xx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M_MjZ2el--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a09ukhnz55fmv4uy08xx.jpg" alt="Permissions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If developers has a wide access to the AWS space, they’ll code their apps using the AWS SDK probably without worrying about permissions… until it gets Kubernetes! The containers will try to request access to the AWS API and, if the IAM role that is embracing the application is not setup with the proper permissions, will simply fail. &lt;/p&gt;

&lt;p&gt;There are multiple solutions for this like &lt;a href="https://github.com/jtblin/kube2iam"&gt;Kube2IAM&lt;/a&gt;, &lt;a href="https://github.com/uswitch/kiam"&gt;KIAM&lt;/a&gt;, and &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html"&gt;IAM Roles for Service Accounts&lt;/a&gt; which, if we are in AWS and EKS (running in EC2 instances), this one is my go-to 😎.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-automation-also-requires-testing"&gt;
  &lt;/a&gt;
  4. Automation also requires testing
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zy5dKyZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7uf3lkg4r44hl3fpkjh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zy5dKyZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7uf3lkg4r44hl3fpkjh.jpg" alt="Automation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Automation is, in most of the cases, related to coding, and coding is also related to bugs. So in this case, I would take the word "practice" replaced by "test". So the CICD workflows that you might want to create is, at the end, code running somewhere, and it can come with issues. That's why having multiple environments (at least a TEST environment) before the production one is important to actually test how the provisioning of your resources are going to happen. &lt;/p&gt;

&lt;p&gt;Kubernetes also falls in this section, because it automates the orchestration of containers based on the configurations that you provide. But if your configs are wrong, they could lead you to a deployment issue or missconfigured environment. &lt;/p&gt;

&lt;p&gt;In summary, always &lt;strong&gt;TEST!&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-watch-out-the-orprie"&gt;
  &lt;/a&gt;
  5. Watch out the $orpri$e$ 💲💲💲
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kxlrs8Fo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trnbijxmqh8chc1tjppy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kxlrs8Fo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trnbijxmqh8chc1tjppy.jpg" alt="Wasting money"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is simple: &lt;strong&gt;The more nodes you add, the more money you pay&lt;/strong&gt;. For example, one of the main ideas of having containers and Kubernetes on top of them is &lt;strong&gt;Autoscaling&lt;/strong&gt;, and there are multiple ways, &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/cluster-autoscaler.html"&gt;Cluster Autoscaling&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/horizontal-pod-autoscaler.html"&gt;Horizontal Pod Autoscaler&lt;/a&gt;, and &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/vertical-pod-autoscaler.html"&gt;Vertical Pod Autoscaler&lt;/a&gt;. The best to set all of this up always depends on the type of application you are building. You'll have to understand how it behaves, what's the best metric to take for scaling, etc. and if this is not taken with care, could scale up without really needing it and costing you much more. &lt;strong&gt;Or, even worst!&lt;/strong&gt; it could scale down very aggressively and damaging its availability and responses, impacting directly the end user! So better be prepared testing scenarios and developing a strategy of reviewing theses tasks as your business increase in end users.&lt;/p&gt;

</description>
      <category>eks</category>
      <category>kubernetes</category>
      <category>aws</category>
      <category>practice</category>
    </item>
    <item>
      <title>Django: Stocker et lire des fichiers sur Amazon S3 en 8 étapes</title>
      <author> Eric Le Codeur</author>
      <pubDate>Sun, 13 Jun 2021 18:36:07 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/django-stocker-et-lire-des-fichiers-sur-amazon-s3-en-8-etapes-3gnh</link>
      <guid>https://dev.to/ericlecodeur/django-stocker-et-lire-des-fichiers-sur-amazon-s3-en-8-etapes-3gnh</guid>
      <description>&lt;p&gt;Si vous désirez plus de contenu francophone comme celui-ci, cliquer &lt;strong&gt;Follow ou &lt;a href="https://twitter.com/EricLeCodeur"&gt;suivez-moi sur Twitter&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#comment-utiliser-le-service-s3-de-amazon-afin-de-stoker-et-lire-des-fichiers-et-des-images-"&gt;
  &lt;/a&gt;
  Comment utiliser le service S3 de Amazon afin de stoker et lire des fichiers et des images ?
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Étape 0:&lt;/strong&gt;&lt;br&gt;
Avoir un project Django déjà créer dans lequel vous aimeriez ajouter la possibilité d'envoyer des fichiers et des images sur Amazon S3 et de les lires par la suite&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Étape 1&lt;/strong&gt;&lt;br&gt;
Créer un compte Amazon S3 (&lt;a href="https://aws.amazon.com/fr/s3/"&gt;https://aws.amazon.com/fr/s3/&lt;/a&gt;) et créer un nouveau bucket lors de la création du bucket, vous pouvez utiliser les valeurs par défaut sauf pour la sécurité s'assurer que 'Block all public access' n'est PAS coché.&lt;/p&gt;

&lt;p&gt;Attention, ne pas mettre de fichiers avec informations sensible dans ce bucket car il est ouvert pour lecture à tous le web!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Étape 2&lt;/strong&gt;&lt;br&gt;
Une fois le bucket créé, ouvrir le bucket et aller à l'onglet &lt;br&gt;
'Permissions'. &lt;/p&gt;

&lt;p&gt;Dans la section 'Bucket Policy' cliquez sur 'Edit' et ajouter ce code et ensuite cliquez sur 'Save changes'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "Version": "2012-10-17",
    "Id": "Policy1623584629734",
    "Statement": [
        {
            "Sid": "Stmt1623584623637",
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::your-bucket-name/*"
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Étape 3&lt;/strong&gt;&lt;br&gt;
Utiliser le service S3 à partir de votre application Django.&lt;/p&gt;

&lt;p&gt;Pour ce faire nous allons installer le package Django Storages et Boto3. &lt;/p&gt;

&lt;p&gt;Django Storages permet de se connecter à différent système de storage comme Amazon S3, Dropbox, Digital Ocean, Google Cloud, etc. &lt;/p&gt;

&lt;p&gt;Boto3 est le SDK Python pour se connecter à Amazon S3&lt;/p&gt;

&lt;p&gt;Dans ce tutoriel nous n'allons pas utiliser directement Boto3. C'est Django Storages qui s'en occupe pour nous.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;django-storages
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;boto3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Étape 4&lt;/strong&gt;&lt;br&gt;
Vous devez modifier votre fichier settings.py et y inclure les lignes suivantes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# aws settings
&lt;/span&gt;&lt;span class="n"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'...'&lt;/span&gt;
&lt;span class="n"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'...'&lt;/span&gt;
&lt;span class="n"&gt;AWS_STORAGE_BUCKET_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'...'&lt;/span&gt;
&lt;span class="n"&gt;AWS_QUERYSTRING_AUTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="n"&gt;AWS_S3_FILE_OVERWRITE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;AWS_DEFAULT_ACL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_FILE_STORAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'storages.backends.s3boto3.S3Boto3Storage'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Les AWS_ACCESS_KEY_ID et AWS_SECRET_ACCESS_KEY sont disponible dans la console de S3 en cliquant sur l'option 'My Security Credentials' dans le menu portant votre nom d'usager. (Situé en haut à droite)&lt;/p&gt;

&lt;p&gt;Une fois sur la page de 'Your Security Credentials' click sur Access Keys et créer une nouvelle clé. Le ID et le secret vous seront donné.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Étape 5&lt;/strong&gt;&lt;br&gt;
Vous pouvez maintenant stocker des fichiers sur Amazon S3&lt;/p&gt;

&lt;p&gt;Pour faire le upload d'images par exemple vous pouvez créer un model avec un champ ImageField&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ImageField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ensuite faire la migration et l'exécuter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python mange.py makemigrations
&lt;span class="nv"&gt;$ &lt;/span&gt;python mange.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ajouter ce modèle à l'Admin Panel&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# admin.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;

&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si vous n'avez pas encore de superuser pour accèder à l'Admin Panel vous pouvez en créer un&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Étape 6&lt;/strong&gt;&lt;br&gt;
Vous pouvez maintenant aller dans l'Admin Panel (localhost:8000/admin), faire votre login, cliquez sur Product et ajouter un Product. L'image que vous aller choisir en cliquant sur 'Choose File' sera automatiquement envoyé dans votre bucket sur Amazon S3. (L'upload s'effectue lors de la creation du Product)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Étape 7&lt;/strong&gt;&lt;br&gt;
Vous pouvez maintenant lire les fichiers stockés sur votre Amazon S3&lt;/p&gt;

&lt;p&gt;Par exemple pour afficher une image dans une template. Vous pouvez utiliser la propriété .url de votre champ image&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img src="{{ product.image.url }}" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Étape 8&lt;/strong&gt;&lt;br&gt;
Il est également possible d'utiliser Amazon S3 pour stocker tous vos fichiers static de votre projet. Par exemple les fichiers css, js et images.&lt;/p&gt;

&lt;p&gt;Pour ce faire vous devez ajouter cette ligne de code à settings.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;STATICFILES_STORAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'storages.backends.s3boto3.S3Boto3Storage'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ce code indique à Django que vos fichiers static sont maintenant stocké sur Amazon S3.&lt;/p&gt;

&lt;p&gt;Si vous relancer votre application (python manage.py runserver) vous remarquerez que votre application ne fonctionnera pas comme il faut car vos fichiers statics ne sont pas encore dans votre Amazon S3.&lt;/p&gt;

&lt;p&gt;Pour les envoyers vous devez exécuter la commande:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python manage.py collectstatic
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Django va donc envoyer tous vos static dans votre bucket S3&lt;/p&gt;


&lt;p&gt;Si vous relancez l'application tout devrait être redevenu normal.&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;&lt;br&gt;
Si vous désirez plus de contenu francophone comme celui-ci, cliquer &lt;strong&gt;Follow ou &lt;a href="https://twitter.com/EricLeCodeur"&gt;suivez-moi sur Twitter&lt;/a&gt;&lt;br&gt;
&lt;/strong&gt;

</description>
      <category>french</category>
      <category>python</category>
      <category>django</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top React Boilerplates for 2021</title>
      <author>kapeel kokane</author>
      <pubDate>Sun, 13 Jun 2021 18:32:48 +0000</pubDate>
      <link>https://dev.to/comscience/top-react-boilerplates-for-2021-21ce</link>
      <guid>https://dev.to/comscience/top-react-boilerplates-for-2021-21ce</guid>
      <description>&lt;h1&gt;
  &lt;a href="#react-boilerplates-for-2021"&gt;
  &lt;/a&gt;
  React boilerplates for 2021
&lt;/h1&gt;

&lt;p&gt;In recent times, &lt;strong&gt;React.js&lt;/strong&gt; has seen itself rise in popularity and become one of the most loved front-end frameworks of all time. We will be looking at these 5 boilerplates for React today:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#createreactapp"&gt;
  &lt;/a&gt;
  1️⃣ create-react-app
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#createnextapp"&gt;
  &lt;/a&gt;
  2️⃣ create-next-app
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#reactvite"&gt;
  &lt;/a&gt;
  3️⃣ react-vite
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#reactboilerplate"&gt;
  &lt;/a&gt;
  4️⃣ react-boilerplate
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#reactstarterkit"&gt;
  &lt;/a&gt;
  5️⃣ react-starter-kit
&lt;/h3&gt;




&lt;p&gt;If you end up liking this article, make sure to follow me on 🐦&lt;strong&gt;twitter&lt;/strong&gt; where I regularly share awesome learning resources like this one:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-twitter-1282646430780284928-"&gt;
  &lt;/a&gt;
  &lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gXW_kDvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/Eczf99ZUcAAVSy-.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tCoQBxER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1372919009939652612/E9s309tH_normal.jpg" alt="Kapeel 💙 Typescript profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kapeel 💙 Typescript
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @kokaneka
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Today's &lt;a href="https://twitter.com/hashtag/sketchnotes"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/sketchnotes"&gt;#sketchnotes&lt;/a&gt; are about &lt;a href="https://twitter.com/hashtag/ternary"&gt;#ternary&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/operators"&gt;#operators&lt;/a&gt; in &lt;a href="https://twitter.com/hashtag/javascript"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/javascript"&gt;#javascript&lt;/a&gt;&lt;br&gt;&lt;br&gt;I'm creating &lt;a href="https://twitter.com/hashtag/sketchnotes"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/sketchnotes"&gt;#sketchnotes&lt;/a&gt; for &lt;a href="https://twitter.com/hashtag/javascript"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/javascript"&gt;#javascript&lt;/a&gt; concepts from the book: 'You don't know JS(&lt;a href="https://twitter.com/YDKJS"&gt;@YDKJS&lt;/a&gt;)' by &lt;a href="https://twitter.com/getify"&gt;@getify&lt;/a&gt; using &lt;a href="https://twitter.com/excalidraw"&gt;@excalidraw&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/vjeux"&gt;@vjeux&lt;/a&gt;
&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/webdev"&gt;#webdev&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/webdev"&gt;#webdev&lt;/a&gt;elopment &lt;a href="https://twitter.com/hashtag/100DaysOfCode"&gt;#100DaysOfCode&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:01 PM - 13 Jul 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1282646430780284928" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1282646430780284928" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1282646430780284928" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;/h2&gt;







&lt;h2&gt;
  &lt;a href="#createreactapp"&gt;
  &lt;/a&gt;
  create-react-app
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Create React App (&lt;a href="https://create-react-app.dev/"&gt;CRA&lt;/a&gt;)&lt;/strong&gt; is your safest bet when it comes to bootstrapping your react applications as it's the official bootstrapping script recommended by React documentation. As per the official documentation site:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Create React App is a comfortable environment for learning React, and is the best way to start building a new single-page application in React.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h4&gt;

&lt;p&gt;In order to set up a new app using &lt;code&gt;create-react-app&lt;/code&gt;, we run the command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;npx&lt;/code&gt; command being used here is different from the &lt;code&gt;npm&lt;/code&gt; commands. &lt;em&gt;npx&lt;/em&gt; stands for &lt;strong&gt;Node package execute&lt;/strong&gt; which gets automatically installed onto the system while installing &lt;em&gt;npm&lt;/em&gt; version 5.2.0 or higher. The specialty of the &lt;em&gt;npx&lt;/em&gt; command being that it can execute any package from the &lt;em&gt;npm&lt;/em&gt; repository without the need for installing the package beforehand.&lt;/p&gt;

&lt;p&gt;That command creates a new folder called &lt;code&gt;my-app&lt;/code&gt; in the current directory and sets up a react project inside that folder. In order to run a development server and work on the app, we use the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dzq0IbKw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8z17a2jfzvb9fs6zcyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dzq0IbKw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8z17a2jfzvb9fs6zcyi.png" alt="Create React App"&gt;&lt;/a&gt;&lt;br&gt;
And when satisfied with the code changes, we can use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which generates an optimized &lt;code&gt;build&lt;/code&gt; folder that can be deployed wherever we want to host our app.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#main-features"&gt;
  &lt;/a&gt;
  Main features
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Create the app with a template of your choice by appending the create command with the &lt;code&gt;--template&lt;/code&gt; flag
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app my-app &lt;span class="nt"&gt;--template&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;template-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create the app with &lt;strong&gt;typescript&lt;/strong&gt; support by choosing the &lt;code&gt;typescript&lt;/code&gt; template:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app my-app &lt;span class="nt"&gt;--template&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Support for modern JavaScript features like &lt;a href="https://github.com/tc39/ecmascript-asyncawait"&gt;async/await&lt;/a&gt;, &lt;a href="https://github.com/tc39/proposal-object-rest-spread"&gt;rest/spread&lt;/a&gt;, &lt;a href="https://github.com/tc39/proposal-dynamic-import"&gt;dynamic imports&lt;/a&gt; right out of the box which make the developer's life easier. &lt;/li&gt;
&lt;li&gt;Direct support for CSS files and CSS modules and SCSS support with the help of &lt;code&gt;node-sass&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Routing support using &lt;code&gt;react-router&lt;/code&gt; and code-splitting support through dynamic imports.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#ejecting-from-createreactapp"&gt;
  &lt;/a&gt;
  Ejecting from create-react-app
&lt;/h4&gt;

&lt;p&gt;While the simplicity that &lt;code&gt;create-react-app&lt;/code&gt; brings to the table is much appreciated, there are some scenarios wherein we need additional control over our codebase and its features. To handle such scenarios, create-react-app provides us with an option to customize the build tool or other configurations by running the script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run eject
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a one-way operation that removes the single &lt;code&gt;react-scripts&lt;/code&gt; dependency that did all the heavy lifting behind the scenes, and bring back all the dependencies and transitive dependencies like webpack, babel etc back into the package.json where the user can have full control over them. &lt;br&gt;
dependencies before ejecting:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dependencies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@testing-library/jest-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^5.11.4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^11.1.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@testing-library/user-event&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^12.1.10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;papercss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^1.8.2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^17.0.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^17.0.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4.0.2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;web-vitals&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^1.0.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;dependencies after ejecting:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dependencies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;7.12.3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pmmmwh/react-refresh-webpack-plugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0.4.3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@svgr/webpack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;5.5.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@testing-library/jest-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^5.11.4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^11.1.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@testing-library/user-event&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^12.1.10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@typescript-eslint/eslint-plugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^4.5.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@typescript-eslint/parser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^4.5.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-eslint&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^10.1.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-jest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^26.6.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;8.1.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-plugin-named-asset-import&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^0.3.7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-preset-react-app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^10.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bfj&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^7.0.2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;camelcase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^6.1.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;case-sensitive-paths-webpack-plugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2.3.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;css-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4.3.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;8.2.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv-expand&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;5.1.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eslint&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^7.11.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eslint-config-react-app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^6.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eslint-plugin-flowtype&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^5.2.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eslint-plugin-import&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^2.22.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eslint-plugin-jest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^24.1.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eslint-plugin-jsx-a11y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^6.3.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eslint-plugin-react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^7.21.5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eslint-plugin-react-hooks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^4.2.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eslint-plugin-testing-library&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^3.9.2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eslint-webpack-plugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^2.1.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;file-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;6.1.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs-extra&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^9.0.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;html-webpack-plugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4.5.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;identity-obj-proxy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;26.6.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jest-circus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;26.6.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jest-resolve&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;26.6.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jest-watch-typeahead&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0.6.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mini-css-extract-plugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0.11.3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;optimize-css-assets-webpack-plugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;5.0.4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pnp-webpack-plugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.6.4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postcss-flexbugs-fixes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4.2.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postcss-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postcss-normalize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;8.0.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postcss-preset-env&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;6.7.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postcss-safe-parser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;5.0.2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prompts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2.4.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^17.0.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-app-polyfill&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^2.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dev-utils&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^11.0.2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^17.0.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-refresh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^0.8.3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resolve&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.18.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resolve-url-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^3.1.2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sass-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^10.0.5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;semver&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;7.3.2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;style-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.3.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;terser-webpack-plugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4.2.3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ts-pnp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.2.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4.1.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;web-vitals&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^1.0.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4.44.2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack-dev-server&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3.11.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack-manifest-plugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2.2.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;workbox-webpack-plugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;5.1.4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is usually not that common to &lt;em&gt;eject&lt;/em&gt; from &lt;code&gt;create-react-app&lt;/code&gt; but it is good to have that option if you know what you are doing.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#strong-points"&gt;
  &lt;/a&gt;
  Strong points
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;create-react-app&lt;/code&gt; is the official recommendation for bootstrapping react apps by the React team.&lt;/li&gt;
&lt;li&gt;Covers all basic features without extra dependencies.&lt;/li&gt;
&lt;li&gt;Comprehensive documentation site.&lt;/li&gt;
&lt;li&gt;Takes away the hassle of configuration away from the developer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So in case you are looking for a tried and tested way to get started with react development without the hassle of &lt;em&gt;doing things yourself&lt;/em&gt;, then &lt;code&gt;create-react-app&lt;/code&gt; is the tool to use.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#weak-points"&gt;
  &lt;/a&gt;
  weak points
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Not much control over the finer aspects of the repository (if not ejected) &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#createnextapp"&gt;
  &lt;/a&gt;
  create-next-app
&lt;/h2&gt;

&lt;p&gt;Create react app is a decent way to bootstrap a generic SPA with client-side rendering, but if the requirement is a little fancier like &lt;strong&gt;server-side rendering&lt;/strong&gt;, or &lt;strong&gt;static-site generation&lt;/strong&gt;, then the best way to get started is using &lt;code&gt;create-next-app&lt;/code&gt;. It is a simple CLI tool to get started with &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; projects. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h4&gt;

&lt;p&gt;In order to get generate the boilerplate, we just need to run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thereafter, we answer the questionnaire and at the end of it, a Next.js code repo is set up for us. There is also a provision to bootstrap an app based on any example from the official documentation page by using the &lt;code&gt;-e&lt;/code&gt; or the &lt;code&gt;--example&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;In order to start a dev server, we run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This brings up the home page of the dev server:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l9kTtJoU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmght6oh6t6dgb47n3u5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l9kTtJoU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmght6oh6t6dgb47n3u5.png" alt="Next JS"&gt;&lt;/a&gt;&lt;br&gt;
In the code repo, &lt;code&gt;create-next-app&lt;/code&gt; creates a folder structure that looks something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a9kDhlL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6r1yvpu83uetv8vxpn2n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a9kDhlL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6r1yvpu83uetv8vxpn2n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Any JavaScript files that are created in the &lt;code&gt;pages&lt;/code&gt; directory create routes in the Next.js app with the same name as that of the file. Any assets (like images) required are to be placed inside of the &lt;code&gt;public&lt;/code&gt; folder. CSS and LESS are supported by default.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#main-features"&gt;
  &lt;/a&gt;
  Main features
&lt;/h4&gt;

&lt;p&gt;If your requirement is that of a rather static site, and you are looking for a solid react framework that is way ahead of others in terms of &lt;a href="https://nextjs.org/docs/basic-features/pages#server-side-rendering"&gt;Server-side rendering&lt;/a&gt; and &lt;a href="https://nextjs.org/docs/basic-features/pages#static-generation-recommended"&gt;Static-site generation&lt;/a&gt;, definitely go ahead with Next.js and you will not be disappointed. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#strong-points"&gt;
  &lt;/a&gt;
  Strong points
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Automatic/Dynamic routing through file naming convention and &lt;code&gt;getStaticPaths()&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;Static-site generation is supported through the the &lt;code&gt;getStaticProps()&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;Server-side rendering through the &lt;code&gt;getServerSideProps()&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;Fast refresh and &lt;code&gt;fetch&lt;/code&gt; support out of the box.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#weak-points"&gt;
  &lt;/a&gt;
  Weak points
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Is not optimized in case of applications that need constant data fetching and refreshing.&lt;/li&gt;
&lt;li&gt;There is a learning curve associated with getting to learn the aspects of SSR which are unique to Next.js&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#reactvite"&gt;
  &lt;/a&gt;
  react-vite
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; is a relatively new candidate in the frontend framework tooling space that is created/maintained by &lt;a href="https://twitter.com/youyuxi"&gt;Evan You&lt;/a&gt; of &lt;strong&gt;Vue.JS&lt;/strong&gt; fame. Vite is a universal solution that can be used to bootstrap projects from several tech stacks using templates, which at the present, support Vue, React, Preact, etc.:&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h4&gt;

&lt;p&gt;For the scope of this article, we will explore the creation of React projects. In order to initiate the repo creation, we run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init @vitejs/app react-vite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which brings up this selection menu:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R0cDc8Gz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sh58npqf5hird947rass.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R0cDc8Gz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sh58npqf5hird947rass.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Selecting the &lt;strong&gt;react&lt;/strong&gt; option creates a react project in the directory. What is interesting to note is that it takes roughly a second to set up the repo as opposed to other tools which take a few seconds for the entire process. After the repo is setup, we need to move into that directory and install the &lt;code&gt;vite&lt;/code&gt; package as a dev dependency.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;react-vite
npm i &lt;span class="nt"&gt;--save-dev&lt;/span&gt; vite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we can run the dev script as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which brings up the default UI at &lt;code&gt;localhost:3000&lt;/code&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4KNDAqnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2ijjeihp9la2or92vdq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4KNDAqnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2ijjeihp9la2or92vdq.png" alt="React Vite"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do note that in order for the dev script to run properly, we need to be on the latest build version of &lt;strong&gt;Node&lt;/strong&gt; that supports &lt;code&gt;worker_threads&lt;/code&gt;, else, we get this error while trying to run the dev script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Cannot find module 'worker_threads' 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The latest version of npm can be installed and the several versions installed on your system can be managed by using &lt;a href="https://github.com/nvm-sh/nvm/blob/master/README.md"&gt;nvm&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#main-features"&gt;
  &lt;/a&gt;
  Main features
&lt;/h4&gt;

&lt;p&gt;Vite is different from the other boilerplate tools in this list as it was built from the ground up keeping the &lt;strong&gt;Developer Experience&lt;/strong&gt; (DX) in mind. Quoting from Vite's official documentation page:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Vite (the French word for "fast", pronounced /vit/) is a new breed of frontend build tool that significantly improves the frontend development experience.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even though vite supports an exhaustive set of &lt;a href="https://vitejs.dev/guide/features"&gt;feature list&lt;/a&gt;, the main problem that Vite set out to solve was the issue that most &lt;em&gt;bundling tools&lt;/em&gt; (think &lt;a href="https://webpack.js.org/"&gt;webpack&lt;/a&gt;, &lt;a href="https://parceljs.org/"&gt;parcel&lt;/a&gt;) face at scale: Whenever the code base grows to a decent size, the bundler takes up several minutes to spin up a local instance of a dev server. Also, with respect to updating code and getting a live preview, even with the optimizations like &lt;strong&gt;Hot module replacement&lt;/strong&gt; (HMR) in place, it still takes several seconds for a code change to reflect onto the UI in case a critical file is modified. &lt;br&gt;
Vite solves these problems by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Not bundling the code at all but capitalizing on the availability of native ES module support on most modern browsers.&lt;/li&gt;
&lt;li&gt;Classifying the entire code base into &lt;code&gt;library code&lt;/code&gt; and &lt;code&gt;source code&lt;/code&gt; and by pre-building the library code using &lt;a href="https://esbuild.github.io/"&gt;esbuild&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;By performing &lt;strong&gt;HMR&lt;/strong&gt; over native ES modules which considerably reduces the HMR boundary to be invalidated and improves performance.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While the development server does not bundle code, the production scripts still build a bundle using &lt;a href="https://rollupjs.org/"&gt;Rollup&lt;/a&gt; which is highly optimized.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#strong-points"&gt;
  &lt;/a&gt;
  Strong points:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Main focus on the developer experience (DX)&lt;/li&gt;
&lt;li&gt;Typescript support out of the box&lt;/li&gt;
&lt;li&gt;Active development and maintenance by Evan You and the team&lt;/li&gt;
&lt;li&gt;CSS import support with CSS modules as well as preprocessor support.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://vitejs.dev/guide/features.html#web-assembly"&gt;wasm&lt;/a&gt; and &lt;a href="https://vitejs.dev/guide/features.html#web-workers"&gt;web worker&lt;/a&gt; support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hence, if you are looking for something that is on the bleeding edge as far as developer experience, future-proofing, &amp;amp; performance enhancements are concerned, &lt;code&gt;react-vite&lt;/code&gt; is your tool.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#weak-points"&gt;
  &lt;/a&gt;
  Weak points
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Upcoming technology woking on the bleeding edge of build process and hence there might not be many developers in the industry who truly understand it in order to tweak the process if necessary&lt;/li&gt;
&lt;li&gt;Not as popular and old as compared to something like &lt;strong&gt;webpack&lt;/strong&gt; which means there might be comparitively less documentation and support available online.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#reactboilerplate"&gt;
  &lt;/a&gt;
  react-boilerplate
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J9iw5oNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju6thpr33ipjkab7aqt6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J9iw5oNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju6thpr33ipjkab7aqt6.png" alt="React Boilerplate"&gt;&lt;/a&gt;&lt;br&gt;
Another tool worth adding to the list when it comes to setting up a react project is &lt;a href="https://www.reactboilerplate.com/"&gt;react-boilerplate&lt;/a&gt;. On its landing page, &lt;strong&gt;react-boilerplate&lt;/strong&gt; provides this description:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Quick setup for new performance-oriented, offline–first React.js applications&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h4&gt;

&lt;p&gt;While the basic premise based on which the library is built is the same as that of others, the steps to set up a new code repository are slightly different. Firstly, we need to clone the setup repo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/react-boilerplate/react-boilerplate.git my-react-boilerplate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we need to move into the cloned repository and run the setup script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-react-boilerplate
npm run setup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then the start script to kick-off the dev server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This brings up this home page:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lE9I9fc9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92uqtefy405h6m95ebyp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lE9I9fc9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92uqtefy405h6m95ebyp.png" alt="React Boilerplate"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#main-features"&gt;
  &lt;/a&gt;
  Main features
&lt;/h4&gt;

&lt;p&gt;The main difference between other tools on this list and &lt;strong&gt;react-boilerplate&lt;/strong&gt; is that, post setup, we get a highly &lt;strong&gt;opinionated&lt;/strong&gt;, yet highly &lt;strong&gt;feature-rich&lt;/strong&gt; development setup with feature support for &lt;a href="https://github.com/ReactTraining/react-router"&gt;react-router&lt;/a&gt; for routing, &lt;a href="http://redux.js.org/"&gt;redux&lt;/a&gt; for state management, &lt;a href="https://redux-saga.github.io/redux-saga/"&gt;redux-saga&lt;/a&gt; for enhancing redux, &lt;a href="https://github.com/reactjs/reselect"&gt;reselect&lt;/a&gt; for optimization, &lt;a href="https://github.com/mweststrate/immer"&gt;immer&lt;/a&gt; for immutability and &lt;a href="https://github.com/styled-components/styled-components"&gt;styled components&lt;/a&gt; for fast-tracking development. Even the project structure is highly opinionated with separation between &lt;strong&gt;containers&lt;/strong&gt; (connected to redux store) and &lt;strong&gt;components&lt;/strong&gt; that are pure components.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#strong-points"&gt;
  &lt;/a&gt;
  Strong points:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Full-fledged repo setup with routing, state management, and other optimizations, etc.&lt;/li&gt;
&lt;li&gt;Maintained by &lt;a href="https://mxstbr.com/"&gt;Max Stoiber&lt;/a&gt;, another big name in the react ecosystem.&lt;/li&gt;
&lt;li&gt;Styled components support out of the box.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#weak-points"&gt;
  &lt;/a&gt;
  Weak points:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Not catching up with the latest trends in development, the last commit on the repository was in March, 2019&lt;/li&gt;
&lt;li&gt;Highly opinionated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that in mind, if you need to get started with react development needing all the bells and whistles associated with a react project right from the beginning and don't mind being tied up with an &lt;em&gt;x technology to achieve y outcome&lt;/em&gt; approach that is pre-decided by the library creators, then react-boilerplate is a strong candidate.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#reactstarterkit"&gt;
  &lt;/a&gt;
  react-starter-kit
&lt;/h2&gt;

&lt;p&gt;Lastly, let's take a look at react-starter-kit which describes itself as an &lt;em&gt;**isomorphic&lt;/em&gt;* web app boilerplate*. The home page also mentions that react-starter-kit is highly &lt;strong&gt;opinionated&lt;/strong&gt; which means that it has already selected the tech stack for us which comprises of &lt;strong&gt;Node.js&lt;/strong&gt;, &lt;strong&gt;Express&lt;/strong&gt;, &lt;strong&gt;GraphQL&lt;/strong&gt;, etc. In a way it takes the load away from the users of the boilerplate by making the decision for us while also making sure that we follow the current best practices in the industry.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h4&gt;

&lt;p&gt;In order to get started with the boilerplate, we need to clone the latest repository and use that as the starting point:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone &lt;span class="nt"&gt;-o&lt;/span&gt; react-starter-kit &lt;span class="nt"&gt;-b&lt;/span&gt; master &lt;span class="nt"&gt;--single-branch&lt;/span&gt; https://github.com/kriasoft/react-starter-kit.git MyApp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, move into the created folder and install the dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;MyApp
yarn &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And start the dev server as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That brings up the boilerplate home page:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cpNXfMDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdlly3zvfhwvskb1daae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpNXfMDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdlly3zvfhwvskb1daae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#main-features"&gt;
  &lt;/a&gt;
  Main features
&lt;/h4&gt;

&lt;p&gt;The main feature of this boilerplate is that it is highly feature-packed, yet highly customizable. In addition to the exhaustive file structure that we get at repo setup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── /build/                     # The folder for compiled output
├── /docs/                      # Documentation files for the project
├── /node_modules/              # 3rd-party libraries and utilities
├── /public/                    # Static files which are copied into the /build/public folder
├── /src/                       # The source code of the application
│   ├── /components/            # React components
│   ├── /data/                  # GraphQL server schema and data models
│   ├── /routes/                # Page/screen components along with the routing information
│   ├── /client.js              # Client-side startup script
│   ├── /config.js              # Global application settings
│   ├── /server.js              # Server-side startup script
│   └── ...                     # Other core framework modules
├── /test/                      # Unit and end-to-end tests
├── /tools/                     # Build automation scripts and utilities
│   ├── /lib/                   # Library for utility snippets
│   ├── /build.js               # Builds the project from source to output (build) folder
│   ├── /bundle.js              # Bundles the web resources into package(s) through Webpack
│   ├── /clean.js               # Cleans up the output (build) folder
│   ├── /copy.js                # Copies static files to output (build) folder
│   ├── /deploy.js              # Deploys your web application
│   ├── /postcss.config.js      # Configuration for transforming styles with PostCSS plugins
│   ├── /run.js                 # Helper function for running build automation tasks
│   ├── /runServer.js           # Launches (or restarts) Node.js server
│   ├── /start.js               # Launches the development web server with "live reload"
│   └── /webpack.config.js      # Configurations for client-side and server-side bundles
├── Dockerfile                  # Commands for building a Docker image for production
├── package.json                # The list of 3rd party libraries and utilities
└── yarn.lock                   # Fixed versions of all the dependencies
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the number of scripts that we get out of the box:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;precommit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lint-staged&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lint-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eslint --ignore-path .gitignore --ignore-pattern &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;!**/.*&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; .&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lint-css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stylelint &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;src/**/*.{css,less,styl,scss,sass,sss}&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lint&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn run lint-js &amp;amp;&amp;amp; yarn run lint-css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fix-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn run lint-js --fix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fix-css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn run lint-css --fix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn run fix-js &amp;amp;&amp;amp; yarn run fix-css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flow:check&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flow check&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test-watch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn run test --watch --notify&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test-cover&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn run test --coverage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;coverage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn run test-cover &amp;amp;&amp;amp; opn coverage/lcov-report/index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;clean&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-node tools/run clean&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;copy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-node tools/run copy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bundle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-node tools/run bundle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-node tools/run build&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build-stats&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yarn run build --release --analyse&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;deploy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-node tools/run deploy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;render&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-node tools/run render&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;serve&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-node tools/run runServer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-node tools/run start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The library also makes sure that it provides several &lt;a href="https://github.com/kriasoft/react-starter-kit/tree/master/docs/recipes"&gt;recipes&lt;/a&gt; which are like official guides that explain &lt;em&gt;how to accomplish X?&lt;/em&gt; while working with &lt;code&gt;react-bootstrap&lt;/code&gt; which makes it super handy. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#strong-points"&gt;
  &lt;/a&gt;
  Strong points:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Isomorphic boilerplate which takes into consideration the operations to be performed on server-land (Node.js) like SSR.&lt;/li&gt;
&lt;li&gt;Support for &lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt; through &lt;a href="https://www.apollographql.com/"&gt;Apollo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Recipes for implementing common use cases.&lt;/li&gt;
&lt;li&gt;React testing via &lt;a href="http://airbnb.io/enzyme/"&gt;Enzyme&lt;/a&gt; and static type checking via &lt;a href="http://flowtype.org/"&gt;Flow&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#weak-points"&gt;
  &lt;/a&gt;
  Weak points:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Large number of dependencies which might bloat up the bundle size even if not used&lt;/li&gt;
&lt;li&gt;Highly opinionated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With those features that &lt;code&gt;react-boilerplate&lt;/code&gt; is willing to offer and the customizations that it provides, it is worth giving a shot if we are looking for an Isomorphic boilerplate that is different from &lt;code&gt;create-next-app&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;With that, we wrap up the roundup for &lt;strong&gt;Top React boilerplates in 2021&lt;/strong&gt;. As we can see, each one of them comes with its own set of &lt;em&gt;Things it does best&lt;/em&gt; and &lt;em&gt;Things it is not so good at&lt;/em&gt;. This means it all comes down to the use case at hand. It also means the choice that we make will vary greatly based on the nature of the end result we are aiming at but at least the good thing is, that we are not short of choices.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tooling</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Learn any programing language, framework or library fast and efficiently</title>
      <author>Abod Micheal (he/him)</author>
      <pubDate>Sun, 13 Jun 2021 18:26:19 +0000</pubDate>
      <link>https://dev.to/abodmicheal/learn-any-programing-language-framework-or-library-fast-and-efficiently-251p</link>
      <guid>https://dev.to/abodmicheal/learn-any-programing-language-framework-or-library-fast-and-efficiently-251p</guid>
      <description>&lt;p&gt;I'm Abod, and I work as a front end developer.&lt;br&gt;
In this lesson, I'll show you how to learn a new programming language, library, or framework in the quickest possible method.&lt;br&gt;
This strategy has helped me learn a new language quickly, despite the fact that it can be stressful and challenging at times.&lt;/p&gt;

&lt;p&gt;This is what I used for Laravel. &lt;/p&gt;

&lt;p&gt;I was hired as a freelance web developer to work on a finance online app. Note: I had never used laravel before and had never done a FullStack job before, but I used it and completed the lengthy and complex job in a month without receiving a single complaint from the client. Without realizing it, I learned a lot and was able to solve problems in laravel, as well as answer most interview questions about this framework.&lt;br&gt;
I chose to publish it because I tried it on other frameworks as well.&lt;br&gt;&lt;br&gt;
1)Get a short project-based lesson on the language or library you want to learn, at least a 1hr 30 min video and up to 3 hours, which you could break into two days, 1hr 30 mins one day and 1hr 30 mins the next, but if you can finish the lesson base project in a day, that's fantastic. Simply get the video and follow along with the instructor. You might also include a small function that isn't included in this video like an extra button.&lt;br&gt;&lt;br&gt;
What is the purpose of this? This technique gives us insights into how things are done in the language, introduces you to a few concepts such as declaring a variable, how we use statements in that language, and so on; it essentially exposes you to how that language is used on a real project, which helps you pick up a few things in that language. When you're following the teacher, you'll very certainly notice an error that isn't in the video and that you'll have to solve on your own (or with the help of Google). You might also jot down a few concepts in the language that you don't grasp completely.&lt;/p&gt;

&lt;p&gt;Let's move on to the next step now that you've gained a better understanding of this language.&lt;/p&gt;

&lt;p&gt;2)If you know a programming language, find out how this one differs from the one you know; if you don't, that's fine; we'll just go through the documentation and look at the table of contents, then identify something you don't know or a concept you haven't seen or worked with in the first step, and write it down alongside what you wrote in the first step. This is the list of items we wish to concentrate on.&lt;/p&gt;

&lt;p&gt;We don't know or haven't worked with them because they're unfamiliar to us.&lt;/p&gt;

&lt;p&gt;3)We're looking for a course that will offer us a general overview of the language, such as an hour-long film that will offer us a general introduction and principles of the language. NOTE: We are not using a project-based instruction in this section. This section will assist us in gaining general knowledge of the language that we do not currently possess.&lt;/p&gt;

&lt;p&gt;4)We go to a website like algoexpert and practice and solve problems in this language, just simple problems; if there are questions you can't answer, google at least 50 to 100 questions and write down a few difficult concepts; spend time on this and google all of the written concepts from step 1 to 4, get to know how it works, and solve questions on algoexpert while you google. Most of the time, we only study a handful of the concepts in step 3, which enhances our capabilities and helps us grasp how to apply the concepts in this language better. In my instance, I was learning the Laravel framework, therefore I searched for Laravel interview questions and Laravel live coding quiz on Google which lead me to&lt;br&gt;
&lt;a href="https://app.testgorilla.com/"&gt;https://app.testgorilla.com/&lt;/a&gt; , &lt;a href="https://www.adaface.com/"&gt;https://www.adaface.com/&lt;/a&gt; and &lt;a href="https://www.bestinterviewquestion.com/"&gt;https://www.bestinterviewquestion.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5) When you are comfortable, jump on a project without a tutorial, any easy project, do it on your own and make sure it is something you can put in your portfolio when you are done, you could try an advanced tutorial, when you run into a problem, google or check a video on how to solve that specific problem and move on to the next.&lt;/p&gt;

&lt;p&gt;Steps one through four can be completed in a day or two if you devote a significant amount of time to them, such as 8 hours or more a day. Step five can be completed at your leisure.&lt;/p&gt;

&lt;p&gt;Keep in mind that you must complete each job. Please leave a comment if this works for you. &lt;br&gt;
After that, begin establishing a large number of projects or begin working on the project for which you learned this new language or framework.&lt;/p&gt;

&lt;p&gt;some useful resources &lt;br&gt;
&lt;a href="https://leetcode.com/"&gt;https://leetcode.com/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.hackerrank.com/"&gt;https://www.hackerrank.com/&lt;/a&gt; &lt;br&gt;
&lt;a href="https://www.algoexpert.io/"&gt;https://www.algoexpert.io/&lt;/a&gt; &lt;br&gt;
&lt;a href="https://www.pramp.com/"&gt;https://www.pramp.com/&lt;/a&gt; &lt;br&gt;
&lt;a href="https://interviewing.io/"&gt;https://interviewing.io/&lt;/a&gt; &lt;br&gt;
&lt;a href="https://www.interviewbit.com/"&gt;https://www.interviewbit.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>laravel</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
  </channel>
</rss>
