<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How much assumed knowledge is enough? </title>
      <author>Amara Graham</author>
      <pubDate>Thu, 26 Aug 2021 13:48:12 +0000</pubDate>
      <link>https://dev.to/missamarakay/how-much-assumed-knowledge-is-enough-kmi</link>
      <guid>https://dev.to/missamarakay/how-much-assumed-knowledge-is-enough-kmi</guid>
      <description>&lt;p&gt;I spent years as a developer advocate targeting beginners to particular technology, topics, or products. &lt;/p&gt;

&lt;p&gt;I'm very specific about this because my definition of beginners did not include folks who were new to coding, but might be new to working in cloud or SaaS. They didn't have to be full time developers, but they did need to know some amount of programming. I would stop to explain some fundamentals, but really I assumed folks would get most of their fundamental knowledge from somewhere else, whether it was a degree, bootcamp, certification, or someone else's content.&lt;/p&gt;

&lt;p&gt;I don't want to assume so much knowledge that I alienate users, but, at the end of the day, I need to assume some knowledge.&lt;/p&gt;

&lt;p&gt;I often thought (and still think) about the minimum amount of knowledge required to get through a how-to or complete a task. For example, if something required an async call or needed to happen across multiple threads I would acknowledge the why, maybe touch on the how, and if I was feeling particularly generous (and knowledgable) I would mention the pros and cons of shoving this code into production as-is.&lt;/p&gt;

&lt;p&gt;If you've heard me speak or attended a workshop I've lead I always warn folks to not take snippets or example code I've written and put it into production. It's often untested for scale, security, or, more literally, just does not have testing! All things you need to consider carefully when "productionalizing" code. Don't just take it and run with it.&lt;/p&gt;

&lt;p&gt;This isn't a scathing blog about how devs of this generation just C&amp;amp;P their way across Stack Overflow - that's a tired opinion. This is a fair warning to myself and other technical content generators that your example code will likely end up in production, no matter how many alerts, notes, comments, and admonitions you make. &lt;/p&gt;

&lt;p&gt;So how do we acknowledge this while offering an easy to maintain, digestible experience? How do you build examples and content meant to help educate developers without huge maintenance costs or any other gotchas on either side?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#facilitate-rapid-prototyping"&gt;
  &lt;/a&gt;
  Facilitate rapid prototyping
&lt;/h2&gt;

&lt;p&gt;This one is huge, so it's first because I'm long winded and you'll likely stop reading soon anyway.&lt;/p&gt;

&lt;p&gt;We live in an agile world filled with near-instant gratification. Your project manager or stakeholders demand significant, regular progress which starts at the very beginning of the software lifecycle, sometimes even before.&lt;/p&gt;

&lt;p&gt;How many times have you find ourself saying "oh I just hacked this together" or "I PoC'ed this and it looks like it will work for us" only to then find yourself in a position where you need to deliver and you need to deliver this week or this sprint. Have you ever started from scratch? Or do you typically build off of what you had?&lt;/p&gt;

&lt;p&gt;I'll be honest, as a developer, I've never thrown out PoC (proof-of-concept) or "hacked" work. In fact, I'd go so far as to say I've never been empowered or support to do that. This isn't a jab at my previous teams or managers, but given the choice between starting from 0% and starting from somewhere between 30-65% I'm simply too lazy to throw away work.&lt;/p&gt;

&lt;p&gt;Any example snippet or sandbox may be pitched as something great for prototyping, but rarely do I see situations where prototypes are chucked in the bin and not evolved into production (hopefully worthy!) apps. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#target-an-mvp"&gt;
  &lt;/a&gt;
  Target an MVP
&lt;/h2&gt;

&lt;p&gt;My goal in Developer Experience is to get you through an enjoyable, efficient experience with our products and tools so you get to focus on delivering a solution for your use case. &lt;/p&gt;

&lt;p&gt;This means I'm looking to cut and trim everywhere I can while still providing you a meaningful experience. This is no different than going through an MVP (minimum viable product) exercise. What's the bare minimum you need to be successfully onboarded?&lt;/p&gt;

&lt;p&gt;Acknowledge you will not be able to cover every features and every corner of your product, but don't reinvent the wheel either. Give devs building blocks so that each step of the way through your how-to or documentation they can build on their foundational knowledge but don't be afraid to keep it lean. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#save-devs-from-themselves-if-possible"&gt;
  &lt;/a&gt;
  Save devs from themselves (if possible)
&lt;/h2&gt;

&lt;p&gt;To give you a concrete example, we evaluated our community through surveys, polls, and forum questions and realized their Java knowledge was beginner at best and their grasp of concepts like multi-threading, synchronous and asynchronous processing, and other complex topics just wasn't there. There is a difference between writing code that's functional and writing code to be performant. There is room in tech for both.&lt;/p&gt;

&lt;p&gt;We discussed modifying some of our &lt;a href="https://github.com/camunda-cloud/camunda-cloud-get-started"&gt;getting started content&lt;/a&gt; to remove lines that may lead to issues down the road because of this conclusion. For example, blocking and non-blocking code was not explicitly obvious.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;send().join()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Did you know that's a blocking call to wait for the issues command to be executed on the workflow engine?&lt;/p&gt;

&lt;p&gt;So we modified it to this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;send().whenComplete((result, exception) -&amp;gt; {})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to register a callback to be executed if the command on the workflow engine was executed or an exception was thrown. &lt;/p&gt;

&lt;p&gt;Now while both are perfectly acceptable for an example, sandbox environment, of even a PoC, the first example is not going to scale in the way we know process automation projects will in a production or production-like scenario. &lt;/p&gt;

&lt;p&gt;While some devs will be able to recognize this, we want to lower the barrier for ALL devs, so we adjust without having to deep dive into the fundamentals of parallelism. We've able to introduce the topic, how it works with our product, and point them in the direction of more information or give them terms they can search around and educate themselves on. And most importantly, we've set up the dev on a good path that if this code ends up in production and scaling, it's not as fragile.&lt;/p&gt;

&lt;p&gt;I think it's also important to recognize you can just have a bad, unfocused day as a very experience Java dev and miss this detail. It may not hurt you at 1-10 processes&lt;/p&gt;

&lt;p&gt;Special thanks to &lt;a class="mentioned-user" href="https://dev.to/berndruecker"&gt;@berndruecker&lt;/a&gt;
 for the [fixes in this example](&lt;a href="https://github.com/camunda-cloud/camunda-cloud-get-started/commit/9d121d02d9bd1c8f35470afbab4a42ce84927b7b_"&gt;https://github.com/camunda-cloud/camunda-cloud-get-started/commit/9d121d02d9bd1c8f35470afbab4a42ce84927b7b_&lt;/a&gt;! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-where-do-you-draw-the-line-at-enough-assumed-knowledge"&gt;
  &lt;/a&gt;
  So where do you draw the line at enough assumed knowledge?
&lt;/h2&gt;

&lt;p&gt;My favorite answer - it depends.&lt;/p&gt;

&lt;p&gt;I like to lean heavily on user data and personas. It's unrealistic to think I can teach everyone programming fundamentals, how to use our products, and be good at all of that. &lt;/p&gt;

&lt;p&gt;I keep the three things in mind - how can I facilitate rapid prototyping, introduce them to the MVP, and save devs from themselves when using our products so they can get what they need from the experts in that space or topic. &lt;/p&gt;

&lt;p&gt;How do you handle this? Or maybe, what do you expect in your documentation experience? Leave me a comment and share your thoughts.&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@elifrancis?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Eli Francis&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/study?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>documentation</category>
      <category>developerrelations</category>
    </item>
    <item>
      <title>Implement JWT Authentication with Phoenix.Token</title>
      <author>Dung Nguyen</author>
      <pubDate>Thu, 26 Aug 2021 13:42:44 +0000</pubDate>
      <link>https://dev.to/onpointvn/implement-jwt-authentication-with-phoenix-token-n58</link>
      <guid>https://dev.to/onpointvn/implement-jwt-authentication-with-phoenix-token-n58</guid>
      <description>&lt;p&gt;In this post, you'll learn how to implement JWT based authentication using &lt;code&gt;Phoenix.Token&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is originally posted on &lt;a href="https://bluzky.github.io/blog/2021-08-26-jwt-auth-with-phoenix-token/"&gt;The Orange+&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our previous projects, we use &lt;code&gt;guardian&lt;/code&gt; library to implement JWT authentication. &lt;code&gt;Guardian&lt;/code&gt; is a great library which provides lots of method and tool to work with authentication. But sometime we don't need them all. And recently, I found &lt;code&gt;Phoenix.Token&lt;/code&gt; module shipped with &lt;code&gt;phoenix&lt;/code&gt; framework that helps me to implement JWT authentication with few lines of code.&lt;/p&gt;

&lt;p&gt;Let's do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-implement-jwttoken-module"&gt;
  &lt;/a&gt;
  1. Implement JwtToken module
&lt;/h2&gt;

&lt;p&gt;Here is the document of &lt;a href="https://hexdocs.pm/phoenix/Phoenix.Token.html"&gt;Phoenix.Token&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We just wrap &lt;code&gt;sign&lt;/code&gt; and &lt;code&gt;verify&lt;/code&gt; function from &lt;code&gt;Phoenix.Token&lt;/code&gt; to create and check for valid JWT token.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;JwtToken&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;@signing_salt&lt;/span&gt; &lt;span class="s2"&gt;"octosell_api"&lt;/span&gt;
  &lt;span class="c1"&gt;# token for 2 week&lt;/span&gt;
  &lt;span class="nv"&gt;@token_age_secs&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;86_400&lt;/span&gt;

  &lt;span class="nv"&gt;@doc&lt;/span&gt; &lt;span class="sd"&gt;"""
  Create token for given data
  """&lt;/span&gt;
  &lt;span class="nv"&gt;@spec&lt;/span&gt; &lt;span class="n"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;binary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;Phoenix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;MyAppWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@signing_salt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;


  &lt;span class="nv"&gt;@doc&lt;/span&gt; &lt;span class="sd"&gt;"""
  Verify given token by:
  - Check if this token is issued and stored in Redis
  - Verify token signature
  - Verify expiration time
  """&lt;/span&gt;
  &lt;span class="nv"&gt;@spec&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:unauthenticated&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;Phoenix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;MyAppWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@signing_salt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="ss"&gt;max_age:&lt;/span&gt; &lt;span class="nv"&gt;@token_age_secs&lt;/span&gt;
           &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;_error&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:unauthenticated&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we wrap in &lt;code&gt;JwtToken&lt;/code&gt; module to simplify API. We pass &lt;code&gt;MyAppWeb.Endpoint&lt;/code&gt; here to use secret key that config for endpoint. You can pass secret key from config as firt argument.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-generate-jwt-token"&gt;
  &lt;/a&gt;
  2. Generate JWT token
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;MyAppWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;SessionController&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"password"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authenticate_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;JwtToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(%{&lt;/span&gt;&lt;span class="ss"&gt;user_id:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;
      &lt;span class="c1"&gt;# return token to client&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gettext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"email or password is in correct"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we create JWT token with a map &lt;code&gt;%{user_id: user.id}&lt;/code&gt; and return to client.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-build-plug-to-verify-token"&gt;
  &lt;/a&gt;
  3. Build Plug to verify token
&lt;/h2&gt;

&lt;p&gt;Client sent jwt token to server via header &lt;code&gt;Authorization&lt;/code&gt;. We extract token and call &lt;code&gt;JwtToken.verify&lt;/code&gt; to check if jwt token is valid and not expired.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Plug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Authenticate&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="no"&gt;Plug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Conn&lt;/span&gt;
  &lt;span class="kn"&gt;require&lt;/span&gt; &lt;span class="no"&gt;Logger&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;opts&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Bearer "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;get_req_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"authorization"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;JwtToken&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;conn&lt;/span&gt;
      &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:current_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;put_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:unauthorized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Phoenix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;MyAppWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;ErrorView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Phoenix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:"401"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;halt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-add-plug-to-router"&gt;
  &lt;/a&gt;
  4. Add plug to router
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;MyAppWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Router&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;MyAppWeb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:router&lt;/span&gt;

  &lt;span class="n"&gt;pipeline&lt;/span&gt; &lt;span class="ss"&gt;:api&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;plug&lt;/span&gt; &lt;span class="ss"&gt;:accepts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"json"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;pipeline&lt;/span&gt; &lt;span class="ss"&gt;:authenticated&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;plug&lt;/span&gt; &lt;span class="no"&gt;MyAppWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Plug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Authenticate&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="s2"&gt;"/api"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;MyAppWeb&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;pipe_through&lt;/span&gt; &lt;span class="ss"&gt;:api&lt;/span&gt;
    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s2"&gt;"/auth/login"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;SessionController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="s2"&gt;"/api"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;MyAppWeb&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;pipe_through&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:authenticated&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="s2"&gt;"/auth/logout"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;SessionController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:delete&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have done with it. Just a few line of code&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Implement JWT authentication with &lt;code&gt;Phoenix&lt;/code&gt; is so easy and you may not need Guardian for your application.&lt;br&gt;
In this post I only implement simple version of JWT authentication. In real application, you should store jwt token signature in database or redis and&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;Authenticate&lt;/code&gt; plug check if the token exists in database.&lt;/li&gt;
&lt;li&gt;When user logout, clear it from database/redis to make sure that token cannot be used to make request anymore.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>phoenix</category>
      <category>jwt</category>
    </item>
    <item>
      <title>Develop URL shortener application with Redwood JS.</title>
      <author>Rohith Gilla</author>
      <pubDate>Thu, 26 Aug 2021 13:40:36 +0000</pubDate>
      <link>https://dev.to/gillarohith/develop-url-shortener-application-with-redwood-js-3cf7</link>
      <guid>https://dev.to/gillarohith/develop-url-shortener-application-with-redwood-js-3cf7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#develop-url-shortener-application-with-redwoodjs"&gt;
  &lt;/a&gt;
  Develop URL shortener application with RedwoodJS
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-redwoodjs"&gt;
  &lt;/a&gt;
  What is RedwoodJS
&lt;/h3&gt;

&lt;p&gt;Redwood is is built on React, GraphQL, and Prisma, Redwood works with the components and development workflow, but with simple conventions and helpers to make your experience even better, this is opinionated.&lt;/p&gt;

&lt;p&gt;To keep it simple, let's use the tag line which they go by.&lt;/p&gt;

&lt;p&gt;"Bringing full-stack to the Jamstack"&lt;/p&gt;

&lt;p&gt;Redwood is really a vast framework,this blog post will try to cover the most important concepts of it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LrW4nuFY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33wubrfki0l68.cloudfront.net/b7d16f7f3654fb8572360301e60d76df254a323e/385ec/img/svg/architecture.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LrW4nuFY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33wubrfki0l68.cloudfront.net/b7d16f7f3654fb8572360301e60d76df254a323e/385ec/img/svg/architecture.svg" alt="https://d33wubrfki0l68.cloudfront.net/b7d16f7f3654fb8572360301e60d76df254a323e/385ec/img/svg/architecture.svg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Image taken from &lt;a href="https://jamstack.org/"&gt;https://jamstack.org/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-we-building-now"&gt;
  &lt;/a&gt;
  What are we building now
&lt;/h3&gt;

&lt;p&gt;We will be building a small URL shortener service, we will focus less on UI and functionality aspect of the shortener as a whole and concentrate more on RedwoodJS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bird-eye-view-of-technologies-being-used"&gt;
  &lt;/a&gt;
  Bird eye view of technologies being used
&lt;/h3&gt;

&lt;p&gt;We will be working with the following technologies in the tutorial&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RedwoodJS&lt;/li&gt;
&lt;li&gt;Tailwind&lt;/li&gt;
&lt;li&gt;GraphQL&lt;/li&gt;
&lt;li&gt;Prisma&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just to put it in simple words, &lt;code&gt;HOSTURL/:slug&lt;/code&gt; will add a view to the local database and redirect to the desired website.&lt;/p&gt;

&lt;p&gt;If you are developing locally the &lt;code&gt;HOSTURL&lt;/code&gt; would be &lt;code&gt;[localhost:8910](http://localhost:8910)&lt;/code&gt; and the &lt;code&gt;:slug&lt;/code&gt; can be anything.&lt;/p&gt;

&lt;p&gt;Simple example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[localhost:8910/gilla-twitter](http://localhost:8910/gilla-twitter)&lt;/code&gt; should redirect to my twitter profile.&lt;/p&gt;

&lt;p&gt;P.S Don't worry even if you don't know anything, our objective will be to cover them below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#development"&gt;
  &lt;/a&gt;
  Development
&lt;/h2&gt;

&lt;p&gt;In this section we would be going over the development process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-redwood-project"&gt;
  &lt;/a&gt;
  Create Redwood project
&lt;/h3&gt;

&lt;p&gt;As with any modern framework, Redwood comes with a project generator.&lt;/p&gt;

&lt;p&gt;Redwood supports both &lt;code&gt;TypeScript&lt;/code&gt; and &lt;code&gt;JavaScript&lt;/code&gt;, you can use the required language of your choice, for this tutorial we will be going with &lt;code&gt;TypeScript&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For JS&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn create redwood-app ./redwood-url-shortner&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.warp.dev/NEnD3K"&gt;Warp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For TS&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn create redwood-app --typescript redwood-url-shortner&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.warp.dev/APAVaE"&gt;Warp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will generate the base project for us with &lt;code&gt;sqlite&lt;/code&gt; database, which we can swap with just a few changes.&lt;/p&gt;

&lt;p&gt;You can follow &lt;a href="https://redwoodjs.com/docs/local-postgres-setup"&gt;this&lt;/a&gt; to get it up and running locally, for deployment you can use services such as &lt;a href="https://dashboard.heroku.com/"&gt;heroku&lt;/a&gt; or &lt;a href="http://railway.app/"&gt;railway&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this tutorial we will stick to &lt;code&gt;sqlite&lt;/code&gt; database as we won't be performing deployment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understanding-the-high-level-structure-of-the-application"&gt;
  &lt;/a&gt;
  Understanding the high level structure of the application
&lt;/h3&gt;

&lt;p&gt;On the high level you could see two repositories, &lt;code&gt;web&lt;/code&gt; and &lt;code&gt;api&lt;/code&gt; which are two workspaces in &lt;code&gt;yarn&lt;/code&gt; terminology.&lt;/p&gt;

&lt;p&gt;In in &lt;code&gt;web&lt;/code&gt; we have our Frontend of the application and in &lt;code&gt;api&lt;/code&gt; the GraphQL backend resides.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.notion.so/bced27fb30844d3faec896a9d42cb549"&gt;Web Directory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The other files are simple, like the &lt;code&gt;css&lt;/code&gt; &lt;code&gt;html&lt;/code&gt; and the &lt;code&gt;.ts/.js&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;Now the way yarn workspaces works on installing dependencies are is as follows.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn workspace &amp;lt;space name&amp;gt; add &amp;lt;dependency name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Say for installing axios in web workspace, the command would be&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn workspace web app axios&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note: &lt;code&gt;rw&lt;/code&gt; is shorthand for &lt;code&gt;redwood&lt;/code&gt; cli.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-tailwind"&gt;
  &lt;/a&gt;
  Adding Tailwind
&lt;/h3&gt;

&lt;p&gt;Now that we understand the application at a high level, we need to include our custom webpack configuration.&lt;/p&gt;

&lt;p&gt;Redwood supports that too, you can check it out &lt;a href="https://redwoodjs.com/docs/webpack-configuration.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Redwood can include the Tailwind CSS in just a single command line code, this takes care of all the production ready configuration for Tailwind CSS. &lt;/p&gt;

&lt;p&gt;This is the command to setup the Tailwind, you could see the sample output in the warp link below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn rw setup tailwind&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.warp.dev/WKeAdK"&gt;Warp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please remember to restart your &lt;code&gt;yarn rw dev&lt;/code&gt; server after adding tailwind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-new-page"&gt;
  &lt;/a&gt;
  Creating new page
&lt;/h3&gt;

&lt;p&gt;We need to generate the page for the home, currently it shows redwood home page.&lt;/p&gt;

&lt;p&gt;The following command is used for doing so, you can also find sample output of the terminal.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn rw g page app /&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.warp.dev/NEnD3K"&gt;Warp&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;g&lt;/code&gt; is the shorthand for &lt;code&gt;generate&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;page&lt;/code&gt; is used for generating pages&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app&lt;/code&gt; is the name of the components and pages that will be generated.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/&lt;/code&gt; is the route path.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;code&gt;Routes.ts&lt;/code&gt; files, the main change will be reflected.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;localhost:8910&lt;/code&gt; will now show the home page after this command.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;AppPageLayout&lt;/code&gt; (if generated or else you can generate it)&lt;/p&gt;

&lt;p&gt;You can use this simple layout to have good padding around the content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AppPageLayoutProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReactNode&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AppPageLayout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;AppPageLayoutProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"p-8 h-screen bg-blue-200"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;AppPageLayout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#prisma-model-for-the-raw-urlscheme-endraw-"&gt;
  &lt;/a&gt;
  Prisma model for the &lt;code&gt;UrlScheme&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Create the prisma model for the URL Shortener, the model contains the following values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;        &lt;span class="nx"&gt;Int&lt;/span&gt;      &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;id&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;autoincrement&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="nx"&gt;longUrl&lt;/span&gt;   &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;slug&lt;/span&gt;      &lt;span class="nb"&gt;String&lt;/span&gt;   &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;unique&lt;/span&gt;
  &lt;span class="nx"&gt;views&lt;/span&gt;     &lt;span class="nx"&gt;Int&lt;/span&gt;      &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;createdAt&lt;/span&gt; &lt;span class="nx"&gt;DateTime&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will try to keep it as simple as possible, now the migrations need to be applied to the database, for this there is a command in &lt;code&gt;rw&lt;/code&gt; cli.&lt;/p&gt;

&lt;p&gt;This command is used for creating and applying the migration.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn rw prisma migrate dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.warp.dev/8K2RwK"&gt;Warp&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generating-scaffold"&gt;
  &lt;/a&gt;
  Generating Scaffold
&lt;/h3&gt;

&lt;p&gt;Now this is where the actual Redwood magic starts, as we discussed earlier we will concentrate on generating the scaffold.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn rw generate scaffold url&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.warp.dev/6E7pw5"&gt;Warp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above command generates&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CRUD in the &lt;code&gt;api&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;Components, Layouts, Cells for the &lt;code&gt;web&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;GraphQL schema definition files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you visit the &lt;code&gt;/urls/new&lt;/code&gt; page, you can check the form to add data has already been created, and you can start adding the data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4LwfSFTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629722780/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.16.14_PM_mdlln3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4LwfSFTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629722780/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.16.14_PM_mdlln3.png" alt="https://res.cloudinary.com/rohith-gilla/image/upload/v1629722780/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.16.14_PM_mdlln3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once added the data head over to &lt;code&gt;/urls&lt;/code&gt; page (you would be automatically redirected here, if not visit it manually in the browser)&lt;/p&gt;

&lt;p&gt;The page would look something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FQpxEZdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629722758/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.15.50_PM_cx8vnp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FQpxEZdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629722758/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.15.50_PM_cx8vnp.png" alt="https://res.cloudinary.com/rohith-gilla/image/upload/v1629722758/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.15.50_PM_cx8vnp.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Show&lt;/code&gt; , &lt;code&gt;Edit&lt;/code&gt; and &lt;code&gt;Delete&lt;/code&gt; function works, the CRUD are already all wired in.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;api/src/graphql&lt;/code&gt; is something you can spend time exploring, you can also launch the GraphQL playground using &lt;code&gt;localhost:8911/graphql&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understanding-cell-architecture"&gt;
  &lt;/a&gt;
  Understanding Cell Architecture
&lt;/h3&gt;

&lt;p&gt;There is a lot of terminology of &lt;code&gt;Cell&lt;/code&gt; that is going around, there are a few definitions on the official docs and other places. To put it in simple words let's understand by a quick example.&lt;/p&gt;

&lt;p&gt;For any API call the frontend makes, there is always four main possibilities &lt;code&gt;Success&lt;/code&gt; , &lt;code&gt;Empty&lt;/code&gt; , &lt;code&gt;Failure&lt;/code&gt; and &lt;code&gt;Loading&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So we need three different UIs for the following states based on the design requirements.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Cell&lt;/code&gt; is a high order component where you can export 4 components &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loading&lt;/li&gt;
&lt;li&gt;Empty&lt;/li&gt;
&lt;li&gt;Failure&lt;/li&gt;
&lt;li&gt;Success&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The use of just the cell component for example,&lt;code&gt;&amp;lt;UrlsCell/&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Just usage of this component on the code would be enough, the states and rendering the particular state will be taken care by redwood.&lt;/p&gt;

&lt;p&gt;Which means if the API call is success it renders the &lt;code&gt;Success&lt;/code&gt; component, when it is loading it renders the &lt;code&gt;Loading&lt;/code&gt; component and so o&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-custom-sdls"&gt;
  &lt;/a&gt;
  Writing custom SDLs
&lt;/h3&gt;

&lt;p&gt;For most of the cases the CRUD will be enough, but for a few cases there is a requirement for having custom queries.&lt;/p&gt;

&lt;p&gt;We have a need for custom query, we need to find the &lt;code&gt;longUrl&lt;/code&gt; which needs to be redirected to from the &lt;code&gt;slug&lt;/code&gt; we have.&lt;/p&gt;

&lt;p&gt;The CRUD which we already have can get the data based on the &lt;code&gt;id&lt;/code&gt; and not slug.&lt;/p&gt;

&lt;p&gt;For this &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add the required function in the &lt;code&gt;services/&lt;/code&gt; folder&lt;/p&gt;

&lt;p&gt;Here we are dealing with the &lt;code&gt;urls&lt;/code&gt; so we add the following in &lt;code&gt;api/src/services/urls/urls.ts&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findBySlug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;Prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UrlWhereUniqueInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findUnique&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the &lt;code&gt;findBySlug&lt;/code&gt; in the Schema definition file.&lt;/p&gt;

&lt;p&gt;In the case of us we need to modify the following  file &lt;code&gt;api/src/graphql/urls.sdl.ts&lt;/code&gt; as&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Url&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt;
    &lt;span class="nx"&gt;findBySlug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt; &lt;span class="c1"&gt;// Added&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need to create a custom cell, because we also need to handle case of incrementing the view count, if you notice our schema definition there is a &lt;code&gt;views&lt;/code&gt; field, the &lt;code&gt;FindBySlug&lt;/code&gt; will be discussed in the section below.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-raw-findbyslug-endraw-cell"&gt;
  &lt;/a&gt;
  Creating the &lt;code&gt;FindBySlug&lt;/code&gt; cell
&lt;/h3&gt;

&lt;p&gt;As we have done earlier, the &lt;code&gt;scaffold&lt;/code&gt; command generates many things which also includes cells.&lt;/p&gt;

&lt;p&gt;To generate cel alone without any other side files generated, there is a command to do that.&lt;/p&gt;

&lt;p&gt;You can find the command and it's sample output below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn rw g cell FindBySlug&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.warp.dev/XKmXp5"&gt;Warp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the required files are generated, in the main &lt;code&gt;FindBySlugCell.tsx&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;There is a &lt;code&gt;QUERY&lt;/code&gt; variable, this is the query that will be run and based on the result the states will be rendered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;QUERY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  query FindBySlugQuery($id: String!) {
    findBySlug: findBySlug(slug: $id) {
      id
      longUrl
      slug
      views
      createdAt
    }
  }
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now for testing this implementation we need to wire this component in the &lt;code&gt;AppPage.tsx&lt;/code&gt; file that was generated with the &lt;code&gt;page&lt;/code&gt; command we used.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;AppPage.tsx&lt;/code&gt; would look similar to this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MetaTags&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@redwoodjs/web&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FindBySlugCell&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/components/FindBySlugCell&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AppPageLayout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../layouts/AppPageLayoutLayout/AppPageLayoutLayout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;NewUrlPage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../Url/NewUrlPage/NewUrlPage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AppPageProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AppPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;AppPageProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AppPageLayout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MetaTags&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;URL shortner App&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FindBySlugCell&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AppPageLayout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;AppPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that we are taking in props of &lt;code&gt;slug&lt;/code&gt; , we take this &lt;code&gt;slug&lt;/code&gt; from the URL bar, so this needs to be handled in &lt;code&gt;Routes.tsx&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/{slug:String}"&lt;/span&gt; &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;AppPage&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This line will ensure to load &lt;code&gt;AppPage&lt;/code&gt; component on &lt;code&gt;/:slug&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Please note that how well the type checking and safety is, really great stuff.&lt;/p&gt;

&lt;p&gt;Now on hitting the url which you have created, the page would look something similar to this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CmDMT2GA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629723173/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.22.46_PM_c7yzxh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CmDMT2GA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629723173/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.22.46_PM_c7yzxh.png" alt="https://res.cloudinary.com/rohith-gilla/image/upload/v1629723173/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.22.46_PM_c7yzxh.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ignore the part of the image where you see &lt;code&gt;New URL&lt;/code&gt; form in the page.&lt;/p&gt;

&lt;p&gt;But the &lt;code&gt;json&lt;/code&gt; data can be seen on the page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#putting-everything-together"&gt;
  &lt;/a&gt;
  Putting everything together.
&lt;/h3&gt;

&lt;p&gt;Now, we need to add a new count to the views and also redirect the user after that.&lt;/p&gt;

&lt;p&gt;Again repeating the drill for adding new custom GraphQL query.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add the following in &lt;code&gt;urls.ts&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;UpdateViewArgs&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UrlWhereUniqueInput&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incrementViews&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;UpdateViewArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;views&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modify the &lt;code&gt;sdl&lt;/code&gt; file by adding this&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Mutation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;createUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CreateUrlInput&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="nx"&gt;updateUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UpdateUrlInput&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="nx"&gt;deleteUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="nx"&gt;incrementViews&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check the &lt;code&gt;incrementViews&lt;/code&gt; in the GraphQL playground, attaching image below to show how it looks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xp_mIBmc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629724109/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.38.18_PM_gpdwxj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xp_mIBmc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629724109/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.38.18_PM_gpdwxj.png" alt="https://res.cloudinary.com/rohith-gilla/image/upload/v1629724109/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.38.18_PM_gpdwxj.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;FindBySlugCell.tsx&lt;/code&gt; we will be adding another GraphQL mutation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;INCREMENT_VIEWS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  mutation IncrementViewMutation($id: Int!, $count: Int!) {
    incrementViews: incrementViews(id: $id, count: $count) {
      id
      longUrl
      slug
      views
    }
  }

// in the success block
const [increment] = useMutation(INCREMENT_VIEWS)
useEffect(() =&amp;gt; {
    increment({
      variables: {
        id: findBySlug.id,
        count: findBySlug.views + 1,
      },
    })
        // used for redirection 
    window.location.href = findBySlug.longUrl
  }, [findBySlug.id])
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The overall file would look something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FindBySlugQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;types/graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@redwoodjs/web&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CellSuccessProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CellFailureProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@redwoodjs/web&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;QUERY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  query FindBySlugQuery($id: String!) {
    findBySlug: findBySlug(slug: $id) {
      id
      longUrl
      slug
      views
      createdAt
    }
  }
`&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;INCREMENT_VIEWS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  mutation IncrementViewMutation($id: Int!, $count: Int!) {
    incrementViews: incrementViews(id: $id, count: $count) {
      id
      longUrl
      slug
      views
    }
  }
`&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Empty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Empty&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Failure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;CellFailureProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Error: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;findBySlug&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;CellSuccessProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FindBySlugQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;INCREMENT_VIEWS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;findBySlug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;findBySlug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;views&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findBySlug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;longUrl&lt;/span&gt;
    &lt;span class="c1"&gt;// eslint-disable-next-line react-hooks/exhaustive-deps&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;findBySlug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;findBySlug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-the-form-to-the-home-page"&gt;
  &lt;/a&gt;
  Adding the form to the Home page.
&lt;/h3&gt;

&lt;p&gt;By just adding the &lt;code&gt;&amp;lt;NewUrlPage /&amp;gt;&lt;/code&gt; which was generated for us can directly used as an component.&lt;/p&gt;

&lt;p&gt;The overall &lt;code&gt;AppPage.tsx&lt;/code&gt; component will look something like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MetaTags&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@redwoodjs/web&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FindBySlugCell&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/components/FindBySlugCell&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AppPageLayout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../layouts/AppPageLayoutLayout/AppPageLayoutLayout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;NewUrlPage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../Url/NewUrlPage/NewUrlPage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AppPageProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AppPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;AppPageProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AppPageLayout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MetaTags&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;URL shortner App&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FindBySlugCell&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"m-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NewUrlPage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AppPageLayout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;AppPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The application would be similar to this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SkifEJ-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629723106/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.21.36_PM_tqrwfs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SkifEJ-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rohith-gilla/image/upload/v1629723106/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.21.36_PM_tqrwfs.png" alt="https://res.cloudinary.com/rohith-gilla/image/upload/v1629723106/Blog/RedwoodJS/Screenshot_2021-08-23_at_6.21.36_PM_tqrwfs.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#github-repository"&gt;
  &lt;/a&gt;
  Github Repository
&lt;/h3&gt;

&lt;p&gt;The application code can be found in the Github repo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Rohithgilla12/redwood-url-shortner"&gt;GitHub - Rohithgilla12/redwood-url-shortner&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;Wohoo, we have successfully created a Redwood JS application, thought this can be improved a lot, but the main objective of learning how to use RedwoodJS was covered.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deployment"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h3&gt;

&lt;p&gt;Currently Redwood supports &lt;code&gt;Netlify&lt;/code&gt; , &lt;code&gt;Vercel&lt;/code&gt;, &lt;code&gt;AWS-Serverless&lt;/code&gt; , &lt;code&gt;Render&lt;/code&gt; as official supported targets.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn rw deploy &amp;lt;place&amp;gt;&lt;/code&gt; will create ready to deploy version of the project, also please note that backend needs to be deployed separately except for &lt;code&gt;Render&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There is a detailed explanation about different deploy methods &lt;a href="https://redwoodjs.com/docs/deploy.html#general-deployment-setup"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now if you want an opinionated suggestion about deployment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose &lt;code&gt;Netlify&lt;/code&gt; or &lt;code&gt;Vercel&lt;/code&gt; for the Frontend deployment, if you don't have any personal preference choose the one which has more credits left :)&lt;/li&gt;
&lt;li&gt;Choose Heroku / Railway for the database, you can summon a Postgres db within a few clicks. Railway has pay as you go structure, you would be able to handle a decent amount of traffic in free tier itself,  Heroku you get 10k records in the DB in the free tier.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#feeling-adventurous"&gt;
  &lt;/a&gt;
  Feeling Adventurous?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add Authentication to the existing application.&lt;/li&gt;
&lt;li&gt;Provide User dashboard, show the graph of views per day.&lt;/li&gt;
&lt;li&gt;Try to use the existing API and build a mobile application from it, please use &lt;a href="https://community.redwoodjs.com/t/using-graphql-envelop-helix-in-redwood-v0-35/2276"&gt;this&lt;/a&gt; as reference for consuming API.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#more-reading"&gt;
  &lt;/a&gt;
  More reading
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://redwoodjs.com/roadmap"&gt;Roadmap&lt;/a&gt; is worth checking out, some really cool stuff are coming out.&lt;/li&gt;
&lt;li&gt;Official Docs can be found &lt;a href="https://redwoodjs.com/docs/introduction"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Official Learning website can be find &lt;a href="https://learn.redwoodjs.com/docs/tutorial/welcome-to-redwood"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Deep dive of API folder can be find &lt;a href="https://learn.redwoodjs.com/docs/tutorial/redwood-file-structure#the-api-directory"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Deep dive of Web folder can be find &lt;a href="https://learn.redwoodjs.com/docs/tutorial/redwood-file-structure#the-web-directory"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Deep dive on &lt;a href="https://redwoodjs.com/docs/cells"&gt;cells&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks&lt;/p&gt;

&lt;p&gt;Rohith Gilla&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Introduction to programming</title>
      <author>Aswin Barath</author>
      <pubDate>Thu, 26 Aug 2021 13:32:06 +0000</pubDate>
      <link>https://dev.to/aswin2001barath/introduction-to-programming-31od</link>
      <guid>https://dev.to/aswin2001barath/introduction-to-programming-31od</guid>
      <description>&lt;p&gt;Programming is a way to instruct the computer to perform diverse tasks.&lt;/p&gt;

&lt;p&gt;You may ask, why do we even need programming?&lt;br&gt;
Why not directly do something with the hardware and stuff.&lt;/p&gt;

&lt;p&gt;You see, computers only understand Binary that is 0's and 1's.&lt;br&gt;
Now, why Binary? &lt;br&gt;
Computers built with electronic components transmits data in the form of ON or OFF, hence binary. (in simple terms)&lt;/p&gt;

&lt;p&gt;Coming back to the question, why do we even need programming?&lt;br&gt;
Imagine writing instructions to the computers just using 0's and 1's.&lt;br&gt;
Don't you think it would be tiresome work to do?&lt;/p&gt;

&lt;p&gt;See, this is why we need programming languages.&lt;br&gt;
Programming languages allow us to write programs and perform tasks and also makes the programs human readable.&lt;/p&gt;

&lt;p&gt;We, humans, communicate with each other using languages like Tamil, Hindi, English, French or any other language.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jO6BWuZA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdqrrnlawlr17u5s08u3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jO6BWuZA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdqrrnlawlr17u5s08u3.png" alt="Human Language"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly, we use programming languages like Python, Java, C++ or others to communicate with the computer.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M7eoAO3Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qeeb7i5y7wzrrat77z1s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M7eoAO3Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qeeb7i5y7wzrrat77z1s.png" alt="Programming Language"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take a look at the tutorial version of this blog at Kunal Kushwaha's channel:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wn49bJOYAZM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Kunal is creating an amazing course on "Java + Interview Preparation + Competitive programming" for FREE on YouTube.&lt;/p&gt;

&lt;p&gt;Here's the GitHub Repository for detailed curriculum and resources: &lt;a href="https://github.com/kunal-kushwaha/DSA-Bootcamp-Java"&gt;https://github.com/kunal-kushwaha/DSA-Bootcamp-Java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's the YouTube playlist: &lt;a href="https://youtube.com/playlist?list=PL9gnSGHSqcnr_DxHsP7AW9ftq0AtAyYqJ"&gt;https://youtube.com/playlist?list=PL9gnSGHSqcnr_DxHsP7AW9ftq0AtAyYqJ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, do check it out.&lt;/p&gt;

&lt;p&gt;Feel free to share if you found this useful 😃.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Ultimate cloud pricing comparison: AWS vs. Azure vs. Google Cloud in 2021</title>
      <author>CAST AI</author>
      <pubDate>Thu, 26 Aug 2021 13:23:11 +0000</pubDate>
      <link>https://dev.to/castai/ultimate-cloud-pricing-comparison-aws-vs-azure-vs-google-cloud-in-2021-khj</link>
      <guid>https://dev.to/castai/ultimate-cloud-pricing-comparison-aws-vs-azure-vs-google-cloud-in-2021-khj</guid>
      <description>&lt;p&gt;How can you tell which cloud provider is the right one for your business?&lt;strong&gt; And which one isn’t going to break your wallet?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On the surface, AWS, Microsoft Azure, and Google Cloud are pretty similar. They all offer flexible compute, storage, and networking combined with everything engineers love about the cloud: self-service, instant provisioning, and autoscaling. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But cloud providers differ in key areas that have a massive impact on your cloud bill.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Most of your bill consists of &lt;strong&gt;compute resources that represent even 75%-80% of a company’s cloud spen&lt;/strong&gt;d. That’s why I will focus on comparing the pricing of Instances and Virtual Machines across AWS, Azure, and Google Cloud to show you the nuanced differences between these providers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read this guide to learn which provider offers the most cost-effective services in 2021:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#topstrengthsofawsazureandgooglecloud"&gt;Top strengths of AWS, Azure, and Google Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#billinginawsazureandgooglecloud"&gt;Billing in AWS vs. Azure vs. Google Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#biggestcloudcostdriver"&gt;Let’s take a look at the biggest cost driver: compute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparingondemandpricing"&gt;Comparing On-Demand pricing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparingpricingwithupfrontcommitment"&gt;Comparing discounted pricing with 1-year upfront commitment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#howcpuburstingdrivescostsdown"&gt;How CPU bursting can help drive your costs down&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#comparingspotinstances"&gt;Comparing Spot Instances/Preemptible VMs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#optimizingcloudcosts"&gt;Optimizing cloud costs is a point in time exercise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#whyyouneedautomation"&gt;&lt;strong&gt;That’s exactly the reason why you need automation to optimize cloud costs&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="topstrengthsofawsazureandgooglecloud"&gt;Cloud landscape overview: Top strengths of AWS, Azure, and Google Cloud&lt;/h2&gt;

&lt;p&gt;Selecting one vendor over another comes down to knowing what your teams, applications, and workloads need. You need to have a full understanding of your requirements before setting out to explore the cloud landscape.&lt;/p&gt;

&lt;p&gt;Next, it’s time to examine each provider separately. The thing is, AWS, Azure, and Google Cloud come with different strengths and weaknesses.&lt;/p&gt;

&lt;h3&gt;AWS is the leader for a good reason&lt;/h3&gt;

&lt;p&gt;Let’s start with AWS that currently holds the largest chunk of the cloud market. Its undeniable strength is &lt;strong&gt;the sheer breadth and depth of its services&lt;/strong&gt;. You can choose from &lt;a href="https://cast.ai/blog/400-ec2-instance-types-the-good-the-bad-and-the-ugly/" rel="noreferrer noopener"&gt;almost 400 instance types&lt;/a&gt; and pair them with a rich array of tools for databases, analytics, management, IoT, security, and enterprise applications. This list could go on almost forever.&lt;/p&gt;

&lt;p&gt;AWS is the winner when it comes to developer functionality thanks to the breadth of its services and ability to translate this scale into cost benefits. Still, this &lt;strong&gt;complexity comes at a cost&lt;/strong&gt;. One of the common pricing challenges companies face is understating AWS metrics and estimating the impact of architectural decisions on costs.&lt;/p&gt;

&lt;h3&gt;Azure is the go-to choice for enterprises&lt;/h3&gt;

&lt;p&gt;Microsoft Azure is quite a &lt;strong&gt;popular choice with C-level executives&lt;/strong&gt;. That’s usually because they have a long-standing relationship with the provider and meeting all their enterprise computing needs in one place makes sense. &lt;/p&gt;

&lt;p&gt;The combination of Azure, Office 365, and Teams makes a safe option for enterprises looking to benefit from enterprise software all the way down to cloud computing resources with a single handshake.&lt;/p&gt;

&lt;h3&gt;Google Cloud taps into the power of open source&lt;/h3&gt;

&lt;p&gt;All three major cloud vendors are strong in machine learning capabilities. But Google stands out among them thanks to its endless well of internal research and expertise - basically, the magic powering the search engine giant throughout the years.&lt;/p&gt;

&lt;p&gt;What makes Google different is its role in &lt;strong&gt;developing various open source technologies&lt;/strong&gt;. I’m talking especially about containers and Google’s central role in building Kubernetes for orchestration and the Istio service mesh, today practically industry-standard technologies.&lt;/p&gt;

&lt;p&gt;Google’s culture of innovation lends itself really to startups and companies that prioritize these approaches and technologies. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Naturally, companies often end up using different cloud providers for different parts of their operations or use cases. This &lt;a href="https://cast.ai/blog/how-to-spin-a-multi-cloud-application-with-cast-ai/"&gt;multi cloud approach&lt;/a&gt; lets them bring the best of all the (cloud) worlds together under one roof. &lt;/p&gt;&lt;/blockquote&gt;

&lt;h2 id="billinginawsazureandgooglecloud"&gt;Billing in AWS vs. Azure vs. Google Cloud&lt;/h2&gt;

&lt;p&gt;Per second billing is now something all the three cloud vendors offer. AWS introduced it in 2017 for EC2 Linux-based instances and EBS volumes at first - but today, it applies to many other services. Note that in AWS, per-second billing works with the minimum 60-second limit. &lt;/p&gt;

&lt;p&gt;Azure allows per-second charges as well, but this billing model isn’t available for all instances - mostly container-based instances. &lt;/p&gt;

&lt;p&gt;Google Cloud followed AWS in the introduction of per-second billing and now offers it for more than just instances based on Linux. In Google, this form of billing applies to all VM-based instances.&lt;/p&gt;

&lt;h2 id="biggestcloudcostdriver"&gt;Let’s take a look at the biggest cost driver: compute &lt;/h2&gt;

&lt;p&gt;Compute is what makes your cloud bill so high. This isn’t to say that other services don’t contribute to it at all. Storage can get quite expensive and moving data around might result in high egress costs. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;But it’s compute that comes with the biggest price tag - and greatest opportunity for cost optimization.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Here’s a case study that shows the &lt;strong&gt;incredible impact optimizing compute costs can have on a company’s bottom line&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;How Netflix slashed its cloud costs by picking different machines&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;To deliver its video streaming services across 190 countries, &lt;strong&gt;Netflix&lt;/strong&gt; uses Amazon EC2 instances and Kinesis data streams. Recently, Netflix turned to the Graviton2-based EC2 instances. Switching to these brand-new machines helped Netflix improve performance by 50% and cut costs. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before, the company used m4.16xlarge instances that cost $3.2/hour. Now, Netflix uses m6g.16xlarge that costs $2.464/hour, and m6g.xlarge priced at only $0.0154/hour. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can only imagine the cost savings Netflix enjoyed on its cloud billing. This example clearly shows how a minor difference in instance pricing can save you thousands of dollars. &lt;/p&gt;

&lt;h2&gt;Comparing cloud pricing - our example setup&lt;/h2&gt;

&lt;p&gt;To understand the pricing differences better, we’re going to compare instances and VMs within one region and across the same operating system.&lt;/p&gt;

&lt;p&gt;This is our example setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Region: US West - Los Angeles (US West in Azure, US West 2 in Google Cloud)&lt;/li&gt;
&lt;li&gt;Operating System: Linux &lt;/li&gt;
&lt;li&gt;vCPUs: 4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Types of instances/VMs we will analyze:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;General purpose&lt;/li&gt;
&lt;li&gt;Compute optimized&lt;/li&gt;
&lt;li&gt;Memory optimized&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For our comparison, we chose instances with similar RAM and 4 vCPUs. The obvious exception is Google Cloud’s memory-optimized instance that starts at 40 vCPUs.&lt;/p&gt;

&lt;p&gt;Here are the instances/VMs we selected for our cloud pricing comparison:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XPvM5erY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ar9d32f7rr6p5u7gdrpm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XPvM5erY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ar9d32f7rr6p5u7gdrpm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="comparingondemandpricing"&gt;AWS vs. Azure vs. Google Cloud: Comparing On-Demand pricing &lt;/h2&gt;

&lt;p&gt;Here is the hourly On-Demand pricing of each of those instance-type scenarios across AWS, Azure, and Google Cloud.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Cloud pricing based on On-Demand rates&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OlDP3qk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mlpemeb3c52yiknc2nm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OlDP3qk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mlpemeb3c52yiknc2nm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: In the above table, red marks the highest price and green the lowest price for a given instance type. &lt;/em&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Takeaways:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As you can see, AWS and Azure offer quite a similar pricing for all these three instance types. &lt;/li&gt;
&lt;li&gt;For compute optimized instances, Google Cloud has the highest pricing due to its scalable processors and all-core performance. &lt;/li&gt;
&lt;li&gt;The cost of Google Cloud for memory optimized instances is way higher because it doesn’t run on 4 vCPUs, but 40vCPUs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;A note about chips and processors &lt;/h3&gt;

&lt;p&gt;Providers roll out instances on different computers and the chips in them have different performance characteristics. So, you might end up with an instance type that has strong performance your teams don’t actually need, and you’ll have no idea about this.&lt;/p&gt;

&lt;p&gt;Reasoning about this on your own is challenging and the best way to see what you’re really paying for is via benchmarking. The idea here is to drop the same workload on each machine and check its performance characteristics. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You might discover something interesting, just like we did:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This chart shows CPU operation in AWS (t2.2xlarge with 8 virtual cores) at different times after several idle CPU periods. Would you expect such unpredictable CPU behavior within a single cloud provider?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A8CYrm5w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/02/graph-3-1024x443.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A8CYrm5w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/02/graph-3-1024x443.png" alt="AWS CPU behavior"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source: CAST AI&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://resources.cockroachlabs.com/guides/2021-cloud-report"&gt;2021 Cloud Report from CockroachLabs&lt;/a&gt; used the same method to evaluate 54 machines across AWS, Azure, and Google Cloud. They ran over 1000 microbenchmark tests to evaluate metrics like CPU, network, storage, and TPC-C performance.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One of their overall conclusions was that Google beats AWS and Azure on performance. I&lt;/strong&gt;t achieved the best single-core CPU performance and offered the greatest throughput at every level. Google’s machines with general purpose disks achieved the highest level of raw throughput but turned out to be the least cost-efficient option.&lt;/p&gt;

&lt;h2 id="comparingpricingwithupfrontcommitment"&gt;AWS vs. Azure vs. Google Cloud: Comparing discounted pricing with 1-year upfront commitment&lt;/h2&gt;

&lt;p&gt;All three providers offer discounts if you commit to using them for at least 1 year. The pricing model is called Reserved Instances/Savings Plans in AWS, Reserved Savings in Azure, and Commitment Price in Google Cloud. &lt;/p&gt;

&lt;p&gt;These discounts incentivize businesses to commit to a specific level of usage for a fixed period in exchange for a discounted rate on some (not all) instances and VMs. &lt;/p&gt;

&lt;p&gt;To compare the discounted pricing among AWS, Azure, and Google Cloud, we examined a one-year commitment period without upfront cost -&lt;strong&gt; but this time, in another region: US East - Northern Virginia.   &lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Cloud pricing with 1-year commitment&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fUsY6aTT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5120uiz4b6dpvzfanc9m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fUsY6aTT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5120uiz4b6dpvzfanc9m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Takeaways: &lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The general-purpose instances with a 1-year commitment are almost similar in AWS and Azure.&lt;/li&gt;
&lt;li&gt;AWS wins in the compute optimized category, even if Azure and Google apply some pretty big discounts.&lt;/li&gt;
&lt;li&gt;Azure offers the cheapest alternative among memory optimized instances.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;&lt;p&gt;Not sure how Reserved Instances work and whether they really translate into discounts? Read this: &lt;a href="https://cast.ai/blog/do-aws-reserved-instances-and-savings-plans-really-reduce-costs/"&gt;Do AWS Reserved Instances and Savings Plans really reduce costs?&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2 id="howcpuburstingdrivescostsdown"&gt;How CPU bursting can help drive your costs down&lt;/h2&gt;

&lt;p&gt;AWS, Azure, and Google Cloud all offer burstable performance instances. These instances provide you a baseline level of CPU performance, with the opportunity to burst to a higher level whenever your workload requires that.&lt;/p&gt;

&lt;p&gt;Burstable performance instances are &lt;strong&gt;a good pick for low-latency interactive applications, microservices, small and medium databases, or product prototypes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But to make the most of them, you need to keep a close eye on the credits you collect that enable bursting. For example, if you restart a T2 instance in AWS, you’re going to lose all the credits. Restarting a T3 or T4 instance means keeping credits for another 7 days and then losing them. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Our research into AWS burstable instances showed that if you load your instance for 4 hours or more per day on average, you’re actually better off with a non-burstable one. But if you run an e-commerce business that gets a large stream of visitors once in a while, it’s a good match.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2 id="comparingspotinstances"&gt;AWS vs. Azure vs. Google Cloud: Comparing Spot Instances/Preemptible VMs&lt;/h2&gt;

&lt;p&gt;Here’s another way to reduce your cloud bill - take advantage of capacity that’s currently not being used by any businesses. Cloud providers sell this excess capacity at incredibly high discounts - while AWS Spot Instances offer up to 90% off the On-Demand rates, Preemptible VMs in Google can be even 80% cheaper than regular VMs.&lt;/p&gt;

&lt;p&gt;Here’s a quick overview of the potential savings you can get for these instances in the US East - Northern Virginia region:&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Cloud pricing with Spot Instances/Preemptible VMs&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6757StOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vohhztvglaulf1h6z4ed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6757StOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vohhztvglaulf1h6z4ed.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, all providers offer substantial discounts on these instances. &lt;/p&gt;

&lt;p&gt;But to take advantage of these savings, &lt;strong&gt;you need to make sure that your applications can handle interruptions&lt;/strong&gt;. How? Here’s a step by step guide: &lt;a href="https://cast.ai/blog/how-to-reduce-cloud-costs-by-90-spot-instances-and-how-to-use-them/"&gt;Spot Instances: How to reduce AWS, Azure, and GCP costs by 90%&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="optimizingcloudcosts"&gt;Optimizing cloud costs is a point in time exercise&lt;/h2&gt;

&lt;p&gt;By now, you’ve learned the basics of calculating compute charges. But Spot instance prices don’t always stay the same. In fact, they might change from one second to the next.&lt;/p&gt;

&lt;p&gt;Take a look at this example:&lt;/p&gt;

&lt;p&gt;At CAST AI, we were running an application on a mix of AWS On-Demand instances and Spot Instances. Then we used our own platform to analyze our setup. The platform looked for the most cost-effective Spot Instance alternatives for a machine with 8 CPUs and 16 GB.&lt;/p&gt;

&lt;p&gt;CAST AI suggested that we run our workload on an instance called INF1. But wait, &lt;strong&gt;why would we need a powerful GPU instance meant for machine learning applications?&lt;/strong&gt; It’s a supercomputer that usually costs a lot of money.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--88TB_x2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xc54dvwdriuu3p6s3ao2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--88TB_x2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xc54dvwdriuu3p6s3ao2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, why did CAST AI pick it? We checked the pricing. As it turns out, at that time INF1 just happened to be cheaper than the usual general purpose instances we used. &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We would have never guessed to look for Spot Instances in this category. As a result, we’d miss out on this incredible gem.&lt;/p&gt;

&lt;h2 id="whyyouneedautomation"&gt;That’s exactly the reason why you need automation to optimize cloud costs&lt;/h2&gt;

&lt;p&gt;Even if you have DevOps or FinOps specialists managing your cloud expenses, &lt;strong&gt;you're probably spending twice as much as you should&lt;/strong&gt;. It's high time you took control of your cloud bill with the help of automation and AI.&lt;/p&gt;

&lt;p&gt;CAST AI is a great place to start your path towards automated optimization if your teams work with Kubernetes. The solution automatically creates and implements cost-cutting tactics for guaranteed savings without any manual and repetitive work for your engineers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://cast.ai/get-a-demo"&gt;Schedule a demo&lt;/a&gt; to learn how automation can reduce your cloud bill to the minimum regardless of the cloud provider you are working with.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>googlecloud</category>
      <category>azure</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>What would the ideal web framework look like?</title>
      <author>Siddharth</author>
      <pubDate>Thu, 26 Aug 2021 13:22:53 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/what-would-the-ideal-web-framework-look-like-p5m</link>
      <guid>https://dev.to/siddharthshyniben/what-would-the-ideal-web-framework-look-like-p5m</guid>
      <description>&lt;p&gt;It seems like every week there is another ground-breaking new web framework. Some of them are interpreted, some compiled. Some of them are based on HTML tags, some component driven, and so on. &lt;/p&gt;

&lt;p&gt;So, what would the "ideal" framework look like, maybe using ideas of existing frameworks? Of course, no framework is perfect for use everywhere, but what would come close?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Next.js!</title>
      <author>Babilah</author>
      <pubDate>Thu, 26 Aug 2021 12:58:09 +0000</pubDate>
      <link>https://dev.to/blessing/next-js-3pa3</link>
      <guid>https://dev.to/blessing/next-js-3pa3</guid>
      <description>&lt;p&gt;Hey Folks! I hope you are doing great.&lt;/p&gt;

&lt;p&gt;In this post we will be learning next.js and why you should use it for your next project. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-nextjs"&gt;
  &lt;/a&gt;
  What is next.js?
&lt;/h3&gt;

&lt;p&gt;The react framework for production. &lt;a href="https://nextjs.org/"&gt;Next.js org&lt;/a&gt;&lt;br&gt;
Next.js is a framework built on the react library. It helps you create server side rendering and static applications which improves user experience and SEO.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-nextjs"&gt;
  &lt;/a&gt;
  Why Next.js?
&lt;/h3&gt;

&lt;p&gt;Next.js simplifies the process of building a react application. I'll give you 10 reasons why Next.Js should be used for your next project.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Image optimization&lt;/strong&gt; &lt;br&gt;
Next.js has its own image component which helps in resizing, optimizing and scaling images. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fast Refresh&lt;/strong&gt; &lt;br&gt;
Any change or edit you make in your react component is instantly reflected in your browser.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Zero Config&lt;/strong&gt; &lt;br&gt;
No or little configuration is needed when creating or building your app. Automatic compilation and building.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt; &lt;br&gt;
It supports various authentication patterns each designed for different use cases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Routing&lt;/strong&gt;&lt;br&gt;
Next.js has a file base routing system. In a typical react app you will need to install a third party library to help with routing in your app but with next.js it is made available for you with no config needed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;API Routes&lt;/strong&gt;*&lt;br&gt;
You can create API endpoints inside your next.js application. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CSS Support&lt;/strong&gt; &lt;br&gt;
Next.js by default is styled using CSS modules which saves you the time of choosing a CSS library. You are allowed to use any CSS framework like tailwind CSS or CSS in JS library like styled components. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Server Side Rendering(SSR) and Static Site Generation(SSG)&lt;/strong&gt;&lt;br&gt;
Pre-renders your pages at build time(SSG) or when the page is requested(SSR).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Code Splitting&lt;/strong&gt;&lt;br&gt;
Next.js automatically breaks your code to speed up page loading. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;TypeScript Support&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#websites-that-use-nextjs"&gt;
  &lt;/a&gt;
  Websites that use Next.js
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://coinmarketcap.com/"&gt;coinmarketcap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.binance.com/"&gt;Binance&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://zapier.com/"&gt;Zapier&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="//tiktok.com"&gt;TikTok&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="//dcc.godaddy.com"&gt;GoDaddy&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;All the features above makes next.js an amazing framework to work with. It provides you with the best developer experience.&lt;br&gt;
If you know other features of next.js or websites that use next.js then let me know about them in the comments.&lt;br&gt;
Thanks!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>XSS exploits explained</title>
      <author>Hargunbeer Singh</author>
      <pubDate>Thu, 26 Aug 2021 12:55:18 +0000</pubDate>
      <link>https://dev.to/hamiecod/xss-exploits-explained-10oc</link>
      <guid>https://dev.to/hamiecod/xss-exploits-explained-10oc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;XSS stands for &lt;strong&gt;C&lt;/strong&gt;ross-&lt;strong&gt;S&lt;/strong&gt;ite &lt;strong&gt;S&lt;/strong&gt;cripting. The web works using HTML which uses angular brackets which act as an instruction to the web browser, for example by specifying text in the &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; tag, you are instructing the browser to display some bold text. If you want to write an angle bracket as text and not as an instruction, you do something which is called &lt;strong&gt;escaping&lt;/strong&gt;, it is using some specific codes in the text so that the browser renders the specific codes to something else, like the browser would render &lt;code&gt;&amp;lt;&lt;/code&gt; as &lt;code&gt;&amp;amp;lt;&lt;/code&gt; and it would render &lt;code&gt;&amp;gt;&lt;/code&gt; as &lt;code&gt;&amp;amp;gt;&lt;/code&gt;. Web apps usually take inputs from the user and store it in their database, and then render the data when required. So when a hacker, sends html as data to the database via the web app, the html is stored in the db, and when the same data is rendered as html, they affect the page and get inserted as HTML into the specific web page. This is what is called cross-site scripting. This was harmful to the users of the web app as suppose you set &lt;code&gt;&amp;lt;/html&amp;gt;&lt;/code&gt; as your bio, when a user visits your profile and see your bio, the html tag would end for them, thus not rendering the remaining web page. This was a deadly attack for the websites.&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Then JavaScript comes along, and XSS attacks get even more deadlier for the websites, you can insert JavaScript in a website just by including a &lt;code&gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; tag in the HTML and specifying the JavaScript inside the script tag. This is really dangerous as when it is executed on the victim's device, it may steal sensitive information. Suppose you write a script tag along with JavaScript which steals the cookies of the victim as your profile bio on a website that does not filter the tags, so whenever some user would visit your profile the script would get executed and the victim's cookies would be stolen.&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;HTML tags are not the only possibility for exploiting a website using XSS. There other vulnerabilities as well. Anything that acts on a user input, can be used to exploit the website, e.g.: functions. Attributes like &lt;code&gt;onerror&lt;/code&gt; could also be used to exploit a website using XSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preventive-measures"&gt;
  &lt;/a&gt;
  Preventive Measures
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Websites must use XSS filtering on their websites, so that the HTML tags are filtered out.&lt;/li&gt;
&lt;li&gt;Websites must escape the Html tag angle brackets while storing some user input in the database&lt;/li&gt;
&lt;li&gt;Websites must test their user interface, so that they leave no XSS vulnerability.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
XSS vulnerabilities can be endless, therefore websites organize bug bounty programs to find these vulnerabilities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;p&gt;You can use the following websites to find out how XSS exploits work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://xss-game.appspot.com/"&gt;Google XSS Game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alf.nu/alert1"&gt;alert(1) to win game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://polyglot.innerht.ml/"&gt;XSS Polygot Challenge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>devops</category>
      <category>security</category>
    </item>
    <item>
      <title>Javascript deep dive: Code compilation and scope (part 1)</title>
      <author>Kelvin</author>
      <pubDate>Thu, 26 Aug 2021 12:49:51 +0000</pubDate>
      <link>https://dev.to/kelvin0712/javascript-deep-dive-code-compilation-and-scope-part-1-19cl</link>
      <guid>https://dev.to/kelvin0712/javascript-deep-dive-code-compilation-and-scope-part-1-19cl</guid>
      <description>&lt;p&gt;Are you always wondering how JS can understand our code, how scopes can be created? &lt;/p&gt;

&lt;p&gt;You'll need to have a better mental model about how JavaScript engine handles our code in general.  In this article, we are going through how JS scopes are created under the hood, step by step like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compilation&lt;/li&gt;
&lt;li&gt;Parsing/Compilation phase&lt;/li&gt;
&lt;li&gt;Prove of code compilation&lt;/li&gt;
&lt;li&gt;Briefly about lexical scope&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#compiled-and-interpreted"&gt;
  &lt;/a&gt;
  Compiled and Interpreted
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Compilation&lt;/strong&gt; is a set of steps that process the text of your code and turn it into a list of instructions that computer can understand. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s-WubBqV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvq358r5y603eiym99kf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-WubBqV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvq358r5y603eiym99kf.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interpretation&lt;/strong&gt; is similar to compilation but instead of processing the whole source code, it will be transformed line by line. Each line is executed before proceeding to process the next line.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YENNdctX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejgvdbs3tz3ir02myit6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YENNdctX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejgvdbs3tz3ir02myit6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: Modern JS engines actually use numerous variations of both compilation and interpretation in handling of JS programs. &lt;/p&gt;

&lt;p&gt;We will only go through compilation as JS is portrayed as a &lt;strong&gt;compiled language.&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#compiling-code"&gt;
  &lt;/a&gt;
  Compiling code
&lt;/h2&gt;

&lt;p&gt;JavaScript code is processed in &lt;strong&gt;2 phases&lt;/strong&gt;: &lt;strong&gt;Parsing/Compilation&lt;/strong&gt; and &lt;strong&gt;Execution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parsing/Compilation&lt;/strong&gt; phase will be our main concern in this article. &lt;/p&gt;

&lt;p&gt;Parsing/Compilation happens in 3 basic stages: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Tokenizing/Lexing&lt;/strong&gt;: consider &lt;code&gt;var a = 2;&lt;/code&gt; the program will likely to break this up into tokens: &lt;code&gt;var&lt;/code&gt;  &lt;code&gt;a&lt;/code&gt;  &lt;code&gt;=&lt;/code&gt;  &lt;code&gt;2&lt;/code&gt; &lt;code&gt;;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Parsing&lt;/strong&gt;: take a stream of tokens and turn it into Abstract Syntax Tree (AST)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;VariableDeclaration&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;      var
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Identifier&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;             a
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AssignmentExpression&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; =
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NumericLiteral&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;     2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Code generation&lt;/strong&gt;: take the AST and turn it into a set of instructions to actually create a variable called a and assign a value to it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: JS compilation only happens milliseconds right before the code is executed. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prove-2-phases"&gt;
  &lt;/a&gt;
  Prove: 2 phases
&lt;/h2&gt;

&lt;p&gt;There are 3 program characteristics that you can observe to prove that processing JS programs happens in at least 2 phases: parsing/compilation ⇒ execution&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Syntax errors&lt;/li&gt;
&lt;li&gt;Early errors&lt;/li&gt;
&lt;li&gt;Hoisting&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#syntax-errors"&gt;
  &lt;/a&gt;
  Syntax errors
&lt;/h3&gt;

&lt;p&gt;Consider:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// Throw a syntax error here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run this code, you can observe that the program will throw the error first instead of logging 'Hi' to the console. &lt;/p&gt;

&lt;p&gt;This example shows that JS engine know about the syntax error on the third line before executing first and second line, by &lt;strong&gt;parsing the entire program before executing it&lt;/strong&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#early-errors"&gt;
  &lt;/a&gt;
  Early errors
&lt;/h3&gt;

&lt;p&gt;Consider:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;saySomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Uncaught Syntax error: Duplicate param name not allowed&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;saySomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again here, how can JS engine throw the error in the second line without logging 'Hi' to the console first? The answer is the code &lt;strong&gt;must be fully parsed before any executions happen&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: duplicate param name is not allowed in strict mode, but it's allowed in non-strict mode. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hoisting"&gt;
  &lt;/a&gt;
  Hoisting
&lt;/h3&gt;

&lt;p&gt;Consider:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;counting&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// error&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;counting&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="c1"&gt;// ReferenceError: Cannot access 'greeting' before&lt;/span&gt;
&lt;span class="c1"&gt;// initialization&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Technically, the error is thrown because &lt;code&gt;number = 2&lt;/code&gt; is accessing variable &lt;code&gt;number&lt;/code&gt; before it's declared on the next line. &lt;/p&gt;

&lt;p&gt;But why it does not access the variable &lt;code&gt;var number&lt;/code&gt;  rather than accessing the &lt;code&gt;let number&lt;/code&gt; ? &lt;/p&gt;

&lt;p&gt;&lt;em&gt;The only way JS engine would know is that:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JS processes the code first ⇒ comes to the statement &lt;code&gt;let number = 1&lt;/code&gt; ⇒ declare the a blocked-scope ⇒ set up all the scopes and their variable associations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully you're now convinced that JS programs are parsed before any execution begins and scope is determined as the program is compiled, and should not generally be affected by runtime conditions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lexical-scope"&gt;
  &lt;/a&gt;
  Lexical scope
&lt;/h2&gt;

&lt;p&gt;Lexical scope is controlled entirely by the placement of functions, blocks, variable declarations, in relation to one another. &lt;/p&gt;

&lt;p&gt;If you declare a variable with &lt;code&gt;var&lt;/code&gt; inside a function ⇒ the compiler handles this declaration as it's parsing the function ⇒ associates the variable with &lt;strong&gt;function's scope&lt;/strong&gt; (&lt;em&gt;the variable is accessible anywhere inside the function&lt;/em&gt;) .  &lt;/p&gt;

&lt;p&gt;If you declare a variable with &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; ⇒ compiler handles this declaration ⇒ associates the variable with &lt;strong&gt;block's scope (&lt;/strong&gt;&lt;em&gt;variable is accessible inside the nearest {...} rather than its enclosing function&lt;/em&gt;&lt;strong&gt;).&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;While scopes are identified during compilation, they're not actually created until runtime, each time a scope needs to run.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Compilation is a set of steps that process the text of your code and turn it into a list of instructions that computer can understand. &lt;/p&gt;

&lt;p&gt;JS code is processed in 2 phases: Parsing/Compilation and Execution &lt;/p&gt;

&lt;p&gt;The Parsing/Compilation phase only happens in mere microseconds (or less!) right before the code is executed&lt;/p&gt;

&lt;p&gt;Scopes are identified during compilation&lt;/p&gt;

&lt;p&gt;Lexical scope is controlled entirely by the placement of functions, blocks, variable declarations, in relation to one another. &lt;/p&gt;

&lt;p&gt;Thank you for reading my article!&lt;/p&gt;

&lt;p&gt;My website: &lt;a href="https://kelvinnguyen97.com/blog"&gt;https://kelvinnguyen97.com/blog&lt;/a&gt;&lt;br&gt;
My Github: &lt;a href="https://github.com/kelvin0712"&gt;https://github.com/kelvin0712&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>node</category>
    </item>
    <item>
      <title>The New Creator Economy - DAOs, Community Ownership, and Cryptoeconomics</title>
      <author>Nader Dabit</author>
      <pubDate>Thu, 26 Aug 2021 12:11:43 +0000</pubDate>
      <link>https://dev.to/dabit3/the-new-creator-economy-daos-community-ownership-and-cryptoeconomics-lnl</link>
      <guid>https://dev.to/dabit3/the-new-creator-economy-daos-community-ownership-and-cryptoeconomics-lnl</guid>
      <description>&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--w9XjGomt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1381647440856690692/zMNpX959_normal.png" alt="Tarique Sha profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Tarique Sha
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @kissingsky
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/jackbutcher"&gt;@jackbutcher&lt;/a&gt; Cycle of Creator economy👇&lt;br&gt;Web1:&lt;br&gt;Companies create content.&lt;br&gt;Companies earn money.&lt;br&gt;Web2:&lt;br&gt;People create content.&lt;br&gt;Companies earn money.&lt;br&gt;Web3:&lt;br&gt;People create content.&lt;br&gt;People earn money.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:50 PM - 19 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1428368687644364805" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1428368687644364805" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1428368687644364805" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Since I first had what I can only describe as a spiritual awakening about 10 years ago to the fact that technology would (figuratively) rule the world, I've been obsessed with wanting to understand how software works and how to build it.&lt;/p&gt;

&lt;p&gt;Since that moment, my life has changed significantly for the better. I can only attribute it to the simple fact that I have relied not only on my own instincts, but of those of people much smarter and more experienced than me.&lt;/p&gt;

&lt;p&gt;My hypothesis is this - try to find and follow the lead of those who have exhibited a long track record of success, find interests in their wake, and do my best to excel at them (while continuing to explore my own curiosities).&lt;/p&gt;

&lt;p&gt;This approach has led me to try and master JavaScript, and then React, and finally to build a successful consultancy ultimately landing me on a team at AWS in a life changing experience that lasted a little over 3 years. All of this with &lt;a href="https://twitter.com/dabit3/status/1259471051429478400"&gt;no high school diploma or college degree&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;During this time (like many developers) I've relentlessly dived into books, podcasts, blog posts, YouTube videos, and source code of every kind, but there has always been a topic that has captured my curiosity the most - futurism.&lt;/p&gt;

&lt;p&gt;Futurists like &lt;a href="https://twitter.com/gleonhard"&gt;Gerd Leonhard&lt;/a&gt; and &lt;a href="https://twitter.com/michiokaku"&gt;Michio Kaku&lt;/a&gt; speak of a future, sometimes beautiful and sometimes bleak, but always with the passion and phrasing that make your thoughts wander and move past the current moment in time and into a mind boggling world that does not yet exist.&lt;/p&gt;

&lt;p&gt;I recently had another "aha" moment, similar to my technological awakening, that has completely changed the direction of my career and my life. In the spirit of these futurists, I want to talk about why &lt;a href="https://www.freecodecamp.org/news/what-is-web3/"&gt;Web3&lt;/a&gt; excites me just as much as their ideas, but is instead happening as we speak.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web3"&gt;
  &lt;/a&gt;
  Web3
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;This post is meant to dive more into what I think are the benefits and repercussions of Web3. If you want to know my interpretation of what Web3 is, see my thoughts &lt;a href="https://www.freecodecamp.org/news/what-is-web3/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Web3 represents a handful of ideas which together bring about entirely new mental models, organizational structures, and community incentives forcing us to rethink many things that we have become accustomed to.&lt;/p&gt;

&lt;p&gt;All of the recent innovation happening is being made possible because of decentralized protocols. The internet itself has thrived because of native internet protocols that we use everyday, like http, ftp, tcp, and ssh. One of the reasons these protocols have been so successful was that they were widely adopted and not subject to change. If I build a site using http, people can use it without any centralized intermediary - we can trust that it is going to work.&lt;/p&gt;

&lt;p&gt;There were two major pieces of native functionality that have been left out up until recently - payments and state.&lt;/p&gt;

&lt;p&gt;Blockchains have enabled both of these things, opening the door for programmable money and state without the need of a centralized server, bank, or any intermediary at all.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ownership"&gt;
  &lt;/a&gt;
  Ownership
&lt;/h3&gt;

&lt;p&gt;One of the driving forces and the one that resonates with most people (and me) is that Web3 enables ownership.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#gaming"&gt;
  &lt;/a&gt;
  Gaming
&lt;/h4&gt;

&lt;p&gt;At some point the internet and gaming became almost indistinguishable. Not only because most games continue to receive updates over time, but the most popular ones are often the most interactive ones.&lt;/p&gt;

&lt;p&gt;Fortnite took a lot of people by surprise because it created an innovative new combination of gameplay, peer-to-peer connection, and a unique business model - and everyone gets the game for free. The experience is very interactive, you can join old friends and make new ones, there are constant improvements and enhancements that just happen automatically - the game is consistently evolving. &lt;/p&gt;

&lt;p&gt;The monetization strategy was also innovative. Fortnite allows players to buy in-game currency as well as skins that they can wear in the game. If you have a child you know that the $65 you may have spent on the game itself is probably peanuts compared to the amount of money kids spend over the lifetime of their gameplay.&lt;/p&gt;

&lt;p&gt;The problem though is this: when the player decides to stop playing the game or outgrows it, where has all that money gone? More importantly, who is allowed as a creator to benefit from all of the purchasing power? The answer is, well, Fortnite (the platform).&lt;/p&gt;

&lt;p&gt;What if, instead, players retained ownership of their items and were able to keep or sell them. Their items would maintain, increase, or decrease in value like any physical asset. These types of experiences and communities are now being made possible via NFTs. NFTs enable scarcity in a world where there was in the past no scarcity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://axieinfinity.com/"&gt;Axie Infinity&lt;/a&gt; is an example of how this looks in practice. It is a blockchain-based game that is the most successful of it's kind, and has recently had explosive growth, catapulting it to over &lt;a href="https://hypebeast.com/2021/8/axie-infinity-ethereum-first-nft-game-1-bilion-sales-info"&gt;$1 billion in sales&lt;/a&gt; with over $780 million in the 30 days ending August 10 2021.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://parallel.life/faq/"&gt;Parallel&lt;/a&gt; is an online card game that has done over $100 million in sales and is still extremely early. &lt;a href="https://zkga.me/"&gt;Dark Forest&lt;/a&gt; enables players to &lt;a href="https://twitter.com/BlaineBublitz/status/1399397415732400129"&gt;get paid to play the game&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When players realize they can retain much of the value of their time and investments while still enjoying the benefit of the game, it not only changes the way they view gaming and where they spend their money, it aligns new incentives around the game itself. If the game succeeds, they can share in that success, therefore they become even more invested.&lt;/p&gt;

&lt;p&gt;The combination of ownership, community, and creators who have built audiences creates a whirlwind of new and exciting opportunities that we are just starting to begin see explored.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/Fwiz"&gt;Ryan Watt&lt;/a&gt;, the head of YouTube gaming agrees.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--BchNRyvV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1348665103936229380/EbPPKZIm_normal.jpg" alt="Ryan Wyatt profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Ryan Wyatt
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @fwiz
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I'm bullish on NFT's.&lt;br&gt;&lt;br&gt;I believe play-to-earn is the next major gaming model, as well as an open market for in-game digital items; most in-game assets are illiquid, which is insane to me. All of this will change long-term through blockchain and NFT's. It's self-evident.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:48 PM - 21 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1429108126234546182" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1429108126234546182" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1429108126234546182" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#social-media-and-art"&gt;
  &lt;/a&gt;
  Social media and art
&lt;/h3&gt;

&lt;p&gt;Social media platforms were revolutionary in that they allowed anyone from almost any background the ability to grow and foster large audiences using tools that were made free to anyone with a device and an internet connection. There are no gatekeepers to becoming famous on social media as there have been in the past in film and TV, the intermediary was abstracted away and peer to peer connections and content sharing was made possible.&lt;/p&gt;

&lt;p&gt;The flaw in these implementations is that they offer a terrible monetization system, not just for the platform but for the creator as well. Advertising and the exploitation of user data is the go to play. Also almost all of the money generated by the platform, goes to the platform - the platform monetizes the content being created by its users in exchange of use of the platform itself. This is how social media works today.&lt;/p&gt;

&lt;p&gt;In Web3, both creators and the community are able to gain and retain ownership within a platform, creating a synergy that, once experienced, makes the legacy interactions of the past seem archaic and undesirable. When I say ownership, I don't only mean ownership of content, but actual equity as well.&lt;/p&gt;

&lt;p&gt;We are seeing the beginnings of this in the art world of Web3. Artists who were, in the past, often barely making it are now able to leverage their platforms, often in collaboration with other community members or causes, creating projects that leverage NFT collections to give community members as well as the public a way to participate and distribute equity all around. Art and code are also beginning to overlap.&lt;/p&gt;

&lt;p&gt;Projects like &lt;a href="https://generativemasks.on.fleek.co/#/"&gt;Generative Masks&lt;/a&gt; allow talented creators like &lt;a href="https://twitter.com/takawo"&gt;Takawo Shunsuke&lt;/a&gt; to leverage the skills he's acquired throughout his career to generate over $3 million in sales for his collection in just a few minutes, spreading awareness for himself and his cause, and creating another new community (of owners) simultaneously. The best part is that he's giving it all back to the communities he's benefited from. On top of that, smart contracts allow him to programmatically enable a commission for any future sale that happens going forward, and in just a couple of weeks that amounts to another over $600,000.00. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
    &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__two-pics"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wy22-Xii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E9CXFPjXEAc9c6C.jpg" alt="unknown tweet media content"&gt;
    &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dPf3yvts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1428566196157390850/vo8yaHnl_normal.jpg" alt="nader | sha.eth profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        nader | sha.eth
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/dabit3"&gt;@dabit3&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Yesterday &lt;a href="https://twitter.com/takawo"&gt;@takawo&lt;/a&gt; released a generative art project using p5.js.&lt;br&gt;&lt;br&gt;The project generated over $3 million in sales in a few minutes using these 432 lines of JavaScript:&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/sRUMuQRuBd"&gt;ipfs.io/ipfs/QmXwfwQxr…&lt;/a&gt;&lt;br&gt;&lt;br&gt;The project is probably one of the most interesting and innovative I've seen (thread) 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      01:41 AM - 18 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1427807893458497544" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1427807893458497544" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1427807893458497544" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Generative art itself is an emerging category that combines code and creativity and is something that could alone warrant an entire post, but it suits the coming era particularly well as it enables artists to scale their creativity, community, and distribution.&lt;/p&gt;

&lt;p&gt;There will continue to be a larger and larger percentage of digital artists because they can use powerful tools and programs to create art that can then be used in an infinite number of ways. They can then put it for sale on an international, 24 hour, liquid market.&lt;/p&gt;

&lt;p&gt;Open Sea, the top online art marketplace today, has seen an absolute explosion in growth the past few months.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJw1psuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E9hBoNRXMAc00oH.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--uIVTGz0D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1364831160652726280/ZdmKJ-sy_normal.jpg" alt="Nate Chastain (natec.eth) profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nate Chastain (natec.eth)
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @natechastain
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      August 2021 has become such a significant outlier that it represents more volume than all previous months in OpenSea history, combined. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      00:34 AM - 24 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1429965382849343490" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1429965382849343490" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1429965382849343490" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Even recently surpassing Etsy in sales.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9qv1Tm4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1372766487396589576/6V2SdFeQ_normal.jpg" alt="Alex Atallah (alexatallah.eth) profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Alex Atallah (alexatallah.eth)
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @xanderatallah
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      OpenSea has now passed Etsy in volume, with $1b so far in August&lt;br&gt;&lt;br&gt;NFTs are rapidly catching up to all of eBay
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      02:13 AM - 17 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1427453596858294272" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1427453596858294272" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1427453596858294272" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Whether this type of volume continues, I have no idea. My guess is that there will be some volatility and fairly large swings both up and down. But there is definitely &lt;em&gt;something&lt;/em&gt; there.&lt;/p&gt;

&lt;p&gt;Most of these NFT projects are launched on Ethereum. Ethereum is soon merging &lt;a href="https://ethereum.org/en/eth2/"&gt;a new consensus mechanism&lt;/a&gt; that will make NFTs orders of magnitude more environmentally friendly as a means of sales and transfer of art, which in the past all required ground transportation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#future-of-social-media"&gt;
  &lt;/a&gt;
  Future of social media
&lt;/h4&gt;

&lt;p&gt;As it stands today, users of social media platforms can begin leveraging Web3 tools, communities, and platforms to begin monetizing their audience. I believe there will be a breakthrough app that will disrupt social media as we know it built in the in the next 1 - 3 years that blends all of these ideas together in a way that we haven't experienced yet.&lt;/p&gt;

&lt;p&gt;Many people have echoed a similar sentiment. &lt;a href="https://twitter.com/AaveAave"&gt;Aave&lt;/a&gt;, a very successful DeFi protocol built on Ethereum, has already begun work on &lt;a href="https://decrypt.co/76278/defi-project-aave-to-release-ethereum-based-twitter-alternative-this-year"&gt;a decentralized version of Twitter&lt;/a&gt;:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--fpDs3uXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1424548857111744513/cGBAQlHl_normal.jpg" alt="stani.jpg (👻,🐻‍❄️) profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        stani.jpg (👻,🐻‍❄️)
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @stanikulechov
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Since &lt;a href="https://twitter.com/jack"&gt;@jack&lt;/a&gt; is going to build Aave on Bitcoin, Aave should build Twitter on Ethereum
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:14 PM - 17 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1416385933549654016" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1416385933549654016" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1416385933549654016" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Jack Dorsey of Twitter is also working on a Decentralized version of Twitter, though I believe that this type of application will ultimately come from the community or a DAO.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4r0Xm-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1421226968385658881/YmaW2AV2_normal.jpg" alt="Jay Graber profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jay Graber
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @arcalinea
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I’m excited to announce that I’ll be leading &lt;a href="https://twitter.com/bluesky"&gt;@bluesky&lt;/a&gt;, an initiative started by &lt;a href="https://twitter.com/Twitter"&gt;@Twitter&lt;/a&gt; to decentralize social media. Follow updates on Twitter and at &lt;a href="https://t.co/Sg4MxK1zwl"&gt;blueskyweb.org&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:01 PM - 16 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1427314482154414080" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1427314482154414080" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1427314482154414080" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#daos-grants-community-ownership-and-social-tokens"&gt;
  &lt;/a&gt;
  DAOs, grants, community ownership, and social tokens
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;DAO stands for Decentralized Autonomous Organization. You can read about what a DAO is &lt;a href="https://www.notboring.co/p/the-dao-of-daos"&gt;here&lt;/a&gt;, &lt;a href="https://linda.mirror.xyz/Vh8K4leCGEO06_qSGx-vS5lvgUqhqkCz9ut81WwCP2o"&gt;here&lt;/a&gt;, and &lt;a href="https://decrypt.co/resources/decentralized-autonomous-organization-dao"&gt;here&lt;/a&gt;, but I want to focus on how DAOs will play a part in the new creator economy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Shared ownership is a characteristic you'll see carried across all areas of Web3, including how we think about companies and incentive structures around how business is done.&lt;/p&gt;

&lt;p&gt;In Web2 companies, cash usually comes from investors and there is no value returned to them for years. Ownership is largely concentrated in the first handful of employees along with their investors.&lt;/p&gt;

&lt;p&gt;It usually takes years to reach a point where investors or employees with equity can begin to see any return on their investment and time spent, often through the old ways of advertising and exploitation of user data.&lt;/p&gt;

&lt;p&gt;Web3 and blockchains bring about entirely new business models, made possible by &lt;a href="https://www.gemini.com/cryptopedia/what-is-tokenization-definition-crypto-token#section-security-tokens-utility-tokens-and-cryptocurrencies"&gt;tokenization&lt;/a&gt; and &lt;a href="https://thegraph.com/blog/modeling-cryptoeconomic-protocols-as-complex-systems-part-1"&gt;cryptoeconomic protocols&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are quite literally countless ways that these tokens are being utilized to create new ways of collaboration and building, ranging from DAOs to web infrastructure to &lt;a href="https://coopahtroopa.mirror.xyz/gWY6Kfebs9wHdfoZZswfiLTBVzfKiyFaIwNf2q8JpgI"&gt;micro-economies&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/prtyDAO"&gt;PartyDAO&lt;/a&gt; which &lt;a href="https://twitter.com/nnnnicholas/status/1423428739589943300"&gt;created over $200,000 in revenue in its first day&lt;/a&gt;, was "built in 3 months by a small group of internet friends working part-time", and is backed by a smart contract&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://compound.finance/"&gt;Compound&lt;/a&gt;, a decentralized finance protocol that allows you to lend and borrow cryptocurrency without trusting a third party with your funds with a market cap of over $2 billion as of this writing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.superrare.com/the-superrare-dao"&gt;Super Rare&lt;/a&gt; is a digital art platform that recently launched a token, &lt;a href="https://twitter.com/DCLBlogger/status/1427860274808197124"&gt;airdropping as much as $140,000 to it's earliest users&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://gitcoin.co/"&gt;Gitcoin&lt;/a&gt; is a platform that enables developers to get paid for working on open source projects&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://thegraph.com/"&gt;Graph Protocol&lt;/a&gt; is a decentralized web infrastructure protocol that allows developers to build APIs to enable the performant querying of blockchain data, all enabled by it's native utility token&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/seedclubhq"&gt;Seed Club&lt;/a&gt; is a social token incubator that’s focused on helping creators launch and grow social tokens&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/fwbtweets"&gt;Friends with Benefits&lt;/a&gt; is a social DAO and community that I'm part of that is 100% owned and governed by the participants&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://twitter.com/pleasrdao"&gt;PleasrDAO&lt;/a&gt; allows investors to come together to purchase high-value non-fungible tokens like &lt;a href="https://foundation.app/@Snowden/stay-free-edward-snowden-2021-24437"&gt;this piece&lt;/a&gt; from Edward Snowden &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most DAOs have &lt;a href="https://thegraph.com/blog/wave-one-funding"&gt;desirable grants programs&lt;/a&gt;, enabling developers and other participants to work with various teams and projects at their will, on things they find interesting or that fit their skill set. There are more and more people beginning to work full time for grants and with DAOs vs traditional full time employment.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dPf3yvts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1428566196157390850/vo8yaHnl_normal.jpg" alt="nader | sha.eth profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        nader | sha.eth
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/dabit3"&gt;@dabit3&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      If you're a developer looking to make extra money without quitting your main job, you can make anywhere between a few thousand to ~$500,000 by participating in DAOs while learning and getting your foot in the door with web3 tech.&lt;br&gt;&lt;br&gt;Here are 21 projects with solid grant programs:
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:29 PM - 22 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1418307358946701319" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1418307358946701319" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1418307358946701319" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;If this sounds like something you're interested in being involved, I'd suggest to jump right in. Try P2E (play to earn), get involved with a DAO, or even mint your own NFT.&lt;/p&gt;

&lt;p&gt;Also check out &lt;a href="https://dev.to/dabit3/how-to-get-into-ethereum-crypto-web3-as-a-developer-9l6"&gt;How to Get Into Ethereum | Crypto | Web3 as a Developer&lt;/a&gt; which is what I put together after getting my own start in the space.&lt;/p&gt;

&lt;p&gt;If you want to learn more about these ideas, I encourage you to follow some of the people I mention in this post:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dPf3yvts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1428566196157390850/vo8yaHnl_normal.jpg" alt="nader | sha.eth profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        nader | sha.eth
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/dabit3"&gt;@dabit3&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Some of the people and projects mentioned in this post:&lt;br&gt;&lt;a href="https://twitter.com/derFuturist"&gt;@derFuturist&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/_kinjalbshah"&gt;@_kinjalbshah&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/AaveAave"&gt;@AaveAave&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/graphprotocol"&gt;@graphprotocol&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/kissingsky"&gt;@kissingsky&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/michiokaku"&gt;@michiokaku&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/Cooopahtroopa"&gt;@Cooopahtroopa&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/AxieInfinity"&gt;@AxieInfinity&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/ParallelNFT"&gt;@ParallelNFT&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/Fwiz"&gt;@Fwiz&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/takawo"&gt;@takawo&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/natechastain"&gt;@natechastain&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/xanderatallah"&gt;@xanderatallah&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/opensea"&gt;@opensea&lt;/a&gt;&lt;br&gt;@stanikulechov&lt;br&gt;&lt;a href="https://twitter.com/prtyDAO"&gt;@prtyDAO&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/FWBtweets"&gt;@FWBtweets&lt;/a&gt;&lt;br&gt;&lt;br&gt;2/3
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:12 PM - 26 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1430865775011803137" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1430865775011803137" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1430865775011803137" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dPf3yvts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1428566196157390850/vo8yaHnl_normal.jpg" alt="nader | sha.eth profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        nader | sha.eth
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/dabit3"&gt;@dabit3&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/compoundfinance"&gt;@compoundfinance&lt;/a&gt; &lt;br&gt;&lt;a href="https://twitter.com/gitcoin"&gt;@gitcoin&lt;/a&gt; &lt;br&gt;&lt;a href="https://twitter.com/SuperRare"&gt;@SuperRare&lt;/a&gt; &lt;br&gt;&lt;a href="https://twitter.com/seedclubhq"&gt;@seedclubhq&lt;/a&gt; &lt;br&gt;&lt;a href="https://twitter.com/PleasrDAO"&gt;@PleasrDAO&lt;/a&gt; &lt;br&gt;&lt;a href="https://twitter.com/rushil2cents"&gt;@rushil2cents&lt;/a&gt; &lt;br&gt;&lt;a href="https://twitter.com/packyM"&gt;@packyM&lt;/a&gt; &lt;br&gt;&lt;a href="https://twitter.com/DCLBlogger"&gt;@DCLBlogger&lt;/a&gt; &lt;br&gt;&lt;br&gt;3/3
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:12 PM - 26 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1430865775766740994" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1430865775766740994" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1430865775766740994" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Also, here are some of my favorite articles that touch on some of the stuff I've outlined here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://coopahtroopa.mirror.xyz/gWY6Kfebs9wHdfoZZswfiLTBVzfKiyFaIwNf2q8JpgI"&gt;The Rise of Micro-Economies&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.rushil2cents.com/the-creator-economy-today-vs-2025/"&gt;The Creator Economy: Today Vs. 2025&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.notboring.co/p/the-value-chain-of-the-open-metaverse"&gt;The Value Chain of the Open Metaverse&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.notboring.co/p/the-dao-of-daos"&gt;The DAO of DAOs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to &lt;a href="https://twitter.com/adeets_22"&gt;Aditi&lt;/a&gt; for helping me with ideas and edits as I was getting this across the finish line 🙏&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dPf3yvts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1428566196157390850/vo8yaHnl_normal.jpg" alt="nader | sha.eth profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        nader | sha.eth
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/dabit3"&gt;@dabit3&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      web2: capital driven markets&lt;br&gt;web3: cultural driven markets&lt;br&gt;&lt;br&gt;web2: buying on the internet&lt;br&gt;web3: buying o̶n̶ the internet&lt;br&gt;&lt;br&gt;web2: democratize information&lt;br&gt;web3: democratize wealth&lt;br&gt;&lt;br&gt;web2: friends become strangers&lt;br&gt;web3: strangers become friends&lt;br&gt;&lt;br&gt;web2: expense&lt;br&gt;web3: investment
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:38 PM - 25 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1430585405662011397" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1430585405662011397" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1430585405662011397" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>webdev</category>
      <category>blockchain</category>
      <category>ethereum</category>
    </item>
    <item>
      <title>Wireless Headset Microphone Issue for Linux</title>
      <author>Ashutosh Kumar</author>
      <pubDate>Thu, 26 Aug 2021 12:07:44 +0000</pubDate>
      <link>https://dev.to/blastoise/wireless-headset-microphone-issue-for-linux-23ol</link>
      <guid>https://dev.to/blastoise/wireless-headset-microphone-issue-for-linux-23ol</guid>
      <description>&lt;p&gt;Configuring microphone in a bluetooth headset in Linux is a difficult task. I have seen a lot of queries regarding this on several forums. I recently fixed this issue for myself in Manjaro KDE.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-does-this-issue-arise"&gt;
  &lt;/a&gt;
  Why does this issue arise?
&lt;/h2&gt;

&lt;p&gt;Most of the linux distribution use PulseAudio to manage sound settings. But pulseaudio with default installation only supports A2DP sink profile for High Fidelity Playback. This configuration only supports unidirectional audio transfer (Laptop to Headset). For using headset as both input and output we need to make use of HSP/HFP sink profile which is not present in the default installation of pulseaudio due to it’s buggy nature.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;There are few libraries which adds the support for HSP/HFP in pulseaudio such as oFono and phonesim but it takes a lot of effort to setup and also does not guarantee good results. A better solution is to replace PulseAudio with PipeWire.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-pipewire"&gt;
  &lt;/a&gt;
  What is PipeWire
&lt;/h3&gt;

&lt;p&gt;PipeWire acts as a drop-in replacement for PulseAudio and offers an easy way to set up Bluetooth headsets. It includes out-of-the-box support for A2DP sink profiles using SBC/SBC-XQ, AptX, LDAC or AAC codecs, and HFP/HSP.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation-for-manjaro-kde"&gt;
  &lt;/a&gt;
  Installation for Manjaro KDE
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First remove pulseaudio along with all it's dependencies by running the following command:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo pacman -Rdd manjaro-pulse pulseaudio pulseaudio-alsa pulseaudio-equalizer pulseaudio-jack pulseaudio-lirc pulseaudio-rtp pulseaudio-zeroconf pulseaudio-bluetooth pulseaudio-ctl sof-firmware&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install pipewire and all the necessary dependencies using the following command:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo pacman -S manjaro-pipewire&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now execute the following commands to start the service:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;systemctl --user enable pipewire.socket --now&lt;/p&gt;

&lt;p&gt;systemctl --user start pipewire.service&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reboot the system&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To check if the replacement is working, run the following command and see the output:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pactl info
...
Server Name: PulseAudio (on PipeWire 0.3.32)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#installation-for-ubuntu-users"&gt;
  &lt;/a&gt;
  Installation for Ubuntu Users:
&lt;/h3&gt;

&lt;p&gt;Open your terminal and follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We will use a PPA for adding Pipewire to Ubuntu. Execute the following command to do this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo add-apt-repository ppa:pipewire-debian/pipewire-upstream&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update the package list using the following command:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo apt update&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Pipewire using the following command:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo apt install pipewire&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is also a dependency that is needed to be installed with Pipewire, otherwise you will face the issue of “Bluetooth headset won’t connect after installing pipewire”. Install the dependency by executing the following command:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo apt install libspa-0.2-bluetooth&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, to install the client libraries:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo apt install pipewire-audio-client-libraries&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reload the daemon:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;systemctl --user daemon-reload&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disable PulseAudio:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;systemctl --user --now disable pulseaudio.service pulseaudio.socket&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are on Ubuntu 20.04, you also need to “mask” the PulseAudio by:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;systemctl --user mask pulseaudio&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am not sure but if possible you can try to run this on other versions too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After a new update of Pipewire, you also need to enable pipewire-media-session-service:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;systemctl --user --now enable pipewire-media-session.service&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To check if it is working, run the following command and see the output:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pactl info
...
Server Name: PulseAudio (on PipeWire 0.3.32)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If it doesn’t show up then try restarting Pipewire by this command:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;systemctl --user restart pipewire&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If it’s still not showing your microphone, you can try rebooting once and remove and pair your Bluetooth device again to check if it works now.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you want to rollback all the changes we did, you can do it by using:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;systemctl --user unmask pulseaudio&lt;/p&gt;

&lt;p&gt;systemctl --user --now enable pulseaudio.service pulseaudio.socket&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://askubuntu.com/a/1339898"&gt;AskUbuntu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this article helped you in configuring your wireless headphone microphone.&lt;/p&gt;

&lt;p&gt;Questions, suggestions, a word of thanks is always encouraged.&lt;/p&gt;

</description>
      <category>ubuntu</category>
      <category>archlinux</category>
      <category>pipewire</category>
      <category>pulseaudio</category>
    </item>
    <item>
      <title>CORS Explained + Enable in Python Projects</title>
      <author>Nina Hwang</author>
      <pubDate>Thu, 26 Aug 2021 12:03:13 +0000</pubDate>
      <link>https://dev.to/ninahwang/cors-explained-enable-in-python-projects-1i96</link>
      <guid>https://dev.to/ninahwang/cors-explained-enable-in-python-projects-1i96</guid>
      <description>&lt;h2&gt;
  &lt;a href="#cors"&gt;
  &lt;/a&gt;
  CORS
&lt;/h2&gt;

&lt;p&gt;CORS("Cross-Origin Resource Sharing") refers to the situation when the domain requesting a resource is different from the domain serving that resource. This happens frequently when a front-end and a back-end are in different origins and the front-end communicates with the back-end using JavaScript code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#origin"&gt;
  &lt;/a&gt;
  Origin
&lt;/h3&gt;

&lt;p&gt;"Origin" is the &lt;strong&gt;combination&lt;/strong&gt; of protocol(e.g. &lt;code&gt;http&lt;/code&gt;, &lt;code&gt;https&lt;/code&gt;), domain(e.g. &lt;code&gt;somedomain.com&lt;/code&gt;, &lt;code&gt;localhost&lt;/code&gt;), and port(e.g. &lt;code&gt;80&lt;/code&gt;, &lt;code&gt;443&lt;/code&gt;, &lt;code&gt;3000&lt;/code&gt;, &lt;code&gt;8000&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Therefore, all these are different origins.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://localhost&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://localhost:8000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://localhost&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#allow-cors"&gt;
  &lt;/a&gt;
  Allow CORS
&lt;/h3&gt;

&lt;p&gt;Most of browsers do not allow CORS by default due to security issue. Therefore, if you want to enable CORS, you should specify &lt;strong&gt;allowed origins&lt;/strong&gt;(origins that are permitted to make cross-origin requests), &lt;strong&gt;allowed methods&lt;/strong&gt;(HTTP methods that are allowed for cross-origin requests), and &lt;strong&gt;allowed headers&lt;/strong&gt;(HTTP request headers that should be supported for cross-origin requests) etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-cors-request"&gt;
  &lt;/a&gt;
  Types of CORS Request
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#preflight-requests"&gt;
  &lt;/a&gt;
  Preflight Requests
&lt;/h4&gt;

&lt;p&gt;Before performing cross-domain requests, browsers will initiate "preflight" request to determine whether those requests are allowed. The preflight requests are done by &lt;code&gt;OPTIONS&lt;/code&gt; , which is a type of HTTP methods.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#simple-requests"&gt;
  &lt;/a&gt;
  Simple Requests
&lt;/h4&gt;

&lt;p&gt;If the request meets certain conditions, browsers don't send preflight requests. &lt;/p&gt;

&lt;p&gt;Simple requests satisfy these conditions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTTP method is either:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HEAD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Apart from the headers automatically set by the user agent, the only headers which are allowed to be manually set are one of these:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Accept&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Accept-Language&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Content-Language&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Content-Type&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Only &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;, &lt;code&gt;multipart/form-data&lt;/code&gt;, &lt;code&gt;text/plain&lt;/code&gt; are allowed as values&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the request is made using an &lt;code&gt;XMLHttpRequest&lt;/code&gt; object, no event listeners are registered on the object returned by the &lt;code&gt;XMLHttpRequest.upload&lt;/code&gt; property used in the request&lt;/li&gt;
&lt;li&gt;No &lt;code&gt;ReadableStream&lt;/code&gt; object is used in the request.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more information about CORS, check &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;this document&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cors-handson"&gt;
  &lt;/a&gt;
  CORS Hands-On
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#django"&gt;
  &lt;/a&gt;
  Django
&lt;/h3&gt;

&lt;p&gt;Install CORS module:&lt;br&gt;
&lt;code&gt;pip install django-cors-headers&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# settings.py
&lt;/span&gt;&lt;span class="n"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# '*' is a wildcard which allows any host
&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="s"&gt;'corsheaders'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;MIDDLEWARE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="s"&gt;'corsheaders.middleware.CorsMiddleware'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# CORS settings
&lt;/span&gt;&lt;span class="n"&gt;CORS_ORIGIN_ALLOW_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;CORS_ALLOW_CREDENTIALS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;CORS_ALLOW_METHODS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;'DELETE'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'OPTIONS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'PATCH'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'PUT'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;CORS_ALLOW_HEADERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;'accept'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'accept-encoding'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'authorization'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'content-type'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'dnt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'origin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'user-agent'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'x-csrftoken'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'x-requested-with'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more information about django-cors-headers, check &lt;a href="https://github.com/adamchainz/django-cors-headers"&gt;this document&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fastapi"&gt;
  &lt;/a&gt;
  FastAPI
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# main.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.middleware.cors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CORSMiddleware&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;origins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;CORSMiddleware&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;allow_origins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;origins&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;allow_credentials&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;allow_methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;allow_headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more information about FastAPI CORS setup, check &lt;a href="https://fastapi.tiangolo.com/tutorial/cors/"&gt;this document&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flask"&gt;
  &lt;/a&gt;
  Flask
&lt;/h3&gt;

&lt;p&gt;Install CORS extension:&lt;br&gt;
&lt;code&gt;pip install -U flask-cors&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# main.py
&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;CORS&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;CORS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more information about flask-cors, check &lt;a href="https://readthedocs.org/projects/flask-cors/downloads/pdf/latest/"&gt;this document&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
