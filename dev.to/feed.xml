<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Tips That Made My Site More Accessible</title>
      <author>Timothy Foster</author>
      <pubDate>Sat, 28 Aug 2021 21:47:02 +0000</pubDate>
      <link>https://dev.to/auroratide/tips-that-made-my-site-more-accessible-1omj</link>
      <guid>https://dev.to/auroratide/tips-that-made-my-site-more-accessible-1omj</guid>
      <description>&lt;p&gt;If you want to learn more about creating accessible content, I highly recommend giving this article by &lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
 a read:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/101-digital-accessibility-tips-and-tricks-4728" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;101 Digital Accessibility (a11y) tips and tricks&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ Jul 30 ・ 68 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;
  &lt;small&gt;What is &lt;strong&gt;accessibility&lt;/strong&gt;?&lt;/small&gt;
  &lt;small&gt;Accessibility is a way of making things usable by &lt;em&gt;as many people as possible&lt;/em&gt;, regardless of ability or disability. I like to call it "universal design".&lt;/small&gt; 

&lt;/p&gt;

&lt;p&gt;The article may look daunting at first, and indeed it took me some hours over the course of a few days to read through and digest everything, but it's worth every minute!&lt;/p&gt;

&lt;p&gt;I like this article for taking the enormity of accessibility and condensing it into quick wins applicable to a many different cases. It's a great entry point, providing a list of topics into which you can dig deeper over time.&lt;/p&gt;

&lt;p&gt;Although I had already been making accessibility improvements to my website, I was still able to find some valuable action items for myself. Here are the &lt;strong&gt;top five ways&lt;/strong&gt; I was able to improve my website!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-12-one-h1-per-page"&gt;
  &lt;/a&gt;
  Tip 12: One h1 per page
&lt;/h2&gt;

&lt;p&gt;The principle is simple: each page should have one and only one &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; heading!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Of the many pages on your site, the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; heading tells your visitors exactly where they are.&lt;/li&gt;
&lt;li&gt;Assistive technology such as &lt;strong&gt;screen readers&lt;/strong&gt; rely on this heading to announce that location.&lt;/li&gt;
&lt;li&gt;And usually, this heading demarks the start of the main content, after all the navigation at the top.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A screen reader is capable of reading the content of a site out loud to those who either can't or would rather not read the text. As a feature, they allow people to look at all the headings on a page to jump to where they want to go.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JFQW7B0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mliikm2ftch7dmog7ek2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JFQW7B0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mliikm2ftch7dmog7ek2.png" alt="The page's headings are shown as a list on a menu."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The headings menu for Mac's VoiceOver tool&lt;/p&gt;



&lt;p&gt;Well, each of the pages on my site use to have &lt;em&gt;two&lt;/em&gt; level one headings: one was the page title, but the other was the &lt;em&gt;website's&lt;/em&gt; title, "Auroratide". And that website title was the same on every single page. That would be pretty annoying to someone using a screen reader!&lt;/p&gt;

&lt;p&gt;The change? Instead of using an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, the site's title no longer uses a heading at all and is simply styled to look like one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"page-title"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Auroratide&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#tip-29-alt-attributes"&gt;
  &lt;/a&gt;
  Tip 29: alt attributes
&lt;/h2&gt;

&lt;p&gt;Images are fantastic, but not everyone can see them. Therefore, it is important each image has a suitable &lt;strong&gt;text replacement&lt;/strong&gt; which can either be shown to someone or read aloud by a screen reader. This is called an image's &lt;code&gt;alt&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;Before finding this article, I had already audited every single image on my website to give them suitable text alternatives, but this point is so important I decided to bring it up anyway.&lt;/p&gt;

&lt;p&gt;To write good alt text, imagine you are sharing an article with someone over the phone and need to describe the image to them with words. What you say is generally good alt text! For more on that, here's an article I had recently written:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/auroratide" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IQGc9Jrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--yRZgsqjz--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/176563/df2440ff-8bcb-4662-bdd6-c1f1a5c06c0d.png" alt="auroratide"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/auroratide/image-alt-text-the-way-the-spec-intended-it-360i" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Image Alt Text, the Way the Spec Intended It&lt;/h2&gt;
      &lt;h3&gt;Timothy Foster ・ Jul 16 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tip-43-include-a-skip-link-to-bypass-site-navigation"&gt;
  &lt;/a&gt;
  Tip 43: Include a skip link to bypass site navigation
&lt;/h2&gt;

&lt;p&gt;Some people prefer to navigate a website entirely with a keyboard, pressing Tab to go from landmark to landmark.&lt;/p&gt;

&lt;p&gt;Usually, pressing Tab on a page for the first time takes you to the very first link, which might be the site's title.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tab&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the site's title are the navigation links.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tab&lt;/li&gt;
  &lt;li&gt;Tab&lt;/li&gt;
  &lt;li&gt;Tab&lt;/li&gt;
  &lt;li&gt;Tab&lt;/li&gt;
  &lt;li&gt;Tab&lt;/li&gt;
  &lt;li&gt;Tab&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And after &lt;em&gt;that&lt;/em&gt; is the actual page's content.&lt;/p&gt;

&lt;p&gt;Now imagine hopping from page to page on a site, and &lt;em&gt;every single time&lt;/em&gt; a new page is loaded you have to Tab through the entire navigation just to get to the content. Hence the skip link!&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;skip link&lt;/strong&gt; allows someone to bypass the navigation and get directly to the content. As such, it is generally the first focusable item.&lt;/p&gt;

&lt;p&gt;A basic implementation links to a main element in the document, hiding the link off-screen until it becomes focused:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"skip-link"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Skip to Content&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.skip-link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-9999px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.skip-link&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;small&gt;Here is &lt;a href="https://github.com/Auroratide/auroratide.com/blob/master/src/client/layout/SkipLink/SkipLink.svelte"&gt;my implementation of skip link&lt;/a&gt; on Github.&lt;/small&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tip-52-font-size"&gt;
  &lt;/a&gt;
  Tip 52: Font Size
&lt;/h2&gt;

&lt;p&gt;I remember the early 2000s where websites had tiny Times New Roman fonts. At the time I was also tiny and could read those fonts; nowadays, any time I encounter one of these relics of the past &lt;small&gt;(almost always some .edu site)&lt;/small&gt;, I struggle severely!&lt;/p&gt;

&lt;p&gt;Today, the standard &lt;strong&gt;minimum&lt;/strong&gt; font size is 16px.&lt;/p&gt;

&lt;p&gt;Before reading the accessibility tips, my website had a base font size of 18px, which is actually bigger than the minimum. However, I often make use of &lt;strong&gt;side text&lt;/strong&gt;, stuff tangential to the main content but I feel is worth including. This side text uses a smaller font, which dipped it into a range smaller than 16px. Yikes!&lt;/p&gt;

&lt;p&gt;As a result, I universally bumped &lt;em&gt;all&lt;/em&gt; font sizes up so that now the smallest font possible is 16px, and the usual font is 20px. In fact, the universal increase was necessary since I like the aesthetic of a &lt;em&gt;thin&lt;/em&gt; font, but using a thin font raises the size threshold in order to remain accessible.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;The code change for this was not very bad since I make liberal use of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties"&gt;CSS variables&lt;/a&gt;. Here is a &lt;a href="https://github.com/Auroratide/auroratide.com/commit/11336edde42be011d2eeae18f115953cf1f3250b"&gt;full diff of the font change&lt;/a&gt; for those interested.&lt;/small&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tip-85-dont-forget-the-visited-state"&gt;
  &lt;/a&gt;
  Tip 85: Don't forget the :visited state
&lt;/h2&gt;

&lt;p&gt;You've probably seen this before if you've used the Google search engine: links you have been to are a different color from those that are new.&lt;/p&gt;


&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qVmqomjW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfgr1n1vsurgesitr88a.png" alt="One search result is purple and the other is blue."&gt;&lt;p&gt;Don't ask why I was researching multiple time dimensions&lt;/p&gt;



&lt;p&gt;Turns out I rely on this feature &lt;small&gt;(more than I care to admit)&lt;/small&gt; to re-find pages I should have bookmarked! From an accessibility standpoint, differentiating visited links is especially important for those with memory impairment. And thankfully, all it takes is a couple lines of CSS!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:visited&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--skin-text-visited&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Prior, I had deliberately made all my links the same out of aesthetic preference. However, learning how this simple change could benefit a lot of people convinced me to apply the difference, and honestly I quite like it now.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bonus-tip-101-people-are-not-users"&gt;
  &lt;/a&gt;
  Bonus Tip 101: People are not users
&lt;/h2&gt;

&lt;p&gt;And finally, my favorite tip: Do not call people "users"!&lt;/p&gt;

&lt;p&gt;At least for me, I get very different mental images when I think of users versus people. It's the difference between thinking of the website, or thinking of the &lt;em&gt;face&lt;/em&gt; behind the website. I develop far more empathy for the latter, and ultimately &lt;strong&gt;empathy is at the core of accessibility&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-other-95-tips"&gt;
  &lt;/a&gt;
  The Other 95 Tips
&lt;/h2&gt;

&lt;p&gt;This was just a list of five improvements I was able to make to my website from a list of 101 tips. I highly encourage you to bookmark &lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
 's article to reference when needed!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/101-digital-accessibility-tips-and-tricks-4728" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;101 Digital Accessibility (a11y) tips and tricks&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ Jul 30 ・ 68 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>HTML Features, probably you never knew existed.</title>
      <author>Vishwa.R</author>
      <pubDate>Sat, 28 Aug 2021 19:29:19 +0000</pubDate>
      <link>https://dev.to/codereaper08/html-features-you-never-knew-existed-54ii</link>
      <guid>https://dev.to/codereaper08/html-features-you-never-knew-existed-54ii</guid>
      <description>&lt;p&gt;Hello again from codereaper08!&lt;br&gt;
Thanks again to all my followers, who always motivate me to write blogs weekly, in spite of my tight academic schedules.&lt;/p&gt;

&lt;p&gt;Back again with a good article, I hope. In this post, we are going to discuss 5 features in HTML, which probably we never knew existed. So let's get into it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-wbr-tag"&gt;
  &lt;/a&gt;
  1. WBR Tag:
&lt;/h2&gt;

&lt;p&gt;Let's start from the first one in our list, &lt;code&gt;wordbreak&lt;/code&gt; tag, abbreviated as &lt;code&gt;&amp;lt;wbr&amp;gt;&lt;/code&gt;. You may think, what's the meaning of its existence, well It's not like the handy &lt;code&gt;br&lt;/code&gt; tags we use. &lt;code&gt;&amp;lt;wbr&amp;gt;&lt;/code&gt; just doesn't force words to break unless there's a necessary situation to do so. &lt;code&gt;wbr&lt;/code&gt; tag is an empty tag (Doesn't have a closing tag).&lt;/p&gt;

&lt;p&gt;We'll see a comparison between &lt;code&gt;&amp;lt;wbr&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;, resize the browser-window to see how &lt;code&gt;wbr&lt;/code&gt; breaks itself on necessary situations.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/VishwaR/3bsw7vq8/embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-address-tag"&gt;
  &lt;/a&gt;
  2. address Tag:
&lt;/h2&gt;

&lt;p&gt;Using &lt;code&gt;div&lt;/code&gt;'s for enclosing contact info?&lt;br&gt;
HTML gives a good semantic way of doing that using &lt;code&gt;&amp;lt;address&amp;gt;&lt;/code&gt; tag. So what's different in using &lt;code&gt;&amp;lt;address&amp;gt;&lt;/code&gt; tags, well, It renders the text in &lt;em&gt;Italics&lt;/em&gt; with line-breaks above and below the &lt;code&gt;&amp;lt;address&amp;gt;&lt;/code&gt; tags. It also has a by default display property of &lt;code&gt;block&lt;/code&gt;. Take a look at the below JSFiddle.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/VishwaR/f2Lnpuhz//embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-optgroup-tag"&gt;
  &lt;/a&gt;
  3. optgroup Tag:
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt; tag is used when you need to group the options into categories. This makes selecting an option from a very large list of options easy!&lt;br&gt;
User can look into the relevant category and select an option in that particular category. I've created a superhero &lt;code&gt;optgroup&lt;/code&gt; for demonstration in the below JSFiddle.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/VishwaR/vm9jnwe4//embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-portal-tag"&gt;
  &lt;/a&gt;
  4. portal Tag:
&lt;/h2&gt;

&lt;p&gt;Now things get interesting! What we are going to see is a tag called &lt;code&gt;&amp;lt;portal&amp;gt;&lt;/code&gt;. This was launched by &lt;strong&gt;Google&lt;/strong&gt; in I/O 2019 DevCon, where they mentioned that, &lt;code&gt;&amp;lt;portal&amp;gt;&lt;/code&gt; will be an upgrade to &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;. &lt;code&gt;&amp;lt;portal&amp;gt;&lt;/code&gt; allows seamless navigation inside the embedded content, too!. One sad thing, It is not supported by many browsers, including the normal &lt;strong&gt;Google Chrome&lt;/strong&gt; too. Currently, only the &lt;a href="https://www.google.com/chrome/canary/"&gt;Chrome canary&lt;/a&gt; supports the &lt;code&gt;&amp;lt;portal&amp;gt;&lt;/code&gt; tag. Check out the demo video below.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4JkipxFVE9k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-capture-attribute-for-input-element"&gt;
  &lt;/a&gt;
  5. capture attribute for Input element:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vnwy_JyH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1488240339625-c4014e114224%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1079%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vnwy_JyH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1488240339625-c4014e114224%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1079%26q%3D80" alt="camera"&gt;&lt;/a&gt;&lt;/p&gt;

Photo by &lt;a href="https://unsplash.com/@lucabravo?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Luca Bravo&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/camera?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;

  



&lt;p&gt;Lastly, we are going to see about &lt;code&gt;capture&lt;/code&gt; attribute for the input elements. &lt;code&gt;capture&lt;/code&gt; added as an attribute to an input element opens the camera for taking shots of the user(front camera) or the scene(rear camera). This tag only works on mobile, and it simply falls back to a file picker in Desktop. &lt;code&gt;capture&lt;/code&gt; attribute has two values,&lt;/p&gt;

&lt;p&gt;— user --&amp;gt; Opens User facing Camera (Front)&lt;br&gt;
— environment --&amp;gt; Opens Environment (Rear)&lt;/p&gt;

&lt;p&gt;Take a look at the below JSFiddle.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/VishwaR/7r0ec9g1//embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And, that's it for today, Feel I missed out something? Write down in comments, I'll be happy to include. Love it? Give a 💖 for the article. Thanks for reading and have a good time 😄&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>todayilearned</category>
      <category>html</category>
      <category>todayisearched</category>
    </item>
    <item>
      <title>A scalable CSS only Typewriter Effect</title>
      <author>Temani Afif</author>
      <pubDate>Sat, 28 Aug 2021 18:37:47 +0000</pubDate>
      <link>https://dev.to/afif/a-scalable-css-only-typewriter-effect-2opn</link>
      <guid>https://dev.to/afif/a-scalable-css-only-typewriter-effect-2opn</guid>
      <description>&lt;p&gt;You want a Typewriter effect for your text but you are lost within all the variations that use JS and the ones that use a complex CSS code?&lt;/p&gt;

&lt;p&gt;Search no more! Here is a simple typewriter effect with only few line of CSS where you don't need to deal with any complex code. It's scalable and works with any kind of text.&lt;/p&gt;

&lt;p&gt;See it in play:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWoajZE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;The logic is pretty simple and relies on a basic HTML code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;CSS typewriter&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You put the text within two &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; and you are done. You don't need to deal with pseudo-element, duplicated texts, data-attribute, etc. &lt;/p&gt;

&lt;p&gt;The CSS now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;inline-flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.type&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;word-break&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;break-all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.type&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;90&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No, I forget nothing. This is all the CSS needed for the typewriter effect.&lt;/p&gt;

&lt;p&gt;3 tricks are used to achieve the final result:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) cyclic percentage size&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a powerful CSS quirk to calculate width (or height) of elements. I used a first &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; having &lt;code&gt;display:inline-flex&lt;/code&gt; so its size depend on its content (it's an inline level element). The content inside (the other &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;) is using a percentage width so a width based on its container. We have a cyclic calculation since each element depend on the other!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3.org/TR/css-sizing-3/#cyclic-percentage-contribution"&gt;The Specification&lt;/a&gt; detail such behavior. I don't recommend reading it because you will get lost (I had to read it 10 times to understand only a few cases).&lt;/p&gt;

&lt;p&gt;I will try to use easy words to explain what is happening in our case.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First the browser will ignore the percentage width to define the width of the container. The child element will have &lt;code&gt;width:auto&lt;/code&gt;. Our first span will have its width equal to the width of its child (so the width of the text).&lt;/li&gt;
&lt;li&gt;Then the browser will get back to calculate the width of child based on the width of the parent found previously BUT the width of the parent will not change again to not fall into an infinite loop.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words, the &lt;code&gt;width:X%&lt;/code&gt; I am applying to the span is based on its own content that's why we don't need any complex calculation. Animating the element from &lt;code&gt;0%&lt;/code&gt; to &lt;code&gt;100%&lt;/code&gt; is all what we need.&lt;/p&gt;

&lt;p&gt;This is what we get:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/WNOQojX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) breaking the words&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now let's add &lt;code&gt;word-break: break-all;&lt;/code&gt; to the previous code:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/powjNwV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We are getting closer. Our text is wrapping letter by letter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;break-all&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Breaking is allowed within “words” &lt;sup&gt;&lt;a href="https://drafts.csswg.org/css-text/#word-break-property"&gt;ref&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;3) fix the height to one line&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The final trick is to set the height of the element to be equal to one line. By default, the height of a line is around &lt;code&gt;1.2xfont-size&lt;/code&gt; that's why I using &lt;code&gt;1.2em&lt;/code&gt;. You have to adjust this value based on your case or based on the value of &lt;code&gt;line-height&lt;/code&gt; (it should be equal to &lt;code&gt;line-height&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/GREpNON?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;That's it! we have our typewriter effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wait, there is an issue with the first letter!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, good catch. That's why in the initial code I am adding:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.type&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a &lt;em&gt;invisible&lt;/em&gt; first letter that will take the place of the &lt;em&gt;real&lt;/em&gt; first letter.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWoabrq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;✔️ No Javascript&lt;br&gt;
✔️ A basic HTML code&lt;br&gt;
✔️ No complex CSS code. Less than 10 declarations and no hard-coded values&lt;br&gt;
✔️ Accessible. The text is written within the html code (no pseudo element, no duplicated text)&lt;br&gt;
✔️ You can use any text you want without changing the code.&lt;br&gt;
✔️ No browser support issue. All the properties I am using are supported by most of the browsers. We can also remove the use of flexbox: &lt;a href="https://codepen.io/t_afif/pen/VwWvmxe"&gt;https://codepen.io/t_afif/pen/VwWvmxe&lt;/a&gt;&lt;br&gt;
❌ Doesn't support multi-line of text. Well, I need one drawback 😜&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#what-about-the-caret"&gt;
  &lt;/a&gt;
  What about the caret?
&lt;/h3&gt;

&lt;p&gt;You can easily add one using box-shadow:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWoapaj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-about-multiple-text"&gt;
  &lt;/a&gt;
  What about multiple text?
&lt;/h2&gt;

&lt;p&gt;The above was only the first part of the "real" typewriter effect I am aiming for.&lt;/p&gt;

&lt;p&gt;See it in play:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/QWgjpyb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The HTML code is still a basic one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;I am &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;a CSS Hacker&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;an expert web developer&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;a lazy person!&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.type&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1.2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.type&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;max-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;word-break&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;break-all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="m"&gt;12s&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.type&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;90&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;#0000&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-300%&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The trick is to make all the spans under each other (that's why I used &lt;code&gt;display:grid&lt;/code&gt; on their parent container) so that the longest word will define the width of the main element.&lt;/p&gt;

&lt;p&gt;Then each span will animate like previously. The only difference is that, with a small transform trick, I will show only one at a time.&lt;/p&gt;

&lt;p&gt;If you remove the &lt;code&gt;overflow:hidden&lt;/code&gt; from the second span you can see what is happening:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/vYZNxmb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Notice the use of &lt;code&gt;max-width:max-content&lt;/code&gt; to limit the caret to the width of the actual text and not the width of the main element.&lt;/p&gt;

&lt;p&gt;You can also notice that 3 is used with many values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;12s = 3*(2*2s)&lt;/li&gt;
&lt;li&gt;steps(3)&lt;/li&gt;
&lt;li&gt;translateY(-300%) = translateY(3*-100%)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yes, that value can be a CSS variable. Our code will become &lt;strong&gt;scalable&lt;/strong&gt; and we can easily add as many text as we want:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/NWgGpyx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We have our scalable CSS only Typewriter Effect:&lt;/p&gt;

&lt;p&gt;✔️ No Javascript&lt;br&gt;
✔️ A basic HTML code&lt;br&gt;
✔️ No complex CSS code&lt;br&gt;
✔️ Accessible&lt;br&gt;
✔️ Works with any text content&lt;br&gt;
✔️ Scalable&lt;br&gt;
✔️ No browser support issue&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QbHdBjab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/10Y2YMUNmQa9a0/giphy.gif%3Fcid%3Decf05e47exmnx38wexbglodixm9wlqq3tvj8nov47fba0tml%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QbHdBjab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/10Y2YMUNmQa9a0/giphy.gif%3Fcid%3Decf05e47exmnx38wexbglodixm9wlqq3tvj8nov47fba0tml%26rid%3Dgiphy.gif%26ct%3Dg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Essential Concepts in JS</title>
      <author>Ambadi Ritik</author>
      <pubDate>Sat, 28 Aug 2021 18:36:27 +0000</pubDate>
      <link>https://dev.to/aritik/essential-concepts-in-js-4bbj</link>
      <guid>https://dev.to/aritik/essential-concepts-in-js-4bbj</guid>
      <description>&lt;p&gt;For first-timers , Javascript might seem easy at first with its C-like syntax...&lt;/p&gt;

&lt;p&gt;However the way it runs, the constant changes that are made to the language (ESNext) and its frameworks might overwhelm a beginner. &lt;br&gt;
I'm here to clear the confusion surrounding what I think is a beautiful , but most importantly , a &lt;em&gt;highly lucrative&lt;/em&gt; language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Highly Lucrative&lt;/em&gt;&lt;/strong&gt; because JS can do almost anything you want it to do today with much ease.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Want to build a Web Application?&lt;/strong&gt; No Problem. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Want to build a CLI Tool?&lt;/strong&gt; No Problem. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Want to build a Desktop App?&lt;/strong&gt; Puh. Easier done than said!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The increasingly vast amount of packages and libraries being made available daily indicate how abstract JS is when it comes to building a software application.&lt;/p&gt;

&lt;p&gt;JS however seems to receive a lot of hate , mostly because of how unconventional it is when compared to its rivals. It is confusing for anyone who might miss out on the theoretical aspects of JS.&lt;/p&gt;

&lt;p&gt;A lot of people overlook the theoretical aspects of Javascript before diving into the language. These concepts help us wrap our head around the different paths and patterns we take when building Javascript Applications. These patterns exist across every framework in JS Land so it makes a lot of sense to go through these concepts before learning the language itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ZVik7pBtu9dNS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ZVik7pBtu9dNS/giphy.gif" alt="Code"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#features-of-js"&gt;
  &lt;/a&gt;
  Features Of JS
&lt;/h2&gt;
&lt;h4&gt;
  &lt;a href="#1-multiparadigm"&gt;
  &lt;/a&gt;
  (1) Multi-paradigm
&lt;/h4&gt;

&lt;p&gt;Javascript supports procedural , object-oriented and event-driven functional programming!&lt;br&gt;
Getting to grips with JS' Object Oriented Style of Programming can prove to be extremely beneficial.&lt;/p&gt;

&lt;p&gt;Object Oriented Programming helps programmers visualise components of a Software Application much more easily. &lt;br&gt;
Furthermore , learning Typescript (Javascript with Types) allows programmers to implement the best design patterns in the industry with much ease. These design patterns are used to solve the most common problems encountered in software programming in the most efficient manner possible.&lt;/p&gt;

&lt;p&gt;This versatility makes Javascript very approachable but also very powerful.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2-interpreted"&gt;
  &lt;/a&gt;
  (2) Interpreted
&lt;/h4&gt;

&lt;p&gt;Javascript is different from C/C++ wherein , rather than a program being read at once , It is interpreted line-by-line. This is to say that JS will be slower than compiled languages like C/C++. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Javascript is infamous for being an extremely passive language during runtime. Troubleshooting for errors is extremely difficult. &lt;/p&gt;

&lt;p&gt;Don't be disheartened however. With time and practice , you'll learn how to comfortably sail through. The most common error involves your variables returning &lt;code&gt;NULL&lt;/code&gt; values. When such issues do creep up , head onto Stack Overflow because I guarantee you , you're not the first to get stuck with an error , no matter how niche it may be. It's always a good idea however to use the &lt;code&gt;console.log()&lt;/code&gt; liberally while your projects are undergoing development. This helps you pick out exactly the moment in your program's lifecycle , where your variable might have flaked out.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3-singlethreaded"&gt;
  &lt;/a&gt;
  (3) Single-Threaded
&lt;/h4&gt;

&lt;p&gt;Javascript can only perform one single task at a time. It queues different tasks into different queues based on type.&lt;br&gt;
In the most abstract sense , Javascript will basically group Synchronous tasks and Asynchronous tasks and queue them separately. &lt;/p&gt;

&lt;p&gt;Synchronous tasks are statements that are processed the moment they're encountered , i.e they run instantly. These tasks include log statements , variable declarations , conditional checking etc.&lt;/p&gt;

&lt;p&gt;Asynchronous tasks involve tasks that may take a variable amount of time to return an output. An example for asynchronous tasks may be requesting information from Web APIs. &lt;/p&gt;

&lt;p&gt;Additionally, Javascript also has a Job Queue which is used to deal with a JS Feature called Promises.&lt;/p&gt;

&lt;p&gt;You can practically see Javascript's single threaded nature by right clicking on this web page and hitting the inspect tab. Next , go to the console tab on the window that has just opened. Type the following code and hit enter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now observe that this page has become completely unresponsive. This is because the Javascript on this page is now busy running the infinite while loop that we executed above.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-nonblocking"&gt;
  &lt;/a&gt;
  (4) Non-Blocking
&lt;/h4&gt;

&lt;p&gt;We've discussed about Asynchronous tasks before. Since JS runs in a single-threaded environment , by default , it waits for nobody!&lt;/p&gt;

&lt;p&gt;Asynchronous code blocks are executed only after all the Synchronous code blocks are executed irrespective of the code's position in the program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm the first statement&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm the second statement&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm the third statement&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;console.log()&lt;/code&gt; logs the statement inside it to the console. &lt;br&gt;
The &lt;code&gt;setTimeout()&lt;/code&gt; function described above runs the second statement after one second. &lt;/p&gt;

&lt;p&gt;On examining the output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;I'm the first statement
I'm the third statement
I'm the second statement
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see that the third statement was logged before the second statement. This is because of JS's inherent method of handling Sync and Async code blocks. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xAxahR7T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vuqbpa4bgignff4yym2h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xAxahR7T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vuqbpa4bgignff4yym2h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-highlevel"&gt;
  &lt;/a&gt;
  (5) High-level
&lt;/h4&gt;

&lt;p&gt;Javascript is a high-level language. High-Level languages could simply mean that they're much more closer to the language humans speak. High-level languages are capable of offering more features to help programmers better express what they're trying to build.&lt;/p&gt;

&lt;p&gt;This high-level nature of Javascript helps it best serve the client-side portion of the web. A major limitation for JS used to be that it could only be served on the client-side and couldn't do file manipulations like most server-side languages could.&lt;/p&gt;

&lt;p&gt;However this has changed with &lt;code&gt;NodeJS&lt;/code&gt; that allows developers to use Javascript to build Backend Servers. Therefore with just one language , a software developer can operate on both the server and client-side. This has led to Full Stack Engineers becoming prominent.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-dynamically-typed"&gt;
  &lt;/a&gt;
  (6) Dynamically Typed
&lt;/h4&gt;

&lt;p&gt;Javascript is a dynamically typed language. This means that unlike C where we need to specify the datatype for a variable , we can instead use &lt;code&gt;type-inference&lt;/code&gt; in Javascript to automatically sense the type of data , a variable holds.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="c1"&gt;// In C variables must have datatypes. In order to change datatypes from one type to //another , we need to use type-casting&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mo"&gt;036&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Javascript , we use &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; to declare either variables or constants respectively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Hello World&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JS is awesome&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// JS is awesome&lt;/span&gt;

&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I changed my mind&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Error: const cannot be changed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While type inference may seem like a plus point because of its ease of use , it immediately becomes a con for larger projects that require type safety as a feature.&lt;/p&gt;

&lt;p&gt;For this reason , larger projects use TypeScript which is just a wrapper over Javascript that provides types , interfaces and various other features. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learning-strategy"&gt;
  &lt;/a&gt;
  Learning Strategy
&lt;/h3&gt;

&lt;p&gt;It takes a while to settle in JS Land but I have a simple checklist that serves as &lt;code&gt;Minimum Requirements&lt;/code&gt; for learning frameworks like Express or ReactJS. &lt;/p&gt;

&lt;p&gt;First off , do not rush towards learning these frameworks. Take your time mastering Vanilla Javascript .&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-basics"&gt;
  &lt;/a&gt;
  The Basics
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Variables and Constants&lt;/li&gt;
&lt;li&gt;Conditional Blocks (if-else)&lt;/li&gt;
&lt;li&gt;Loops (for, while , forEach)&lt;/li&gt;
&lt;li&gt;Switch Case&lt;/li&gt;
&lt;li&gt;Functions &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are your essential programming fundamentals.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-advanced-part-minimum-requirements"&gt;
  &lt;/a&gt;
  The Advanced Part (Minimum Requirements)
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Async/Await &lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;Classes in Javascript&lt;/li&gt;
&lt;li&gt;Rest/Spread Syntax&lt;/li&gt;
&lt;li&gt;Array/Object Iterators&lt;/li&gt;
&lt;li&gt;Array Destructuring &lt;/li&gt;
&lt;li&gt;Modules (import,export)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Continue learning as you build projects and soon enough , you'll have a pretty strong grasp on the language.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>12 Months of Code From a Middle Schooler. 🚀</title>
      <author>andrew_dev</author>
      <pubDate>Sat, 28 Aug 2021 18:34:58 +0000</pubDate>
      <link>https://dev.to/andrew_dev/12-months-of-code-from-a-middle-schooler-5g24</link>
      <guid>https://dev.to/andrew_dev/12-months-of-code-from-a-middle-schooler-5g24</guid>
      <description>&lt;p&gt;Hey! I'm Andrew, I am a 13 year old currently attending middle school in Canada. I love to code and learn new things each day. And I'd like to say this is heavily inspired from Aiden Bai's "A Year of Code from a High School Student". So here I am writing my own version, Of what I have learnt &amp;amp; built during the past 12 months.&lt;/p&gt;

&lt;p&gt;Things I created 🚀&lt;/p&gt;

&lt;p&gt;‣ &lt;a href="https://github.com/andrewnijmeh/polio:"&gt;https://github.com/andrewnijmeh/polio:&lt;/a&gt; I applied reverse-engineering techniques, to reverse-engineer the polio virus. Using the public gen bank DB. And bio-python library.&lt;br&gt;
‣ &lt;a href="https://utilitybot.co"&gt;https://utilitybot.co&lt;/a&gt; Discord bot I created, got into 40+ servers. Not too many but I was definitely proud. It was my first time creating discord bots.&lt;br&gt;
‣ &lt;a href="https://github.com/andrewnijmeh/blockchain-springboot"&gt;https://github.com/andrewnijmeh/blockchain-springboot&lt;/a&gt; Created a simple blockchain using springboot, I used java since at the time I was interested in learning java.&lt;/p&gt;

&lt;p&gt;Things I enjoyed doing 🙂 &lt;br&gt;
‣ Working at a company creating software for gamers, Worked there for about 10 months December 2020 to July 2021. (&lt;a href="https://auraside.com"&gt;https://auraside.com&lt;/a&gt;) &lt;br&gt;
‣ Working at my uncles company for the past 2 months (Started in July of 2021 Currently at this role) (&lt;a href="https://plr.me"&gt;https://plr.me&lt;/a&gt;)&lt;br&gt;
‣ Learning about bioinformatics, GenBank, proteins etc.&lt;br&gt;
‣ Learning about AWS, Getting more knowledge about elastic search, etc.&lt;/p&gt;

&lt;p&gt;Goals for next school year ↩️&lt;br&gt;
‣ Successfully start my own coding club at my school via hackclub.&lt;br&gt;
‣ Contribute more to open-source on GitHub.&lt;br&gt;
‣ Learn more about VueJS, And Kernel Dev. &lt;br&gt;
‣ Learn more about cyber-security, Improve some of my opsec.&lt;/p&gt;

&lt;p&gt;Thanks for reading, I wish you all the best luck for the new school year! (If you are a student of course!) &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Using lit-html with F#</title>
      <author>Angel D. Munoz</author>
      <pubDate>Sat, 28 Aug 2021 18:17:03 +0000</pubDate>
      <link>https://dev.to/tunaxor/using-lit-html-with-f-3i8b</link>
      <guid>https://dev.to/tunaxor/using-lit-html-with-f-3i8b</guid>
      <description>&lt;p&gt;Hello, there!&lt;/p&gt;

&lt;p&gt;Today I'll bring you some F# goodness this time for the frontend developers who may have scrapped F# due to the lack of frontend options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lit-html"&gt;
  &lt;/a&gt;
  Lit HTML
&lt;/h2&gt;

&lt;p&gt;Lit HTML is a rendering library that doesn't use Virtual DOM and uses javascript tagged template literals to render the HTML you know and love. Also it's highly worth noting that the HTML you will render is standard HTML meaning that you are free to use any kind of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components"&gt;web components&lt;/a&gt; in the market like &lt;a href="https://ionicframework.com/"&gt;ionic framework&lt;/a&gt;, &lt;a href="https://shoelace.style/"&gt;shoelace&lt;/a&gt; or Microsoft's &lt;a href="https://www.fast.design/"&gt;FAST&lt;/a&gt; elements &lt;a href="https://open-wc.org/guides/community/component-libraries/"&gt;among others&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-begin"&gt;
  &lt;/a&gt;
  Let's begin
&lt;/h2&gt;

&lt;p&gt;As life is with frontend development you will need the wollowing requirements&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A node LTS distribution (I'm using v14.17.1 but any LTS or current release should be good)&lt;/li&gt;
&lt;li&gt;A dotnet SDK (preferably net5.0+)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That being said you should be able to install the &lt;a href="https://www.nuget.org/packages/Fable.Lit.Templates"&gt;dotnet templates&lt;/a&gt; for Fable + Lit&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new --install Fable.Lit.Templates
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running that you will see something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Success: Fable.Lit.Templates::1.0.0-beta-003 installed the following templates:
Template Name        Short Name         Language
-------------------  -----------------  --------
Elmish.Lit           elmish-lit         F#
Feliz.Lit + Haunted  feliz-lit-haunted  F#
Lit + Haunted        lit-html-haunted   F#
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Brief digression, &lt;a href="https://hauntedhooks.netlify.app/"&gt;Haunted&lt;/a&gt; is a library that allows you to produce custom elements and also use hooks like you would if you were using &lt;a href="https://reactjs.org/"&gt;react&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;let's get started with the simplest one, type the following&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dotnet new elmish-lit -o elmish-sample&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will create a directory with an elmish based counter application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;VSCode is highly encouraged to use as the editor since it has support for both F# and interpolated strings highlight as html, the workspace includes the recommended extensions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;once you have opened that directory with your editor go ahead and type the following&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For performance and disk friendliness it is recommended that you use &lt;a href="https://pnpm.io/"&gt;pnpm&lt;/a&gt; although, it's not needed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the postinstall step will install the .NET tools (fable) required for the project to run&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm start&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will build your F# sources and start your project in localhost:8080&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: these templates are in beta stage please kindly report any bugs you might find along the way&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If everything goes well you should see this in your browser&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Zt1FXJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Iv0wYO8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Zt1FXJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Iv0wYO8.png" alt="hello world with a counter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's check how that works, open the &lt;code&gt;src/Main.fs&lt;/code&gt; file and go little by little&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt;

&lt;span class="c1"&gt;// let's import our styles&lt;/span&gt;
&lt;span class="nn"&gt;Fable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;JsInterop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;importSideEffects&lt;/span&gt; &lt;span class="s2"&gt;"./styles.css"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Elmish&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Lit&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Lit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Elmish&lt;/span&gt;

&lt;span class="c1"&gt;// define what is the shape of our state for our elmish program&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;State&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// in the Msg add the kind of events we will handle&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Msg&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Increment&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Decrement&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Reset&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"World"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// depending on what message we receive we will return our updated state&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Increment&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
              &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Decrement&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
              &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Reset&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;

&lt;span class="c1"&gt;// counter here is a simple function&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{|&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
               &lt;span class="n"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;unit&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;unit&lt;/span&gt;
               &lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;unit&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;unit&lt;/span&gt;
               &lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;unit&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;|})&lt;/span&gt;
    &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// using lit-html we can create "holes" where&lt;/span&gt;
    &lt;span class="c1"&gt;// we can bind functions and values depending on where we put them&lt;/span&gt;
    &lt;span class="n"&gt;html&lt;/span&gt;
        &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"""
        &amp;lt;button @click={fun _ -&amp;gt; props.decrement ()}&amp;gt;-&amp;lt;/button&amp;gt;
        &amp;lt;button @click={fun _ -&amp;gt; props.reset ()}&amp;gt;Reset&amp;lt;/button&amp;gt;
        &amp;lt;button @click={fun _ -&amp;gt; props.increment ()}&amp;gt;+&amp;lt;/button&amp;gt;
        &amp;lt;div&amp;gt;{props.counter}&amp;lt;/div&amp;gt;
        """&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="n"&gt;dispatch&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;counterEl&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="c1"&gt;// let's create our counter and pass the properties in&lt;/span&gt;
        &lt;span class="n"&gt;counter&lt;/span&gt;
            &lt;span class="o"&gt;{|&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;
               &lt;span class="c1"&gt;// check the dispatch for the functions&lt;/span&gt;
               &lt;span class="c1"&gt;// these will tell elmish what to do when a particular function&lt;/span&gt;
               &lt;span class="c1"&gt;// is called&lt;/span&gt;
               &lt;span class="n"&gt;decrement&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dispatch&lt;/span&gt; &lt;span class="nc"&gt;Decrement&lt;/span&gt;
               &lt;span class="n"&gt;increment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dispatch&lt;/span&gt; &lt;span class="nc"&gt;Increment&lt;/span&gt;
               &lt;span class="n"&gt;reset&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dispatch&lt;/span&gt; &lt;span class="nc"&gt;Reset&lt;/span&gt; &lt;span class="o"&gt;|}&lt;/span&gt;

    &lt;span class="c1"&gt;// put our main view with any other content we need&lt;/span&gt;
    &lt;span class="c1"&gt;// also ntoe that counterEl is put inside the hole and lit will&lt;/span&gt;
    &lt;span class="c1"&gt;// also render that&lt;/span&gt;
    &lt;span class="n"&gt;html&lt;/span&gt;
        &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"""
        &amp;lt;div&amp;gt;Hello {state.name}!&amp;lt;/div&amp;gt;
        {counterEl}
        """&lt;/span&gt;

&lt;span class="c1"&gt;// start your program and call it a day!&lt;/span&gt;
&lt;span class="nn"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkSimple&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withLit&lt;/span&gt; &lt;span class="s2"&gt;"elmish-lit"&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With propper editor tooling it should look like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--da86TgcI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/o6C0Tyt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--da86TgcI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/o6C0Tyt.png" alt="code with propper editor support"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That should get you started with Fable + Lit, feel free to experiment with these templates and also share with the community what did you do with them!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-more-complex-example"&gt;
  &lt;/a&gt;
  A more complex example
&lt;/h2&gt;

&lt;p&gt;Let's now check this repository&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.dev/AngelMunoz/fable-lit-sample"&gt;https://github.dev/AngelMunoz/fable-lit-sample&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This repository is a somewhat simple "RSS feed reader" we will not check every part of it but just some code&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This repository is based on this template&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet new lit-html-haunted -o lit-haunted-sample&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's check &lt;code&gt;src/FeedManaget.fs&lt;/code&gt;, but before we jump in directly I'll mention that the programming model here is more centered about the &lt;code&gt;component&lt;/code&gt; concept, meaning that a component has behavior/state and is responsible of a section of your UI, components can be as small as a single div or as big as a whole page, the ideal size will depend on the "responsability" of that component, each component can and should have child components that should handle a particular behavior. In F# you can think about each component as a function. Each atribute/property of a component is going to be an argument for that function.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;although each property and attribute (given how haunted works) will end up being a property of an object which will be a single parameter.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RequireQualifiedAccess&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Pages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FeedManager&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Types&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Lit&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Haunted&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Types&lt;/span&gt;

&lt;span class="c1"&gt;// a simple function that takes a feed object and renders it inside an ion-label&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;feedTpl&lt;/span&gt; &lt;span class="n"&gt;feed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;html&lt;/span&gt;
        &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"""
         &amp;lt;ion-item&amp;gt;
            &amp;lt;ion-label&amp;gt;{feed.Name}&amp;lt;/ion-label&amp;gt;
         &amp;lt;/ion-item&amp;gt;
        """&lt;/span&gt;
&lt;span class="c1"&gt;// feedManager is our function which handle&lt;/span&gt;
&lt;span class="c1"&gt;// all of the things related with managing the user's feeds&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;feedManager&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// set a state for the current feed item in the form&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;currentFeed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setCurrentFeed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="nn"&gt;Haunted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useState&lt;/span&gt; &lt;span class="o"&gt;({&lt;/span&gt; &lt;span class="nc"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;

    &lt;span class="c1"&gt;// set the state for the feeds the user has&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;feeds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setFeeds&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Haunted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Feed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LoadFeeds&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// handle the events of the feed's name input&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;nameChanged&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CustomEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;{|&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|}&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="c1"&gt;// as you can see we are handling CustomEvents&lt;/span&gt;
        &lt;span class="c1"&gt;// these are native browser CustomEvents!&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt;
            &lt;span class="c1"&gt;// since custom events do not always pass details&lt;/span&gt;
            &lt;span class="c1"&gt;// they define the detail as an option&amp;lt;'T&amp;gt;&lt;/span&gt;
            &lt;span class="c1"&gt;// we simply map over the value or set a default in case of detail being None&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;detail&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultValue&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
        &lt;span class="c1"&gt;// call our hook to set the name in our feed&lt;/span&gt;
        &lt;span class="n"&gt;setCurrentFeed&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;currentFeed&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;urlChanged&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CustomEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;{|&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|}&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;detail&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultValue&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;

        &lt;span class="n"&gt;setCurrentFeed&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;currentFeed&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;saveFeed&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;currentFeed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
           &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;currentFeed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;feeds&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[|&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;feeds&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;currentFeed&lt;/span&gt; &lt;span class="p"&gt;|]&lt;/span&gt;
            &lt;span class="c1"&gt;// we update both our state and the local storage&lt;/span&gt;
            &lt;span class="c1"&gt;// (for the next time we load the page)&lt;/span&gt;
            &lt;span class="n"&gt;setFeeds&lt;/span&gt; &lt;span class="n"&gt;feeds&lt;/span&gt;
            &lt;span class="nn"&gt;Feed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SaveFeeds&lt;/span&gt; &lt;span class="n"&gt;feeds&lt;/span&gt;

    &lt;span class="n"&gt;html&lt;/span&gt;
        &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"""
        &amp;lt;ion-content&amp;gt;
            &amp;lt;h1&amp;gt;Feed List&amp;lt;/h1&amp;gt;
            &amp;lt;section&amp;gt;
                &amp;lt;ion-item&amp;gt;
                    &amp;lt;ion-label&amp;gt;Add Feed&amp;lt;/ion-label&amp;gt;
                &amp;lt;/ion-item&amp;gt;
                &amp;lt;!--
                    ionic usually exposes properties rather than attributes for the components
                    to use internally, we're using lit-html and we can do one-way binding using
                    `.` before the property name.
                    in the case of events we need to put `@` before the event name
                --&amp;gt;
                &amp;lt;ion-input .debounce="&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;750&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" placeholder="&lt;/span&gt;&lt;span class="nc"&gt;Name&lt;/span&gt;&lt;span class="s2"&gt;" @ionChange={nameChanged}&amp;gt;&amp;lt;/ion-input&amp;gt;
                &amp;lt;ion-input .debounce="&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;750&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" type="&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="s2"&gt;" placeholder="&lt;/span&gt;&lt;span class="nc"&gt;Url&lt;/span&gt;&lt;span class="s2"&gt;" @ionChange={urlChanged}&amp;gt;&amp;lt;/ion-input&amp;gt;
                &amp;lt;ion-button @click={saveFeed}&amp;gt;Save&amp;lt;/ion-button&amp;gt;
            &amp;lt;/section&amp;gt;
            &amp;lt;ion-list&amp;gt;
                {feeds |&amp;gt; Array.map feedTpl}
            &amp;lt;/ion-list&amp;gt;
        &amp;lt;/ion-content&amp;gt;
        """&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// define our component globally so it can be used it anywhere&lt;/span&gt;
    &lt;span class="n"&gt;defineComponent&lt;/span&gt; &lt;span class="s2"&gt;"x-feed-manager"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Haunted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="n"&gt;feedManager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are asking youself &lt;em&gt;Why would I register a tag globally&lt;/em&gt;? it's mainly because these tags work as any other browser tag like &lt;code&gt;div&lt;/code&gt;, &lt;code&gt;table&lt;/code&gt;, &lt;code&gt;span&lt;/code&gt; you can use them in any context where you thing they should be used.&lt;/p&gt;

&lt;p&gt;let's check our &lt;code&gt;src/App.fs&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RequireQualifiedAccess&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Lit&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Haunted&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;

    &lt;span class="n"&gt;html&lt;/span&gt;
        &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"""
        &amp;lt;ion-app&amp;gt;
            &amp;lt;ion-tabs&amp;gt;
                &amp;lt;!--
                    Here we're letting ionic know that we want to use &amp;lt;x-home&amp;gt;&amp;lt;/x-home&amp;gt;
                    and &amp;lt;x-feed-manager&amp;gt;&amp;lt;/x-feed-manager&amp;gt; as the tags for the content of the tabs
                --&amp;gt;
                &amp;lt;ion-tab tab="&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="s2"&gt;" component="&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&amp;lt;/ion-tab&amp;gt;
                &amp;lt;ion-tab tab="&lt;/span&gt;&lt;span class="n"&gt;feeds&lt;/span&gt;&lt;span class="s2"&gt;" component="&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&amp;lt;/ion-tab&amp;gt;
                &amp;lt;ion-tab-bar slot="&lt;/span&gt;&lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;
                    &amp;lt;ion-tab-button tab="&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;
                        &amp;lt;ion-icon name="&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&amp;lt;/ion-icon&amp;gt;
                        &amp;lt;ion-label&amp;gt;Home&amp;lt;/ion-label&amp;gt;
                    &amp;lt;/ion-tab-button&amp;gt;
                    &amp;lt;ion-tab-button tab="&lt;/span&gt;&lt;span class="n"&gt;feeds&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;
                        &amp;lt;ion-icon name="&lt;/span&gt;&lt;span class="n"&gt;bookmark&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&amp;lt;/ion-icon&amp;gt;
                        &amp;lt;ion-label&amp;gt;Feeds&amp;lt;/ion-label&amp;gt;
                    &amp;lt;/ion-tab-button&amp;gt;
                &amp;lt;/ion-tab-bar&amp;gt;
            &amp;lt;/ion-tabs&amp;gt;
        &amp;lt;/ion-app&amp;gt;
        """&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// register the app function as the `flit-app` component in the browser&lt;/span&gt;
    &lt;span class="n"&gt;defineComponent&lt;/span&gt; &lt;span class="s2"&gt;"flit-app"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Haunted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;once again, we register our component at the end as a global tag rather than just exposing the function and if we take a look at our &lt;code&gt;src/Main.fs&lt;/code&gt; it looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Fable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;JsInterop&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Pages&lt;/span&gt;

&lt;span class="n"&gt;importSideEffects&lt;/span&gt; &lt;span class="s2"&gt;"./styles.css"&lt;/span&gt;

&lt;span class="c1"&gt;// register your custom elements here&lt;/span&gt;
&lt;span class="nn"&gt;FeedManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;
&lt;span class="nn"&gt;FeedViewer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;
&lt;span class="nn"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;
&lt;span class="nn"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we're registering our components and then just freely using those tags where they may be required. Lastly, to make all of this make sense, take a look at the body tag inside &lt;code&gt;public/index.html&lt;/code&gt;...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dark"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;flit-app&amp;gt;&amp;lt;/flit-app&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/dist/Main.fs.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yup! we're using our tag! the browser simply knows what to do when it sees the tags we define.&lt;br&gt;
Feel free to check the whole sample and let me know what you think, you can check this &lt;a href="https://fable-lit-sample.web.app/"&gt;project live here&lt;/a&gt; and if you need a sample RSS feed you can use &lt;code&gt;https://blog.tunaxor.me/feed.rss&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#server-people"&gt;
  &lt;/a&gt;
  Server people
&lt;/h2&gt;

&lt;p&gt;If you are thinking, what about I write server side code that also exposes tags will they work?&lt;br&gt;
well as long as you have the corresponding javascript code... Yes! these will run as usual when the page starts! so if you or your company have a custom set of components living in some cdn either private or public, you can even ditch out SPA applications and just render things from the server you can simply develop your components as individual pieces of reusable components and put a script tag in your browser remember that with HTTP 2 + you don't pay any penalty for including multiple small scripts so bundling is not even required.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#y-tho"&gt;
  &lt;/a&gt;
  y tho?
&lt;/h2&gt;

&lt;p&gt;If you think I'm asking you to drop every single react project you have right now and migrate to Lit well NO, Why Would You Do That? it doesn't make sense, it would be silly to migrate everything to Lit! this is more about choice, the react ecosystem is nice and has good options and that's fine but as the day of this writing, &lt;a href="https://custom-elements-everywhere.com/"&gt;it's still&lt;/a&gt; somewhat annoying to interact with new frameworks and libraries that are developing in the wild. Particularly from big names like Microsoft, Adobe, and even Google, of course they will provide compatibility layers but those layers have performance penalties as well as using a Virtual DOM, being fast enough is not the same of being sanely fast.&lt;/p&gt;

&lt;p&gt;Main reasons to try lit-html&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Browser Standards&lt;/li&gt;
&lt;li&gt;Full Framework/Library compatibility with web components/custom elements&lt;/li&gt;
&lt;li&gt;You like to use HTML&lt;/li&gt;
&lt;li&gt;You want type safety with all of the above&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Woah woah, wait didn't you say you &lt;strong&gt;&lt;em&gt;were using strings&lt;/em&gt;&lt;/strong&gt;? how is that type safety?&lt;/p&gt;

&lt;p&gt;Well let me tell you that &lt;a href="https://twitter.com/alfonsogcnunez"&gt;@alfonsogcnunez&lt;/a&gt; is aware of the people who love type safety!&lt;/p&gt;

&lt;p&gt;check this template as well&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new feliz-lit-haunted -o feliz-flavored-lit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside &lt;code&gt;src/Home.fs&lt;/code&gt; you'll find something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RequireQualifiedAccess&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Pages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Home&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Lit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Feliz&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Haunted&lt;/span&gt;


&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{|&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="o"&gt;|})&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="c1"&gt;// same hooks as if in lit based templates&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setCount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nn"&gt;Haunted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initial&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;defaultValue&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// Type Safe HTML DSL!&lt;/span&gt;
  &lt;span class="nn"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nn"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Home: {count}"&lt;/span&gt;
    &lt;span class="nn"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="nn"&gt;Ev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;setCount&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
      &lt;span class="nn"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s2"&gt;"Increment"&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nn"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="nn"&gt;Ev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;setCount&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
      &lt;span class="nn"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s2"&gt;"Decrement"&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nn"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="nn"&gt;Ev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;setCount&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
      &lt;span class="nn"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s2"&gt;"Reset"&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="c1"&gt;// Yup as simple as that&lt;/span&gt;
  &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Feliz&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toLit&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="c1"&gt;// Register your tags as well&lt;/span&gt;
  &lt;span class="n"&gt;defineComponent&lt;/span&gt;
    &lt;span class="s2"&gt;"flit-home"&lt;/span&gt;
    &lt;span class="c1"&gt;// also if you don't want to deal with Shadow DOM and use something&lt;/span&gt;
    &lt;span class="c1"&gt;// like bulma or boostrap you can turn it off :)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Haunted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{|&lt;/span&gt; &lt;span class="n"&gt;useShadowDOM&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt; &lt;span class="o"&gt;|}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the &lt;a href="https://github.com/alfonsogarciacaro/Fable.Lit"&gt;fable.lit&lt;/a&gt; github repository to see also ways to interact with inter-operate Lit + React within Fable!&lt;/p&gt;

&lt;p&gt;Another good reason is that you can produce your own set of custom elements for distribution to your clients or within your organization's teams and they don't even need to know what F# is! Both you and your clients can simply enjoy the safety of F# without even mentioning it&lt;/p&gt;

&lt;p&gt;As an example you don't need to know that &lt;a href="https://www.fast.design/"&gt;FAST&lt;/a&gt; elements from microsoft and a new set of components from adobe are written in Lit, neither you need to know that &lt;a href="https://ionicframework.com/"&gt;ionic framework&lt;/a&gt; is written with Stencil! yet hundreds of thousands (I'd even say millions with ionic numbers in the play) of people use them to either build apps or consume them! actually we just saw an example!&lt;/p&gt;

&lt;p&gt;So if you are looking for a broader integration with the ecosystem, and trying to use browser standard means to grow build your applications rather than doing them the &lt;strong&gt;&lt;em&gt;"React way"&lt;/em&gt;&lt;/strong&gt; then jump in!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-history-behind-this-on-fable-land"&gt;
  &lt;/a&gt;
  Some history behind this on fable land
&lt;/h3&gt;

&lt;p&gt;In &lt;a href="https://fable.io"&gt;fable&lt;/a&gt;-land we have been using &lt;a href="https://reactjs.org/"&gt;react&lt;/a&gt; historically by a few reasons either using &lt;a href="https://github.com/fable-compiler/fable-react"&gt;fable-react&lt;/a&gt; or &lt;a href="https://github.com/Zaid-Ajaj/Feliz"&gt;feliz&lt;/a&gt; the main one is that react's programming model (i.e. functional like style) is an awesome fit for F#&lt;/p&gt;

&lt;p&gt;UI elements as data and functions?&lt;br&gt;
I'm sold right?&lt;/p&gt;

&lt;p&gt;The other reason is that other frameworks have a programming model that isn't as friendly as react for F# (i.e. tons of mutability) these frameworks either need a particular file structure, interact with a particular kind of file and simply becomes a tooling nightmare that to be honest is hard to keep up with. if you didn't know it there have been bindings for things like Vue, Svelte, Snabdom and similar, that's kind of interesting so &lt;strong&gt;&lt;em&gt;why haven't they been picked up?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Part of the F# culture here applies from .NET, people need to run businesses and need to pay bills, so why should they be looking around and playingwith things when there are other needs at hand?&lt;/p&gt;

&lt;p&gt;The F# people (and .NET as well) tend to simply settle down for a single solution for most problems.&lt;/p&gt;

&lt;p&gt;This has pros/cons as everything from one hand you'll have resources for a specific set of tools and you're very likely to simply follow the road some have paved already, on the other hand if you need something outside that road... well you will need to pave it yourself and sometimes that takes A TON of effort and time which if you run a business and pay bills... it simply doesn't pay.&lt;/p&gt;

&lt;p&gt;With that being said! why another tool then? it turns out that Google and other browser vendors had a vision years ago. A single standard way to define something in the browser that runs regardless of the framework the users might be using this vision turned out as what we now know as &lt;a href="https://dev.tobasically%20a%20custom%20html%20tag%20you%20can%20use%20anywhere"&gt;web components&lt;/a&gt; there are several libraries and frameworks to define web components and custom elements. One of those was &lt;a href="https://polymer-library.polymer-project.org/3.0/docs/devguide/feature-overview"&gt;polymer&lt;/a&gt; which got rebranded to &lt;a href="https://lit-element.polymer-project.org/guide"&gt;lit-element&lt;/a&gt; and later as &lt;a href="https://lit.dev"&gt;lit&lt;/a&gt; but suffice to say that their programming model has been pretty clear from the beginning, use a class to keep state and use html as your UI language.&lt;/p&gt;

&lt;p&gt;In the second rebranding, lit-element got split in two separating the web component framework from the rendering engine, this rendering engine is called &lt;a href="https://lit.dev/docs/libraries/standalone-templates/"&gt;lit-html&lt;/a&gt; and focuses on using ES2015 tagged literals (functions that take interpolated strings) to render html which recently fable got support for and that changes things a little, the most critical thing is that interpolated strings fit nicely within F# no need for extra tooling or things that we don't know about, returning strings (which technically is not a string is a &lt;code&gt;TemplateResult&lt;/code&gt;) is not too different from returning &lt;code&gt;ReactElement&lt;/code&gt; so you can use your usual functional belt to also do UI's in a functional first mode and while you lose some type safety (using the string based templates not the Feliz flavor) you gain access to a vast ecosystem and libraries that otherwise you wouldn't be able to use because &lt;a href="https://custom-elements-everywhere.com/"&gt;react doesn't play well with web components&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This was a long one! but one that I care about I feel this has more potential than previous attempts to be part of the F# ecosystem and I'll do my best to provide you with samples and documentation related to this :)&lt;/p&gt;

&lt;p&gt;And that's it! I'll see you in the next one.&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>lit</category>
      <category>webcomponents</category>
      <category>fable</category>
    </item>
    <item>
      <title>Github.dev: Tips, Tricks and Cool Use Cases 😎</title>
      <author>Jonathan Carter</author>
      <pubDate>Sat, 28 Aug 2021 18:02:02 +0000</pubDate>
      <link>https://dev.to/lostintangent/10-awesome-things-you-can-do-with-github-dev-5fm7</link>
      <guid>https://dev.to/lostintangent/10-awesome-things-you-can-do-with-github-dev-5fm7</guid>
      <description>&lt;p&gt;GitHub recently released &lt;a href="https://github.dev"&gt;github.dev&lt;/a&gt;, which if you haven't heard, allows you to press &lt;code&gt;.&lt;/code&gt; from any repo, in order to open it within Visual Studio Code, running entirely in your browser (🤯). On its own, this experience represents a &lt;em&gt;huge&lt;/em&gt; step forward, for how you can &lt;em&gt;view&lt;/em&gt; and &lt;em&gt;edit&lt;/em&gt; code that's stored in GitHub.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VJkNTHVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E8hp-_MWEAQRYeB.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WtqGx4H6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1414990564408262661/r6YemvF9_normal.jpg" alt="GitHub profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        GitHub
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @github
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🤫  New shortcut: Press . on any GitHub repo. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:14 PM - 11 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1425505817827151872" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1425505817827151872" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1425505817827151872" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;However, what might not be immediately obvious, is that github.dev enables something even more powerful: the ability to customize and create entirely new &lt;strong&gt;GitHub-native workflows&lt;/strong&gt;. Instead of relying on &lt;a href="https://github.com/collections/github-browser-extensions"&gt;browser extensions&lt;/a&gt; to augment github.com, you can now take advantage of the editor you already love, and it's &lt;a href="https://marketplace.visualstudio.com/vscode"&gt;&lt;em&gt;prolific&lt;/em&gt; ecosystem&lt;/a&gt;, to make GitHub even more fun. To illustrate what this means, let's take a look at 10 examples of what you can already do with it today 🚀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-personalizations"&gt;
  &lt;/a&gt;
  1. 💄 Personalizations
&lt;/h2&gt;

&lt;p&gt;Developers &lt;em&gt;love&lt;/em&gt; to personalize their editor, in order to make it more efficient, ergonomic, and visually appealing. Since github.dev is based on VS Code, you can customize your keybindings, color theme, file icons, snippets, and more. Even cooler, you can enable &lt;a href="https://code.visualstudio.com/docs/editor/settings-sync"&gt;settings sync&lt;/a&gt; and roam your personalizations between VS Code, github.dev and &lt;a href="https://github.com/features/codespaces"&gt;Codespaces&lt;/a&gt;. That way, no matter where you're reading/editing code, you'll immediately feel at home 💖&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RSG3mtK5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E9lhmoeXIAM7-Bl.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCIUO99w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1406699569950375936/CgsthMmD_normal.jpg" alt="Philipp Kief profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Philipp Kief
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @philippkief
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Just published v4.10.0 of the Material Icon Theme which can now be used with &lt;a href="https://t.co/QcIEOchT2b"&gt;github.dev&lt;/a&gt; 🔥 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:32 PM - 24 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1430281957083058179" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1430281957083058179" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1430281957083058179" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#2-sharing-deep-links"&gt;
  &lt;/a&gt;
  2. ✉️ Sharing Deep Links
&lt;/h2&gt;

&lt;p&gt;In addition to pressing &lt;code&gt;.&lt;/code&gt; from a repo page, you can also press &lt;code&gt;.&lt;/code&gt; when viewing a specific file on GitHub.com. Furthermore, if you select some text in the currently opened file, and press &lt;code&gt;.&lt;/code&gt;, then when VS Code is opened, both the file and text selection will be maintained. You can then copy the URL in your browser, and send that to others, in order to share that &lt;em&gt;exact same context&lt;/em&gt; 🔥&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
    &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__two-pics"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yElJmPGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E9pdcqiVUAEa13W.jpg" alt="unknown tweet media content"&gt;
    &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--J4Hqv49q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1373492708589772804/m0W7RNaK_normal.jpg" alt="Tyler Leonhardt #BlackLivesMatter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Tyler Leonhardt #BlackLivesMatter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/tylerleonhardt"&gt;@tylerleonhardt&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      My current favorite thing is going into a file on &lt;a href="https://t.co/vCbBIoCq90"&gt;github.com&lt;/a&gt;, selecting a few lines of code by clicking on the line numbers, and then hitting ".". That text is then highlighted in &lt;a href="https://t.co/FIQYIm5ODE"&gt;github.dev&lt;/a&gt;…&lt;br&gt;&lt;br&gt;Incredibly delightful and works exactly how I would expect. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:55 PM - 25 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1430559579218137096" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1430559579218137096" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1430559579218137096" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Demo:&lt;/strong&gt; Click &lt;a href="https://github.dev/lostintangent/gitdoc/blob/master/src/extension.ts#L26-L27"&gt;this link&lt;/a&gt; to see how the &lt;a href="https://aka.ms/gitdoc"&gt;GitDoc extension&lt;/a&gt; subscribes to repo events in VS Code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#3-pull-request-reviews"&gt;
  &lt;/a&gt;
  3. ✅ Pull Request Reviews
&lt;/h2&gt;

&lt;p&gt;In addition to hitting &lt;code&gt;.&lt;/code&gt; on a repo or file on github.com, you can also press it when viewing a pull request. This enables you to review the PR using a rich, multi-file view, that includes the ability to view &amp;amp; reply to comments, suggest changes, and even approve/merge the PR directly from the editor.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AYrXWxQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E9I5DW-X0AUINAA.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tg7D8qgX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1030418265598771200/2WcWmcWz_normal.jpg" alt="Sumit Kumar profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Sumit Kumar
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/tweetsofsumit"&gt;@tweetsofsumit&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      How epic is this? &lt;a href="https://twitter.com/github"&gt;@github&lt;/a&gt; codespaces (press `.` in any file) shows PR review comments in-line... I'm using this so much already because it's faster than checking out the reviewed branch and loading the local environment. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:05 AM - 19 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1428266771807625226" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1428266771807625226" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1428266771807625226" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Demo:&lt;/strong&gt; Click &lt;a href="https://github.dev/microsoft/codetour/pull/153"&gt;this link&lt;/a&gt; to review the PR for adding a regex parser to the &lt;a href="https://aka.ms/codetour"&gt;CodeTour extension&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#4-editing-images-diagrams"&gt;
  &lt;/a&gt;
  4. 📊 Editing Images + Diagrams
&lt;/h2&gt;

&lt;p&gt;Beyond editing text files, VS Code also allows extensions to contribute &lt;a href="https://code.visualstudio.com/api/extension-guides/custom-editors"&gt;custom editors&lt;/a&gt;, which enables you efficently edit any file type in your project. For example, if you install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio"&gt;Drawio extension&lt;/a&gt;, you can view and edit rich diagrams.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WDkqu00U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E8mbuSaX0AAAkEp.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1nlFN-ez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1260316972832751617/ga7mSqIB_normal.jpg" alt="Henning Dieterichs profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Henning Dieterichs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @hediet_dev
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Btw. you can install &lt;a href="https://t.co/x23SFl8Xnu"&gt;Draw.io&lt;/a&gt; in &lt;a href="https://t.co/oY7jxkS7SF"&gt;github.dev&lt;/a&gt; ;) 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:41 PM - 12 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1425844785240236032" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1425844785240236032" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1425844785240236032" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Additionally, if you install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=Tyriar.luna-paint"&gt;Luna Paint extension&lt;/a&gt; you can edit images (PNG, JPG, etc.).&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lnJtcEiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E9uAad_VgAQV4zh.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qVL4ZRjK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/776617605389877248/aYSZBtVe_normal.jpg" alt="Daniel Imms profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Daniel Imms
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @tyriar
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The new release of Luna Paint for &lt;a href="https://twitter.com/code"&gt;@code&lt;/a&gt; is out! This includes some minor features as well as initial support &lt;a href="https://t.co/Eoe1xBjj4j"&gt;github.dev&lt;/a&gt;:&lt;br&gt;&lt;br&gt;1️⃣ Go to your &lt;a href="https://t.co/XNVKZZ7Ake"&gt;github.com&lt;/a&gt; repo&lt;br&gt;2️⃣ Press .&lt;br&gt;3️⃣ Start editing&lt;br&gt;&lt;br&gt;Release notes: &lt;a href="https://t.co/gYyaSdAtb4"&gt;github.com/lunapaint/vsco…&lt;/a&gt;&lt;br&gt;Install: &lt;a href="https://t.co/yS7md8qlMk"&gt;marketplace.visualstudio.com/items?itemName…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:04 PM - 26 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1430878752750280709" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1430878752750280709" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1430878752750280709" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;In each case, your edits are automatically saved, and you can commit/push changee back to your GitHub repo via the &lt;code&gt;Source Control&lt;/code&gt; tab. Even cooler, you can share a deep link for an image/diagram with others, and as long as they install neccessary extension(s), they'll be able to collaborate with you via the exact same experience. This effectively makes github.dev a hackable "canvas" for any file type that is stored in GitHub 😎&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-%F0%9F%97%BA-codebase-walkthroughs"&gt;
  &lt;/a&gt;
  5. 🗺 Codebase Walkthroughs
&lt;/h2&gt;

&lt;p&gt;Learning a new codebase is hard, since it's typically unclear where to start, or how various files/folders relate to each other. With github.dev, you can install the &lt;a href="https://aka.ms/codetoue"&gt;CodeTour extension&lt;/a&gt;, which allows you to create and playback guided walkthroughs of a codebase. Since github.dev is available entirely in the browser, this makes it easy for anyone on the team, or in your community, to get up to speed quickly, without needing to install anything locally.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hiW24BH_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E8nQMw8UYAQh0a_.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Pcg9d-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/771496206/Twitter_normal.png" alt="Jonathan Carter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jonathan Carter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/lostintangent"&gt;@lostintangent&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🗺️ When I initially shipped CodeTour, the first thing folks asked for was a web player. As of yesterday, you can now go to any GitHub repo w/a tour, and simply press "." to get a walkthrough of the codebase 🔥 (after installing the CodeTour extension 😎) 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:26 PM - 12 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1425901618780729345" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1425901618780729345" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1425901618780729345" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Demo:&lt;/strong&gt; Open &lt;a href="https://github.dev/microsoft/codetour"&gt;this repo&lt;/a&gt; and install CodeTour. You'll be presented with a toast that asks if you'd like to take the &lt;code&gt;Getting Started&lt;/code&gt; tour.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#6-code-snippets-gists"&gt;
  &lt;/a&gt;
  6. 📕 Code Snippets + Gists
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://gist.github.com"&gt;Gists&lt;/a&gt; are a popular way for developers to manage and share code snippets, config files, notes, and more. In github.dev, you can install the &lt;a href="https://aka.ms/gistpad"&gt;GistPad extension&lt;/a&gt; and view/edit your gists. This allows you to maintain code snippets across multiple repos, and access them from both your desktop editor, as well as whenever you're browsing/editing code on GitHub.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W9WuEbZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E8w8aCiVoAIYOLl.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Pcg9d-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/771496206/Twitter_normal.png" alt="Jonathan Carter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jonathan Carter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/lostintangent"&gt;@lostintangent&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      📢 If you're loving the new &lt;a href="https://t.co/Am4EhpKJfJ"&gt;github.dev&lt;/a&gt; editor, and wish you could use it for gists, then you're in luck! You can install the GistPad extension (&lt;a href="https://t.co/C4vZgHmZhi"&gt;aka.ms/gistpad&lt;/a&gt;), and create/edit gists directly in-browser 🔥 I use this for managing code snippets, notes, etc. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:36 PM - 14 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1426583542432112647" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1426583542432112647" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1426583542432112647" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#7-web-playgrounds-tutorials"&gt;
  &lt;/a&gt;
  7. 🎢 Web Playgrounds + Tutorials
&lt;/h2&gt;

&lt;p&gt;Coding playgrounds (e.g. CodePen, JSFiddle) are a popular way to learn programming languages/libraries, and then share them with others. With github.dev, you can install the &lt;a href="https://aka.ms/codeswing"&gt;CodeSwing extension&lt;/a&gt; and begin creating web playgrounds, using your existing editor setup, and with your files persisted back to GitHub. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yq9mZ5WU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E8srTzPUUAM2VF-.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Pcg9d-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/771496206/Twitter_normal.png" alt="Jonathan Carter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jonathan Carter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/lostintangent"&gt;@lostintangent&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Another fun use case for the &lt;a href="https://t.co/Am4EhpKJfJ"&gt;github.dev&lt;/a&gt; editor: web playgrounds. Create interactive samples and then share them, in a way that's easily remixable. Check out this demo, and install the CodeSwing/CodeTour extensions. Directly from the browser! &lt;a href="https://t.co/XVMz5aKahV"&gt;github.dev/lostintangent/…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:50 PM - 13 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1426285127244468226" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1426285127244468226" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1426285127244468226" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Demo:&lt;/strong&gt; Open &lt;a href="https://github.dev/lostintangent/rock-paper-scissors"&gt;this repo&lt;/a&gt; and install CodeSwing + CodeTour. After a few seconds, you'll be presented with the playground environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#8-notetaking-knowledge-bases"&gt;
  &lt;/a&gt;
  8. ✏️ Notetaking + Knowledge Bases
&lt;/h2&gt;

&lt;p&gt;VS Code is a world-class markdown editor, and therefore, you can start using github.dev to edit and preview all of your personal notes/documentation. Even cooler, you can install the &lt;a href="https://aka.ms/wikilens"&gt;WikiLens extension&lt;/a&gt; in order to get a Roam/Obsidian-like editing experience, for maintaining a knowledge base, that's stored in GitHub and is able to benefit from the ecosystem of extensions/personalizations for VS Code.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iyLCYG4A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E9aKX9mVoAIvxQU.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Pcg9d-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/771496206/Twitter_normal.png" alt="Jonathan Carter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jonathan Carter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/lostintangent"&gt;@lostintangent&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🗒 I've started using &lt;a href="https://t.co/Am4EhpKJfJ"&gt;github.dev&lt;/a&gt; as my notetaking environment, but I missed having support for backlinks 😢 So I created WikiLens (&lt;a href="https://t.co/1Q72Cyqx4a"&gt;aka.ms/wikilens&lt;/a&gt;) to provide a wiki-like view for GitHub + markdown, along with rich link navigation. All.From.The.Browser 🥰 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:40 PM - 22 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1429483662257446916" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1429483662257446916" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1429483662257446916" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#9-jupyter-notebooks"&gt;
  &lt;/a&gt;
  9. 📓 Jupyter Notebooks
&lt;/h2&gt;

&lt;p&gt;In addition to coding playgrounds, another popular way to learn and share code, is via Jupyter notebooks. If you open an &lt;code&gt;.ipynb&lt;/code&gt; file in github.dev, you can immediately view the cells and cached outputs of the notebook. Even better, you can install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=joyceerhl.vscode-pyodide"&gt;Pyodide extension&lt;/a&gt; in order to actually run Python code, entirely in your browser!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7rMPmzjM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1425485497166549000/pu/img/WXPtAvr99I9oTDlO.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dK-8geE1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/626762747330457600/X3Bx503W_normal.jpg" alt="👩‍💻 Paige Bailey #BlackLivesMatter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        👩‍💻 Paige Bailey #BlackLivesMatter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @dynamicwebpaige
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🥳 Am excited to share that we have released &lt;a href="https://t.co/AIqjEKH3OL"&gt;github.dev&lt;/a&gt;: a completely in-browser &lt;a href="https://twitter.com/github"&gt;@github&lt;/a&gt;+&lt;a href="https://twitter.com/code"&gt;@code&lt;/a&gt; editing tool.&lt;br&gt;&lt;br&gt;You can even *run* &lt;a href="https://twitter.com/ProjectJupyter"&gt;@ProjectJupyter&lt;/a&gt; notebooks with the entire &lt;a href="https://twitter.com/hashtag/Python"&gt;#Python&lt;/a&gt; data science stack, using the &lt;a href="https://twitter.com/hashtag/Pyodide"&gt;#Pyodide&lt;/a&gt; extension (&lt;a href="https://t.co/vHoBFyyZhd"&gt;marketplace.visualstudio.com/items?itemName…&lt;/a&gt;)!&lt;br&gt;&lt;br&gt;cc &lt;a href="https://twitter.com/jakevdp"&gt;@jakevdp&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:00 PM - 11 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1425502379777019909" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1425502379777019909" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1425502379777019909" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#10-%F0%9F%9B%A0-creating-your-own-extension"&gt;
  &lt;/a&gt;
  10. 🛠 Creating Your Own Extension!
&lt;/h2&gt;

&lt;p&gt;As you probably noticed, most of the items above were enabled by means of an extension, that someone created and published to the marketplace. Since VS Code is &lt;a href="https://code.visualstudio.com/api/references/vscode-api"&gt;fully extensible&lt;/a&gt;, using simple JavaScript APIs, you can create your own extensions that support not only VS Code desktop, but also, &lt;a href="https://github.com/microsoft/vscode-docs/blob/vnext/api/extension-guides/web-extensions.md"&gt;github.dev&lt;/a&gt;. So if you have an awesome idea, for how to make coding on GitHub more productive and fun, then you now have everything you need to get started 🏃&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Today I Learned: openat()</title>
      <author>Junxiao Shi</author>
      <pubDate>Sat, 28 Aug 2021 17:53:27 +0000</pubDate>
      <link>https://dev.to/yoursunny/today-i-learned-openat-8h1</link>
      <guid>https://dev.to/yoursunny/today-i-learned-openat-8h1</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post is originally published on yoursunny.com blog &lt;a href="https://yoursunny.com/t/2021/openat/"&gt;https://yoursunny.com/t/2021/openat/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#fopen-and-open"&gt;
  &lt;/a&gt;
  fopen and open
&lt;/h2&gt;

&lt;p&gt;In C programming language, the &lt;code&gt;&amp;lt;stdio.h&amp;gt;&lt;/code&gt; header supplies functions for file input and output.&lt;br&gt;
To open a file, we usually use the &lt;a href="https://en.cppreference.com/w/c/io/fopen"&gt;fopen&lt;/a&gt; function.&lt;br&gt;
It is defined by the C language standard and works in every operating system.&lt;/p&gt;

&lt;p&gt;Working at a lower level, there's also the &lt;a href="https://man7.org/linux/man-pages/man2/open.2.html"&gt;open&lt;/a&gt; function.&lt;br&gt;
It is a system call provided by the Linux kernel and exposed through glibc.&lt;/p&gt;

&lt;p&gt;Both &lt;code&gt;fopen&lt;/code&gt; and &lt;code&gt;open&lt;/code&gt; have an input parameter: the file pathname, as a NUL-terminated string.&lt;br&gt;
These two functions are declared like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the file we want to access is in the &lt;a href="https://en.wikipedia.org/wiki/Working_directory"&gt;current working directory&lt;/a&gt;, or we have the full pathname of the file as a string, this is easy to use.&lt;br&gt;
However, sometimes we want to access a file relative to another directory, and the above API isn't so easy to use.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#directory-path-filename"&gt;
  &lt;/a&gt;
  Directory Path + Filename
&lt;/h2&gt;

&lt;p&gt;One such occasion is in my &lt;a href="https://yoursunny.com/t/2020/NDNph-intro/"&gt;NDNph&lt;/a&gt; library: I wanted to use a directory in the filesystem as a persistent key-value store, where object keys are used as filenames, and object value is written as file content.&lt;br&gt;
The API for this key-value store looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;KV&lt;/span&gt; &lt;span class="n"&gt;KV&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @brief Open a key-value store at specified path
 * @param[out] kv key-value store object
 * @param dir directory pathname
 * @return whether success
 */&lt;/span&gt;
&lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;KV_Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KV&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;kv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @brief Write @p value to file @p dir "/" @p key
 * @param kv key-value store object
 * @param key filename
 * @param value file content
 * @param size size of file content
 * @return whether success
 */&lt;/span&gt;
&lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;KV_Save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KV&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;kv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since &lt;code&gt;fopen&lt;/code&gt; and &lt;code&gt;open&lt;/code&gt; want the file pathname as a single string, I have to concatenate &lt;code&gt;dir&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;KV_Save&lt;/code&gt;.&lt;br&gt;
This in turn requires saving a copy of &lt;code&gt;dir&lt;/code&gt; in &lt;code&gt;KV_Open&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;KV&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;KV&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;KV_Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KV&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;kv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;S_ISDIR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;st_mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;kv&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strdup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;KV_Save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KV&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;kv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PATH_MAX&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;snprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"%s/%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kv&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_WRONLY&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;O_CREAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;0644&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// TODO write and close file&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#openat"&gt;
  &lt;/a&gt;
  openat
&lt;/h2&gt;

&lt;p&gt;This week, I came across a new function: &lt;a href="https://man7.org/linux/man-pages/man2/openat.2.html"&gt;openat&lt;/a&gt;.&lt;br&gt;
It operates in the same way as &lt;code&gt;open&lt;/code&gt;, except that it supports specifying a &lt;em&gt;relative&lt;/em&gt; pathname interpreted relative to another directory, which is represented by a file descriptor.&lt;/p&gt;

&lt;p&gt;The function signature of &lt;strong&gt;openat&lt;/strong&gt; is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;openat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dirfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This allows me to simplify the key-value store:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;KV&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dirfd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;KV&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;KV_Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KV&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;kv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;kv&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dirfd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_RDONLY&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;O_DIRECTORY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;kv&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dirfd&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;KV_Save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KV&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;kv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;openat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kv&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dirfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_WRONLY&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;O_CREAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;0644&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// TODO write and close file&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;KV_Open&lt;/code&gt; opens the directory as a file descriptor with the &lt;code&gt;open&lt;/code&gt; function.&lt;br&gt;
The &lt;code&gt;O_DIRECTORY&lt;/code&gt; flag ensures we are opening a directory instead of a regular file.&lt;br&gt;
It's no longer necessary to save a copy of the directory path.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;KV_Save&lt;/code&gt; calls &lt;code&gt;openat&lt;/code&gt; with the directory file descriptor and the filename &lt;code&gt;key&lt;/code&gt;.&lt;br&gt;
It's no longer necessary to perform string concatenation.&lt;br&gt;
The code is 5 lines shorter than the &lt;code&gt;open&lt;/code&gt;-based solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-and-code-download"&gt;
  &lt;/a&gt;
  Conclusion and Code Download
&lt;/h2&gt;

&lt;p&gt;This article introduces Linux &lt;a href="https://man7.org/linux/man-pages/man2/openat.2.html"&gt;openat&lt;/a&gt; syscall that I recently discovered.&lt;br&gt;
The &lt;code&gt;openat&lt;/code&gt; function enables resolving a filename or relative path, relative to another directory that is not the current working directory.&lt;br&gt;
It can do so without requiring manual string concatenation.&lt;/p&gt;

&lt;p&gt;Code samples (whole program including load/save/delete functions):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://yoursunny.com/t/2021/openat/open.c"&gt;open.c&lt;/a&gt;: key-value store implemented with &lt;code&gt;open&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://yoursunny.com/t/2021/openat/openat.c"&gt;openat.c&lt;/a&gt;: key-value store implemented with &lt;code&gt;openat&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/yoursunny/530750611f951941886ea82160c1927d"&gt;view on GitHub Gist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Caution: this proof-of-concept code assumes that &lt;code&gt;key&lt;/code&gt; is a valid filename.&lt;br&gt;
It cannot safely handle untrusted and potentially malicious input.&lt;/p&gt;

</description>
      <category>c</category>
      <category>linux</category>
      <category>syscall</category>
    </item>
    <item>
      <title>Asus-ESS : Easy setup script for setting up laptops after GNU/Linux installs</title>
      <author>Swastik Dwivedi</author>
      <pubDate>Sat, 28 Aug 2021 17:53:22 +0000</pubDate>
      <link>https://dev.to/drunckj/asus-ess-easy-setup-script-for-setting-up-laptops-after-gnu-linux-installs-3o67</link>
      <guid>https://dev.to/drunckj/asus-ess-easy-setup-script-for-setting-up-laptops-after-gnu-linux-installs-3o67</guid>
      <description>&lt;h1&gt;
  &lt;a href="#github-asusess"&gt;
  &lt;/a&gt;
  Github : &lt;a href="https://github.com/drunckj/Asus-ESS"&gt;Asus-ESS&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;I Distrohop a lot and I found myself doing all this stuff manually which eventually got tiresome. So I created this script to help other Distrohoppers and new Linux users for easy setup and fixing of common issues.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#features-of-script"&gt;
  &lt;/a&gt;
  Features of script
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#it-takes-backup-before-manipulating-stuff-for-easy-recovery"&gt;
  &lt;/a&gt;
  It takes backup before manipulating stuff for easy recovery
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8M7ln-FA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/drunckj/Asus-ESS/master/screenshots/mainmenu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8M7ln-FA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/drunckj/Asus-ESS/master/screenshots/mainmenu.png" alt="Main menu"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#supported-package-managers"&gt;
  &lt;/a&gt;
  Supported Package managers
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jlV8s13L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/drunckj/Asus-ESS/master/screenshots/pkgmgr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jlV8s13L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/drunckj/Asus-ESS/master/screenshots/pkgmgr.png" alt="Package Manager"&gt;&lt;/a&gt;&lt;br&gt;
On running the script for the first time, it will ask for your package manager.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asusctl-only-for-asus-laptops"&gt;
  &lt;/a&gt;
  Asusctl: only for Asus laptops
&lt;/h2&gt;

&lt;p&gt;It will install Asusctl which is a tool developed for Asus laptops as an alternative of Armourycrate which used in Windows. It manages CPU profiles, fans, RGBs and a lot more. So if you have never heard about Asusctl, here is a link for it : &lt;a href="https://asus-linux.org/asusctl/"&gt;Asusctl&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mic-not-working-option"&gt;
  &lt;/a&gt;
  Mic not working option
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UN1aaW8D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/50874358/131223833-020af799-253a-4a28-b40b-dc68db0cd09b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UN1aaW8D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/50874358/131223833-020af799-253a-4a28-b40b-dc68db0cd09b.png" alt="Mic not working"&gt;&lt;/a&gt;&lt;br&gt;
Many a times some Linux Distros have an issue of determining your codec. This option prints your codec and gives u a link to check what codec you would require for proper functioning of your microphone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mount-ntfs-partitions-at-boot"&gt;
  &lt;/a&gt;
  Mount Ntfs partitions at boot
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T9S2mkVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/50874358/131224011-8c02df9f-b80f-4fd6-9330-682e4734035d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T9S2mkVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/50874358/131224011-8c02df9f-b80f-4fd6-9330-682e4734035d.png" alt="ntfs partition"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wAAAqyNx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/50874358/131224010-8f26ae07-b3d3-4067-b220-08f355ab071a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wAAAqyNx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/50874358/131224010-8f26ae07-b3d3-4067-b220-08f355ab071a.png" alt="Ntfspartition"&gt;&lt;/a&gt;&lt;br&gt;
Dual booting a laptop has its own issues. Many a times Windows causes issues with mounting NTFS partitions under Linux. This option gives you an easy approach to mount your partitions at boot without going through the wiki. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#squeeze-maximum-battery-life"&gt;
  &lt;/a&gt;
  Squeeze Maximum Battery life
&lt;/h2&gt;

&lt;p&gt;Most Linux distros ship with Tlp by defaullt as it helps save power and minimize heating up under loads. This options installs a Tlp configuration file which is customized for saving power on laptops with an igpu and dgpu. It also installs a systemctl service file which puts pci to powersaving mode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cache-and-unused-dependencies"&gt;
  &lt;/a&gt;
  Cache and unused dependencies
&lt;/h2&gt;

&lt;p&gt;I love Linux but sometimes I find myself in dependency hell when things don't uninstall along with their dependencies. This option helps take care of that. It uninstalls dependency packages left after removal of applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pulseffects-presets"&gt;
  &lt;/a&gt;
  Pulseffects presets
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--40OR-ZGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/drunckj/Asus-ESS/master/screenshots/presets.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--40OR-ZGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/drunckj/Asus-ESS/master/screenshots/presets.png" alt="pulseffects"&gt;&lt;/a&gt;&lt;br&gt;
Audio under Linux can be a lot customizable which might overwhelm some people. This script installs the most useful and generic presets for getting good quality sound output from your machines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mic-input-key-not-working"&gt;
  &lt;/a&gt;
  Mic input key not working
&lt;/h2&gt;

&lt;p&gt;This option is only for Asus laptops. The issue is that the current keycode being emitted by the driver is only recognised by Wayland. X11 and desktops using X11 require F20 to be emitted. This option creates a new key and registers it in the hardware database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nvidia-modules-not-loading-in-opensuse-after-update"&gt;
  &lt;/a&gt;
  Nvidia modules not loading in opensuse after update
&lt;/h2&gt;

&lt;p&gt;Due to opensuse's rolling nature the kernel gets updated regularly but the nvidia kernel modules are not loaded up with the new kernel. This option re-installs the kernel modules.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#want-to-buy-me-a-coffee-paypal-cryptopreferred"&gt;
  &lt;/a&gt;
  Want to buy me a coffee : &lt;a href="https://www.paypal.com/paypalme/drunkcj"&gt;Paypal&lt;/a&gt; || &lt;a href="https://drunckj.github.io/drunkcj-crypto-donation/"&gt;Crypto(preferred)&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>linux</category>
      <category>bash</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Getting Started With API {day -15}</title>
      <author>Al Siam</author>
      <pubDate>Sat, 28 Aug 2021 17:49:49 +0000</pubDate>
      <link>https://dev.to/alsiamworld/getting-started-with-api-day-15-4p80</link>
      <guid>https://dev.to/alsiamworld/getting-started-with-api-day-15-4p80</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-15"&gt;
  &lt;/a&gt;
  100daysofcode [day - 15]
&lt;/h1&gt;

&lt;p&gt;Getting much pleasure working with API. Today I learned something about API and I will learn it in depth soon. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8cZhd2B9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1pi0mimjxk03tjf4nwia.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8cZhd2B9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1pi0mimjxk03tjf4nwia.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>UX 101 📲: Nielsen's 10 Usability Heuristic Principles for User Interface Design (1-5)</title>
      <author>_CODE</author>
      <pubDate>Sat, 28 Aug 2021 16:59:37 +0000</pubDate>
      <link>https://dev.to/underscorecode/ux-101-nielsen-s-10-usability-heuristic-principles-for-user-interface-design-1-5-1l5d</link>
      <guid>https://dev.to/underscorecode/ux-101-nielsen-s-10-usability-heuristic-principles-for-user-interface-design-1-5-1l5d</guid>
      <description>&lt;p&gt;Hello, everybody! 👋&lt;/p&gt;

&lt;p&gt;And welcome to the first lecture of the &lt;strong&gt;UX 101 series&lt;/strong&gt; 🙌&lt;/p&gt;

&lt;p&gt;In this series, we will be talking about &lt;strong&gt;UX&lt;/strong&gt; and good practices when it comes to &lt;strong&gt;interface design&lt;/strong&gt; and &lt;strong&gt;user interaction&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;In the first two lessons (this one and the following one), we'll be studying in depth the Nielsen's 10 Usability Heuristic Principles for User Interface Design.&lt;/p&gt;

&lt;p&gt;In this first lecture we'll cover &lt;strong&gt;the first five principles&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So, with all this said, let's dive into today's lesson 👇&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-heuristics"&gt;
  &lt;/a&gt;
  What are &lt;em&gt;heuristics&lt;/em&gt;?
&lt;/h1&gt;

&lt;p&gt;Heuristics are &lt;strong&gt;techniques&lt;/strong&gt; used to improve the usability of a system based on a previous experience. This improvement consists basically on &lt;strong&gt;solving existent problems&lt;/strong&gt; and &lt;strong&gt;identifying the necessities&lt;/strong&gt; of the said system during the iterative design cycle.&lt;/p&gt;

&lt;p&gt;Even though this method is far from being perfect or optimal, it &lt;strong&gt;speeds up the process of development&lt;/strong&gt; and provides a way to start solving issues as soon as they are discovered and identified.&lt;/p&gt;

&lt;p&gt;Let's now turn our attention to the &lt;strong&gt;first five Nielsen's Principles&lt;/strong&gt; for User Interface Design: &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-visibility-of-system-status-%F0%9F%96%A5"&gt;
  &lt;/a&gt;
  1. Visibility of system status 🖥
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#main-idea"&gt;
  &lt;/a&gt;
  💡 Main idea
&lt;/h3&gt;

&lt;p&gt;The system has to &lt;strong&gt;inform&lt;/strong&gt; the users about the current system status and what is going on &lt;strong&gt;at all times&lt;/strong&gt;, by providing them with &lt;strong&gt;appropriate feedback&lt;/strong&gt; within a &lt;strong&gt;reasonable time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The system status includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Where the user is within the navigation tree.&lt;/li&gt;
&lt;li&gt;Where the user is within a process derived from a taken action.&lt;/li&gt;
&lt;li&gt;If the system is stable and everything is working as it should or something went wrong.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This principle is necessary to make the the user capable of deciding which their next steps will be, based on what's happening at that particular moment (&lt;strong&gt;anticipation&lt;/strong&gt;), since they know beforehand where they are and what the current system status is.&lt;/p&gt;

&lt;p&gt;Another advantage of implementing this principle is the &lt;strong&gt;reliability&lt;/strong&gt; we're going to convey to the user. They will end up &lt;strong&gt;trusting&lt;/strong&gt; not only the product or the service we're trying to &lt;em&gt;sell&lt;/em&gt;, but also the brand or the individual behind the service (let's say, for example, a &lt;em&gt;blogger&lt;/em&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#main-goals"&gt;
  &lt;/a&gt;
  💎 Main goals
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make the system &lt;strong&gt;predictable&lt;/strong&gt; and let the users know that they have the &lt;strong&gt;control&lt;/strong&gt;, which, consequently, will send them to think that everything's going to proceed in the way they wish and expect.&lt;br&gt;
The less information they get, the easier it will be that they think that they're not in control of the situation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make the user feeling &lt;strong&gt;comfortable&lt;/strong&gt; while they go through a series of steps towards a goal.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a recurring &lt;em&gt;client&lt;/em&gt; (or visitor) and convey trust and reliability looking to the future.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tips"&gt;
  &lt;/a&gt;
  🔮 Tips
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Always inform the user on what's going on. Always. No matter what. &lt;strong&gt;Communication&lt;/strong&gt; and &lt;strong&gt;transparency&lt;/strong&gt; are key (like in relationships with people in real world). Let them know the result of their actions and don't leave them wondering if they made a mistake after having taken action over something.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Nothing&lt;/strong&gt; that affects the users &lt;strong&gt;should happen without informing&lt;/strong&gt; them beforehand. Let alone something that leads to an error condition or a situation from which they don't know how to recover.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you can avoid this type of situations and they happen at some point, tell the user &lt;strong&gt;immediately&lt;/strong&gt;. Or, at least, as soon as possible. &lt;strong&gt;Quick response&lt;/strong&gt; results in &lt;strong&gt;early recovery from errors&lt;/strong&gt; and &lt;strong&gt;providing enough information&lt;/strong&gt; leads to &lt;strong&gt;better decisions&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build &lt;strong&gt;trust&lt;/strong&gt; through interacting with your users.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the end of the day, this principle refers more to &lt;strong&gt;how well you communicate&lt;/strong&gt; with your users than the fact of communicate with them itself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-we-do-as-ui-designers"&gt;
  &lt;/a&gt;
  📱 What can we do as UI designers?
&lt;/h3&gt;

&lt;p&gt;A good start would be to implement a series of standard elements that help the user notice the status of the system, like the following:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#breadcrumbs"&gt;
  &lt;/a&gt;
  Breadcrumbs
&lt;/h4&gt;

&lt;p&gt;The user should know where they exactly are within the navigation tree at all times.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lOR1Lu4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ij6sxpnwf2cz6vmht4pu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lOR1Lu4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ij6sxpnwf2cz6vmht4pu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#provide-feedback-of-a-taken-action"&gt;
  &lt;/a&gt;
  Provide feedback of a taken action
&lt;/h4&gt;

&lt;p&gt;For example, by highlighting an element after taking an action on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RGwH6EiN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdd7xk0e49u8wtavao3s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGwH6EiN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdd7xk0e49u8wtavao3s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#progress-bars"&gt;
  &lt;/a&gt;
  Progress bars
&lt;/h4&gt;

&lt;p&gt;Always let the user know where they are within a multi-step process and show progress bars when appropriate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8iRXQ43t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jge58b3psd5nkhz9bw4z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8iRXQ43t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jge58b3psd5nkhz9bw4z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#spinners"&gt;
  &lt;/a&gt;
  Spinners
&lt;/h4&gt;

&lt;p&gt;Implement spinners to let the user know that they have to wait for an action to complete. Don't leave them wondering what's going on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L1CaeURR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8exl658600kuh35l6z4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L1CaeURR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8exl658600kuh35l6z4k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#keywords-to-this-principle"&gt;
  &lt;/a&gt;
  🤖 Keywords to this principle
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Communication&lt;/li&gt;
&lt;li&gt;Transparency&lt;/li&gt;
&lt;li&gt;Trust&lt;/li&gt;
&lt;li&gt;Reliability&lt;/li&gt;
&lt;li&gt;Anticipation&lt;/li&gt;
&lt;li&gt;Feedback &lt;/li&gt;
&lt;li&gt;Information&lt;/li&gt;
&lt;li&gt;Decisions&lt;/li&gt;
&lt;li&gt;Predictability&lt;/li&gt;
&lt;li&gt;Control&lt;/li&gt;
&lt;li&gt;Comfort&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#2-match-between-the-system-and-the-real-world-%F0%9F%96%A5"&gt;
  &lt;/a&gt;
  2. Match between the system and the real world 🖥↔️🌎
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#main-idea"&gt;
  &lt;/a&gt;
  💡 Main idea
&lt;/h3&gt;

&lt;p&gt;The system should speak the users' language, this is, they have to be capable of easily understand everything they perceive while interacting with the system. &lt;/p&gt;

&lt;p&gt;Human beings find comfort in &lt;strong&gt;familiarity&lt;/strong&gt;, so bear in mind that it's fundamental to use concepts and words that the users already know, have an idea of and find easy to understand. That's what we understand by &lt;em&gt;familiar&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It's true that every person has a &lt;strong&gt;different understanding and perception&lt;/strong&gt; of the world: some things can be very obvious for you, but not that obvious for, let's say, a friend of yours.&lt;/p&gt;

&lt;p&gt;So, since this is something &lt;strong&gt;unavoidable&lt;/strong&gt; (but manageable), it's important to take this fact into mind, and, as a result, base every concept of the system in &lt;strong&gt;real world conventions&lt;/strong&gt;. &lt;strong&gt;Never assume that your understanding and your particular interpretation of the world match the ones of your final users&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These interpretations are formed based on previous experiences, familiarity with language and objects, beliefs, ideas and values, and are called &lt;strong&gt;mental models&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Each user has its own mental model and they &lt;strong&gt;carry these interpretations with them&lt;/strong&gt; from the real world to the digital world, so it's our work to ease this transition by expressing concepts appropriately.&lt;/p&gt;

&lt;p&gt;Since it's impossible to know what the vision of the world is for every user, the only thing we can do to create a suitable conceptual model for our system is to use &lt;strong&gt;logical statements&lt;/strong&gt; and concepts that are &lt;strong&gt;widely extended within society&lt;/strong&gt;. This will result in users making use of the system &lt;strong&gt;intuitively&lt;/strong&gt; and &lt;strong&gt;comfortably&lt;/strong&gt;. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#main-goals"&gt;
  &lt;/a&gt;
  💎 Main goals
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Match user's expectations as to their interaction with the system.&lt;/li&gt;
&lt;li&gt;Let them know that you understand their needs and care about them: to show &lt;strong&gt;empathy&lt;/strong&gt; will make them feel important.&lt;/li&gt;
&lt;li&gt;Build &lt;strong&gt;trust&lt;/strong&gt; and set a feeling of &lt;strong&gt;familiarity&lt;/strong&gt; on their side, which will lead to &lt;strong&gt;loyal users&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#tips"&gt;
  &lt;/a&gt;
  🔮 Tips
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make sure your users &lt;strong&gt;understand&lt;/strong&gt; every piece of information they are interacting with and be aware of the importance that this fact has.&lt;br&gt;
Users should always be able to understand the meaning of everything they run into without having to go look it up in a search engine, so &lt;strong&gt;never use jargon or complex words&lt;/strong&gt;. Better use &lt;strong&gt;natural language&lt;/strong&gt; and present information in a &lt;strong&gt;natural and intuitive&lt;/strong&gt; order. Everything &lt;strong&gt;should flow naturally&lt;/strong&gt; to facilitate the user the task of proceeding when using the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Never assume&lt;/strong&gt; the way of making use of the system by an user and how will they behave while interacting with it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do a &lt;strong&gt;research&lt;/strong&gt; on what &lt;strong&gt;kind of user&lt;/strong&gt; will interact with your system to find out what &lt;strong&gt;concepts are familiar&lt;/strong&gt; to them and what &lt;strong&gt;type of language&lt;/strong&gt; you should use, and adapt yours, if necessary.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#keywords-to-this-principle"&gt;
  &lt;/a&gt;
  🤖 Keywords to this principle
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Familiarity&lt;/li&gt;
&lt;li&gt;Logic&lt;/li&gt;
&lt;li&gt;Real world&lt;/li&gt;
&lt;li&gt;Perception&lt;/li&gt;
&lt;li&gt;Care&lt;/li&gt;
&lt;li&gt;Empathy&lt;/li&gt;
&lt;li&gt;Experience&lt;/li&gt;
&lt;li&gt;Natural&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#3-user-control-and-freedom"&gt;
  &lt;/a&gt;
  3. User control and freedom 👩‍💻👨‍💻
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#main-idea"&gt;
  &lt;/a&gt;
  💡 Main idea
&lt;/h3&gt;

&lt;p&gt;Users make mistakes, so they have to be provided with emergency exits in case they need to escape or recover from wrongly performed actions.&lt;/p&gt;

&lt;p&gt;But not only when they proceed in a wrong way: they always have to be &lt;strong&gt;allowed to correct mistakes&lt;/strong&gt; and &lt;strong&gt;change their minds&lt;/strong&gt;, especially when they open up a new page, screen or view (usually through clicking a provided link).&lt;/p&gt;

&lt;p&gt;A large amount of users still rely on browser's or device's back buttons instead of using the back links provided by the system, so it's important to pay close attention when leading actions towards new tabs since some users can have trouble trying to go back.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-types-of-emergency-exits"&gt;
  &lt;/a&gt;
  ◽️ Types of &lt;em&gt;emergency&lt;/em&gt; exits
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Back link&lt;/strong&gt;: a link that allows the user to go back in a page, screen or view.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cancel link&lt;/strong&gt;: a link that allows the user to interrupt the process of an ongoing action.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Close link&lt;/strong&gt;: a link that allows the user to close an open view (e.g., modals).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Undo link&lt;/strong&gt;: a link that allows the user to reverse a taken action, which should also be ideally accompanied by its corresponding &lt;em&gt;redo&lt;/em&gt; link, to let them know they can change their mind anytime even if they make a mistake in the course of performing an action.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#main-goals"&gt;
  &lt;/a&gt;
  💎 Main goals
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ensure that the user &lt;strong&gt;feels in control&lt;/strong&gt; of the situation when interacting with the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give users the &lt;strong&gt;freedom to perform actions&lt;/strong&gt; within the system without leaving them wondering and worried about the actions they are performing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make the user &lt;strong&gt;feel comfortable&lt;/strong&gt; enough to &lt;strong&gt;explore the system&lt;/strong&gt; without feeling inhibited, which is a direct consequence of them knowing that they can take actions that can be reversed if they make a mistake.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#tips"&gt;
  &lt;/a&gt;
  🔮 Tips
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Facilitate the user the task of finding &lt;em&gt;emergency&lt;/em&gt; exits on your system, just as it's easy to find their counterparts in public spaces, like a shopping mall.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using icons that are &lt;strong&gt;universally recognizable&lt;/strong&gt; by the user can help match their &lt;strong&gt;mental models&lt;/strong&gt; (like using a cross to close a view). You can add a text label to point more clearly where the corresponding action will lead them to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allow the user to &lt;strong&gt;cancel&lt;/strong&gt; an action at &lt;strong&gt;any point&lt;/strong&gt; of the process. This is specially important when it comes to a purchase, a money transfer or a download that can take some time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always support the &lt;strong&gt;undo&lt;/strong&gt; of an action by implementing links, toggles or checkboxes and ensure that they are well placed to be easily discoverable by the user.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#keywords-to-this-principle"&gt;
  &lt;/a&gt;
  🤖 Keywords to this principle
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Control&lt;/li&gt;
&lt;li&gt;Freedom&lt;/li&gt;
&lt;li&gt;Exits&lt;/li&gt;
&lt;li&gt;Mistakes&lt;/li&gt;
&lt;li&gt;Exploration&lt;/li&gt;
&lt;li&gt;Cancel&lt;/li&gt;
&lt;li&gt;Go back&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#4-consistency-and-standards-%EF%B8%8F"&gt;
  &lt;/a&gt;
  4. Consistency and standards ⌚️
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#main-idea"&gt;
  &lt;/a&gt;
  💡 Main idea
&lt;/h3&gt;

&lt;p&gt;Users have expectations when interacting with a system, which are based on their previous experiences with another systems.&lt;/p&gt;

&lt;p&gt;Jakob's Law states:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"&lt;em&gt;People spend most of their time using products that are not yours, so they expect your product works in the way the others do. Failing to fulfill these expectation may result in user’s cognitive overload and force them to learn something new.&lt;/em&gt;"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So that's important that our system follows already established conventions when it comes to user interaction and interface design, as we mentioned in &lt;em&gt;Principle 2: Match between the system and the real world&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Some examples of these conventions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Underlined&lt;/strong&gt; text means &lt;em&gt;clickable&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;shopping cart&lt;/strong&gt; / basket icon represents the section where the items you select to buy are stored and from where you will be able to proceed to a checkout process eventually.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Red&lt;/strong&gt; means stop / danger and &lt;strong&gt;green&lt;/strong&gt; means go / safe.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;magnifier&lt;/strong&gt; icon means &lt;em&gt;search&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;While accessing a website or an app on portable devices, an icon representing &lt;strong&gt;three vertically stacked lines&lt;/strong&gt; means that there is a hidden navigation menu.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-internal-versus-external-consistency"&gt;
  &lt;/a&gt;
  ◽️ Internal versus external consistency
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Internal consistency&lt;/em&gt; regards &lt;strong&gt;consistency and standards across a product&lt;/strong&gt; or a family of products. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When it comes to a single app, this means that &lt;strong&gt;consistency should remain throughout the platform&lt;/strong&gt;: layout, colors, shapes, typography, visual items treatment...&lt;/p&gt;

&lt;p&gt;On the other hand, while facing the design of a family of related products, not only the conventions above should be met but also have to &lt;strong&gt;keep a coherent relation between them all&lt;/strong&gt; when it comes to layout, icons and functionality, to mention a few.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;External consistency&lt;/em&gt; refers to &lt;strong&gt;consistency and standards that match the industry&lt;/strong&gt; and / or web conventions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an example, note that all well-known &lt;em&gt;e-Commerce&lt;/em&gt; sites follow &lt;strong&gt;common standards&lt;/strong&gt; in order to make the purchase experience &lt;strong&gt;consistent and efficient&lt;/strong&gt; to the customer. Otherwise, it would lead to them leaving the &lt;em&gt;store&lt;/em&gt; and looking for another one where they understand the steps they need to take towards their goal (the purchase of an arbitrary number of items) and where they feel comfortable with the process.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-layers-of-consistency"&gt;
  &lt;/a&gt;
  ◽️ Layers of consistency
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#1-visual"&gt;
  &lt;/a&gt;
  1. Visual
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Colors, typography, icon design, title decoration, etc should be &lt;strong&gt;consistent across the system&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Images should be treated similarly: aspect ratio, borders, size...&lt;/li&gt;
&lt;li&gt;Symbols should be consistent with the &lt;strong&gt;action&lt;/strong&gt; they lead to or the &lt;strong&gt;information&lt;/strong&gt; they're providing: use an icon of a plane for flight search, an icon of a car for car rental, an icon of a cat or a dog when specifying if pets are allowed in an accommodation, a cigarette when pointing out if it's allowed to smoke or not, or a shopping cart to store the items that can be eventually purchased, as mentioned earlier above.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#2-page-layout"&gt;
  &lt;/a&gt;
  2. Page layout
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;All items related to page layout &lt;strong&gt;should remain consistent and coherent&lt;/strong&gt; across all the pages of the site.&lt;/li&gt;
&lt;li&gt;It doesn't matter where you decide to locate buttons and other layout items, but &lt;strong&gt;do it consistently&lt;/strong&gt;: don't place the same button in different places when having different screens among the same process, for example.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#3-userentered-data"&gt;
  &lt;/a&gt;
  3. User-entered data
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;This is especially important when it comes to dates, phone numbers and locations. &lt;strong&gt;Avoid to use an open field&lt;/strong&gt; for this type of data. &lt;/li&gt;
&lt;li&gt;Provide the user with &lt;strong&gt;date pickers&lt;/strong&gt; or &lt;strong&gt;auto-formatting&lt;/strong&gt; so they don't have to think about how to enter the required information and let them know they don't have to insert separators in any case (so you don't have to split the entered information later on).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#4-content"&gt;
  &lt;/a&gt;
  4. Content
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;consistent tone of voice&lt;/strong&gt; across the site is crucial. Otherwise the user can feel confused, which will result in not meeting their expectations, and consequently, leaving and / or not returning.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Don't mix casual tone with formal tone&lt;/strong&gt; and always present the information in a way that is readable and understandable by the majority of the users that access your platform.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#main-goals"&gt;
  &lt;/a&gt;
  💎 Main goals
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Meet user's expectations, since they come to use your system with a preconceived idea of how it &lt;em&gt;should&lt;/em&gt; work (based on their mental model).&lt;/li&gt;
&lt;li&gt;Build their &lt;strong&gt;confidence&lt;/strong&gt; towards the system.&lt;/li&gt;
&lt;li&gt;Make them &lt;strong&gt;focus entirely on the content&lt;/strong&gt; rather than let them wondering what's the meaning of what they're viewing, reading or listening to.&lt;/li&gt;
&lt;li&gt;Make sure that the user &lt;strong&gt;doesn't have to learn something new&lt;/strong&gt; in order to interact with your system (or at least as less as possible).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#tips"&gt;
  &lt;/a&gt;
  🔮 Tips
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Always pay attention and implement &lt;strong&gt;both internal and external consistence&lt;/strong&gt;, to make sure all the standards and conventions are met.&lt;/li&gt;
&lt;li&gt;Follow &lt;strong&gt;industry and web conventions&lt;/strong&gt; to avoid the user have to learn new things or concepts while interacting with your system.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#keywords-to-this-principle"&gt;
  &lt;/a&gt;
  🤖 Keywords to this principle
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Consistency&lt;/li&gt;
&lt;li&gt;Conventions&lt;/li&gt;
&lt;li&gt;Standards&lt;/li&gt;
&lt;li&gt;Expectations&lt;/li&gt;
&lt;li&gt;Interaction&lt;/li&gt;
&lt;li&gt;Confidence&lt;/li&gt;
&lt;li&gt;Focus&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#5-error-prevention-%E2%86%92"&gt;
  &lt;/a&gt;
  5. Error prevention ❌ → ✅
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#main-idea"&gt;
  &lt;/a&gt;
  💡 Main idea
&lt;/h3&gt;

&lt;p&gt;Users, as human beings, make errors. You, as an user, make errors. Everybody does. That's something natural. But, even it's something unavoidable, it can also be alleviated by designing a good interface for our system, in these terms.&lt;/p&gt;

&lt;p&gt;Although alerting the user with an error message is a good practice, it's even better to design a &lt;strong&gt;non error-prone system&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-types-of-errors"&gt;
  &lt;/a&gt;
  ◽️ Types of errors
&lt;/h3&gt;

&lt;p&gt;There are two types of errors the users can make: &lt;strong&gt;slips&lt;/strong&gt; (minor errors) and &lt;strong&gt;mistakes&lt;/strong&gt; (conscious errors).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Slips&lt;/strong&gt;: This type of error is often caused by &lt;strong&gt;inattention&lt;/strong&gt; on user's side, like &lt;em&gt;typos&lt;/em&gt;. They are more often made by experienced users, who use the autopilot when interacting with a system: they feel comfortable and rely their confidence on their previous experience with it, while newbies pay more attention to what they're doing since they're &lt;em&gt;learning&lt;/em&gt; how to interact with the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mistakes&lt;/strong&gt;: These are caused by a &lt;strong&gt;mismatch&lt;/strong&gt; between the user's mental model and the design of the system. They take the correct steps towards their goal but these can be inappropriate for the situation. &lt;em&gt;Mistakes&lt;/em&gt; are more difficult to prevent than &lt;em&gt;slips&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-how-to-prevent-slips"&gt;
  &lt;/a&gt;
  ◽️ How to prevent &lt;em&gt;slips&lt;/em&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Always include &lt;strong&gt;helpful constraints&lt;/strong&gt; for user input. For example, regarding a form input field where a range of dates should be entered, always compel the user to select a range where the first date comes before the second date.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Offer &lt;strong&gt;suggestions&lt;/strong&gt; as to search, to avoid typos.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose &lt;strong&gt;according default values&lt;/strong&gt;, when needed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;strong&gt;&lt;em&gt;forgiving&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;formatting&lt;/strong&gt;. This means that, for some input fields, every user can have a different idea on how to enter data, for example, a phone number. So, from here, we have two options: getting rid of the info the user has entered and which is not needed (parentheses or hyphens, for example) or autocompleting the phone number with these special characters while the user is typing. This latter improves their reliability on the system, since they know that they're performing the task correctly, so it's more appropriated than the first one.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-how-to-prevent-mistakes"&gt;
  &lt;/a&gt;
  ◽️ How to prevent &lt;em&gt;mistakes&lt;/em&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Collect data&lt;/strong&gt;. While you're still designing the system, you can gather information about what kind of users are going to use it and do a little research, so you can be aware of what you can expect of their actual &lt;strong&gt;mental models&lt;/strong&gt;.&lt;br&gt;
Once you have your system designed, you can run &lt;strong&gt;usability testing&lt;/strong&gt; to know what's wrong with the usage of your system on user's side.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Follow &lt;strong&gt;design conventions&lt;/strong&gt;, as we've mentioned above, in &lt;em&gt;Principle #2: Match between the system and the real world&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Communicate &lt;strong&gt;affordances&lt;/strong&gt;. This means that the user should be able to know when an &lt;strong&gt;element&lt;/strong&gt; of the interface is &lt;strong&gt;available&lt;/strong&gt; and, consequently, that is interactive and that an action can be taken on it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Preview results&lt;/strong&gt;. Let the user know that the action they're going to take may result in changes at scope level within the system, so they can double-check if they really want to proceed and inform them on what's going on from there.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-good-practices-to-prevent-both-types-of-errors"&gt;
  &lt;/a&gt;
  ◽️ Good practices to prevent both types of errors
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Don't make the user have to &lt;strong&gt;remember&lt;/strong&gt; things or keep information about something within the system. Always provide contextual information.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Show a &lt;strong&gt;confirmation dialog&lt;/strong&gt; before they take an action that causes changes, like deleting something.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always support &lt;strong&gt;undo&lt;/strong&gt;, so the user knows that the changes they would do can be revoked.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let the user know that they will &lt;strong&gt;incur an error&lt;/strong&gt; if they proceed when they're actually doing something that is not allowed. For example, if the user surpasses the number of allowed characters as to a text.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#main-goals"&gt;
  &lt;/a&gt;
  💎 Main goals
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Prevent the majority of mistakes&lt;/strong&gt; a user can make when interacting with our system, rather than waiting for them to perform an action that leads to an error to inform them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make the user comfortable with the system&lt;/strong&gt; by letting them know that if they make a mistake, they can &lt;strong&gt;undo&lt;/strong&gt; the taken action, so their confidence and reliability on the system grow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Never make the user feel that they're responsible for errors&lt;/strong&gt;, because they're not. The designer of the system is (yes, us 😇). So, it's important to use an appropriate language when communicating with the user when an error occurs and improve the design of the system so they make as less of them as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Help the user &lt;strong&gt;build a good mental model&lt;/strong&gt; of your system's interface.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#tips"&gt;
  &lt;/a&gt;
  🔮 Tips
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Always &lt;strong&gt;prevent errors&lt;/strong&gt; to occur.&lt;/li&gt;
&lt;li&gt;Avoid &lt;strong&gt;&lt;em&gt;slips&lt;/em&gt;&lt;/strong&gt; by including constraints, good default values and suggestions.&lt;/li&gt;
&lt;li&gt;Support &lt;strong&gt;&lt;em&gt;undo&lt;/em&gt;&lt;/strong&gt; and let the user know they can recover from their errors.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Warn&lt;/strong&gt; your users when needed. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#keywords-to-this-principle"&gt;
  &lt;/a&gt;
  🤖 Keywords to this principle
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Error&lt;/li&gt;
&lt;li&gt;Mistake&lt;/li&gt;
&lt;li&gt;Undo&lt;/li&gt;
&lt;li&gt;Prevention&lt;/li&gt;
&lt;li&gt;Revoke&lt;/li&gt;
&lt;li&gt;Confirmation&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;And this is all for the first lecture of the UX 101 series! &lt;/p&gt;

&lt;p&gt;Stay tuned to know more about UX in future episodes of the series.&lt;/p&gt;

&lt;p&gt;A big thanks for reading  🤗  and don't hesitate to reach out to me if you have any questions or doubts about today's lecture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/XFuQ4InwtXBE4DDPHM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/XFuQ4InwtXBE4DDPHM/giphy.gif" alt='Rachel Green from Friends TV Show behind a desk saying "Ask me anything"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you found this article useful and I see you all in the next 👋&lt;/p&gt;



&lt;p&gt;👉 You can also check out the &lt;strong&gt;related slides&lt;/strong&gt; for this article on Instagram 👈&lt;/p&gt;


&lt;div class="instagram-position"&gt;
  &lt;iframe id="instagram-liquid-tag" src="https://www.instagram.com/p/CTHh--hjqnD/embed/captioned"&gt;
  &lt;/iframe&gt;
  
&lt;/div&gt;





&lt;p&gt;🎉 Don't forget to follow &lt;a class="mentioned-user" href="https://dev.to/underscorecode"&gt;@underscorecode&lt;/a&gt;
 on &lt;a href="https://instagram.com/underscorecode"&gt;Instagram&lt;/a&gt; and &lt;a href="https://twitter.com/underscorecode"&gt;Twitter&lt;/a&gt; for more daily webdev content: info, challenges, quizzes &amp;amp; more 💜&lt;/p&gt;




</description>
      <category>uiweekly</category>
      <category>ux</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Avoid this when using Date/Time functions in PHP</title>
      <author>Marcos Rezende</author>
      <pubDate>Sat, 28 Aug 2021 16:37:31 +0000</pubDate>
      <link>https://dev.to/rezende79/avoid-this-when-using-date-time-functions-in-php-4o3</link>
      <guid>https://dev.to/rezende79/avoid-this-when-using-date-time-functions-in-php-4o3</guid>
      <description>&lt;p&gt;Is there any difference between getting the current date/time in the following ways in PHP?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;DateTimeImmutable&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y-m-d H:i:s'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;DateTimeImmutable&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;createFromFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'U'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y-m-d H:i:s'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imagine that you are inserting data into a database table using the first way, but when querying the same database table you use the second option.&lt;/p&gt;

&lt;p&gt;While the first option will return the current date/time of your server taking into account its Time Zone configuration, the second way will return the current date/time of your server based on UTC time zone.&lt;/p&gt;

&lt;p&gt;After creating just a single user into a users table with this data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Sebastian'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;createdAt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;DateTimeImmutable&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y-m-d H:i:s'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and querying the user table in this way&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$dql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sh"&gt;&amp;lt;&amp;lt;&amp;lt;EOT
        SELECT u FROM App\Entity\User u
        WHERE u.createdAt &amp;lt;= :createdAt
    EOT;&lt;/span&gt;

&lt;span class="nv"&gt;$now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;DateTimeImmutable&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;createFromFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'U'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y-m-d H:i:s'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;entityManager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;createQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$dql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setParameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'createdAt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getResult&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you will receive an empty array of &lt;code&gt;$users&lt;/code&gt; if the server which hosts your application is located in any country with Time Zone configuration greater than 0 (Lisbon, France, Germany, and so on).&lt;/p&gt;

&lt;p&gt;It will happen because the data inserted into your user table will have the &lt;code&gt;createdAt&lt;/code&gt; field was filled with &lt;code&gt;18:14&lt;/code&gt; while when you try to query the database, you will use the time &lt;code&gt;16:14&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You didn't create any user before 16:14!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will never find the users that you recently created.&lt;/p&gt;

&lt;p&gt;This happens because when you use &lt;code&gt;U&lt;/code&gt; for formatting the date/time values, you are getting a Unix Timestamp date7time format which gets the date/time always based on &lt;a href="https://en.wikipedia.org/wiki/Coordinated_Universal_Time"&gt;Coordinated Universal Time&lt;/a&gt;, and never taking into account your Server's Time Zone configuration.&lt;/p&gt;

&lt;p&gt;It looks pretty basic but maybe you have never had this issue because you are working bellow UTC Time Zone (Denmark, South America, Canada, USA, and so on). &lt;/p&gt;

</description>
      <category>timezone</category>
      <category>php</category>
      <category>datetime</category>
    </item>
  </channel>
</rss>
