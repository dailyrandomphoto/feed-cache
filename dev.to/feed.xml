<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>So you want to fly to the moon? Start with the AWS Cloud Practitioner certification &amp; Exam Tips</title>
      <author>Wendy Wong</author>
      <pubDate>Sun, 21 Nov 2021 14:16:49 +0000</pubDate>
      <link>https://dev.to/aws-builders/so-you-want-to-fly-to-the-moon-start-with-the-aws-cloud-practitioner-certification-exam-tips-me6</link>
      <guid>https://dev.to/aws-builders/so-you-want-to-fly-to-the-moon-start-with-the-aws-cloud-practitioner-certification-exam-tips-me6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#every-goal-starts-with-a-setting-a-vision"&gt;
  &lt;/a&gt;
  Every goal starts with a setting a vision ‚ú®
&lt;/h2&gt;

&lt;p&gt;It's been quite the journey. At the start of 2021, I set a  goal to learn more about cloud computing. &lt;/p&gt;

&lt;p&gt;In my Master's degree, unfortunately we did not have an elective on cloud computing, I tinkered with AWS at an AI startup who were part of the AWS Partner Network and I also used AWS in a data science hackathon.&lt;/p&gt;

&lt;p&gt;My goals to learn cloud computing included:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To have an appreciation of the AWS ecosystem&lt;/li&gt;
&lt;li&gt;Understand core AWS services&lt;/li&gt;
&lt;li&gt;Understand fully managed databases (SQL and NoSQL) &lt;/li&gt;
&lt;li&gt;Understand AWS storage options so I can explain it to my leaders&lt;/li&gt;
&lt;li&gt;Understand AWS analytics services and explain it to my team&lt;/li&gt;
&lt;li&gt;Understand AWS data warehouse solutions to explain requirements to a data engineer and discuss non-technical concepts to business leaders and data analysts for our modernization strategy&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-your-learning-goals"&gt;
  &lt;/a&gt;
  What are your learning goals? üéè
&lt;/h2&gt;

&lt;p&gt;"You are never too old to set another goal or to dream a new dream." ‚Äì C.S. Lewis&lt;/p&gt;

&lt;p&gt;Your learning goals may include wanting to re-skill, upskill, re-enter the workforce, build something amazing for a side project, help your organization understand cloud or move workloads to the cloud.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-does-your-organization-need-to-understand-cloud"&gt;
  &lt;/a&gt;
  Why does your organization need to understand cloud? ‚òÅÔ∏è
&lt;/h2&gt;

&lt;p&gt;You can explain &lt;a href="https://aws.amazon.com/what-is-cloud-computing/?nc2=type_a"&gt;what is cloud computing&lt;/a&gt; and the &lt;a href="https://aws.amazon.com/what-is-cloud-computing/?nc2=h_ql_le_int_cc"&gt;benefits&lt;/a&gt; to different stakeholders to help them get them on board on a digital transformation journey to cloud e.g. in banking, insurance and government. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aMjjjO37--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qsurbmj0cp9cxb7fk09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aMjjjO37--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qsurbmj0cp9cxb7fk09.png" alt="what is cloud" width="880" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#it-leader-what-are-the-benefits-of-moving-workloads-from-onpremises-the-cloud"&gt;
  &lt;/a&gt;
  IT Leader: What are the benefits of moving workloads from on-premises the cloud?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Cost savings -  with the pay as you go pricing model, you pay for what you use.&lt;/li&gt;
&lt;li&gt;Go global in minutes - you may deploy a solution in minutes into multiple geographic locations.&lt;/li&gt;
&lt;li&gt;Elasticity - You may scale up or scale down the right sizing of an Amazon resource and you do not have to provision it beforehand.&lt;/li&gt;
&lt;li&gt;Agility - you have access storage, databases and data lakes quickly when those resources are needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#platform-manager-what-is-the-current-costs-and-forecasts-by-launching-an-ec2-instance-and-building-machine-learning-models-for-our-data-science-team"&gt;
  &lt;/a&gt;
  Platform Manager: What is the current costs and forecasts by launching an EC2 instance and building machine learning models for our data science team?
&lt;/h4&gt;

&lt;p&gt;You may wish to use &lt;a href="https://aws.amazon.com/aws-cost-management/aws-cost-explorer/"&gt;AWS Cost Explorer&lt;/a&gt; to view your current usage and estimate your usage in the next 6 months especially if you are building.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k5bukLDF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dti1g5j6a5nv47oa02l0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k5bukLDF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dti1g5j6a5nv47oa02l0.png" alt="explorer" width="880" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You might want to use &lt;a href="https://aws.amazon.com/organizations/"&gt;AWS Organizations&lt;/a&gt; to analyze a single bill for one member account across different departments such as product, analytics and engineering.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#legal-team-how-can-you-ensure-that-customer-data-is-protected-in-the-cloud-and-there-is-no-data-breach-or-reputational-risk-in-the-media"&gt;
  &lt;/a&gt;
  Legal Team: How can you ensure that customer data is protected in the cloud and there is no data breach or reputational risk in the media?
&lt;/h4&gt;

&lt;p&gt;You might give confidence to your data governance team to ensure that data privacy is maintained and customer sensitive data is protected in Amazon S3 buckets with machine learning and analyzing patterns using &lt;a href="https://aws.amazon.com/macie/"&gt;Amazon Macie&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may also provide your organization with access to Amazon's compliance reports using &lt;a href="https://aws.amazon.com/artifact/"&gt;Amazon Artifact&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#business-leader-how-can-my-team-innovate-with-cloud-and-start-experimenting-with-aws"&gt;
  &lt;/a&gt;
  Business Leader: How can my team innovate with cloud and start experimenting with AWS?
&lt;/h4&gt;

&lt;p&gt;You will receive an &lt;a href="https://aws.amazon.com/iam/"&gt;IAM role&lt;/a&gt; as a user from your administrator or platform team. If you work in a team, IAM users may be created for a group whereby permissions will be assigned to your team.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EXHXyLSg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyqbcveuferjczk0k4px.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EXHXyLSg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyqbcveuferjczk0k4px.png" alt="IAM role console" width="880" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#digital-team-what-aws-analytics-services-can-we-use-to-analyze-customer-campaigns"&gt;
  &lt;/a&gt;
  Digital Team: What AWS analytics services can we use to analyze customer campaigns?
&lt;/h4&gt;

&lt;p&gt;You may wish to use &lt;a href="https://aws.amazon.com/quicksight/"&gt;Amazon QuickSight&lt;/a&gt; to produce business intelligence dashboards if your role includes reporting results to your business leaders&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-the-aws-cloud-practitioner-certification-suitable-for-me"&gt;
  &lt;/a&gt;
  Is the AWS Cloud Practitioner Certification suitable for me? üìö
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DUUB8Je7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ctau3mghaiufow3g0cm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DUUB8Je7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ctau3mghaiufow3g0cm.png" alt="CCP" width="880" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The AWS Cloud Practitioner certification is for everyone, as long as you are curious and have the willingness to learn. The intended audience includes IT professionals, sales, business analysts, legal and project managers. However you are welcome to receive this free 6 hour digital training even if you are from a non-engineering background!&lt;/p&gt;

&lt;p&gt;You may access the 6 hours of free digital training from the AWS Skills Builder launched in October 2021 here is the &lt;a href="https://explore.skillbuilder.aws/learn/course/external/view/elearning/134/aws-cloud-practitioner-essentials?scr=detail&amp;amp;refid=em_championcreditcodes_432143_emea21_awsomedayq4&amp;amp;trkcampaign=emea21_awsomedayq4"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may sign-in to AWS Skills Builder using your existing AWS account, which is the Amazon account that you also use to sign-in to purchase Amazon products online or access the Management Console. If you don't already have an Amazon account, here is a &lt;a href="https://dev.to/aws-builders/getting-started-with-aws-a-sweet-journey-5cjj"&gt;link&lt;/a&gt; with steps to walk you through how to create an account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--plRfuDKi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltvsze1bqppmz3voclki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--plRfuDKi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltvsze1bqppmz3voclki.png" alt="learn on skills builder" width="880" height="521"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-you-learn-aws-cloud-practitioner-certification-course-outline"&gt;
  &lt;/a&gt;
  What will you learn? AWS Cloud Practitioner Certification: Course outline üñäÔ∏è
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#module-1-introduction-to-amazon-web-services"&gt;
  &lt;/a&gt;
  Module 1: Introduction to Amazon Web Services
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Summarize the benefits of AWS&lt;/li&gt;
&lt;li&gt;Describe differences between on-demand delivery and cloud deployments&lt;/li&gt;
&lt;li&gt;Summarize the pay-as-you-go pricing model&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-2-compute-in-the-cloud"&gt;
  &lt;/a&gt;
  Module 2: Compute in the Cloud
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Describe the benefits of Amazon Elastic Compute Cloud (Amazon EC2) at a basic level&lt;/li&gt;
&lt;li&gt;Identify the different Amazon EC2 instance types&lt;/li&gt;
&lt;li&gt;Differentiate between the various billing options for Amazon EC2&lt;/li&gt;
&lt;li&gt;Describe the benefits of Amazon EC2 Auto Scaling&lt;/li&gt;
&lt;li&gt;Summarize the benefits of Elastic Load Balancing
Give an example of the uses for Elastic Load Balancing&lt;/li&gt;
&lt;li&gt;Summarize the differences between Amazon Simple Notification Service (Amazon SNS) and Amazon Simple Queue Services (Amazon SQS)
Summarize additional AWS compute options&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-3-global-infrastructure-and-reliability"&gt;
  &lt;/a&gt;
  Module 3: Global Infrastructure and Reliability
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Summarize the benefits of the AWS Global Infrastructure&lt;/li&gt;
&lt;li&gt;Describe the basic concept of Availability Zones&lt;/li&gt;
&lt;li&gt;Describe the benefits of Amazon CloudFront and Edge locations&lt;/li&gt;
&lt;li&gt;Compare different methods for provisioning AWS services&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-4-networking"&gt;
  &lt;/a&gt;
  Module 4: Networking
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Describe the basic concepts of networking&lt;/li&gt;
&lt;li&gt;Describe the difference between public and private networking resources&lt;/li&gt;
&lt;li&gt;Explain a virtual private gateway using a real life scenario&lt;/li&gt;
&lt;li&gt;Explain a virtual private network (VPN) using a real life scenario&lt;/li&gt;
&lt;li&gt;Describe the benefit of AWS Direct Connect&lt;/li&gt;
&lt;li&gt;Describe the benefit of hybrid deployments&lt;/li&gt;
&lt;li&gt;Describe the layers of security used in an IT strategy&lt;/li&gt;
&lt;li&gt;Describe which services are used to interact with the AWS global network&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-5-storage-and-databases"&gt;
  &lt;/a&gt;
  Module 5: Storage and Databases
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Summarize the basic concept of storage and databases&lt;/li&gt;
&lt;li&gt;Describe benefits of Amazon Elastic Block Store (Amazon EBS)&lt;/li&gt;
&lt;li&gt;Describe benefits of Amazon Simple Storage Service (Amazon S3)&lt;/li&gt;
&lt;li&gt;Describe the benefits of Amazon Elastic File System (Amazon EFS)&lt;/li&gt;
&lt;li&gt;Summarize various storage solutions&lt;/li&gt;
&lt;li&gt;Describe the benefits of Amazon Relational Database Service (Amazon RDS)&lt;/li&gt;
&lt;li&gt;Describe the benefits of Amazon DynamoDB&lt;/li&gt;
&lt;li&gt;Summarize various database services&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-6-security"&gt;
  &lt;/a&gt;
  Module 6: Security
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Explain the benefits of the shared responsibility model&lt;/li&gt;
&lt;li&gt;Describe multi-factor authentication (MFA)&lt;/li&gt;
&lt;li&gt;Differentiate between the AWS Identity and Access Management (IAM) security levels&lt;/li&gt;
&lt;li&gt;Describe security policies at a basic level&lt;/li&gt;
&lt;li&gt;Explain the benefits of AWS Organizations&lt;/li&gt;
&lt;li&gt;Summarize the benefits of compliance with AWS&lt;/li&gt;
&lt;li&gt;Explain primary AWS security services at a basic level&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-7-monitoring-and-analytics"&gt;
  &lt;/a&gt;
  Module 7: Monitoring and Analytics
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Summarize approaches to monitoring your AWS environment&lt;/li&gt;
&lt;li&gt;Describe the benefits of Amazon CloudWatch&lt;/li&gt;
&lt;li&gt;Describe the benefits of AWS CloudTrail&lt;/li&gt;
&lt;li&gt;Describe the benefits of AWS Trusted Advisor&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-8-pricing-and-support"&gt;
  &lt;/a&gt;
  Module 8: Pricing and Support
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Understand AWS pricing and support models&lt;/li&gt;
&lt;li&gt;Describe the AWS Free Tier&lt;/li&gt;
&lt;li&gt;Describe key benefits of AWS Organizations and consolidated billing&lt;/li&gt;
&lt;li&gt;Explain the benefits of AWS Budgets&lt;/li&gt;
&lt;li&gt;Explain the benefits of AWS Cost Explorer&lt;/li&gt;
&lt;li&gt;Explain the primary benefits of the AWS Pricing Calculator&lt;/li&gt;
&lt;li&gt;Distinguish between the various AWS Support Plans&lt;/li&gt;
&lt;li&gt;Describe the benefits of AWS Marketplace&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-9-migration-and-innovation"&gt;
  &lt;/a&gt;
  Module 9: Migration and Innovation
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Understand migration and innovation in the AWS Cloud&lt;/li&gt;
&lt;li&gt;Summarize the AWS Cloud Adoption Framework (AWS CAF)&lt;/li&gt;
&lt;li&gt;Summarize six key factors of a cloud migration strategy&lt;/li&gt;
&lt;li&gt;Describe the benefits of various AWS data migration solutions, such as AWS Snowcone, AWS Snowball, and AWS Snowmobile&lt;/li&gt;
&lt;li&gt;Summarize the broad scope of innovative solutions that AWS offers&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-10-the-cloud-journey"&gt;
  &lt;/a&gt;
  Module 10: The Cloud Journey
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Summarize the five pillars of the AWS Well-Architected Framework&lt;/li&gt;
&lt;li&gt;Explain the six benefits of cloud computing&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#module-11-aws-certified-cloud-practitioner-basics"&gt;
  &lt;/a&gt;
  Module 11: AWS Certified Cloud Practitioner Basics
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Determine resources for preparing for the AWS Certified Cloud Practitioner examination&lt;/li&gt;
&lt;li&gt;Describe benefits of becoming AWS Certified&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will receive a certification of completion when you complete all the modules and an email from the AWS Training and Certification Team. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exam-readiness-tips"&gt;
  &lt;/a&gt;
  Exam Readiness: Tips üöÄ
&lt;/h2&gt;

&lt;p&gt;Here is a link covering useful resources to help you prepare for the &lt;a href="https://aws.amazon.com/certification/certified-cloud-practitioner/?ch=tile&amp;amp;tile=getstarted"&gt;AWS Cloud Practitioner Certification&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 1: The next step is to book your exam 2-3 weeks ahead so you can also continue studying and prepare for your exam.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Book my exam 2-3 weeks ahead after completing the digital training and online modules. &lt;/li&gt;
&lt;li&gt;Book an online proctored exam with Pearson VUE on a Saturday or Sunday that does not interrupt your work schedule.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 2: Prepare for the exam by following all the links recommended by AWS on Prepare for the Exam with the link &lt;a href="https://aws.amazon.com/certification/certified-cloud-practitioner/?ch=tile&amp;amp;tile=getstarted"&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Step 3:  Download the &lt;a href="https://d1.awsstatic.com/training-and-certification/docs-cloud-practitioner/AWS-Certified-Cloud-Practitioner_Exam-Guide.pdf"&gt;exam guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5afh0jvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p3x1srii2g1irikiwyl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5afh0jvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8p3x1srii2g1irikiwyl.png" alt="exam guide" width="880" height="948"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The exam guide will help you understand the scope of the domains covered including:&lt;/p&gt;

&lt;p&gt;Domain 1: Cloud Concepts 26%&lt;br&gt;
Domain 2: Security &amp;amp; Compliance 25%&lt;br&gt;
Domain 3: Technology 33%&lt;br&gt;
Domain 4: Billing &amp;amp; Pricing 16%&lt;/p&gt;

&lt;p&gt;There are 65 multiple choice questions and you have 90 minutes to complete the exam. &lt;/p&gt;

&lt;p&gt;Step 4: Download the sample exam questions located &lt;a href="https://d1.awsstatic.com/training-and-certification/docs-cloud-practitioner/AWS-Certified-Cloud-Practitioner_Sample-Questions.pdf"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PNTxUsaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ctk7hyzfe1siph8miyfu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PNTxUsaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ctk7hyzfe1siph8miyfu.png" alt="sample questions" width="880" height="934"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 5: Complete the official AWS Certified Cloud Practitioner Practice Exam at this AWS Skill Builders &lt;a href="https://explore.skillbuilder.aws/learn/catalog?ctldoc-catalog-0=se-%22AWS%20Certification%20Official%20Practice%20Question%20Sets%22?cp=sec&amp;amp;sec=prep"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By completing the practice exam it will help you understand your overall performance and readiness for the exam preparation.&lt;/p&gt;

&lt;p&gt;Step 6: Attend an Exam Readiness webinar to consolidate your knowledge by booking a session &lt;a href="https://aws.amazon.com/training/events/?get-certified-vilt-courses-cards.sort-by=item.additionalFields.startDateSort&amp;amp;get-certified-vilt-courses-cards.sort-order=asc&amp;amp;awsf.get-certified-vilt-courses-type=*all&amp;amp;awsf.get-certified-vilt-courses-series=series%23aws-certification-exam-readiness&amp;amp;awsf.get-certified-vilt-audience=*all&amp;amp;awsf.get-certified-vilt-locations=*all&amp;amp;awsf.get-certified-vilt-countries=*all&amp;amp;awsf.get-certified-vilt-languages=*all&amp;amp;awsf.get-certified-vilt-courses-level=level%23100&amp;amp;awsf.get-certified-vilt-courses-tech-category=*all&amp;amp;cp=sec&amp;amp;sec=prep"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cqzkVt8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29n55a9jq57naksu4umq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cqzkVt8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29n55a9jq57naksu4umq.png" alt="readiness" width="880" height="513"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 7: Watch on-demand training on Twitch &lt;/p&gt;

&lt;p&gt;You may watch any of the AWS Power Hour: Cloud Practitioner &lt;a href="https://pages.awscloud.com/global-traincert-twitch-power-hour-cloud-practitioner.html?cp=sec&amp;amp;sec=prep"&gt;on-demand episodes&lt;/a&gt; and read the list of resources as provided to help further your preparation for the exam&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fRFDWESl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjbfrf3hu0idpmyns4q8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fRFDWESl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjbfrf3hu0idpmyns4q8.png" alt="power hour" width="880" height="513"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 8: Enrol into the AWS Cloud Practitioner course a second time via AWS Skill Builder for extra revision &lt;/p&gt;

&lt;p&gt;I completed the digital training a second time and took notes to reinforce my learning so I could explain to myself the areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is an availability zone?&lt;/li&gt;
&lt;li&gt;What is the difference between Amazon S3 and Amazon Elastic Block Store (Amazon EBS)?&lt;/li&gt;
&lt;li&gt;What is a VPC?&lt;/li&gt;
&lt;li&gt;What is a subnet?&lt;/li&gt;
&lt;li&gt;What is decoupling?&lt;/li&gt;
&lt;li&gt;What is the AWS Shared Responsibility Model?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yO8wH8ng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgkbkryab3tvw5qfp1bn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yO8wH8ng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgkbkryab3tvw5qfp1bn.png" alt="share" width="880" height="540"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is the benefit of cloud computing?&lt;/li&gt;
&lt;li&gt;What are the different EC2 instances?&lt;/li&gt;
&lt;li&gt;What is the difference between elastic load balancing and auto scaling?&lt;/li&gt;
&lt;li&gt;What is Amazon Route 53?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 9: Read the suggested whitepapers&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read: &lt;a href="https://d1.awsstatic.com/whitepapers/aws-overview.pdf"&gt;Overview of Amazon Web Services&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl8LopoC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h09tuizok8rsaagurohl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl8LopoC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h09tuizok8rsaagurohl.png" alt="overview" width="880" height="977"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is useful to also understand the AWS core services by exploring the documentation listing to be able to understand the use cases for storage, compute, machine learning, analytics, security and other uncommon AWS services that are not covered in detail in the digital training.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9vHVJGBj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vdupmfcftn77ni12fz2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9vHVJGBj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vdupmfcftn77ni12fz2.png" alt="documentation" width="880" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No coding is required for this certification. You may login to the Management Console to explore and 'play' with some of the AWS Services to understand how they fit into the overall picture for the exam.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read: &lt;a href="https://docs.aws.amazon.com/whitepapers/latest/how-aws-pricing-works/how-aws-pricing-works.pdf#welcome"&gt;Overview of how pricing works&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rwybS_oj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1spef3rwtngaq55u8i8s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rwybS_oj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1spef3rwtngaq55u8i8s.png" alt="how pricing works" width="880" height="972"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read: &lt;a href="https://aws.amazon.com/premiumsupport/plans/?cp=sec&amp;amp;sec=prep"&gt;Compare AWS Support Plans&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9vHVJGBj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vdupmfcftn77ni12fz2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9vHVJGBj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vdupmfcftn77ni12fz2.png" alt="support plan" width="880" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 10: Optional: Review a AWS Cheat Sheets&lt;/p&gt;

&lt;p&gt;You may watch some helpful videos to consolidate your learning from the AWS cheat sheets provided by &lt;a href="https://tutorialsdojo.com/aws-cheat-sheets/"&gt;Tutorials Dojo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 11: Complete Practice Exams&lt;/p&gt;

&lt;p&gt;Tutorials Dojo: &lt;a href="https://tutorialsdojo.com/courses/aws-certified-cloud-practitioner-practice-exams/"&gt;https://tutorialsdojo.com/courses/aws-certified-cloud-practitioner-practice-exams/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 12: Join an AWS User Group near you that offer mentoring in AWS Certified Cloud Practitioner&lt;/p&gt;

&lt;p&gt;You can reach out and ask your local &lt;a href="https://aws.amazon.com/developer/community/usergroups/?intClick=dev-center-2021_main"&gt;AWS User Group&lt;/a&gt; if they have a current mentoring group for this certification so you may learn together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OknkS7vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puln38yzew0mm3wveo6o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OknkS7vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puln38yzew0mm3wveo6o.png" alt="Find a user group" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the moment, if you identify as female there is an &lt;a href="https://www.meetup.com/AWSUG-BuildHers/"&gt;AWS User Group BuildHers&lt;/a&gt; based in Manila that currently offer mentoring in AWS Cloud Practitioner certification on Sunday at 1pm Manila local time. You may contact the organizer if you are interested in joining this community to learn together online.&lt;/p&gt;

&lt;p&gt;The next Meetup is on the 28 November, please contact the organizer if you would like to join.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vO-6TbqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xvchzuzo10mnwg0jhx0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vO-6TbqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xvchzuzo10mnwg0jhx0.png" alt="Build Hers" width="880" height="612"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 13: Optional: Join She Builds Mentoring Program in 2022&lt;/p&gt;

&lt;p&gt;The 2021 AWS She Builds mentoring program commenced in September 2021(before I became an AWS Community Builder) and assisted women aged over 18 to study, receive mentoring, complete the AWS Cloud Practitioner certification and receive a free exam voucher sponsored by Accenture. Details of the program are explained by Code by Pratik &lt;a href="https://www.youtube.com/watch?v=RHpHDO311z4"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i2tXr9lD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mtaw6blb8v0ghlm1brm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i2tXr9lD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mtaw6blb8v0ghlm1brm.png" alt="code by pratik" width="880" height="663"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The AWS She Builds Summit 2021 was broadcast on Twitch on 19 November 2021 it featured the AWS She Builds Mentoring Program in 2021 which was organized by President Kim Bonilla and the She Builds training team led Donna Edwards and AWS mentors including Navi Kaur.&lt;/p&gt;

&lt;p&gt;You may watch on &lt;a href="https://www.twitch.tv/aws_events"&gt;Twitch&lt;/a&gt; the AWS She Builds Summit 2021 starting at 00:39 minutes to learn more about the mentoring program in the AWS Cloud Practitioner certification for women and how you may join in 2022.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xu0pbUU---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3tu0j963iahsc0uivu7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xu0pbUU---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3tu0j963iahsc0uivu7.png" alt="She Builds" width="880" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was a supportive global community of women in the 2021 cohort who received optional weekly webinars to support learning from the digital modules, access to the exam readinesss webinars and access to weekend mentoring online from the Australian based training team for the time zones AESD and IST on Saturday and Sunday. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank You
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SXsEFCNS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tizhn39jj5br4dlz1bd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SXsEFCNS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tizhn39jj5br4dlz1bd.gif" alt="Thank you" width="498" height="498"&gt;&lt;/a&gt;&lt;br&gt;
Thank you to the 2021 AWS SheBuilds program for Kim, Donna, Navi, AWS and Accenture for the AWS Cloud Practitioner training and mentorship.&lt;/p&gt;

&lt;p&gt;Step 14: Final tips for the exam day&lt;/p&gt;

&lt;p&gt;Ensure you are adequately rested for your exam on the weekend.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have one morning coffee if your exam is scheduled in the afternoon&lt;/li&gt;
&lt;li&gt;Test your computer by following the emailed instructions you receive from your online proctor&lt;/li&gt;
&lt;li&gt;Important: Allow extra time as you would at an airport to complete the check-in process at least 30-minutes before your exam time so that you are feeling confident and do not need to worry about any computer glitches&lt;/li&gt;
&lt;li&gt;You will use your cell-phone as part of the check-in process to take photos of your testing environment. Ensure that your phone is fully charged.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#final-words-of-encouragement"&gt;
  &lt;/a&gt;
  Final Words of Encouragement üòé
&lt;/h2&gt;

&lt;p&gt;Good luck with your certification. I know you've got this! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set aside a few hours a day to learn a new skill&lt;/li&gt;
&lt;li&gt;Build consistency&lt;/li&gt;
&lt;li&gt;Be comfortable with being uncomfortable&lt;/li&gt;
&lt;li&gt;It will all make sense eventually!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;"Don't worry if you're making waves just by being yourself. The moon does it all the time." ‚Äî Scott Stabile&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zoQX7Tp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1hqrdtvjpb8mymapj66.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zoQX7Tp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1hqrdtvjpb8mymapj66.jpg" alt="Never too late" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy learning until next time!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>cloud</category>
      <category>aws</category>
    </item>
    <item>
      <title>Ruby 3</title>
      <author>Shayan Holakouee</author>
      <pubDate>Sun, 21 Nov 2021 14:07:41 +0000</pubDate>
      <link>https://dev.to/shayanholakouee/ruby-3-1o2g</link>
      <guid>https://dev.to/shayanholakouee/ruby-3-1o2g</guid>
      <description>&lt;p&gt;Ruby 3 has been released. This major new version has goals of improving performance, concurrency and support for Typing. The headline improvement is the performance, with Yukihiro Matsumoto, aka Matz, the chief designer of Ruby, saying that Ruby 3 will be three times faster than Ruby 2.&lt;br&gt;
Ruby has gained popularity because, in addition to being fun to use, it is useful because of its mix of different programming styles ‚Äî functional, dynamic and object-oriented.&lt;br&gt;
Tests run using the Optcarrot benchmark, which measures single thread performance based on NES‚Äôs game emulation workload, Ruby 3 has shown the promised three times faster performance than Ruby 2.0.&lt;/p&gt;

&lt;p&gt;The performance is achieved by Ruby 3.0 when used in JIT mode. This is new in Ruby 3, and should provide performance improvements in limited workloads, such as games, AI, and other applications where the majority of the time is spent in calling a few methods many times. The developers say that while Ruby 3.0 has significantly decreased the size of JIT-ed code, it is still not ready for optimizing workloads like Rails, which often spend time on many methods and therefore suffer from i-cache misses. This will be exacerbated by JIT, so the performance will actually be worse. The developers say Ruby 3.1 will offer further improvements on this issue.&lt;br&gt;
Another area that has helped performance is the move to add better concurrency support. The new release adds experimental support for Ractor, as well as Async Fiber. Ractor is an Actor-model like concurrent abstraction that can provide a parallel execution feature without thread-safety concerns. This is achieved because ractors don‚Äôt share normal objects; communication between ractors is supported by exchanging messages.&lt;br&gt;
The experimental nature of Ractor means the specification and implementation may be changed in the future.&lt;br&gt;
Fiber Scheduler has also been introduced for intercepting blocking operations. This allows for lightweight concurrency without changing existing code.&lt;br&gt;
Other improvements add support for static typing. The developers have created a ‚Äúfoundational type signature language‚Äù called RBS, which is used to describe the types of Ruby programs. The idea is that RBS will support commonly seen patterns in Ruby programs and will allow developers to create advanced types including union types, method overloading, and generics. It also supports duck typing with interface types.&lt;br&gt;
Ruby 3.0 ships with the rbs gem, which allows parsing and processing type definitions written in RBS. The Ruby team says type checkers including TypeProf and other tools supporting RBS will understand Ruby programs much better with RBS definitions.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Responsive Navbar Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Sun, 21 Nov 2021 13:53:22 +0000</pubDate>
      <link>https://dev.to/nikhil27b/responsive-navbar-using-html-css-3aic</link>
      <guid>https://dev.to/nikhil27b/responsive-navbar-using-html-css-3aic</guid>
      <description>&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;How are you all I am writing this post after so long break. Today I Created a simple responsive header menu using HTML &amp;amp; CSS I hope you like this also comments about your thoughts. also For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you üôÇ!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/jOLyypp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>8 Programmer Life Lessons They Don‚Äôt Teach You At School</title>
      <author>python.land</author>
      <pubDate>Sun, 21 Nov 2021 13:31:37 +0000</pubDate>
      <link>https://dev.to/python_land/8-programmer-life-lessons-they-dont-teach-you-at-school-djp</link>
      <guid>https://dev.to/python_land/8-programmer-life-lessons-they-dont-teach-you-at-school-djp</guid>
      <description>&lt;p&gt;Some things you don‚Äôt learn at school. These lessons come right from the work floor; I learned them the hard way!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/pythonland/8-programmer-life-lessons-they-dont-teach-you-at-school-dc8049f3e9e8?sk=73ac18dc9052e8f1cfb85e548b1a8594"&gt;Read the full article for free on Medium using this link&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Day 44 of 100 Days of Code &amp; Scrum: Deadlines and Pressure</title>
      <author>Rammina</author>
      <pubDate>Sun, 21 Nov 2021 12:54:43 +0000</pubDate>
      <link>https://dev.to/rammina/day-44-of-100-days-of-code-scrum-deadlines-and-pressure-il0</link>
      <guid>https://dev.to/rammina/day-44-of-100-days-of-code-scrum-deadlines-and-pressure-il0</guid>
      <description>&lt;p&gt;Happy Sunday, everyone!&lt;/p&gt;

&lt;p&gt;I decided that I will focus on my website primarily for this week. I must create an output that I can deploy and show at the end of the week. I'm giving myself a deadline so that I'm forced to work the best that I can.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;Just like I do every weekend, I did my 6th Weekly Sprint Review and Retrospective, in which I went over what I've managed to do well, what my shortcomings were, and what I could do better in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;I set up my weekly Sprint Goals, which will mostly basic concern my &lt;strong&gt;company website's homepage&lt;/strong&gt;. The others are secondary goals, which I will work on for a little bit each day without compromising my main objective.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weekly-sprint-goals"&gt;
  &lt;/a&gt;
  Weekly Sprint Goals
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;finish my company website's homepage (and avoid getting distracted by more interesting projects).&lt;/li&gt;
&lt;li&gt;continue to learn Next.js and Typescript by using concepts while I build my website.&lt;/li&gt;
&lt;li&gt;continue studying for Professional Scrum Master I (PSM I) certification.&lt;/li&gt;
&lt;li&gt;continue networking, but allocate less time to this (coding is more important).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a great week, everyone!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/how-to-receive-emails-via-your-sites-contact-us-form-with-aws-ses-lambda-api-gateway/"&gt;How to Receive Emails from Your Site's "Contact Us" form Using AWS SES, Lambda, &amp;amp; API Gateway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app?utm_source=next-site&amp;amp;utm_medium=nav-cta&amp;amp;utm_campaign=next-website"&gt;Official Next.js tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html"&gt;The Typescript Handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h3&gt;

&lt;p&gt;Feel free to check me in other media and reach out to me!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 8 Docker Best Practices for using Docker in Production ‚úÖ</title>
      <author>Techworld with Nana</author>
      <pubDate>Sun, 21 Nov 2021 12:53:45 +0000</pubDate>
      <link>https://dev.to/techworld_with_nana/top-8-docker-best-practices-for-using-docker-in-production-1m39</link>
      <guid>https://dev.to/techworld_with_nana/top-8-docker-best-practices-for-using-docker-in-production-1m39</guid>
      <description>&lt;p&gt;Docker adoption rises constantly üìà and many are familiar with it, but not everyone is using Docker according to the best practices. üëÄ&lt;/p&gt;




&lt;p&gt;Before moving on, if you don't know what Docker is, you can learn everything you need to get started in this &lt;a href="https://youtu.be/3c-iBn73dDE"&gt;free Docker Crash Course üê≥&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-using-best-practices"&gt;
  &lt;/a&gt;
  Why using Best Practices? ü§∑‚Äç‚ôÄÔ∏è
&lt;/h2&gt;

&lt;p&gt;So, in my &lt;a href="https://youtu.be/8vXoMqWgbQQ"&gt;new video 'Top 8 Docker Production Best Practices'&lt;/a&gt; I want to show you 8 ways you can use Docker in a right way in your projects to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;‚úÖ &lt;strong&gt;improve security&lt;/strong&gt;,&lt;/li&gt;
&lt;li&gt;‚úÖ &lt;strong&gt;optimize&lt;/strong&gt; the &lt;strong&gt;image size&lt;/strong&gt;, &lt;/li&gt;
&lt;li&gt;‚úÖ take advantage of some of the useful Docker features &lt;/li&gt;
&lt;li&gt;‚úÖ and also write &lt;strong&gt;cleaner and more maintainable Dockerfiles&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#best-practice"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£ Best Practice
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Use an official and verified Docker image as a base image, whenever available.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's say you are developing a Node.js application and want to build and run it as a Docker image. &lt;/p&gt;

&lt;p&gt;Instead of taking a base operating system image and installing node.js, npm and whatever other tools you need for your application, use the official node image for your application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zc-ArYbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spd6rkqkwnitp2riio29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zc-ArYbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spd6rkqkwnitp2riio29.png" alt="1st best practice" width="880" height="497"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improvements:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cleaner Dockerfile&lt;/li&gt;
&lt;li&gt;Official and verified image, which is already built with the best practices&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#best-practice"&gt;
  &lt;/a&gt;
  2Ô∏è‚É£ Best Practice
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Use specific Docker image versions&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Okay, so we have selected the base image, but now when we build our applications image from this Dockerfile, it will always use the &lt;code&gt;latest&lt;/code&gt; tag of the node image.&lt;/p&gt;

&lt;p&gt;Now why is this a problem? ü§î&lt;br&gt;
‚ùå - you might get a different image version as in the previous build &lt;br&gt;
‚ùå - the new image version may break stuff&lt;br&gt;
‚ùå - &lt;code&gt;latest&lt;/code&gt; tag is unpredictable, causing unexpected behavior &lt;/p&gt;

&lt;p&gt;So instead of a random latest image tag, you want to fixate the version and just like you deploy your own application with a specific version you want to use the official image with a specific version. &lt;br&gt;
And the rule here is: &lt;strong&gt;the more specific the better&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vIWh6vcV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zikxyawtnrwk526xov6z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vIWh6vcV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zikxyawtnrwk526xov6z.png" alt="2nd best practice" width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improvements:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Transparency to know exactly what version of the base image you're using&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#best-practice"&gt;
  &lt;/a&gt;
  3Ô∏è‚É£ Best Practice
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Use Small-Sized Official Images&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When choosing a Node.js image, you will see there are actually multiple official images. Not only with different version numbers, but also with &lt;strong&gt;different operating system distributions&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zXYUDcn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4szjwytxzttkc4wovxz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXYUDcn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4szjwytxzttkc4wovxz.png" alt="Node image versions" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So the question is: Which one do you choose and why is it important? ü§∑üèª‚Äç‚ôÇÔ∏è&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Image Size&lt;/strong&gt;&lt;br&gt;
‚ùå  Well, if the image is based on a &lt;strong&gt;full-blown OS distribution&lt;/strong&gt; like Ubuntu or Centos, you will have a bunch of tools already packaged in the image. So the &lt;strong&gt;image size will be larger&lt;/strong&gt;, but you &lt;strong&gt;don't need most of these tools&lt;/strong&gt; in your application images.&lt;/p&gt;

&lt;p&gt;‚úÖ  In contrast having &lt;strong&gt;smaller images means you need less storage space&lt;/strong&gt; in image repository as well as on a deployment server and of course you can transfer the images faster when pulling or pushing them from the repository. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Security Issue&lt;/strong&gt;&lt;br&gt;
‚ùå  In addition to that, with lots of tools installed inside, you need to consider the security aspect. Because such base images usually contain &lt;a href="https://snyk.io/blog/opensourcesecurity-2020survey/"&gt;hundreds of known vulnerabilities&lt;/a&gt; and basically create a &lt;strong&gt;larger attack surface&lt;/strong&gt; to your application image.&lt;/p&gt;

&lt;p&gt;This way you basically end up introducing unnecessary security issues from the beginning to your image! üôâ&lt;/p&gt;

&lt;p&gt;‚úÖ  In comparison by using &lt;strong&gt;smaller images with leaner OS distributions&lt;/strong&gt;, which only bundle the necessary system&lt;br&gt;
tools and libraries, you're also minimizing the attack surface and making sure that you build &lt;strong&gt;more secure images&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So the best practice here would be to select an image with a specific version based on a leaner OS distribution like alpine for example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hNbFYYmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36oou4hn3wq55n14u9dz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hNbFYYmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36oou4hn3wq55n14u9dz.png" alt="3rd best practice" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alpine has everything you need to start your application in a container, but is much more lightweight. And for most of the images that you look on a Docker Hub, you will see a version tag with alpine distribution inside.&lt;/p&gt;

&lt;p&gt;It is one of the most common and popular base images for Docker containers.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#best-practice"&gt;
  &lt;/a&gt;
  4Ô∏è‚É£ Best Practice
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Optimize caching for image layers when building an image&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So what are image layers and what does caching and image layer mean? ü§î&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) What are Image Layers?&lt;/strong&gt;&lt;br&gt;
A Docker image is built based on a Dockerfile.&lt;br&gt;
And in a Dockerfile &lt;strong&gt;each command or instruction creates an image layer&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sxX5q4x3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmtb90pbzqygh0h86a10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sxX5q4x3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dmtb90pbzqygh0h86a10.png" alt="Docker Image Layers" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So when we use a base image of node alpine like in the above example it already has layers, because it was already built using its own Dockerfile. Plus, in our Dockerfile on top of that we have a couple of other commands that each will add a new layer to this image.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Now what about caching?&lt;/strong&gt;&lt;br&gt;
Each layer will get cached by Docker. üëç&lt;br&gt;
So when you rebuild your image, if your Dockerfile hasn't changed, Docker will just use the cached layers to build the image.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt; of cached image layers:&lt;br&gt;
‚úÖ  - Faster image building&lt;br&gt;
‚úÖ  - Faster pulling and pushing of new image versions: &lt;br&gt;
If I pull a new image version of the same application and let's say 2 new layers have been added in the new version: Only the newly added layers will be downloaded, the rest are already locally cached by Docker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Optimize the Caching&lt;/strong&gt;&lt;br&gt;
So to optimize the caching, you need to know that:&lt;br&gt;
Once a layer changes, &lt;strong&gt;all following or downstream layers have to be re-created as well&lt;/strong&gt;. In other words: when you change the contents of one line in the Dockerfile, caches of all the following lines or layers will be busted and invalidated. üò£&lt;/p&gt;

&lt;p&gt;So the rule here and the best practice is:&lt;br&gt;
&lt;strong&gt;Order your commands&lt;/strong&gt; in the Dockerfile &lt;strong&gt;from the least to the most frequently changing commands&lt;/strong&gt; to take advantage of caching and this way optimize how fast the image gets built. üöÄ&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#best-practice"&gt;
  &lt;/a&gt;
  5Ô∏è‚É£ Best Practice
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;.dockerignore&lt;/code&gt; file&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now usually when we build the image, we don't need everything we have in the project to run the application inside. We&lt;br&gt;
&lt;strong&gt;don't need the auto-generated folders&lt;/strong&gt;, like &lt;code&gt;targets&lt;/code&gt; or &lt;code&gt;build&lt;/code&gt; folder, we don't need the &lt;code&gt;readme&lt;/code&gt; file etc.&lt;/p&gt;

&lt;p&gt;So how do we exclude such content from ending up in our application image? ü§î&lt;br&gt;
üëâ Using a &lt;code&gt;.dockerignore&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;It's pretty straightforward. We basically just create this &lt;code&gt;.dockerignore&lt;/code&gt; file and &lt;strong&gt;list all the files and folders that we want to be ignored&lt;/strong&gt; and when building the image, Docker will look at the contents and ignore anything specified inside.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yAIQkTEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fso63260yg2o7sddcxa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yAIQkTEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fso63260yg2o7sddcxa.png" alt="5th best practice" width="880" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improvements:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduced image size&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#best-practice"&gt;
  &lt;/a&gt;
  6Ô∏è‚É£ Best Practice
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Make use of Multi-Stage Builds&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But now let's say there are some contents (like development, testing tools and libraries) in your project that you NEED for building the image - so during the&lt;br&gt;
build process - but you DON'T NEED them in the final image itself to run the application.&lt;/p&gt;

&lt;p&gt;If you keep these artifacts in your final image even though they're absolutely unnecessary for running the application, it will again result in an increased image size and increased attack surface. üßê&lt;/p&gt;

&lt;p&gt;So how do we &lt;strong&gt;separate the build stage from the runtime stage&lt;/strong&gt;.&lt;br&gt;
In other words, how do we exclude the build dependencies from the image, while still having them available while building the image? ü§∑‚Äç‚ôÄÔ∏è&lt;/p&gt;

&lt;p&gt;Well, for that you can use what's called &lt;strong&gt;multi-stage builds&lt;/strong&gt; üí°&lt;/p&gt;

&lt;p&gt;The multi-stage builds feature allows you to use multiple temporary images during the build process, but keep only&lt;br&gt;
the latest image as the final artifact:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qr2zxvmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trdfkkdl96x1tkj4ffkh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qr2zxvmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trdfkkdl96x1tkj4ffkh.png" alt="6th best practice" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So these previous steps (marked "1st" in the above picture) will be discarded.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improvements:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Separation of Build Tools and Dependencies from what's needed for runtime&lt;/li&gt;
&lt;li&gt;Less dependencies and reduced image size&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#best-practice"&gt;
  &lt;/a&gt;
  7Ô∏è‚É£ Best Practice
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Use the Least Privileged User&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, when we create this image and eventually run it as a container, &lt;strong&gt;which operating system user&lt;/strong&gt; will be used to start the application inside? ü§î&lt;br&gt;
By default, when a Dockerfile does not specify a user, it uses a &lt;strong&gt;root user&lt;/strong&gt;. üôâ  But in reality there is mostly no reason to run containers with root privileges.&lt;/p&gt;

&lt;p&gt;‚ùå  This basically introduces a security issue, because when container starts on the host it, will potentially have root access on the Docker host.&lt;br&gt;
So running an application inside the container with a root user will make it &lt;strong&gt;easier for an attacker to escalate privileges on the host&lt;/strong&gt; and basically get hold of the underlying host and its processes, not only the container itself ü§Ø  Especially if the application inside the container is vulnerable to exploitation.&lt;/p&gt;

&lt;p&gt;‚úÖ  To avoid this, the best practice is to simply &lt;strong&gt;create a dedicated user&lt;/strong&gt; and a dedicated group in the Docker image to run the application and also &lt;strong&gt;run the application&lt;/strong&gt; inside the container &lt;strong&gt;with that user&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AD-IE3a9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrjr4m1885u1yqbnsjik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AD-IE3a9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrjr4m1885u1yqbnsjik.png" alt="7th best practice" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use a directive called &lt;code&gt;USER&lt;/code&gt; with the username and then start the application conveniently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Some images already have a &lt;strong&gt;generic user&lt;/strong&gt; bundled in, which you can use. So you don't have to create a new one. For example the node.js image already bundles a generic user called &lt;code&gt;node&lt;/code&gt;, which you can simply use to run the application inside the container. üëç&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#best-practice"&gt;
  &lt;/a&gt;
  8Ô∏è‚É£ Best Practice
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Scan your Images for Security Vulnerabilities&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, how do you make sure and validate the image you build has a few or no security vulnerabilities? üßê&lt;/p&gt;

&lt;p&gt;So my final best practice is, once you build the image to &lt;strong&gt;scan it for security vulnerabilities&lt;/strong&gt; using the &lt;code&gt;docker scan&lt;/code&gt; command. üîç&lt;/p&gt;

&lt;p&gt;In the background Docker actually uses a service called snyk to do the vulnerability scanning of the images. The scan uses a database of vulnerabilities, which gets constantly updated. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example output&lt;/strong&gt; of &lt;code&gt;docker scan&lt;/code&gt; command:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kS-pa8yP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmwear5nj98iyfm63rik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kS-pa8yP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmwear5nj98iyfm63rik.png" alt="docker scan output" width="879" height="552"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You see: &lt;br&gt;
1) the &lt;strong&gt;type of vulnerability&lt;/strong&gt;, &lt;br&gt;
2) a &lt;strong&gt;URL for more information&lt;/strong&gt; &lt;br&gt;
3) but also what's very useful and interesting you see &lt;strong&gt;which version&lt;/strong&gt; of the relevant library actually &lt;strong&gt;fixes that vulnerability&lt;/strong&gt;. So you can update your libraries to get rid of these issues. üëç&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Automate the scanning üöÄ&lt;/strong&gt;&lt;br&gt;
In addition to scanning your images manually with &lt;code&gt;docker scan&lt;/code&gt; command on a CLI, you can also &lt;strong&gt;configure Docker Hub&lt;/strong&gt; to &lt;strong&gt;scan the images automatically&lt;/strong&gt;, when they get pushed to the repository. And of course you can &lt;strong&gt;integrate&lt;/strong&gt; this check in your &lt;strong&gt;CI/CD pipeline&lt;/strong&gt; when building your Docker images.&lt;/p&gt;



&lt;p&gt;So these are &lt;strong&gt;8 production best practices that you can apply today to make your Docker images leaner and more secure&lt;/strong&gt;! üöÄüòä  Hope it is helpful for some of you! Of course there are many more best practices related to Docker, but I think applying these will already give you great results when using Docker in production.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do you know some other best practices, which you think are&lt;br&gt;
super important and have to be mentioned? &lt;br&gt;
Please share them in the comments for others üôå üëç&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The full video is available here: ü§ì&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8vXoMqWgbQQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üòç for more content:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.instagram.com/techworld_with_nana/"&gt;Instagram - Posting many behind-the-scene stuff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/groups/techworldwithnana"&gt;Private FB group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//linkedin.com/in/nana-janashia"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Njuchi_"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCdngmbVKX1Tgre699-XLlUA?sub_confirmation=1"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How To Efficiently Update React State For Multiple DOM Inputs Using the useReducer() Hook</title>
      <author>Kyle Williams</author>
      <pubDate>Sun, 21 Nov 2021 12:48:41 +0000</pubDate>
      <link>https://dev.to/kylewcode/how-to-efficiently-update-react-state-for-multiple-dom-inputs-using-the-usereducer-hook-2e8d</link>
      <guid>https://dev.to/kylewcode/how-to-efficiently-update-react-state-for-multiple-dom-inputs-using-the-usereducer-hook-2e8d</guid>
      <description>&lt;p&gt;This article assumes some basic familiarity with the &lt;code&gt;useReducer()&lt;/code&gt; hook. Examples are using &lt;code&gt;react-bootstrap&lt;/code&gt; but you don't need to be using it in your own project for this to work.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#efficient-vs-inefficient"&gt;
  &lt;/a&gt;
  Efficient VS Inefficient
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pli0D1M5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkbvqdtwsrbtmmmu0vyp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pli0D1M5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkbvqdtwsrbtmmmu0vyp.png" alt="HTML form with inputs for name and address" width="880" height="582"&gt;&lt;/a&gt;&lt;br&gt;
Any DOM structure of HTML inputs would do, but let's say for example you have an HTML form such as the one above. You want React to update state for every change of the input by the user.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#inefficient"&gt;
  &lt;/a&gt;
  Inefficient
&lt;/h2&gt;

&lt;p&gt;Assuming this state object...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const initState = {
    firstName: "",
    lastName: "",
    street: "",
    aptSuite: "",
    city: "",
    stateName: "",
    zipcode: "",
    date: "",
    title: "",
    status: "fillingOutForm",
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming a form input element structured like this...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Form.Label htmlFor="user-first-name"&amp;gt;First name&amp;lt;/Form.Label&amp;gt;
  &amp;lt;Form.Control
    type="text"
    name="FIRSTNAME" // Used for the action type
    id="user-first-name"
    value={formState.firstName} // formState from useReducer
    required
    onChange={(e) =&amp;gt; {
      const name = e.target.name;
      const value = e.target.value;
      dispatch({type: "CHANGE_" + name, payload: value });
    }}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could have a separate action type within the reducer function for each DOM input such as...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;switch (type) {
  case CHANGE_FIRSTNAME:
    // Return modified state.
  case CHANGE_LASTNAME:
    // Return modified state.
  case CHANGE_STREET:
    // Return modified state.
  default:
    return state;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is inefficient however.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#efficient"&gt;
  &lt;/a&gt;
  Efficient
&lt;/h2&gt;

&lt;p&gt;The solution to this inefficiency is to abstract outwards in the reducer function.&lt;/p&gt;

&lt;p&gt;Given this &lt;code&gt;onChange&lt;/code&gt; handler...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// For example, the DOM input attribute name is 'firstName'
onChange={(e) =&amp;gt; {
  const field = e.target.name;
  const value = e.target.value;

  dispatch({
    type: "CHANGE_INPUT",
    payload: {
      value,
      field,
    },
  });
}}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...the reducer function could contain this...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  function formReducer(state, action) {
    const { type, payload } = action;

    switch (type) {
      case "CHANGE_INPUT":
        return { ...state, [payload.field]: payload.value };
      default:
        return state;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Normally one would have more cases in the reducer function but this example is simplified for educational purposes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the code above, a computed property name is used to take the attribute name of the element ('firstName') and update state in the right place. In this case...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const initState = {
  firstName: "Whatever was type in by user",
  // Rest of state properties...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#gotchas"&gt;
  &lt;/a&gt;
  Gotchas
&lt;/h1&gt;

&lt;p&gt;Remember how to access the data needed using computed property names. You need to wrap the dot notation object accessor for the action payload object in &lt;strong&gt;brackets&lt;/strong&gt;.&lt;br&gt;
&lt;code&gt;return { ...state, [payload.field]: payload.value };&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#further-cleaning"&gt;
  &lt;/a&gt;
  Further Cleaning
&lt;/h1&gt;

&lt;p&gt;Optimization of code length can be achieved by moving code from the &lt;code&gt;onChange()&lt;/code&gt; handler to its own function. It might even be more descriptive to change the name to something like &lt;code&gt;updateStateWithInputValue&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const changeDOMInput = (e) =&amp;gt; {
  const field = e.target.name;
  const value = e.target.value;
  dispatch({
    type: "CHANGE_INPUT",
    payload: {
      value,
      field,
    },
  });
};

onChange={(e) =&amp;gt; {
  changeDOMInput(e);
}}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope this helps!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect With Me!
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.kylewcode.com/"&gt;www.kylewcode.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/kylewcode"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/85kylewilliams/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/kylewcode"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Backend Skillset Roadmap</title>
      <author>Samarth Gupta</author>
      <pubDate>Sun, 21 Nov 2021 12:43:13 +0000</pubDate>
      <link>https://dev.to/livesamarthgupta/backend-skillset-roadmap-4d5i</link>
      <guid>https://dev.to/livesamarthgupta/backend-skillset-roadmap-4d5i</guid>
      <description>&lt;h1&gt;
  &lt;a href="#hey-there"&gt;
  &lt;/a&gt;
  Hey There,
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Are you a Java developer, or a Python developer, or maybe Golang developer?&lt;/strong&gt;&lt;br&gt;
Well, whoever you are, we all face the same set of problems in our backend, just our language of choice is different in solving those problems. But one may think how to grow, not just in particular technology but as an engineer in a whole. So I present the &lt;a href="https://whimsical.com/backend-dev-3UYBHbZzFYjmZbPToLxJje"&gt;Backend Skillset Roadmap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vfs4lYTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2j98mcv95xlnq07wczpm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vfs4lYTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2j98mcv95xlnq07wczpm.png" alt="Image description" width="880" height="759"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This roadmap is language agnostic and could be thought of as a checklist instead of a roadmap. You don't need to learn things serially, one can progress through each parallelly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P.S: Don't be Jack of all and Master of none.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
      <category>bestofdev</category>
      <category>devjournal</category>
      <category>programming</category>
    </item>
    <item>
      <title>The development cycle, and how I follow it</title>
      <author>Piyush Raj</author>
      <pubDate>Sun, 21 Nov 2021 12:42:20 +0000</pubDate>
      <link>https://dev.to/piyush181/the-development-cycle-and-how-i-follow-it-2h5</link>
      <guid>https://dev.to/piyush181/the-development-cycle-and-how-i-follow-it-2h5</guid>
      <description>&lt;p&gt;Hello! I am Piyush Raj and today I will be telling you about the development cycle and how I personally follow it. In this post, I will have the different stages in software development and at the end of each paragraph, I will show you what I do at that particular stage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preproduction-where-the-pot-of-ideas-boil"&gt;
  &lt;/a&gt;
  Pre-Production: Where the pot of ideas boil
&lt;/h2&gt;

&lt;p&gt;As the name suggests, pre-production is that stage before creating the final product. This is the stage where the team comes together to plan out how the product will look like through the use of designs, mind maps, etc.&lt;/p&gt;

&lt;p&gt;In this stage, I usually like to make a &lt;a href="https://milanote.com/"&gt;Milanote&lt;/a&gt; board and put design specifications(or a checklist that the final product must/should have) and based on that I(or my team if applicable) make a visual design of the final product using it. I like to use Milanote because it has many tools that help me put my ideas down in a flowing way that anyone can understand and helps me to plan in an efficient way. I also like to use MS Paint and Gimp to create any visual designs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#production-where-the-ideas-are-cooked-into-finished-products"&gt;
  &lt;/a&gt;
  Production: Where the ideas are cooked into finished products
&lt;/h2&gt;

&lt;p&gt;This is probably the most exciting(and my favourite) part of the development cycle. This is where you(and your team) come together to make the final product based on all of the planning you did in the pre-production stage.&lt;/p&gt;

&lt;p&gt;As I said earlier this is my favourite part of the development cycle. I usually like to use &lt;a href="https://www.github.com"&gt;GitHub&lt;/a&gt; as my source control tool for my projects and to collaborate on projects as well. As for what tools I use, it's probably what you'd expect, &lt;a href="https://code.visualstudio.com"&gt;VS Code&lt;/a&gt; for creating web projects and the &lt;a href="https://unity.com/"&gt;Unity Engine&lt;/a&gt; to create video games.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#postproduction"&gt;
  &lt;/a&gt;
  Post-Production
&lt;/h2&gt;

&lt;p&gt;This is kind of what most people would refer to as the "boring" or not so fun stage. This is the stage where the final product is tested for any issues. This is done mainly through AB testing and other forms of testing. This is also the stage where apps are given constant updates after production. This stage mainly depends on user feedback and results from the AB tests.&lt;/p&gt;

&lt;p&gt;I'll be very honest, I haven't really been part of a post-production stage but I do know that we run beta tests and roll them out to a few users if it's an app and we usually ask for opinions if the final product is a website. We then work accordingly based on the feedbacks we receive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So, I guess that was the end of this article and I would like to thank you for taking your time to read this article. I hope you enjoyed and hope you learnt something new!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>discuss</category>
      <category>productivity</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>My Coding Bootcamp Odyssey - Weeks 2-4</title>
      <author>Rich Keyzor</author>
      <pubDate>Sun, 21 Nov 2021 12:39:40 +0000</pubDate>
      <link>https://dev.to/webdevrich/my-coding-bootcamp-odyssey-weeks-2-4-3jej</link>
      <guid>https://dev.to/webdevrich/my-coding-bootcamp-odyssey-weeks-2-4-3jej</guid>
      <description>&lt;p&gt;&lt;strong&gt;Odyssey&lt;/strong&gt; : &lt;em&gt;noun&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a series of experiences that give knowledge or understanding to someone&lt;/p&gt;

&lt;p&gt;an intellectual or spiritual quest&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hi folks, thanks for tuning in! This is a kinda catch-up post as I have been a bad boy and not blogged weekly as I intended - blame it on the mind-blowing-bending stuff we have learned ü§Ø and the need to rest my brain!&lt;/p&gt;

&lt;p&gt;I am now calling this series my odyssey because that better encapsulates the path I am on - a bit more epic that a mere functional journey, I think.&lt;/p&gt;

&lt;p&gt;So to orient ourselves this is about weeks 2-4 of my odyssey, following week 1 which was an introduction week. This is called the fundamentals block which covers the building blocks of JavaScript which we need to understand to progress to more higher-level and useful ways of using JavaScript. I'm a big fan of fundamentals-first learning.&lt;/p&gt;

&lt;p&gt;I'm going to list the topics we have covered and give them a rating based on how well I think I grasped the topic:&lt;/p&gt;

&lt;p&gt;ü§Ø I get what it is about but would struggle to teach it or give a good example&lt;/p&gt;

&lt;p&gt;üòê I get it and could probably explain it&lt;/p&gt;

&lt;p&gt;ü§ì Love it! totally makes sense&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here we go:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Testing with Jest ü§ì&lt;/li&gt;
&lt;li&gt;Array Methods ü§ì&lt;/li&gt;
&lt;li&gt;Higher order functions üòê&lt;/li&gt;
&lt;li&gt;Scope ü§ì&lt;/li&gt;
&lt;li&gt;Function hoisting üòê&lt;/li&gt;
&lt;li&gt;Difference between a variable's value versus its reference ü§ì&lt;/li&gt;
&lt;li&gt;'Pure functions' üòê&lt;/li&gt;
&lt;li&gt;Testing side effects of functions with no return value with jest mock functions ü§Ø&lt;/li&gt;
&lt;li&gt;Closure üòê&lt;/li&gt;
&lt;li&gt;Destructuring ü§ì&lt;/li&gt;
&lt;li&gt;Higher order functions&lt;/li&gt;
&lt;li&gt;Recursion ü§Ø&lt;/li&gt;
&lt;li&gt;Object Orientated Programming ü§ì&lt;/li&gt;
&lt;li&gt;Factory functions and &lt;code&gt;this&lt;/code&gt; keyword ü§ì&lt;/li&gt;
&lt;li&gt;Constructor functions and instance methods ü§ì&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Class&lt;/code&gt; syntax ü§ì&lt;/li&gt;
&lt;li&gt;Callback functions üòê&lt;/li&gt;
&lt;li&gt;HTTP requests with Axios ü§ì&lt;/li&gt;
&lt;li&gt;Promises and .then() and .catch() üòê&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wow! what a list - we covered so much in 3 weeks. It was not all plain sailing but we will be getting a lot more practice so I am confident the majority will sink in, in time.&lt;/p&gt;

&lt;p&gt;Bring on the back end!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to use celery with flask</title>
      <author>Salem Olorundareüë®‚Äçüíª</author>
      <pubDate>Sun, 21 Nov 2021 12:30:08 +0000</pubDate>
      <link>https://dev.to/itz_salemm/how-to-use-celery-with-flask-2k1m</link>
      <guid>https://dev.to/itz_salemm/how-to-use-celery-with-flask-2k1m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Have you ever come across programs or task that takes a lot of time to process or give an actual output? Tasks such as sending emails and uploading data over the Internet takes time to process which can slow down your application‚Äôs workflow. These task should be run separately from other tasks.&lt;/p&gt;

&lt;p&gt;Your application should be able to process with these task in the background and continue with other tasks. After these task have processed and the result is ready, then it can be served to the user.&lt;/p&gt;

&lt;p&gt;I will be introducing you to setting up and configuration of celery and Redis in a flask project which handles async function or tasks like this. We would also take a look at the application of celery in real time with build and email sender app. Remember that these task takes time.&lt;/p&gt;

&lt;p&gt;We would be making our email sender run as a background task.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;This tutorial assumes that you already know about the basics of Python and Flask and also assumes that you have python and Flask framework set up on your system or machine. You must also have the very least and basic understanding of HTML to build out email forms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-task-queue"&gt;
  &lt;/a&gt;
  What is a Task Queue?
&lt;/h2&gt;

&lt;p&gt;A task queue is a system that distributes task that needs to be complete as a background without interfering with the applications request and response cycle.&lt;/p&gt;

&lt;p&gt;Task Queues makes Assigning work that slows down application processes while running easier. Intensive application can be handle by software applications like this in the background while users still interacts with the website and carry on with other activities.&lt;/p&gt;

&lt;p&gt;This ensures that the user's engagement is consistent, timely, and unaffected by the workload.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-celery"&gt;
  &lt;/a&gt;
  What is Celery?
&lt;/h2&gt;

&lt;p&gt;Celery is a Python task queue that allows task to run asynchronously with web applications without disturbing the application‚Äôs request response cycle.&lt;/p&gt;

&lt;p&gt;Celery is highly scalable, which is one of the several reasons why it is being used for background work and also allowing new workers to be dispatched on-demand to handle increasing workload or traffic. &lt;/p&gt;

&lt;p&gt;With Celery being a well supported project and also well documented, Celery still has a thriving user community, though it is still under development.&lt;/p&gt;

&lt;p&gt;Celery is also easy to integrate into various web frameworks, with most of them providing libraries to assist with this. Celery can also interface with several other message brokers hence, its thriving community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-asynchronous-task"&gt;
  &lt;/a&gt;
  What is an Asynchronous Task?
&lt;/h2&gt;

&lt;p&gt;An asynchronous task is simply a function that runs behind every other process running on your app. This kind of function, when called, does not affect the normal flow of the application.&lt;/p&gt;

&lt;p&gt;With asynchronous operations, you can switch to a new task before the previous one is complete. By using asynchronous programming, you can handle many requests at once, accomplishing more in a shorter amount of time. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation-and-configuration-for-celery-on-flask"&gt;
  &lt;/a&gt;
  Installation and Configuration for Celery on Flask
&lt;/h2&gt;

&lt;p&gt;Running Celery requires the use of a broker. Redis is the most well-known of the brokers.&lt;/p&gt;

&lt;p&gt;For sending and receiving messages, Celery requires the use of message broker, such as&lt;br&gt;
‚¶Å RabbitMQ&lt;br&gt;
‚¶Å Redis&lt;br&gt;
‚¶Å Amazon SQS&lt;/p&gt;

&lt;p&gt;Note: Message brokers are programs built to aids the communication between services when sending information from both ends.&lt;/p&gt;

&lt;p&gt;We would be making use of the Redis server in the tutorial.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-flask-server"&gt;
  &lt;/a&gt;
  Creating a Flask server
&lt;/h2&gt;

&lt;p&gt;Creating a Flask server is easy. Navigate to the folder where you want your server created. Create a new python file and give it a name, in our case celeryapp.py&lt;br&gt;
And add this simple code to your python script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's test our server to make sure it's working.&lt;br&gt;
To start our server, run the following commands in your terminal:&lt;br&gt;
python celeryapp.py&lt;/p&gt;

&lt;p&gt;If you have followed the article correctly, your result should look simple to the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vj51U99N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_DC6382D20790F0CBCB254B1B53649C4EE0725D6299C9DF0C4B476627695C1870_1636643567417_flask_server.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vj51U99N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_DC6382D20790F0CBCB254B1B53649C4EE0725D6299C9DF0C4B476627695C1870_1636643567417_flask_server.png" alt="Running Redis Server" width="804" height="260"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#communicating-between-celery-and-flask"&gt;
  &lt;/a&gt;
  Communicating between Celery and Flask
&lt;/h2&gt;

&lt;p&gt;Now that we have created our server, we need to connect Celery with our flask application. To do this, update your celeryapp.py file to look like this below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="c1"&gt;#imports
&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;

    &lt;span class="c1"&gt;#creates a Flask object
&lt;/span&gt;    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;#Configure the redis server
&lt;/span&gt;    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'CELERY_BROKER_URL'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'redis://localhost:6379/0'&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'CELERY_RESULT_BACKEND'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'redis://localhost:6379/0'&lt;/span&gt;

    &lt;span class="c1"&gt;#creates a Celery object
&lt;/span&gt;    &lt;span class="n"&gt;celery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;broker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'CELERY_BROKER_URL'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Celery is initialized by creating an object of class Celery with the application name and the connection to the message broker URL which is set to CELERY_BROKER_URL as key in the app.config. If you run something other than Redis or have the broker on a different machine, you will need to change the URL accordingly.&lt;/p&gt;

&lt;p&gt;it‚Äôs always best to add additional configuration through celery.conf.update() for Celery. Though it is not a requirement,  the CELERY_RESULT_BACKEND is only necessary to  store status and results from tasks in Celery.&lt;/p&gt;

&lt;p&gt;The function that would run as a background task is just a normal function with has the celery.task decorator. With just this decorator, the function would always run in the back ground. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;async_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#Async task
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just  like any other function,  to execute our celery task, it needs to be invoke, To invoke the function, add the following code to your celeryapp.py file.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; `async_function(10, 30)`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#sending-an-asynchronous-email-with-celery"&gt;
  &lt;/a&gt;
  Sending an Asynchronous Email with Celery.
&lt;/h2&gt;

&lt;p&gt;Now, let's see how Celery works in the real world. Let's apply Celery in sending an email with our flask application. First, we need to build out our email form to let users send emails. Here is the HTML template to build the form.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Flask&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Sending&lt;/span&gt; &lt;span class="n"&gt;Asynchronous&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;get_flashed_messages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"color: red;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endfor&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Send&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{{ email }}"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Send"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is just a regular HTML syntax with the ability to show flask messages from Flask. Hopefully, you should be able to get around with it.&lt;/p&gt;

&lt;p&gt;Note: The code above is the index.html file.&lt;/p&gt;

&lt;p&gt;To send Emails, we would make use of the Flask-Mail extension.&lt;br&gt;
Flask-Mail requires some configuration, including information about the email server that it will use to send emails. &lt;/p&gt;

&lt;p&gt;Add the following code to your celeryapp.py app to configure your Email sender:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Mail&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'MAIL_SERVER'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'smtp.googlemail.com'&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'MAIL_PORT'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;587&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'MAIL_USE_TLS'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'MAIL_USERNAME'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'MAIL_USERNAME'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'MAIL_PASSWORD'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'MAIL_PASSWORD'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'MAIL_DEFAULT_SENDER'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'flask@example.com'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: For this to work, make sure you have saved your email and password to an environment variables. For security reasons and easy accessibility my password and email are stored in an environment variables.&lt;/p&gt;

&lt;p&gt;Since we have a single route in this app, we created a route index alone to cater for it. Update your celeryapp.py file with the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;
    &lt;span class="c1"&gt;# sends this content
&lt;/span&gt;    &lt;span class="n"&gt;email_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'subject'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Testing Celery with Flask'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'to'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'body'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Testing background task with Celery'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'submit'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'Send'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# sends the email content to the backgraound function
&lt;/span&gt;        &lt;span class="n"&gt;send_email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email_msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Sending email to {0}'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'No Email sent'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above shows a function, which gets the input from our html form and saves it in a session, for easier accessibility. &lt;/p&gt;

&lt;p&gt;This function checks for events on the submit button and  send_email after the submit button is clicked.  The email_msg contains the subject, recipient‚Äôs email address, and the body of the message being sent.&lt;/p&gt;

&lt;p&gt;To allow users know what is going in the background, a flash message is displayed when the email is being submitted.&lt;/p&gt;

&lt;p&gt;Note: We saved the user's value in the text field in the session to remember it after the page reloads.&lt;/p&gt;

&lt;p&gt;The last piece of this application is the asynchronous task that gets the job done when a user submits the email form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email_msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#Async function to send an email with Flask-Mail
&lt;/span&gt;    &lt;span class="n"&gt;msg_sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email_msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'subject'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;email_sender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'MAIL_DEFAULT_SENDER'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;recipient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;email_msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'to'&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
    &lt;span class="n"&gt;msg_sub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email_msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'body'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg_sub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As said earlier, this task is decorated with celery.task to make it run in the background.&lt;/p&gt;

&lt;p&gt;The function creates a Message object from Flask-Mail using the email data dictionary. For Flask-Mail to run, it must build an application context before calling the send() method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Celery more than a few extra steps beyond simply sending a job to a background thread, but the benefits in terms of flexibility and scalability are hard to ignore.&lt;/p&gt;

&lt;p&gt;Sending a scheduled task is easier done using celery than any other means of running scheduled task. Imagine you want to perform a  task daily, In this case, Celery can be used to run programs in the background with any necessarily human triggered.&lt;/p&gt;

&lt;p&gt;Although Celery is used in most cases for long running task, it can also be used to connect to third party APIs. As soon as data is gotten back from the API in your celery task, it is then served to the user. &lt;/p&gt;

</description>
      <category>python</category>
      <category>flask</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>SMS Bomber App - Flutter</title>
      <author>Dev Nirwal</author>
      <pubDate>Sun, 21 Nov 2021 12:26:09 +0000</pubDate>
      <link>https://dev.to/devn913/sms-bomber-app-flutter-2lp7</link>
      <guid>https://dev.to/devn913/sms-bomber-app-flutter-2lp7</guid>
      <description>&lt;p&gt;Note:- This app is only for educational purpose only. Please don't abuse the app or the API. Use it for fun not for revenge.&lt;/p&gt;

&lt;p&gt;About this app:-  This is one of my small project to prank your friends which send bulk sms in a short period of time. Based on Flutter and Dart and for back-end I have used &lt;a href="https://github.com/devn913/bomber_api"&gt;https://github.com/devn913/bomber_api&lt;/a&gt; which is hosted on free Heroku tier.&lt;/p&gt;

&lt;p&gt;I am not a Flutter developer so if you have any ideas how to make this app better, I am open to contribution make sure to Fork it star it and follow me if you liked this project.&lt;/p&gt;

&lt;p&gt;If you want me to add more API contact me by mail - &lt;a href="mailto:devnirwal16@gmail.com"&gt;devnirwal16@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to add more API yourself use this repo - &lt;a href="https://github.com/devn913/bomber_api"&gt;https://github.com/devn913/bomber_api&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Project GitHub Link - &lt;a href="https://github.com/Devn913/bomber_app"&gt;https://github.com/Devn913/bomber_app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;APK link  - &lt;a href="https://github.com/Devn913/bomber_app/blob/main/app-release.apk"&gt;https://github.com/Devn913/bomber_app/blob/main/app-release.apk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My GitHub Profile &lt;a href="https://github.com/Devn913"&gt;https://github.com/Devn913&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Virus Total - &lt;a href="https://www.virustotal.com/gui/file/5f1c9a5eddddd14da717d0681d892665e946517f0b18c5a5ac7e6e2da4d6ffc1?nocache=1"&gt;https://www.virustotal.com/gui/file/5f1c9a5eddddd14da717d0681d892665e946517f0b18c5a5ac7e6e2da4d6ffc1?nocache=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Star it, Follow me if you liked this project.&lt;/p&gt;

&lt;p&gt;Contact me if you are facing any issues.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>python</category>
      <category>android</category>
    </item>
  </channel>
</rss>
