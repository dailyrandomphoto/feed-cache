<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to cancel an HTTP fetch request</title>
      <author>saransh kataria</author>
      <pubDate>Wed, 20 Jan 2021 18:32:52 +0000</pubDate>
      <link>https://dev.to/saranshk/how-to-cancel-an-http-fetch-request-3p1h</link>
      <guid>https://dev.to/saranshk/how-to-cancel-an-http-fetch-request-3p1h</guid>
      <description>&lt;p&gt;JavaScript promises have been a huge catalyst for asynchronous coding in the language. They have vastly improved the performance and experience for web development. One shortcoming of native promises has been that we were not able to cancel an HTTP fetch request once it was initiated. But now there is a way to do so.&lt;/p&gt;

&lt;p&gt;A new controller known as AbortController has been added to the DOM Standard that allows us to use it as a signal to cancel an HTTP fetch request. It makes use of an AbortSignal property to do so.&lt;/p&gt;

&lt;p&gt;It was added in 2017 and is supported in most of the browsers (except IE, obviously). But now that IE support is ending soon, it might be that big of a deal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-to-cancel-an-http-fetch-request" class="anchor"&gt;
  &lt;/a&gt;
  Why do we need to cancel an HTTP fetch request?
&lt;/h2&gt;

&lt;p&gt;Before we get into the how-to part, let us first see why we would need to cancel an HTTP fetch request.&lt;/p&gt;

&lt;p&gt;When we have an application that is composed of multiple components that can be dynamically added and removed to the DOM tree, many of the components are bound to make HTTP requests. And it might so happen that one of these components gets unmounted before the fetch request is completed. This could be fairly common in slow network conditions or if the user jumps is jumping around pages.&lt;/p&gt;

&lt;p&gt;Because the fetch request is asynchronous, it will keep executing in the background and this might lead to some bugs when it gets completed, if not handled properly.&lt;/p&gt;

&lt;p&gt;The default fetch timeout is 300 seconds for Chrome and 90 seconds for Firefox. These are way more than what a user would want to wait in case of unreliable network conditions. Therefore we definitely would want to implement our own way to cancel an HTTP fetch request, if needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#abortcontroller-and-abortsignal" class="anchor"&gt;
  &lt;/a&gt;
  AbortController and AbortSignal
&lt;/h2&gt;

&lt;p&gt;The AbortController and AbortSignal API are provided by the &lt;a href="https://dom.spec.whatwg.org/#aborting-ongoing-activities"&gt;DOM standard&lt;/a&gt;, and have been kept generic so that they can be used by other web standards. To declare a controller:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const controller = new AbortController();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;and for the signal:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const signal = controller.signal;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The controller only has one abort method. And when that is invoked, the signal gets notified.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;controller.abort();
signal.addEventListener('abort', () =&amp;gt; {
  console.log(signal.aborted); // true
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#how-to-abort-an-http-fetch-request" class="anchor"&gt;
  &lt;/a&gt;
  How to abort an HTTP fetch request?
&lt;/h2&gt;

&lt;p&gt;The fetch API itself does not allow programmatic cancellation of requests. But it can take in AbortSignal as a parameter. And then we can abort the fetch request after a specific time duration if we wanted to.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const controller = new AbortController();
const signal = controller.signal;

fetch(url, { signal })
  .catch(err =&amp;gt; {
    if (err.name === 'AbortError') {
      console.log('Fetch was aborted');
    }
  });


// Abort the request after 4s
// aborts the fetch with 'AbortError'
setTimeout(() =&amp;gt; {
  controller.abort();
}, 4000);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We can even create our own wrapper of a fetch with timeout call if we wanted to:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function cancellableFetch(url, data, timeout = 4000) {
  const controller = new AbortController();
  const timer = setTimeout(() =&amp;gt; controller.abort(), timeout);

  const response = await fetch(url, {
    ...data,
    signal: controller.signal  
  });
  clearTimeout(timer);

  return response;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;A few things to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you pass in the same signal to multiple fetch calls, it cancels all requests with that signal on abort. So we can use it if there are multiple requests that need to be aborted if one fails.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since controllers are not reusable, if we do not want to abort all fetches when we cancel an HTTP fetch request, we need to create a new instance of the controller to all of them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The request gets aborted only at the client end. The server might still process it though the client will not receive the response.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We could have used Promise.race to achieve this functionality as well but that solution would have left the request hanging instead of aborting the request. It would have continued to consume bandwidth in the background.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that is how you can cancel an HTTP fetch request after a timeout, or abort it programmatically. I am excited about being able to do so and hope you are too. Let me know in the comments section if you plan on using this.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://www.wisdomgeek.com/development/web-development/javascript/how-to-cancel-http-fetch-request/"&gt;https://www.wisdomgeek.com&lt;/a&gt; on January 19, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Angular Templates — From Start to Source</title>
      <author>Corbin Crutchley</author>
      <pubDate>Wed, 20 Jan 2021 17:46:21 +0000</pubDate>
      <link>https://dev.to/this-is-angular/angular-templates-from-start-to-source-1db1</link>
      <guid>https://dev.to/this-is-angular/angular-templates-from-start-to-source-1db1</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article was written with the idea that the reader is at least somewhat familiar with the introductory concepts of Angular. As a result, if you haven't done so already, it is highly suggested that you make your way through the fantastic &lt;a href="https://angular.io/start"&gt;Angular getting started guide&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the core concepts to the Angular framework is the idea of templates. Templates allow developers to create embedded views of UI from other locations.&lt;/p&gt;

&lt;p&gt;These templates not only power many of Angular's baseline features, but are extremely versatile in their capabilities and serve as powerful tools to leverage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Templates can be passed and called manually in a similar way to functions.&lt;/li&gt;
&lt;li&gt;You can leverage a set of APIs built into these templates to pass and manipulate data from one template to another during the render process&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While this article is far from a comprehensive list of all template related APIs, I want to walk through as much as I can to help you understand how templates work in Angular, what you're able to do with them, and loosely how they're used within Angular itself. Some of the APIs we'll be going through include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ng-template&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TemplateRef&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EmbeddedViewRef&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ViewContent&lt;/code&gt;/&lt;code&gt;ViewChildren&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ViewContainerRef&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createEmbeddedView&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://angular.io/guide/structural-directives#asterisk"&gt;Structural Directives&lt;/a&gt; (such as &lt;code&gt;*ngIf&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the end of this article, you'll not only have read some of Angular's source code (&lt;a href="https://github.com/angular/angular/commit/e1f6d1538784eb87f7497bef27e3c313184c2d30"&gt;as of 8.0.1&lt;/a&gt;), but you should have a better understanding of how to implement many of these tools and how some of the APIs you use daily work under-the-hood.&lt;/p&gt;

&lt;p&gt;It's going to be a long article, so please feel free to take breaks, grab a drink to enjoy while reading, pause to tinker with code, or anything in-between. Feedback is always welcomed and appreciated.&lt;/p&gt;

&lt;p&gt;Sound like a fun time? Let's goooo! 🏃🌈&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The contents of this post was also presented in a talk under the same name. You can &lt;a href="//./slides.pptx"&gt;find the slides here&lt;/a&gt; or a live recording of that talk given by the post's author &lt;a href="https://www.youtube.com/watch?v=7AilTMFPxqQ"&gt;on our YouTube channel&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#introduction-to-templates" class="anchor"&gt;
  &lt;/a&gt;
  Introduction To Templates
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#-raw-ngtemplate-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;ng-template&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Before we dive into the meat of this article, let's do a quick recap of what templates are and what they look like.&lt;/p&gt;

&lt;p&gt;While Angular templates come in many shapes and sizes, a simple but common use for them might look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;#falseTemp&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;False&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"bool; else falseTemp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;True&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-1-ng-template?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, we are creating a template and assigning it to a &lt;a href="https://blog.angulartraining.com/tutorial-the-magic-of-template-reference-variables-3183f0a0d9d1"&gt;template reference variable&lt;/a&gt;. &lt;em&gt;This template reference variable makes &lt;code&gt;falseTemp&lt;/code&gt; a valid variable to use as a value for other inputs in the same template.&lt;/em&gt; It then handles that variable similarly to how a variable from the component logic is handled when referenced from the template.&lt;/p&gt;

&lt;p&gt;We are then adding the &lt;a href="https://angular.io/api/common/NgIf"&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt; structural directive to the paragraph tag to render content to the screen conditionally.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;bool&lt;/code&gt; is true, it renders &lt;code&gt;&amp;lt;p&amp;gt;True&amp;lt;/p&amp;gt;&lt;/code&gt;, and the template containing &lt;code&gt;&amp;lt;p&amp;gt;False&amp;lt;/p&amp;gt;&lt;/code&gt; does not&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;bool&lt;/code&gt; is false, it then checks if the &lt;a href="https://angular.io/api/common/NgIf#showing-an-alternative-template-using-else"&gt;&lt;code&gt;else&lt;/code&gt; condition built into &lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt; has a value assigned to it. If there is a value assigned to the &lt;code&gt;else&lt;/code&gt; condition, it renders that template.

&lt;ul&gt;
&lt;li&gt;In this example, it does; the template we've assigned to &lt;code&gt;templHere&lt;/code&gt;. Because of this, &lt;code&gt;&amp;lt;p&amp;gt;False&amp;lt;/p&amp;gt;&lt;/code&gt; is rendered&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you had forgotten to include the &lt;code&gt;ngIf&lt;/code&gt;, it would never render the &lt;code&gt;False&lt;/code&gt; element because &lt;strong&gt;a template is not rendered to the view unless explicitly told to — this includes templates created with &lt;code&gt;ng-template&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rendering-manually-with-raw-ngtemplateoutlet-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Rendering Manually with &lt;code&gt;ngTemplateOutlet&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;But there's a &lt;del&gt;simpler&lt;/del&gt; &lt;del&gt;much more complex&lt;/del&gt; another way show the same template code above!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;#falseTemp&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;False&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;#ifTrueCondTempl&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;True&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;[ngTemplateOutlet]=&lt;/span&gt;&lt;span class="s"&gt;"bool ? ifTrueCondTempl : falseTemp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-2-conditional-render?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While this is not how the &lt;code&gt;ngIf&lt;/code&gt; structural template works internally, this is a good introduction to the &lt;code&gt;ngTemplateOutlet&lt;/code&gt; directive, which adds functionality to the &lt;code&gt;ng-template&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;If you're curious to how Angular's &lt;code&gt;ngIf&lt;/code&gt; works, read on dear reader.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While I'd mentioned previously that &lt;code&gt;ng-template&lt;/code&gt; does not render to the DOM, because we're using &lt;code&gt;ngTemplateOutlet&lt;/code&gt;, it renders the template defined in the passed &lt;code&gt;ng-template&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This template that's defined by &lt;code&gt;ng-template&lt;/code&gt; is called a "view", and when it is rendered to the screen, it is called an "embedded view".&lt;/p&gt;

&lt;p&gt;This embedded view is located in the DOM, where the &lt;code&gt;ng-template&lt;/code&gt; that used the &lt;code&gt;ngTemplateOutlet&lt;/code&gt; resides. That is to say, if you look at the element inspector, the element is placed where you'd expect the &lt;code&gt;ng-template&lt;/code&gt; to be located based on the structure of your code.&lt;/p&gt;

&lt;p&gt;Knowing that, you can see that the following example would show the user three of the most mythical beasts imaginable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;#unicorns&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;button&amp;gt;&lt;/span&gt;🦄🦄🦄&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;[ngTemplateOutlet]=&lt;/span&gt;&lt;span class="s"&gt;"unicorns"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With this, combined with template reference variables, you may find it easier to use a ternary operator to pass the correct template based on the value of &lt;code&gt;bool&lt;/code&gt; to create an embedded view of that template.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pass-data-to-templates-the-template-context" class="anchor"&gt;
  &lt;/a&gt;
  Pass Data To Templates — The Template Context
&lt;/h2&gt;

&lt;p&gt;Do you know how I mentioned that you can pass data between templates (at the start of the article)? This can be accomplished by defining the &lt;em&gt;context&lt;/em&gt; of the template. This context is defined by a JavaScript object you pass to the template with your desired key/value pairs (just like any other object). When looking at an example below, &lt;strong&gt;think of it in terms of passing data from a parent component to a child component through property binding&lt;/strong&gt;. When you define the context of a template, you're simply giving it the data it needs to fulfill its purpose in much the same way.&lt;/p&gt;

&lt;p&gt;So, now that we know what they are in broad terms, what do they look like?&lt;/p&gt;

&lt;p&gt;While we used the &lt;code&gt;ngTemplateOutlet&lt;/code&gt; directive before to render a template, we can also pass an input to the directive &lt;code&gt;ngTemplateOutletContext&lt;/code&gt; to pass a context. A context is just an object with a standard key/value pairing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt;
    &lt;span class="na"&gt;[ngTemplateOutlet]=&lt;/span&gt;&lt;span class="s"&gt;"showMsgToPerson"&lt;/span&gt;
    &lt;span class="na"&gt;[ngTemplateOutletContext]=&lt;/span&gt;&lt;span class="s"&gt;"{$implicit: 'Hello World', personName: 'Corbin'}"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;From there, you can use &lt;code&gt;let&lt;/code&gt; declarations to create template variables in that template based on the values passed by the context like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;#showMsgToPerson&lt;/span&gt; &lt;span class="na"&gt;let-message&lt;/span&gt; &lt;span class="na"&gt;let-thisPersonsName=&lt;/span&gt;&lt;span class="s"&gt;"personName"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{message}} {{thisPersonsName}}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, you can see that &lt;code&gt;let-templateVariableName="contextKeyName"&lt;/code&gt; is the syntax to bind any named context key's value to the template input variable with the name you provided after &lt;code&gt;let&lt;/code&gt;. There is an edge-case you've probably noticed though, the &lt;code&gt;$implicit&lt;/code&gt; key of the context is treated as a default of sorts, allowing a user to simply leave &lt;code&gt;let-templateVariableName&lt;/code&gt; to be the value of the &lt;code&gt;$implicit&lt;/code&gt; key of the context value.&lt;/p&gt;

&lt;p&gt;Now let's see it in action!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-3-context?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a quick note, &lt;em&gt;I only named these template input variables differently from the context value key to make it clear that you may do so&lt;/em&gt;. &lt;code&gt;let-personName="personName"&lt;/code&gt; is not only valid, but it also can make the code's intentions clearer to other developers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#view-references-raw-viewchild-endraw-raw-contentchild-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  View References — &lt;code&gt;ViewChild&lt;/code&gt;/&lt;code&gt;ContentChild&lt;/code&gt;
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#keeping-logic-in-your-controller-using-raw-viewchild-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Keeping Logic In Your Controller using &lt;code&gt;ViewChild&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;While template reference variables are very useful for referencing values within the template itself, there may be times when you'll want to access a reference to an item in the template from the component logic. Luckily, there's a way to get a reference to any component, directive, or view within a component template.&lt;/p&gt;

&lt;p&gt;Using &lt;a href="https://angular.io/api/core/ViewChild"&gt;&lt;code&gt;ViewChild&lt;/code&gt;&lt;/a&gt;, you're able to grab a reference to the &lt;code&gt;ng-template&lt;/code&gt; from the component logic rather than the template code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;div&amp;gt;
            &amp;lt;ng-template #helloMsg&amp;gt;Hello&amp;lt;/ng-template&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;ng-template [ngTemplateOutlet]="helloMessageTemplate"&amp;gt;&amp;lt;/ng-template&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Ignore the `static` prop for now, we'll cover that in just a bit&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helloMsg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;static&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="nx"&gt;helloMessageTemplate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-4-viewchild?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While this example is effectively not-much-more than an alternative API to &lt;code&gt;ngTemplateOutlet&lt;/code&gt;, it serves as a basis for introducing into further concepts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;ViewChild&lt;/code&gt; is a "property decorator" utility for Angular that searches the component tree to find what you pass it as a query.&lt;/em&gt; In the example above, when we pass the string &lt;code&gt;'templName'&lt;/code&gt;, we are looking for something in the tree that is marked with the template variable &lt;code&gt;helloMsg&lt;/code&gt;. In this case, it's an &lt;code&gt;ng-template&lt;/code&gt;, which is then stored to the &lt;code&gt;helloMessageTemplate&lt;/code&gt; property when this is found. Because it is a reference to a template, we are typing it as &lt;code&gt;TemplateRef&amp;lt;any&amp;gt;&lt;/code&gt; to have TypeScript understand the typings whenever it sees this variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#not-just-for-templates" class="anchor"&gt;
  &lt;/a&gt;
  Not Just for Templates!
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ViewChild&lt;/code&gt; isn't just for templates, either. You can get references to anything in the view tree:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;my-custom-component #myComponent [inputHere]="50" data-unrelatedAttr="Hi there!"&amp;gt;&amp;lt;/my-custom-component&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;static&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="nx"&gt;myComponent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MyComponentComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For example, would give you a reference to the &lt;code&gt;MyComponentComponent&lt;/code&gt; instance of the template. If you ran:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* This would be added to the `AfterViewInit` lifecycle method */&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputHere&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// This will print `50`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It would give you the property value on the instance of that component. Angular by default does a pretty good job at figuring out what it is that you wanted to get a reference of and returning the "correct" object for that thing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-5-view-not-template?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Despite the examples thus far having only used a string as the query for &lt;code&gt;ViewChild&lt;/code&gt;, you're also able to use the ComponentClass to query for a component with that component type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* This would replace the previous @ViewChild */&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MyComponentComponent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;myComponent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MyComponentComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For the particular example listed above, this code change would still yield the same results. &lt;em&gt;When using &lt;code&gt;ViewChild&lt;/code&gt;, it might be dangerous to do this if you have many components with that class.&lt;/em&gt; This is because when using &lt;code&gt;ViewChild&lt;/code&gt;, &lt;em&gt;it only returns the first result that Angular can find&lt;/em&gt; — this could return results that are unexpected if you're not aware of that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-name-is-inigo-montoya-the-raw-read-endraw-prop" class="anchor"&gt;
  &lt;/a&gt;
  My Name is &lt;del&gt;Inigo Montoya&lt;/del&gt; the &lt;code&gt;read&lt;/code&gt; Prop
&lt;/h3&gt;

&lt;p&gt;Awesome! But I wanted to get the value of the &lt;code&gt;data-unrelatedAttr&lt;/code&gt; attribute dataset, and my component definition doesn't have an input for that. How do I get the dataset value?&lt;/p&gt;

&lt;p&gt;Ahh, so you've seen the problem with Angular's guessing of what datatype you're looking for. There are times where we, the developers, know better of what we're looking for than the framework services.&lt;/p&gt;

&lt;p&gt;Fancy that.&lt;/p&gt;

&lt;p&gt;When we want to overwrite the type of data we expect &lt;code&gt;ViewChild&lt;/code&gt; to return, we can use a second property passed to the &lt;code&gt;ViewChild&lt;/code&gt; decorator with the type we want to be returned. With the use-case mentioned above, we can tell Angular that we want a reference to the element of the component itself by using the &lt;code&gt;ElementRef&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* This would replace the previous @ViewChild */&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;static&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="nx"&gt;myComponent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now that we've configured the &lt;code&gt;ViewChild&lt;/code&gt; to read this as an &lt;code&gt;ElementRef&lt;/code&gt; (a class provided from &lt;code&gt;@angular/core&lt;/code&gt; which helps us get the right value back from the query) rather than a component reference, we're able to use the &lt;code&gt;nativeElement&lt;/code&gt; property of that class to get the HTMLElement object for that component instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* This would be added to the `AfterViewInit` lifecycle method */&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-unrelatedAttr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// This output `"Hi there!"`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-6-read-prop?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ViewChild&lt;/code&gt; isn't an only child, though (get it?). There are other APIs similar to it that allow you to get references to other items in your templates from your component logic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-viewchildren-endraw-more-references-then-your-nerdy-pop-culture-friend" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;ViewChildren&lt;/code&gt;: More references then your nerdy pop culture friend
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ViewChildren&lt;/code&gt; allows you to get a reference to any items in the view that match your &lt;code&gt;ViewChildren&lt;/code&gt; query as an array of each item that matches:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;div&amp;gt;
            &amp;lt;my-custom-component [inputHere]="50"&amp;gt;&amp;lt;/my-custom-component&amp;gt;
            &amp;lt;my-custom-component [inputHere]="80"&amp;gt;&amp;lt;/my-custom-component&amp;gt;
        &amp;lt;/div&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChildren&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MyComponentComponent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;myComponents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;QueryList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MyComponentComponent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-7-viewchildren?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Would give you a list of all components with that base class. You're also able to use the &lt;code&gt;{read: ElementRef}&lt;/code&gt; property from the &lt;code&gt;ViewChild&lt;/code&gt; property decorator to get a &lt;code&gt;QueryList&amp;lt;ElementRef&amp;gt;&lt;/code&gt; (to be able to get a reference to the DOM &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element"&gt;Elements&lt;/a&gt; themselves) instead of a query list of &lt;code&gt;MyComponentComponent&lt;/code&gt; types.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-raw-querylist-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;QueryList&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;While &lt;code&gt;QueryList&lt;/code&gt; (from &lt;code&gt;@angular/core&lt;/code&gt;) returns an array-like, and the core team has done an outstanding job at adding in all the usual methods (&lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, etc.) and it &lt;em&gt;extends an iterator interface&lt;/em&gt; (so it works with &lt;code&gt;*ngFor&lt;/code&gt; in Angular templates and &lt;code&gt;for (let i of _)&lt;/code&gt; in TypeScript/JavaScript logic), &lt;em&gt;it is not an array&lt;/em&gt;. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeList"&gt;A similar situation occurs when using &lt;code&gt;document.querySelectorAll&lt;/code&gt; in plain JavaScript&lt;/a&gt;. &lt;em&gt;If you're expecting an array from an API that returns &lt;code&gt;QueryList&lt;/code&gt;, it might be best to use &lt;code&gt;Array.from&lt;/code&gt;&lt;/em&gt; on the value (in this case the &lt;code&gt;myComponents&lt;/code&gt; component prop) when you access it in logic later.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;QueryList&lt;/code&gt; also allows for some nice additions like the &lt;code&gt;changes&lt;/code&gt; observable property that allows you to listen for changes to this query. For example, if you had some components that were hidden behind a toggle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- This would make up the template of a new component --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;[(ngModel)]=&lt;/span&gt;&lt;span class="s"&gt;"bool"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"bool"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;my-custom-component&amp;gt;&amp;lt;/my-custom-component&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;my-custom-component&amp;gt;&amp;lt;/my-custom-component&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And wanted to get the value of all component's &lt;code&gt;numberProp&lt;/code&gt; values reduced into one, you could do so using the &lt;code&gt;changes&lt;/code&gt; observable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* This would be added to the `AfterViewInit` lifecycle method */&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myComponents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compsQueryList&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;componentsNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;compsQueryList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;comp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;comp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numberProp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentsNum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// This would output the combined number from all of the components' `numberProp` fields. This would run any time Angular saw a difference in the values&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-8-querylist?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It might be a good idea to gain familiarity of doing this as the Angular docs give the following warning in the &lt;a href="https://angular.io/api/core/QueryList#changes"&gt;&lt;code&gt;QueryList&lt;/code&gt; docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: In the future this class will implement an Observable interface.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#-raw-contentchildren-endraw-if-this-article-had-kids" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;ContentChildren&lt;/code&gt;: If this article had kids
&lt;/h2&gt;

&lt;p&gt;Author's note:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This section of the article assumes that you know what the &lt;code&gt;ng-content&lt;/code&gt; tag is. While I could do an in-depth dive on what &lt;code&gt;ng-content&lt;/code&gt; and content projection is, it's somewhat outside of the scope of this current article. Let me know if this is something that interests you; I might do another deep, deep dive into how Angular parses tags like &lt;code&gt;ng-content&lt;/code&gt; and how it's handled by Angular's AST and template parsing/etc.&lt;/p&gt;

&lt;p&gt;If you're less familiar with &lt;code&gt;ng-content&lt;/code&gt;, you can probably get by with just knowing how parent/child relationships elements work and just reading through carefully. Never be afraid to ask questions!&lt;/p&gt;

&lt;p&gt;There's also the &lt;code&gt;:host&lt;/code&gt; selector used in these demos. Think of each component creating their own wrapper &lt;code&gt;div&lt;/code&gt; — the &lt;code&gt;:host&lt;/code&gt; selector applies styling to the component wrapper element itself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I always love nesting some of my code into &lt;code&gt;ng-content&lt;/code&gt;s. I don't know what's so appealing about having my code look like it's straight out of HTML spec, but just being able to pass component instances and elements as children to one of my components and then tinkering with them is so satisfying.&lt;/p&gt;

&lt;p&gt;One thing I always run into though is that I always end up wanting to style the components that are passed in. Take the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;cards-list&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- Cards list has default styling with grey background --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;action-card&amp;gt;&amp;lt;/action-card&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- Action card has default styling with grey background --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;action-card&amp;gt;&amp;lt;/action-card&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- It's also widely used across the app, so that can't change --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/cards-list&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Anyone with a sense of design might be cringing about now. Grey on grey? On cards? Yuck! Let's make those cards have some white backgrounds.&lt;/p&gt;

&lt;p&gt;This might seem like a trivial task to anyone assuming that these components are built-in HTML elements as of course a CSS stylesheet like so would apply:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;cards-list&lt;/span&gt;&lt;span class="nc"&gt;.component.css&lt;/span&gt;
&lt;span class="nt"&gt;action-card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But this is often not the case. &lt;em&gt;&lt;a href="https://angular.io/api/core/ViewEncapsulation"&gt;Angular's &lt;code&gt;ViewEncapsulation&lt;/code&gt;&lt;/a&gt; prevents styles from one component from affecting the styling of another&lt;/em&gt;. This is especially true if you're using a configuration that allows the native browser to handle the components under the browser's shadow DOM APIs, which restricts stylesheet sharing on a browser-level. This is why the &lt;a href="https://angular.io/guide/component-styles#deprecated-deep--and-ng-deep"&gt;Angular-specific CSS selector &lt;code&gt;::ng-deep&lt;/code&gt;&lt;/a&gt; has been marked for depreciation (sorry old-school Angular developers [including myself, so much to migrate 😭]).&lt;/p&gt;

&lt;p&gt;It's no matter, though. We have the power of &lt;code&gt;ViewChildren&lt;/code&gt; on our side! Corbin already showed us how to get a reference to an element of a rendered component! Let's spin up an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;action-card&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`
        :host {
            border: 1px solid black;
            display: inline-block;
            height: 300px;
            width: 100px;
            background: grey;
            margin: 10px;
        }
    `&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ActionCard&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cards-list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;div&amp;gt;&amp;lt;ng-content&amp;gt;&amp;lt;/ng-content&amp;gt;&amp;lt;/div&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`:host {background: grey; display: block;}`&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CardsList&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;AfterViewInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChildren&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ActionCard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="nx"&gt;actionCards&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;ngAfterViewInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Any production code should absolutely be cleaning this up properly,&lt;/span&gt;
        &lt;span class="c1"&gt;// this is just for demonstration purposes&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actionCards&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elRef&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Changing background of a card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;elRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Awesome, let's spin that up and… Oh.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-9-cardlist-broke?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cards are still grey. Let's open up our terminal and see if the &lt;code&gt;console.log&lt;/code&gt;s ran.&lt;/p&gt;

&lt;p&gt;They didn't.&lt;/p&gt;

&lt;p&gt;Alright, I could keep going, but I know you've all read the section title (👀 at the skim-readers).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ViewChildren&lt;/code&gt; is a fantastic tool but only works for the items defined in the template of the component itself. Any children that are passed to the component are not handled the same way and require &lt;code&gt;ContentChildren&lt;/code&gt; instead. The same applies to &lt;code&gt;ViewChild&lt;/code&gt; (which has the adjacent API of &lt;code&gt;ContentChild&lt;/code&gt;). The &lt;code&gt;ContentChild/ren&lt;/code&gt; should share the same API with their &lt;code&gt;ViewChild/ren&lt;/code&gt; counterparts.&lt;/p&gt;

&lt;p&gt;If we change the &lt;code&gt;ViewChildren&lt;/code&gt; line to read:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ContentChildren&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ActionCard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="nx"&gt;actionCards&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-10-cardlist-fixed?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll see that the code now runs as expected. The cards are recolored, the &lt;code&gt;consoles.log&lt;/code&gt;s ran, and the developers are happy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-content-without-the-raw-ng-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  The Content Without the &lt;code&gt;ng&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ContentChild&lt;/code&gt; even works when you're not using &lt;code&gt;ng-content&lt;/code&gt; but still passing components and elements as children to the component. So, for example, if you wanted to pass a template as a child but wanted to render it in a very specific way, you could do so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- root-template.component.html --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;render-template-with-name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;let-userName&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello there, {{userName}}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/render-template-with-name&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// render-template-with-name.component.ts&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;render-template-with-name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;ng-template
        [ngTemplateOutlet]="contentChildTemplate"
        [ngTemplateOutletContext]="{$implicit: 'Name here'}"&amp;gt;
    &amp;lt;/ng-template&amp;gt;
`&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ContentChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;static&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="nx"&gt;contentChildTemplate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is a perfect example of where you might want &lt;code&gt;@ContentChild&lt;/code&gt; — not only are you unable to use &lt;code&gt;ng-content&lt;/code&gt; to render this template without a template reference being passed to an outlet, but you're able to create a context that can pass information to the template being passed as a child.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-does-angular-track-the-ui" class="anchor"&gt;
  &lt;/a&gt;
  How Does Angular Track the UI
&lt;/h1&gt;

&lt;p&gt;Awesome! We've been blowing through some of the real-world uses of templates like a bullet-train through a tunnel. 🚆 But I have something to admit: I feel like I've been doing a pretty bad job at explaining the "nitty-gritty" of how this stuff works. While that can often be a bit more dry of a read, I think it's very important to be able to use these APIs to their fullest. As such, let's take a step back and read through some of the more abstract concepts behind them.&lt;/p&gt;

&lt;p&gt;One of these abstract concepts comes from how Angular tracks what’s on-screen; just like the browser has the &lt;em&gt;Document Object Model&lt;/em&gt; tree (often called the DOM), Angular has the &lt;em&gt;View Hierarchy Tree&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-dom-tree" class="anchor"&gt;
  &lt;/a&gt;
  The DOM Tree
&lt;/h2&gt;

&lt;p&gt;Okay, I realize I just dropped some vocab on you without explaining first. Let's change that.&lt;/p&gt;

&lt;p&gt;So, when you build out an HTML file, you're defining the shape the document object model (DOM) takes. When you load a file similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- ids are only added for descriptive purposes --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"d"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"e"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Text here&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;The browser takes the items that've been defined in HTML and turns them into a tree that the browser can understand how to layout and draw on the screen&lt;/em&gt;. That tree, internally, might look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dTkKot_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unicorn-utterances.com/posts/angular-templates-start-to-source/dom_tree.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dTkKot_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unicorn-utterances.com/posts/angular-templates-start-to-source/dom_tree.svg" alt="A chart showing the document object model layout of the above code. It shows that the 'main' tag is the parent to a 'ul' tag, and so on" title="Diagram showing the above code as a graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This tree tells the browser where to place items and includes some logic when combined with CSS, even. For example, when the following CSS is applied to the &lt;code&gt;index.html&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#b&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It finds the element with the ID of &lt;code&gt;b&lt;/code&gt;, then the children of that tag are colored red. They're "children" because the DOM tree keeps that relationship info that's defined by the HTML.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n2NVKGak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unicorn-utterances.com/posts/angular-templates-start-to-source/dom_tree_with_css.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n2NVKGak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unicorn-utterances.com/posts/angular-templates-start-to-source/dom_tree_with_css.svg" alt="A chart showing the 'ul' tag highlighted in green with the children 'li' tags marked in red" title="Diagram showing the above code as a graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;ul&lt;/code&gt; element is marked as green just to showcase that it is the element being marked by the first part of the selector&lt;/p&gt;

&lt;p&gt;If you want to have a better grasp on the DOM and how it relates to the content you see on-screen, &lt;a href="https://dev.to/posts/understanding-the-dom/"&gt;check out our article that outlines what the DOM is and how your code interfaces with it through the browser&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#view-hierarchy-tree" class="anchor"&gt;
  &lt;/a&gt;
  View Hierarchy Tree
&lt;/h2&gt;

&lt;p&gt;In the same way, the browser keeps track of what's rendered into the dom using the DOM tree, Angular has its own tree to keep track what's rendered on-screen.&lt;/p&gt;

&lt;p&gt;The reason Angular has its own tree is due to the dynamic nature of Angular. In order to understand how to hide content on the fly, change out the content on-screen, and know how to keep consistent expected interactions between all of this, Angular needs to have a tree to keep track of its state.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;While Angular renders to the DOM in the end&lt;/em&gt; (just as vanilla HTML would), &lt;em&gt;Angular has the original information that described how to render things onto screen. When Angular detects changes to this tree, it will then update the DOM with the changes that Angular has tracked&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I will make a note that, while Angular's &lt;em&gt;View Hierarchy Tree&lt;/em&gt; is used by Angular to keep track of component/template composition (and some might argue that this is a "virtual DOM" of sorts as it updates the DOM based off of it's own tree), Angular makes no claims that this is a virtual DOM (AFAIK).&lt;/p&gt;

&lt;p&gt;Virtual DOMs have highly contested conversation surrounding them and have no standard definition as-to what one is or is not. I only used the DOM to present a foundational understanding of hierarchy trees in general.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because this tree is used to update the DOM rather than being part of the DOM itself, &lt;em&gt;the tree Angular uses to track its state is called the "view hierarchy tree"&lt;/em&gt;. This tree is composed of various "views". &lt;em&gt;A view is a grouping of elements and is the smallest grouping of elements that can be created or destroyed together&lt;/em&gt;. &lt;strong&gt;A view is defined by a template.&lt;/strong&gt; &lt;em&gt;This template on its own is not a view, but does define a view&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Because of this, despite there being many templates — this code sample does not have any views in it, because they are not being created from any of the templates:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ng-template&amp;gt;&lt;/span&gt;I am a view that's defined by a template&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;So am I! Just a different one. Everything in THIS template is in the same view&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Even with me in here? &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Yup!&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;However, when you create a view from a template, you're able to display them on-screen. When a view is displayed on-screen, they're then called an &lt;em&gt;embedded view&lt;/em&gt;. So, when we render a template using &lt;code&gt;ngTemplateOutlet&lt;/code&gt;, we are creating a view from a template, then embedding the view in the view that you called the &lt;code&gt;ngTemplateOutlet&lt;/code&gt; in.&lt;/p&gt;

&lt;p&gt;As such, the following code example would create the view hierarchy in the chart below the code sample:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ng-template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;I am in a view right now&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;#rememberMsg&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        But as you might recall, this is also a view
    &lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt;
        &lt;span class="na"&gt;[ngTemplateOutlet]=&lt;/span&gt;&lt;span class="s"&gt;"rememberMsg"&lt;/span&gt;
        &lt;span class="na"&gt;[ngTemplateOutletContext]=&lt;/span&gt;&lt;span class="s"&gt;"{$implicit: 'So when we render it, it\'s a view within a view'}"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hxT7FrpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unicorn-utterances.com/posts/angular-templates-start-to-source/hierarchy_example_intro.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hxT7FrpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unicorn-utterances.com/posts/angular-templates-start-to-source/hierarchy_example_intro.svg" alt="A chart showing the relationship between the templates. The first item is a template, with an elment, view, and template as children. There is an arrow pointing from the child view to the child template" title="Diagram showing the above code as a graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The arrow in this chart simply shows that the view is being defined by the template itself&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's this composition of views that make up the "view hierarchy".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#view-containers" class="anchor"&gt;
  &lt;/a&gt;
  View Containers
&lt;/h2&gt;

&lt;p&gt;Admittedly, that chart above isn't QUITE right. A more accurate version of the chart might look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hxT7FrpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unicorn-utterances.com/posts/angular-templates-start-to-source/hierarchy_example_intro.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hxT7FrpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unicorn-utterances.com/posts/angular-templates-start-to-source/hierarchy_example_intro.svg" alt='The same chart from above but the top-level template now has an arrow pointing to an item "view container" before listing the other children' title="Diagram showing the above code as a graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Little has changed, yet there's something new! A &lt;em&gt;view container&lt;/em&gt; is just what it sounds like: It's a container for views. That is to say, whenever you see a view embedded, you can be sure it's a child of a view container. While our code might not make it apparent, when we're using &lt;code&gt;ngTemplateOutlet&lt;/code&gt;, Angular creates a view container for us to place the view into. It will create the view container from a template, view, or even from an element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;#letsRender&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Let's render this thing!
    &lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;[ngTemplateOutlet]=&lt;/span&gt;&lt;span class="s"&gt;"letsRender"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qq_y5GOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unicorn-utterances.com/posts/angular-templates-start-to-source/hierarchy_view_container_on_element.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qq_y5GOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unicorn-utterances.com/posts/angular-templates-start-to-source/hierarchy_view_container_on_element.svg" alt="A chart showing an element as the root with two children, a template and a view. The view points towards the template" title="Diagram showing the above code as a graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It is because Angular's view containers being able to be attached to views, templates, and elements that enable the dependency injection system to get a &lt;code&gt;ViewContainerRef&lt;/code&gt; regardless of what you're requested the &lt;code&gt;ViewContainerRef&lt;/code&gt; on&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#host-views" class="anchor"&gt;
  &lt;/a&gt;
  Host Views
&lt;/h2&gt;

&lt;p&gt;If you're looking for them, you might notice a few similarities between a component declaration's &lt;code&gt;template&lt;/code&gt; and &lt;code&gt;ng-template&lt;/code&gt;s:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Both of them allow for values to be passed into them (&lt;code&gt;@Input&lt;/code&gt; props for components, context for templates)&lt;/li&gt;
&lt;li&gt;Both of them contain the same support for tags and template creation (using &lt;code&gt;ng-template&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, there's a good reason for that: &lt;em&gt;A component is actually just a directive with a special view — a "host view" (defined by the &lt;code&gt;template&lt;/code&gt; or &lt;code&gt;templateUrl&lt;/code&gt; field in the decorator) associated with it&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://angular.io/guide/architecture-components#directives"&gt;To quote the Angular documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A component is technically a directive. However, components are so distinctive and central to Angular applications that Angular defines the &lt;code&gt;@Component()&lt;/code&gt; decorator, which extends the &lt;code&gt;@Directive()&lt;/code&gt;decorator with template-oriented features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This host view can also be attached to another view by using the &lt;code&gt;selector&lt;/code&gt; value of that component's.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;child-component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;p&amp;gt;I am in the host view, which acts as a view container for other views to attach to&amp;lt;/p&amp;gt;
        &amp;lt;div&amp;gt;&amp;lt;p&amp;gt;I am still in the child-component's host view&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;ng-template #firstChildCompTempl&amp;gt;
            &amp;lt;p&amp;gt;I am in a view outside of the child-component's host view&amp;lt;/p&amp;gt;
        &amp;lt;/ng-template&amp;gt;
        &amp;lt;ng-template
            [ngTemplateOutlet]="firstChildCompTempl"
            [ngTemplateOutletContext]="{$implicit: 'And now I'm attaching that template to the host view by embedding the view'}"
        &amp;gt;&amp;lt;/ng-template&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;


&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;p&amp;gt;I am in app's host view, and can act as a view container for even other host views by using the component's selector&amp;lt;/p&amp;gt;
        &amp;lt;child-component&amp;gt;&amp;lt;/child-component&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r_Q2lcRu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unicorn-utterances.com/posts/angular-templates-start-to-source/hierarchy_tree_example.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r_Q2lcRu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unicorn-utterances.com/posts/angular-templates-start-to-source/hierarchy_tree_example.svg" alt='A chart showing the heirarchy of the above code. It shows "my-app" having a host view, which has a view container. This view container is the parent to an element and "child-component", which has its own host view, view container, and children' title="Diagram showing the above code as a graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#template-input-variable-scope" class="anchor"&gt;
  &lt;/a&gt;
  Template Input Variable Scope
&lt;/h2&gt;

&lt;p&gt;Template input variables are the variables you bind to a template when using context. &lt;code&gt;&amp;lt;ng-template let-varName&amp;gt;&lt;/code&gt;. &lt;em&gt;These variables are defined from the context that is applied to the template&lt;/em&gt;. As a result &lt;strong&gt;these templates are able to be accessed by the children views of the templates, but not from a higher level&lt;/strong&gt; — as the context is not defined above the template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- ✅ This is perfectly fine --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;let-varName&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{varName}}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- ❌ This will throw errors, as the template context is not available from anywhere that isn't a child of the template --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;let-thisVar&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{thisVar}}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#template-reference-variable-scope" class="anchor"&gt;
  &lt;/a&gt;
  Template Reference Variable Scope
&lt;/h2&gt;

&lt;p&gt;Template reference variables, however, have a much more complex answer in regards to how they're able to be accessed.&lt;/p&gt;

&lt;p&gt;As a small review of what they are:&lt;br&gt;
&lt;em&gt;A template reference variable is a variable assigned to a tag so that other items in the same template are able to reference that tag.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    Hello There!
    &lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;#testingMessage&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;Testing 123&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;[ngTemplateOutlet]=&lt;/span&gt;&lt;span class="s"&gt;"testingMessage"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Will now show the following in the DOM: --&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--        &amp;lt;div&amp;gt;Hello There!&amp;lt;/div&amp;gt;          --&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--           &amp;lt;p&amp;gt;Hi There&amp;lt;/p&amp;gt;               --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this example, we're getting a reference to &lt;code&gt;testingMessage&lt;/code&gt; template to be able to provide as an input. We're then passing that value to another &lt;code&gt;ng-template&lt;/code&gt;'s &lt;code&gt;ngTemplateOutlet&lt;/code&gt; directive to get it rendering on-screen.&lt;/p&gt;

&lt;p&gt;Straightforward enough example, let’s see a more difficult example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;#helloThereMsg&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello There!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;#testingMessage&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Testing 123&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;[ngTemplateOutlet]=&lt;/span&gt;&lt;span class="s"&gt;"helloThereMsg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;[ngTemplateOutlet]=&lt;/span&gt;&lt;span class="s"&gt;"testingMessage"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-11-broke-template-var?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you look at the output of this example, you'll notice that &lt;code&gt;testingMessage&lt;/code&gt; isn't rendering. This is because template reference variables bind to the view that they're present in; and as a result are unable to be accessed from parent views.&lt;/p&gt;

&lt;p&gt;&lt;a href="#the-dom"&gt;Like how CSS is applied to a dom when bound to a selector&lt;/a&gt;, template reference variables can be accessed within the view itself and child views, but not the parent views.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FvZa1DPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unicorn-utterances.com/posts/angular-templates-start-to-source/template_reference_scope.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FvZa1DPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unicorn-utterances.com/posts/angular-templates-start-to-source/template_reference_scope.svg" alt="Chart showing the above code sample to match the prior visualization aids" title="Visualization of the hierarchy tree for the prior cod example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the view that is trying to render &lt;code&gt;testMessage&lt;/code&gt; looks for that template reference variable, it is unable to, as it is bound to the &lt;code&gt;helloThereMsg&lt;/code&gt; template view. Because it cannot find a template reference variable with the id &lt;code&gt;testMessage&lt;/code&gt;, it treats it like any other unfound variable: an &lt;code&gt;undefined&lt;/code&gt; value. The default behavior of &lt;code&gt;undefined&lt;/code&gt; being passed to &lt;code&gt;ngTemplateOutlet&lt;/code&gt; is to not render anything.&lt;/p&gt;

&lt;p&gt;In order to fix this behavior, we'd need to move the second &lt;code&gt;ng-template&lt;/code&gt; into the &lt;code&gt;helloThereMsg&lt;/code&gt; template view so that the &lt;code&gt;ngTemplateOutlet&lt;/code&gt; is able to find the matching template reference variable within its view scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;#helloThereMsg&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Hello There!
    &lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;#testingMessage&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;Testing 123&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;[ngTemplateOutlet]=&lt;/span&gt;&lt;span class="s"&gt;"testingMessage"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;[ngTemplateOutlet]=&lt;/span&gt;&lt;span class="s"&gt;"helloThereMsg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-12-fixed-template-var?embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-bane-of-all-javascipt-developer-timings" class="anchor"&gt;
  &lt;/a&gt;
  The Bane of All JavaScipt Developer: Timings
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#understanding-timings-with-raw-viewchildren-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Understanding timings with &lt;code&gt;ViewChildren&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;But the example immediately above doesn't have the same behavior as the one we likely intended. We wanted to get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Hello there!&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Testing 123&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And instead got:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Hello there! &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Testing 123&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is because, when we moved the template into the correct view scope, we moved it in the element tree as well.&lt;/p&gt;

&lt;p&gt;Luckily, we've already covered &lt;code&gt;@ViewChild&lt;/code&gt;, which is able to get references all the way down the view hierarchy tree and provide the value to the component logic. Because the &lt;strong&gt;component logic variables are accessible from any child view of the component host view&lt;/strong&gt;, you can pass the &lt;code&gt;testingMessage&lt;/code&gt; template reference variable to the top level.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;ng-template #helloThereMsg&amp;gt;
            Hello There!
            &amp;lt;ng-template #testingMessage&amp;gt;Testing 123&amp;lt;/ng-template&amp;gt;
        &amp;lt;/ng-template&amp;gt;
        &amp;lt;ng-template [ngTemplateOutlet]="helloThereMsg"&amp;gt;&amp;lt;/ng-template&amp;gt;
        &amp;lt;ng-template [ngTemplateOutlet]="testingMessageCompVar"&amp;gt;&amp;lt;/ng-template&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;testingMessage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;static&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="nx"&gt;testingMessageCompVar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Something you'll see if you open the console in that example is an error you may already be familiar with if you’ve used Angular extensively in the past (I know I sure saw it more then a few times!):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Error: ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: 'ngTemplateOutlet: undefined'. Current value: 'ngTemplateOutlet: [object Object]'.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This error is being thrown by Angular's developer mode, so if you're running a production build, this error will not show.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why is this error happening? What can we do to fix it?&lt;/p&gt;

&lt;p&gt;This, my friends, is where the conversation regarding change detection, lifecycle methods, and the &lt;code&gt;static&lt;/code&gt; prop come into play.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#change-detection-how-does-it-work" class="anchor"&gt;
  &lt;/a&gt;
  Change Detection, How Does It Work
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Change detection in Angular is deserving of its own massive article: This is not that article. That said, understanding how change detection and how it affects the availability of templates is imperative to understanding some of the more ambiguous aspects of Angular template’s behaviors.&lt;/p&gt;

&lt;p&gt;More information can be found on lifecycle methods and change detection on &lt;a href="https://angular.io/guide/lifecycle-hooks"&gt;the official docs page for them&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Angular has specific hooks of times when to update the UI&lt;/em&gt;. Without these hooks, Angular has no way of knowing when data that's shown on-screen is updated. These hooks essentially simply check when data has changed. While these checks are imperfect, they have default behavior that will handle most cases and and the ability to overwrite it and even manually trigger a check.&lt;/p&gt;

&lt;p&gt;One of the default checks that is ran when Angular is starting the initial render of a component. During this time, it will do a check of all of the values stored within the component's state. Afterwards, it will run checks whenever any data has changed whether or not to update the UI.&lt;/p&gt;

&lt;p&gt;These checks trigger the lifecycle method &lt;code&gt;DoCheck&lt;/code&gt;, which you can manually handle. The &lt;code&gt;DoCheck&lt;/code&gt; lifecycle method will trigger every time Angular detects data changes, regardless of if the check of that data does not decide to update the item on-screen or not.&lt;/p&gt;

&lt;p&gt;So let's look at the example we had previously, but let's add some lifecycle methods to evaluate when &lt;code&gt;ViewChild&lt;/code&gt; is able to give us our value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;DoCheck&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnChanges&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AfterViewInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;realMsgVar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;testingMessage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;static&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="nx"&gt;testingMessageCompVar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ngOnInit | The template is present?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;testingMessageCompVar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;ngDoCheck&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ngDoCheck | The template is present?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;testingMessageCompVar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;realMsgVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;testingMessageCompVar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;ngAfterViewInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ngAfterViewInit | The template is present?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;testingMessageCompVar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-13-lifecycle-explain?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking at the console logs, you'll be left with the following messages in your console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;ngOnInit        | The template is present? false
ngDoCheck       | The template is present? false
ngAfterViewInit | The template is present? true
ngDoCheck       | The template is present? true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can see that the &lt;code&gt;testingMessageCompVar&lt;/code&gt; property is not defined until the &lt;code&gt;ngAfterViewInit&lt;/code&gt;. &lt;em&gt;The reason we're hitting the error is that the template is not defined in the component logic until &lt;code&gt;ngAfterViewInit&lt;/code&gt;.&lt;/em&gt; It is not defined until them due to timing issues:* &lt;strong&gt;the template is being declared in an embedded view, which takes a portion of time to render to screen&lt;/strong&gt;. As a result, the &lt;code&gt;helloThereMsg&lt;/code&gt; template must render first, then the &lt;code&gt;ViewChild&lt;/code&gt; can get a reference to the child after the initial update.&lt;/p&gt;

&lt;p&gt;When using &lt;code&gt;ViewChild&lt;/code&gt; by itself, it updates the value of the &lt;code&gt;testingMessageCompVar&lt;/code&gt; at the same time that the &lt;code&gt;AfterViewInit&lt;/code&gt; lifecycle method is ran. This value update is then in turn reflected in the template itself.&lt;/p&gt;

&lt;p&gt;Angular, however, does not like values being updated directly within the &lt;code&gt;AfterViewInit&lt;/code&gt;. Angular runs change detection often after an &lt;code&gt;ngDoCheck&lt;/code&gt; and, after that method, does not like to re-check if there are things to update on-screen (as there can be timing conflicts under-the-hood that require a lot of foundation regarding how the change detection process works to explain properly — well outside the scope of this post).&lt;/p&gt;

&lt;p&gt;Because of this — when using the &lt;code&gt;ngDoCheck&lt;/code&gt; — you're manually running the variable update, which in turn informs Angular’s change detection process to include this in it’s list of screen updates.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I realize there’s a lot going on in this example and that can be very confusing, even for me writing it! If you’re wanting to learn more but feeling discouraged after reading through this section a time or two, give &lt;a href="https://blog.angular-university.io/angular-debugging/"&gt;this resource&lt;/a&gt; (from "Angular University", a great un-official Angular resource hub) a shot. It’s what I used to re-learn the elements at play with this error.&lt;/p&gt;

&lt;p&gt;If there’s more interest in an article from me about Angular change detection, reach out — I'd love to gauge interest!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#great-scott-you-control-the-timing-the-raw-static-endraw-prop" class="anchor"&gt;
  &lt;/a&gt;
  Great Scott — You Control The Timing! The &lt;code&gt;static&lt;/code&gt; Prop
&lt;/h3&gt;

&lt;p&gt;That said, there might be times where having the value right off the bat from the &lt;code&gt;ngOnInit&lt;/code&gt; might be useful. After all, if you're not embedding a view into a view, it would be extremely useful to be able to get the reference before the &lt;code&gt;ngAfterViewInit&lt;/code&gt; and be able to avoid the fix mentioned above.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before I go much further, I will remind readers that &lt;a href="https://github.com/angular/angular/pull/28810"&gt;the &lt;code&gt;static&lt;/code&gt; prop was introduced in Angular 8&lt;/a&gt;; this section does not apply to &lt;code&gt;ViewChild&lt;/code&gt;/&lt;code&gt;ContentChild&lt;/code&gt; prior to that version&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, that can be controlled via the &lt;code&gt;static&lt;/code&gt; prop! Before this example, I was defaulting to use &lt;code&gt;static: false&lt;/code&gt; to avoid running into &lt;a href="#change-detection"&gt;the issue we covered in the last section&lt;/a&gt;, but you’re able to set this flag to &lt;code&gt;true&lt;/code&gt; to get access to the template reference from within the &lt;code&gt;ngOnInit&lt;/code&gt; lifecycle method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;div&amp;gt;
            &amp;lt;p&amp;gt;Hello?&amp;lt;/p&amp;gt;
            &amp;lt;ng-template #helloThereMsg&amp;gt;
                Hello There!
            &amp;lt;/ng-template&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;ng-template [ngTemplateOutlet]="realMsgVar"&amp;gt;&amp;lt;/ng-template&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;helloThereMsg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;static&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="nx"&gt;realMsgVar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-14-static?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because this example does not have the &lt;code&gt;helloThereMsg&lt;/code&gt; template within another view (outside of the host view), it is able to render without the errors we found when using &lt;code&gt;static: true&lt;/code&gt;). Likewise, if you were to add an &lt;code&gt;OnInit&lt;/code&gt; lifecycle method, you'd be able to get a reference to that template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;realMsgVar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// This would output true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;While you might wonder "Why would you use &lt;code&gt;static: false&lt;/code&gt; if you can get the access within the &lt;code&gt;ngOnInit&lt;/code&gt;", the answer is fairly similarly: &lt;em&gt;when using &lt;code&gt;static: true&lt;/code&gt;, the &lt;code&gt;ViewChild&lt;/code&gt; prop never updates after the initial &lt;code&gt;DoCheck&lt;/code&gt; lifecycle check&lt;/em&gt;. This means that your value will never update from &lt;code&gt;undefined&lt;/code&gt; when trying to get a reference to a template from within a child view.&lt;/p&gt;

&lt;p&gt;When taking the example with the &lt;code&gt;testingMessageCompVar&lt;/code&gt; prop and changing the value to &lt;code&gt;true&lt;/code&gt;, it will never render the other component since it will always stay &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-15-static-first-check?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#view-manipulation" class="anchor"&gt;
  &lt;/a&gt;
  View Manipulation
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#view-limitations" class="anchor"&gt;
  &lt;/a&gt;
  View Limitations
&lt;/h2&gt;

&lt;p&gt;Having covered views in the last section, it's important to mention an important limitation regarding them:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Properties of elements in a view can change dynamically, in response to user actions; the structure (number and order) of elements in a view can't. You can change the structure of elements by inserting, moving, or removing nested views within their view containers.&lt;/p&gt;

&lt;p&gt;- Angular Docs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#embed-views" class="anchor"&gt;
  &lt;/a&gt;
  Embed Views
&lt;/h2&gt;

&lt;p&gt;While we've covered how to insert a component using &lt;code&gt;ngTemplate&lt;/code&gt;, Angular also allows you to find, reference, modify, and create them yourself in your component/directive logic! 🤯&lt;/p&gt;

&lt;p&gt;Let's show an example of how we can render an &lt;code&gt;ng-template&lt;/code&gt; using TypeScipt component logic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;ng-template #templ&amp;gt;
            &amp;lt;ul&amp;gt;
                &amp;lt;li&amp;gt;List Item 1&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;List Item 2&amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
        &amp;lt;/ng-template&amp;gt;
        &amp;lt;div #viewContainerRef class="testing"&amp;gt;
        &amp;lt;/div&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;viewContainerRef&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;static&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="nx"&gt;viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;templ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;static&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-16-createembeddedview?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This example has a lot going on, so let's dissect it bit-by-bit.&lt;/p&gt;

&lt;p&gt;Starting with some small recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We're creating a template with the &lt;code&gt;ng-template&lt;/code&gt; tag and assigning it to a template reference variable &lt;code&gt;templ&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We're also creating a &lt;code&gt;div&lt;/code&gt; tag, assigning it to the template reference variable &lt;code&gt;viewContainerRef&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Lastly, &lt;code&gt;ViewChild&lt;/code&gt; is giving us a reference to the template on the &lt;code&gt;templ&lt;/code&gt; component class property.

&lt;ul&gt;
&lt;li&gt;We're able to mark both of these as &lt;code&gt;static: true&lt;/code&gt; as neither of them are obfuscated by non-host-view views as parents&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now the new stuff:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We're also using &lt;code&gt;ViewChild&lt;/code&gt; to assign the template reference variable &lt;code&gt;viewContainerRef&lt;/code&gt; to a component class property.

&lt;ul&gt;
&lt;li&gt;We're using the &lt;code&gt;read&lt;/code&gt; prop to give it the &lt;a href="https://angular.io/api/core/ViewContainerRef"&gt;&lt;code&gt;ViewContainerRef&lt;/code&gt;&lt;/a&gt; class, which includes some methods to help us create an embedded view.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Then, in the &lt;code&gt;ngOnInit&lt;/code&gt; lifecycle, we're running the &lt;code&gt;createEmbeddedView&lt;/code&gt; method present on the &lt;code&gt;ViewContainerRef&lt;/code&gt; property to create an embedded view based on the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you take a look at your element debugger, you'll notice that the template is injected as a sibling to the &lt;code&gt;.testing&lt;/code&gt; div:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!----&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"testing"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;List Item 1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;List Item 2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The empty comment &lt;code&gt;&amp;lt;!----&amp;gt;&lt;/code&gt; will show up in your element tab of your browser and was therefore left in. The empty comment block is used by Angular to showcase where a template is&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/angular/angular/issues/9035"&gt;While this has confused many developers, who have expected the embedded view to be children of the &lt;code&gt;ViewContainer&lt;/code&gt; reference element&lt;/a&gt;, this is intentional behavior, and is consistent with other APIs similar to it.&lt;/p&gt;

&lt;p&gt;The reason for this is that &lt;em&gt;Angular is creating a &lt;code&gt;ViewContainer&lt;/code&gt; as the parent of the element when the user queries for one&lt;/em&gt;. From there, Angular is "appending" the new view into the view container (as a view container is a view itself, and a view cannot have the number of elements in it modified without inserting a new view).&lt;/p&gt;

&lt;p&gt;Why would it make one as a parent rather than the element itself?&lt;/p&gt;

&lt;p&gt;Not all elements accept children inputs, IE: &lt;code&gt;&amp;lt;/br&amp;gt;&lt;/code&gt;. As a result, the Angular team thought it be best to make the parent the view container when a user queries for one (or uses the dependency injection to get a reference to one, as we are in this example).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#see-how-the-view-is-tracked" class="anchor"&gt;
  &lt;/a&gt;
  See How The View Is Tracked
&lt;/h3&gt;

&lt;p&gt;Because all views are unable to mutate the number of items without explicitly moving, creating, or destroying themselves, the view container is able to track all of the views via index.&lt;/p&gt;

&lt;p&gt;For example, if you wanted to see the index, we could use an API on the view container to get the index of the embedded view. To do this, we'd first need a reference of the embedded view in our template logic.&lt;/p&gt;

&lt;p&gt;Just like how we have &lt;code&gt;ViewContainerRef&lt;/code&gt;, there's also &lt;a href="https://angular.io/api/core/EmbeddedViewRef#embeddedviewref"&gt;&lt;code&gt;EmbeddedViewRef&lt;/code&gt;&lt;/a&gt;. Luckily, with our previous example, getting that ref is trivial, as it's returned by the &lt;code&gt;createEmbeddedView&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;embeddRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EmbeddedViewRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;From there, we can use the &lt;code&gt;indexOf&lt;/code&gt; method on the parent &lt;code&gt;ViewContainerRef&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;embeddIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;embeddRef&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;embeddIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// This would print `0`.&lt;/span&gt;
&lt;span class="c1"&gt;// Remember that this is a new view container made when we queried for one with DI, which is why this is the only view in it currently&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The view container keeps track of all of the embedded views in its control, and when you &lt;code&gt;createEmbeddedView&lt;/code&gt;, it searches for the index to insert the view into.&lt;/p&gt;

&lt;p&gt;You're also able to lookup an embedded view based on the index you're looking for using &lt;code&gt;get&lt;/code&gt;. So, if you wanted to get all of the indexes being tracked by &lt;code&gt;viewContainerRef&lt;/code&gt;, you'd do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-17-see-viewcontainer-indexes?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#context" class="anchor"&gt;
  &lt;/a&gt;
  Context
&lt;/h4&gt;

&lt;p&gt;Just as we can use &lt;code&gt;contextRouterOutlet&lt;/code&gt;, you're able to pass context to a template when rendering it using &lt;code&gt;createEmbeddedView&lt;/code&gt;. So, let's say that you wanted to have a counting component and want to pass a specific index to start counting from, you could pass a context, &lt;a href="#template-context"&gt;with the same object structure we did before&lt;/a&gt;, have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AfterViewInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ContentChild&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;EmbeddedViewRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;ng-template #templ let-i&amp;gt;
                &amp;lt;li&amp;gt;List Item {{i}}&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;List Item {{i + 1}}&amp;lt;/li&amp;gt;
        &amp;lt;/ng-template&amp;gt;
        &amp;lt;ul&amp;gt;
            &amp;lt;div #viewContainerRef&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/ul&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;viewContainerRef&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;static&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="nx"&gt;viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;templ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;static&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;embeddRef3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EmbeddedViewRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;$implicit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;embeddRef1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EmbeddedViewRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;$implicit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this example, because we want to have an unordered list with list elements being created using embedded views, we're getting a &lt;code&gt;ViewContainerRef&lt;/code&gt; directly from inside the unordered list.&lt;br&gt;
But you'll notice a problem with doing this if you open up your inspector (or even just by reading the code):&lt;br&gt;
There's now a &lt;code&gt;div&lt;/code&gt; at the start of your list.&lt;/p&gt;

&lt;p&gt;To get around this, we can use the &lt;code&gt;ng-container&lt;/code&gt; tag, which allows us to get a view reference without injecting a DOM element into the fray. &lt;em&gt;&lt;code&gt;ng-container&lt;/code&gt; can also be used to group elements without using a DOM element&lt;/em&gt;, similar to how &lt;a href="https://reactjs.org/docs/fragments.html"&gt;React Fragments&lt;/a&gt; work in that ecosystem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;#viewContainerRef&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-18-create-embedd-context?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#moveinsert-template" class="anchor"&gt;
  &lt;/a&gt;
  Move/Insert Template
&lt;/h4&gt;

&lt;p&gt;But oh no! You'll see that the ordering is off. The simplest (and probably most obvious) solution would be to flip the order of the calls. After all, if they're based on index — moving the two calls to be in the opposite order would just fix the problem.&lt;/p&gt;

&lt;p&gt;But this is a blog post, and I needed a contrived example to showcase how we can move views programmatically:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newViewIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;embeddRef1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newViewIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// This will move this view to index 1, and shift every index greater than or equal to 0 up by 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-19-move-template?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Angular provides many APIs to take an existing view and move it and modify it without having to create a new one and run change detection/etc again.&lt;/p&gt;

&lt;p&gt;If you're wanting to try out a different API and feel that &lt;code&gt;createEmbeddedView&lt;/code&gt; is a little too high-level for you (we need to go deeper), you can create a view from a template and then embed it yourself manually.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;viewRef1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;$implicit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewRef1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;viewRef3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;$implicit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewRef3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-20-insert-template?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/angular/angular/blob/e1f6d1538784eb87f7497bef27e3c313184c2d30/packages/core/src/view/refs.ts#L174"&gt;And in fact, this is how the &lt;code&gt;createEmbeddedView&lt;/code&gt; works internally&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Source code directly from Angular as of 8.0.1&lt;/span&gt;
&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;templateRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="nx"&gt;EmbeddedViewRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;viewRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;templateRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{});&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;viewRef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#accessing-templates-from-a-directive" class="anchor"&gt;
  &lt;/a&gt;
  Accessing Templates from a Directive
&lt;/h1&gt;

&lt;p&gt;Thus far, we've only used components to change and manipulate templates. However, &lt;a href="#components-are-directives"&gt;as we've covered before, directives and components are the same under-the-hood&lt;/a&gt;. As a result, &lt;em&gt;we have the ability to manipulate templates in the same way using directives rather than components&lt;/em&gt;. Let's see what that might look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[renderTheTemplate]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RenderTheTemplateDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ContentChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;static&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;div renderTheTemplate&amp;gt;
            &amp;lt;ng-template&amp;gt;
                    &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
            &amp;lt;/ng-template&amp;gt;
        &amp;lt;/div&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-21-directive-template?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll notice this code is almost exactly the same from some of our previous component code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference-more-than-view-containers" class="anchor"&gt;
  &lt;/a&gt;
  Reference More Than View Containers
&lt;/h2&gt;

&lt;p&gt;However, the lack of a template associated with the directive enables some fun stuff, for example, &lt;em&gt;we can use the same dependency injection trick we've been using to get the view container reference&lt;/em&gt; to get a reference to the template element that the directive is attached to and render it in the &lt;code&gt;ngOnInit&lt;/code&gt; method like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[renderTheTemplate]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RenderTheTemplateDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;templToRender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templToRender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;ng-template renderTheTemplate&amp;gt;
                &amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;
        &amp;lt;/ng-template&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-22-directive-template-reference?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#input-shorthand" class="anchor"&gt;
  &lt;/a&gt;
  Input Shorthand
&lt;/h2&gt;

&lt;p&gt;With directives, we can even create an input with the same name, and just pass that input value directly to the template using a context:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[renderTheTemplate]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RenderTheTemplateDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;templToRender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;renderTheTemplate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templToRender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;$implicit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderTheTemplate&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;ng-template [renderTheTemplate]="'Hi there!'" let-message&amp;gt;
                &amp;lt;p&amp;gt;{{message}}&amp;lt;/p&amp;gt;
        &amp;lt;/ng-template&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;I want to make clear that this trick is present in all directives. If you name the input the same as the directive name, it will bind the value you're passing in to that directive name while also associating the directive with the component. No need for a separate input and directive name!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-23-directive-input-name?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Starting to look a bit more like the &lt;code&gt;ngTemplateOutlet&lt;/code&gt;, no? Well, why not go even further! Let's lean into that!&lt;br&gt;
With this syntax, we can add a second input, pass an object as the context to the template we want to render, and then a template reference variable, and be able to recreate Angular's &lt;code&gt;ngTemplateOutlet&lt;/code&gt;'s API almost to-a-T:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[renderTheTemplate]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RenderTheTemplateDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;renderTheTemplate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;renderTheTemplateContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderTheTemplate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderTheTemplateContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;ng-template [renderTheTemplate]="template1"
                                [renderTheTemplateContext]="{$implicit: 'Whoa 🤯'}"&amp;gt;&amp;lt;/ng-template&amp;gt;
        &amp;lt;ng-template #template1 let-message&amp;gt;
                &amp;lt;p&amp;gt;Testing from &amp;lt;code&amp;gt;template1&amp;lt;/code&amp;gt;: &amp;lt;b&amp;gt;{{message}}&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;/ng-template&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-24-directive-outlet-alternative?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The nice part is that not only does it look like the directive from its usage, &lt;a href="https://github.com/angular/angular/blob/e1f6d1538784eb87f7497bef27e3c313184c2d30/packages/common/src/directives/ng_template_outlet.ts#L35"&gt;but it's also not entirely dissimilar to how Angular writes the component internally&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This is Angular source code as of 8.0.1 with some lines removed (but none modified otherwise).&lt;/span&gt;
&lt;span class="c1"&gt;// The lines removed were some performance optimizations by comparing the previous view to the new one&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[ngTemplateOutlet]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NgTemplateOutlet&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnChanges&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_viewRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EmbeddedViewRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;|&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;ngTemplateOutletContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;ngTemplateOutlet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;|&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="nx"&gt;ngOnChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SimpleChanges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_viewRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_viewRef&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ngTemplateOutlet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_viewRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ngTemplateOutlet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ngTemplateOutletContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#structural-directives-what-sorcery-is-this" class="anchor"&gt;
  &lt;/a&gt;
  Structural Directives — What Sorcery is this?
&lt;/h1&gt;

&lt;p&gt;If you've used Angular in any scale of application, you've ran into Angular helpers that look a lot like directives and start with a &lt;code&gt;*&lt;/code&gt; such as &lt;code&gt;*ngIf&lt;/code&gt; and &lt;code&gt;*ngFor&lt;/code&gt;. These helpers are known as &lt;strong&gt;structural directives&lt;/strong&gt; and are built upon all of the things we've learned to this point.&lt;/p&gt;

&lt;p&gt;The main idea behind structural directives is that &lt;strong&gt;they're directives that will wrap the tag that you've applied it to inside of a template without the need for an &lt;code&gt;ng-template&lt;/code&gt; tag&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's look at a basic sample to start:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[renderThis]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RenderThisDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
            &amp;lt;p *renderThis&amp;gt;
                    Rendering from &amp;lt;code&amp;gt;structural directive&amp;lt;/code&amp;gt;
            &amp;lt;/p&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-25-structural-directive-intro?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#embed-views"&gt;Just as we previously used Angular's dependency injection (DI) system to get a reference to the &lt;code&gt;ViewContainerRef&lt;/code&gt;&lt;/a&gt;, we're using DI to get a reference to the &lt;code&gt;TemplateRef&lt;/code&gt; created by the &lt;code&gt;*&lt;/code&gt; in the invocation of this directive and embedding a view.&lt;/p&gt;

&lt;p&gt;Too much CS (computer science) speak? Me too, let's rephrase that. When you add the &lt;code&gt;*&lt;/code&gt; to the start of the directive that's being attached to the element, you're essentially telling Angular to wrap that element in an &lt;code&gt;ng-template&lt;/code&gt; and pass the directive to the newly created template.&lt;/p&gt;

&lt;p&gt;From there, the directive can get a reference to that template from the constructor (as Angular is nice enough to pass the template to our directive when we ask for it [this is what the DI system does]).&lt;/p&gt;

&lt;p&gt;The cool part about structural directives, though? Because they're simply directives, &lt;strong&gt;you can remove the &lt;code&gt;*&lt;/code&gt; and use it with an &lt;code&gt;ng-template&lt;/code&gt; directly&lt;/strong&gt;. Want to use the &lt;code&gt;renderThis&lt;/code&gt; without a structural directive? No problem! Replace the template with the following code block and you've got yourself a rendered template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;renderThis&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
        Rendering from &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;ng-template&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-26-structural-directive-manually-apply?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is for this reason that &lt;strong&gt;only one structural directive can be applied to one element&lt;/strong&gt;. Otherwise, how would it know what order to wrap those directives in? What template should get what reference to what template?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-a-basic-raw-ngif-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Building A Basic &lt;code&gt;*ngIf&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;But rendering a template without changing it in any way isn't a very useful structural directive. Remove that structural directive and your code has exactly the same behavior. However, Angular provides something not-altogether-different from what we started on as a useful utility to hide/show a view based on a boolean's truthiness: &lt;code&gt;ngIf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So if we added an input with the same name as the directive (&lt;a href="#directive-same-name-input"&gt;as we did previously&lt;/a&gt;) to accept a value to check the truthiness of, added an &lt;code&gt;if&lt;/code&gt; statement to render only if the value is true, we have ourselves the start of an &lt;code&gt;ngIf&lt;/code&gt; replacement that we've built ourselves!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[renderThisIf]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RenderThisIfDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;renderThisIf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// `any` since we want to check truthiness, not just boolean `true` or `false`&lt;/span&gt;

    &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderThisIf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;label for="boolToggle"&amp;gt;Toggle me!&amp;lt;/label&amp;gt;
        &amp;lt;input id="boolToggle" type="checkbox" [(ngModel)]="bool"/&amp;gt;
        &amp;lt;div *renderThisIf="bool"&amp;gt;
            &amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-27-render-if-intro?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Super cool! Image we kept developing this structural directive out, but you noticed while running your test (which you should totally have 👀) that toggling the checkbox doesn't actually show anything! This is because it's running the check once on &lt;code&gt;ngOnInit&lt;/code&gt; and not again when the input changes. So let's change that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[renderThisIf]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RenderThisIfDirective&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;renderThisIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-28-render-if-work-toggle-true?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll notice that I removed the &lt;code&gt;OnInit&lt;/code&gt; lifecycle and replaced it with an input &lt;code&gt;set&lt;/code&gt;ter. We could have changed the lifecycle method to use &lt;code&gt;ngOnChanges&lt;/code&gt; to listen for input changes, given that we only have one input, but as your directive adds more inputs and you want to maintain the local state, that logic can get more complex.&lt;/p&gt;

&lt;p&gt;Running our tests again, we see that toggling it once now shows the embedded view, but toggling it again after that does not hide it again. With a simple update to the &lt;code&gt;update&lt;/code&gt; method, we can fix that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-29-render-if-fully-working?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, we're using the &lt;code&gt;clear&lt;/code&gt; method on the parent view ref to remove the previous view when the value is false. Because our structural directive will contain a template only used for this directive, we can safely assume that &lt;code&gt;clear&lt;/code&gt; will only remove templates created within this directive and not from an external source.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-angular-built-it" class="anchor"&gt;
  &lt;/a&gt;
  How Angular Built It
&lt;/h4&gt;

&lt;p&gt;While Angular goes for a more verbose pattern due to additional features available in their structural directive, the implementation is not too different from our own.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/angular/angular/blob/e1f6d1538784eb87f7497bef27e3c313184c2d30/packages/common/src/directives/ng_if.ts#L151"&gt;The following is the Angular source code for that directive&lt;/a&gt;. To make it easier to explain with our current set of knowledge, there have been lines of code removed and a single conditional modified in a very minor way. Outside of these changes, this is largely unchanged.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[ngIf]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NgIf&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NgIfContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NgIfContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_thenTemplateRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NgIfContext&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;|&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_thenViewRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EmbeddedViewRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NgIfContext&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;|&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_viewContainer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;templateRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NgIfContext&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_thenTemplateRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;templateRef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;ngIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$implicit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ngIf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_updateView&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_updateView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$implicit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_thenViewRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_viewContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_thenTemplateRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_thenViewRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_viewContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_thenTemplateRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_viewContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NgIfContext&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;$implicit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;ngIf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Just to recap, let's run through this line-by-line:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;_context&lt;/code&gt; is creating a default of &lt;code&gt;{$implicit: null, ngIf: null}&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;The object shape is defined by the &lt;code&gt;NgIfContext&lt;/code&gt; class below&lt;/li&gt;
&lt;li&gt;This is to be able to pass as a context to the template. While this is not required to understand how Angular implemented this directive in basic terms, it was left in to avoid editing code elsewhere&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We're then defining a variable to keep track of the template reference and the view reference (&lt;a href="https://angular.io/api/core/EmbeddedViewRef"&gt;what &lt;code&gt;createEmbeddedView&lt;/code&gt; returns&lt;/a&gt;) for usage later&lt;/li&gt;
&lt;li&gt;The constructor is then assigning the template reference to the variable, and getting a reference to the view container&lt;/li&gt;
&lt;li&gt;We're then defining an input with the same name as a setter, as we did with our implementation

&lt;ul&gt;
&lt;li&gt;This setter is also calling an update function, just as were with our implementation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The update view is then seeing if the &lt;code&gt;$implicit&lt;/code&gt; value in the context is truthy (as we're assigning the value of the &lt;code&gt;ngIf&lt;/code&gt; input to the &lt;code&gt;$implicit&lt;/code&gt; key on the context)&lt;/li&gt;
&lt;li&gt;Further checks are made to see if there is a view reference already.

&lt;ul&gt;
&lt;li&gt;If there is not, it will proceed to make one (checking first that there is a template to create off of)&lt;/li&gt;
&lt;li&gt;If there is, it will not recreate a view, in order to avoid performance issues by recreating views over-and-over again&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#microsyntax" class="anchor"&gt;
  &lt;/a&gt;
  Microsyntax
&lt;/h2&gt;

&lt;p&gt;Alright, we've made it thus far! The following section is going to be kinda a doozy so if you're feeling tired, a nap is certainly in order. 😴 🛌 Otherwise, let's get up — do a little shoulder shimmy to get ourselves moving for a bit 🏋 (I'm totally not just writing this for my future self who's gonna be editing this, noooope 😬), and dive in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bind-context" class="anchor"&gt;
  &lt;/a&gt;
  Bind Context
&lt;/h3&gt;

&lt;p&gt;Just as Angular parses the rest of the template you pass in to be able to convert your custom Angular components into template tags, &lt;strong&gt;Angular also provides a small language-like syntax into its own query system&lt;/strong&gt;. This syntax is referred to as a "microsyntax" by the Angular devs. &lt;em&gt;This syntax is able to let the user create specific APIs that tie into this syntax and call/leverage specific parts of their code&lt;/em&gt;. Sound vague? I think so too, let's look at a fairly minimal example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;translatePigLatin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// See the code here: https://www.freecodecamp.org/forum/t/freecodecamp-algorithm-challenge-guide-pig-latin/16039/7&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[makePiglatin]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MakePigLatinDirective&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;makePiglatin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;$implicit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translatePigLatin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;p *makePiglatin="'This is a string'; let msg"&amp;gt;
            {{msg}}
        &amp;lt;/p&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-30-microsyntax?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This might look familiar. We're using the &lt;code&gt;$implicit&lt;/code&gt; value from the context within our structural directive! However, &lt;a href="#template-context"&gt;if you review the section we introduced that concept in&lt;/a&gt;, you'll notice that the syntax here is different but similar from a template variable that would be used to bind the context from an &lt;code&gt;ng-template&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;The semicolon is the primary differentiator between the two syntaxes in this particular example. The semicolon marks the end to the previous statement and the start of a new one (the first statement being a binding of the &lt;code&gt;makePiglatin&lt;/code&gt; property in the directive, the second being a binding of the &lt;code&gt;$implicit&lt;/code&gt; context value to the local template variable &lt;code&gt;msg&lt;/code&gt;). This small demo already showcases part of why the microsyntax is so nice — it allows you to have a micro-language to define your APIs.&lt;/p&gt;

&lt;p&gt;Let's continue exploring how leveraging this tool can be advantageous. What if we wanted to export more than a single value in the context? How would we bind those named values?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[makePiglatin]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MakePigLatinDirective&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;makePiglatin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;$implicit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;translatePigLatin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="na"&gt;original&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;p *makePiglatin="'This is a string'; let msg; let ogMsg = original"&amp;gt;
            The message "{{msg}}" is "{{ogMsg}}" in 🐷 Latin
        &amp;lt;/p&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-31-structural-named-context?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just as before, we would use semicolons to split the definitions, then bind the external (as in: from the directive) context value of &lt;code&gt;original&lt;/code&gt; to the local (this template) variable of &lt;code&gt;ogMsg&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-attribute-inputs" class="anchor"&gt;
  &lt;/a&gt;
  Additional Attribute Inputs
&lt;/h3&gt;

&lt;p&gt;With a typical — non-structural — directive, you'd have inputs that you could add to your directive. For example, you could have a directive with the following inputs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[consoleThing]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ConsoleThingDirective&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;consoleThing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And then call them with the following template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;[consoleThing]=&lt;/span&gt;&lt;span class="s"&gt;"'This is a warning from the 👻 of code future, refactor this please'"&lt;/span&gt; &lt;span class="na"&gt;[warn]=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-32-console-non-structural-directive?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This can be super useful for both providing concise APIs as well as provide further functionalities to said directive simply. Structural directives offer similar, although it comes with its own syntax and limitations due to the microsyntax API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[makePiglatin]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MakePigLatinDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;makePiglatin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;makePiglatinCasing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UPPER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lower&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pigLatinVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;translatePigLatin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makePiglatin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makePiglatinCasing&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UPPER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;pigLatinVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pigLatinVal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makePiglatinCasing&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lower&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;pigLatinVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pigLatinVal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;$implicit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pigLatinVal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;original&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makePiglatin&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;p *makePiglatin="'This is a string'; casing: 'UPPER'; let msg; let ogMsg = original"&amp;gt;
            The message "{{msg}}" is "{{ogMsg}}" in 🐷 Latin
        &amp;lt;/p&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-33-pig-latin-microsyntax?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see that I've had to tweak our previous pig latin directive example a bit.&lt;/p&gt;

&lt;p&gt;For starters, I moved away from a &lt;code&gt;set&lt;/code&gt;ter for the input value and towards &lt;code&gt;ngOnInit&lt;/code&gt;, just to ensure that everything was defined in the right timing.&lt;/p&gt;

&lt;p&gt;I'm also binding the value "upper" to &lt;code&gt;makePiglatinCasing&lt;/code&gt; by adding &lt;code&gt;casing: 'UPPER'&lt;/code&gt; to the input to the structural directive and then separating it by &lt;code&gt;;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The magic in the syntax comes from that input name. I know in previous examples I've mentioned when things were similarly named only for readability purposes and not because the syntax demands such — this is not one of those times. &lt;strong&gt;The microsyntax is taking the &lt;code&gt;casing&lt;/code&gt; binding from the input, making the first letter uppercase, then prepending it to the template selector to get the name of the &lt;code&gt;@Input&lt;/code&gt; directive property to pass that value to.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is why we usually call the directive selector the structural directive prefix — it should prefix the names of any of your microsyntax inputs&lt;/strong&gt;. Outside of the prefix rule, there's little else that you'll need to keep in mind with these input names. Want to make it &lt;code&gt;makePiglatinCasingThingHere&lt;/code&gt;? No problem, just change that part of the input syntax to read &lt;code&gt;casingThingHere: 'upper'&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-not-bind-like-a-typical-input" class="anchor"&gt;
  &lt;/a&gt;
  Why not bind like a typical input?
&lt;/h4&gt;

&lt;p&gt;Now, I remember when I was learning a lot of the structural directive stuff, I thought "well this syntax is cool, but it might be a bit ambiguous". I decided I was going to change that a bit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePiglatin=&lt;/span&gt;&lt;span class="s"&gt;"'This is a string'; let msg; let ogMsg = original"&lt;/span&gt; &lt;span class="na"&gt;[makePiglatinCasing]=&lt;/span&gt;&lt;span class="s"&gt;"'UPPER'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    The message "{{msg}}" is "{{ogMsg}}" in 🐷 Latin
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-34-pig-latin-non-binding?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was not, however, greeted by praises on my PR making this change, but rather by an error in my console:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Can't bind to &lt;code&gt;makePiglatinCasing&lt;/code&gt; since it isn't a known property of &lt;code&gt;p&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This may seem strange upon first glance, but remember: &lt;strong&gt;the structural directive wraps the tag it is on the inside of a template&lt;/strong&gt;. Because of this, &lt;em&gt;the &lt;code&gt;makePiglatinCasing&lt;/code&gt; input is not set to the directive anymore, but rather on the &lt;code&gt;p&lt;/code&gt; element inside the template created by the structural directive&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This becomes more apparent when you expand the syntax to look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;makePiglatin=&lt;/span&gt;&lt;span class="s"&gt;"'This is a string'; let msg; let ogMsg = original"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;[makePiglatinCasing]=&lt;/span&gt;&lt;span class="s"&gt;"'UPPER'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        The message "{{msg}}" is "{{ogMsg}}" in 🐷 Latin
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bind-as-you-would-theyre-just-directives" class="anchor"&gt;
  &lt;/a&gt;
  Bind as you would — They're JUST directives!
&lt;/h3&gt;

&lt;p&gt;But, of course, because structural directives are just normal directives under-the-hood, you can use the same directive code you'd expect to, even with some of the binding syntaxes.&lt;/p&gt;

&lt;p&gt;So if we did want to take the non-functional example above and fix it to not use structural directives, we could do so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;[makePiglatin]=&lt;/span&gt;&lt;span class="s"&gt;"'This is a string'"&lt;/span&gt; &lt;span class="na"&gt;[makePiglatinCasing]=&lt;/span&gt;&lt;span class="s"&gt;"'UPPER'"&lt;/span&gt; &lt;span class="na"&gt;let-msg&lt;/span&gt; &lt;span class="na"&gt;let-ogMsg=&lt;/span&gt;&lt;span class="s"&gt;"original"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The message "{{msg}}" is "{{ogMsg}}" in 🐷 Latin&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-35-pig-latin-normal-directive?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-as-endraw-to-preserve-values-in-template-variable" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;as&lt;/code&gt; to preserve values in template variable
&lt;/h3&gt;

&lt;p&gt;One of my favorite tools at the microsyntax's disposal is the &lt;code&gt;as&lt;/code&gt; keyword. On paper, it sounds extremely straightforward and duplicative of the &lt;code&gt;let&lt;/code&gt; keyword:&lt;br&gt;
It saves the context output of a specific value as a template variable.&lt;/p&gt;

&lt;p&gt;If it sounds duplicative with that description, that's because it can absolutely be used in the same ways:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- These do exactly the same things --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePiglatin=&lt;/span&gt;&lt;span class="s"&gt;"let msg casing 'UPPER'; original as ogMsg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePiglatin=&lt;/span&gt;&lt;span class="s"&gt;"let msg casing 'UPPER'; let ogMsg = original"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Because &lt;code&gt;original&lt;/code&gt; is being exported by the &lt;code&gt;makePiglatin&lt;/code&gt; context, you can save the value to a template variable &lt;code&gt;ogMsg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But this example doesn't showcase very much of what makes the &lt;code&gt;as&lt;/code&gt; keyword as powerful as it is: &lt;em&gt;You can preserve the initial value passed to an input&lt;/em&gt;. This can be used to significant effect when passing in complex expressions, such as piped values (in this example, the &lt;a href="https://angular.io/api/common/UpperCasePipe"&gt;uppercase pipe&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;p *ngIf="message | uppercase as uppermessage"&amp;gt;{{uppermessage}}&amp;lt;/p&amp;gt;
        &amp;lt;!-- Will output "HELLO THERE, WORLD" --&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello there, world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-36-as-keyword?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While this example can be seen clearly with this usage of &lt;code&gt;ngIf&lt;/code&gt; , let's try to add it into our &lt;code&gt;pigLatin&lt;/code&gt; example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePiglatin=&lt;/span&gt;&lt;span class="s"&gt;"'test'; let msg; casing 'upper' | uppercase as upperInUpper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{upperInUpper}}: {{msg}}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-37-pig-latin-as-keyword-broken?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, we're expecting &lt;code&gt;'upper'&lt;/code&gt; to be turned into &lt;code&gt;'UPPER'&lt;/code&gt; by the &lt;code&gt;uppercase&lt;/code&gt; pipe, then to be passed as the input to &lt;code&gt;makePiglatinCasing&lt;/code&gt; and for the &lt;code&gt;$implicit&lt;/code&gt; value of that context to be assigned to a local variable &lt;code&gt;msg&lt;/code&gt;. If you load this, you'll noticed that the uppercased pig lattin displays as expected but the &lt;code&gt;upperInUpper&lt;/code&gt; variable (which we expected to be &lt;code&gt;'UPPER'&lt;/code&gt;) is undefined.&lt;/p&gt;

&lt;p&gt;The reason is because we're not exporting a key of &lt;code&gt;makePiglatinCasing&lt;/code&gt; in our context to supply this value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentViewRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;$implicit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pigLatinVal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;original&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makePiglatin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;makePiglatinCasing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makePiglatinCasing&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-38-pig-latin-as-keyword?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we're exporting the output with the &lt;code&gt;as&lt;/code&gt;, it should show on-screen as expected. So why is this? &lt;strong&gt;Well, &lt;code&gt;as&lt;/code&gt; exports the outputted value that it's bound to.&lt;/strong&gt; In this case, we're binding the value to &lt;code&gt;casing&lt;/code&gt; (because that's what &lt;code&gt;'upper'&lt;/code&gt; is being passed as an input to).&lt;/p&gt;

&lt;p&gt;Of course, this means that you can send any value as the context. Change the code to read:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;$implicit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pigLatinVal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makePiglatin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;makePiglatinCasing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;See? Any value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And the DOM would now show:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;See? Any value: ISTHAY ISWAY AWAY ESTTAY&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#but-it-worked-in-raw-ngif-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  But it worked in &lt;code&gt;ngIf&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;And this is true, but only because the Angular devs were kind enough to make this syntax approachable without having to understand the inner-workings of it before using it.&lt;/p&gt;

&lt;p&gt;If we &lt;a href="#angular-ngif-source"&gt;go back to the original section where we showed &lt;code&gt;ngIf&lt;/code&gt; code from the Angular syntax&lt;/a&gt;, you can see they're using the same trick to provide the &lt;code&gt;as&lt;/code&gt; value for a call to &lt;code&gt;ngIf&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$implicit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ngIf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#syntax-rules" class="anchor"&gt;
  &lt;/a&gt;
  Syntax Rules
&lt;/h2&gt;

&lt;p&gt;Thus far, I've been doing my best to keep the examples using a fairly consistent microsyntax. Because of this, you might think that you must use &lt;code&gt;;&lt;/code&gt; to separate the calls, you need to have things in a certain order, or that there might be more rules you don't yet understand about how to use the syntax. This is not the case — the syntax is fairly loose, actually, although it can be hard to understand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parts-make-up-the-whole" class="anchor"&gt;
  &lt;/a&gt;
  Parts Make Up The Whole
&lt;/h3&gt;

&lt;p&gt;The rules behind microsyntax can seem overwhelming, so let's take a look at each part on their own before coming them together.&lt;/p&gt;

&lt;p&gt;Angular's microsyntax has 4 building blocks, that when combined in a particular way, make up the entire microsyntax API. These building blocks are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Expressions&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;as&lt;/code&gt; keyword&lt;/li&gt;
&lt;li&gt;Keyed expressions&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;let&lt;/code&gt; bindings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3aUstI4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unicorn-utterances.com/posts/angular-templates-start-to-source/microsyntax.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3aUstI4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unicorn-utterances.com/posts/angular-templates-start-to-source/microsyntax.svg" alt="A chart taking a microsyntax and turning it into a diagram. This diagram will be explained thoroughly via text in this section" title="A diagram showing the different parts of the microsyntax"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#expressions" class="anchor"&gt;
  &lt;/a&gt;
  Expressions
&lt;/h4&gt;

&lt;p&gt;The way I describe expressions in simple terms is "anything that, when referenced, returns a value". Like the example above, it could mean using an operator (&lt;code&gt;5 + 3&lt;/code&gt;), calling a function (&lt;code&gt;Math.random()&lt;/code&gt;), a variable (assuming &lt;code&gt;const numberHere = 12&lt;/code&gt;, &lt;code&gt;numberHere&lt;/code&gt;) or just a value itself (&lt;code&gt;'a string here'&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;While "what is and isn’t an expression in JavaScript" could be its own post, suffice it to say that if you’re able to pass a piece of code to a function as an argument — it’s an expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- This code is not super useful in the real-world, --&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- but is used To demonstrate the correct syntaxes --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"'This is an expression'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"'So is this' | uppercase"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"'So is ' + ' this'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"varsToo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"functionsAsWell()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#the-raw-as-endraw-keyword" class="anchor"&gt;
  &lt;/a&gt;
  The &lt;code&gt;as&lt;/code&gt; keyword
&lt;/h4&gt;

&lt;p&gt;The rules behind the &lt;code&gt;as&lt;/code&gt; keyword as an alternative to &lt;code&gt;let&lt;/code&gt; are fairly straightforward:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You &lt;strong&gt;start with the name of the exported key&lt;/strong&gt; from the context&lt;/li&gt;
&lt;li&gt;Then, you &lt;strong&gt;use the name you want to save the value to&lt;/strong&gt; (as a template input variable)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, if you had the context as &lt;code&gt;{personName: 'Corbin', personInterests: ['programming']}&lt;/code&gt;, and wanted to save the value from &lt;code&gt;personInterests&lt;/code&gt; to a template input variable &lt;code&gt;interestList&lt;/code&gt;, you could use: &lt;code&gt;personInterests as interestList&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-keyexp-endraw-key-expressions" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;keyExp&lt;/code&gt; — Key Expressions
&lt;/h4&gt;

&lt;p&gt;A key expression is simply an expression that you’re able to bind to an input on a structural directive.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You &lt;strong&gt;start with the &lt;code&gt;key&lt;/code&gt; you’d like to bind to&lt;/strong&gt; the input that is prefixed with the directive selector (so &lt;code&gt;[ngIf]&lt;/code&gt;’s &lt;code&gt;then&lt;/code&gt; key would map to the &lt;code&gt;ngIfThen&lt;/code&gt; input)&lt;/li&gt;
&lt;li&gt;Then, you &lt;strong&gt;optionally can place a colon&lt;/strong&gt; (having it or not does not affect the behavior in any way)&lt;/li&gt;
&lt;li&gt;You’ll then want to &lt;strong&gt;place an expression that will be passed as the input value&lt;/strong&gt; for the &lt;code&gt;key&lt;/code&gt; you started the key expression with&lt;/li&gt;
&lt;li&gt;Finally, &lt;em&gt;if you’d like to save the input value&lt;/em&gt;, you’re able to &lt;strong&gt;use the &lt;code&gt;as&lt;/code&gt; keyword&lt;/strong&gt;, followed by the name you’d like to save the input value to (as a template input variable)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"inputKey: 'This is an expression' as localVar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"inputKey: 'This is an expression'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"inputKey 'This is an expression' as localVar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"inputKey 'This is an expression'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-let-endraw-bindings" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;let&lt;/code&gt; bindings
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;let&lt;/code&gt; binding:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starts with a &lt;code&gt;let&lt;/code&gt; preserved keyword&lt;/li&gt;
&lt;li&gt;Then lists the template input variable to save the value to&lt;/li&gt;
&lt;li&gt;You’ll then want to put the key of the context you want to save a value of after a &lt;code&gt;=&lt;/code&gt; operator

&lt;ul&gt;
&lt;li&gt;It’s worth mentioning that this is optional. This is because of the &lt;code&gt;$implicit&lt;/code&gt; key in context.
EG: a context of &lt;code&gt;{$implicit: 1, namedKey: 900}&lt;/code&gt; and &lt;code&gt;let smallNum; let largerNum = namedKey&lt;/code&gt; would assign &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;smallNum&lt;/code&gt; and &lt;code&gt;900&lt;/code&gt; to &lt;code&gt;largerNum&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#combining-them-together" class="anchor"&gt;
  &lt;/a&gt;
  Combining Them Together
&lt;/h3&gt;

&lt;p&gt;Now that we understand all of the parts by themselves, let’s combine them together to get a macro view at the microsyntax.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dRxy2Dzg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unicorn-utterances.com/posts/angular-templates-start-to-source/microsyntax_main.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dRxy2Dzg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unicorn-utterances.com/posts/angular-templates-start-to-source/microsyntax_main.svg" alt="A chart showing the microsyntax rules all-together. Rules explained below" title="Microsyntax combined chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The start to any structural directive call is &lt;strong&gt;the &lt;code&gt;*&lt;/code&gt; reserved token&lt;/strong&gt; (a token, in this case, is just a symbol marked to do something). This just marks the directive call to be handled as a structural directive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then, you have &lt;strong&gt;the &lt;code&gt;selector&lt;/code&gt; value&lt;/strong&gt; of the directive itself (which acts as a prefix to the inputs)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You bind to the selector as you would any other input using &lt;strong&gt;&lt;code&gt;="&lt;/code&gt;&lt;/strong&gt; tokens&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The contents of the input itself is where the microsyntax goes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#first-item" class="anchor"&gt;
  &lt;/a&gt;
  First Item
&lt;/h4&gt;

&lt;p&gt;The first item that’s allowed in the microsyntax is either an expression or a &lt;code&gt;let&lt;/code&gt; binding.&lt;/p&gt;

&lt;p&gt;If an expressing &lt;code&gt;*prefix="5 + 3"&lt;/code&gt; is passed, this value will be passed to the same input name as the selector itself: EG the &lt;code&gt;ngIf&lt;/code&gt; input on the directive with the &lt;code&gt;[ngIf]&lt;/code&gt; selector value.&lt;/p&gt;

&lt;p&gt;If a &lt;code&gt;let&lt;/code&gt; binding is the first item, it will work exactly as it’s explained in &lt;a href="#microsyntax-explain-let"&gt;the previous section&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- ✅ These ARE valid for the first item --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"'Expression'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"let localVar = exportKey"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- 🛑 But these are NOT valid for the first item --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"inputKey: 'Input value expression'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"exportKey as localVar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#second-item-and-beyond" class="anchor"&gt;
  &lt;/a&gt;
  Second Item and Beyond
&lt;/h4&gt;

&lt;p&gt;After the first item, &lt;em&gt;you’re able to pass in a &lt;code&gt;let&lt;/code&gt; binding, an &lt;code&gt;as&lt;/code&gt; binding, or a key expression&lt;/em&gt;. &lt;strong&gt;There can be as many of these items in a microsyntax as you’d like, so long as they’re one of those 3&lt;/strong&gt;. These will act the way you expect them to as before. You’re not, however, able to pass an expression to act as the default input value — that’s preserved only for the first item.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"'First'; let localVar = exportKey"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"'First'; exportKey as localVar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"'First'; inputKey: 'Input value expression'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- And you can do more than one! --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"'First'; let localVar = exportKey; exportKey as localVar; inputKey: 'Input value expression'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#optional-separators" class="anchor"&gt;
  &lt;/a&gt;
  Optional Separators
&lt;/h2&gt;

&lt;p&gt;Just as the &lt;code&gt;:&lt;/code&gt; is optional in a &lt;a href="#microsyntax-explain-keyexp"&gt;key expression&lt;/a&gt;, &lt;strong&gt;all separators in the microsyntax are optional&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These are all valid:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- You can mix and match which tokens you leave or don't --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"'First'; let localVar = exportKey; exportKey as localVar; inputKey: 'Input value expression'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Remember that the key expression's `:` token is optional --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"'First'; let localVar = exportKey exportKey as localVar; inputKey 'Input value expression'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- All separator tokens are optional --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"'First' let localVar = exportKey exportKey as localVar inputKey 'Input value expression'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- You can shorten the `as` binding, as it's also part of the `let` binding --&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- as an optional second part --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;*makePigLatin=&lt;/span&gt;&lt;span class="s"&gt;"'First' let localVar = exportKey as localVar; inputKey 'Input value expression'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-remake-raw-ngfor-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Let's remake &lt;code&gt;ngFor&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://angular.io/guide/structural-directives#microsyntax"&gt;The Angular section on structural directives say that you should probably study the &lt;code&gt;ngFor&lt;/code&gt; code to understand them better&lt;/a&gt;. Let's do them one better — let's make our own.&lt;/p&gt;

&lt;p&gt;Well, admittedly, the code for &lt;code&gt;ngFor&lt;/code&gt; is a bit complex and handles a lot more than I think would be covered by the scope of this post; Let's at least make a version of it that supports a limited part of its API (just for conciseness).&lt;/p&gt;

&lt;p&gt;So, what is the API we want to support?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*uniFor="let item of items; let firstItem = isFirst"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sounds reasonable enough. Just to make things even easier on us, let's not worry about re-rendering the list if it updates or properly cleaning up if this directive view unrenders. These requirement changes make our code much more simple for demonstration purposes, but inherently makes the resulting code unfit for production.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[uniFor]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UniForOf&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;AfterViewInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;uniForOf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;viewContainer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewContainerRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TemplateRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="nx"&gt;ngAfterViewInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uniForOf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;ofItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEmbeddedView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;isFirst&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;$implicit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ofItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;uniForOf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uniForOf&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;p *uniFor="let num of numbers | async as allNumbers; let firstItem = isFirst"&amp;gt;
        Number in a list of {{allNumbers.length}} numbers: {{num}}
        &amp;lt;ng-container *ngIf="firstItem"&amp;gt; it's the first number!&amp;lt;/ng-container&amp;gt;
    &amp;lt;/p&amp;gt;
    `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// `import {of} from 'rxjs';`&lt;/span&gt;
    &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://stackblitz.com/edit/start-to-source-39-uni-for?ctl=1&amp;amp;embed=1&amp;amp;file=src/app/app.component.ts"&gt;See this example on StackBlitz&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We're starting with enabling &lt;code&gt;uniFor&lt;/code&gt; as the structural directive name&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then we're defining an input to accept &lt;code&gt;of&lt;/code&gt; as a key in the syntax (to match the &lt;code&gt;ngFor&lt;/code&gt; structural directive syntax).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can then reference this value later with &lt;code&gt;this.uniForOf&lt;/code&gt; just as we are in the &lt;code&gt;ngAfterViewInit&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In that lifecycle method, we're then creating an embedded view for each item in the array&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This view is passed a context with an implicit value (so that &lt;code&gt;_var&lt;/code&gt; in&lt;code&gt;let _var of list&lt;/code&gt; will have the value of this item)&lt;/li&gt;
&lt;li&gt;We also pass the index to the context to give a boolean if an item is the first in a list&lt;/li&gt;
&lt;li&gt;Then we pass a &lt;code&gt;uniForOf&lt;/code&gt; so that we can use &lt;code&gt;as&lt;/code&gt; to capture the value passed to the &lt;code&gt;of&lt;/code&gt; portion of the syntax&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, we use the &lt;a href="https://angular.io/api/common/AsyncPipe"&gt;async pipe&lt;/a&gt; to get the value of the array that's inside of an observable&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;All in all, Angular has extremely powerful tools that it provides to you out-of-the-box for managing templates across your application. While a lot of these examples have been small, silly, and contrived, they've loosely come from patterns I've seen in very large Angular libraries. As a result, utilizing them can solve many problems and serve as a starting point for highly extensible code.&lt;/p&gt;

&lt;p&gt;Other than that, that's it! You reached the end! You did it! 🎊&lt;/p&gt;

&lt;p&gt;Thank you so much for taking the time to read through, always feel free to reach out on Twitter or comment in the comment section below to ask further questions or add to the conversation/teach me something, always happy to help and always loving to learn!&lt;/p&gt;

</description>
      <category>angular</category>
      <category>templates</category>
    </item>
    <item>
      <title>How to update object or array state in React</title>
      <author>Raphael Chaula</author>
      <pubDate>Wed, 20 Jan 2021 17:27:41 +0000</pubDate>
      <link>https://dev.to/raphaelchaula/how-to-update-object-or-array-state-in-react-4cma</link>
      <guid>https://dev.to/raphaelchaula/how-to-update-object-or-array-state-in-react-4cma</guid>
      <description>&lt;p&gt;Ever tried to update object or array state directly in React?&lt;br&gt;
I did that, the state of my component didn't change.&lt;br&gt;
Destructuring the object/array was the solution.&lt;/p&gt;

&lt;p&gt;When you update the state, create a new array/object by destructuring the one in the state, manipulate it then set it as a new value in the state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#object" class="anchor"&gt;
  &lt;/a&gt;
  Object
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;States&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;objectValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setObjectValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateObjectValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Destructure current state object&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;objectvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;objectValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;setObjectValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objectvalue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;States&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#array" class="anchor"&gt;
  &lt;/a&gt;
  Array
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;States&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arrayValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setArrayValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateArrayValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Destructure current state array&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arrayValue&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;arrayValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setArrayValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayvalue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;States&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#happy-hacking" class="anchor"&gt;
  &lt;/a&gt;
  Happy Hacking!
&lt;/h3&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>react</category>
    </item>
    <item>
      <title>Easy way to use Dark Mode in Next.js + Tailwind</title>
      <author>Thomas Ledoux</author>
      <pubDate>Wed, 20 Jan 2021 17:13:35 +0000</pubDate>
      <link>https://dev.to/thomasledoux1/easy-way-to-use-dark-mode-in-next-js-tailwind-2ob1</link>
      <guid>https://dev.to/thomasledoux1/easy-way-to-use-dark-mode-in-next-js-tailwind-2ob1</guid>
      <description>&lt;p&gt;Yesterday I was working on my personal website, and I really wanted to add a dark mode toggle.&lt;br&gt;
I already converted my site to use Tailwind before, so how do I enable dark mode now?&lt;/p&gt;

&lt;p&gt;It's simple: in Tailwind v2 dark mode is built in (&lt;a href="https://tailwindcss.com/docs/dark-mode"&gt;https://tailwindcss.com/docs/dark-mode&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;To be able to toggle the dark mode, you should put &lt;code&gt;darkMode: 'class'&lt;/code&gt; in your &lt;code&gt;tailwind.config.js&lt;/code&gt;. &lt;br&gt;
This configuration implies that a class called &lt;code&gt;dark&lt;/code&gt; will be added to the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag. &lt;br&gt;
Once this class is active, your &lt;code&gt;dark:{class}&lt;/code&gt; classes will become active.&lt;/p&gt;

&lt;p&gt;To link this functionality up with Next.js I used the lightweight &lt;b&gt;next-themes&lt;/b&gt; library (&lt;a href="https://github.com/pacocoursey/next-themes"&gt;https://github.com/pacocoursey/next-themes&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;After installing this library, simply change your _app.js to include the ThemeProvider:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-themes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ThemeProvider&lt;/span&gt; &lt;span class="na"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"class"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ThemeProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;b&gt;Including the &lt;code&gt;attribute="class"&lt;/code&gt; is very important, since this tells the library to use the Tailwind dark theme class.&lt;b&gt;&lt;/b&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;For the toggle button I used the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useTheme&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-themes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTheme&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
  &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Toggle Dark Mode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p-3 h-12 w-12 order-2 md:order-3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;An example of the &lt;code&gt;dark:{class}&lt;/code&gt; code, this will use a purple background color for light mode and a darkgrey color for dark mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fixed bg-purple dark:bg-darkgrey h-16 w-full z-50"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And that's it! The theme is being switched when you click the button. &lt;br&gt;
Live example can be found here: &lt;a href="https://www.thomasledoux.be/"&gt;https://www.thomasledoux.be/&lt;/a&gt;&lt;br&gt;
Github source: &lt;a href="https://github.com/thomasledoux1/website-thomas"&gt;https://github.com/thomasledoux1/website-thomas&lt;/a&gt;&lt;br&gt;
Inspired by: &lt;a href="https://leerob.io"&gt;https://leerob.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>css</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Learn Anything Fast</title>
      <author>Jared Nielsen</author>
      <pubDate>Wed, 20 Jan 2021 16:41:29 +0000</pubDate>
      <link>https://dev.to/nielsenjared/how-to-learn-anything-fast-2785</link>
      <guid>https://dev.to/nielsenjared/how-to-learn-anything-fast-2785</guid>
      <description>&lt;p&gt;What are you learning this year? &lt;/p&gt;

&lt;p&gt;Perhaps we need to reframe the question: &lt;em&gt;how&lt;/em&gt; are you learning this year? &lt;/p&gt;

&lt;p&gt;Did you make resolutions to learn X or build Y with new hotness Z?&lt;/p&gt;

&lt;p&gt;How’s it going so far?&lt;/p&gt;

&lt;p&gt;Most people don’t stick with their resolutions. Something like 80% of people drop their Gregorian calendar goals by Chinese New Year.&lt;/p&gt;

&lt;p&gt;Why? &lt;/p&gt;

&lt;p&gt;We can boil it down to two factors: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the resolution is too ambitious or too ambiguous or both&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the resolution focuses on product, not process&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are two sides of the same coin. &lt;/p&gt;

&lt;p&gt;If we clearly define our goal and determine a realistic scope, we can focus on the process.&lt;/p&gt;

&lt;p&gt;If we focus on the process, we can achieve amibitious and ambiguous goals. &lt;/p&gt;

&lt;p&gt;“That makes for a nice tweet,” I hear you say. “But I need to know this now!"&lt;/p&gt;

&lt;p&gt;How do we focus on process &lt;em&gt;and&lt;/em&gt; quickly learn new skills? &lt;/p&gt;

&lt;p&gt;How do we learn fast and make things? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-fast-and-make-things-with-ultralearning" class="anchor"&gt;
  &lt;/a&gt;
  Learn Fast and Make Things with Ultralearning
&lt;/h2&gt;

&lt;p&gt;In his book of the same title, Scott Young defines &lt;a href="https://amzn.to/33IZMF0"&gt;ultralearning&lt;/a&gt; as: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A strategy for acquiring skills and knowledge that is both self-directed and intense.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Young describes the pursuits of several "ultralearners", including himself, who set out to learn new and challenging topics on short timelines, such as computer science degrees, public speaking, and foreign languages. If this sounds extreme to you, you would be right. But Young counters our initial skepticism: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Although the ultralearners are an extreme group of people, this approach to things holds potential for normal professionals and students. What if you could create a project to quickly learn the skills to transition to a new role, project, or even profession? ...What if you could learn a new language, simulate a university degree program, or become good at something that seems impossible to you right now?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, what if? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-want-to-learn-fast-and-make-things" class="anchor"&gt;
  &lt;/a&gt;
  Why Do We Want to Learn Fast and Make Things?
&lt;/h2&gt;

&lt;p&gt;The changing pace of technology is fast and to succeed, we need to learn how to learn at the same speed. &lt;/p&gt;

&lt;p&gt;According to Young, &lt;a href="https://amzn.to/33IZMF0"&gt;Ultralearning&lt;/a&gt; is...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;...a potent skill for dealing with a changing world. The ability to learn hard things quickly is going to become increasingly valuable, and thus it is worth developing to whatever extent you can, even if it requires some investment first.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can divide our need to learn fast between two primary motivations: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;professional&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;personal&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we're lucky, these are one and the same. Let's look at them separately. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ultralearning-for-professional-growth" class="anchor"&gt;
  &lt;/a&gt;
  Ultralearning for Professional Growth
&lt;/h3&gt;

&lt;p&gt;We want to use ultralearning for work because, according to Young, “...rapidly learning hard skills can have a greater impact than years of mediocre striving on the job.” There are three main cases for the application of ultralearning strategies: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;accelerating the career you have&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;transitioning to a new career&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cultivating a hidden advantage in a competitive world&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Young argues that there are three factors that drive a need for us to adopt ultralearning strategies in our professional lives: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Average is over&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tuition is too high&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New frontiers in learning&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#average-is-over" class="anchor"&gt;
  &lt;/a&gt;
  Average Is Over
&lt;/h4&gt;

&lt;p&gt;Ubiquitous computing and automation create a "skill polarization", in which the middle ground disappears and jobs are now divided between high- and low-skilled categories. Moving into, or even staying in, the high-skilled category requires constant learning and specialization. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tuition-is-too-high" class="anchor"&gt;
  &lt;/a&gt;
  Tuition is Too High
&lt;/h4&gt;

&lt;p&gt;Somewhat related to the above, a polarization occurred with higher education: the cost of tuition increased, but the skills required to succeed in today's economy decreased. A college degree is no longer a guarantee.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#new-frontiers-in-learning" class="anchor"&gt;
  &lt;/a&gt;
  New Frontiers in Learning
&lt;/h4&gt;

&lt;p&gt;Anyone, anywhere, can learn almost anything using resources that are freely available online. According to Young, "...for those who know how to use technology wisely, it is the easiest time in history to teach yourself something new.”&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ultralearning-for-personal-growth" class="anchor"&gt;
  &lt;/a&gt;
  Ultralearning for Personal Growth
&lt;/h3&gt;

&lt;p&gt;On the flip side, we may want to use ultralearning for personal reasons because “...your deepest moments of happiness don't come from doing easy things; they come from realizing your potential and overcoming your own limiting beliefs about yourself.”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-learn-fast-and-make-things" class="anchor"&gt;
  &lt;/a&gt;
  How to Learn Fast and Make Things
&lt;/h2&gt;

&lt;p&gt;The first step to learn anything fast is to find time. &lt;/p&gt;

&lt;p&gt;Easier said than done, I know.&lt;/p&gt;

&lt;p&gt;Young recognizes this dilemma and identifies three approaches to creating time for ultralearning projects: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Part-time projects, in which you wholly immerse yourself in the ultralearning project as though it were a part-time job. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learning sabbaticals, in which you pursue ultralearning during gaps in work and school.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reimagining existing learning efforts, in which you integrate ultralearning principles into the time and energy you already devote to learning.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Young then outlines nine principles for a successful ultralearning project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Metalearning: First Draw a Map&lt;/strong&gt;. Start by learning how to learn the subject or skill you want to tackle. Discover how to do good research and how to draw on your past competencies to learn new skills more easily.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Focus: Sharpen Your Knife&lt;/strong&gt;. Cultivate the ability to concentrate. Carve out chunks of time when you can focus on learning, and make it easy to just do it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Directness: Go Straight Ahead&lt;/strong&gt;. Learn by doing the thing you want to become good at. Don’t trade it off for other tasks, just because those are more convenient or comfortable. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Drill: Attack Your Weakest Point&lt;/strong&gt;. Be ruthless in improving your weakest points. Break down complex skills into small parts; then master those parts and build them back together again.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Retrieval: Test to Learn&lt;/strong&gt;. Testing isn’t simply a way of assessing knowledge but a way of creating it. Test yourself before you feel confident, and push yourself to actively recall information rather than passively review it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Feedback: Don’t Dodge the Punches&lt;/strong&gt;. Feedback is harsh and uncomfortable. Know how to use it without letting your ego get in the way. Extract the signal from the noise, so you know what to pay attention to and what to ignore. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Retention: Don’t Fill a Leaky Bucket&lt;/strong&gt;. Understand what you forget and why. Learn to remember things not just for now but forever.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Intuition: Dig Deep Before Building Up&lt;/strong&gt;. Develop your intuition through play and exploration of concepts and skills. Understand how understanding works, and don’t recourse to cheap tricks of memorization to avoid deeply knowing things.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Experimentation: Explore Outside Your Comfort Zone&lt;/strong&gt;. All of these principles are only starting points. True mastery comes not just from following the path trodden by others but from exploring possibilities they haven’t yet imagined. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There's no one-size-fits-all strategy for ultralearning. You will need to adapt these principles to the needs of your project and map them to your timeline. &lt;/p&gt;

&lt;p&gt;Learn fast and make things! &lt;/p&gt;




&lt;p&gt;Want to stay in the loop? I write a weekly newsletter about programming, problem solving and lifelong learning. &lt;/p&gt;

&lt;p&gt;&lt;a href="http://eepurl.com/cP8CMn"&gt;Sign up for &lt;em&gt;The Solution&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>learning</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>Create a 3D product landing page with ThreeJs and React</title>
      <author>Richard Haines </author>
      <pubDate>Wed, 20 Jan 2021 16:17:33 +0000</pubDate>
      <link>https://dev.to/takeshape/create-a-3d-product-landing-page-with-threejs-and-react-3coh</link>
      <guid>https://dev.to/takeshape/create-a-3d-product-landing-page-with-threejs-and-react-3coh</guid>
      <description>&lt;p&gt;We are going to be creating a product landing page which will utilize 3D models and particle effects to take product showcasing to a whole new level. The goal of this tutorial is to introduce you to the concepts of working with a 3D environment in the browser, while using modern tooling, to create your own highly performant 3D sites.&lt;/p&gt;

&lt;p&gt;The final project can be viewed at &lt;a href="https://3d-product-page.netlify.app/"&gt;3d-product-page.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the final code can be viewed at &lt;a href="https://github.com/molebox/3d-product-page"&gt;github.com/molebox/3d-product-page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This tutorial assumes some basic knowledge of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;The command line&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-tools-are-we-using" class="anchor"&gt;
  &lt;/a&gt;
  What tools are we using?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#snowpack" class="anchor"&gt;
  &lt;/a&gt;
  Snowpack
&lt;/h3&gt;

&lt;p&gt;We are going to be using &lt;a href="https://www.snowpack.dev/"&gt;snowpack&lt;/a&gt; as our build tool. Its a modern tool that is similar to Webpack, but takes a slightly different approach. Instead of bundling our entire application and recompiling on every code change and save, snowpack only rebuilds single files where the changes have been made. This results in a very fast development process. The term used by the snowpack team is &lt;strong&gt;unbundled development&lt;/strong&gt; where individual files are loaded to the browser during development with ESM syntax. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chakraui" class="anchor"&gt;
  &lt;/a&gt;
  Chakra-ui
&lt;/h3&gt;

&lt;p&gt;Our application will be written in React and use &lt;a href="https://chakra-ui.com/"&gt;Chakra-ui&lt;/a&gt; for styling. Chakra is an accessibility first component library which comes with superb defaults and enables us to build accessible, modular components at speed. Think of styled components with easy theming and composability.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#threejs-and-reactthreefiber" class="anchor"&gt;
  &lt;/a&gt;
  Threejs and react-three-fiber
&lt;/h3&gt;

&lt;p&gt;We will be utilizing Threejs by way of a wonderful React library called &lt;a href="https://github.com/pmndrs/react-three-fiber"&gt;react-three-fiber&lt;/a&gt;, which allows us to easily interact with Three using common React techniques. The library is a renderer for Three, using it we can skip a lot of mundane work such as scene creation and concentrate on composing our components in a declarative way with props and states. &lt;/p&gt;

&lt;p&gt;The renderer allows us to use all of the Three classes, objects and properties as elements in our markup. All classes constructors arguments can be accessed via an &lt;code&gt;args&lt;/code&gt; prop. A simple mesh with a box class can be seen below. Don't worry if you don't understand what this means, we will go over everything shortly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;mesh&lt;/span&gt; &lt;span class="na"&gt;visible&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;boxGeometry&lt;/span&gt; &lt;span class="na"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"geometry"&lt;/span&gt; &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meshStandardMaterial&lt;/span&gt; &lt;span class="na"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"material"&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mdx" class="anchor"&gt;
  &lt;/a&gt;
  MDX
&lt;/h3&gt;

&lt;p&gt;Our page will be rendered in &lt;a href="https://mdxjs.com/"&gt;MDX&lt;/a&gt;, a format which allows us to write JSX and include React components in markdown files. It's a wonderful development experience and one I hope you will fall in love with once we reach the end of the tutorial. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-the-fun" class="anchor"&gt;
  &lt;/a&gt;
  Install the fun
&lt;/h2&gt;

&lt;p&gt;I have created a handy snowpack template that creates a project with snowpack, chakra and MDX all installed. It also comes with React Router v6 but we wont be using that so will remove that boilerplate. &lt;/p&gt;

&lt;p&gt;Open a new terminal and navigate to your desired project folder and run the following which will create our new project. Change &lt;code&gt;my-new-app&lt;/code&gt; to your apps name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-snowpack-app my-new-app &lt;span class="nt"&gt;--template&lt;/span&gt; snowpack-mdx-chakra
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next we can install our projects dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i @chakra-ui/react @emotion/react @emotion/styled framer-motion react-three-fiber three @react-three/drei react-particles-js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now that we have our dependencies installed we can begin to tear out some of the stuff we wont need. Our landing page will encompass a single page so we can open the &lt;code&gt;mdx-routes.js&lt;/code&gt; file and remove the &lt;code&gt;Nav&lt;/code&gt; component and the page-two route from the &lt;code&gt;MDXRoutes&lt;/code&gt; component. We'll return to this file later to add some styling but for now we can move on.&lt;/p&gt;

&lt;p&gt;Inside the pages folder delete page-two and remove the contents from page-one. Inside the components folder delete the emoji component and add a new folder called 3d. And that's it, we are now ready to begin coding some sick 3D landing page goodness!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-layout" class="anchor"&gt;
  &lt;/a&gt;
  The layout
&lt;/h2&gt;

&lt;p&gt;Open the &lt;code&gt;mdx-layout.js&lt;/code&gt; file located in the components folder. This will wrap our whole app, in our case our one landing page. Our page will consist of a css grid, we'll use grid areas to get a nice visual representation of how our page will layout. Remove what is currently in there and add the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Grid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;desktop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
'edge   .       .         .'
'edge   text    product   .'
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * The base layout for the MDX pages. You can configure this to set how your pages layout should be.
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MDXLayout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;
      &lt;span class="na"&gt;templateColumns&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"10% 1fr 1fr 10%"&lt;/span&gt;
      &lt;span class="na"&gt;templateRows&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"10% 1fr 1fr"&lt;/span&gt;
      &lt;span class="na"&gt;templateAreas&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;desktop&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"brand.background"&lt;/span&gt;
      &lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100vh"&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MDXLayout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Using Chakras Grid component we set the amount of columns to have a responsive padding of 10% of the viewport width on each side of two flexible one fractional units of space. This basically means that the meat of our page will live in the two fractional columns, with each taking up as much space as they need before they hit the 10% padding on each side. Our rows follow the same logic except we save 10% for our header row and the rest takes up as much space as needed. As you can see, we have a background color set on the bg (background) prop. But where does that value come from and what does it mean?&lt;/p&gt;

&lt;p&gt;Open the &lt;code&gt;theme.js&lt;/code&gt; file located in the &lt;code&gt;src&lt;/code&gt; folder. This is our global theme for our app. We are importing the default theme from Chakra, which itself uses the Tailwind default preset. We are then overriding the colors with our own brand colors. The font sizes are also being overridden to allow us to use slightly different sizes to the default. Go ahead and copy the following colors object into the file instead of the current one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;colors: &lt;span class="o"&gt;{&lt;/span&gt;
    ...theme.colors,
    brand: &lt;span class="o"&gt;{&lt;/span&gt;
      red: &lt;span class="s1"&gt;'#ed1c24'&lt;/span&gt;,
      lightGrey: &lt;span class="s1"&gt;'#D6D6D6'&lt;/span&gt;,
      background: &lt;span class="s1"&gt;'#090d12'&lt;/span&gt;,
      text: &lt;span class="s1"&gt;'#FFFfff'&lt;/span&gt;,
    &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;}&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#components-in-mdx" class="anchor"&gt;
  &lt;/a&gt;
  Components in MDX
&lt;/h2&gt;

&lt;p&gt;MDX is just markdown that you can write JSX in. So that means that we can write normal markdown like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# This is a header!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But we can also add to that React components We can even compose React components right in the MDX file! Let's open up the &lt;code&gt;index.js&lt;/code&gt; file in the &lt;code&gt;src&lt;/code&gt; folder and check out how we can add components to our MDX file without using imports.&lt;/p&gt;

&lt;p&gt;Let's break down what's going on in here. If we scroll to the bottom we can see an &lt;code&gt;MDXProvider&lt;/code&gt; wrapping our app. It accepts a components prop into which we have passed a components object declared above. The components object allows us to map React components to markdown elements as well as passing in custom components for use in our MDX files. As you can see, this template has set this all up for us by mapping some basic markdown elements to some Chakra components. Where there is no object key we have passed in a custom component which can be used in the MDX file without importing it as you would in a normal js or jsx file. &lt;/p&gt;

&lt;p&gt;MDX accepts a special key called &lt;code&gt;wrapper&lt;/code&gt; which will wrap the entire file with whatever is passed to it. In our case it will take our previously created layout component along with it's grid and use that to wrap our MDX file. Now that we know where the components are coming from when using them in our MDX file, let's go ahead and write some React in markdown!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-header" class="anchor"&gt;
  &lt;/a&gt;
  The header
&lt;/h2&gt;

&lt;p&gt;Opening up the &lt;code&gt;page-one.mdx&lt;/code&gt; file located in the pages folder, add the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Flex&lt;/span&gt; &lt;span class="na"&gt;gridArea=&lt;/span&gt;&lt;span class="s"&gt;"edge"&lt;/span&gt; &lt;span class="na"&gt;gridRow=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;justify=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt; &lt;span class="na"&gt;ml=&lt;/span&gt;&lt;span class="s"&gt;{6}&lt;/span&gt; &lt;span class="na"&gt;as=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;Image
    w="100px"
    src="https://www.transparentpng.com/thumb/nike-logo/Blc12i-red-nike-logo-clipart-png-photos.png"
    alt="Red Nike Swoosh Logo"
  /&amp;gt;
&lt;span class="nt"&gt;&amp;lt;/Flex&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We are using the Flex component provided to us from Chakra via the &lt;code&gt;MDXProvider&lt;/code&gt;. This component allows us to quickly apply flex box props to the base element, a div. Even though the component is based upon a div we can give it semantic meaning by utilizing the &lt;code&gt;as&lt;/code&gt; props and setting it the header. If we check our layout file again and look at our grid areas we can see that we have &lt;code&gt;edge&lt;/code&gt; on the first and second rows. So we have set the grid area to edge and the row to 1. &lt;/p&gt;

&lt;p&gt;This places our component in the top left hand corner of the page. We have given it a margin-left (ml) so that it doesn't hit the edge. As you can see from the code block above, we are inserting an image. If you navigate to &lt;a href="https://www.transparentpng.com/search.php?q=nike"&gt;this&lt;/a&gt; url you will see that it's a Nike swish (swoosh, tick? I dunno)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-copy" class="anchor"&gt;
  &lt;/a&gt;
  The copy
&lt;/h2&gt;

&lt;p&gt;Let's add some copy to our page. This will be in the first column of our two middle columns. It will hold the title to our page and some copy about the Nike Air Jordan 1's, the product we are showcasing. Directly below the first Flex code block in the &lt;code&gt;page-one.mdx&lt;/code&gt; file add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt;
&lt;span class="na"&gt;gridArea&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
&lt;span class="na"&gt;justify&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;
&lt;span class="na"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"column"&lt;/span&gt;
&lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt;
&lt;span class="na"&gt;maxH&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"500px"&lt;/span&gt;
&lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"90%"&lt;/span&gt;
&lt;span class="na"&gt;p&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"brand.lightGrey"&lt;/span&gt; &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"6xl"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            Air Jordan 1
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt; &lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"80%"&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"relative"&lt;/span&gt; &lt;span class="na"&gt;zIndex&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"101"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;my&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"brand.text"&lt;/span&gt; &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"xl"&lt;/span&gt; &lt;span class="na"&gt;borderTop&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"solid 1px"&lt;/span&gt; &lt;span class="na"&gt;pt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        The Air Jordan that was first produced for Michael Jordan in 1984 was designed by Peter C. Moore. The red and black colorway of the Nike Air Ship, the prototype for the Jordan I, was later outlawed by then-NBA Commissioner David Stern for having very little white on them (this rule, known as the "51 percent" rule, was repealed in the late 2000s).
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;my&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"brand.text"&lt;/span&gt; &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"xl"&lt;/span&gt; &lt;span class="na"&gt;borderBottom&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"solid 1px"&lt;/span&gt; &lt;span class="na"&gt;pb&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        After the Nike Air Ship was banned, Michael Jordan and Nike introduced the Jordan I in colorways with more white, such as the "Chicago" and "Black Toe" colorways. They used the Nike Air Ship's ban as a promotional tool in advertisements, hinting that the shoes gave an unfair competitive advantage. The Air Jordan I was originally released from 1985 to 1986, with re-releases (known as "retros") in 1994, 2001–2004, and 2007 to the present. Along with the introduction of the Retro Air Jordan line up's, the brand has elevated to a household notoriety with star-struck collaborations and unique limited releases.
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we have added another Flex container component, given the grid area of text and some other positional properties. Inside we have added our title and two paragraphs or copy, describing the trainers.&lt;/p&gt;

&lt;p&gt;Next we are going to get a bit fancy and create a custom component to display some text on a vertical axis. As we will be re-using this component we will create it with some defaults but allow for customization. Inside the components folder create a new file called &lt;code&gt;custom-text.js&lt;/code&gt; and add the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@emotion/styled&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Custom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="s2"&gt;`
  transform: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vertical&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rotate(270deg)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;;
  font-size: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fontSize&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fontSize&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;20px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;;
  letter-spacing: 10px;
  cursor: default;
  -webkit-text-stroke: 2px &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#5C5C5C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;;
  -webkit-text-fill-color: transparent;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CustomText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vertical&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Custom&lt;/span&gt; &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fontSize&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;vertical&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;vertical&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Custom&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CustomText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We could have used &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-orientation"&gt;text-orientation&lt;/a&gt; here but I found it wasn't flexible enough for this use case so instead decided to use a good old fashioned transform on the text. We use a styled component so that we can add a text effect (-webkit-text-stroke) which isn't available as a prop with a Chakra Text component. This effect allows us to give the text an stroked outline. It takes the color provided as a prop or just uses the set default grey color. Finally our component accepts some size and orientation props, as well as the actual text it is to display. Next we need to add our new component to the components object which is passed into the &lt;code&gt;MDXProvider&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;components&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MDXLayout&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;MDXLayout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;//...lots of stuff&lt;/span&gt;
  &lt;span class="na"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;SimpleGrid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// Here is our new component!&lt;/span&gt;
  &lt;span class="nx"&gt;CustomText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We'll use this new component to display some vertical text alongside out copy. Below the copy add the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt; &lt;span class="na"&gt;gridArea&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"edge"&lt;/span&gt; &lt;span class="na"&gt;gridRow&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;justify&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt; &lt;span class="na"&gt;align&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CustomText&lt;/span&gt; &lt;span class="na"&gt;vertical&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Innovation"&lt;/span&gt; &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100px"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you now run &lt;code&gt;npm run start&lt;/code&gt; from the root of the project you should see a red Nike tick in the top left, a title of Air Jordan 1 and some copy below it. To the left of that cop you should see the work Innovation written vertically with an grey outline. It's not much to look at so far, let's spice things up a little with a 3D model!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-third-dimension" class="anchor"&gt;
  &lt;/a&gt;
  The third dimension
&lt;/h2&gt;

&lt;p&gt;Before we dive into adding a 3D model to our page let's take a little time to understand how we are going to do that. This isn't some deep dive into Threejs, WebGL and how the react-three-fiber renderer works, rather we will look at what you can use and why you should use it. &lt;/p&gt;

&lt;p&gt;For us to render a 3D model on the page we will need to create a Three scene, attach a camera, some lights, use a mesh to create a surface for our model to live on and finally render all that to the page. We could go vanilla js here and type out all that using Three and it's classes and objects, but why bother when we can use react-three-fiber and rather lovely abstraction library call drei (Three in German).&lt;/p&gt;

&lt;p&gt;We can import a canvas from react-three-fiber which takes care of adding a scene to our canvas. It also lets us configure the camera and numerous other things via props. It's just a React component at the end of the day, all be it one that does a ton of heavy lifting for us. We'll use our canvas to render our model on. The canvas component renders Three elements, not DOM elements. It provides access to Three classes and objects via it's context so any children rendered within it will have access to Three.&lt;/p&gt;

&lt;p&gt;Our canvas can go anywhere on our page but it's important to remember that it will take up the height and width or it's nearest parent container. This is important to remember as if you wanted to display your canvas on the whole screen you would have to do something of a css reset like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nf"&gt;#root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In order to render something, like a shape, to our canvas we need to use a mesh. A mesh is like a base skeleton that an object is made from, like a wireframe. to create a basic shape, such as a sphere, we would have to attach a geometry so that the wireframe can form into a shape, and a material so that it no longer looks just like a wireframe. I like to think of it like chicken wire. You can have a flat piece of chicken wire which you then form into a shape (geometry attached). You can then cover that chicken wire in some material such as a cloth (material attached). To decide where to place an object on the canvas we can use the position prop on the mesh, this prop takes an array as [x, y, z] which follows the logical axis with z as depth.&lt;/p&gt;

&lt;p&gt;Each Three class takes constructor arguments which enable you to modify it's appearance. To pass these constructor arguments to our Three element we use the args prop which again uses the array syntax.  Let's look at an example of this. The box geometry class accepts 3 main arguments, width, height and depth. These can be used like so with react-three-fiber&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Threejs:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BoxGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// react-three-fiber:&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;boxGeometry&lt;/span&gt; &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When creating objects or models it's important to remember to provide the scene with a light source, otherwise the only thing you will be able to see is a black outline of whatever it is you are trying to render. This makes sense if you think about it. You wouldn't be able to see a shape in a dark room, add a light source of any kind and that shape suddenly takes form and has a surface with colors and contours.&lt;/p&gt;

&lt;p&gt;An oldie but a goodie, article in &lt;a href="https://www.smashingmagazine.com/2013/09/introduction-to-polygonal-modeling-and-three-js/"&gt;smashing magazine&lt;/a&gt; that outlines some of the light you can use in Three.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Point. Possibly the most commonly used, the point light works much like a light bulb and affects all objects in the same way as long as they are within its predefined range. These can mimic the light cast by a ceiling light.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/takeshape-article-point-light-d4vgo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spot. The spot light is similar to the point light but is focused, illuminating only the objects within its cone of light and its range. Because it doesn’t illuminate everything equally as the point light does, objects will cast a shadow and have a “dark” side.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/takeshape-article-point-light-forked-qldo2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ambient. This adds a light source that affects all objects in the scene equally. Ambient lights, like sunlight, are used as a general light source. This allows objects in shadow to be viewable, because anything hidden from direct rays would otherwise be completely dark. Because of the general nature of ambient light, the source position does not change how the light affects the scene.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/takeshape-article-spot-light-forked-y4lw7"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hemisphere. This light source works much like a pool-table light, in that it is positioned directly above the scene and the light disperses from that point only.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/takeshape-article-ambient-light-forked-rh4g0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Directional. The directional light is also fairly similar to the point and spot lights, in that it affects everything within its cone. The big difference is that the directional light does not have a range. It can be placed far away from the objects because the light persists infinitely.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/takeshape-article-directional-light-69zoo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Area. Emanating directly from an object in the scene with specific properties, area light is extremely useful for mimicking fixtures like overhanging florescent light and LCD backlight. When forming an area light, you must declare its shape (usually rectangular or circular) and dimension in order to determine the area that the light will cover.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/takeshape-article-directional-light-forked-i1dhj"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We can view the following example which uses the react-three-fiber Three elements and also outlines examples or doing the same thing but with the drei helper library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Canvas&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;mesh&lt;/span&gt;
        &lt;span class="na"&gt;visible&lt;/span&gt; &lt;span class="c1"&gt;// object gets render if true&lt;/span&gt;
        &lt;span class="na"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// An object that can be used to store custom data about the Object3d&lt;/span&gt;
        &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// The position on the canvas of the object [x,y,x]&lt;/span&gt;
        &lt;span class="na"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// The rotation of the object&lt;/span&gt;
        &lt;span class="na"&gt;castShadow&lt;/span&gt; &lt;span class="c1"&gt;// Sets whether or not the object cats a shadow&lt;/span&gt;
        &lt;span class="c1"&gt;// There are many more props.....&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* A spherical shape*/&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;sphereGeometry&lt;/span&gt; &lt;span class="na"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"geometry"&lt;/span&gt; &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* A standard mesh material*/&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meshStandardMaterial&lt;/span&gt;
          &lt;span class="na"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"material"&lt;/span&gt; &lt;span class="c1"&gt;// How the element should attach itself to its parent&lt;/span&gt;
          &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#7222D3"&lt;/span&gt; &lt;span class="c1"&gt;// The color of the material&lt;/span&gt;
          &lt;span class="na"&gt;transparent&lt;/span&gt; &lt;span class="c1"&gt;// Defines whether this material is transparent. This has an effect on rendering as transparent objects need special treatment and are rendered after non-transparent objects. When set to true, the extent to which the material is transparent is controlled by setting it's .opacity property.&lt;/span&gt;
          &lt;span class="na"&gt;roughness&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// The roughness of the material - Defaults to 1&lt;/span&gt;
          &lt;span class="na"&gt;metalness&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// The metalness of the material - Defaults to 0&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*An ambient light that creates a soft light against the object */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ambientLight&lt;/span&gt; &lt;span class="na"&gt;intensity&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*An directional light which aims form the given position */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;directionalLight&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;intensity&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*An point light, basically the same as directional. This one points from under */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pointLight&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;intensity&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* We can use the drei Sphere which has a simple API. This sphere has a wobble material attached to it */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Sphere&lt;/span&gt; &lt;span class="na"&gt;visible&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MeshWobbleMaterial&lt;/span&gt;
          &lt;span class="na"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"material"&lt;/span&gt;
          &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#EB1E99"&lt;/span&gt;
          &lt;span class="na"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// Strength, 0 disables the effect (default=1)&lt;/span&gt;
          &lt;span class="na"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// Speed (default=1)&lt;/span&gt;
          &lt;span class="na"&gt;roughness&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Sphere&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* This sphere has a distort material attached to it */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Sphere&lt;/span&gt; &lt;span class="na"&gt;visible&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MeshDistortMaterial&lt;/span&gt;
          &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#00A38D"&lt;/span&gt;
          &lt;span class="na"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"material"&lt;/span&gt;
          &lt;span class="na"&gt;distort&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// Strength, 0 disables the effect (default=1)&lt;/span&gt;
          &lt;span class="na"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// Speed (default=1)&lt;/span&gt;
          &lt;span class="na"&gt;roughness&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Sphere&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Canvas&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/takeshape-article-3-spheres-el11e"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-model" class="anchor"&gt;
  &lt;/a&gt;
  The model
&lt;/h2&gt;

&lt;p&gt;Now that we have an understanding of what to use let's create a component for a our product model. Inside the 3d folder create a new file called &lt;code&gt;model.js&lt;/code&gt; and add the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useGLTF&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@react-three/drei&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useFrame&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-three-fiber&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ModelLights&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./model-lights&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;scenePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rotation&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;gltf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useGLTF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scenePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mesh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;useFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;mesh&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;mesh&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ModelLights&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;primitive&lt;/span&gt; &lt;span class="na"&gt;object&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;gltf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our component is fairly generic due to the props it takes. The scene path refers to the path to the gltf file that houses the model. The position props which is passed down to the mesh positions the model on the canvas, and the rotation sets the rotation of the model But what is gltf? In a nutshell, it's a specification for loading 3D content. It accepts both JSON (.gltf) or binary (.glb) formats. Instead of storing a single texture or assets like .jgp or .png, gltf packages up all that is needed to show the 3D content. That could include everything from the mesh, geometry, materials and textures. For more information checkout the Three &lt;a href="https://threejs.org/docs/#examples/en/loaders/GLTFLoader"&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To load our model files we use a &lt;a href="https://github.com/pmndrs/drei#usegltf"&gt;helper hook from drei&lt;/a&gt; (useGLTF) which uses useLoader and GTLFLoader under the hood. We use the useFrame hook to run a rotation effect on the model using a ref which we connect to the mesh. The mesh we rotate on the X axis and position according to the provided props.&lt;/p&gt;

&lt;p&gt;We use a primitive placeholder and attach the model scene and finally pass in a separate lights component which we will soon create.&lt;/p&gt;

&lt;p&gt;For our model we will be downloading a free 3D model from Sketchfab. Create a free account and head to this link to download the &lt;a href="https://sketchfab.com/3d-models/air-jordan-1-a4b434181fbb48008ad460722fd53725"&gt;Nike Air Jordan 1's model&lt;/a&gt;. You will want to download the Autoconverted format (glTF), which is the middle option. To access our model files in our application open the public folder at our projects root and add a new folder called shoes, inside this folder paste over the textures folder, scene.bin and scene.gltf files. Now that we have created our product model component and downloaded the model files we need to create the canvas that the model shall live in on our page. Inside the 3d folder create a new file called &lt;code&gt;canvas-container.js&lt;/code&gt; and add the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Suspense&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Canvas&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-three-fiber&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chakra-ui/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * A container with a set width to hold the canvas.
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CanvasContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;fov&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;zIndex&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"999"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Canvas&lt;/span&gt;
        &lt;span class="na"&gt;colorManagement&lt;/span&gt;
        &lt;span class="na"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;fov&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Canvas&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CanvasContainer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our new component has a container div (Box) which takes props for it's width, height and anything else we might fancy passing in. It's z-index is set to a high value as we will be placing some text beneath if. The canvas has a camera set with a field of view (where the higher the number the further away the view). We wrap the children in a &lt;code&gt;Suspense&lt;/code&gt; so that the application doesn't crash while it's loading. &lt;/p&gt;

&lt;p&gt;Now create a new file in the same folder called &lt;code&gt;product.js&lt;/code&gt; and add the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Model&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./model&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;OrbitControls&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@react-three/drei&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CanvasContainer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./canvas-container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * A trainers model
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CanvasContainer&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;fov&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Model&lt;/span&gt;
        &lt;span class="na"&gt;scenePath&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"shoes/scene.gltf"&lt;/span&gt;
        &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.005&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;OrbitControls&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;CanvasContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We want to let our user interact with out model. Importing the orbital controls from drei allows the user to zoom in/out and spin around the model all with their mouse letting them view it from any angle, a cool touch.&lt;/p&gt;

&lt;p&gt;But we won't be able to see anything if we don't add any lights to our canvas. Inside the 3d folder create a new file called model-lights and add the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ModelLights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;directionalLight&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;intensity&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;directionalLight&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;intensity&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ModelLights&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now it's time to add these bad boys to the MDX file. Add the &lt;code&gt;Product&lt;/code&gt; component to the components object the same way we did with the &lt;code&gt;CustomText&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;Now add the following below the Flex component that sets the innovation text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt;
  &lt;span class="na"&gt;gridArea&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"product"&lt;/span&gt;
  &lt;span class="na"&gt;justify&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;
  &lt;span class="na"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"column"&lt;/span&gt;
  &lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt;
  &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"relative"&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;
    &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"absolute"&lt;/span&gt;
    &lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"-15%"&lt;/span&gt;
    &lt;span class="na"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"25%"&lt;/span&gt;
  &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CustomText&lt;/span&gt; &lt;span class="na"&gt;vertical&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#ed1c24"&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Jordan"&lt;/span&gt; &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"200px"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"absolute"&lt;/span&gt; &lt;span class="na"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"35%"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CustomText&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#5C5C5C"&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Air"&lt;/span&gt; &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"200px"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"absolute"&lt;/span&gt; &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"-50%"&lt;/span&gt; &lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"20%"&lt;/span&gt; &lt;span class="na"&gt;zIndex&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CustomText&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#ed1c24"&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"800px"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Setting the grid area to product places our model in the correct row and column of our grid. We give the Flex component a position of relative as we want to absolutely position the text that is underneath the model. This gives our page a sense of depth that is accentuated by the 3D model. If we run our development server again we should we the shoes spinning around to the right of the copy! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-some-glitter" class="anchor"&gt;
  &lt;/a&gt;
  Add some glitter
&lt;/h2&gt;

&lt;p&gt;Our page is looking pretty dope but there are a few more finishing touches that would make it sparkle just that little brighter. Head over to Sktechfab again and download this &lt;a href="https://sketchfab.com/3d-models/basket-bullet-10-lb-d18692ce01d74c368ab953812e3b80d0"&gt;basketball model&lt;/a&gt;. Inside the 3d folder create a new file called &lt;code&gt;basketball.js&lt;/code&gt; and add the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Suspense&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Model&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./model&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CanvasContainer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./canvas-container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * A basketball model
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Basketball&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CanvasContainer&lt;/span&gt;
      &lt;span class="na"&gt;ml&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;fov&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Model&lt;/span&gt;
        &lt;span class="na"&gt;scenePath&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"basketball/scene.gltf"&lt;/span&gt;
        &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.025&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.025&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;CanvasContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Basketball&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Utilizing out generic canvas and model components we are able to create a new component that will render a basketball to the page.  We are going to position this basketball to the left of the Air Jordan title text. Noice. Add the new Basketball component to the component s object like we have done before and open the MDX file and add the new component under the title text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"brand.lightGrey"&lt;/span&gt; &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"6xl"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    Air Jordan 1
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
// Im the new component!
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Basketball&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Sweet! It's almost complete. Subtle animations that aren't obvious to the user straight away are a nice addition to any website. Let's add a glitch effect to our title text which only runs when the site visitor hovers their mouse over the text.&lt;/p&gt;

&lt;p&gt;Inside the components folder create a new file called &lt;code&gt;glitch-text.js&lt;/code&gt; and add the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@emotion/styled&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  position: relative;

  &amp;amp;:hover {
    &amp;amp;:before {
      content: attr(data-text);
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;

      left: 2px;
      text-shadow: -1px 0 #d6d6d6;
      background: #090d12;

      overflow: hidden;
      animation: noise-anim-2 5s infinite linear alternate-reverse;
    }

    &amp;amp;:after {
      content: attr(data-text);
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;

      left: -2px;
      text-shadow: -1px 0 #d6d6d6;
      background: #090d12;
      overflow: hidden;
      animation: noise-anim 1s infinite linear alternate-reverse;
    }

    @keyframes noise-anim {
      0% {
        clip-path: inset(100% 0 1% 0);
      }
      5% {
        clip-path: inset(45% 0 41% 0);
      }
      10% {
        clip-path: inset(8% 0 18% 0);
      }
      15% {
        clip-path: inset(94% 0 7% 0);
      }
      20% {
        clip-path: inset(23% 0 69% 0);
      }
      25% {
        clip-path: inset(21% 0 28% 0);
      }
      30% {
        clip-path: inset(92% 0 3% 0);
      }
      35% {
        clip-path: inset(2% 0 35% 0);
      }
      40% {
        clip-path: inset(80% 0 1% 0);
      }
      45% {
        clip-path: inset(75% 0 9% 0);
      }
      50% {
        clip-path: inset(37% 0 3% 0);
      }
      55% {
        clip-path: inset(59% 0 3% 0);
      }
      60% {
        clip-path: inset(26% 0 67% 0);
      }
      65% {
        clip-path: inset(75% 0 19% 0);
      }
      70% {
        clip-path: inset(84% 0 2% 0);
      }
      75% {
        clip-path: inset(92% 0 6% 0);
      }
      80% {
        clip-path: inset(10% 0 58% 0);
      }
      85% {
        clip-path: inset(58% 0 23% 0);
      }
      90% {
        clip-path: inset(20% 0 59% 0);
      }
      95% {
        clip-path: inset(50% 0 32% 0);
      }
      100% {
        clip-path: inset(69% 0 9% 0);
      }
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our new component uses a styled div component to set its internal css. We state that the following effect shall only run when the element is hovered and then use the pseudo elements to insert some glitchy goodness. The pseudo content is the text passed in as children, we animate some clip paths via some keyframes and give the effect that the text is moving. Add this new component to the components object as &lt;code&gt;GlitchText&lt;/code&gt; and then wrap the title text in the new component in the MDX markup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"brand.lightGrey"&lt;/span&gt; &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"6xl"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;GlitchText&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Air Jordan 1&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;GlitchText&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/xenodochial-currying-01f3f"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finishing-touches" class="anchor"&gt;
  &lt;/a&gt;
  Finishing touches
&lt;/h2&gt;

&lt;p&gt;We've come so far and we have covered some steep terrain. We have taken a broad overview of working with 3D components and models in React, looked at designing layouts using css grid. Utilized a component library to make our life easier and explored how to create cool, interactive markdown pages with MDX. Our product page is basically complete, anyone who came across this on the interwebs would certainly be more drawn in than your run of the mill static product pages. But there is one last thing I would like you to add, something subtle to make the page pop. Let's add some particles! &lt;/p&gt;

&lt;p&gt;We have already installed the package so create a new file inside the component folder called background and add the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Particles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-particles-js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
    &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;absolute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Particles&lt;/span&gt;
      &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;particles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;interactivity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;onhover&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;repulse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will serve as our background to our site. We have absolutely positioned the parent container of the particles so that they take up the whole of the page. Next open the routes file and add a Box component and the new &lt;code&gt;Background&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CSSReset&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chakra-ui/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PageOne&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../pages/page-one.mdx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Background&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./background&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * The routes for the app. When adding new pages add a new route and a corresponding nav link in the Nav component above. Import the new page and add it to the route.
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MDXRoutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CSSReset&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;
      &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"relative"&lt;/span&gt;
      &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt;
      &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt;
      &lt;span class="na"&gt;zIndex&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"99999"&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Background&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;element&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PageOne&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Start up the development server marvel at your handy work! Great job. If everything went according to plan then your site should look just like the demo site  &lt;a href="https://3d-product-page.netlify.app/"&gt;3d-product-page.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap" class="anchor"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Learnt about react-three-fiber, drei and Threejs&lt;/li&gt;
&lt;li&gt;Learnt how to add a canvas to a page and render a shape&lt;/li&gt;
&lt;li&gt;Learnt how to render a 3D model to a page&lt;/li&gt;
&lt;li&gt;Used some super modern (this will age well...) tooling&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We accomplished quite a lot during this tutorial and hopefully there are some take homes that can be used on other projects you create. If you have any questions shoot me a message on Twitter &lt;a href="https://twitter.com/studio_hungry"&gt;@studio_hungry&lt;/a&gt;, I'd be more than happy to have a chinwag about your thoughts and would love to see what you create with your new found 3D knowledge!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>react</category>
    </item>
    <item>
      <title>Jekyll alternatives: The benefits to JavaScript static site generators</title>
      <author>Dave 🧱</author>
      <pubDate>Wed, 20 Jan 2021 15:53:27 +0000</pubDate>
      <link>https://dev.to/takeshape/jekyll-alternatives-the-benefits-to-javascript-static-site-generators-9l9</link>
      <guid>https://dev.to/takeshape/jekyll-alternatives-the-benefits-to-javascript-static-site-generators-9l9</guid>
      <description>&lt;h3&gt;
  &lt;a href="#jekyll-paved-the-way-for-an-entire-ecosystem-of-static-site-generators-to-flourish-but-what-do-these-new-javascript-ssgs-offer-over-jekyll-lets-find-out" class="anchor"&gt;
  &lt;/a&gt;
  Jekyll paved the way for an entire ecosystem of static site generators to flourish, but what do these new JavaScript SSGs offer over Jekyll? Let’s find out!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p2ECn9WX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/41mqzg6p0ne8wq9wsnl7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p2ECn9WX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/41mqzg6p0ne8wq9wsnl7.png" alt="Jekyll logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-wrong-with-jekyll" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What’s wrong with Jekyll?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Hey! Whoa there, I’m not about to start hating on &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, here! I’ve got a real soft spot for that classic SSG - it’s what got me into the &lt;a href="https://jamstack.org/what-is-jamstack/"&gt;Jamstack&lt;/a&gt; in the first place. However, a lot has happened since that first commit &lt;a href="https://en.wikipedia.org/wiki/Jekyll_(software)"&gt;back in October 2008&lt;/a&gt;, and the landscape has grown plenty enough to find out if there are greener pastures elsewhere for us.&lt;/p&gt;

&lt;p&gt;If you’re someone with a long-standing Jekyll site somewhere, think of this article as the lightest of toe dips into the land of JavaScript based static site generators. We’re going to take a look at some alternatives and the benefits we can gain from using JavaScript to build our Jamstack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variety-in-choice" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Variety in choice&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Comparing Jekyll directly to JavaScript isn’t a good idea, and very much “comparing apples to oranges”. Instead, let’s take a look at some of the wide variety of static site generators that are built on top of JavaScript:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7n49cFAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ljrbbicnpgi77lr8b5pc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7n49cFAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ljrbbicnpgi77lr8b5pc.png" alt="Eleventy Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eleventy" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.11ty.dev/"&gt;Eleventy&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Eleventy, or 11ty, is a wonderful SSG that has a lot in common with Jekyll. Liquid templating, Markdown source files, data files and other features are all here with many more for you to utilise. I’ve been using Eleventy a lot and I’m really enjoying it, which I think is due to how similar it feels to Jekyll, while still giving me that vanilla JavaScript power.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q37nukg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3fk6l5p4gjela69fzbo4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q37nukg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3fk6l5p4gjela69fzbo4.png" alt="Next.js Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nextjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you’ve been tempted by &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; and want to use it to build out components, then maybe Next.js is more your bag &lt;del&gt;for generating your site&lt;/del&gt;. Next.js is an open source project created by the team at Vercel, which is an ideal platform to host your Next.js site.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wJVLze7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ezno15q0txhf61oylzji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJVLze7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ezno15q0txhf61oylzji.png" alt="Gatsby Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gatsbyjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby.js&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Gatsby is another static site generator based on React that has a large ecosystem of plugins and documentation. I’d recommend &lt;a href="https://www.gatsbyjs.com/"&gt;checking out their official site&lt;/a&gt; to see if the features suit your project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JJ1FVeL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8qgr3axmys76zywotnb1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JJ1FVeL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8qgr3axmys76zywotnb1.png" alt="Nuxt Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nuxtjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://nuxtjs.org/"&gt;Nuxt.js&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;No, that’s not a typo - it’s really called Nuxt.js. For those unfamiliar with the framework landscape, &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt; is a JavaScript framework that sits in the same space as React. With Nuxt.js, you get all the features you need to create a Jamstack site, but with Vue as the core engine. I’ve used Nuxt.js, and despite my usage being brief, I had a good time writing out components and handling data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dzm9HGik--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bvnrfydm9zxitccubt46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dzm9HGik--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bvnrfydm9zxitccubt46.png" alt="Gridsome Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gridsome" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://gridsome.org/"&gt;Gridsome&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Gridsome is another SSG with Vue at its core, but with an ecosystem more akin to Gatsby. Vue is quite an approachable framework: creating a component has similarities to writing regular HTML. Check out both the &lt;a href="https://vuejs.org/v2/guide/"&gt;Vue docs&lt;/a&gt; and &lt;a href="https://gridsome.org/docs/"&gt;Gridsome docs&lt;/a&gt; to see if it’s a fit for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HF-y4Vd3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jzpqp138vgvjk52riakk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HF-y4Vd3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jzpqp138vgvjk52riakk.png" alt="Scully logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scully" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://scully.io/"&gt;Scully&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The SSGs listed above are some of the most popular out there, so I thought I’d mention Scully to show something a bit different. Scully is based on &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;, a long standing JavaScript framework from Google. From what I’ve seen, Angular isn’t as widely used as React or Vue, but if you’ve had some good exposure to it on other projects, Scully might be just what you’re looking for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#control-over-configuration" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Control over configuration&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;If you’ve used Jekyll as much as I have, you’ll know that it kind of has a strict configuration to it. It’s original focus was blogging, and the method of adding a blog post meant creating files with &lt;a href="https://jekyllrb.com/docs/structure/"&gt;particular names and putting them in particular folders&lt;/a&gt;. It was a similar case when adding a config and collections.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TLhx-ii3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/am5wisx94bsd0r1zetdz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TLhx-ii3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/am5wisx94bsd0r1zetdz.png" alt="Jekyll posts config"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Screenshot for the official Jekyll documentation, on how you need to name your posts in a particular manner for them to work as expected&lt;/p&gt;

&lt;p&gt;With these new JavaScript-based SSGs, you have much more of an open playing field to create your own structures, and configure them to your particular needs and preferences, for example: in an Eleventy project, you can name and organise your files however you wish, then &lt;a href="https://www.11ty.dev/docs/collections/"&gt;configure Eleventy to express those files as a list of blog posts&lt;/a&gt;. Heck, you don’t even have to use files for your blog posts…more on that later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-javascript" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;It’s JavaScript&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;I’ll admit, early in my career, I found JavaScript a bit daunting. It felt so exotic when comparing it to HTML and CSS syntax, which is probably why I warmed to tools like Jekyll to build out my web projects. However, JavaScript is an extremely ubiquitous language, with a vast array of &lt;a href="https://github.com/micromata/awesome-javascript-learning"&gt;resources surrounding it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With that ubiquity comes a lot of people with pre-existing knowledge. If your team already knows a good amount of JavaScript, it’s going to be a big deciding factor for your next project.&lt;/p&gt;

&lt;p&gt;You can write regular, or vanilla, JavaScript right alongside your framework specific code using any of the SSGs mentioned above, for example: I could be writing React components in a Next.js project and switch to ES6 JavaScript in the same file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apis-and-graphql-at-your-fingertips" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;APIs and GraphQL at your fingertips&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Okay, so this for me is the biggest game changer when going with a JavaScript based SSG over Jekyll. With Jekyll, your content has to be in a markdown file; yes, there are ways around this, but you’re going to have a bumpy ride doing it.&lt;/p&gt;

&lt;p&gt;Publishing tools have come a long way and we should be utilising the best tools for the job - the best way to do that is with APIs. Rather than a markdown file, we can use services like &lt;a href="https://www.takeshape.io/articles/building-a-rich-e-commerce-experience-on-the-jamstack-with-takeshape-shopify-and-next-js/"&gt;Shopify&lt;/a&gt; for store products or &lt;a href="https://www.takeshape.io/"&gt;TakeShape&lt;/a&gt; for our pages and posts, which can then be fed straight into our JavaScript SSG project. We can even use those sources all together, which is what the Jamstack is all about: bringing the best tools together to produce a content rich website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Z04f94R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0xk244ix8mmtwaorq6sx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Z04f94R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0xk244ix8mmtwaorq6sx.png" alt="GraphQL Query"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example of TakeShape's GraphQL query language&lt;/p&gt;

&lt;p&gt;With &lt;a href="https://www.takeshape.io/"&gt;TakeShape&lt;/a&gt;, not only can you produce &lt;a href="https://www.takeshape.io/content-editor/"&gt;your own custom CMS with it’s own API&lt;/a&gt;, but you can bring in multiple API resources to create a single endpoint to access all your data. Shopify, &lt;a href="https://www.contentful.com/"&gt;Contentful&lt;/a&gt;, &lt;a href="https://analytics.google.com/analytics/web/"&gt;Google Analytics&lt;/a&gt; and more can be used with &lt;a href="https://www.takeshape.io/mesh/"&gt;Mesh&lt;/a&gt; - a single backend that can be accessed with a single GraphQL API.&lt;/p&gt;

&lt;p&gt;GraphQL is a language for interacting with APIs and comes built into TakeShape. It can also be used with any of the static site generators mentioned above. &lt;a href="https://www.takeshape.io/mesh/"&gt;Take a look at the Mesh feature page&lt;/a&gt;, as well as the official &lt;a href="https://graphql.org/learn/"&gt;GraphQL docs&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-times" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Build times&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;I find it hard to compare build times between SSGs, as they all perform differently with unique levels of complexity and content sizes. From what I’ve seen, my Jekyll projects range from 2 to 10 minutes for a build to complete. If you’re experiencing similar build times, I would consider checking out the alternatives listed higher up in this article and see what might fit your content structure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P9sRQ3wK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tj4u18vlcsq3ftv2607c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P9sRQ3wK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tj4u18vlcsq3ftv2607c.png" alt="Build Times"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Screenshot for from Sean's article, showing graphs they made for the article research&lt;/p&gt;

&lt;p&gt;Sean C Davies does an excellent job of examining and comparing build times of the most commonly used SSGs in &lt;a href="https://css-tricks.com/comparing-static-site-generator-build-times/"&gt;this research article&lt;/a&gt;. You’ll see that results show Jekyll does quite well in most cases, but Eleventy beats it for build times with large amounts of content - the other JavaScript SSGs do begin to catch up with the latter as the file count increases.&lt;/p&gt;

&lt;p&gt;Again, it’s best to do a little research into these SSGs to see which will fit the content structure and feature set you’re aiming for. Which brings me nicely onto…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-whats-best-for-the-job" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Use what’s best for the job&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Bet you’re thinking I’ve cop’d out of this one, and pulled out the classic “It depends™️” for the article's conclusion. That’s certainly not the case; everything I’ve mentioned is valid and should be taken into consideration if you’re thinking of switching from Jekyll in an existing project, or if you’re wanting to switch up your typical stack.&lt;/p&gt;

&lt;p&gt;Jekyll is a great tool, but there are limitations that prevent it from really excelling, especially in client projects. It’s hard to use with an API, its’ configuration is quite specific, and it can be hard to make it flex to different project types.&lt;/p&gt;

&lt;p&gt;But let’s not leave it there! What do you think? Has this article made you consider Eleventy or Next.js more than before, or is Jekyll still pulling at your heartstrings? &lt;a href="https://twitter.com/takeshapeio"&gt;Tweet at @TakeShape on Twitter&lt;/a&gt; - we’d love to hear what you have to say 🐦&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>gatsby</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Learn about real life CI/CD with TDD, at scale and in public.</title>
      <author>lee</author>
      <pubDate>Wed, 20 Jan 2021 15:50:10 +0000</pubDate>
      <link>https://dev.to/leewynne/learn-about-real-life-ci-cd-with-tdd-at-scale-and-in-public-5579</link>
      <guid>https://dev.to/leewynne/learn-about-real-life-ci-cd-with-tdd-at-scale-and-in-public-5579</guid>
      <description>&lt;p&gt;The best way to get involved in modern application development right now is through continuous integration and continuous delivery (CI/CD).&lt;/p&gt;

&lt;p&gt;And the best way to experience it yourself is through an open-source project on Github and I am going to show you how.&lt;/p&gt;

&lt;p&gt;I am going to show you how &lt;a href="https://dev.to"&gt;dev.to&lt;/a&gt; do CI/CD at scale (over 500k members, over 5 million monthly views) with test-driven deployment (TDD), in public.&lt;/p&gt;

&lt;p&gt;The best way to learn is to get involved, so I am going to go through the following stages of CI/CD so that you'll get a real feel for what it is and why dev teams use it. This is what I am going to cover.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forking the &lt;a href="https://github.com/forem/forem"&gt;forem repository&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Checking out the forked source code locally.&lt;/li&gt;
&lt;li&gt;Creating a new branch.&lt;/li&gt;
&lt;li&gt;Implementing a feature.&lt;/li&gt;
&lt;li&gt;Committing and testing the feature locally.&lt;/li&gt;
&lt;li&gt;Pushing the branch back to my fork.&lt;/li&gt;
&lt;li&gt;Creating a pull request.&lt;/li&gt;
&lt;li&gt;Watching the CI/CD pipeline process and code reviews.&lt;/li&gt;
&lt;li&gt;Merged into the main branch and rolled out to over 500k members and millions of daily consumers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the time I have finished, you should have a solid conceptual understanding of CI/CD as there is no better place than to do it in public.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-of-all-what-is-forem-clue-you-are-on-it" class="anchor"&gt;
  &lt;/a&gt;
  First of all, what is Forem? (clue, you are on it)
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Forem is open source software for building communities. Communities for your peers, customers, fanbases, families, friends, and any other time and space where people need to come together to be part of a collective.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;dev.to (or just DEV) is hosted by Forem. It is a community of software developers who write articles, take part in discussions, and build their professional profiles.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/J6VR03Q4GRO12/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/J6VR03Q4GRO12/giphy.gif" alt="forem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Forem is also built on Ruby on Rails, the only programming language (Ruby) and full-stack web framework (Rails) that works with my brain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/forem/forem/pull/12278"&gt;This is the feature that I developed&lt;/a&gt; that ultimately passed the public CI/CD process and was merged into the main production branch and rolled out to over half a million members and millions of daily consumers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-get-started" class="anchor"&gt;
  &lt;/a&gt;
  Let's get started.
&lt;/h3&gt;

&lt;p&gt;We are going to head over to the &lt;a href="https://github.com/forem/forem"&gt;Forem source code on Github and fork the repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Top right, there is a fork button&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JrWqPA3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/3b6tvs9agzcl7g2gwtve.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JrWqPA3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/3b6tvs9agzcl7g2gwtve.png" alt="for the repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit the fork button and the repo will then fork to your Github account. So let's go there to clone the repository locally.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Now forked to my account&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TxHJKutN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/7kn8uthd0jehlxvialc3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TxHJKutN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/7kn8uthd0jehlxvialc3.png" alt="forked from forem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's clone the repo locally. Hit the 'clone' button, 'https' should be highlighted by default, hit the clipboard option to grab the URL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3q_8IuO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/58924uf07ceg5del5la3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3q_8IuO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/58924uf07ceg5del5la3.png" alt="clone locally"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's go ahead and clone the repo locally.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir forem
cd forem
git clone https://github.com/{your-github-username}/forem.git
cd forem  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;(I am doing this from a Mac, if Git isn't installed then I will get a prompt to install the dependencies)&lt;/p&gt;

&lt;p&gt;There we go, we now have the full Forem repo, forked, cloned and git initialised on our local machine. To check that is the case, run 'git remote -v' and the output should display origin fetch and push as the only 2 git remotes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote -v
origin  https://github.com/your-github-account/forem.git (fetch)
origin  https://github.com/your-github-account/forem.git (push)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For the eagle-eyed among you, you may have spotted another button on Forem's Github page named 'Gitpod'.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Gitpod is the shiz&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vdaq2iho--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/utigsfe55d6sh24q8baf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vdaq2iho--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/utigsfe55d6sh24q8baf.png" alt="gitpod"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/gitpod-dev-environments-i/dodmmooeoklaejobgleioelladacbeki?hl=en"&gt;This is an extension available from the Chrome Store&lt;/a&gt;. When installed it dynamically adds the Gitpod button to any public repo on Github.&lt;/p&gt;

&lt;p&gt;So what does Gitpod do? &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Gitpod streamlines developer workflows by providing ready-to-code development environments in your browser - powered by VS Code.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Basically, it allows you to clone, build and work on any Github project within a browser tab, everything built-in. IDE (VS code), embedded test browser, Postgres DB included, full-stack included.&lt;/p&gt;

&lt;p&gt;How it works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install the browser extension&lt;/li&gt;
&lt;li&gt;Go to one of your projects at GitLab, GitHub or Bitbucket &lt;/li&gt;
&lt;li&gt;Click on the Gitpod button and start a dev environment for your project.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Pretty cool right? You could completely avoid cloning and setting up the Forem repo locally and instead, do it in a browser in a few minutes, even from an iPad - yep full stack web development on open source projects on an iPad in a tab, amazing.&lt;/p&gt;

&lt;p&gt;Right, back to our local forked Forem repository. If you just interested in the CI / CD portion of this article you can skip this bit.&lt;/p&gt;

&lt;p&gt;We need to set up Forem to run locally and there are a few prerequisites outlined in the Forem documentation that are needed to successfully build and start it, I am not going to cover those here as they are already detailed out very well in &lt;a href="https://docs.dev.to/installation/mac/"&gt;Forem's own getting started documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If this is a struggle, then I highly recommend the Gitpod option. Once the repo is cloned, it is just a question of running the 2 following commands and you are up and running with a local version of Forem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bin/setup
bin/startup

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Alright, time to get into some CI/CD.&lt;/p&gt;

&lt;p&gt;First thing I need to do here is to create a new branch so that my changes are isolated from the main branch, there are a number of reasons for this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I want to keep my changes separate from my main branch, so I can see them, track them and bin the whole branch of I need too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I need to push this branch back to my forked repository on Github to then create a pull request so that Github can auto-fire it's CI/CD steps before the core Forem team review and approve the code and merge into the main branch.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout -b leewynne/generalize-the-sidebar-campaign-article-published-timeframe
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Okay, I am on my new branch - any changes I make to the code base are now isolated here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/forem/forem/pull/12278"&gt;The feature I developed is detailed here&lt;/a&gt; which allows smaller communities to set the timeframe that posts are counted towards stories highlighted in the campaign sidebar (when enabled) the code is available to view in the pull request.&lt;/p&gt;

&lt;p&gt;Once I made the changes in my new branch, it was time to then run a TDD (test-driven deployment) sequence as I included a test in the code I wrote. Forem uses rspec for integration testing (from the perspective of the developer, not the end-user). This is the first introduction to using TDD as part of the overall CI/CD process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bundle exec rspec spec/requests
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This command runs through all the predefined tests (including mine). I can review the output at the end to decide whether my code passes the tests and everything is working as expected as this test will run again, remotely, when I submit the PR back to Forem - if anything fails then it may not make it to a code review until the failing tests are fixed. In addition, the testing tools used that make the process as robust as possible are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RSpec for testing the Rails backend&lt;/li&gt;
&lt;li&gt;Capybara with webdrivers for acceptance testing&lt;/li&gt;
&lt;li&gt;guard-rspec for automated testing&lt;/li&gt;
&lt;li&gt;Jest for testing the frontend&lt;/li&gt;
&lt;li&gt;jest-axe for detecting basic a11y regressions&lt;/li&gt;
&lt;li&gt;preact-testing-library for testing Preact components&lt;/li&gt;
&lt;li&gt;SimpleCov for tracking overall test coverage on the backend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see even at this stage the foundations are set to ensure that any code that might cause disruption or isn't in line with the overall roadmap gets flagged way before you get to the stage where you might want to submit a PR. This is critical with any software that runs at scale, especially in the public domain. This will give you some insight into how critical a solid CI/CD pipeline is and why TDD (test-driven deployment) and CI/CD is so crucial to performance, stability, rapid evolution, transparent change management, efficient and productive collaboration and quick to market feature integration.&lt;/p&gt;

&lt;p&gt;All tests passed, so I am going to commit the code in my local branch in preparation for pushing it back to my forked version of the Forem repository.&lt;/p&gt;

&lt;p&gt;Again, this is where the CI/CD pipeline kicks in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
git commit -m "generalize the sidebar campaign article published timeframe"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At this point, a few cool things happen locally before I even push the branch. Rubocop and other linters review the code and feedback on any recommendations that I might want to make before I push the code to my fork and create a pull request.&lt;/p&gt;

&lt;p&gt;There is nothing that I need to change so I am going to go ahead and push the code. Staying in my newly created branch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push -u origin leewynne/generalize-the-sidebar-campaign-article-published-timeframe
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Up it goes. Now when I visit the forked version of Forem on my own Github account, I am notified that the push has been successful and I can now create a pull request to kick off the CI/CD and TDD process and hopefully get this feature gets integrated into Forem's main production branch and safely rolled out.&lt;/p&gt;

&lt;p&gt;I hit the 'create PR' button and fill in the form to ensure the core Forem team are given as much information as possible as part of the pull request. Forem also recommends that you use the &lt;a href="https://github.blog/2019-02-14-introducing-draft-pull-requests/"&gt;draft PR option if needed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I submit the PR and then switch over to Forem's Github page to view the automated Github actions that run my new feature through the CI/CD pipeline and robust TDD process.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Github actions that auto fire the CI/CD pipeline&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0htZCR04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/p1vknpjx4fv3v2c0ixj3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0htZCR04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/p1vknpjx4fv3v2c0ixj3.png" alt="CICD Github"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is where we first get introduced to [Travis] CI(&lt;a href="https://www.travis-ci.com/"&gt;https://www.travis-ci.com/&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Travis does something similar to Gitpod in the way it pulls the code and builds it out in an isolated container but then runs all the tests I highlighted previously. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RSpec for testing the Rails backend&lt;/li&gt;
&lt;li&gt;Capybara with webdrivers for acceptance testing&lt;/li&gt;
&lt;li&gt;guard-rspec for automated testing&lt;/li&gt;
&lt;li&gt;Jest for testing the frontend&lt;/li&gt;
&lt;li&gt;jest-axe for detecting basic a11y regressions&lt;/li&gt;
&lt;li&gt;preact-testing-library for testing Preact components&lt;/li&gt;
&lt;li&gt;SimpleCov for tracking overall test coverage on the backend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I ran all these tests locally with my 'bundle exec rspec spec/requests' command so I am confident that I would get a pass here but this is Forem running the same set of tests to ensure the code is safe and passes &lt;strong&gt;before&lt;/strong&gt; it is reviewed. This helps streamline work, no point is reviewing code if all the tests are failing.&lt;/p&gt;

&lt;p&gt;Here are all the tests that my feature went through before then passing to 2 members of the core Forem team for a review:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cEC9Ur-W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/kw2oxim8rmyi9n559453.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cEC9Ur-W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/i/kw2oxim8rmyi9n559453.png" alt="github actions testing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are all sorts of cool things happening here:&lt;/p&gt;

&lt;p&gt;Codeclimate does an automated code review, scoring the code submitted in the PR prior to a human reviewing it.&lt;/p&gt;

&lt;p&gt;Code coverage is also taking place. Code coverage is a metric that can help you understand how much of your source code is actually tested.&lt;/p&gt;

&lt;p&gt;Jest is testing front end Javascript code which is also integrated to test the preact library.&lt;/p&gt;

&lt;p&gt;Once all these tests have passed (and I may need to revisit my feature to make changes if they don't) I can look forward to a member of the core Forem team to perform the first review of the code and advise on any changes. Once the first reviewer is happy then a second review is requested, again the core Forem team will work with you collaboratively to assist in getting you PR over the line. &lt;/p&gt;

&lt;p&gt;That's it! Once all the checks are green you are through the CI/CD pipeline with TDD all checked off, you have been through a review with 2 core Forem team members, all that is left is for your code to merged into the main branch and away it goes, safely into production.&lt;/p&gt;

&lt;p&gt;The git branching element of this process follows the 'Gitflow' methodology, &lt;a href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow"&gt;you can learn more about that here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope that this article gives you an insight into the importance of CI/CD including TDD and that you can see that many organisation do it at scale and in public, you can tune in and watch the process happen, learn from it and contribute to it. &lt;/p&gt;

&lt;p&gt;Personally, I am excited to see how CI/CD and TDD evolves in the future, especially in the public domain.&lt;/p&gt;

&lt;p&gt;Thanks for reading,&lt;br&gt;
Lee&lt;/p&gt;

</description>
      <category>git</category>
      <category>devops</category>
      <category>cicd</category>
      <category>tdd</category>
    </item>
    <item>
      <title>Generate NodeJS / Express project</title>
      <author>Petar Stevovski</author>
      <pubDate>Wed, 20 Jan 2021 15:45:27 +0000</pubDate>
      <link>https://dev.to/pstev/generate-nodejs-express-project-a6b</link>
      <guid>https://dev.to/pstev/generate-nodejs-express-project-a6b</guid>
      <description>&lt;p&gt;I've made a simple CLI program that helps you generate your NodeJS / Express project structure, based on your selected configuration.&lt;/p&gt;

&lt;p&gt;You can check it out here: &lt;a href="https://github.com/pstevovski/express-app-cli"&gt;express-app-cli&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ManbVrJy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pfdmj822wcnwovqi90ui.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ManbVrJy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pfdmj822wcnwovqi90ui.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It creates the following project structure:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tests/            - Unit and integration tests
views/            - If using view engines (pug, handlebars etc.)
src/
  app.ts          - Main entry point of the application
  api/
    index.js      - Main entry point for all defined routes
    routes/       - All the routes go in this folder
  services/       - Business logic
  controllers/    - Route controllers (handlers)
  config/         - ENV's and other configuration related stuff 
  loaders/        - Splitting the start up process (express, database connection, CRON jobs etc.)
  models/         - Database models
  middlewares/    - All custom middlewares (authentication, authorization etc.)
  utils/          - Utility functions (e.g. validations)
  jobs/           - CRON jobs
  types/          - All the types and interfaces that we'll use
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;It currently supports a couple of configuration options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Languages: Javascript, Typescript&lt;/li&gt;
&lt;li&gt;Databases: MongoDB, MySQL, Postgres, SQLite&lt;/li&gt;
&lt;li&gt;Testing libraries: Jest, Chai, Mocha&lt;/li&gt;
&lt;li&gt;Templating engines: Handlebars, PUG, EJS&lt;/li&gt;
&lt;li&gt;ORMs:

&lt;ul&gt;
&lt;li&gt;Mongoose (installed by default with MongoDB)&lt;/li&gt;
&lt;li&gt;Sequelize&lt;/li&gt;
&lt;li&gt;TypeORM&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can install it globally trough:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;npm install -g express-app-cli&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;yarn add global express-app-cli&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then to use it: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;express-app &amp;lt; project-directory &amp;gt; [options]&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It still has some work to be done (testing, refactoring). If you have any ideas, or find any bugs, feel free to open a PR / Issue.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>cli</category>
    </item>
    <item>
      <title>Incident Management in 2021: from Basics to Best Practices</title>
      <author>Better Uptime</author>
      <pubDate>Wed, 20 Jan 2021 15:28:32 +0000</pubDate>
      <link>https://dev.to/betteruptime/incident-management-in-2021-from-basics-to-best-practices-41h6</link>
      <guid>https://dev.to/betteruptime/incident-management-in-2021-from-basics-to-best-practices-41h6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#covering-the-basics" class="anchor"&gt;
  &lt;/a&gt;
  Covering the basics
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#what-is-incident-management" class="anchor"&gt;
  &lt;/a&gt;
  What is incident management?
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://betteruptime.com/blog/incident-management-and-on-call/"&gt;Incident management&lt;/a&gt;&lt;/strong&gt; is the process used by developer and IT operations teams to respond to system failures (incidents) and restore normal service operation as quickly as possible.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-an-incident" class="anchor"&gt;
  &lt;/a&gt;
  What is an incident?
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Incident&lt;/strong&gt; is a broad term describing any event that causes either a complete disruption or a decrease in the quality of a given service. Incidents usually require immediate response of the development or operations team, often referred to as on-call or response teams in incident management.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-parts-of-the-incident-management-process" class="anchor"&gt;
  &lt;/a&gt;
  5 parts of the incident management process
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-monitoring" class="anchor"&gt;
  &lt;/a&gt;
  1. Monitoring
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#what-is-incident-monitoring" class="anchor"&gt;
  &lt;/a&gt;
  What is incident monitoring?
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Monitoring&lt;/strong&gt; for incidents is the first part of any incident management process. Monitoring spots problems within the system and verifies that they are indeed being experienced by the end-users. Once a problem has been identified, an incident is created, and depending on the incident alerting the relevant team members are notified.&lt;/p&gt;

&lt;p&gt;A common example is monitoring accessibility of a company’s homepage. Such automated checking of a specific website is called a monitor. This monitor will automatically check the website every 30 seconds, and if there is a problem and the website becomes unavailable, it will trigger an alert.&lt;/p&gt;

&lt;p&gt;An alert is essentially a notification that includes information about the incident, for example, that the website server was overwhelmed, which might suggest an unexpected spike in traffic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pFqCfuFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ufz6m0462epqsvp6udbk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pFqCfuFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ufz6m0462epqsvp6udbk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Example of a monitor that checks the availability of google.com.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-oncall-scheduling" class="anchor"&gt;
  &lt;/a&gt;
  2. On-call scheduling
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#what-is-oncall" class="anchor"&gt;
  &lt;/a&gt;
  What is on-call?
&lt;/h4&gt;

&lt;p&gt;On-call is a practice where designated team members are available to respond to alerts during specific times. Setting up on-call schedules is vital for any incident management as it assures that the correct person will receive the incident alert from the monitor. When someone is ‘on-call’ it means they are the person who will respond to service issues if they arise.&lt;/p&gt;

&lt;p&gt;For example, if someone is on-call from 12 AM to 12 PM on Tuesday, it means that if there is an incident during this time, be it at 2 in the afternoon or 3 in the morning, they have to be ready to respond.&lt;/p&gt;

&lt;p&gt;The on-call setup is individual for each organization. However, the goal remains the same, make sure that someone on the team is always ready to fix urgent service issues.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G0DffZ1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pqhpcrfxn6zzpcq0yapn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G0DffZ1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pqhpcrfxn6zzpcq0yapn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Example of a on-call duty system.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-alerting" class="anchor"&gt;
  &lt;/a&gt;
  3. Alerting
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#what-is-it-alerting" class="anchor"&gt;
  &lt;/a&gt;
  What is IT alerting?
&lt;/h4&gt;

&lt;p&gt;After the monitor spots an incident, it needs to be passed onto the team that is going to solve it. Incident alerting process ensures that the right person is alerted at the right time and in the right way.&lt;/p&gt;

&lt;p&gt;An alert is a notification that is automatically sent to a specific team or team member. It can be in the form of an SMS, phone call, push notification, and more depending on the team’s communication processes.&lt;/p&gt;

&lt;p&gt;But alerts are not just plain notifications. They often provide detailed information about the incident that might help the team to find the cause and resolve it faster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fyWhKRaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zjw9sjtqtnfoy43e0oma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fyWhKRaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zjw9sjtqtnfoy43e0oma.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Example of an email incident alert for a spacex.com website.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-communication" class="anchor"&gt;
  &lt;/a&gt;
  4. Communication
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#what-is-incident-communication" class="anchor"&gt;
  &lt;/a&gt;
  What is incident communication?
&lt;/h4&gt;

&lt;p&gt;Once an incident happens, it is necessary to communicate it properly with everyone who is affected by it. The response team is automatically notified by the alerting system, but what about other teams inside the company, product users, clients, or potential customers?&lt;/p&gt;

&lt;p&gt;In order to communicate with everyone internally and externally, there are several communication channels available. The most common one is a dedicated status page, which shows the current status of the website.&lt;/p&gt;

&lt;p&gt;For users and customers, an embedded status widget on the affected page is often put to use. Twitter and other social media are also useful channels for broader incident communication.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oz47M8lL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9cmoex3cmzabvjoq84wp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oz47M8lL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9cmoex3cmzabvjoq84wp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Example of a Dedicated status page.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-response" class="anchor"&gt;
  &lt;/a&gt;
  5. Response
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#what-is-incident-response" class="anchor"&gt;
  &lt;/a&gt;
  What is incident response?
&lt;/h4&gt;

&lt;p&gt;Incident response is a process describing how the team collaborates on solving the cause of an incident. This part of the process is very specific to each team as different companies use very different tools and software.&lt;/p&gt;

&lt;p&gt;In general, most of the actual troubleshooting will take place within the specific software, which is believed to be the cause of the incident.&lt;/p&gt;

&lt;p&gt;The thing that incident responses have in common is that they are all being directed from one centralized tool. In this incident management tool, individual team members communicate with each other and share critical updates. It is also a single source of information as it shows the detailed timeline of the incident as well as all the actions that were taken to solve it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s9gyosfB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c59bk0eilyt85cs89drg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s9gyosfB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c59bk0eilyt85cs89drg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Example of centralized incident communication with a detailed incident timeline.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-steps-to-a-bulletproof-incident-management-process" class="anchor"&gt;
  &lt;/a&gt;
  5 steps to a bulletproof incident management process
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-best-incident-monitoring-practices" class="anchor"&gt;
  &lt;/a&gt;
  1. Best incident monitoring practices
&lt;/h3&gt;

&lt;p&gt;Any alerts are only as good as the monitoring tool triggering them. The three main things you want to focus on when setting up monitoring solutions are incident verification, check frequency and alert thresholds.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#incident-verification" class="anchor"&gt;
  &lt;/a&gt;
  Incident verification
&lt;/h4&gt;

&lt;p&gt;Incident verification is essentially how the tool ensures that the incident is indeed occurring. Proper incident verification ensures that no false positives happen and you don’t get meaningless alerts.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#check-frequency" class="anchor"&gt;
  &lt;/a&gt;
  Check frequency
&lt;/h4&gt;

&lt;p&gt;Check frequency is important as it determines how often the monitor checks the desired service. This determines how quickly the potential incidents get spotted and how quickly you get the alert. For example, for uptime checks, the 30-second check frequency is considered to be best practice.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#alert-thresholds" class="anchor"&gt;
  &lt;/a&gt;
  Alert thresholds
&lt;/h4&gt;

&lt;p&gt;Alert thresholds are the conditions under which an alert is triggered. It is vital to set those incidents triggering thresholds to be realistic so only real incidents create an alert. Correct setup of thresholds can assure that no time of the on-call team goes to waste.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-best-oncall-practices" class="anchor"&gt;
  &lt;/a&gt;
  2. Best on-call practices
&lt;/h3&gt;

&lt;p&gt;When it comes to on-call schedules, there is no one-size-fits-all solution. In order to create the most suitable on-call system for your organization, it is important to consider your team size, team locations, individual team members’ abilities, and preferred working hours.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#oncall-rotation" class="anchor"&gt;
  &lt;/a&gt;
  On-call rotation
&lt;/h3&gt;

&lt;p&gt;On-call rotation is a pre-set repeating on-call schedule. On-call rotations are useful as they eliminate the ad hoc approach and create a repeatable system that once established repeats throughout the year.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#team-size" class="anchor"&gt;
  &lt;/a&gt;
  Team size
&lt;/h4&gt;

&lt;p&gt;The first thing to consider when drafting an on-call rotation is the team size. For teams of two, it is common to go with every other day rotations. This means that one person does Monday, Wednesday, Friday, and Sunday and the other one Tuesday, Thursday, and Saturday, with the Sunday duty changing every other week. In the case of larger teams, weekly rotations are a popular practice.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#team-locations" class="anchor"&gt;
  &lt;/a&gt;
  Team locations
&lt;/h4&gt;

&lt;p&gt;When your team is spread across the world you might be able to mitigate the effects of the dreaded night shifts. WIth team members, in different timezones, a follow-the-sun approach can assure that most of the on-call time is spent during sunlight hours. This will create a better work-life balance for the team members and should be applied when possible.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#individual-preferences" class="anchor"&gt;
  &lt;/a&gt;
  Individual preferences
&lt;/h4&gt;

&lt;p&gt;Before creating an on-call rotation, it is vital to talk to everyone involved. Different individual preferences might often help to avoid necessary compromises. For example, a morning person on the team might prefer a 4:00 AM to 4:00 PM duty, while a night owl might be happy taking the 4:00 PM to 4:00 AM one. This way, both can be relatively happy, and there is no need to force anyone into full-day duty rotations.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#team-member-abilities" class="anchor"&gt;
  &lt;/a&gt;
  Team member abilities
&lt;/h4&gt;

&lt;p&gt;In most cases, not all team members have the same knowledge of the different systems, and sometimes they need help from more senior colleagues or the specific system owners. In order to do that, the on-call teams need to set up what happens when an incident needs escalating to another employee.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1y07VK0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s4sgf1nfneosrajzrjwl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1y07VK0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s4sgf1nfneosrajzrjwl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Example of monthly on-call schedule for a team of two.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#escalation-policies" class="anchor"&gt;
  &lt;/a&gt;
  Escalation policies
&lt;/h3&gt;

&lt;p&gt;Escalation policy describes how an on-call team handles incident escalations. Incident is escalated in two cases. The first one is when the first responder isn’t able to solve the issue alone and needs assistance from another team member.&lt;/p&gt;

&lt;p&gt;The second case is when the first on-call person doesn’t acknowledge the incoming alert. This can happen during night shifts when the alert doesn’t wake up the designated team member and the issue is then automatically escalated to another colleague.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#senioritybased-escalation" class="anchor"&gt;
  &lt;/a&gt;
  Seniority-based escalation
&lt;/h4&gt;

&lt;p&gt;The most basic escalation is calling in a more experienced person. Ideally, all the members should be able to solve incidents on their own, but on rare occasions, this is what can be done to assure that the incident is solved.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#functionbased-escalation" class="anchor"&gt;
  &lt;/a&gt;
  Function-based escalation
&lt;/h4&gt;

&lt;p&gt;In some cases, the incident is specific to a system that the first responder is not equipped to resolve. To solve this issue, an escalation to a specific colleague with the needed knowledge of the specific systems is needed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#automatic-escalation" class="anchor"&gt;
  &lt;/a&gt;
  Automatic escalation
&lt;/h4&gt;

&lt;p&gt;Sometimes the first-in-line person doesn’t respond to the alert within a pre-set time. In this case, the incident should be automatically escalated to another team member or, in critical cases, even the whole team.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bf8zP2MW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/43tgsuj0k2e1pex0o0cx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bf8zP2MW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/43tgsuj0k2e1pex0o0cx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Example of an automatic escalation policy.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-best-incident-alerting-practices" class="anchor"&gt;
  &lt;/a&gt;
  3. Best incident alerting practices
&lt;/h3&gt;

&lt;p&gt;Compared to on-call, incident alerting rules are not that individual, and most of them can and should be adopted by all incident response teams. Overall, successful alerting is when your response team gets the minimum necessary amount of alarms, with all the necessary information, and via the right channel.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#use-the-right-notification-channels" class="anchor"&gt;
  &lt;/a&gt;
  Use the right notification channels
&lt;/h4&gt;

&lt;p&gt;There are many different ways to get notified about system downtime. The most common ones are phone calls, SMS, Slack &amp;amp; Microsoft teams, email, and push notifications. Since some alerts are more important than others, it is necessary to distinguish how on-call teams get notified about incidents with different priority levels.&lt;/p&gt;

&lt;p&gt;Phone calls and SMS are a great way to get alerted about critical issues. Slack and email, on the other hand, are preferred for low priority incidents, which might be even of an informative nature rather than something needing an immediate fix.&lt;/p&gt;

&lt;p&gt;When selecting the right notification channels, it really depends on the on-call schedules and on the individual team preferences. For example, phone calls might not be useful when fulfilling an on-call duty in the office, however when at home it might be the best option.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deduplicate-and-group-your-alerts" class="anchor"&gt;
  &lt;/a&gt;
  De-duplicate and group your alerts
&lt;/h4&gt;

&lt;p&gt;When more significant problems happen, multiple alerts are often triggered. A proper alerting system will automatically de-duplicate those alerts. As a result, related alerts will be grouped into a single one, so no redundant or unactionable alerts reach the on-call team.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-actionable-alerts" class="anchor"&gt;
  &lt;/a&gt;
  Create actionable alerts
&lt;/h4&gt;

&lt;p&gt;Getting an alert stating that there is a problem is great, but having the insight into how to solve it is equally important. That is why alerts need to include quality debugging data like helpful event logs, error screenshots, and system performance graphs. This extra information can make the diagnostics process noticeably easier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bAATnU0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mlauiwcpvs4dareyfu2b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bAATnU0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mlauiwcpvs4dareyfu2b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Example of an actionable alert sent via Slack.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#avoid-alert-fatigue" class="anchor"&gt;
  &lt;/a&gt;
  Avoid alert fatigue
&lt;/h4&gt;

&lt;p&gt;Alert or alarm fatigue is a situation where an overwhelming number of alerts received by the on-call team leads to increased response time and, in more severe cases, to missed alerts. The psychological reason behind this is that the more people get exposed to false alerting, the more they are to normalize incoming alerts, tolerate them, and neglect them or even purposefully ignore them.&lt;/p&gt;

&lt;p&gt;By de-duplicating alerts, making them as actionable as possible, and only using the most relevant notification channels, the possibility of alert fatigue can be severely decreased. Read more about how to avoid alert fatigue by measuring what matters in our &lt;a href="https://betteruptime.com/blog/mttr-everything-you-need-to-know/"&gt;MTTR&lt;/a&gt; and incident management KPIs article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-best-incident-communication-practices" class="anchor"&gt;
  &lt;/a&gt;
  4. Best incident communication practices
&lt;/h3&gt;

&lt;p&gt;Incidents happen, and any modern company must be transparent about them because if communicated properly, the damages can often be mitigated. Communication needs to be as fast as possible so whenever the response teams confirms that there is an incident, the following incident resolution should go hand in hand with the incident communication.&lt;/p&gt;

&lt;p&gt;Now when it comes to the distribution of honest and timely incident updates, there are three major channels that are considered best practices.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-useful-status-pages" class="anchor"&gt;
  &lt;/a&gt;
  Create useful status pages
&lt;/h4&gt;

&lt;p&gt;The main incident communication channel for the majority of companies is a dedicated status page. A dedicated status page is a webpage that displays updates about ongoing incidents. When you subscribe to a status page, you automatically receive updates the moment they are posted there by the response team.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#leverage-embedded-status" class="anchor"&gt;
  &lt;/a&gt;
  Leverage embedded status
&lt;/h4&gt;

&lt;p&gt;The easiest way to communicate incidents to your website visitors or users is via embedded status. This embedded widget shows on the top of the website and tells users the incident details. It is usually clickable and leads to a dedicated status page that provides all the necessary information. Communication via widgets can be applied in case of incidents that decrease the performance of the system but don’t create downtime.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dont-overlook-social-media" class="anchor"&gt;
  &lt;/a&gt;
  Don’t overlook social media
&lt;/h4&gt;

&lt;p&gt;Social media are another way of transparently communicating incidents. Many companies choose Twitter to broadcast downtime. It is also possible to combine social media with previously mentioned channels by integrating updates to your status page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uDmOSQ_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/itj5kyb97ix2s23m07jk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uDmOSQ_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/itj5kyb97ix2s23m07jk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Stripe’s status profile on Twitter.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-best-incident-response-practices" class="anchor"&gt;
  &lt;/a&gt;
  5. Best incident response practices
&lt;/h3&gt;

&lt;p&gt;When it comes to actually solving incidents is best to remove any unnecessary manual tasks and diagnostics processes. Any manual tasks of gathering information from different sources can be eliminated by using a centralized mission control tool. The diagnosis process can be easily standardized with an action plan or a runbook.&lt;/p&gt;

&lt;p&gt;Since not all team members are experts in all of the systems that might potentially go down, it is best practice to have an action plan that everyone can follow to diagnose the root cause properly.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#have-an-action-plan" class="anchor"&gt;
  &lt;/a&gt;
  Have an action plan
&lt;/h4&gt;

&lt;p&gt;When it comes to incident response, all teams should have an action plan of what steps to take in a given scenario. An action plan helps any on-call person to access the given problem and gives the response relevant course even when the on-call expert is not available.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#centralize-mission-control" class="anchor"&gt;
  &lt;/a&gt;
  Centralize mission control
&lt;/h4&gt;

&lt;p&gt;A centralized workplace prevents team members from having to search multiple tools and documents to find the necessary information like contact lists, on-call schedules, or escalation policies.&lt;/p&gt;

&lt;p&gt;Centralized mission control also means that a precise timeline of the incident is recorded. This includes critical information like what were the different steps different team members took to resolve the incident as well as what was communicated with the public. Having a single source of truth like this prevents repetition of the same tasks and serves well in accessing the KPIs of the incident resolution process.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dont-underestimate-postmortems" class="anchor"&gt;
  &lt;/a&gt;
  Don’t underestimate postmortems
&lt;/h4&gt;

&lt;p&gt;Postmortems are often overlooked as they are only reported after everything is back to normal, and no immediate action is necessary. But in-depth postmortems and incident analysis can make a significant difference between solving an incident for once and preventing it from occurring ever again in the future.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>monitoring</category>
      <category>devops</category>
      <category>guides</category>
    </item>
    <item>
      <title>An easy way to collect crash reports in our Android libraries</title>
      <author>Avo</author>
      <pubDate>Wed, 20 Jan 2021 14:44:32 +0000</pubDate>
      <link>https://dev.to/avohq/an-easy-way-to-collect-crash-reports-in-our-android-libraries-4hi8</link>
      <guid>https://dev.to/avohq/an-easy-way-to-collect-crash-reports-in-our-android-libraries-4hi8</guid>
      <description>&lt;p&gt;Being an app developer I always liked how easy it is to add crash collection to my apps, but after switching to library development I’ve found myself in an opposite situation. How do I track and analyze crashes in my library?&lt;/p&gt;

&lt;p&gt;Here at Avo we have a couple of open source libraries for mobile. We have part of one of our main products distributed as a library, the &lt;a href="https://github.com/avohq/android-avo-inspector"&gt;Avo Inspector SDK&lt;/a&gt;, and we have our &lt;a href="https://github.com/avohq/android-analytics-debugger"&gt;mobile debugger&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At one point we realized that there is a problem, we don’t have access to crash reports from the libraries. When the library is integrated to a third party app and crashes, that crash is collected by the app and it actually crashes the whole app, which is really bad. At the beginning we were in a situation where we relied on the crash information we get from our clients. We also lacked a good tool to organize the reports, something similar to what you get in Crashlytics for example.&lt;/p&gt;

&lt;p&gt;Our library, Avo Inspector, monitors tracking and collects metadata about it, it's not the core functionality of the app, so we decided that failure of the library should not be terminal to the app. We will collect the crashes when they happen and let the app do it's main job undistracted.&lt;/p&gt;

&lt;p&gt;As with all problems we face in software development, there are multiple possible solutions here with their own drawbacks.&lt;/p&gt;

&lt;p&gt;Most companies solve this problem by having their app with a decent amount of users where they use their sdk and monitor crash reports. Unfortunately it's not our case, since our product is a web app and a set of developer tools.&lt;/p&gt;

&lt;p&gt;Being a seed stage startup with a very small engineering team and huge list of product opportunities we try to utilise existing software as much as possible and invest as much time as we can in development of our product, so the first thing we did to figure out this problem was to look for a well built existing solution. To our great surprise we have not found any. There are quite a few different crash management tools for apps, but nothing dedicated for libraries.&lt;/p&gt;

&lt;p&gt;Technically we can use an app-based solution, but then the dependencies and library initialization may collide if the integrating app uses the same tool for crash reporting internally. Actually duplicate dependencies is not a huge issue and gradle would take care of it for us (read more about how gradle resolves dependencies &lt;a href="https://docs.gradle.org/current/userguide/dependency_resolution.html"&gt;here&lt;/a&gt; and in the worst case will fail the build, while the initialization is trickier. Most of the libraries do not allow having 2 instances sending crashes to 2 different destinations. Another complication is that those app specific crash reporting tools usually collect a lot of additional app data by default that we don't really want to collect as a library, like sessions or user identifiers.&lt;/p&gt;

&lt;p&gt;At that point building our own proxy to collect the crash reports seemed like the only option. We are using &lt;a href="http://sentry.io/"&gt;Sentry.io&lt;/a&gt; in our web app and decided to look into sending crashes there through our own endpoint. But then, when reading the docs, we got another idea. The thing is that alongside an app-specific Android SDK they provide a generic Java SDK that can be used in an Android app.&lt;/p&gt;

&lt;p&gt;This Java SDK actually automatically checked out most of our concerns about using a crash reporting SDK in our library.&lt;/p&gt;

&lt;p&gt;Chances that there would be a conflict are very low, and for those who use Sentry Java SDK we provide a version of our library without the dependency. The Java SDK is not sending additional app-related information. And integration is just a couple of lines of code. And since we are already using Sentry it was just perfect in our case!&lt;/p&gt;

&lt;p&gt;Here is how the code looks in our repo.&lt;/p&gt;

&lt;p&gt;The Sentry Java SDK dependency:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d4J0A32Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zkhdmea47j6czhomatll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d4J0A32Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zkhdmea47j6czhomatll.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.githubusercontent.com/alex-tpom6oh/39713335238b2da3e9ca9b42638ecce6/raw/173897db597b7134de40119390f269deb2398730/import.gradle"&gt;Raw code&lt;/a&gt;&lt;br&gt;
‍&lt;/p&gt;

&lt;p&gt;One thing we had to do is disable uncaught exception handling. By default Sentry, like most other crash reporting tools, registers a global uncaught exceptions handler that reports errors coming from any part of the application. In case of a library, we don’t want to be notified about exceptions that were thrown outside of our own code, so we disabled the global handler like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lb_zYJuW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dpgb2hl5lnvxpwxuszhn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lb_zYJuW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dpgb2hl5lnvxpwxuszhn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.githubusercontent.com/alex-tpom6oh/df0748f6e7c47ffd4712de88d9a0c536/raw/6b8d91d7c333c6b295b714233170a8c14325070d/lookup.java"&gt;Raw code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we initialize the library:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hneHGTXq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ejf6p5q9adabjbyo8ioc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hneHGTXq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ejf6p5q9adabjbyo8ioc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.githubusercontent.com/alex-tpom6oh/fa82504d91130641908e1b2719b0f70c/raw/7cb3ad5155169a9c84243599edd4427c0a66d345/sentryinit.java"&gt;Raw code&lt;/a&gt;&lt;br&gt;
‍&lt;/p&gt;

&lt;p&gt;And finally we wrapped all public methods in a try-catch and added this handler:&lt;/p&gt;

&lt;p&gt;‍&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pwT-EeAP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/47aeufzywabi20edajvy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pwT-EeAP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/47aeufzywabi20edajvy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.githubusercontent.com/alex-tpom6oh/9cd198f0f027cfeaaba060f3c9fdca7e/raw/38b3708ef237f5d5169060002716b5af4b0cf906/handleException.java"&gt;Raw code&lt;/a&gt;&lt;br&gt;
‍&lt;/p&gt;

&lt;p&gt;That’s it!&lt;/p&gt;

&lt;p&gt;We love this solution for the simplicity and the amount of value we get per unit of effort, it's exactly what we need. You can utilize the same approach, improve the stability and quality of your library and make your clients happier, never worrying about crashes from that 3rd party code they pull in!&lt;/p&gt;

&lt;p&gt;P.S.&lt;/p&gt;

&lt;p&gt;In addition to Sentry, &lt;a href="https://www.bugsnag.com/"&gt;Bugsnag&lt;/a&gt; and &lt;a href="https://raygun.com/"&gt;Raygun&lt;/a&gt; have Java SDKs and can likely be used in the same way. We haven't tried them though, please let us know if you are using one of them in an Android app by sending an email to &lt;a href="mailto:dev@avo.app"&gt;dev@avo.app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;P.P.S&lt;/p&gt;

&lt;p&gt;Another great option which is more universal is using the new &lt;a href="https://docs.microsoft.com/en-us/appcenter/diagnostics/upload-crashes"&gt;crash reporting API from AppCenter&lt;/a&gt;. It's quite new and was not present when we did initial research.&lt;/p&gt;

&lt;p&gt;We have considered using it since then and were quite intrigued, but are still staying with Sentry on Android because of the implementation simplicity and the fact that we are using Sentry for our other products.&lt;/p&gt;

&lt;p&gt;In your case utilizing the AppCenter API might be a better option, check it out! Moreover, stay tuned for the news about our iOS crash reporting. They might be posting about AppCenter at some point. 😉&lt;/p&gt;

</description>
      <category>android</category>
      <category>showdev</category>
      <category>github</category>
      <category>java</category>
    </item>
    <item>
      <title>Don't get stuck with out of date dependencies!</title>
      <author>James McMahon</author>
      <pubDate>Wed, 20 Jan 2021 14:22:38 +0000</pubDate>
      <link>https://dev.to/focusedlabs/tools-to-keep-your-dependencies-up-to-date-30n2</link>
      <guid>https://dev.to/focusedlabs/tools-to-keep-your-dependencies-up-to-date-30n2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#for-gradle" class="anchor"&gt;
  &lt;/a&gt;
  For Gradle
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#use-latest-versions-plugin" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/patrikerdes/gradle-use-latest-versions-plugin"&gt;Use Latest Versions Plugin&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Follow the instructions in the repo to add this plugin to your Gradle project, and viola, you should be able to run it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./gradlew useLatestVersions
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will update all your Gradle dependencies to the latest. You'll then need to manually run your tests to ensure everything look kosher.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#for-node" class="anchor"&gt;
  &lt;/a&gt;
  For Node
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#updtr" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/peerigon/updtr"&gt;updtr&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;updtr can be run as either a standalone command or a dev dependency. Once you have it installed, you can run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;updtr
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In your project directory to update all your dependencies. What is &lt;strong&gt;awesome&lt;/strong&gt; about updtr is that it will run your tests to ensure that each dependency updated successfully. Custom test commands can be specified by using the &lt;code&gt;--test&lt;/code&gt; flag. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;This also works for Yarn&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrap-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h1&gt;

&lt;p&gt;Those are the tools I've been using since I've been entrenched in the Java / Node stack. If you have a similar tool for your favorite stack, let me know in the comments below!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>java</category>
      <category>tooling</category>
      <category>bloggolf</category>
    </item>
  </channel>
</rss>
