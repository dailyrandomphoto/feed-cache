<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Build an Email Application using Node JS Express JS with Gmail and Nodemailer - (All in one Article)</title>
      <author>Unclebigbay</author>
      <pubDate>Fri, 18 Jun 2021 07:37:05 +0000</pubDate>
      <link>https://dev.to/unclebigbay/build-an-email-application-using-node-js-express-js-with-gmail-and-nodemailer-all-in-one-article-1c84</link>
      <guid>https://dev.to/unclebigbay/build-an-email-application-using-node-js-express-js-with-gmail-and-nodemailer-all-in-one-article-1c84</guid>
      <description>&lt;p&gt;Hello 😊, my gorgeous friend on the internet 👋, how are you doing today?.&lt;/p&gt;

&lt;p&gt;Sometimes we want to send out a welcome email to our new registered users or send them a link to reset their forgotten password.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is an extracted feature from my HarperDB Hackerthon open source project, I found it difficult to implement, because of resources, so I am saving you from the stress I passed through.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Below you will learn how to send out emails directly from your Node JS Application using your registered Gmail account and Nodemailer, with an interface built with HTML and CSS that is powered by Express JS.&lt;/p&gt;

&lt;p&gt;Don't worry about the complexity of what is listed above, I am going to explain all of them in this article (in a bit).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can check out the final project sample of what you will be building along with me in this article   &lt;a href="https://mailing-application-project.herokuapp.com/"&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you would prefer a series of this article (broken into multiple parts), you can check it out  &lt;a href="https://unclebigbay.com/build-an-email-application-using-node-js-express-js-with-gmail-and-nodemailer-series-15"&gt;HERE&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Note: Some of the block code on dev.to doesn't work well, you can check the canonical url, if you didn't get to copy the code from this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  PREREQUISITES
&lt;/h2&gt;

&lt;p&gt;Before following along in this tutorial, I assume you already have a basic understanding of JavaScript  and that you already have the following setup:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Gmail account&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node installed on your PC&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you do not have a Gmail account setup, click &lt;a href="http://gmail.com"&gt;Here&lt;/a&gt; to register your account and you can also download the Node application by clicking &lt;a href="https://nodejs.org/en/"&gt;Here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before we proceed, kindly note that this is a very long article, because I ensure to explain every concept that is been used in building the application, and this will help you grasp useful concepts in Node JS. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the end of this article, you will learn the following concepts and technologies:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How to kick-start a Node JS application&lt;/li&gt;
&lt;li&gt;Writing your first route (beginners)&lt;/li&gt;
&lt;li&gt;Rendering HTML with Node JS &lt;code&gt;package.json&lt;/code&gt; and explanation of what is inside&lt;/li&gt;
&lt;li&gt;Implementation of Nodemailer&lt;/li&gt;
&lt;li&gt;How to add Multer to your Node JS project&lt;/li&gt;
&lt;li&gt;How to retrieve form data from the HTML form to our Node js Server&lt;/li&gt;
&lt;/ol&gt;



&lt;h3&gt;
  &lt;a href="#what-is-node-js"&gt;
  &lt;/a&gt;
  What is Node JS?
&lt;/h3&gt;

&lt;p&gt;Node JS is a JavaScript framework that allows us to use JavaScript outside of the browser and on the server-side.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Server-side is the system that runs on the server (Node JS runs here), and the client-side is the software that runs on a user's web browser (Vanilla JavaScript or React JS runs here).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To learn more about Node JS check out the official documentation  &lt;a href="https://nodejs.org/en/docs/"&gt;Here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Let us verify that Node JS is successfully installed on your system, run the command below on your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node --version

&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;If there is no error, the command will return the current version of the installed Node on your system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ss6187xH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623272030024/Fq-6EaBvk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ss6187xH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623272030024/Fq-6EaBvk.png" alt="frame_generic_light (2).png"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#what-is-express-js"&gt;
  &lt;/a&gt;
  What is Express JS?
&lt;/h3&gt;

&lt;p&gt;Express JS is a popular framework of Node JS that makes it easier to manage web applications, Express JS is the &lt;strong&gt;E&lt;/strong&gt; in both M*&lt;em&gt;E&lt;/em&gt;&lt;em&gt;RN and M&lt;/em&gt;&lt;em&gt;E&lt;/em&gt;*AN stack.&lt;/p&gt;

&lt;p&gt;To learn more about Express JS check out the official documentation  &lt;a href="https://expressjs.com/"&gt;Here&lt;/a&gt; &lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#what-is-gmail"&gt;
  &lt;/a&gt;
  What is Gmail?
&lt;/h3&gt;

&lt;p&gt;Gmail is a free mail service provided by Google, they enable us to send and receive information (electronic-mail) on their platform.&lt;/p&gt;

&lt;p&gt;To learn more about Gmail and its services you can check it out  &lt;a href="https://en.wikipedia.org/wiki/Gmail"&gt;Here&lt;/a&gt; &lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#what-is-nodemailer"&gt;
  &lt;/a&gt;
  What is Nodemailer?
&lt;/h3&gt;

&lt;p&gt;Nodemailer is a Node JS module (function) that allows us to send emails from our Node JS (Server) Application.&lt;/p&gt;

&lt;p&gt;To learn more about Nodemailer check out the official documentation  &lt;a href="https://nodemailer.com/about/"&gt;Here&lt;/a&gt; &lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-our-node-js-application"&gt;
  &lt;/a&gt;
  Setting up our Node JS Application
&lt;/h2&gt;
&lt;h5&gt;
  &lt;a href="#1-to-begin-our-project-create-a-new-folder-and-name-it-raw-projectmailsender-endraw-"&gt;
  &lt;/a&gt;
  1. To begin our project create a new folder and name it &lt;code&gt;projectMailSender&lt;/code&gt;
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#2-rightclick-on-the-raw-projectmailsender-endraw-and-select-the-raw-git-bash-here-endraw-option"&gt;
  &lt;/a&gt;
  2. Right-click on the &lt;code&gt;projectMailSender&lt;/code&gt; and select the &lt;code&gt;Git bash here&lt;/code&gt; option
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fVJeQy8P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623268952635/DeubjsRqV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fVJeQy8P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623268952635/DeubjsRqV.png" alt="Screenshot of the Gitbash option"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your current directory should be displayed on the bash terminal like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qvUgOQuL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623271780524/_jKNxHlRu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qvUgOQuL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623271780524/_jKNxHlRu.png" alt="frame_generic_light (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are not using Gitbash, ensure to navigate inside the &lt;code&gt;projectMailSender&lt;/code&gt; folder on your &lt;code&gt;cmd&lt;/code&gt;.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#3-lets-proceed-to-generate-our-project-raw-packagejson-endraw-file-by-running-the-code-below"&gt;
  &lt;/a&gt;
  3. Let's proceed to generate our project &lt;code&gt;package.json&lt;/code&gt; file by running the code below  👇
&lt;/h5&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
yarn init -y

&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The &lt;code&gt;yarn init&lt;/code&gt; command is used to create or update a &lt;code&gt;package.json&lt;/code&gt; file interactively. This command will walk you through a question and answer process to create a package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T33mt4LO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623271595332/i-0oVCURz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T33mt4LO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623271595332/i-0oVCURz.png" alt="frame_generic_light.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We skipped some questions about the new package.json that we are creating with the &lt;code&gt;-y&lt;/code&gt; flag, you can check out the questions in your next Node project by running &lt;code&gt;yarn init&lt;/code&gt; without the &lt;code&gt;-y&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that &lt;code&gt;-y&lt;/code&gt; is a shorthand for &lt;code&gt;-yes&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To learn more about the &lt;code&gt;yarn init&lt;/code&gt; command check out the official documentation &lt;a href="https://classic.yarnpkg.com/en/docs/cli/init/"&gt;Here&lt;/a&gt; &lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#whats-inside-packagejson"&gt;
  &lt;/a&gt;
  What's inside package.json?
&lt;/h3&gt;

&lt;p&gt;If the &lt;code&gt;yarn init&lt;/code&gt; command is successful a new file named &lt;code&gt;package.json will be created in our&lt;/code&gt;projectMailSender` folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tuU5ELKp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623358667258/u8yT15-ty.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tuU5ELKp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623358667258/u8yT15-ty.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's take a look at what is inside our &lt;code&gt;package.json&lt;/code&gt; file below 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--43byAZFf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623359018912/0qCcJsTj0d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--43byAZFf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623359018912/0qCcJsTj0d.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#1-name-the-name-of-our-project-folder"&gt;
  &lt;/a&gt;
  1. &lt;strong&gt;name&lt;/strong&gt;: the name of our project folder.
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#2-version-you-can-set-and-update-your-project-version-here"&gt;
  &lt;/a&gt;
  2. &lt;strong&gt;version&lt;/strong&gt;: you can set and update your project version here
&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;1 stands for a major update (version 1), second 0 stands for a minor update for the major update (version 1, with zero updates (the number of updates on version 1)), and finally the last 0 means patch, a very minor update that is not a big deal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;
  &lt;a href="#3-main-every-project-must-have-an-endraw-indexjs-raw-which-serves-as-an-entry-point-for-your-project-you-can-change-this"&gt;
  &lt;/a&gt;
  3. &lt;strong&gt;main&lt;/strong&gt;: every project must have an &lt;code&gt;index.js&lt;/code&gt; which serves as an entry point for your project (you can change this).
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#4-license-your-project-license-goes-here"&gt;
  &lt;/a&gt;
  4. &lt;strong&gt;License&lt;/strong&gt;: your project license goes here.
&lt;/h5&gt;

&lt;p&gt;More information about your project will be stored in the &lt;code&gt;package.json&lt;/code&gt; file if you do not skip the &lt;code&gt;yarn init&lt;/code&gt; command with the &lt;code&gt;-y&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;We will be using a file name &lt;code&gt;index.js&lt;/code&gt; as our project entry point, so let's proceed to create it in our project root 👇.&lt;/p&gt;

&lt;p&gt;You can either run the command below to create the file from your terminal or create it manually.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
touch index.js&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Your project folder should look like this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WW28Ply2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623359863967/ogOChlPQh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WW28Ply2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623359863967/ogOChlPQh.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#installing-express-js"&gt;
  &lt;/a&gt;
  Installing Express JS
&lt;/h2&gt;

&lt;p&gt;Now that we have our project setup, let us proceed to install the Express JS into our project.&lt;br&gt;
Use the command below 👇 to install &lt;code&gt;Express JS&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;yarn add express&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: if you initialized your &lt;code&gt;package.json&lt;/code&gt; file with &lt;code&gt;npm&lt;/code&gt;, kindly stick to it to avoid conflict, let me know in the comment section if you made this mistake.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;Express JS&lt;/code&gt; package should be successfully installed by now let's take a look at our project folder structure again below 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BXPFm5Ff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623360414787/wRh0VvG9P.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BXPFm5Ff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623360414787/wRh0VvG9P.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should also notice from your end that a folder named &lt;code&gt;node_modules&lt;/code&gt; and a file named &lt;code&gt;yarn.lock&lt;/code&gt; has been created automatically in our project folder.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;### &lt;code&gt;node_modules&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is where &lt;code&gt;yarn&lt;/code&gt; or &lt;code&gt;npm&lt;/code&gt; will keep the folders of our installed packages for us to make use of them later.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;To learn more about &lt;code&gt;node_modules&lt;/code&gt; you can check out the official documentation  &lt;a href="https://docs.npmjs.com/cli/v7/configuring-npm/folders"&gt;Here&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;### &lt;code&gt;yarn.lock&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because we are using &lt;code&gt;yarn&lt;/code&gt; as our package manager, &lt;code&gt;yarn&lt;/code&gt; auto-generate this file to keep track of our project dependencies(packages).&lt;br&gt;&lt;/p&gt;

&lt;p&gt;To learn more about &lt;code&gt;yarn.lock&lt;/code&gt; you can check out the official documentation  &lt;a href="https://docs.npmjs.com/cli/v7/configuring-npm/folders"&gt;Here&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Warning:&lt;br&gt;
Do not alter the &lt;code&gt;node_modules&lt;/code&gt; folder and the &lt;code&gt;yarn.lock&lt;/code&gt; file manually.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h3&gt;
  &lt;a href="#creating-our-project-server-with-express-js"&gt;
  &lt;/a&gt;
  Creating our Project Server with Express JS
&lt;/h3&gt;

&lt;p&gt;Copy and paste the code below into your project entry file (&lt;code&gt;index.js&lt;/code&gt; in this tutorial)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// Import express into our project&lt;br&gt;
const express = require("express");&lt;/p&gt;

&lt;p&gt;// Creating an instance of express function&lt;br&gt;
const app = express();&lt;/p&gt;

&lt;p&gt;// The port we want our project to run on&lt;br&gt;
const PORT = 3000;&lt;/p&gt;

&lt;p&gt;// Express allows us to listen to the PORT and trigger a console.log() when you visit the port&lt;br&gt;
app.listen(PORT, () =&amp;gt; {&lt;br&gt;
  console.log(&lt;code&gt;Server is 🏃‍♂️ on port ${PORT}&lt;/code&gt;);&lt;br&gt;
});&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is the minimum way of setting up a server with the Express Node JS framework, I have included comments that are straightforward in the code snippet 👆, so it will be present in your own project for reference.&lt;/p&gt;

&lt;p&gt;Let's proceed to test our server by running the code below in our terminal.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
node index.js&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output 👇
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sUywjhJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623363322308/FeClCz8lc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sUywjhJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623363322308/FeClCz8lc.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-nodemon"&gt;
  &lt;/a&gt;
  Setting up Nodemon
&lt;/h2&gt;

&lt;p&gt;Now that our server is running on our terminal, let's try to change something in our &lt;code&gt;console.log()&lt;/code&gt;, let's say we update the console message below 👇&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;app.listen(PORT, () =&amp;gt; {&lt;br&gt;
  console.log(&lt;code&gt;Server is currently 🏃‍♂️ on port ${PORT}&lt;/code&gt;);&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Save your file and check your terminal, you should notice that the previous message is still displayed, this implies that the server will not restart whenever there is a change in our project directory, we need to do this manually each time we make a change in the project by stopping the server with &lt;code&gt;ctrl + c&lt;/code&gt; and starting it again with &lt;code&gt;node index.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you restart your server, you should get a new message like below 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uiHjYCJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623400668115/5XgXIc-DV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uiHjYCJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623400668115/5XgXIc-DV.png" alt="frame_generic_light.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do this automatically, we can install a package called &lt;code&gt;nodemon&lt;/code&gt;, &lt;code&gt;nodemon&lt;/code&gt; will help us listen to changes in our project files and automatically restart the server within seconds.&lt;/p&gt;

&lt;p&gt;Run the following command to install &lt;code&gt;nodemon&lt;/code&gt; to your project&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
yarn add --dev nodemon&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We are installing the &lt;code&gt;nodemon&lt;/code&gt; package as a development dependency because it is not needed when we finally host our Node JS project to production.&lt;/p&gt;

&lt;p&gt;To learn more about dependencies and devDependencies in &lt;code&gt;package.json&lt;/code&gt; you can check it out  &lt;a href="https://docs.npmjs.com/specifying-dependencies-and-devdependencies-in-a-package-json-file"&gt;Here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now that we've installed &lt;code&gt;nodemon&lt;/code&gt; package in our project, let us set it up to do its job.&lt;/p&gt;

&lt;p&gt;Open your &lt;code&gt;package.json&lt;/code&gt; file 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sFQSvTFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623401648758/dSMsW1zhs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sFQSvTFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623401648758/dSMsW1zhs.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your project &lt;code&gt;express&lt;/code&gt; package should be inside the dependencies object while the &lt;code&gt;nodemon&lt;/code&gt; should be inside the devDependencies, this is because we need the &lt;code&gt;express&lt;/code&gt; package in our production but we only need the &lt;code&gt;nodemon&lt;/code&gt; for our project development.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;if your &lt;code&gt;package.json&lt;/code&gt; is not structured like the above, kindly check back how we installed the two packages previously.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add the following code to your &lt;code&gt;package.json&lt;/code&gt; file 👇&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// Before the dependencies&lt;/p&gt;

&lt;p&gt;"scripts": {&lt;br&gt;
    "start": "nodemon index.js"&lt;br&gt;
  },&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;br&gt;
Your &lt;code&gt;package.json&lt;/code&gt; file should look something like below 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0FekRRZd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623452026035/9bx1_Ndp9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0FekRRZd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623452026035/9bx1_Ndp9.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we are basically adding a command to our project which can be accessed through &lt;code&gt;yarn&lt;/code&gt; or &lt;code&gt;npm&lt;/code&gt;, in this case, we are saying when we run the &lt;code&gt;yarn start&lt;/code&gt; command, &lt;code&gt;yarn&lt;/code&gt; should start our project with &lt;code&gt;nodemon index.js&lt;/code&gt;, so that &lt;code&gt;nodemon&lt;/code&gt; will start listening to our file changes.&lt;/p&gt;

&lt;p&gt;Start the server again with the code below 👇&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;yarn start&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should get a response, that &lt;code&gt;nodemon&lt;/code&gt; is ready for any file change and will restart the server immediately.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FLHJssph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623402989909/t0wi6JQsA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FLHJssph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623402989909/t0wi6JQsA.png" alt="frame_generic_light (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can proceed to change your &lt;code&gt;console.log()&lt;/code&gt; message and see if the server will restart automatically.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Kindly note that &lt;code&gt;nodemon&lt;/code&gt; will only listen to changes to files with &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.mjs&lt;/code&gt;,  and &lt;code&gt;.json&lt;/code&gt; extensions, we will have to handle the refresh of the HTML and CSS files on our browser.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you wish to handle this automatically you can click  &lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;HERE &lt;/a&gt; to install a live server on your &lt;strong&gt;VScode&lt;/strong&gt; to listen for the HTML and CSS file changes.&lt;/p&gt;

&lt;p&gt;Click the go-live to turn on the server for your HTML file (ensure you are currently on your HTML file)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aIU9giut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623599939895/MOwuIO-3_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aIU9giut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623599939895/MOwuIO-3_.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;br&gt;
Now that we have our server up and running with &lt;code&gt;nodemon&lt;/code&gt; listening to our file changes, let design our application interface.

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a new folder and name it &lt;code&gt;public&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inside the &lt;code&gt;public&lt;/code&gt; folder create the following files  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;h4&gt;
  &lt;a href="#-endraw-indexhtml-raw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;index.html&lt;/code&gt;
&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4&gt;
  &lt;a href="#-endraw-indexcss-raw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;index.css&lt;/code&gt;
&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4&gt;
  &lt;a href="#-endraw-successhtml-raw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;success.html&lt;/code&gt;
&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4&gt;
  &lt;a href="#-endraw-successcss-raw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;success.css&lt;/code&gt;
&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Copy the code below 👇 into the stated files respectively&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#indexhtml"&gt;
  &lt;/a&gt;
  index.html
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
&amp;lt;!DOCTYPE html&amp;gt;&lt;br&gt;
&lt;br&gt;
  &lt;/p&gt;
&lt;br&gt;
    &lt;br&gt;
    &lt;br&gt;
    &lt;br&gt;
    &amp;lt;!-- Css styles --&amp;gt;&lt;br&gt;
    &lt;br&gt;
    &amp;lt;!-- Fontawesome icon library --&amp;gt;&lt;br&gt;
    
      rel="stylesheet"&lt;br&gt;
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"&lt;br&gt;
    /&amp;gt;&lt;br&gt;
    e-Mail Sender Application&lt;br&gt;
  &lt;br&gt;
  &lt;br&gt;
    &lt;br&gt;
      &lt;h2&gt;e-Mail Sender Application&lt;/h2&gt;
&lt;br&gt;
      &lt;br&gt;
        
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;input
      class="input-field"
      type="text"
      placeholder="To: i.e unclebigbay@gmail.com"
      name="email"
      autocomplete="off"
      required
    /&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class="input-wrapper"&amp;gt;
    &amp;lt;i class="fa fa-envelope icon"&amp;gt;&amp;lt;/i&amp;gt;

    &amp;lt;input
      class="input-field"
      type="text"
      placeholder="Subject"
      name="subject"
      required
    /&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="input-wrapper"&amp;gt;
    &amp;lt;textarea
      id="message"
      name="message"
      placeholder="Message body.."
      style="height: 200px; width: 100%"
      required
    &amp;gt;&amp;lt;/textarea&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="attachment-wrapper"&amp;gt;
    &amp;lt;label for="attachment"&amp;gt;Attachment&amp;lt;/label&amp;gt;
    &amp;lt;input id="attachment" name="attachment" type="file" required/&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;button type="submit" class="send-btn"&amp;gt;Send Mail&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;### &lt;code&gt;index.css&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;@import url("&lt;a href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,300;1,400;1,500;1,600;1,700;1,800;1,900&amp;amp;display=swap%22"&gt;https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,300;1,400;1,500;1,600;1,700;1,800;1,900&amp;amp;display=swap"&lt;/a&gt;);&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;{
box-sizing: border-box;
font-family: "Poppins";
}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;h2 {&lt;br&gt;
  font-size: 2rem;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.input-wrapper {&lt;br&gt;
  display: -ms-flexbox; /* IE10 */&lt;br&gt;
  display: flex;&lt;br&gt;
  width: 100%;&lt;br&gt;
  margin-bottom: 15px;&lt;br&gt;
  font-family: "Poppins";&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.icon {&lt;br&gt;
  padding: 10px;&lt;br&gt;
  background: #333333;&lt;br&gt;
  color: white;&lt;br&gt;
  min-width: 50px;&lt;br&gt;
  text-align: center;&lt;br&gt;
  font-family: "Poppins";&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.input-field {&lt;br&gt;
  width: 100%;&lt;br&gt;
  padding: 10px;&lt;br&gt;
  outline: none;&lt;br&gt;
  font-family: "Poppins";&lt;br&gt;
  border: 2px solid #333333;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.input-field:focus {&lt;br&gt;
  box-shadow: 0 0 10px #333333;&lt;br&gt;
  border: 2px solid #333333;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.input-wrapper textarea {&lt;br&gt;
  padding: 1rem;&lt;br&gt;
  border: 2px solid #333333;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.input-wrapper textarea:focus {&lt;br&gt;
  outline: none;&lt;br&gt;
  box-shadow: 0 0 10px #333333;&lt;br&gt;
  border: 2px solid #333333;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.attachment-wrapper {&lt;br&gt;
  margin: 15px 0;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.attachment-wrapper label {&lt;br&gt;
  font-weight: 600;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.send-btn {&lt;br&gt;
  background-color: #333333;&lt;br&gt;
  color: white;&lt;br&gt;
  padding: 15px 20px;&lt;br&gt;
  border: none;&lt;br&gt;
  cursor: pointer;&lt;br&gt;
  width: 100%;&lt;br&gt;
  opacity: 0.9;&lt;br&gt;
  font-size: 16px;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;.send-btn:hover {&lt;br&gt;
  opacity: 1;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;### &lt;code&gt;success.html&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;br&gt;
&lt;br&gt;
  &lt;/p&gt;
&lt;br&gt;
    &lt;br&gt;
    &lt;br&gt;
    
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link rel="stylesheet" href="./success.css" /&amp;gt;
&amp;lt;!-- Fontawesome icon library --&amp;gt;
&amp;lt;link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"
/&amp;gt;
&amp;lt;title&amp;gt;Mail Sent&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;br&gt;
    
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Message Delivered!!!&amp;lt;/h1&amp;gt;
&amp;lt;a href="./index.html"&amp;gt;New message&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#-endraw-successcss-raw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;success.css&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;@import url("&lt;a href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,300;1,400;1,500;1,600;1,700;1,800;1,900&amp;amp;display=swap%22"&gt;https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,300;1,400;1,500;1,600;1,700;1,800;1,900&amp;amp;display=swap"&lt;/a&gt;);&lt;/p&gt;

&lt;p&gt;body {&lt;br&gt;
  font-family: "Poppins";&lt;br&gt;
  display: flex;&lt;br&gt;
  flex-direction: column;&lt;br&gt;
  justify-content: center;&lt;br&gt;
  align-items: center;&lt;br&gt;
  height: 70vh;&lt;br&gt;
  color: #333333;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;a {&lt;br&gt;
  color: blue;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;a:hover {&lt;br&gt;
  opacity: 0.8;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;body .icon {&lt;br&gt;
  font-size: 3rem;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#rendering-static-files-to-the-browser-with-express-js"&gt;
  &lt;/a&gt;
  Rendering Static Files to the Browser with Express JS
&lt;/h3&gt;

&lt;p&gt;Yes, we cannot just access our HTML file directly from our browser, express must handle that for us and to this point, we can only access our application port &lt;code&gt;3000&lt;/code&gt; on our terminal, let's see how we can display our HTML files on our browser using Express JS.&lt;/p&gt;

&lt;p&gt;Update the &lt;code&gt;index.js&lt;/code&gt; with the following code&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
....&lt;br&gt;
// After PORT = 3000;&lt;/p&gt;

&lt;p&gt;// Express should add our path&lt;br&gt;
app.use(express.static("public"));&lt;/p&gt;

&lt;p&gt;// Render the index.html when the user visit our project port&lt;br&gt;
app.get("/", (req, res) =&amp;gt; {&lt;br&gt;
  res.sendFile("/index.html");&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#1-endraw-appuseexpressstaticpublic-raw-"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;app.use(express.static("public"));&lt;/code&gt;
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
We are using the express js method called &lt;code&gt;use&lt;/code&gt; to chain a middleware called &lt;code&gt;static&lt;/code&gt;, which allows us to serve static files like &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;css&lt;/code&gt;, &lt;code&gt;js&lt;/code&gt;, &lt;code&gt;image&lt;/code&gt;, and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;public&lt;/code&gt; folder is defined inside the &lt;code&gt;static&lt;/code&gt; middleware as our project root directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5&gt;
  &lt;a href="#2-endraw-appget-raw-"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;app.get&lt;/code&gt;
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;span id="get"&gt;&lt;code&gt;app.get()&lt;/code&gt;&lt;/span&gt; is a function that tells the server what to do when a get request at the given route is called.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#3-endraw-req-res-raw-"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;("/", (req, res)&lt;/code&gt;
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The forward slash signifies the root directory of our route, just like &lt;code&gt;www.hashnode.com&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;req&lt;/code&gt; argument stands for &lt;strong&gt;request&lt;/strong&gt; from that particular route, while the &lt;code&gt;res&lt;/code&gt; represents &lt;strong&gt;response&lt;/strong&gt;, which is a means to send back a response to the route caller.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#4-endraw-ressendfileindexhtml-raw-"&gt;
  &lt;/a&gt;
  4. &lt;code&gt; res.sendFile("/index.html");&lt;/code&gt;
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
Remember the &lt;code&gt;res&lt;/code&gt; above 👆 us used to send back a response? the &lt;code&gt;res&lt;/code&gt; has a method to send back a file to the route been called, and that is what we are doing here, we are returning the &lt;code&gt;index.html&lt;/code&gt; file when the root route of the project is been hit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#project-ui-routing-on-a-browser-with-express-js"&gt;
  &lt;/a&gt;
  Project UI Routing on a Browser with Express JS
&lt;/h3&gt;

&lt;p&gt;Routing refers to how our application's endpoints (URLs) respond to the client (browser) request through the &lt;code&gt;req&lt;/code&gt; parameter, this is unique for a particular endpoint (URL).  &lt;/p&gt;

&lt;p&gt;&lt;a href="//www.hashnode.com/onboard"&gt;www.hashnode.com&lt;/a&gt; will respond with the landing page while a request to &lt;a href="//www.hashnode.com/onboard"&gt;www.hashnode.com/onboard&lt;/a&gt; will respond with a login page 😉.&lt;/p&gt;

&lt;p&gt;Since we have our route and static files setup, it's time to visit our project port in our browser 💃&lt;/p&gt;

&lt;p&gt;You can either copy-paste this route 👉 &lt;strong&gt;localhost:3000&lt;/strong&gt; to your browser address bar and hit enter or click this link &lt;a href="http://localhost:3000/"&gt;localhost:3000&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If all goes well, you should have this 👇 displayed on your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ytywwY9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623438401772/ZS1obK64P.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ytywwY9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623438401772/ZS1obK64P.png" alt="frame_generic_light (3).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can as well visit the &lt;strong&gt;success page&lt;/strong&gt; using this link &lt;a href="http://localhost:3000/success.html"&gt;localhost:3000/success.html&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Our success page should look something like below 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gJrJ9dXn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623438866078/r3NoVbSbG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gJrJ9dXn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623438866078/r3NoVbSbG.png" alt="frame_generic_light (4).png"&gt;&lt;/a&gt;&lt;/p&gt;




If you made it this far let's take a break, and celebrate 😍

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwwsyJ3r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623439898942/K-fo4ZjR5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwwsyJ3r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623439898942/K-fo4ZjR5.gif" alt="fb7596eafc1adf186d0e6ed139b458d8.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's drink up 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2NIhOxeQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623439914103/Fp2zTwupt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2NIhOxeQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623439914103/Fp2zTwupt.gif" alt="giphy (4).gif"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;** &lt;/p&gt; Welcome Back 🤩 **



&lt;h2&gt;
  &lt;a href="#handling-data-from-our-html-forms"&gt;
  &lt;/a&gt;
  Handling Data from our HTML forms
&lt;/h2&gt;

&lt;p&gt;Now that we have our project UI setup, let's look into handling the data submitted by the sender.&lt;/p&gt;

&lt;p&gt;Note that, our HTML form has the following form input types&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;email - text&lt;/li&gt;
&lt;li&gt;subject -  text&lt;/li&gt;
&lt;li&gt;message - text&lt;/li&gt;
&lt;li&gt;attachment - file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Generally, to have access to a request body through the &lt;a href="#get"&gt;&lt;code&gt;req&lt;/code&gt;&lt;/a&gt; parameter in the &lt;code&gt;get()&lt;/code&gt; function, we need a middleware package called &lt;code&gt;bodyparser&lt;/code&gt;, but this is also provided by the express JS function, so we do not need to install any package for this.&lt;/p&gt;

&lt;p&gt;Update the &lt;code&gt;index.js&lt;/code&gt; with the code below&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// After the express static middleware&lt;br&gt;
...&lt;/p&gt;

&lt;p&gt;// Body parser&lt;br&gt;
app.use(express.json());&lt;br&gt;
app.use(express.urlencoded({ extended: false }));&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our &lt;code&gt;body-parser&lt;/code&gt; setup, let's see it in action by creating a &lt;code&gt;POST&lt;/code&gt; route in our application, which we will use to &lt;code&gt;post&lt;/code&gt; the entries of the sender to our server.&lt;/p&gt;

&lt;p&gt;Add the following code below the &lt;code&gt;get&lt;/code&gt; route function&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// Post route to handle retrieving data from HTML form to server&lt;br&gt;
app.post("/send_email", (req, res) =&amp;gt; {&lt;br&gt;
  console.log(req.body);&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;br&gt;
We also need to update our HTML form to have a &lt;code&gt;POST&lt;/code&gt; method and also set the path to post the data to like below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
    &amp;lt;form&lt;br&gt;
      action="/send_email"&lt;br&gt;
      method="POST"&lt;br&gt;
      style="max-width: 500px; margin: auto"&lt;br&gt;
    &amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#1-endraw-actionsendemail-raw-"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;action="/send_email"&lt;/code&gt;
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;The action attribute is used to specify where we want to send the form data when the form is submitted, we are sending the data to the &lt;strong&gt;/send_email&lt;/strong&gt; route in our application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#2-endraw-methodpost-raw-"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;method="POST"&lt;/code&gt;
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;The post method is good when sending sensitive information from the client (browser) to the server (backend), it hides the form values from the browser address bar unlike the &lt;code&gt;GET&lt;/code&gt; method which displays it, the post method also appends form data inside the body of the HTTP request, this body is what express js is parsing and is also been retrieved using through the &lt;code&gt;req&lt;/code&gt; parameter in our route functions. &lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#3-endraw-reqbody-raw-"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;req.body&lt;/code&gt;
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Here we are accessing the form body object from the &lt;code&gt;req&lt;/code&gt; parameter which contains all the data from our HTML inputs (example ahead).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we have all this setup, let us proceed to send a sample mail that will be displayed in our terminal.&lt;/p&gt;

&lt;p&gt;Fill in the form inputs and also select an attachment then click the &lt;strong&gt;send mail&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6X9x2Qhd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623451260493/BXc1XCxm_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6X9x2Qhd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623451260493/BXc1XCxm_.png" alt="frame_generic_light (6).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have all your project set up correctly you, should have the form values displayed below in your terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SErkcBjn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623451499503/tsc87IKM_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SErkcBjn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623451499503/tsc87IKM_.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;That 👆 is the example of the &lt;code&gt;req.body&lt;/code&gt;, this picks up the attribute name of the HTML input tags&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#the-post-method"&gt;
  &lt;/a&gt;
  The &lt;u&gt;POST&lt;/u&gt; Method
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IA0vCOxn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623452802484/EhPiX5yC3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IA0vCOxn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623452802484/EhPiX5yC3.png" alt="frame_generic_light (9).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Did you noticed that your browser address bar didn't change 💁‍♂️, now set your form method to &lt;code&gt;GET&lt;/code&gt; and try sending a mail again, what did you notice?&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#the-get-method"&gt;
  &lt;/a&gt;
  The &lt;u&gt;GET&lt;/u&gt; Method
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4yRPCxqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623452831541/SFbncJzcP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4yRPCxqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623452831541/SFbncJzcP.png" alt="frame_generic_light (8).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The submitted data are been displayed on the address bar, imagine you are submitting your password 😱. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Which method will you use for credit cards ?.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#handling-files-over-a-node-js-server"&gt;
  &lt;/a&gt;
  Handling Files over a Node JS server
&lt;/h2&gt;

&lt;p&gt;In this section, we will look into handling files coming from the client-side to our project Node JS backend application. &lt;/p&gt;

&lt;p&gt;In other to handle files  coming from the frontend, we need to install a package called &lt;code&gt;multer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Multer is a node.js middleware for handling &lt;strong&gt;multipart/form-data&lt;/strong&gt;, which is primarily used for uploading files.&lt;/p&gt;

&lt;p&gt;Multer also has a rule, which is that &lt;strong&gt;multer will not process any form which is not multipart (multipart/form-data).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In other to make &lt;code&gt;multer&lt;/code&gt; work in our project we need to add an encryption attribute to our form tag like below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
    &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  action="/send_email"&amp;lt;br&amp;gt;
  method="POST"&amp;lt;br&amp;gt;
  enctype="multipart/form-data"&amp;lt;br&amp;gt;
  style="max-width: 500px; margin: auto"&amp;lt;br&amp;gt;
&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ensure to update your form tag with the new attribute, after that, we need to create a new folder called &lt;code&gt;attachments&lt;/code&gt; in our project root directory&lt;/p&gt;

&lt;p&gt;Your project structure and &lt;code&gt;index.js&lt;/code&gt; should look like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aknsBDZi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623454927337/3GxIb_cx5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aknsBDZi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623454927337/3GxIb_cx5.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#configuring-multer"&gt;
  &lt;/a&gt;
  Configuring Multer
&lt;/h3&gt;

&lt;p&gt;To configure our project to use multer, we need to first install it using the command below&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
yarn add multer&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once it is installed, we need to configure it in our &lt;code&gt;index.js&lt;/code&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-multer-endraw-diskstorage-raw-"&gt;
  &lt;/a&gt;
  Setting up multer &lt;code&gt;diskStorage&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Multer allows us to specify where we want to store the attachments coming from the frontend and also define their unique names through its method called &lt;strong&gt;diskStorage&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;require &lt;code&gt;multer&lt;/code&gt; below where we required the &lt;code&gt;express&lt;/code&gt; js&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// Import express into our project&lt;br&gt;
const express = require("express");&lt;/p&gt;

&lt;p&gt;// Import multer&lt;br&gt;
const multer = require("multer");&lt;/p&gt;

&lt;p&gt;...&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Copy-paste the following code, below the body-parser.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
// Multer file storage&lt;br&gt;
const Storage = multer.diskStorage({&lt;br&gt;
  destination: function (req, file, callback) {&lt;br&gt;
    callback(null, "./attachments");&lt;br&gt;
  },&lt;br&gt;
  filename: function (req, file, callback) {&lt;br&gt;
    callback(null,&lt;/code&gt;${file.fieldname}&lt;em&gt;${Date.now()}&lt;/em&gt;${file.originalname}`);&lt;br&gt;
  },&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#-endraw-multerdiskstorage-raw-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;&lt;code&gt;multer.diskStorage&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#1-endraw-destination-raw-"&gt;
  &lt;/a&gt;
  1.  &lt;strong&gt;&lt;em&gt;&lt;code&gt;destination&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;This multer method allows us to set the destination of our attachment through a callback function, and as you can see we passed our &lt;code&gt;attachment&lt;/code&gt; folder as the second argument of the callback function, this is where the attachment of a mail will be store (example coming up).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-endraw-filename-raw-"&gt;
  &lt;/a&gt;
  2.  &lt;strong&gt;&lt;em&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;The second property we can set using the &lt;code&gt;diskStorage&lt;/code&gt; is the file name of the incoming attachment, we do this so that every attachment will have a unique file name, we concatenate the field name (from, input name=" attachment") with underscore &lt;code&gt;_&lt;/code&gt; and current date that the file is been attached in milliseconds with another underscore &lt;code&gt;_&lt;/code&gt; and finally the attachment original name. &lt;/p&gt;

&lt;p&gt;That is super unique 😍&lt;/p&gt;




&lt;p&gt;Let's proceed to write middleware to actually get the attachment from the request body.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// Middleware to get a single attachment&lt;br&gt;
const attachmentUpload = multer({&lt;br&gt;
  storage: Storage,&lt;br&gt;
}).single("attachment");&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;br&gt;
What we are doing here is that we are passing the attachment storage logic we created into the &lt;strong&gt;multer&lt;/strong&gt; object and also telling &lt;strong&gt;multer&lt;/strong&gt; that we are only targeting a single attachment with the &lt;code&gt;.single("attachment")&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#applying-multer-middleware-to-our-post-route"&gt;
  &lt;/a&gt;
  Applying Multer Middleware to our Post Route
&lt;/h3&gt;

&lt;p&gt;Now that we have set up a middleware with &lt;code&gt;multer&lt;/code&gt;, which will help us retrieve attachments from the frontend form, let's proceed to apply it within our Post route.&lt;/p&gt;

&lt;p&gt;Update the application post route with the following code&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// Post route to handle retrieving data from HTML form to server&lt;br&gt;
app.post("/send_email", (req, res) =&amp;gt; {&lt;br&gt;
  if (error) {&lt;br&gt;
      console.log(err);&lt;br&gt;
      return res.send("Error uploading file");&lt;br&gt;
    } else {&lt;br&gt;
      const recipient = req.body.email;&lt;br&gt;
      const subject = req.body.subject;&lt;br&gt;
      const message = req.body.message;&lt;br&gt;
      const attachmentPath = req.file.path;&lt;br&gt;
      console.log("recipient:", recipient);&lt;br&gt;
      console.log("subject:", subject);&lt;br&gt;
      console.log("message:", message);&lt;br&gt;
      console.log("attachmentPath:", attachmentPath);&lt;br&gt;
    }&lt;/p&gt;

&lt;p&gt;});&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#1-we-invoked-callexecute-the-endraw-attachmentupload-raw-middleware-function-and-extend-pass-the-endraw-req-raw-and-endraw-res-raw-parameter-from-the-post-route-function-to-it-this-will-allow-the-middleware-to-have-access-to-any-file-in-the-request-body"&gt;
  &lt;/a&gt;
  1. We invoked (call/execute) the &lt;code&gt;attachmentUpload&lt;/code&gt; middleware function and extend (pass) the &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;res&lt;/code&gt; parameter from the post route function to it. This will allow the middleware to have access to any file in the request body.
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#2-the-endraw-attachmentupload-raw-also-takes-in-a-callback-function-which-will-check-for-any-error-while-endraw-attachmentupload-raw-processes-the-files-from-the-request-body"&gt;
  &lt;/a&gt;
  2. The &lt;code&gt;attachmentUpload&lt;/code&gt; also takes in a callback function which will check for any error while &lt;code&gt;attachmentUpload&lt;/code&gt; processes the files from the request body.
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#3-in-the-callback-function-we-are-checking-whether-there-is-an-error-in-the-process-endraw-if-raw-any-error-occurs-we-want-to-display-the-error-in-the-terminal-and-send-back-a-message-which-says-endraw-error-uploading-file-raw-as-a-response-endraw-res-raw-"&gt;
  &lt;/a&gt;
  3. In the callback function, we are checking whether there is an error in the process, &lt;strong&gt;&lt;code&gt;if&lt;/code&gt;&lt;/strong&gt; any error occurs, we want to display the error in the terminal and send back a message which says &lt;code&gt;Error uploading file&lt;/code&gt; as a response (&lt;code&gt;res&lt;/code&gt;).
&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;A call-back function is any function that is been passed as an argument to another function, which will be executed (call-back) later in time (any point in time).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5&gt;
  &lt;a href="#4-finally-we-included-an-alternative-statement-with-the-endraw-else-raw-block-which-is-executed-if-the-previous-statement-is-not-satisfied-this-implies-that-the-endraw-else-raw-statement-block-will-only-run-if-there-is-no-error-when-the-middleware-is-trying-to-upload-any-attachments-from-the-html-form-to-the-attachment-folder"&gt;
  &lt;/a&gt;
  4. Finally, we included an alternative statement with the &lt;strong&gt;&lt;code&gt; else&lt;/code&gt;&lt;/strong&gt; block which is executed if the previous statement is not satisfied. This implies that the &lt;code&gt;else&lt;/code&gt; statement block will only run if there is no error when the middleware is trying to upload any attachments from the HTML form to the "attachment" folder.
&lt;/h5&gt;



&lt;h3&gt;
  &lt;a href="#storing-files-from-html-form-to-our-storage-folder"&gt;
  &lt;/a&gt;
  Storing Files from HTML Form to our Storage Folder
&lt;/h3&gt;

&lt;p&gt;Let's proceed to test our implementation so far.&lt;/p&gt;

&lt;p&gt;Save your script and refresh your browser (if you're not using a live server) to get updated with our node script.&lt;/p&gt;

&lt;p&gt;Fill the form inputs and attach any file of your choice as shown below 👇 and hit the send button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_UySl3qs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623591706488/Jpjk8_Ha0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_UySl3qs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623591706488/Jpjk8_Ha0.png" alt="frame_generic_light (13).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#output-1"&gt;
  &lt;/a&gt;
  Output 1 👇
&lt;/h3&gt;

&lt;p&gt;If all goes well, your terminal should have the following output 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K-v8mHPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623591541760/9hkxSymQe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K-v8mHPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623591541760/9hkxSymQe.png" alt="frame_generic_light (12).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should also notice that the attachment name has changed to the naming convention logic we created earlier 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KkhJJp_I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623593206815/6YLCpLHmQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KkhJJp_I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623593206815/6YLCpLHmQ.png" alt="frame_generic_light (14).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#output-2"&gt;
  &lt;/a&gt;
  Output 2 👇
&lt;/h3&gt;

&lt;p&gt;The fun part is, if you expand the &lt;em&gt;attachment&lt;/em&gt; folder, you will see your attached file there 💃, thanks to &lt;strong&gt;multer&lt;/strong&gt;, you can also check the folder directory in the file explorer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8hELOl8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623591792981/jiAKUiu0U.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8hELOl8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623591792981/jiAKUiu0U.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-your-file-explorer"&gt;
  &lt;/a&gt;
  Check your File Explorer 👇
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8kDbJOYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623595804065/xI-oIaa-8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8kDbJOYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623595804065/xI-oIaa-8.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can check the complete code to this point from my GitHub gist &lt;a href="https://gist.github.com/unclebay143/afd096589fc868b86fd9edd1eb291f27"&gt;Here ✋&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-nodemailer-package"&gt;
  &lt;/a&gt;
  Setting up Nodemailer Package
&lt;/h2&gt;

&lt;p&gt;Now that we can get data submitted from our HTML form to our Node JS server, let us proceed to set up the logic that will actually send out the mail 💃 to our recipient.&lt;/p&gt;

&lt;p&gt;In other to achieve this, we need to install and setup the awaited &lt;code&gt;Nodemailer&lt;/code&gt; package, just as the name implies, this package allows us to send mail from our Node js application without stress, to begin with, let us install the &lt;code&gt;Nodemailer&lt;/code&gt; package using the code below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;yarn add nodemailer&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nodemailer-requirements"&gt;
  &lt;/a&gt;
  Nodemailer Requirements
&lt;/h3&gt;

&lt;p&gt;Now that the &lt;code&gt;nodemailer&lt;/code&gt; package has been successfully installed, let us break down the requirements for using the &lt;code&gt;nodemailer&lt;/code&gt; package.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-nodemailer-requires-a-transporter-object"&gt;
  &lt;/a&gt;
  1. Nodemailer requires a *&lt;em&gt;transporter *&lt;/em&gt; object
&lt;/h4&gt;

&lt;p&gt;This is where we configure the means of sending out the mail, we are going to be using the Gmail service in this article.&lt;/p&gt;

&lt;p&gt;Below 👇 is the format of  a &lt;code&gt;nodemailer&lt;/code&gt; transport.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
let transporter = nodemailer.createTransport({&lt;br&gt;
   service: 'gmail',&lt;br&gt;
   auth: {&lt;br&gt;
      type: 'OAuth2',&lt;br&gt;
      user: "your gmail address",&lt;br&gt;
      pass: "your gmail password",&lt;br&gt;
      clientId: "your gmail client id",&lt;br&gt;
      clientSecret: "your gmail client secret token",&lt;br&gt;
      refreshToken: "gmail refresh token",&lt;br&gt;
   }&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-nodemailer-requires-a-mailoption"&gt;
  &lt;/a&gt;
  2. Nodemailer requires a &lt;strong&gt;mailOption&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;This is an object where we specify the following&lt;/p&gt;

&lt;p&gt;a. The sender's email address (required)  &lt;/p&gt;

&lt;p&gt;b. The recipient's email address (required)  &lt;/p&gt;

&lt;p&gt;c. The mail subject (optional)  &lt;/p&gt;

&lt;p&gt;d. The email text body (optional) and  &lt;/p&gt;

&lt;p&gt;e. The attachments  (optional)&lt;/p&gt;

&lt;p&gt;Below 👇 is the format for a mailOption&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
let mailOptions = {&lt;br&gt;
  from: "your gmail address",&lt;br&gt;
  to: "your recipient email address",&lt;br&gt;
  subject: "e-mail subject",&lt;br&gt;
  text: "e-mail body",&lt;br&gt;
};&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-node-mailer-requires-a-endraw-sendmail-raw-method"&gt;
  &lt;/a&gt;
  3. Node mailer requires a &lt;code&gt;sendMail&lt;/code&gt; method
&lt;/h4&gt;

&lt;p&gt;Nodemailer &lt;code&gt;sendMail&lt;/code&gt; method is actually the one responsible for the sending of email to the recipient, this method takes in the &lt;code&gt;mailOption&lt;/code&gt; we've discussed above and also a callback function to handle the status of the mail transportation.&lt;/p&gt;

&lt;p&gt;Below 👇 is the format for &lt;code&gt;sendMail&lt;/code&gt; method&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
transporter.sendMail(mailOptions, function(err, data) {&lt;br&gt;
   if (err) {&lt;br&gt;
      console.log("Error: " + err);&lt;br&gt;
   } else {&lt;br&gt;
      console.log("Email sent successfully");&lt;br&gt;
   }&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The complete code of the &lt;code&gt;nodemailer&lt;/code&gt; should be like this 👇&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;// After the last console.log(attachmentPath) in the else statement&lt;/p&gt;

&lt;p&gt;// Connecting to gmail service&lt;br&gt;
let transporter = nodemailer.createTransport({&lt;br&gt;
    service: "gmail",&lt;br&gt;
    auth: {&lt;br&gt;
        type: "OAuth2",&lt;br&gt;
        user: "your gmail address",&lt;br&gt;
        pass: "your gmail password",&lt;br&gt;
        clientId: "your gmail client id",&lt;br&gt;
        clientSecret: "your gmail client secret token",&lt;br&gt;
        refreshToken: "gmail refresh token",&lt;br&gt;
    },&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;// e-mail option&lt;br&gt;
let mailOptions = {&lt;br&gt;
   from: "your gmail address",&lt;br&gt;
   to: "your recipient email address",&lt;br&gt;
   subject: "e-mail subject",&lt;br&gt;
   text: "e-mail body",&lt;br&gt;
};&lt;/p&gt;

&lt;p&gt;// Method to send e-mail out&lt;br&gt;
transporter.sendMail(mailOptions, function (err, data) {&lt;br&gt;
    if (err) {&lt;br&gt;
        console.log("Error: " + err);&lt;br&gt;
    } else {&lt;br&gt;
        console.log("Email sent successfully");&lt;br&gt;
    }&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The above code will serve as our &lt;strong&gt;nodemailer ** template, which we need to find the credentials to, but before we do that, we need to set up a secure way to protect the transporter credentials such as the **user&lt;/strong&gt;, &lt;strong&gt;pass&lt;/strong&gt;, &lt;strong&gt;clientId&lt;/strong&gt;, &lt;strong&gt;clientSecret&lt;/strong&gt; and the &lt;strong&gt;refresh token&lt;/strong&gt; that we be provided by google, so that everyone will not be able to see our application secret details from Github repository when we finally push to production.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-dotenv"&gt;
  &lt;/a&gt;
  Setting up dotenv
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;dotenv&lt;/code&gt; allows us to keep secret credentials or tokens in our project environment (.env file), which will not be visible to either the browser, git version control, or people viewing our project on Github, these are called the &lt;code&gt;Environment Variables&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ensure to add the .env file to your .gitignore file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Run the code below 👇 to install the &lt;code&gt;dotenv&lt;/code&gt; to your project&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
yarn add dotenv&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After the &lt;code&gt;dotenv&lt;/code&gt; installation, proceed to create a &lt;code&gt;.env&lt;/code&gt; file in your project root directory like this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gl5Mwsbn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656689509/MuEabNjvJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gl5Mwsbn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623656689509/MuEabNjvJ.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is where we are going to store our &lt;strong&gt;Environment-Specific&lt;/strong&gt; variables in a &lt;code&gt;NAME=value&lt;/code&gt; format like below 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_4BkQfE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657156443/eg1P6ECPJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_4BkQfE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657156443/eg1P6ECPJ.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To access this *&lt;em&gt;enviroment-variable *&lt;/em&gt; from our JavaScript application we need to require (import) the &lt;code&gt;dotenv&lt;/code&gt; package in our &lt;code&gt;index.js&lt;/code&gt; and configure it like below 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QGhFDHcn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657621117/fV89203dW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QGhFDHcn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657621117/fV89203dW.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or like this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8dmcBIPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657755775/tng7mIc7W.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8dmcBIPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623657755775/tng7mIc7W.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use this method of import when you need to use other &lt;code&gt;dotenv&lt;/code&gt; function like &lt;code&gt;parse&lt;/code&gt;, but in this article, we are going to make use of the first method 👆 because we only need the &lt;code&gt;config()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;To learn more about the &lt;code&gt;dotenv&lt;/code&gt; package, you can visit the official documentation  &lt;a href="https://www.npmjs.com/package/dotenv"&gt;Here&lt;/a&gt; &lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#accessing-our-environmentvariables-from-endraw-dotenv-raw-file"&gt;
  &lt;/a&gt;
  Accessing our environment-variables from &lt;code&gt;dotenv&lt;/code&gt; file
&lt;/h3&gt;

&lt;p&gt;Now that we know how to use the &lt;code&gt;dotenv&lt;/code&gt; package to store our &lt;strong&gt;enviroment-variable&lt;/strong&gt; in our JavaScript application let us see how we can then access this variables in our scripts.&lt;/p&gt;

&lt;p&gt;Add this line of code below the &lt;code&gt;dotenv&lt;/code&gt; configuration 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ClkD3Vql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623659537468/Gd6Od83Qn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ClkD3Vql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623659537468/Gd6Od83Qn.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output 👇
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HA0s0iWA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623660497030/ID5U7drLc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HA0s0iWA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623660497030/ID5U7drLc.png" alt="frame_generic_light (15).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that is totally how to set up and &lt;strong&gt;use environment-variables&lt;/strong&gt; with &lt;code&gt;dotenv&lt;/code&gt; package in a JavaScript project (Not only in Node JS) 😉.&lt;/p&gt;




&lt;p&gt;If you made it this far, you deserve this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NbUauREi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623662987273/cP421AUWt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NbUauREi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623662987273/cP421AUWt.gif" alt="standing clapping ovation"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#final-lap"&gt;
  &lt;/a&gt;
   FINAL LAP 


&lt;/h3&gt;





&lt;h2&gt;
  &lt;a href="#gmail-oauth2-configuration"&gt;
  &lt;/a&gt;
  Gmail OAuth2 Configuration
&lt;/h2&gt;

&lt;p&gt;Now that we have everything setup in our Node JS application, let's proceed to get the following credentials from Google.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;code&gt;clientId&lt;/code&gt; : "your gmail client id",&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;clientSecret&lt;/code&gt; : "your gmail client secret token",&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;refreshToken&lt;/code&gt; : "gmail refresh token",&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Follow the guide below to setup you Gmail OAuth 2 Configurations&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-google-cloud-platform-account-setup"&gt;
  &lt;/a&gt;
  1. Google Cloud Platform Account Setup
&lt;/h3&gt;

&lt;p&gt;Firstly we need to register our Gmail address on the ** &lt;a href="https://console.cloud.google.com/"&gt;Google Cloud Platform&lt;/a&gt; **, if you have not done that before you can register  &lt;a href="https://console.cloud.google.com/"&gt;HERE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If your gmail account is logged in on your browser you should have a screen display like this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VKIZhub9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623668291610/KhrcyBpBt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VKIZhub9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623668291610/KhrcyBpBt.png" alt="google cloud platform login to dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Accept the &lt;em&gt;Terms and Condition&lt;/em&gt; by checking the box, the &lt;em&gt;Email Updates&lt;/em&gt; is optional, and then click on &lt;strong&gt;Accept and Continue&lt;/strong&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-setting-up-a-new-project"&gt;
  &lt;/a&gt;
  2. Setting up a New Project
&lt;/h3&gt;

&lt;p&gt;Next, we need to create a new project, to do this click on the &lt;em&gt;CREATE PROJECT&lt;/em&gt; link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HWKqz9RO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623701916901/ZolLeSQsD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HWKqz9RO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623701916901/ZolLeSQsD.png" alt="CREATE PROJECT link"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Setup Project Name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fill in a name for your project, I am using &lt;code&gt;projectmailSender&lt;/code&gt; in this tutorial, note that this project name will be used to generate an &lt;code&gt;id&lt;/code&gt; for your project and this cannot be changed later.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
After you have decided on a project name, click on the &lt;span&gt;Create&lt;/span&gt;button.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VywVlvKF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623669488191/JnBBhB_4W.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VywVlvKF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623669488191/JnBBhB_4W.png" alt="Fill in a name for your project input box circled"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
After a few seconds delay your dashboard should look like this 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d6M8MZrr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623681938996/JjpHTBFqC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d6M8MZrr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623681938996/JjpHTBFqC.png" alt="frame_generic_light (20).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
After loading click on &lt;strong&gt;Go to APIs review&lt;/strong&gt; 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rgEXxe75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623682116582/1BSEXeqTO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rgEXxe75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623682116582/1BSEXeqTO.png" alt="frame_generic_light (21).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
On the APIs review page, click on the &lt;strong&gt;OAuth consent screen&lt;/strong&gt; option on the sidebar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pwOVovbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623682450130/GmmJO3-rgT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pwOVovbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623682450130/GmmJO3-rgT.png" alt="frame_generic_light (22).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-the-oauth-consent-screen"&gt;
  &lt;/a&gt;
  On the OAuth consent Screen
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
Select external 👇 and click on the &lt;span&gt;create&lt;/span&gt; button&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iHPep6w2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623684072803/Fwmry9wxp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iHPep6w2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623684072803/Fwmry9wxp.png" alt="the OAuth consent Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
The next step is to provide basic information about our app (nodemailSender) 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Only three inputs are compulsory, your app name and 2 emails, one for support and the other for contacting the developer.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;save and continue&lt;/strong&gt; when you are done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--juZhhP5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623682987008/nplkzkbd_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--juZhhP5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623682987008/nplkzkbd_.png" alt="basic information section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
The &lt;strong&gt;scope&lt;/strong&gt; section is optional, but if you want to fill it, you can.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am going to skip it in this tutorial by clicking the &lt;strong&gt;Save and continue&lt;/strong&gt; 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YPtpz7-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623683339013/j_slmeEWQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YPtpz7-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623683339013/j_slmeEWQ.png" alt="the scope section is option"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Add your email address as the test user and save 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8zdFSo4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623683837342/IrTd544wv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8zdFSo4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623683837342/IrTd544wv.png" alt="add test user section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
And finally in the &lt;strong&gt;Summary&lt;/strong&gt; section, review your application data and click on 
&lt;strong&gt;Back to dashboard&lt;/strong&gt; when you are satisfied.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SagfDm9w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623683757586/MAR6IZiaz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SagfDm9w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623683757586/MAR6IZiaz.png" alt="frame_generic_light (26).png"&gt;&lt;/a&gt;&lt;/p&gt;






&lt;p&gt;Now that we have setup our new application, let us proceed to generate the credentials we are going to use in our &lt;strong&gt;Nodemailer&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
From the page we stopped earlier 👆, click on the &lt;strong&gt;Credentials&lt;/strong&gt; option at the sidebar 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rjRwKDFh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623685109518/Ne0Hcol-F.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rjRwKDFh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623685109518/Ne0Hcol-F.png" alt="frame_generic_light (29).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;br&gt;
On the new page, click on &lt;strong&gt;Create Credentials&lt;/strong&gt; and select the &lt;strong&gt;OAuth Client ID&lt;/strong&gt; option from the dropdown 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IqjjqTjE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623685435247/y7XhLC1ws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IqjjqTjE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623685435247/y7XhLC1ws.png" alt="frame_generic_light (30).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
On the next page, select &lt;strong&gt;Web application&lt;/strong&gt; option from the dropdown, since we are building our application for the web 👇.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--evt27vAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623685708276/_y7_6_qZp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--evt27vAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623685708276/_y7_6_qZp.png" alt="frame_generic_light (31).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Choose a client name 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qr7H8K7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623685886068/3ek7xYu7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qr7H8K7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623685886068/3ek7xYu7g.png" alt="frame_generic_light (32).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Scroll to the bottom of the page and add  &lt;a href="https://developers.google.com/oauthplayground"&gt;https://developers.google.com/oauthplayground&lt;/a&gt; to the &lt;strong&gt;Authorized redirect urls&lt;/strong&gt; section 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XI--ynL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623687329834/Qs16-lf66.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XI--ynL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623687329834/Qs16-lf66.png" alt="frame_generic_light (34).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After adding the URL, click on the &lt;span&gt;Create&lt;/span&gt; button and if everything goes well, you should receive an alert that your OAuth credentials have been created,  followed by this 👇 popup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EoOQ8vGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623686342650/ULxkLmLyO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EoOQ8vGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623686342650/ULxkLmLyO.png" alt="frame_generic_light (33).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy your &lt;strong&gt;Client ID&lt;/strong&gt; and your &lt;strong&gt;Client Secret&lt;/strong&gt; key and keep them safe, because we will use it very soon.&lt;/p&gt;

&lt;p&gt;At this point we have gotten 2 out of 3 credentials that we need to configure out &lt;strong&gt;nodemailer&lt;/strong&gt;, the last credential we are looking for is the &lt;strong&gt;refreshToken&lt;/strong&gt;, let's go it em 🎣.&lt;/p&gt;






&lt;h3&gt;
  &lt;a href="#generating-oauth-refresh-token"&gt;
  &lt;/a&gt;
  Generating OAuth Refresh Token
&lt;/h3&gt;

&lt;p&gt;We will be using the &lt;strong&gt;Client ID&lt;/strong&gt; and the &lt;strong&gt;Client Secret&lt;/strong&gt; to generate our refresh token.&lt;/p&gt;

&lt;p&gt;(I hope you saved it earlier?)&lt;/p&gt;

&lt;p&gt;If you, you can retrieve it from the &lt;strong&gt;credential&lt;/strong&gt; tab 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MABhBP7K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623687913604/Kz_-LddDH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MABhBP7K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623687913604/Kz_-LddDH.png" alt="frame_generic_light (35).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
### OAuth Playground&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember that we set the &lt;strong&gt;Authorized redirect urls&lt;/strong&gt; to  &lt;a href="https://developers.google.com/oauthplayground"&gt;https://developers.google.com/oauthplayground&lt;/a&gt; ?&lt;/p&gt;

&lt;p&gt;Now let's head to the playground to grab our refresh token 💃&lt;/p&gt;

&lt;p&gt;click here 👉  &lt;a href="https://developers.google.com/oauthplayground"&gt;https://developers.google.com/oauthplayground&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#on-the-oauth-playground"&gt;
  &lt;/a&gt;
  On the OAuth Playground
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Click on the settings (gear icon)&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;Use your own OAuth credentials&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Fill in your &lt;strong&gt;Client ID&lt;/strong&gt; and &lt;strong&gt;Client Secret&lt;/strong&gt; keys appropriately&lt;/li&gt;
&lt;li&gt;Find and click &lt;strong&gt;Gmail API v1&lt;/strong&gt; then select &lt;em&gt;&lt;a href="https://mail.googl.com/"&gt;https://mail.googl.com/&lt;/a&gt;&lt;/em&gt; from the dropdown&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n63qpt6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623689079977/6nfrXGZeE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n63qpt6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623689079977/6nfrXGZeE.png" alt="frame_generic_light (37).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Authorize APIs&lt;/strong&gt; button.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
You should be redirected to the page below, ensure to select the email address you added as a &lt;strong&gt;Test user&lt;/strong&gt; 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nw4OR5As--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623689427949/lJP0J37pr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nw4OR5As--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623689427949/lJP0J37pr.png" alt="frame_generic_light (38).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are denied access, then you should check your test user in the Google Cloud Platform&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
Click on continue 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l4l4xZVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690097696/pCCJjXwED.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l4l4xZVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690097696/pCCJjXwED.png" alt="frame_generic_light (39).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Grand the application access to your Gmail account 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vJwVQBlL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690200520/g0JX3eQwP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJwVQBlL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690200520/g0JX3eQwP.png" alt="frame_generic_light (40).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IOdp3p3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690320461/L8aytCc9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IOdp3p3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690320461/L8aytCc9i.png" alt="frame_generic_light (41).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
You will be redirected back to the OAuth Playground, click on &lt;strong&gt;Exchange authorization code for tokens&lt;/strong&gt; 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qXwLEj6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690557359/Tr6S0O9sQn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qXwLEj6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690557359/Tr6S0O9sQn.png" alt="frame_generic_light (42).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Copy the refresh token and keep it safe 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NsfBmCh3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690779063/YCtHkM6Kn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NsfBmCh3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623690779063/YCtHkM6Kn.png" alt="frame_generic_light (43).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-google-transporter"&gt;
  &lt;/a&gt;
  Setting up Google Transporter
&lt;/h3&gt;

&lt;p&gt;Now that we have gotten our required credentials, let's update our nodemailer logic with the &lt;code&gt;googleapis&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;install the google API using the code below&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
yarn add googleapis&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What we want to achieve below is to connect to our &lt;strong&gt;Google Playground&lt;/strong&gt; and create a new token each time we need to send a mail and to achieve this, we need to dedicate a function named &lt;strong&gt;createTransport&lt;/strong&gt; to &lt;strong&gt;connect to the playground&lt;/strong&gt; and always create a new access token when we try to send a new email, with this we will never encounter expired token error.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;createTransport&lt;/code&gt; function 👇&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;// Googleapis&lt;br&gt;
const { google } = require("googleapis");&lt;/p&gt;

&lt;p&gt;// Pull out OAuth2 from googleapis&lt;br&gt;
const OAuth2 = google.auth.OAuth2;&lt;/p&gt;

&lt;p&gt;const createTransporter = async () =&amp;gt; {&lt;br&gt;
// 1&lt;br&gt;
  const oauth2Client = new OAuth2(&lt;br&gt;
    process.env.OAUTH_CLIENT_ID,&lt;br&gt;
    process.env.OAUTH_CLIENT_SECRET,&lt;br&gt;
    "&lt;a href="https://developers.google.com/oauthplayground"&gt;https://developers.google.com/oauthplayground&lt;/a&gt;"&lt;br&gt;
  );&lt;/p&gt;

&lt;p&gt;// 2&lt;br&gt;
  oauth2Client.setCredentials({&lt;br&gt;
    refresh_token: process.env.OAUTH_REFRESH_TOKEN,&lt;br&gt;
  });&lt;/p&gt;

&lt;p&gt;const accessToken = await new Promise((resolve, reject) =&amp;gt; {&lt;br&gt;
    oauth2Client.getAccessToken((err, token) =&amp;gt; {&lt;br&gt;
      if (err) {&lt;br&gt;
        reject("Failed to create access token :( " + err);&lt;br&gt;
      }&lt;br&gt;
      resolve(token);&lt;br&gt;
    });&lt;br&gt;
  });&lt;/p&gt;

&lt;p&gt;// 3&lt;br&gt;
  const transporter = nodemailer.createTransport({&lt;br&gt;
    service: "gmail",&lt;br&gt;
    auth: {&lt;br&gt;
      type: "OAuth2",&lt;br&gt;
      user: process.env.SENDER_EMAIL,&lt;br&gt;
      accessToken,&lt;br&gt;
      clientId: process.env.OAUTH_CLIENT_ID,&lt;br&gt;
      clientSecret: process.env.OAUTH_CLIENT_SECRET,&lt;br&gt;
      refreshToken: process.env.OAUTH_REFRESH_TOKEN,&lt;br&gt;
    },&lt;br&gt;
  });&lt;/p&gt;

&lt;p&gt;// 4&lt;br&gt;
  return transporter;&lt;br&gt;
};&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;p&gt;After importing the &lt;code&gt;googleapis&lt;/code&gt; and pulling out &lt;code&gt;OAuth2&lt;/code&gt;, let's see what we have in the &lt;code&gt;createTransporter&lt;/code&gt; function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-remember-this-"&gt;
  &lt;/a&gt;
  1. Remember this 👇?
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gofOQ3Mn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623698150196/aR-egfuaV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gofOQ3Mn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623698150196/aR-egfuaV.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can't always go to connect our application to the &lt;strong&gt;Google playground&lt;/strong&gt; manually, this method here 👇 is automatically doing that for us.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K99yBPwo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623697073219/237oAgSvg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K99yBPwo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623697073219/237oAgSvg.png" alt="Connect to Google playground"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-remember-the-refresh-access-token-also"&gt;
  &lt;/a&gt;
  2. Remember the refresh access token 👇 also?
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---jEy_s5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623698422273/0aGBNAeRE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---jEy_s5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623698422273/0aGBNAeRE.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The method below will automatically do that for us in other to keep the access token active, it requires the refresh token to generate a new access token, that is why we are passing the token from our &lt;strong&gt;environment-variable&lt;/strong&gt; along with it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YtjXfqhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623698595295/89j-zdurX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YtjXfqhn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623698595295/89j-zdurX.png" alt="Refresh Access Token.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#3-we-are-authenticating-ourselves-as-the-owner-of-the-gmail-account-we-want-to-use-as-the-transport"&gt;
  &lt;/a&gt;
  3. We are authenticating ourselves as the owner of the Gmail account we want to use as the transport.
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#4-we-are-returning-the-response-from-the-transport-authentication-approved-or-declined"&gt;
  &lt;/a&gt;
  4. we are returning the response from the transport authentication (approved or declined)
&lt;/h5&gt;






&lt;p&gt;Now that we have an understanding of what is going on, let us update our &lt;strong&gt;mailOptions&lt;/strong&gt; and our &lt;strong&gt;sendMail&lt;/strong&gt; method 👇&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
 // Route to handle sending mails&lt;br&gt;
app.post("/send_email", (req, res) =&amp;gt; {&lt;br&gt;
  attachmentUpload(req, res, async function (error) {&lt;br&gt;
    if (error) {&lt;br&gt;
      return res.send("Error uploading file");&lt;br&gt;
    } else {&lt;br&gt;
      // Pulling out the form data from the request body&lt;br&gt;
      const recipient = req.body.email;&lt;br&gt;
      const mailSubject = req.body.subject;&lt;br&gt;
      const mailBody = req.body.message;&lt;br&gt;
      const attachmentPath = req.file?.path;&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  // Mail options
  let mailOptions = {
    from: process.env.SENDER_EMAIL,
    to: recipient,
    subject: mailSubject,
    text: mailBody,
    attachments: [
      {
        path: attachmentPath,
      },
    ],
  };

  try {
    // Get response from the createTransport
    let emailTransporter = await createTransporter();

    // Send email
    emailTransporter.sendMail(mailOptions, function (error, info) {
      if (error) {
        // failed block
        console.log(error);
      } else {
        // Success block
        console.log("Email sent: " + info.response);
        return res.redirect("/success.html");
      }
    });
  } catch (error) {
    return console.log(error);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;});&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What we are doing above is to create an asynchronous function without our post route, because we are going to be waiting for a response from the &lt;code&gt;createTransportorer&lt;/code&gt; function, we also created a new attachment key in our &lt;strong&gt;mailOpitons&lt;/strong&gt; which will hold our attachment.&lt;/p&gt;

&lt;p&gt;The try block is to catch any error that is going to occur during the process of connecting to the &lt;strong&gt;Google playground&lt;/strong&gt; and sending out emails.&lt;/p&gt;

&lt;p&gt;The if statement which serves as a conditional statement will check if there is an error and log it out, but if there is no error during the process, it will redirect to the success page.&lt;/p&gt;

&lt;p&gt;Now let us test our code 💃&lt;/p&gt;

&lt;p&gt;Because this article is long already, I have created a  &lt;a href="https://gist.github.com/unclebay143/643675b5d9112f7b16dac7af60e81af9"&gt;&lt;strong&gt;Github Gist Here&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Update your &lt;code&gt;index.js&lt;/code&gt; file with the code from the &lt;strong&gt;Git&lt;/strong&gt; 👆 and fill the form in your browser with an attachment, like below  👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VDopQWqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623700700290/RI11jhu1a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VDopQWqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623700700290/RI11jhu1a.png" alt="frame_generic_light (48).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on the send mail button, and if all goes well, you should be redirected to the &lt;strong&gt;Success Page&lt;/strong&gt; 👇.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R3tQgOKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623702207642/WI8plCd78.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R3tQgOKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623702207642/WI8plCd78.png" alt="frame_generic_light (52).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Proceed to check your recipient mailbox, your sent e-mail should be received 💃.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J3Uml5Nf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623702169184/h32XS0PZs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J3Uml5Nf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623702169184/h32XS0PZs.png" alt="frame_generic_light (51).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Full mail body with attachment displayed 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dl5qoyc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623702355866/CQ8mGUQQnO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dl5qoyc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623702355866/CQ8mGUQQnO.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;






&lt;h3&gt;
  &lt;a href="#cleaning-up"&gt;
  &lt;/a&gt;
  Cleaning Up
&lt;/h3&gt;

&lt;p&gt;Now that our project is complete, there is one important thing to do, which is deleting the attachments from our server document, everytime a mail has been sent, we don't want to keep the user's files, and these files can also take up huge space.&lt;/p&gt;

&lt;p&gt;To achieve this, we need to install a package called &lt;code&gt;fs&lt;/code&gt; 👇&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
yarn add fs&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The fs package allows us to perform actions with our computer files through Node JS more info  &lt;a href="https://nodejs.org/api/fs.html"&gt;HERE&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, let us update our &lt;code&gt;sendMail&lt;/code&gt; method within the &lt;strong&gt;else&lt;/strong&gt; success block with the code below 👇&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// Send email&lt;br&gt;
emailTransporter.sendMail(mailOptions, function (error, info) {&lt;br&gt;
  if (error) {&lt;br&gt;
    // failed block&lt;br&gt;
    console.log(error);&lt;br&gt;
  } else {&lt;br&gt;
    // Success block&lt;br&gt;
    console.log("Email sent: " + info.response);&lt;br&gt;
    fs.unlink(attachmentPath, function (err) {&lt;br&gt;
      if (err) {&lt;br&gt;
        return res.end(err);&lt;br&gt;
      } else {&lt;br&gt;
        console.log(attachmentPath + " has been deleted");&lt;br&gt;
        return res.redirect("/success.html");&lt;br&gt;
      }&lt;br&gt;
    });&lt;br&gt;
  }&lt;br&gt;
});&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;






&lt;p&gt;You can get the completed Github Gist for the &lt;code&gt;index.js&lt;/code&gt; file &lt;a href="https://gist.github.com/unclebay143/d21748097ab04cbad551508f79d538d4"&gt;Here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now try to send another mail with an attachment to test if the sent files still remain in the folder, remember to manually remove the existing ones.&lt;/p&gt;

&lt;p&gt;And that is how to implement a mailing application into your NODE JS project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QfrZvpT4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623766288820/jpCRyVgkZ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QfrZvpT4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623766288820/jpCRyVgkZ.gif" alt="giphy (6).gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, you just learned the basics of Node JS which includes Routing, rendering HTML files, integrating packages, working with Google APIs, and file handling to mention a few. This should get you started in using these technologies to build more stuff.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links 👇
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Final Project Link: &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hosted Version Link: &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;






&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E0SkZ0k2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623766314820/wfaXUoHmq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E0SkZ0k2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623766314820/wfaXUoHmq.gif" alt="giphy (5).gif"&gt;&lt;/a&gt;&lt;/p&gt;






&lt;p&gt;Wow, what a journey, I am glad you made it to the end of this article, if you enjoyed and learned from this article, I will like to connect with you, so you won't miss any of my upcoming articles.&lt;/p&gt;

&lt;p&gt;Let's connect on&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://twitter.com/intent/follow?screen_name=unclebigbay143"&gt;Twitter @unclebigbay143&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.linkedin.com/in/unclebigbay/"&gt;LinkedIn @unclebigbay&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;






&lt;p&gt;%%[reaction-id]&lt;/p&gt;






&lt;p&gt;See you in the next article. Bye Bye 🙋‍♂️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---96uVdrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622627809083/3i7ThmW-M.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---96uVdrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622627809083/3i7ThmW-M.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you found this helpful and want to support my blog, you can also &lt;a href="//www.buymeacoffee.com/unclebigbay"&gt;buy me a coffee&lt;/a&gt;.&lt;/p&gt;



</description>
    </item>
    <item>
      <title>AI vs ML vs DL vs DS</title>
      <author>thatIITgirl</author>
      <pubDate>Fri, 18 Jun 2021 07:14:07 +0000</pubDate>
      <link>https://dev.to/thatiitgirl/ai-vs-ml-vs-dl-vs-ds-12fa</link>
      <guid>https://dev.to/thatiitgirl/ai-vs-ml-vs-dl-vs-ds-12fa</guid>
      <description>&lt;p&gt;Ever felt awkward while discussing in the team,... when you say- Yes! we should put some Machine Learning into that, and someone else says ummm, I guess Deep Learning is what it needs. and you node silently?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6kvBXN1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media3.giphy.com/media/jbwsLn6OvdO80/200w.webp%3Fcid%3Decf05e47rp3v9f039g8og1ruiqpuswn3iwp1vtb95enpjpzq%26rid%3D200w.webp%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6kvBXN1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media3.giphy.com/media/jbwsLn6OvdO80/200w.webp%3Fcid%3Decf05e47rp3v9f039g8og1ruiqpuswn3iwp1vtb95enpjpzq%26rid%3D200w.webp%26ct%3Dg" alt="smirk"&gt;&lt;/a&gt;&lt;br&gt;
So what is it? what is the difference among all in the simplest words? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;first AI ie Artificial Intelligence&lt;/strong&gt;&lt;br&gt;
It's not just a way of doing things, it is the umbrella. Remember, Venn diagram? This is the whole universe, your ultimate aim to make your app smart; ie AI enabled. Any machine that could use intelligence and make its own decision similar to our brain is AI enabled.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gUII_-Xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media4.giphy.com/media/idqIceJ08pjyIS5rRP/200w.webp%3Fcid%3Decf05e47d44g3y5lfl8lq0wca77w6ctqlynlhk1eqdbismib%26rid%3D200w.webp%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gUII_-Xu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media4.giphy.com/media/idqIceJ08pjyIS5rRP/200w.webp%3Fcid%3Decf05e47d44g3y5lfl8lq0wca77w6ctqlynlhk1eqdbismib%26rid%3D200w.webp%26ct%3Dg" alt="aIml"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Machine Learning&lt;/strong&gt; is a subset of AI like rest of them, it's more of a tool which gives us way to deal with the data, train it through supervised and unsupervised methods. After your machine learns from this data, it can take decision. The data accuracy is the key to the best decision making in your app. for the for example, we can train our machine to spot the difference between 2 species of a bird. Next time, You'll feed a bird's image to the app, based on what it learned, it'll produce the result.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7NlTQdmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/66199202/122507964-0633fd00-cfb6-11eb-96b2-8b10e35d9b90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7NlTQdmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/66199202/122507964-0633fd00-cfb6-11eb-96b2-8b10e35d9b90.png" alt="aIml"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DL ie Deep Learning&lt;/strong&gt; is again a subset of both and more complex. Its main aim is to mimic brain. It doesn't use labeled or data training but replicate the data processing and patterns creations like we do. It uses various multi neural network architecture.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5_2sJlCj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/66199202/122508557-02ed4100-cfb7-11eb-9563-04b5b073bfbd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5_2sJlCj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/66199202/122508557-02ed4100-cfb7-11eb-9563-04b5b073bfbd.png" alt="DL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So What is &lt;strong&gt;Data science?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Data Science is an approach/discipline/field of study that deals with manipulation and transforming of data. Like an equal size umbrella. whenever you are crunching, putting mathematics, trying to make a sense out of the data using probability/algebra anything, you are using data science. Its not new like AI/ML, it's been here since forever.Tada!!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pUXEjivf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/66199202/122508831-7bec9880-cfb7-11eb-91a1-bd981cf0223c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pUXEjivf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/66199202/122508831-7bec9880-cfb7-11eb-91a1-bd981cf0223c.png" alt="DS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This might not be the most accurate and technical explanation. But it'll give a little sense of permanent understanding.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EmP6FoAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media1.giphy.com/media/2ALDrK4ckHNLNCw45v/200w.webp%3Fcid%3Decf05e47mf1o0bvc1fi7j4dpz7u75wvi46gwupplkuzjzng3%26rid%3D200w.webp%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EmP6FoAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media1.giphy.com/media/2ALDrK4ckHNLNCw45v/200w.webp%3Fcid%3Decf05e47mf1o0bvc1fi7j4dpz7u75wvi46gwupplkuzjzng3%26rid%3D200w.webp%26ct%3Dg" alt="btr"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>deeplearning</category>
      <category>ai</category>
    </item>
    <item>
      <title>How to Gauge A Cryptocurrency Exchange Development Company?
</title>
      <author>ElenaAl</author>
      <pubDate>Fri, 18 Jun 2021 06:50:25 +0000</pubDate>
      <link>https://dev.to/elenaal/how-to-gauge-a-cryptocurrency-exchange-development-company-42c1</link>
      <guid>https://dev.to/elenaal/how-to-gauge-a-cryptocurrency-exchange-development-company-42c1</guid>
      <description>&lt;p&gt;The global popularity and the explosive growth in cryptocurrency value, the numbers of ICO, and the nascent beginning of the fintech industry started with Bitcoin. People have become self-employed as traders in cryptocurrency. But can you make money by offering a platform for trading cryptocurrency? Today we will talk about the other side of the equation and examine how to gauge a &lt;a href="https://pixelplex.io/cryptocurrency-exchange-development/"&gt;cryptocurrency exchange&lt;/a&gt; development company to build you a cryptocurrency exchange from scratch.&lt;/p&gt;

&lt;p&gt;To select a software development partner to develop cryptocurrency exchange for you, you must consider the following factors to identify the best cryptocurrency exchange development company for your venture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-history-of-the-company"&gt;
  &lt;/a&gt;
  The History of the Company
&lt;/h2&gt;

&lt;p&gt;It is imperative to check the history and background of the company. Critical is the length for which they have been involved in the crypto software development. How much experience they have in developing and deploying crypto tokens, STOs, IDO, etc.  &lt;/p&gt;

&lt;p&gt;Are they able to provide you with a full development and deployment cycle? Are they able to implement elements for your platform's digital marketing and other promotions? Can they develop and deploy? Do they have an intuitive understanding of architectural complexity and scalability? Can they deliver and deploy cryptocurrency exchange apps that seamlessly support any communication logic you deem necessary? These are all the questions you must ask yourself and the tech company you are partnering with.&lt;/p&gt;

&lt;p&gt;One of the best ways to gauge a development company is to see if their development team has an account on Github and allow you to look at their code repository. Now, you might not be technically inclined. But, if you are, this might be an excellent way to see how competently they code and how many tools/ frameworks they have worked with and how successfully they implemented past projects. If you are so technically disinclined that you do not know the answer to the question, 'What is a blockchain &lt;a href="https://pixelplex.io/blog/what-is-a-blockchain-wallet/"&gt;wallet&lt;/a&gt;?' this route is not for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#does-the-company-understand-your-business-strategy"&gt;
  &lt;/a&gt;
  Does the Company Understand Your Business Strategy?
&lt;/h2&gt;

&lt;p&gt;More than developing a technological solution, it is crucial to see if the company developing your cryptocurrency exchange project understands your business strategy. How you plan to market, launch, and operate your business  This is especially important because you are not choosing a group of developers, you are choosing a partner that knows the ins and outs of doing something that you have limited experience in doing and can guide you with the best advice in deploying your project successfully.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#verify-the-quality-of-service-amp-customer-support"&gt;
  &lt;/a&gt;
  Verify the Quality of Service &amp;amp; Customer support
&lt;/h2&gt;

&lt;p&gt;If you are not technically inclined it is mandatory that you make yourself thoroughly familiar with how the company plans to deploy, and support each and every piece of technology they have developed for you. That they answer and document everything in the case of solution failure or hardware failure. And what is the contingency plan in the event of a failure. Having a robust and competent technical team can be the difference between run-away success and abject failure. Go through all of the following steps to ensure the reputation of the company:&lt;/p&gt;

&lt;p&gt;Must have a versatile portfolio with full scale deployment of projects..&lt;br&gt;
A deployable and ambitious business strategy&lt;br&gt;
Competent and professional Blockchain experts team&lt;br&gt;
A detailed and well-tested marketing plan that fits both your vision and their expertise&lt;br&gt;
In compliance with the Laws of the country&lt;br&gt;
Deploy what is promised in Blockchain technology&lt;br&gt;
Excellent team of Blockchain developers&lt;br&gt;
Perform a thorough background check (reviews, feedbacks) of the company&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-company-has-a-robust-marketing-plan"&gt;
  &lt;/a&gt;
  The Company Has a Robust Marketing Plan
&lt;/h2&gt;

&lt;p&gt;Creating a secure crypto exchange is a daunting task. It applies the same way with marketing the crypto exchange platform. You should have a strong marketing plan. One that covers all sectors where your potential clients are, marketing your exchange is critical to launching a successful crypto exchange. Thus, apart from mastering the technical side, you must also focus on the marketing plan of your chosen cryptocurrency exchange development company. Your marketing plans must detail how you plan to tackle the competition in the crypto marketplace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#verify-the-laws-of-the-country"&gt;
  &lt;/a&gt;
  Verify the Laws of the country
&lt;/h2&gt;

&lt;p&gt;One of the biggest snafus that occur in deploying your project is if the country where your business is based does not allow selling or trading cryptocurrencies or have other prohibitions regarding crypto assets. The development company must have an in-depth knowledge of the applicable laws related to the cryptocurrency exchange development service. Also, your developing company must know the marketplace issues of the country’s jurisdictions. Instead of understanding cryptocurrencies, many countries are saying NO to digital currencies and crypto exchanges. Some of the countries have gone as far as banning trading cryptocurrencies. Things might split your way where there is no ban on cryptocurrency exchange development services. Thus, ensure that the laws of the country are in your favour before choosing a development company.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deployment-of-the-most-current-blockchain-technology"&gt;
  &lt;/a&gt;
  Deployment of the Most Current Blockchain Technology
&lt;/h2&gt;

&lt;p&gt;In today's market of rapid innovation, Blockchain technology is one of the complex &amp;amp; progressive technologies and has applications and use cases in many industries. Due to the various use cases and applications, the technology is also changing and maturing very quickly. When it comes to your cryptocurrency exchange development projects, it is critical to implement the most cutting-edge blockchain technology and features in it. While choosing a development company, you need to ascertain and verify whether their developers have expertise in blockchain technology or not. Whether you choose to secure your project with a digital wallet or paper &lt;a href="https://pixelplex.io/blog/best-ethereum-wallets/"&gt;wallet ethereum&lt;/a&gt;, it is critical to do so using the most recent technology at hand.&lt;/p&gt;

&lt;p&gt;Closing Words&lt;br&gt;
The factors discussed above are the bare minimum of things you must consider before choosing a development company for your cryptocurrency exchange.  Make sure that the company has a history of successful outcomes, it understands your business strategy and will help you in implementing it, has expertise in Blockchain use cases that are most recent in an evolving marketplace, and provides excellent customer support to overcome any problems when your exchange goes live.&lt;/p&gt;

</description>
      <category>blockchain</category>
    </item>
    <item>
      <title>Need  Suggestion How to create This Types of FullCalendar</title>
      <author>pratikdungarani</author>
      <pubDate>Fri, 18 Jun 2021 06:50:00 +0000</pubDate>
      <link>https://dev.to/pratikdungarani/need-suggestion-how-to-create-this-types-of-fullcalendar-4699</link>
      <guid>https://dev.to/pratikdungarani/need-suggestion-how-to-create-this-types-of-fullcalendar-4699</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CqOk2RvB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zkvofsy280ko91ywqgaz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CqOk2RvB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zkvofsy280ko91ywqgaz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d57H2DNk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6zx74abnuui7g1ao7gk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d57H2DNk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6zx74abnuui7g1ao7gk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;if any one have suggest how to create this types of Fullclendar in ReactJs   &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Dark mode toggle animation using CSS !</title>
      <author>murtuza</author>
      <pubDate>Fri, 18 Jun 2021 06:36:03 +0000</pubDate>
      <link>https://dev.to/murtuzaalisurti/dark-mode-toggle-animation-using-css-27il</link>
      <guid>https://dev.to/murtuzaalisurti/dark-mode-toggle-animation-using-css-27il</guid>
      <description>&lt;p&gt;This tutorial will mainly focus on how to use transitions in CSS and make a toggle button for light as well as dark mode using little JavaScript. Let's dive into the world of transitions!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;

&lt;p&gt;HTML Markup is pretty simple to understand. All you have to do is to make a container for the icons that we are going to use from &lt;a href="https://fontawesome.com/v5.15/icons/sun?style=solid"&gt;fontawesome&lt;/a&gt; and nest the respective &lt;code&gt;div&lt;/code&gt;s containing the icons inside the conatiner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="container"&amp;gt;
   &amp;lt;div class="sun sun-logo"&amp;gt;
      &amp;lt;i class="fas fa-sun"&amp;gt;&amp;lt;/i&amp;gt;
   &amp;lt;/div&amp;gt;
   &amp;lt;div class="moon moon-logo"&amp;gt;
      &amp;lt;i class="fas fa-moon"&amp;gt;&amp;lt;/i&amp;gt;
   &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container{
    position: relative;
}

.sun, .moon{
    font-size: 10rem;
    width: fit-content;
    height: fit-content;
}

.moon{
    position: absolute;
    inset: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set the container position to be &lt;code&gt;relative&lt;/code&gt; and the moon container position to be &lt;code&gt;absolute&lt;/code&gt; because we will position the moon icon in the same position as that of the sun icon.&lt;/p&gt;

&lt;p&gt;Here's the interesting part. Instead of using &lt;code&gt;top: 0;&lt;/code&gt; &lt;code&gt;bottom: 0;&lt;/code&gt; &lt;code&gt;left: 0;&lt;/code&gt; and &lt;code&gt;right: 0;&lt;/code&gt; you can use &lt;code&gt;inset: 0;&lt;/code&gt; to get the same result. It works!&lt;/p&gt;

&lt;p&gt;Also, set the &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; of the sun and the moon container to &lt;code&gt;fit-content&lt;/code&gt;. What this will do is, it will set the height and width of the container to match the height and width of the content inside it.&lt;/p&gt;

&lt;p&gt;And, in order to change the size of the fontawesome icon, just change the &lt;code&gt;font-size&lt;/code&gt; of the icon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.moon-logo{
    opacity: 0;
    transform: translateY(20%) rotateZ(50deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will set up the initial position of the moon icon and its initial opacity when the webpage is rendered for the first time. Here, as the opacity of the moon icon is zero, only the sun icon will be visible to us.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;translateY(20%)&lt;/code&gt; declaration will offset the moon icon down along the Y-axis by 20% of the height of it's parent element.&lt;/p&gt;

&lt;p&gt;Similarly, the &lt;code&gt;rotateZ(50deg)&lt;/code&gt; declaration will rotate the moon icon along the Z-axis by 50 degrees.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.sun-logo{
    opacity: 1;
    transform: translateY(0) rotateZ(0deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the same way, we will set the initial properties for the sun icon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.animate-sun{
    opacity: 0;
    transform: translateY(20%) rotateZ(100deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we will set the final properties of the sun icon to which it will transition into.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.animate-moon{
    opacity: 1;
    transform: translateY(0%) rotateZ(0deg);
    color: aliceblue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, we will set the final properties of the moon icon to which it will transition into. One thing to note here is the default color of the icons is &lt;code&gt;black&lt;/code&gt;, so if you want to change the color of the icon, then define its &lt;code&gt;color&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;But wait, we haven't used the &lt;code&gt;transition&lt;/code&gt; property yet, so how will it transition from one state to another? Yeah, that's the only thing left to do in CSS part.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.moon-logo{
    opacity: 0;
    transform: translateY(20%) rotateZ(50deg);
    transition: all 1s ease-out;
}
.sun-logo{
    opacity: 1;
    transform: translateY(0) rotateZ(0deg);
    transition: all 1s ease-out;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.dark{
    background-color: black;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will use the above class to change the &lt;code&gt;background-color&lt;/code&gt; of the &lt;code&gt;body&lt;/code&gt; when the transition of the icons will happen.&lt;/p&gt;

&lt;p&gt;That's it. Your CSS part is ready.&lt;/p&gt;

&lt;p&gt;Now, let's move on to the JavaScript part. We will use JavaScript to &lt;code&gt;toggle&lt;/code&gt; the classes on &lt;code&gt;click&lt;/code&gt; event.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.querySelector(".container").addEventListener("click", () =&amp;gt; {
    document.querySelector(".sun-logo").classList.toggle("animate-sun");
    document.querySelector(".moon-logo").classList.toggle("animate-moon");
    document.querySelector("body").classList.toggle("dark");
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have added an &lt;code&gt;eventListener&lt;/code&gt; to the container element so that when we click on the container, it will toggle the CSS classes for respective elements.&lt;br&gt;
Which means that, if the CSS class is not present in the &lt;code&gt;classList&lt;/code&gt; of an element, &lt;code&gt;toggle&lt;/code&gt; function will add the CSS class to the &lt;code&gt;classList&lt;/code&gt; of the respective element.&lt;/p&gt;

&lt;p&gt;And, if the CSS class is already present in the &lt;code&gt;classList&lt;/code&gt; of the element, it will remove it.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;classList&lt;/code&gt; is actually a &lt;code&gt;DOMTokenList&lt;/code&gt; but we will not go into the specifics of it.&lt;/p&gt;

&lt;p&gt;This is it. Here's the final output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M5WXA1I---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kku7sh96z4srbgbkynz3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M5WXA1I---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kku7sh96z4srbgbkynz3.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The Advantages of Adopting Cloud Computing Services</title>
      <author>Adit Modi</author>
      <pubDate>Fri, 18 Jun 2021 06:35:30 +0000</pubDate>
      <link>https://dev.to/cloudtech/the-advantages-of-adopting-cloud-computing-services-2275</link>
      <guid>https://dev.to/cloudtech/the-advantages-of-adopting-cloud-computing-services-2275</guid>
      <description>&lt;p&gt;As recently as just a few years ago, business leaders worried about the unknown factors of moving their core applications to the cloud. Factors like not knowing how a particular application might work in the cloud were deterrents to what would have been optimal cloud migration, according to Tech Target. With new attention to performance metrics and understanding how their applications will scale with cloud services, organizations are finding cloud computing companies more attractive all the time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CMS Wire&lt;/strong&gt; confirms the rapidly increasing adoption of cloud computing services, reporting that enterprises are more willing than ever to stretch beyond the boundaries of their on-premises data center systems to invest in IT infrastructure that supports deployment in cloud environments. This large-scale migration to the cloud—cutting across various industries and a range of business sizes—is set to result in a projected &lt;strong&gt;$266 billion annual spending on IT infrastructure and cloud services by 2021&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jwd1utrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mz47et8v0hdg80nwa08h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jwd1utrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mz47et8v0hdg80nwa08h.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My Background: Cloud Engineer | AWS Community Builder | AWS Educate Cloud Ambassador | 4x AWS Certified | 3x OCI Certified | 3x Azure Certified.&lt;/em&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-advantages-of-adopting-cloud-computing-services"&gt;
  &lt;/a&gt;
  The Advantages of Adopting Cloud Computing Services
&lt;/h1&gt;

&lt;p&gt;As you now seriously consider migrating your data and/or applications to one of the high-caliber cloud computing companies like Amazon Web Services, it may help you to learn just a few of the many ways your company can benefit from the advantages the cloud offers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Automated Application Deployments and Data Backups -&lt;/strong&gt;Managing the deployment of new code, security patches, data backup, and disaster recovery plans are crucial tasks for a software development company and should not be taken lightly. Even if your company is not a software development company, you still have to worry about security patches, data backup, and disaster recovery. Fortunately, these are all things that can be automated and managed more easily on the cloud. Cloud service providers like &lt;em&gt;Amazon Web Services (AWS)&lt;/em&gt; provide the tools and automation necessary to make managing your deployments and data backups something you don't have to worry about.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reduce and Streamline IT Infrastructure Costs -&lt;/strong&gt;By adopting cloud services, you can say goodbye to the costly need to purchase servers that require expert installation, regular maintenance and full replacement every few years. You can also reduce the staffing costs you once spent to manage your detail-heavy infrastructure to focus your human resource allowance on tasks like tending to help desk issues and managing your system's internal controls.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Continually Available Infrastructure -&lt;/strong&gt;The virtualized servers in cloud computing companies do not rely on specific hardware, so they are always available to your users via office computers, remote laptops or on mobile devices. Common hardware issues, such as hard-drive failures, no longer have any direct impact on your users' ability to access data and applications stored in the cloud.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flexible, Scalable, and Resilient Services -&lt;/strong&gt;Whether you own a small business and anticipate growth in the coming years, or you plan to further expand your large-scale operations geographically, cloud service providers like Amazon Web Services offer the flexibility, scalability, and resilience that your enterprise requires. No matter what changes you have in mind for your organization, this trio of advantages means that you can grow your company without worrying about impacting your users' needs. You can add more storage space as needed while your users—across town or around the world—can access your database or applications with ease and without interruption.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trade capital expense for variable expense –&lt;/strong&gt;Instead of having to invest heavily in data centers and servers before you know how you’re going to use them, you can pay only when you consume computing resources, and pay only for how much you consume.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefit from massive economies of scale –&lt;/strong&gt;By using cloud computing, you can achieve a lower variable cost than you can get on your own. Because usage from hundreds of thousands of customers is aggregated in the cloud, providers such as AWS can achieve higher economies of scale, which translates into lower pay as-you-go prices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stop guessing capacity –&lt;/strong&gt;Eliminate guessing on your infrastructure capacity needs. When you make a capacity decision prior to deploying an application, you often end up either sitting on expensive idle resources or dealing with limited capacity. With cloud computing, these problems go away. You can access as much or as little capacity as you need, and scale up and down as required with only a few minutes’ notice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Increase speed and agility –&lt;/strong&gt;In a cloud computing environment, new IT resources are only a click away, which means that you reduce the time to make those resources available to your developers from weeks to just minutes. This results in a dramatic increase in agility for the organization, since the cost and time it takes to experiment and develop is significantly lower.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stop spending money running and maintaining data centers -&lt;/strong&gt;Focus on projects that differentiate your business, not the infrastructure. Cloud computing lets you focus on your own customers, rather than on the heavy lifting of racking, stacking, and powering servers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go global in minutes –&lt;/strong&gt;Easily deploy your application in multiple regions around the world with just a few clicks. This means you can provide lower latency and a better experience for your customers at minimal cost.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Cloud computing continues to grow and will likely continue to do so. The &lt;strong&gt;low-cost infrastructure&lt;/strong&gt; for enterprise solutions combined with the high-value services has resulted in cloud services being consistently in-demand.&lt;/p&gt;

&lt;p&gt;The added cloud computing benefits like mobility and improvement to business insights all contribute to pushing cloud tech-forward.&lt;/p&gt;

&lt;p&gt;Numbers from Statista prove why cloud computing is such a big deal:&lt;/p&gt;

&lt;p&gt;The size of the cloud computing market has exceeded &lt;strong&gt;$146 billion&lt;/strong&gt;&lt;br&gt;
Global cloud data center traffic topped &lt;strong&gt;10.6 zettabytes&lt;/strong&gt; in 2020&lt;br&gt;
Demand for public cloud services is expected to grow more than 17 percent this year&lt;br&gt;
Growth is expected among all types of cloud services, with businesses at all levels switching to &lt;strong&gt;cloud-based tools&lt;/strong&gt; and storage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RNP8XeHD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvz7rex7fklqxlz3rf3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RNP8XeHD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvz7rex7fklqxlz3rf3n.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this guide helps you understand The Advantages of Adopting Cloud Computing Services, feel free to connect with me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn.&lt;/a&gt;&lt;br&gt;
You can view my badges &lt;a href="https://www.youracclaim.com/users/adit-modi/badges"&gt;here.&lt;/a&gt;&lt;br&gt;
If you are interested in learning more about AWS then follow me on &lt;a href="https://github.com/AditModi"&gt;github.&lt;/a&gt;&lt;br&gt;
If you liked this content then do clap and share it . Thank You .&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>beginners</category>
      <category>newbie</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Amazing Card Fill Hover Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Fri, 18 Jun 2021 06:34:15 +0000</pubDate>
      <link>https://dev.to/nikhil27b/amazing-card-fill-hover-using-html-css-20i</link>
      <guid>https://dev.to/nikhil27b/amazing-card-fill-hover-using-html-css-20i</guid>
      <description>&lt;p&gt;Hello Guys,&lt;/p&gt;

&lt;p&gt;Today I created a Amazing Card Fill Hover Using HTML &amp;amp; CSS. In this card I am using only HTML and CSS for hover animation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;What is a Frontend Develoment?&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ullam porro similique aliquid debitis ipsam soluta dolorum ipsa! Voluptate, suscipit iure.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a simple html I am using for card. For hover effect I am using &lt;code&gt;card::before&lt;/code&gt; tag for position and after hover I only scale the &lt;code&gt;.card:hover::before&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("https://fonts.googleapis.com/css?family=Poppins:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i&amp;amp;subset=devanagari,latin-ext")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Poppins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#343a40&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;drop-shadow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;180px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.6s&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7952b3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;220px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;0.25s&lt;/span&gt; &lt;span class="n"&gt;ease-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:hover::before&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transition-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0.2s&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;40&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you find this useful in a post like and save this post also comments about your thoughts and new ideas for post.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/oNZmRpa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>DynamoDB Streams</title>
      <author>Royal Bhati</author>
      <pubDate>Fri, 18 Jun 2021 06:28:28 +0000</pubDate>
      <link>https://dev.to/royal_bhati/dynamodb-streams-13eg</link>
      <guid>https://dev.to/royal_bhati/dynamodb-streams-13eg</guid>
      <description>&lt;p&gt;While working on a backend service, I came across this problem where I had to retrieve a set of data of a specific type, but that type wasn't having any index and the data was also updated frequently.&lt;/p&gt;

&lt;p&gt;Since the data was constantly changing (add/update), first thing that came to my mind was to have a trigger but then as I looked at the documentation of how to add triggers to Dynamo in AWS, I decided to pursue a different solution :p&lt;/p&gt;

&lt;p&gt;So, there were three easy solutions that were present before me without thinking much - &lt;/p&gt;

&lt;p&gt;→  &lt;strong&gt;Complete scan of the table and filter the results&lt;/strong&gt;&lt;br&gt;
 This solution was screaming "slow" right from the moment it entered my mind.&lt;/p&gt;

&lt;p&gt;→ &lt;strong&gt;Add an Index for that type&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There were couple of reasons I didn't go along with this idea&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;That wasn't a very frequently queried data&lt;/li&gt;
&lt;li&gt;Already had so many indexes so didn't want to add one more just yet before trying other solutions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;→  &lt;strong&gt;Run a cron-job&lt;/strong&gt; &lt;br&gt;
A cronjob that will scan the table and store the result in a cache or in another table.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Great man once said, If you can't think of anything else, run a cron-job.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Back in my mind, I wasn't quite convinced with any of the above three solutions and so decided to give dynamodb triggers try. I was aware of DynamoDb streams but never tried them.&lt;/p&gt;

&lt;p&gt;DynamoDB Streams are basically triggers like that we have in Relational DBs but the only difference is that it generates stream of events when there is a data change and you can easily pipe that stream into Kinesis or a Lambda (In my case it was lambda).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QiK2EJE4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhsj779raxsprdth97ih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QiK2EJE4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhsj779raxsprdth97ih.png" alt="Architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS made the things look difficult but the process was not complex at all. &lt;/p&gt;

&lt;p&gt;All I had to do was the following -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setup a stream on the dynamodb table which was just a one click action.&lt;/li&gt;
&lt;li&gt;Create a new lambda function and attach it to the dynamodb stream which was also fairly easy&lt;/li&gt;
&lt;li&gt;Rest was basic stuff of listening the data then processing it and finally saving it to the new table&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DynamoDB streams are much more than what I have covered in my use case. You can read more about it here : -&lt;a href="https://aws.amazon.com/blogs/database/dynamodb-streams-use-cases-and-design-patterns/"&gt;https://aws.amazon.com/blogs/database/dynamodb-streams-use-cases-and-design-patterns/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>dynamodb</category>
      <category>node</category>
      <category>beginners</category>
    </item>
    <item>
      <title>HTML target=_blank vs target=blank</title>
      <author>Nirazan Basnet</author>
      <pubDate>Fri, 18 Jun 2021 06:08:08 +0000</pubDate>
      <link>https://dev.to/integridsolutions/html-target-blank-vs-target-blank-5b7m</link>
      <guid>https://dev.to/integridsolutions/html-target-blank-vs-target-blank-5b7m</guid>
      <description>&lt;p&gt;Earlier I thought they both perform the same actions like opening a link to a new tab (or window ) in the browser. But, just removing the underscore can make an important difference.&lt;/p&gt;

&lt;p&gt;The target attribute specifies where to open the linked document.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.google.com"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Visit google Site&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#with-targetblank"&gt;
  &lt;/a&gt;
  With target=_blank,
&lt;/h3&gt;

&lt;p&gt;Whenever we click the link, it will open in a new tab. So, let's say if we click more links then, every time a new browser tab will open which can create multiple tabs, and maybe it can frustrate the user and its experience.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--daz1utDu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7e9lqt20hsga1yb99vq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--daz1utDu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7e9lqt20hsga1yb99vq.gif" alt="target _blank example"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#alternate-solutions-we-can-use-targetblank"&gt;
  &lt;/a&gt;
  Alternate solutions we can use target=blank,
&lt;/h3&gt;

&lt;p&gt;Now, let's remove the underscore, then the browser will open the link in a tab called 'blank' instead of opening a new one. With this, if the user will click multiple links then the links will open in a single tab.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.google.com"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"blank"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Visit google Site&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zdKzgr5d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yyhswue3i6jarwg19yus.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zdKzgr5d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yyhswue3i6jarwg19yus.gif" alt="target blank example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/nirazanbasnet/embed/wvJOgvW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Conclusion&lt;br&gt;
👏👏 By coming this far I hope you can implement this awesome target attribute trick on your project. So, I suggest you give it a try on your project and enjoy it!&lt;/p&gt;

&lt;p&gt;Feel free to share your thoughts and opinions and leave me a comment if you have any problems or questions.&lt;/p&gt;

&lt;p&gt;Till then,&lt;br&gt;
Keep on Hacking, Cheers&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Display Formatted Date in JavaScript Without Using Any External Library</title>
      <author>Yogesh Chavan</author>
      <pubDate>Fri, 18 Jun 2021 06:01:21 +0000</pubDate>
      <link>https://dev.to/myogeshchavan97/how-to-display-formatted-date-in-javascript-without-using-any-external-library-1n2m</link>
      <guid>https://dev.to/myogeshchavan97/how-to-display-formatted-date-in-javascript-without-using-any-external-library-1n2m</guid>
      <description>&lt;p&gt;In most of the applications, we need to display a formatted date like 18 June 2021 or 06/18/2021 along with the time.&lt;/p&gt;

&lt;p&gt;So we normally use moment.js or date-fns or day.js library to get that done.&lt;/p&gt;

&lt;p&gt;But using an external library adds a lot of extra code to the final size of the application.&lt;/p&gt;

&lt;p&gt;For example, the &lt;a href="https://www.npmjs.com/package/moment"&gt;moment.js npm&lt;/a&gt; library is about 4.21MB in unpacked size.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c_qrwyPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623994765182/TYdSOAYti.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c_qrwyPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623994765182/TYdSOAYti.png" alt="moment_statistics.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So even If you use it only once for single formatting, your final application bundle size will increase which will affect your application loading time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also, Moment.js is now a &lt;a href="https://momentjs.com/docs/"&gt;legacy project&lt;/a&gt;(in maintenance mode) from Oct 2020.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So in this article, we'll see how to display the date in a formatted way using just JavaScript without using any external libraries. &lt;/p&gt;

&lt;p&gt;So let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-dateprototypetolocaledatestring"&gt;
  &lt;/a&gt;
  Using Date.prototype.toLocaleDateString
&lt;/h2&gt;

&lt;p&gt;It has the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The toLocaleDateString method accepts a set of options and returns a date portion of the given Date instance according to language-specific conventions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;locales can take en-US, en-GB etc which is a language specific code.&lt;/li&gt;
&lt;li&gt;options is an object where we specify which part of date we want like date, year, month etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#get-only-date"&gt;
  &lt;/a&gt;
  Get Only Date
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 6/18/2021&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#get-formatted-date"&gt;
  &lt;/a&gt;
  Get Formatted Date
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;long&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;day&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// June 18, 2021&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#get-date-and-time"&gt;
  &lt;/a&gt;
  Get Date and Time
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 6/18/2021, 10:30 AM&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#get-formatted-date-and-time"&gt;
  &lt;/a&gt;
  Get Formatted Date and Time
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;long&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;day&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// June 18, 2021, 10:30 AM&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#get-formatted-date-and-time-including-seconds"&gt;
  &lt;/a&gt;
  Get Formatted Date and Time Including Seconds
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;long&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;day&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;second&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// June 18, 2021, 10:30:54 AM&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#get-formatted-date-and-time-including-weekday"&gt;
  &lt;/a&gt;
  Get Formatted Date and Time Including Weekday
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;long&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;long&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;day&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;second&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numeric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Friday, June 18, 2021, 10:30:52 AM&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The possible options values are as shown below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;weekday: long, short, narrow&lt;/li&gt;
&lt;li&gt;era: long, short, narrow&lt;/li&gt;
&lt;li&gt;year: numeric, 2-digit&lt;/li&gt;
&lt;li&gt;month: numeric, 2-digit, long, short, narrow&lt;/li&gt;
&lt;li&gt;day: numeric, 2-digit&lt;/li&gt;
&lt;li&gt;hour:  numeric, 2-digit&lt;/li&gt;
&lt;li&gt;minute:  numeric, 2-digit&lt;/li&gt;
&lt;li&gt;second:  numeric, 2-digit&lt;/li&gt;
&lt;li&gt;timeZoneName: long, short&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h3&gt;

&lt;p&gt;Check out my recently published &lt;a href="https://master-redux.yogeshchavan.dev/"&gt;Mastering Redux&lt;/a&gt; course.&lt;/p&gt;

&lt;p&gt;In this course, you will learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic and advanced Redux&lt;/li&gt;
&lt;li&gt;How to manage the complex state of array and objects&lt;/li&gt;
&lt;li&gt;How to use multiple reducers to manage complex redux state&lt;/li&gt;
&lt;li&gt;How to debug Redux application&lt;/li&gt;
&lt;li&gt;How to use Redux in React using react-redux library to make your app reactive.&lt;/li&gt;
&lt;li&gt;How to use redux-thunk library to handle async API calls and much more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and then finally we'll build a complete &lt;a href="https://www.youtube.com/watch?v=2zaPDfCKAvM"&gt;food ordering app&lt;/a&gt; from scratch with stripe integration for accepting payments and deploy it to the production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3w0DGum"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Taa9-Eif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/98ae4f4ead57fde8d47fcf7641220b72/raw/c3e4265df4396d639a7938a83bffd570130483b1/banner.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Want to stay up to date with regular content regarding JavaScript, React, Node.js? &lt;a href="https://www.linkedin.com/in/yogesh-chavan97/"&gt;Follow me on LinkedIn&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/myogeshchavan97"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xG4nnUnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-yellow.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>codenewbie</category>
      <category>node</category>
    </item>
    <item>
      <title>Dependency Injection with Flutter</title>
      <author>Julian Finkler</author>
      <pubDate>Fri, 18 Jun 2021 05:57:01 +0000</pubDate>
      <link>https://dev.to/devtronic/dependency-injection-with-flutter-54pl</link>
      <guid>https://dev.to/devtronic/dependency-injection-with-flutter-54pl</guid>
      <description>&lt;p&gt;You know dependency injection? You love dependency injection!&lt;br&gt;
Unfortunately, Flutter don't provide any built-in DI feature.&lt;/p&gt;

&lt;p&gt;For this, I created last year the &lt;a href="https://pub.dev/packages/flutter_catalyst"&gt;&lt;code&gt;flutter_catalyst&lt;/code&gt;&lt;/a&gt; package with is a port of the &lt;a href="https://pub.dev/packages/catalyst"&gt;&lt;code&gt;catalyst&lt;/code&gt;&lt;/a&gt; package which is only supported for Dart native.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;flutter_catalyst&lt;/code&gt; was a good starting point for me to implement DI in my Flutter apps but in large projects it's a mess to configure.&lt;/p&gt;

&lt;p&gt;In the last two months I created a new package &lt;a href="https://pub.dev/packages/catalyst_builder"&gt;&lt;code&gt;catalyst_builder&lt;/code&gt;&lt;/a&gt; which supports all platforms and is easy to configure.&lt;/p&gt;

&lt;p&gt;This package uses the build_runner which performs tasks when you run it. &lt;br&gt;
&lt;code&gt;catalyst_builder&lt;/code&gt; has a build_runner task that reads annotations from your dart files and generate a service provider for DI.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Run &lt;code&gt;flutter pub add catalyst_builder&lt;/code&gt; or add the package to your &lt;code&gt;pubspec.yaml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# pubspec.yaml&lt;/span&gt;
&lt;span class="na"&gt;dependencies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;catalyst_builder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^1.0.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we use the build_runner you need to add this to your dev_dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# pubspec.yaml&lt;/span&gt;

&lt;span class="na"&gt;dev_dependencies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build_runner&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^2.0.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a &lt;code&gt;build.yaml&lt;/code&gt; beside your &lt;code&gt;pubspec.yaml&lt;/code&gt;. This file contains the configuration for the service provider (output file name and provider class name)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;targets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;$default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;auto_apply_builders&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;builders&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="s"&gt;catalyst_builder|buildServiceProvider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;providerClassName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;AppServiceProvider'&lt;/span&gt;
          &lt;span class="na"&gt;outputName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;app_service_provider.dart'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;flutter pub get&lt;/code&gt; to install the packages&lt;/p&gt;

&lt;p&gt;Now run &lt;code&gt;flutter pub pub run build_runner watch --delete-conflicting-outputs&lt;/code&gt; which watches for changes and create the service provider dart file&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;You can declare every class as a service with the &lt;code&gt;@Service&lt;/code&gt; annotation from the &lt;code&gt;catalyst_builder&lt;/code&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Service&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'TestUser'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ensure that &lt;code&gt;flutter pub pub run build_runner watch --delete-conflicting-outputs&lt;/code&gt; is running. You should see now a &lt;code&gt;app_service_provider.dart&lt;/code&gt; file that you can include in your project.&lt;/p&gt;

&lt;p&gt;Create the service provider and retrieve the service from it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;myProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AppServiceProvider&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;myProvider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// This is important&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;myService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myProvider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyService&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//  also works: MyService myService = myProvider.resolve();&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// prints TestUser&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thats all for a simple service.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nested-services-aka-dependency-injection"&gt;
  &lt;/a&gt;
  Nested services a.k.a. Dependency Injection
&lt;/h3&gt;

&lt;p&gt;In the real world you've services that depend on other services that depend on configuration parameters etc.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;catalyst_builder&lt;/code&gt; also supports this scenario:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Service&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ServiceA&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;

&lt;span class="nd"&gt;@Service&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ServiceB&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ServiceA&lt;/span&gt; &lt;span class="n"&gt;serviceA&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ServiceB&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ServiceA&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ServiceC&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; 

&lt;span class="nd"&gt;@Service&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ServiceD&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ServiceC&lt;/span&gt; &lt;span class="n"&gt;serviceC&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ServiceD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Parameter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'otherService'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ServiceC&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;


&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;myProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AppServiceProvider&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;myProvider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// This works:&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;serviceB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myProvider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ServiceB&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// This not because ServiceC is not known as a service:&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;serviceD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myProvider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ServiceD&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// But this works, because the provider contains a &lt;/span&gt;
    &lt;span class="c1"&gt;// parameter with the same name as the required argument:&lt;/span&gt;
    &lt;span class="n"&gt;myProvider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'serviceC'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ServiceC&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;serviceD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myProvider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ServiceD&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// This also works, because the provider contains a &lt;/span&gt;
    &lt;span class="c1"&gt;// parameter with the name which is given in the &lt;/span&gt;
    &lt;span class="c1"&gt;// Parameter annotation.&lt;/span&gt;
    &lt;span class="n"&gt;myProvider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'otherService'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ServiceC&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;serviceD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myProvider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ServiceD&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#service-lifetime"&gt;
  &lt;/a&gt;
  Service lifetime
&lt;/h3&gt;

&lt;p&gt;By default, all services are singeltons. You will get the same instance everytime you call &lt;code&gt;resolve&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can specify the lifetime with the lifetime argument in the &lt;code&gt;@Service&lt;/code&gt; annotation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="c1"&gt;/// Transient services are always recreated&lt;/span&gt;
&lt;span class="nd"&gt;@Service&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;lifetime:&lt;/span&gt; &lt;span class="n"&gt;ServiceLifetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;transient&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TransientService&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;

&lt;span class="c1"&gt;/// Default is singleton&lt;/span&gt;
&lt;span class="nd"&gt;@Service&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;lifetime:&lt;/span&gt; &lt;span class="n"&gt;ServiceLifetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;singleton&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SingletonService&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#code-against-interfaces-not-implementations"&gt;
  &lt;/a&gt;
  Code Against Interfaces, Not Implementations.
&lt;/h3&gt;

&lt;p&gt;Every &lt;strong&gt;pro&lt;/strong&gt;grammer would tell you that you shouldn't depend on implementations but interfaces.&lt;/p&gt;

&lt;p&gt;Also this is possible with the &lt;code&gt;exposeAs&lt;/code&gt; Property in the &lt;code&gt;@Service&lt;/code&gt; annotation. Expose as will return the implementation if you request the type that you provide as &lt;code&gt;exposeAs&lt;/code&gt;. This also works for nested services.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="c1"&gt;// interface&lt;/span&gt;
&lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseService&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;

&lt;span class="c1"&gt;// implementation&lt;/span&gt;
&lt;span class="nd"&gt;@Service&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;exposeAs:&lt;/span&gt; &lt;span class="n"&gt;BaseService&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyService&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;BaseService&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#preloading-services"&gt;
  &lt;/a&gt;
  Preloading services
&lt;/h3&gt;

&lt;p&gt;Some services are background services (connectivity checks for example).&lt;br&gt;
Decorate this services with &lt;code&gt;@Preload()&lt;/code&gt; to create a instance of the service while &lt;code&gt;boot()&lt;/code&gt;-ing the provider.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Service&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="nd"&gt;@Preload&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;MyService&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Service was created'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;ServiceProvider&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// prints "Service was created" &lt;/span&gt;
  &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyService&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Nothing printed&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#flutter-specific-tips"&gt;
  &lt;/a&gt;
  Flutter specific tips:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Screens (widgets) should be always transient services.&lt;/li&gt;
&lt;li&gt;You can use &lt;code&gt;resolve&amp;lt;T&amp;gt;&lt;/code&gt; in the router:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;debugShowCheckedModeBanner:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;initialRoute:&lt;/span&gt; &lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;routes:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HomeScreen&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(),&lt;/span&gt;
      &lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope you like and use the package ;-)&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>android</category>
      <category>ios</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Eleventy JSON endpoint with posts</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 18 Jun 2021 05:53:36 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/eleventy-json-endpoint-with-posts-pn7</link>
      <guid>https://dev.to/dailydevtips1/eleventy-json-endpoint-with-posts-pn7</guid>
      <description>&lt;p&gt;I'll let you in on a little secret while writing this article; I'm also working on this site and finding a neat, low JS alternative to a search function.&lt;/p&gt;

&lt;p&gt;Don't get me wrong, Lunr and Algolia are great options, but I would like to keep my website as low impact as possible.&lt;/p&gt;

&lt;p&gt;So starting to think about some solutions I remembered a while ago, I made a &lt;a href="https://daily-dev-tips.com/posts/vanilla-javascript-live-search/"&gt;static JSON search for a website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a great alternative, surely it won't have a fuzzy search or extensive power, but it will be better than having no search.&lt;/p&gt;

&lt;p&gt;In today's article, I'll focus on making an endpoint, a JSON file collecting all of my post's titles and URLs.&lt;/p&gt;

&lt;p&gt;The whole process will be similar to how I created a &lt;a href="https://daily-dev-tips.com/posts/adding-a-sitemap-in-eleventy/"&gt;XML sitemap for this website&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-json-endpoint-to-an-eleventy-website"&gt;
  &lt;/a&gt;
  Adding a JSON endpoint to an Eleventy website
&lt;/h2&gt;

&lt;p&gt;Let's start by making a new file in the &lt;code&gt;src&lt;/code&gt; directory. I'm calling this file &lt;code&gt;static_search.njk&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;---
permalink: '/search.json'
---
[
  {% for post in collections.posts %} 
  { 
    "title":"{{ post.data.title }}",
    "url":"{{ post.url | url }}" 
  }
  {% if loop.last == false %},{% endif %} {% endfor %} {%
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, we tell Eleventy to output this file as &lt;code&gt;search.json&lt;/code&gt;, forcing the JSON extension.&lt;/p&gt;

&lt;p&gt;Inside we loop over our &lt;code&gt;post&lt;/code&gt; collection and create a JSON structure with the title and URL of the post.&lt;/p&gt;

&lt;p&gt;Last we check once we hit the last loop that we don't add a &lt;code&gt;,&lt;/code&gt; since it would be invalid JSON.&lt;/p&gt;

&lt;p&gt;Now when we build our website, we get the following result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Linux adding a timestamp to the bash history"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/posts/linux-adding-a-timestamp-to-the-bash-history/"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"JavaScript insert newly created element after another element"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/posts/javascript-insert-newly-created-element-after-another-element/"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"JavaScript insert newly created element before another element"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/posts/javascript-insert-newly-created-element-before-another-element/"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty solid, right!&lt;/p&gt;

&lt;p&gt;In another article, I'll be guiding you through using this data for a search function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>api</category>
    </item>
  </channel>
</rss>
