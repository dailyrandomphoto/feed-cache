<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Don't waste time building another API, let the machines make them for you with the Booster Framework!</title>
      <author>Javier Toledo</author>
      <pubDate>Tue, 11 May 2021 17:37:35 +0000</pubDate>
      <link>https://dev.to/boostercloud/don-t-waste-time-building-another-api-let-the-machines-make-them-for-you-with-the-booster-framework-4d2c</link>
      <guid>https://dev.to/boostercloud/don-t-waste-time-building-another-api-let-the-machines-make-them-for-you-with-the-booster-framework-4d2c</guid>
      <description>&lt;p&gt;Building a great API is not trivial, you have to design the data structure, choose the right connection mechanism, implement handlers for every endpoint, serialize/deserialize the data and validate it before accepting it in your business logic.&lt;/p&gt;

&lt;p&gt;In addition to that, it is often necessary to build API clients for front-end applications or for other services in order to make use of the functionality offered by your service.&lt;/p&gt;

&lt;p&gt;If you use &lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt;, the second part can definitely be simplified, as you can use any &lt;a href="https://github.com/apollographql/apollo-client"&gt;standard GraphQL client&lt;/a&gt; to query the system, but &lt;a href="https://blog.logrocket.com/why-you-shouldnt-use-graphql/"&gt;manually building and maintaining schemas and resolvers is still such a hassle that some teams might prefer to stay in REST&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#boost-your-api-with-cqrs"&gt;
  &lt;/a&gt;
  Boost your API with CQRS!
&lt;/h1&gt;

&lt;p&gt;The Booster Framework introduces a very different approach to building APIs: &lt;strong&gt;not doing it at all!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is only possible thanks to the opinionated implementation of &lt;a href="https://www.martinfowler.com/bliki/CQRS.html"&gt;the CQRS pattern&lt;/a&gt; and Booster's inference capabilities. Let's walk through &lt;a href="https://docs.booster.cloud/#/chapters/03_booster-architecture"&gt;the structure of a typical Booster application&lt;/a&gt; before going back to APIs.&lt;/p&gt;

&lt;p&gt;In a Booster application, most functionality is defined in commands. A &lt;a href="https://docs.booster.cloud/#/chapters/03_booster-architecture?id=_1-command-and-command-handlers"&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/a&gt; is a data structure that has a handler, like this one that processes a backflip:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;authorize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PerformABackflip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;personAge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PerformABackflip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;luck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;personAge&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;luck&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PersonSurvivedABackflip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;callAnAmbulance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AmbulanceCalled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When a command handler is processed, it finishes by writing one or more events into the event store. In this case, a &lt;code&gt;PersonSurvivedABackflip&lt;/code&gt; event for lucky or young people, or an &lt;code&gt;AmbulanceCalled&lt;/code&gt; for the rest of us 😅.&lt;/p&gt;

&lt;p&gt;An &lt;a href="https://docs.booster.cloud/#/chapters/03_booster-architecture?id=_2-events"&gt;&lt;code&gt;Event&lt;/code&gt;&lt;/a&gt; is just a data structure that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Event&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PersonSurvivedBackflip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="cm"&gt;/* We define the `entityID` method to help Booster match 
  the event with the corresponding entity */&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;entityID&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These events are later &lt;a href="https://docs.booster.cloud/#/chapters/03_booster-architecture?id=_4-entities-and-reducers"&gt;reduced into entities&lt;/a&gt; that represent the current state. The reduction is carried out by reducer functions that look like these:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Entity&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;backflipTrials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;backflipSuccesses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Reduces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PersonSurvivedBackflip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;reduceSurvival&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PersonSurvivedBackflip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nx"&gt;currentPerson&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;buildNextPersonObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentPerson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Reduces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AmbulanceCalled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;reduceFailure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AmbulanceCalled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;currentPerson&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;buildNextPersonObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentPerson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;buildNextPersonObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;currentPerson&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;trials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentPerson&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;backflipTrials&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;successes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentPerson&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;backflipSuccesses&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;successes&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;trials&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;successes&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#securing-queries-with-read-models"&gt;
  &lt;/a&gt;
  Securing queries with Read Models
&lt;/h1&gt;

&lt;p&gt;At this point, the CQRS design helped us to separate the data schema that the system accepts (commands) from the state data schema (entities). This in itself already simplifies the API design: The API schema could just match the command and entity schemas, and we could call that a nice API. But before calling it a day, we need to make an extra consideration; Allowing direct API access to entities would mean no restrictions on data access, so private fields like password hashes or bank accounts would become accessible. That's why Booster adds Read Models to the mix.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.booster.cloud/#/chapters/03_booster-architecture?id=_5-read-models-and-projections"&gt;&lt;code&gt;ReadModels&lt;/code&gt;&lt;/a&gt; are eventual consistent caches of the internal state. They're not only a way to filter which fields you want to make accessible, but they can also aggregate related data or make small data transformations to optimize reads. Accessing read models is highly performant and they're updated in real-time when data changes, pushing these changes to the client applications. &lt;/p&gt;

&lt;p&gt;A typical read model that projects a single entity would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ReadModel&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;authorize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PersonReadModel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;backflipTrials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;backflipSuccesses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Projects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;projectPerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;currentState&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;PersonReadModel&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ProjectionResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PersonReadModel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PersonReadModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backflipTrials&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backflipSuccesses&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#inferring-apis-from-code"&gt;
  &lt;/a&gt;
  Inferring APIs from code!
&lt;/h1&gt;

&lt;p&gt;At this point, we could build a very nice, useful, and secure API by just copying the schemas from the classes decorated as &lt;code&gt;Command&lt;/code&gt; or &lt;code&gt;ReadModel&lt;/code&gt;, and &lt;a href="https://docs.booster.cloud/#/chapters/04_features?id=graphql-api"&gt;that's exactly what Booster does for you&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Booster analyzes the class structure of all classes decorated as &lt;code&gt;@Command&lt;/code&gt; or &lt;code&gt;@ReadModel&lt;/code&gt; in compile-time, generating metadata that is used in deploy time to &lt;a href="https://docs.booster.cloud/#/chapters/02_getting-started?id=_6-deployment"&gt;generate a GraphQL schema and provision all the cloud resources required to make the application work&lt;/a&gt;, including API gateways, lambda functions, containers, permissions, and even the database tables to store the events.&lt;/p&gt;

&lt;p&gt;For some people, this might look similar to maintaining the schema in a regular GraphQL schema file, because, at the end of the day, you're still expressing the schemas as &lt;code&gt;Command&lt;/code&gt; and &lt;code&gt;ReadModel&lt;/code&gt; classes, but Booster brings many extra advantages to the table:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Commands, Read Models, and all their usages are &lt;strong&gt;type-checked in compile-time&lt;/strong&gt;, reducing or eliminating the likelihood of making mistakes.&lt;/li&gt;
&lt;li&gt;No errors can be introduced when serializing/deserializing data because this is &lt;strong&gt;done transparently&lt;/strong&gt; by the framework.&lt;/li&gt;
&lt;li&gt;When you update a command or a read model, &lt;strong&gt;the API is updated automatically&lt;/strong&gt;, you don't need to change any other files.&lt;/li&gt;
&lt;li&gt;Resolvers are hidden under &lt;strong&gt;higher-level abstractions&lt;/strong&gt; like commands or read models, so you don't need to deal with low-level protocol nuances.&lt;/li&gt;
&lt;li&gt;All Read Models &lt;strong&gt;support WebSockets by default&lt;/strong&gt;, so there is no need to implement any extras for real-time support in your applications.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To summarize, by writing highly semantic code and letting the machine do the heavy lifting, &lt;a href="https://booster.cloud"&gt;Booster&lt;/a&gt; allows you to build fully functioning real-time APIs in a breeze, making everything else work out of the box, and saving a ton of time that you can use to add new use cases, write better tests, or manage elusive corner cases.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#try-it"&gt;
  &lt;/a&gt;
  Try it!
&lt;/h1&gt;

&lt;p&gt;Booster is a 100% open-source project developed by &lt;a href="https://www.theagilemonkeys.com"&gt;The Agile Monkeys&lt;/a&gt;. You can &lt;a href="https://docs.booster.cloud/#/chapters/02_getting-started?id=installing-booster"&gt;get its full potential for free and with no hidden fees&lt;/a&gt;. The typical Booster application can be run on the free tier in &lt;a href="https://aws.amazon.com/"&gt;AWS&lt;/a&gt;, but it also has experimental support for &lt;a href="https://azure.microsoft.com/en-us/"&gt;Azure&lt;/a&gt; and &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;, so you can run it locally using &lt;a href="https://minikube.sigs.k8s.io/docs/"&gt;Minikube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Learn more about Booster on &lt;a href="https://booster.cloud"&gt;the official website&lt;/a&gt;, &lt;a href="https://docs.booster.cloud/#/"&gt;the documentation&lt;/a&gt;, or &lt;a href="https://github.com/boostercloud/booster"&gt;the Github project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you try it out, be sure to let us know what you thought of it on &lt;a href="https://discord.gg/bDY8MKx"&gt;the project’s Discord channel&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>api</category>
      <category>booster</category>
      <category>framework</category>
      <category>graphql</category>
    </item>
    <item>
      <title>Strongly Typed Mongoose Models</title>
      <author>Kinanee Samson</author>
      <pubDate>Tue, 11 May 2021 17:16:04 +0000</pubDate>
      <link>https://dev.to/kalashin1/strongly-typed-mongoose-models-484j</link>
      <guid>https://dev.to/kalashin1/strongly-typed-mongoose-models-484j</guid>
      <description>&lt;p&gt;Good day guys, quite recently i made a post about setting up a nodejs with typescript, the article also talked about incorporating an express server plus mongodb and mongoose, incase you missed it you can read it &lt;a href="https://dev.to/kalashin1/setting-up-node-js-express-mongodb-and-mongoose-with-typescript-1c5h"&gt;here&lt;/a&gt;. In this article i am going to be focusing on utilizing the cool type system that come with TypeScript to build strongly typed mongoose models. &lt;/p&gt;

&lt;p&gt;By the way what the heck is mongoose? In case you are not familiar with mongoose, it is a javascript library that allows one to define a schema for modeling our data when we are working with mongodb. Most people would say one of the drawbacks of working with mongodb is that you can't define how your data will look like i.e you don't explicitly define the schema of your data. Personally i don't see this as a drawback but it can lead to all sort of headaches if you are not careful, you don't want a collection to be having some documents that contain a field for age while other documents do not, or you might even store the wrong data type for a field, say a string where a number is expected.&lt;/p&gt;

&lt;p&gt;Mongoose provides a solution for this by allowing us to define a schema for our data, this means that it allows us to define the structure of data so that all documents in a collection all have the same format to avoid inconsistencies in the collection. Mongoose also allows us to easily query our mongodb with it's set of already defined query functions and if you want something more granular you can extend the queries by defining your query helpers. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-mongodb-and-mongoose"&gt;
  &lt;/a&gt;
  Installing Mongodb And Mongoose
&lt;/h3&gt;

&lt;p&gt;I would suggest that you spend some time going through the &lt;a href="https://mongoosejs.com/"&gt;official documentary&lt;/a&gt; to get more understanding about what you can do with mongoose. To use mongoose first you need to install mongoose, mongodb and the type definition for each respectively, you can see this &lt;a href="https://dev.to/kalashin1/setting-up-node-js-express-mongodb-and-mongoose-with-typescript-1c5h"&gt;article&lt;/a&gt; to learn how to install mongoose and mongodb with TypeScript. You have to ensure that you have TypeScript installed on the project because we are going to be utilizing the built in type system that comes along with TypeScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connecting-to-a-mongodb-database"&gt;
  &lt;/a&gt;
  Connecting To A Mongodb Database
&lt;/h3&gt;

&lt;p&gt;We need to connect to a mongodb database using mongoose, the code block below demonstrates how to go about that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;your connection string to your mongodb database&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;

&lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;useNewUrlParser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;useUnifiedTopology&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;useCreateIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`app running on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt; Welcome &amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h3&amp;gt; We are building strongly typed mongoose models &amp;lt;/h3&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have basic understanding of express and mongodb then the above wouldn't be too much of a problem to understand and for simplicity's sake we will focus our attention on only mongoose and not express or how a node js server works. If everything goes according to plan and your server is up and running, you should see &lt;code&gt;app running on port 3000&lt;/code&gt; in your terminal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-mongoose-schema"&gt;
  &lt;/a&gt;
  Creating a Mongoose Schema
&lt;/h3&gt;

&lt;p&gt;What the heck is a mongoose schema? A mongoose schema is basically an Object that will serve as the template from which we are going to create our Model. The model is just another name for a collection. Mongoose doesn't call them collections, they call them models while the schema is just the actual format that every document should look like. Well then let's create a schema;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heroSchema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;universe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create a Schema you need to import the Schema from mongoose, i destructured here to get the Schema but you could also do &lt;code&gt;import mongoose from 'mongoose'&lt;/code&gt; and then &lt;code&gt;const heroSchema = new mongoose.Schema({})&lt;/code&gt;. When we are creating a schema we pass in an object that has properties that will define the future structure of documents that will be a hero. We specified the data type that each field should hold using the type. This ensures that we can only store strings inside name field and so on and so forth. The required property ensures that we provide a value for this particular field when we are creating a new document to be added to the collection, if we don't it will throw off an error. We could also handle that error gracefully like the Queen of England. But i won't go into that here. Let's see how we can create a model and add a document to it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heroSchema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;universe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heroModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hero&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;heroSchema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createHero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heroDetails&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;heroModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heroDetails&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;superman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;alias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Clark Kent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;universe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createHero&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;universe&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we have created our model but one thing, since we are working with TypeScript, naturally you would expect to see auto-completion and intellisence for the hero, but sadly we don't, and if we try to access a property on the current hero we get an error in our editor. This is because by default TypeScript will implicitly infer the Document type to our newly created hero. The hero has those properties we specified in the schema but TypeScript doesn't know that because by default the Document type doesn't have properties. How do we work around that? We need to create an interface that will extend from the Document interface, then we specify the contract on the interface and by contract i mean the values that any object that will implement our interface is supposed to have. We can now explicitly infer our schema and our model to be of that type. Here's a code example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Model&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Interface for documents, &lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;heroInterface&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;universe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Interface for collections strong typing to heroInterface&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;heroModel&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;userInterface&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Explicitly typing our user to &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heroSchema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;heroInterface&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;universe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heroModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;heroInterface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;heroModel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hero&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;heroSchema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// explicitly typing the hero model to be of our heroModel type&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createHero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heroDetails&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="nx"&gt;heroInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;heroModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heroDetails&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;superman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;alias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Clark Kent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;universe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createHero&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;universe&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have created an interface that extends from the Document class, this ensures that when we explicitly define the type for our &lt;code&gt;userSchema&lt;/code&gt; we pass in the &lt;code&gt;userInterface&lt;/code&gt; and we also ensure that the createHero function also returns a &lt;code&gt;userInterface&lt;/code&gt; now we can access the fields on the hero like the name and we get auto-completion and intellisence. Likewise we also strongly type our model, when you create a model you can explicitly type that model to a Document interface and or a Model interface. This just means providing interfaces that extends from those interface we can tell the editor more about about the model or the document.;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;userInterface&lt;/code&gt;, so we get the all the fields on the document&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;userModel&lt;/code&gt; so we get access to all methods on the model itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you create a new Schema, you can strongly type that schema to an interface that extends from the Document. Likewise models, we can strongly type a model to an interface that extends from the Model class. The beauty of this approach is that when working with a model or a document, you get access to the properties of the document and or instance/static methods defined on the model or the document.&lt;/p&gt;

&lt;p&gt;That's for that, i hope you learnt something today and this was helpful to you in some form. Feel free to extend this with your means on strongly typing your mongoose models in the comment section.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>node</category>
      <category>mongodb</category>
      <category>javascript</category>
    </item>
    <item>
      <title>CSS and HTML Interview Questions and Answers [2020]</title>
      <author>angelo.miranda</author>
      <pubDate>Tue, 11 May 2021 17:07:26 +0000</pubDate>
      <link>https://dev.to/angelomiranda/css-and-html-interview-questions-and-answers-270l</link>
      <guid>https://dev.to/angelomiranda/css-and-html-interview-questions-and-answers-270l</guid>
      <description>&lt;p&gt;My last post 📮 on &lt;a href="https://dev.to/angelomiranda/top-10-javascript-interview-questions-and-answers-you-should-know-junior-and-senior-3943"&gt;JavaScript Interview Questions and Answers (Junior and Senior)&lt;/a&gt; got good feedback from dev.to community so I decided to complete the entire package. &lt;/p&gt;

&lt;p&gt;I have been interviewed and also interviewed engineers numerous 💯 times. Below are the most commonly asked HTML and CSS questions and answers that I have shortlisted that often come up that may be asked on your next front-end interview. &lt;/p&gt;

&lt;p&gt;Feel free to bookmark 🔖 if you don't need this for now. You may need to refresh/review down the road.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-interview-questions"&gt;
  &lt;/a&gt;
  CSS Interview Questions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-css-box-model"&gt;
  &lt;/a&gt;
  What is CSS Box model?
&lt;/h3&gt;

&lt;p&gt;The box model is a box that wraps around every HTML element.&lt;br&gt;
The box contains content, padding, border, and margin.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Content of the box is where text and images appear&lt;/li&gt;
&lt;li&gt;Padding is the area around the content. The padding is transparent&lt;/li&gt;
&lt;li&gt;Border is the border that goes around the padding and content&lt;/li&gt;
&lt;li&gt;Margin is the area outside the border. The margin is transparent&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#what-is-a-css-sprite"&gt;
  &lt;/a&gt;
  What is a CSS sprite?
&lt;/h3&gt;

&lt;p&gt;CSS sprites combine multiple images into one single larger image. This would only require one server request resulting in a faster loading time. Without CSS sprites, each image will send out individual server requests. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-a-css-preprocessor"&gt;
  &lt;/a&gt;
  What is a CSS preprocessor?
&lt;/h3&gt;

&lt;p&gt;A CSS preprocessor is a program that lets you generate CSS from the preprocessor’s own unique syntax. There are many CSS preprocessors to choose from and each one will add some features that don’t exist in pure CSS such as variables, mixin, nesting selector, and many more. These features make the CSS structure more readable and easier to maintain.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#explain-the-concept-of-specificity-in-css"&gt;
  &lt;/a&gt;
  Explain the concept of specificity in CSS.
&lt;/h3&gt;

&lt;p&gt;Specificity is the means by which browsers decide which CSS property values are the most relevant to an element that will be applied. Specificity applies a weight to a given CSS declaration, determined by the number of each selector type in the matching selector. When multiple declarations have equal specificity, the last declaration found in the CSS is applied to the element. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-important"&gt;
  &lt;/a&gt;
  What is !important?
&lt;/h3&gt;

&lt;p&gt;Important is used to provide more weight (importance) than normal property. &lt;br&gt;
It is used for overriding other styles that are declared elsewhere in order to achieve a certain design.&lt;br&gt;
We can think of important as the main priority so it needs to be applied and ignore other rules.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#explain-the-difference-between-visibility-hidden-and-display-none"&gt;
  &lt;/a&gt;
  Explain the difference between visibility: hidden and display: none?
&lt;/h3&gt;

&lt;p&gt;visibility: hidden hides the element, but it occupies space and affects the layout of the document.&lt;br&gt;
display: none also hides the element but not occupy space. It will not affect the layout of the document.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-are-the-different-ways-to-position-a-certain-element-in-css"&gt;
  &lt;/a&gt;
  What are the different ways to position a certain element in CSS?
&lt;/h3&gt;

&lt;p&gt;Position can be static, relative, absolute, fixed, and sticky&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Static   is the default position value. The element will flow into the page as it normally would. The top, right, bottom, left and z-index properties do not work with static positioning.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Relative element is adjusted relative to itself, without changing the layout &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Absolute element is removed from the flow of the page and positioned at a specified position relative to its closest positioned ancestor if any, or otherwise relative to the initial containing block. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fixed element is also removed from the flow of the page.  It is positioned relative to the viewport and doesn’t move when scrolled.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sticky element is a hybrid of relative and fixed positioning. The element is treated as relative positioned until it crosses a specified threshold, at which point it is treated as fixed positioned.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#what-does-boxsizing-borderbox-do"&gt;
  &lt;/a&gt;
  What does box-sizing: border-box do?
&lt;/h3&gt;

&lt;p&gt;This tells the browser to account for any border and padding with the element's width and height. This makes dealing with the sizes of elements much easier. It will also eliminate a number of pitfalls you can stumble while laying out your content.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-the-difference-between-inline-inlineblock-and-block"&gt;
  &lt;/a&gt;
  What is the difference between inline, inline-block, and block?
&lt;/h3&gt;

&lt;p&gt;Block elements always start on a new line. They will also take space of an entire row. &lt;/p&gt;

&lt;p&gt;Inline elements don't start on a new line, These elements appear on the same line with the content and tags beside them.&lt;/p&gt;

&lt;p&gt;Inline-block elements are similar to inline elements, except they can have padding and margins added on all four sides.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-pseudoelement"&gt;
  &lt;/a&gt;
  What is pseudo-element?
&lt;/h3&gt;

&lt;p&gt;A pseudo-element allows you to manipulate parts of an element in a special way. You can use only one pseudo-element in a selector but It must appear after the simple selectors in the statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;   &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::first-letter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff0000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-pseudoclass"&gt;
  &lt;/a&gt;
  What is pseudo-class?
&lt;/h3&gt;

&lt;p&gt;A pseudo-class is a selector that selects elements that are in a specific state. Like regular classes, you can chain together as many pseudo-classes as you want in a selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;   &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   
     &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-the-difference-between-flexbox-and-grid"&gt;
  &lt;/a&gt;
  What is the difference between Flexbox and Grid?
&lt;/h3&gt;

&lt;p&gt;flexbox is a one-dimensional layout to create either a row or a column layout while grid Is a two-dimensional layout that can handle both row and column layout.&lt;/p&gt;

&lt;p&gt;Both approaches makes it easy to design and build a layout on web pages without writing a lot of CSS. &lt;/p&gt;

&lt;p&gt;A general rule to follow is to use flexbox if you need to define a layout as a row or a column. &lt;/p&gt;

&lt;p&gt;Use a grid If you want to define a grid and place the content into it.&lt;/p&gt;

&lt;p&gt;You can also mix these two together.&lt;/p&gt;

&lt;p&gt;Don't like reading and prefer a video? No problem, got you covered - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/x7kitMtqCtE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#html-interview-questions"&gt;
  &lt;/a&gt;
  HTML Interview Questions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-are-html-entities"&gt;
  &lt;/a&gt;
  What are HTML Entities?
&lt;/h3&gt;

&lt;p&gt;HTML entities are a piece of text ("string") that begins with an ampersand ( &amp;amp; ) and ends with a semicolon ( ; ) . They are frequently used to display reserved (which would otherwise be interpreted as HTML code), and invisible characters (like non-breaking spaces).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-semantic-elements-in-html"&gt;
  &lt;/a&gt;
  What are semantic elements in HTML?
&lt;/h3&gt;

&lt;p&gt;Semantic elements are HTML elements that represent its meaning to the browser and developer about its contents. Elements like , , and &lt;/p&gt;
&lt;p&gt; are semantic elements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-meta-tags"&gt;
  &lt;/a&gt;
  What are meta tags?
&lt;/h3&gt;

&lt;p&gt;Meta tags are HTML tags that can be included in webpages that describe what the web page is about. These tags are not displayed on the page itself but are read by search engines like google.com and web crawlers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-two-types-of-web-storage-in-html5"&gt;
  &lt;/a&gt;
  What are two types of Web Storage in HTML5?
&lt;/h3&gt;

&lt;p&gt;Session Storage stores data of the current session. Data stored in session storage is cleared automatically when the browser is closed.&lt;br&gt;
Local Storage data is not deleted automatically when the current browser window is closed.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-are-web-workers"&gt;
  &lt;/a&gt;
  What are web workers?
&lt;/h3&gt;

&lt;p&gt;A web worker is a JavaScript code that runs on a separate thread. It is used to compute long and heavy tasks as it doesn’t affect the performance of the page.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-html"&gt;
  &lt;/a&gt;
  What is HTML?
&lt;/h3&gt;

&lt;p&gt;HTML or HyperText Markup Language is the standard markup language for creating web pages. It is used to structure a web page and its content.&lt;br&gt;
(Add this on top right card)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-are-html-attributes"&gt;
  &lt;/a&gt;
  What are HTML attributes?
&lt;/h3&gt;

&lt;p&gt;HTML attributes are additional information on html tags that change the way the html element behaves or is displayed. Attributes are specified directly after the opening name of the tag, inside the two angled brackets.&lt;br&gt;
(Add this on top right card)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-are%C2%A0dataattributes-good-for"&gt;
  &lt;/a&gt;
  What are data-attributes good for?
&lt;/h3&gt;

&lt;p&gt;Data attribute lets you assign custom data to an element to store more information or data when no suitable HTML5 element or attribute exists.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-the-difference-between-id-and-the-class-attribute"&gt;
  &lt;/a&gt;
  What is the difference between   ‘id’ and the ‘class’ attribute?
&lt;/h3&gt;

&lt;p&gt;ID is only used to identify one single element. Class can be used to identify more than one HTML element.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-the-purpose-of-the%C2%A0alt%C2%A0attribute-on-images"&gt;
  &lt;/a&gt;
  What is the purpose of the alt attribute on images?
&lt;/h3&gt;

&lt;p&gt;The alt attribute provides alternative information in case the user cannot view the image. This attribute can be also used for accessibility.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-are-the-differences-between-inline-and-blocklevel-elements"&gt;
  &lt;/a&gt;
  What are the differences between inline and block-level elements?
&lt;/h3&gt;

&lt;p&gt;Inline elements just take up the space that is absolutely necessary for the content and does not start from a new line. Block elements start on a new line and consume the full width of the page available.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-can-we-create-a-hyperlink-in-html"&gt;
  &lt;/a&gt;
  How can we create a hyperlink in HTML?
&lt;/h3&gt;

&lt;p&gt;An anchor tag or &lt;a&gt; tag is used to create hyperlinks. This creates a path between two different HTML web pages.&lt;br&gt;
(Add this on top right card)&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#name-the-three-list-types-in-html"&gt;
  &lt;/a&gt;
  Name the three list types in HTML
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ordered list displays elements in a numbered format where order of items matter&lt;/li&gt;
&lt;li&gt;Unordered list displays elements in a bulleted format where order of items does not matter &lt;/li&gt;
&lt;li&gt;Definition list displays elements in definition form like in a dictionary. It contains key-value pairs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don't like reading and prefer a video? No problem, got you covered - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/e2RoTljg3BM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Besides the list of HTML and CSS questions I have, is there anymore questions you asked or you have been asked that you may want to add? Please add it on the discussion below.&lt;/p&gt;

&lt;p&gt;Thank you and happy coding!&lt;/p&gt;



</description>
      <category>jobinterview</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>How I got better at e-learning by ignoring the completion bar</title>
      <author>miffens</author>
      <pubDate>Tue, 11 May 2021 17:03:21 +0000</pubDate>
      <link>https://dev.to/miffens/how-i-got-better-at-e-learning-by-ignoring-the-completion-bar-5060</link>
      <guid>https://dev.to/miffens/how-i-got-better-at-e-learning-by-ignoring-the-completion-bar-5060</guid>
      <description>&lt;p&gt;Intellectually ambitious but with limited spoons, I've experienced the blessing and curse that is the abundance of e-learning resources. With these resources accessible as e-books, video lessons, and interactive exercises that tailor to all levels, it paints the picture that anyone could learn this desired skill, if only they had the discipline to finish it all.&lt;/p&gt;

&lt;p&gt;However, in striving to meet all needs, course curricula extend to such a length that the time commitment to complete all of it becomes a hurdle. It's common to bookmark or purchase but never begin, or fade out within the first 10%.&lt;/p&gt;

&lt;p&gt;After trial and error, I found that this linear, 100%-completion oriented approach was a red herring goal I needed to unlearn. If I lose steam on a course, it's usually not a lack of discipline, &lt;strong&gt;but a signal the current lessons aren't valuable enough to me for the effort I have to invest&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here are some ways I've responded to that signal:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Skip ahead to lessons that sound more interesting.&lt;/strong&gt; These may require skipped lessons as a prerequisite. With a better understanding of the other lesson's purpose, I have renewed motivation to work through it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Know when to prioritize breadth.&lt;/strong&gt; Full absorption of every lesson through replay and exercises without peeking at the answer might have caused too much friction. If deep understanding isn’t urgent, I'll decide that a single pass is enough on the remainder. In contrast to fizzling out early on over-engagement and being unaware of the other course topics, I can recognize key words and know exactly where to go for deeper understanding.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Know when to prioritize depth.&lt;/strong&gt; Identifying the 2 out of 10 chapters most relevant to me and deciding the other 8 would give diminishing returns is liberating. Then, I can study those two extra carefully and move on to the next course sooner.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Research a different course/ learning medium.&lt;/strong&gt; Learning from another resource that offers a more intuitive teaching style for me could save tons of energy.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Identify other higher priorities.&lt;/strong&gt; Am I unmotivated because there's no real urgency? Is there another more fulfilling place to spend the same time?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These approaches have helped me maintain momentum that I otherwise would have lost, and see self-experimentation an investment to account for in my learning pace expectations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-design-challenge-for-elearning-platforms"&gt;
  &lt;/a&gt;
  A Design Challenge for E-Learning Platforms
&lt;/h2&gt;

&lt;p&gt;As an e-learner, my main goal is to upskill through a learning path that works best for me. But what does the typical resource signal with its user interface? Completion is everything. Follow the path. Stay the Course. Get that check mark of success.&lt;/p&gt;

&lt;p&gt;Completion bars, next lesson autoplay, disabling future lessons until preequisites are met, make the cherrypicking approach not readily discoverable. Furthermore, even if I know I extracted the most valuable pieces of the course, the unsatisfying misalignment in the sad faded unwatched videos and the happy checked ones make me feel like a poor student.&lt;/p&gt;

&lt;p&gt;What would a site that facilitates and rewards a variety of learning styles and goals look like? How could a user interface celebrate nonlinear, cherrypicked learning? Could a workflow guide users through that curation process, or self discovery of one's learning style?&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>mentalhealth</category>
      <category>productivity</category>
      <category>ux</category>
    </item>
    <item>
      <title>Add Taints To AWS EKS Cluster And Trouble Shooting</title>
      <author>Vu Dao</author>
      <pubDate>Tue, 11 May 2021 16:33:01 +0000</pubDate>
      <link>https://dev.to/vumdao/add-taints-to-aws-eks-cluster-and-trouble-shooting-55ah</link>
      <guid>https://dev.to/vumdao/add-taints-to-aws-eks-cluster-and-trouble-shooting-55ah</guid>
      <description>&lt;h3&gt;
  &lt;a href="#taints-and-tolerations-is-used-to-ensure-the-node-should-not-accept-any-pods-that-do-not-tolerate-the-taints-how-to-add-taints-to-aws-eks-node-group-this-blog-will-show-you-how-and-the-way-of-trouble-shooting"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Taints and Tolerations is used to ensure the node should not accept any pods that do not tolerate the taints. How to add taints to AWS EKS node group? This blog will show you how and the way of trouble shooting&lt;/strong&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#whats-in-this-document"&gt;
  &lt;/a&gt;
  What’s In This Document
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#-How-to-taint-eks-node-group"&gt;How to taint eks node group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Understand-kubelet-systemd-service-in-the-eks-node"&gt;Understand kubelet systemd service in the eks node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Facing-some-issues"&gt;Facing some issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#how-to-taint-eks-node-group"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-How-to-taint-eks-node-group"&gt;How to taint eks node group&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;BootstrapArguments&lt;/code&gt; in &lt;code&gt;Parameters&lt;/code&gt; of cloudformation to input to &lt;code&gt;kubelet&lt;/code&gt; arguments
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w8kWTJVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/troubleshoot/img/cfn.png%3Fraw%3Dtrue" alt="Alt-Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#understand-kubelet-systemd-service-in-the-eks-node"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-Understand-kubelet-systemd-service-in-the-eks-node"&gt;Understand kubelet systemd service in the eks node&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Enter to the worker and Check kubelet status. We see that kubelet service is started with option &lt;code&gt;--register-with-taints=dedicated=test:NoSchedule&lt;/code&gt; which is input from &lt;code&gt;/etc/systemd/system/kubelet.service.d/30-kubelet-extra-args.conf&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[root@ip-17-1-5-1 ec2-user]# systemctl status kubelet -l
● kubelet.service - Kubernetes Kubelet
   Loaded: loaded (/etc/systemd/system/kubelet.service; enabled; vendor preset: disabled)
  Drop-In: /etc/systemd/system/kubelet.service.d
           └─10-kubelet-args.conf, 30-kubelet-extra-args.conf
   Active: active (running) since Tue 2021-05-11 07:20:42 UTC; 1h 2min ago
     Docs: https://github.com/kubernetes/kubernetes
  Process: 4128 ExecStartPre=/sbin/iptables -P FORWARD ACCEPT -w 5 (code=exited, status=0/SUCCESS)
 Main PID: 4139 (kubelet)
    Tasks: 16
   Memory: 141.5M
   CGroup: /system.slice/kubelet.service
           └─4139 /usr/bin/kubelet --cloud-provider aws --config /etc/kubernetes/kubelet/kubelet-config.json --kubeconfig /var/lib/kubelet/kubeconfig --container-runtime docker --network-plugin cni --node-ip=17.1.5.1 --pod-infra-container-image=0123456789012.dkr.ecr.ap-northeast-1.amazonaws.com/eks/pause:3.1-eksbuild.1 --node-labels=role=test --register-with-taints=dedicated=test:NoSchedule
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[root@ip-17-1-5-1 ec2-user]# cat /etc/systemd/system/kubelet.service.d/30-kubelet-extra-args.conf
[Service]
Environment='KUBELET_EXTRA_ARGS=--node-labels=role=test --register-with-taints=dedicated=test:NoSchedule'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;30-kubelet-extra-args.conf&lt;/code&gt; file is created by &lt;code&gt;/etc/eks/bootstrap.sh&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if [[ -n "$KUBELET_EXTRA_ARGS" ]]; then
    cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/systemd/system/kubelet.service.d/30-kubelet-extra-args.conf
[Service]
Environment='KUBELET_EXTRA_ARGS=$KUBELET_EXTRA_ARGS'
EOF
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Check the &lt;code&gt;/var/log/messages&lt;/code&gt; to understand how systemD start the &lt;code&gt;kubelet&lt;/code&gt; service.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;May 11 07:20:40 ip-17-1-5-1 systemd: Started Apply the settings specified in cloud-config.
May 11 07:20:40 ip-17-1-5-1 systemd: Starting Execute cloud user/final scripts...
May 11 07:20:40 ip-17-1-5-1 cloud-init: Cloud-init v. 19.3-3.amzn2 running 'modules:final' at Tue, 11 May 2021 07:20:40 +0000. Up 28.99 seconds.
May 11 07:20:40 ip-17-1-5-1 cloud-init: + /etc/eks/bootstrap.sh eks-cluster --kubelet-extra-args '--node-labels=role=test --register-with-taints=dedicated=test:NoSchedule'
May 11 07:20:40 ip-17-1-5-1 cloud-init: % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
May 11 07:20:40 ip-17-1-5-1 cloud-init: Dload  Upload   Total   Spent    Left  Speed
May 11 07:20:40 ip-17-1-5-1 cloud-init: 0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0#015100    56  100    56    0     0   5600      0 --:--:-- --:--:-- --:--:--  5600
May 11 07:20:41 ip-17-1-5-1 dhclient[2969]: XMT: Solicit on eth0, interval 15840ms.
May 11 07:20:42 ip-17-1-5-1 systemd: Reloading.
May 11 07:20:42 ip-17-1-5-1 systemd: Reloading.
May 11 07:20:42 ip-17-1-5-1 cloud-init: Created symlink from /etc/systemd/system/multi-user.target.wants/kubelet.service to /etc/systemd/system/kubelet.service.
May 11 07:20:42 ip-17-1-5-1 systemd: Starting Kubernetes Kubelet...
May 11 07:20:42 ip-17-1-5-1 systemd: Started Kubernetes Kubelet.
May 11 07:20:42 ip-17-1-5-1 cloud-init: + /opt/aws/bin/cfn-signal --exit-code 0 --stack eks-cluster-test --resource NodeGroup --region ap-northeast-1
May 11 07:20:42 ip-17-1-5-1 systemd: Started Kubernetes systemd probe.
May 11 07:20:42 ip-17-1-5-1 systemd: Starting Kubernetes systemd probe.
May 11 07:20:42 ip-17-1-5-1 kubelet: I0511 07:20:42.909859    4139 server.go:417] Version: v1.18.8-eks-7c9bda
May 11 07:20:42 ip-17-1-5-1 kubelet: W0511 07:20:42.910542    4139 plugins.go:115] WARNING: aws built-in cloud provider is now deprecated. The AWS provider is deprecated and will be removed in a future release
May 11 07:20:42 ip-17-1-5-1 kubelet: I0511 07:20:42.914985    4139 aws.go:1241] Zone not specified in configuration file; querying AWS metadata service
May 11 07:20:42 ip-17-1-5-1 kubelet: I0511 07:20:42.919112    4139 aws.go:1281] Building AWS cloudprovider
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;kubelet&lt;/code&gt; has dependency on &lt;code&gt;cloud-init&lt;/code&gt; service which run &lt;code&gt;/etc/eks/bootstrap.sh&lt;/code&gt; with args from cloudformation parameters.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#facing-some-issues"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-Facing-some-issues"&gt;Facing some issues&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When apply taint for the eks node I met two issues: typo and missing double &lt;code&gt;'&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1. Typo which caused the bash script failed&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QOoHlFdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/troubleshoot/img/typo.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QOoHlFdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/troubleshoot/img/typo.png%3Fraw%3Dtrue" alt="Alt-Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;May 11 04:38:50 ip-172-10-21-203 cloud-init: Cloud-init v. 19.3-3.amzn2 running 'modules:final' at Tue, 11 May 2021 04:38:50 +0000. Up 43.12 seconds.
May 11 04:38:50 ip-172-10-21-203 cloud-init: /var/lib/cloud/instance/scripts/part-001: line 3: unexpected EOF while looking for matching `''
May 11 04:38:50 ip-172-10-21-203 cloud-init: /var/lib/cloud/instance/scripts/part-001: line 8: syntax error: unexpected end of file
May 11 04:38:50 ip-172-10-21-203 cloud-init: May 11 04:38:50 cloud-init[4080]: util.py[WARNING]: Failed running /var/lib/cloud/instance/scripts/part-001 [2]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Missing double &lt;code&gt;'&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;bootstrap.sh&lt;/code&gt; get &lt;code&gt;KUBELET_EXTRA_ARGS&lt;/code&gt; as second argument so for more than one option, all must ne in double &lt;code&gt;'&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        --kubelet-extra-args)
            KUBELET_EXTRA_ARGS=$2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use combine  of&lt;code&gt;node affinity&lt;/code&gt;, &lt;code&gt;taints&lt;/code&gt; and &lt;code&gt;toleration&lt;/code&gt; to ensure the pod of specific service stays in correct node and prevent others.&lt;/li&gt;
&lt;li&gt;When starting an EKS node (worker), it uses cloud-init service to run eks bootstrap script which helps to config the extra arguments of kubelet service to startup.&lt;/li&gt;
&lt;li&gt;Using systemD services ensure the order of depenent services.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="https://dev.to/vumdao"&gt;🌠 Blog&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://github.com/vumdao/cdk8s-example"&gt;Github&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://stackoverflow.com/users/11430272/vumdao"&gt;stackoverflow&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/in/vu-dao-9280ab43/"&gt;Linkedin&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/groups/12488649/"&gt;Group&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.facebook.com/CloudOpz-104917804863956"&gt;Page&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://twitter.com/VuDao81124667"&gt;Twitter 🌠&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>aws</category>
      <category>eks</category>
      <category>k8s</category>
      <category>systemd</category>
    </item>
    <item>
      <title>HTTP Caching in Ruby on Rails Applications</title>
      <author>Honeybadger Staff</author>
      <pubDate>Tue, 11 May 2021 16:18:08 +0000</pubDate>
      <link>https://dev.to/honeybadger/http-caching-in-ruby-on-rails-applications-5ai1</link>
      <guid>https://dev.to/honeybadger/http-caching-in-ruby-on-rails-applications-5ai1</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally written by &lt;a href="https://www.honeybadger.io/blog/http-caching-ruby-rails/#authorDetails"&gt;Jonathan Miles&lt;/a&gt; on the &lt;a href="https://www.honeybadger.io/blog/http-caching-ruby-rails/"&gt;Honeybadger Developer Blog&lt;/a&gt;.&lt;/em&gt;  &lt;/p&gt;

&lt;p&gt;A general way to describe caching is storing some data so that we can quickly retrieve it later. Sometimes, this means storing computed data so that it does not need to be re-computed, but it can also refer to storing data locally to avoid having to fetch it again. Your computer does this constantly, as your operating system tries to keep frequently accessed data in RAM so that it doesn't have to be fetched again from a hard drive or SSD.&lt;/p&gt;

&lt;p&gt;Similarly, your browser tries to re-use resources it has already downloaded. You've probably seen this yourself when visiting a new website for the first time. The initial load takes longer because your browser has to pull down &lt;em&gt;everything&lt;/em&gt; it needs, including all the images, javascript, and stylesheets. A fun fact is that when you freshly download the &lt;a href="https://www.cnn.com"&gt;CNN homepage&lt;/a&gt;, your browser fetches more data than the original Doom game circa 1993. For the curious, at the time of writing this blog post, CNN downloads just over 3MB on my machine, compressed from ~15MB, and that's with an ad blocker enabled, while the original Doom installer was ~2.2MB.&lt;/p&gt;

&lt;p&gt;For the browser to cache this data, there needs to be some coordination with the server. The browser needs to know what it can cache and for how long; otherwise, it could be showing you old content when the server has a newer version available. In this article, we'll look at how this client-server caching coordination is carried out and what Rails provides to alter it.&lt;/p&gt;

&lt;p&gt;Although the focus is on how Ruby on Rails handles this, the actual mechanism is part of HTTP specifications. In other words, the caching we're talking about here is baked into the infrastructure of the internet, which makes it a cornerstone of how modern websites and frameworks are developed. Various frameworks, such as Rails, single-page applications (SPAs), and even static sites, can all use these mechanisms to help improve performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#http-requestresponse"&gt;
  &lt;/a&gt;
  HTTP Request-Response
&lt;/h2&gt;

&lt;p&gt;You're probably familiar with the request-response lifecycle, at least at a high level: you click a link on a website, your browser sends a request to the server for that content, and the server sends back that content (Note that I'm intentionally glossing over a lot of complexity here).&lt;/p&gt;

&lt;p&gt;Let's dig a little bit into the actual data being sent in this back-and-forth transaction. Each HTTP message has a header and a body (not to be confused with &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; HTML tags). The request header tells the server which path you are trying to access and which HTTP method to use (e.g., GET/PUT/PATCH/POST). If needed, you can dig into these headers using either your browser's developer tools or a command-line tool, such as &lt;code&gt;curl&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# curl -v honeybadger.io
...
&amp;gt; GET / HTTP/1.1
&amp;gt; Host: honeybadger.io
&amp;gt; User-Agent: curl/7.64.1
&amp;gt; Accept: */*
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This first portion of the output is the request header. We're issuing a &lt;code&gt;GET&lt;/code&gt; to &lt;code&gt;honeybadger.io&lt;/code&gt;. This is then followed by what the server sent back (the "response header"):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;
&amp;lt; HTTP/1.1 301 Moved Permanently
&amp;lt; Cache-Control: public, max-age=0, must-revalidate
&amp;lt; Content-Length: 39
&amp;lt; Content-Security-Policy: frame-ancestors 'none'
...
&amp;lt; Content-Type: text/plain
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The response includes the HTTP code (e.g., &lt;code&gt;200&lt;/code&gt; for success or &lt;code&gt;404&lt;/code&gt; for not found). In this example, it is a permanent redirect (301) because curl is trying to contact the &lt;code&gt;http&lt;/code&gt; URL, which redirects to the secure &lt;code&gt;https&lt;/code&gt; URL.&lt;br&gt;
The response header also includes the content type, which is &lt;code&gt;text/plain&lt;/code&gt; here, but a few other common options are &lt;code&gt;text/html&lt;/code&gt;, &lt;code&gt;text/css&lt;/code&gt;, &lt;code&gt;text/javascript&lt;/code&gt;, and &lt;code&gt;application/json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The response body follows the header. In our case, the body is blank because a &lt;code&gt;301&lt;/code&gt; redirect does not need a body. If we tried again with &lt;code&gt;curl -v https://www.honeybadger.io&lt;/code&gt;, you'd see the homepage content here, the same as if you were viewing the source in a browser.&lt;/p&gt;

&lt;p&gt;If you want to experiment with this yourself here are two tips:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To show only the response header with curl (e.g., no request headers or response body), use the &lt;code&gt;-I&lt;/code&gt; option, as in &lt;code&gt;curl -I localhost:3000&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;By default, Rails does not cache in a development environment; you may need to run &lt;code&gt;rails dev:cache&lt;/code&gt; first.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#the-cachecontrol-http-header"&gt;
  &lt;/a&gt;
  The Cache-Control HTTP Header
&lt;/h2&gt;

&lt;p&gt;The main header we care about, as far as caching goes, is the &lt;code&gt;Cache-Control&lt;/code&gt; header. This helps determine which machines can cache a response from our Rails server and when that cached data expire. Within the &lt;code&gt;Cache-Control&lt;/code&gt; header, there are several fields, most of which are optional. We'll go through some of the most relevant entries here, but for more information, you can check &lt;a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html"&gt;the official HTTP spec at w3.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's a sample from a basic out-of-the-box Rails response header:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt; Content-Type: text/html; charset=utf-8
&amp;lt; Etag: W/"b41ce6c6d4bde17fd61a09e36b1e52ad"
&amp;lt; Cache-Control: max-age=0, private, must-revalidate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#maxage"&gt;
  &lt;/a&gt;
  max-age
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;max-age&lt;/code&gt; field is an integer containing the number of seconds the response is valid. By default, a Rails response for a view will have this set to 0 (i.e., the response expires immediately, and the browser should always get a new version).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#publicprivate"&gt;
  &lt;/a&gt;
  public/private
&lt;/h3&gt;

&lt;p&gt;Including &lt;code&gt;public&lt;/code&gt; or &lt;code&gt;private&lt;/code&gt; in the header sets which servers are allowed to cache the response. If the header includes &lt;code&gt;private&lt;/code&gt;, it is only to be cached by the requesting client (e.g., the browser), not any other servers it may have passed through to get there, such as content delivery networks (CDNs) or proxies. If the header includes &lt;code&gt;public&lt;/code&gt;, then these intermediary servers are allowed to cache the response. Rails sets each header to &lt;code&gt;private&lt;/code&gt; by default.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mustrevalidate"&gt;
  &lt;/a&gt;
  must-revalidate
&lt;/h3&gt;

&lt;p&gt;Rails also sets the &lt;code&gt;must-revalidate&lt;/code&gt; field by default. This means that the client must contact the server to confirm that its cached version is still valid before it is used. To determine whether the cached version is valid, the client and server use ETags.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#etags"&gt;
  &lt;/a&gt;
  ETags
&lt;/h2&gt;

&lt;p&gt;ETags are an optional HTTP header added by the server when it sends a response to the client. Typically, this is some sort of checksum on the response itself. When the client (i.e., your browser) needs to request this resource again, it includes the Etag it received (assuming it has a previous response cached) in the &lt;code&gt;If-None-Match&lt;/code&gt; HTTP header. The server can then respond with a &lt;code&gt;304&lt;/code&gt; HTTP code ("Not Modified") and an empty body. This means the version on the server hasn't changed, so the client should use its cached version.&lt;/p&gt;

&lt;p&gt;There are two types of ETags: strong and weak (a weak tag is denoted with a &lt;code&gt;W/&lt;/code&gt; prefix). They behave the same way, but a strong ETag means the two copies of the resource (the version on the server and the one in the local cache) are 100% byte-for-byte identical. Weak ETags, however, indicate that the two copies may not be byte-for-byte identical, but the cached version can still be used. A common example of this is Rails' &lt;code&gt;csrf_meta_tags&lt;/code&gt; helper, which creates a token that changes constantly; thus, even if you have a static page in your application, it will not be byte-for-byte identical when it's refreshed due to the Cross-Site-Request-Forgery (CSRF) token. Rails uses weak ETags by default.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#etags-in-rails"&gt;
  &lt;/a&gt;
  ETags in Rails
&lt;/h2&gt;

&lt;p&gt;Rails handles ETags automatically on views. It includes the ETag in outgoing headers and has middleware to check incoming ETag headers and returns &lt;code&gt;304&lt;/code&gt; (Not Modified) codes when appropriate. Notably, however, because Rails generates views dynamically, it still has to do all the rendering work before it can figure out the ETag for that view. This means even if the ETags match, you are only saving the time and bandwidth it takes to send the data across the network, as opposed to something like view caching, where you can skip the rendering step completely if there's a cached version. However, Rails does provide a few ways to tweak the generated ETag.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stale"&gt;
  &lt;/a&gt;
  stale?
&lt;/h3&gt;

&lt;p&gt;One way to overcome the ever-changing CSRF token from changing the ETag is with the &lt;code&gt;stale?&lt;/code&gt; helper in &lt;code&gt;ActionController&lt;/code&gt;. This allows you to set the ETag (either strong or weak) directly. However, you can also simply pass it an object, such as an ActiveRecord model, and it will compute the ETag based on the object's &lt;code&gt;updated_at&lt;/code&gt; timestamp or use the maximum &lt;code&gt;updated_at&lt;/code&gt; if you pass a collection:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UsersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
    &lt;span class="vi"&gt;@users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:posts&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;

    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;:index&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;stale?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By hitting the page with curl, we can see the results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# curl -I localhost:3000 -- first page load
ETag: W/"af9ae8f2d66b9b6c4d0513f185638f1a"
# curl -I localhost:3000 -- reload (change due to CSRF token)
ETag: W/"f06158417f290334f47ea2124e08d89d"

-- Add stale? to controller code

# curl -I localhost:3000 -- reload
ETag: W/"04b9b99835c359f36551720d8e3ca6fe" -- now using `@users` to generate ETag
# curl -I localhost:3000 -- reload
ETag: W/"04b9b99835c359f36551720d8e3ca6fe" -- no change
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gives us more control over when the client has to download the full payload again, but it still has to check with the server &lt;em&gt;every time&lt;/em&gt; to determine whether its cache is still valid. What if we want to skip that check altogether? This is where the &lt;code&gt;max-age&lt;/code&gt; field in the header comes in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#expiresin-and-httpcacheforever"&gt;
  &lt;/a&gt;
  expires_in and http_cache_forever
&lt;/h3&gt;

&lt;p&gt;Rails gives us a couple of helper methods in &lt;code&gt;ActionController&lt;/code&gt; to adjust the &lt;code&gt;max-age&lt;/code&gt; field: &lt;code&gt;expires_in&lt;/code&gt; and &lt;code&gt;http_cache_forever&lt;/code&gt;. They both work how you would expect based on their names:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UsersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
    &lt;span class="vi"&gt;@users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:posts&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;

    &lt;span class="n"&gt;expires_in&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minutes&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# curl -I localhost:3000
Cache-Control: max-age=600, private
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rails has set the &lt;code&gt;max-age&lt;/code&gt; to 600 (10 minutes in seconds) and removed the &lt;code&gt;must-revalidate&lt;/code&gt; field. You can also change the &lt;code&gt;private&lt;/code&gt; field by passing a &lt;code&gt;public: true&lt;/code&gt; named argument.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http_cache_forever&lt;/code&gt; is mostly just a wrapper around &lt;code&gt;expires_in&lt;/code&gt; that sets the &lt;code&gt;max-age&lt;/code&gt; to 100 years and takes a block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UsersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
    &lt;span class="vi"&gt;@users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:posts&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;

    &lt;span class="n"&gt;http_cache_forever&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;public: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;:index&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# curl -I localhost:3000
Cache-Control: max-age=3155695200, public
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This kind of extremely-long-term-caching is why Rails assets have a "fingerprint" appended to them, which is a hash of the file's content and creating filenames, such as &lt;code&gt;packs/js/application-4028feaf5babc1c1617b.js&lt;/code&gt;. The "fingerprint" at the end effectively links the contents of the file with the name of the file. If the content ever changes, the filename will change. This means browsers can safely cache this file &lt;em&gt;forever&lt;/em&gt; because if it ever changes, even in a small way, the fingerprint will change; as far as the browser is concerned, it's a completely separate file that needs to be downloaded.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spheres-of-influence"&gt;
  &lt;/a&gt;
  Spheres of Influence
&lt;/h2&gt;

&lt;p&gt;Now that we've covered some caching options, my advice might seem a bit odd, but I suggest that you &lt;em&gt;try to avoid using any of the methods in this article!&lt;/em&gt; ETags and HTTP caching are good to know about, and Rails gives us some specific tools for addressing specific problems. The caveat, though, and it's a big one, is that all of this caching happens outside your application and is, therefore, largely outside your control. If you are using view caching or low-level caching in Rails, as covered in earlier parts of this series, and encounter invalidation issues, you have options; you can &lt;code&gt;touch&lt;/code&gt; models, push updated code, or even reach into &lt;code&gt;Rails.cache&lt;/code&gt; directly from the console if you have to, but not with HTTP caching. Personally, I'd much rather have to run &lt;code&gt;Rails.cache.clear&lt;/code&gt; in production than face an issue where the site is broken for users until they clear their browser cache (your customer service team will love you for it too).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is the end of the series on caching in Rails; hopefully, it was useful and informative. My advice for caching continues to be as follows: do as little as you can, but as much as you have to. If you experience performance problems, start by looking for methods that are hit often; perhaps, they can be memoized. Need the value to persist across requests? Maybe that heavily-used method could use some low-level caching. Or, perhaps, it's not any particular method; it's just crunching through all those nested partials, which are slowing things down; in this case, maybe view level caching can help. Rails gives us the "sharp knives" to target each of these issues, and we just need to know when to use them.&lt;/p&gt;

</description>
      <category>ruby</category>
    </item>
    <item>
      <title>Unlimited Email Address With Gmail Account</title>
      <author>Bibek</author>
      <pubDate>Tue, 11 May 2021 16:05:45 +0000</pubDate>
      <link>https://dev.to/bibekkakati/unlimited-email-address-with-gmail-account-ckm</link>
      <guid>https://dev.to/bibekkakati/unlimited-email-address-with-gmail-account-ckm</guid>
      <description>&lt;p&gt;Hello everyone 👋&lt;/p&gt;

&lt;p&gt;In this short article, I will discuss how can we get unlimited email addresses with a single Gmail account.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Originally posted at &lt;a href="https://blog.bibekkakati.me/unlimited-email-address-with-gmail-account"&gt;&lt;code&gt;blog.bibekkakati.me&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some of you might be using this feature already but I got to know about this recently so I thought of sharing.&lt;/p&gt;

&lt;p&gt;Many times we create multiple email accounts to sign up on websites, to avail free services or for testing purpose. We have some services like temp-mail but those are accessible to the public so we can't use them for personal accounts.&lt;/p&gt;

&lt;p&gt;If you have a Gmail account then you have access to &lt;code&gt;unlimited&lt;/code&gt; email addresses using that one account.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h3&gt;

&lt;p&gt;Let say your Gmail address is &lt;code&gt;username@gmail.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then you can use your Gmail address like this too.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;username+1@gmail.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;username+string@gmail.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Just add any random string or number followed by a &lt;code&gt;+&lt;/code&gt; sign to your Gmail username.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It will deliver all the emails of these Gmail addresses to your primary Gmail address, so no need to worry about handling multiple accounts and you can use your mail address on any website as they will treat it as a different mail address.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-case"&gt;
  &lt;/a&gt;
  Use Case
&lt;/h3&gt;

&lt;p&gt;Suppose you are creating a banking account, then you can use &lt;code&gt;username+bank@gmail.com&lt;/code&gt;. Now you can filter your emails easily by using this Gmail address.&lt;/p&gt;

&lt;p&gt;It is also useful to track down any compromised accounts and spammers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;I'm not sure if other email services also provide a similar feature.&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Liked it? Give it a thumbs-up 👍&lt;/p&gt;

&lt;p&gt;Thank you for reading | Feel free to &lt;a href="https://bibekkakati.me"&gt;connect&lt;/a&gt; 👋&lt;/p&gt;

</description>
      <category>gmail</category>
      <category>email</category>
      <category>trick</category>
      <category>tips</category>
    </item>
    <item>
      <title>Effective Dart Tricks</title>
      <author>Elijah L.</author>
      <pubDate>Tue, 11 May 2021 16:03:36 +0000</pubDate>
      <link>https://dev.to/luckeyelijah/effective-dart-tricks-25jj</link>
      <guid>https://dev.to/luckeyelijah/effective-dart-tricks-25jj</guid>
      <description>&lt;p&gt;No intro here, let's jump into some effective Dart language tricks and features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trick-1-use-the-linter"&gt;
  &lt;/a&gt;
  Trick 1: Use the linter!
&lt;/h2&gt;

&lt;p&gt;You're probably using VS Code or Android studio for development in Dart or Flutter projects. Anytime you see the red, blue, grey, or  squiggles underneath your "bad" code - that's the linter at work.&lt;/p&gt;

&lt;p&gt;All Dart and Flutter linter rules can be found &lt;a href="https://dart-lang.github.io/linter/lints/"&gt;here&lt;/a&gt;. See if any of these tickle your fancy.&lt;/p&gt;

&lt;p&gt;To add one of these rules to your project, follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a new &lt;code&gt;analysis_options.yaml&lt;/code&gt; file at the root off your project. This will be in the same directory as your &lt;code&gt;pubspec.yaml&lt;/code&gt; file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the following snippet to tell your editor's analysis server there are some rules you'll be adding:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;linter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Select a rule from &lt;a href="https://dart-lang.github.io/linter/lints/"&gt;the list&lt;/a&gt; and add it to you &lt;code&gt;analysis_options.yaml&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;linter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;lines_longer_than_80_chars&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;another_rule&lt;/span&gt; &lt;span class="c1"&gt;# add any rule from that list here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#trick-2-prevent-classes-from-being-inherited-and-instantiated"&gt;
  &lt;/a&gt;
  Trick 2: Prevent classes from being inherited and instantiated
&lt;/h2&gt;

&lt;p&gt;Typically, an &lt;code&gt;abstract&lt;/code&gt; class would be used to create a non-instantiatable class. But occassionally you'll have a class you don't want inherited as well.&lt;/p&gt;

&lt;p&gt;The Flutter SDK usees this trick internally with &lt;a href="https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/animation/curves.dart#L1406"&gt;&lt;code&gt;Curves&lt;/code&gt;&lt;/a&gt; and other classes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;SomeClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;_&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Use a private, unnamed constructor.&lt;/span&gt;

  &lt;span class="c1"&gt;/// All members should now be static.&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'SomeClass'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;/// Methods should be pure and static as well.&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;someFunction&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;'Hello, &lt;/span&gt;&lt;span class="si"&gt;$person&lt;/span&gt;&lt;span class="s"&gt;!'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use a private, unnamed constructor. To use any member with this class, you should use the key word &lt;code&gt;static&lt;/code&gt;. Since static objects are class-level (not instance-level). It operates similarly to an &lt;code&gt;enum&lt;/code&gt; object when accessing values, but this is a bit more robust for those certain circumstances.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trick-3-implementing-you-own-operator-for-an-object"&gt;
  &lt;/a&gt;
  Trick 3: Implementing you own operator for an object
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, and &lt;code&gt;/&lt;/code&gt; are all examples of operators that can be overwritten for your class. For example, let's create a class that you want to add two values objects together to achieve a deterministic result.&lt;/p&gt;

&lt;p&gt;With coordinate points, we know you can add two points together to get a &lt;em&gt;new&lt;/em&gt; point value. Here, we'll demonstrate that simply by defining the behavior of the &lt;code&gt;+&lt;/code&gt; operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;/// Sum of two points.&lt;/span&gt;
  &lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="kd"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;+(&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This functionality can also be achieved on &lt;em&gt;existing&lt;/em&gt; classes with an &lt;code&gt;extension&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="n"&gt;DateTimeOperators&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;/// Date after a [duration] of time.&lt;/span&gt;
  &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="kd"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;+(&lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;/// Difference between [this] duration the [other].&lt;/span&gt;
  &lt;span class="n"&gt;Duration&lt;/span&gt; &lt;span class="kd"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;-(&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;difference&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;PS: for a full list of operator that can be used check out &lt;a href="https://dart.dev/guides/language/language-tour#_operators"&gt;this section&lt;/a&gt; of Dart's language tour.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trick-4-use-raw-typedef-endraw-to-keep-code-concise"&gt;
  &lt;/a&gt;
  Trick 4: Use &lt;code&gt;typedef&lt;/code&gt; to keep code concise.
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;typedef&lt;/code&gt; key word is use to assign a &lt;em&gt;function-type alias&lt;/em&gt; to a function. &lt;/p&gt;

&lt;p&gt;I have found this most useful in Flutter development when I need to execute a function with a large signature name. For example:&lt;/p&gt;

&lt;p&gt;This widget has a long &lt;code&gt;onPressed&lt;/code&gt; signature for that member:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onPressed&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// This is a long signature that can be reduced via typedef.&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ViewModel&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;onPressed&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{...}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we can keep it concise with &lt;code&gt;typedef&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Our new signature for this function.&lt;/span&gt;
&lt;span class="kd"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;ViewModelCallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ViewModel&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onPressed&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// The function member with a new signature.&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ViewModelCallback&lt;/span&gt; &lt;span class="n"&gt;onPressed&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{...}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#trick-4-use-an-raw-extension-endraw-on-raw-enum-endraw-to-add-more-fuctionality"&gt;
  &lt;/a&gt;
  Trick 4: Use an &lt;code&gt;extension&lt;/code&gt; on &lt;code&gt;enum&lt;/code&gt; to add more fuctionality
&lt;/h2&gt;

&lt;p&gt;You've already seen an &lt;code&gt;extension&lt;/code&gt; used in this list to add functionality, but try using an extension on an &lt;code&gt;enum&lt;/code&gt; to give it this little bit of functionality that you need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;DayOfTheWeek&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;sunday&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;monday&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;tuesday&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;wednesday&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;thursday&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;friday&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;saturday&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="n"&gt;DayOfTheWeekX&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;DayOfTheWeek&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;/// The shorthand or abbreviated string of this day of the week.&lt;/span&gt;
  &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="n"&gt;abbreviation&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_abbreviationMap&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;]!;&lt;/span&gt;

  &lt;span class="c1"&gt;// a mapping of all the abbreviations&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;_abbreviationMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;DayOfTheWeek&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sunday&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Sun'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;DayOfTheWeek&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;monday&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Mon'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;DayOfTheWeek&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tuesday&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Tue'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;DayOfTheWeek&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wednesday&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Wed'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;DayOfTheWeek&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;thursday&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Thur'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;DayOfTheWeek&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;friday&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Fri'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;DayOfTheWeek&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;saturday&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Sat'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>dart</category>
      <category>programming</category>
      <category>style</category>
      <category>effective</category>
    </item>
    <item>
      <title>Create a portfolio card with React, ChakraUi, and framerMotion</title>
      <author>Muhammad  Ahmad</author>
      <pubDate>Tue, 11 May 2021 16:03:06 +0000</pubDate>
      <link>https://dev.to/m_ahmad/create-a-portfolio-card-with-react-chakraui-and-framermotion-21c4</link>
      <guid>https://dev.to/m_ahmad/create-a-portfolio-card-with-react-chakraui-and-framermotion-21c4</guid>
      <description>&lt;p&gt;I have already created 2 portfolio websites. &lt;br&gt;
Here is my 3rd portfolio website. This is a very simple website with smooth animations.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#built-with"&gt;
  &lt;/a&gt;
  Built with
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Front-end library - &lt;a href="https://reactjs.org/"&gt;Reactjs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;UI components - &lt;a href="https://chakra-ui.com"&gt;Chakra UI&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Animation library - &lt;a href="https://www.framer.com/motion/"&gt;Framer Motion&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Icons - &lt;a href="https://react-icons.github.io/react-icons/"&gt;react icons&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Demo Link:&lt;/strong&gt; &lt;a href="https://ma-ahmad.github.io/card-portfolio"&gt;CardPortfolio&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;GitHub Repo:&lt;/strong&gt; &lt;a href="https://github.com/MA-Ahmad/card-portfolio"&gt;Repo&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-other-portfolio-website-templates"&gt;
  &lt;/a&gt;
  My Other portfolio website templates
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Demo Link:&lt;/strong&gt; &lt;a href="https://mahmad.me/"&gt;Portfolio1&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;GitHub Repo:&lt;/strong&gt; &lt;a href="https://github.com/MA-Ahmad/portfolio-v2"&gt;Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo Link:&lt;/strong&gt; &lt;a href="https://ma-ahmad.github.io/portfolio"&gt;Portfolio2&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;GitHub Repo:&lt;/strong&gt; &lt;a href="https://github.com/MA-Ahmad/portfolio"&gt;Repo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Go Standards Project Layout</title>
      <author>Jay R. Wren</author>
      <pubDate>Tue, 11 May 2021 15:48:21 +0000</pubDate>
      <link>https://dev.to/jrwren/go-standards-project-layout-4hfj</link>
      <guid>https://dev.to/jrwren/go-standards-project-layout-4hfj</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;There are only two hard things in Computer Science: cache invalidation and naming things.&lt;/p&gt;

&lt;p&gt;-- Phil Karlton&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For new Go programmers a third hardest thing might be package layout. The truth is, it doesn't have to be hard at all.&lt;/p&gt;

&lt;p&gt;Alright, here is the secret to the hard party: forget everything you know from other languages, unless that other language is C.&lt;/p&gt;

&lt;p&gt;Strangely, this might be the most controversial issue in the Go community, including advice so bad that project contributors had to file a bug: &lt;a href="https://github.com/golang-standards/project-layout/issues/117"&gt;https://github.com/golang-standards/project-layout/issues/117&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Honestly, &lt;a href="https://medium.com/@benbjohnson/standard-package-layout-7cdbc8391fc1#.ds38va3pp"&gt;https://medium.com/@benbjohnson/standard-package-layout-7cdbc8391fc1#.ds38va3pp&lt;/a&gt; is probably the best advice, but don't feel that you need to follow all of it immediately. You probably won't have mocks at first. You probably don't need to decouple things at first. Remember, loose coupling is only a good thing if you need it. Otherwise you are paying a cost. Simplicity is far more valuable than future flexibility especially when YAGNI.&lt;/p&gt;

&lt;p&gt;There is a list of some great TODO and DO NOT items here:&lt;br&gt;
&lt;a href="https://rakyll.org/style-packages/"&gt;https://rakyll.org/style-packages/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Along with common and util, I believe &lt;code&gt;api&lt;/code&gt; is a package name which should be avoided. It should be obvious why: all packages have an API. &lt;code&gt;api&lt;/code&gt; certainly is a short name, but there is nothing clear about it. &lt;a href="https://blog.golang.org/package-names"&gt;https://blog.golang.org/package-names&lt;/a&gt; Package names should be short and clear. If you want to name a package &lt;code&gt;api&lt;/code&gt;, instead, ask yourself, &lt;code&gt;api for what?&lt;/code&gt; and name the package the answer to that question.&lt;/p&gt;

&lt;p&gt;Strangely, there is a ton of official guidance on that page which is completely ignored by other recommendations. I'll link it again: &lt;a href="https://blog.golang.org/package-names"&gt;https://blog.golang.org/package-names&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you read someone else's advice, such as: &lt;a href="https://peter.bourgon.org/go-best-practices-2016/#repository-structure"&gt;https://peter.bourgon.org/go-best-practices-2016/#repository-structure&lt;/a&gt; consider each point against the official advice of &lt;a href="https://blog.golang.org/package-names"&gt;https://blog.golang.org/package-names&lt;/a&gt; and if it doesn't fit, discard it. Also consider each point against YAGNI.&lt;/p&gt;

&lt;p&gt;If you read enough of these advice posts you'll being to notice some are not prescriptive. That is great. Prescriptive advice is harmful. No one can know your specific needs and circumstances. Following the wrong advice can be very expensive in the long run. Instead look at advice like &lt;a href="https://www.ardanlabs.com/blog/2017/02/design-philosophy-on-packaging.html"&gt;https://www.ardanlabs.com/blog/2017/02/design-philosophy-on-packaging.html&lt;/a&gt; Notice how it is about philosophy and usability. It is not about how the programmer writing the code feels or wants things to be.&lt;/p&gt;

&lt;p&gt;At any step, ask yourself, has this practice added value? If it hasn't, then don't do it. Undo it even. Value is also subjective. While I don't find a &lt;code&gt;pkg&lt;/code&gt; dir to have any value, another team might find it to be very valuable to put everything there, away from the non-Go code things (docs, scripts, etc) in their repo. That is fine. Recognize that there is no right on wrong here, there is only our different values.&lt;/p&gt;

&lt;p&gt;My favorite line of advice is from: &lt;a href="https://christine.website/blog/within-go-repo-layout-2020-09-07"&gt;https://christine.website/blog/within-go-repo-layout-2020-09-07&lt;/a&gt; which reasons about the advice to say: &lt;code&gt;"...Leaves the development team a lot more agency to decide how to name things"&lt;/code&gt; Take your agency. Ignore prescription.&lt;/p&gt;

&lt;p&gt;All that said, how would I &lt;a href="https://www.reddit.com/r/golang/comments/n9tgjk/how_to_divide_mvc_codes_into_package/"&gt;divide MVC into packages&lt;/a&gt; I wouldn't... until I need to.&lt;/p&gt;

</description>
      <category>go</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Games Every Programmer Should Play</title>
      <author>Abdur Rehman Khalid</author>
      <pubDate>Tue, 11 May 2021 15:29:57 +0000</pubDate>
      <link>https://dev.to/abdurrehmaan/games-every-programmer-should-play-301g</link>
      <guid>https://dev.to/abdurrehmaan/games-every-programmer-should-play-301g</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RA8LG7E---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydbhm75jdyr1a4brnamk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RA8LG7E---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydbhm75jdyr1a4brnamk.png" alt="Game Every Programmer should play"&gt;&lt;/a&gt;&lt;br&gt;
Programming games are often overlooked as a way to learn a new programming language or improve your knowledge of an existing one. Here are few programming games that are worth a try.&lt;/p&gt;

&lt;h2&gt;CodinGame&lt;/h2&gt;

&lt;p&gt;Visit CodinGame here - &lt;a href="https://www.codingame.com/"&gt;https://www.codingame.com/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Vs2ZpIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvqkozlryqvgled6sa2g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Vs2ZpIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvqkozlryqvgled6sa2g.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
CodinGame is one of the better-known free platforms for learning how to code through games. The platform supports over 25 programming languages and comes with challenges that become gradually harder as you progress through them. CodinGame is a community, too. You can solve challenges together with your friends or colleagues and learn how other players solve particular challenges.&lt;/p&gt;

&lt;h2&gt;Codemonkey&lt;/h2&gt;

&lt;p&gt;Visit Codemonkey here - &lt;a href="https://www.codemonkey.com/"&gt;https://www.codemonkey.com/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kAk6IRH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu9hrmtdqtad0101eqhf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kAk6IRH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu9hrmtdqtad0101eqhf.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
 Codemonkey teaches codding using CoffeeScript, a real programing language, to teach you to build your own games in HTML5. It's aimed at codding for kids, but it's definitely fun for adults too.&lt;/p&gt;

&lt;h2&gt;Flexbox Froggy&lt;/h2&gt;

&lt;p&gt;Visit Flexbox Froggy here - &lt;a href="https://flexboxfroggy.com/"&gt;https://flexboxfroggy.com/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rte3VTu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lm4988di7do61f6lqf5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rte3VTu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lm4988di7do61f6lqf5.png" alt="alt text"&gt;&lt;/a&gt; &lt;br&gt;
In this game, you must bring the frogs home to their lilypads by mastering CSS flexbox, a powerful new module that makes layout a breeze. With it you can control alignment, spacing, and wrapping of elements on the webpage using only one or two lines of code.&lt;/p&gt;

&lt;h2&gt;CodeCombat&lt;/h2&gt;

&lt;p&gt;Visit Code Combat here - &lt;a href="https://codecombat.com/"&gt;https://codecombat.com/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bhwQ0tKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gn6ihq74rzjsck64i8wx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhwQ0tKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gn6ihq74rzjsck64i8wx.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
CodeCombat is a platform that gamifies Python, JavaScript, HTML, and the fundamentals of computer science. As you progress, you'll unlock heroes, pets, gear, and more.&lt;br&gt;
The game is free for all its core levels, with a $9.99 a month subscription if you want access to its extra level branches plus 3,500 bonus gems a month. The game has a strong open-source community that helps with translations and creating more levels.&lt;/p&gt;

&lt;h2&gt;Untrusted&lt;/h2&gt;

&lt;p&gt;Visit Untrusted here - &lt;a href="https://www.playuntrusted.com/"&gt;https://www.playuntrusted.com/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V1hLwUiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnr85w0ms1wwv9cc8hlp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V1hLwUiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnr85w0ms1wwv9cc8hlp.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
Untrusted is a meta-JavaScript adventure game written by Alex Nisnevich and Greg Shuflin. You need to write (or remove) JavaScript code to create a gap in the walls surrounding you.&lt;br&gt;
Contrary to some of the other suggestions in this list, Untrusted is made for people already familiar with JavaScript. It starts easy, but the puzzles quickly become difficult. If you're up for a challenge, try Untrusted.&lt;/p&gt;

&lt;h2&gt;Cyber-Dojo&lt;/h2&gt;

&lt;p&gt;Visit Cyber-Dojo here: &lt;a href="https://www.cyber-dojo.org/"&gt;https://www.cyber-dojo.org/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bIgzDP-5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3blncljvnidcxz5gwi6x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bIgzDP-5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3blncljvnidcxz5gwi6x.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
cyber-dojo is an online browser-based coding dojo game. cyber-dojo is the world's simplest non development environment. Each group writes their code and tests inside a web browser. presses their run-tests button to submit their code and tests to the cyber-dojo server.&lt;/p&gt;

&lt;h2&gt;AI Gaming&lt;/h2&gt;

&lt;p&gt;Visit AI Gaming here - &lt;a href="https://www.aigaming.com/"&gt;https://www.aigaming.com/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xJzFCjlD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81cxmasvxx49gi9kla0c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xJzFCjlD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81cxmasvxx49gi9kla0c.png" alt="alt text"&gt;&lt;/a&gt; &lt;br&gt;
Last but not the least, we have Microsoft's AI Gaming Platform where you can code bots in python and compete against your friends on 30+ different games &amp;amp; challenges. You can also participate in tournaments to win some really cool prizes. Along with learning to code a bot in Python, you will also get hands-on practice in using Microsoft's Cloud Platform, Azure.&lt;/p&gt;

&lt;p&gt;We hope you found at least one new programming game you’ll enjoy playing. There’s nothing better than learning how to code while having fun in the process. If you enjoyed this article, please feel free to share it on social media clicking the buttons top right.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>watercooler</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>No need to handle Express.js with this MERN Stack project template </title>
      <author>Kirk</author>
      <pubDate>Tue, 11 May 2021 15:28:26 +0000</pubDate>
      <link>https://dev.to/scaledynamics/no-need-to-handle-express-js-with-this-mern-stack-project-template-1bm6</link>
      <guid>https://dev.to/scaledynamics/no-need-to-handle-express-js-with-this-mern-stack-project-template-1bm6</guid>
      <description>&lt;p&gt;At ScaleDynamics we have one recurrent passion: to make web developers’ life easier 🙈.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/o9ggk5IMcYlKE/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/o9ggk5IMcYlKE/giphy.gif" alt="bam"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;BAM! And we strike again! We built a fully open source MERN template ready to use for our platform. &lt;/p&gt;

&lt;p&gt;One command to develop with frontend and backend live reload... &lt;br&gt;
One command to deploy on the cloud...&lt;/p&gt;

&lt;p&gt;Let’s get started! &lt;/p&gt;

&lt;p&gt;It is located here (&lt;a href="https://github.com/ScaleDynamics/react-mongodb-template"&gt;https://github.com/ScaleDynamics/react-mongodb-template&lt;/a&gt;) - use it as you wish and start coding your projects with it! We hope you’ll find it helpful! 🤗&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-mern-template-with-a-fully-managed-express"&gt;
  &lt;/a&gt;
  A MERN template with a fully managed Express
&lt;/h2&gt;

&lt;p&gt;Quick reminder — MERN stands for MongoDB, Express, React and Node.js, and is one of the several variations of the MEAN stack (MongoDB, Express, Angular, Node.js). It is one of the standard “Full Stack” stack for JavaScript developers.&lt;br&gt;
This template is configured for the ScaleDynamics web platform. It is on MIT license and ready to be used to build your own MERN based apps/services!&lt;br&gt;
Everything is preconfigured: we provide one command to develop with live reload (frontend and backend) and one to deploy to make it live on a URL.&lt;br&gt;
One particularity of our platform is that you don’t have to manage the Express.js layers, the platform manages them for you automatically, so you can focus only on the MongoDB/Node/React coding.&lt;br&gt;
You can stop coding HTTP/JSON as it is now automatic, thanks to our compiler. It generates the HTTP/JSON stubs required to call a Node.js function using JS objects.&lt;br&gt;
Please note that you need a ScaleDynamics platform account, you can create your FREE  Community account &lt;a href="https://console.scaledynamics.com/auth/signup/"&gt;right here&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#diving-into-the-template"&gt;
  &lt;/a&gt;
  Diving into the template
&lt;/h2&gt;

&lt;p&gt;To start using the MERN template you can clone it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ssh"&gt;&lt;code&gt;&lt;span class="k"&gt;git&lt;/span&gt; clone https://github.com/ScaleDynamics/react-mongodb-template.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This project is divided in two parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the frontend, where you can find a &lt;code&gt;react-app&lt;/code&gt; web template app (located in the &lt;code&gt;frontend/react-app&lt;/code&gt; folder). It has been created with &lt;code&gt;create-react-app&lt;/code&gt;. To update it, open the &lt;code&gt;src&lt;/code&gt; folder where you can add, modify or delete components.&lt;/li&gt;
&lt;li&gt;the backend contains a &lt;code&gt;hello&lt;/code&gt; node module and a MongoDB module. You can update the frontend/backend as you need to build your own app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To start developing with the template, go in &lt;code&gt;frontend/react-app&lt;/code&gt; folder and run those commands:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-set-up-the-project"&gt;
  &lt;/a&gt;
  To set up the project
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ssh"&gt;&lt;code&gt;&lt;span class="k"&gt;npm&lt;/span&gt; install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#to-log-onto-the-scaledynamics-platform"&gt;
  &lt;/a&gt;
  To log onto the ScaleDynamics Platform
&lt;/h3&gt;

&lt;p&gt;Then use your ScaleDynamics account credential to log onto the platform (feel free to create a free community account &lt;a href="https://console.scaledynamics.com/auth/signup/"&gt;here&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ssh"&gt;&lt;code&gt;&lt;span class="k"&gt;npx&lt;/span&gt; warp login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#develop-with-livereload"&gt;
  &lt;/a&gt;
  Develop with live-reload
&lt;/h3&gt;

&lt;p&gt;To enter a live-reload development session, use the command below. Feel free to update the frontend or the backend code, it will be rebuilt at each change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ssh"&gt;&lt;code&gt;&lt;span class="k"&gt;npm&lt;/span&gt; run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please note that when running this command, you have to select a project. On the ScaleDynamics platform, a project identifies an application or a microservice. Select an existing project or create a new one. &lt;br&gt;
For more details on projects, see the &lt;a href="https://docs.scaledynamics.com"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#deploying-with-scaledynamics"&gt;
  &lt;/a&gt;
  Deploying with ScaleDynamics
&lt;/h3&gt;

&lt;p&gt;To deploy your project you’ll have first to compile and minify your project for production.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ssh"&gt;&lt;code&gt;&lt;span class="k"&gt;npm&lt;/span&gt; run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then use the deploy command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ssh"&gt;&lt;code&gt;&lt;span class="k"&gt;npm&lt;/span&gt; run deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that when running this command, you have to select a project and an environment. On the ScaleDynamics platform a project identifies an application or a microservice. &lt;/p&gt;

&lt;p&gt;Select an existing project or create a new one. An environment identifies the cloud execution environment to run your app. You can create as many as you want like ‘staging’, ‘demo’, ‘prod’... Each environment has its own URL. &lt;/p&gt;

&lt;p&gt;To deploy, select an existing environment or create a new one. For more details on projects or environments, see the &lt;a href="https://docs.scaledynamics.com"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configure-mongodb-driver"&gt;
  &lt;/a&gt;
  Configure MongoDB driver
&lt;/h3&gt;

&lt;p&gt;Regarding MongoDB, we provide a template module  in the &lt;code&gt;src/mongodb.js&lt;/code&gt;. To use your own MongoDB instance, replace the &lt;code&gt;URI&lt;/code&gt; constant by your own.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongodb://[username:password@]host1[:port1][,...hostN[:portN]][/[defaultauthdb][?options]]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#youre-all-set"&gt;
  &lt;/a&gt;
  You’re all set!
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#creating-new-functions"&gt;
  &lt;/a&gt;
  Creating new functions
&lt;/h3&gt;

&lt;p&gt;You can create new functions that can be called by the frontend. Add them in &lt;code&gt;index.js&lt;/code&gt; or into another module and export it. The platform manages the Express.js layers automatically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// your code here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To access your new functions on the frontend side, feel free to adapt this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Backend&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./.backend/hello.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Backend&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#other-info"&gt;
  &lt;/a&gt;
  Other info
&lt;/h3&gt;

&lt;p&gt;And that’s it! If you need more information, you can refer to the documentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.scaledynamics.com/docs/frameworks"&gt;ScaleDynamics Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/getting-started.html"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/guides/"&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope you liked it, please let us know if you have any questions or feedback! &lt;br&gt;
We have more template variations coming up for React, so you can subscribe, or follow us on &lt;a href="https://twitter.com/scaledynamics"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.facebook.com/scaledynamics.tech"&gt;Facebook&lt;/a&gt; and even &lt;a href="https://www.instagram.com/scaledynamicstech/"&gt;Instagram&lt;/a&gt; if you wish!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>node</category>
      <category>showdev</category>
    </item>
  </channel>
</rss>
