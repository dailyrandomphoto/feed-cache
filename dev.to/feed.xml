<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A Complete Guide to Redux</title>
      <author>Anuradha Aggarwal</author>
      <pubDate>Sun, 30 May 2021 22:28:50 +0000</pubDate>
      <link>https://dev.to/anuradha9712/a-complete-guide-to-redux-hmj</link>
      <guid>https://dev.to/anuradha9712/a-complete-guide-to-redux-hmj</guid>
      <description>&lt;p&gt;Hello coders!! Today we will discuss some concepts you need to know to build real complex applications with React and Redux.&lt;/p&gt;

&lt;p&gt;In this article we'll cover the following concepts in detail:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why we need redux?&lt;/li&gt;
&lt;li&gt;What is Redux?&lt;/li&gt;
&lt;li&gt;Steps to create a React-redux application
&lt;ul&gt;
&lt;li&gt;Step 1: Create a User Component&lt;/li&gt;
&lt;li&gt;Step 2: Create a Store&lt;/li&gt;
&lt;li&gt;Step 3: Create a Reducer&lt;/li&gt;
&lt;li&gt;Step 4: Share Redux Store with Components&lt;/li&gt;
&lt;li&gt;Step 5: Add an Async Function Middleware using Redux Thunk&lt;/li&gt;
&lt;li&gt;Step 6: Build an Action Creator&lt;/li&gt;
&lt;li&gt;Step 7: Connect redux store to components&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's get started!! 🚀🚀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-redux"&gt;
  &lt;/a&gt;
  Why Redux?
&lt;/h2&gt;

&lt;p&gt;Before we jump to more details of Redux first try to understand why we actually need it?&lt;/p&gt;

&lt;p&gt;In a complex application with many components, if you want to share a &lt;strong&gt;state&lt;/strong&gt; among the several components, then one approach you can think of is using &lt;strong&gt;props&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g-yr_X5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621174749897/mid2qN1xz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g-yr_X5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621174749897/mid2qN1xz.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But &lt;strong&gt;props&lt;/strong&gt; doesn't solve our problem completely as it only enables you to send data from a parent component to a child component using the &lt;strong&gt;top-down approach&lt;/strong&gt; and not vice-versa. That means any change in the state that occurred in the child component does not impact the parent component's state. &lt;/p&gt;

&lt;p&gt;Also, another problem that &lt;strong&gt;props&lt;/strong&gt; failed to solve is to share the state among the components with no parent-child hierarchy.&lt;/p&gt;

&lt;p&gt;So, to overcome all the above problems and to synchronize the state across the components &lt;strong&gt;Redux&lt;/strong&gt; comes into the picture. Using this approach we store all the state globally and all other components can access it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redux&lt;/strong&gt; is an open-source JavaScript library for managing the application state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hawEPcG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621177830450/I-0w4YenH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hawEPcG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621177830450/I-0w4YenH.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-redux"&gt;
  &lt;/a&gt;
  What is Redux?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Redux is basically used for state management. &lt;/li&gt;
&lt;li&gt;It can be used with all javascript frameworks &amp;amp; libraries like React, angular, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Main Elements of Redux includes:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Store:&lt;/strong&gt;  If you are working on a large application, the state is separated from the React components into its own &lt;strong&gt;store&lt;/strong&gt;. The store is the global component that stores the current state and it is an immutable object.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Action:&lt;/strong&gt;  State in the store is not changed directly, but with different &lt;strong&gt;actions&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reducer:&lt;/strong&gt; It is used to define the impact of the action on the state of the application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Subscribe:&lt;/strong&gt; It is used to create a callback function the store calls when its state is changed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Redux Principles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The global state of your application is stored as an object inside a &lt;strong&gt;single store.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;The only way to change the state is to &lt;code&gt;dispatch&lt;/code&gt; an action.&lt;/li&gt;
&lt;li&gt;Changes are made with pure reducer functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8xIsCNDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621184602504/h5JWu6pt3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8xIsCNDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621184602504/h5JWu6pt3.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's explore each one of them in detail by using a simple example:&lt;/p&gt;

&lt;p&gt;We'll follow the following Folder structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;📦src
 ┣ 📂actions
 ┃ ┣ 📜types.js
 ┃ ┗ 📜users.js
 ┣ 📂components
 ┃ ┗ 📂Users
 ┃ ┃ ┣ 📜index.js
 ┃ ┃ ┗ 📜user.css
 ┣ 📂reducers
 ┃ ┣ 📜index.js
 ┃ ┗ 📜users.js
 ┣ 📂store
 ┃ ┗ 📜index.js
 ┣ 📜App.js
 ┗ 📜index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find the final code in my &lt;a href="https://github.com/anuradha9712/react-redux-application"&gt;github repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we will create an application that fetches user data using REST APIs and display it using Redux.&lt;/p&gt;

&lt;p&gt;In the end, our application will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9p7bPtoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622409093180/jvUNBvBLa.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9p7bPtoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622409093180/jvUNBvBLa.gif" alt="GifMaker_20210531023908270.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a React application and install redux using &lt;code&gt;npm install react-redux --save&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-a-user-component"&gt;
  &lt;/a&gt;
  Step 1: Create a User Component
&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;src/components/Users/index.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./user.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUserDetails&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleButtonClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// make a call to Action Creator&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click me&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleButtonClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                 &lt;span class="nx"&gt;Fetch&lt;/span&gt; &lt;span class="nx"&gt;Data&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tbody&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Id&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/th&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/th&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Phone&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/th&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Email&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/th&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Website&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/th&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/tr&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;userDetails&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;website&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/tr&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                            &lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;})&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/tbody&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/table&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we'll make an API call to fetch our data using REST API whenever a user clicks on the button and display the data in table format. &lt;/p&gt;

&lt;p&gt;But before making an API call let's set up our &lt;strong&gt;store&lt;/strong&gt; first.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-create-a-store"&gt;
  &lt;/a&gt;
  Step 2: Create a Store
&lt;/h3&gt;

&lt;p&gt;we'll create a &lt;strong&gt;Redux store&lt;/strong&gt; in &lt;code&gt;src/store/index.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;rootReducer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../reducers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;preloadedState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;rootReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;preloadedState&lt;/span&gt; 
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The Redux core library has a &lt;strong&gt;createStore&lt;/strong&gt; API that will create the store. &lt;/li&gt;
&lt;li&gt;We'll pass our &lt;em&gt;rootReducer&lt;/em&gt; that we'll create in the next step as an argument.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;createStore&lt;/strong&gt; can also accept a &lt;em&gt;preloadedState&lt;/em&gt; value as its second argument. You could use this to add initial data when the store is created.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Points to remember:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The store basically brings together the &lt;code&gt;state&lt;/code&gt;, &lt;code&gt;actions&lt;/code&gt;, and &lt;code&gt;reducers&lt;/code&gt; that make up your app.&lt;/li&gt;
&lt;li&gt;You can only have a single store in a Redux application.&lt;/li&gt;
&lt;li&gt;Every Redux store has a single root reducer function.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-3-create-a-reducer"&gt;
  &lt;/a&gt;
  Step 3: Create a Reducer
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Reducers basically tell us how to update the &lt;em&gt;state&lt;/em&gt; based on the &lt;em&gt;action&lt;/em&gt; performed.&lt;/li&gt;
&lt;li&gt;It must be &lt;strong&gt;pure functions&lt;/strong&gt; &amp;amp; should not produce any side effects.&lt;/li&gt;
&lt;li&gt;It must be composed of &lt;em&gt;immutable&lt;/em&gt; objects. If there is a change in the state, the old object is not changed, but it is replaced with a new, changed object.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's create our reducer in &lt;code&gt;src/reducers/user.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;USER_DETAILS&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../actions/types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Step 4: Inside User Reducer after action creator dispatches an action&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;USER_DETAILS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is a function that is given the current state and an action as a parameter it returns a new state.&lt;/p&gt;

&lt;p&gt;Now we have created one reducer but as our application becomes more complex we may need to introduce more reducers. &lt;/p&gt;

&lt;p&gt;So in this case, we'll create the main &lt;strong&gt;root Reducer&lt;/strong&gt; which will combine all other reducers used in our application.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;src/reducers/index.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;combineReducers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;userReducer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;combineReducers&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;userReducer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="c1"&gt;//other reducers&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we can create the actual reducer for our application by combining the two or many existing reducers with the &lt;strong&gt;combineReducers&lt;/strong&gt; function.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;combineReducer&lt;/strong&gt; works in such a way that every &lt;em&gt;action&lt;/em&gt; gets handled in every part of the combined reducer. Typically only one reducer is interested in any given action, but there are situations where multiple reducers change their respective parts of the state based on the same action.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-share-redux-store-with-components"&gt;
  &lt;/a&gt;
  Step 4: Share Redux Store with Components
&lt;/h3&gt;

&lt;p&gt;As we have initially created our store, the next step is to make it available to all the components present in our application.  &lt;/p&gt;

&lt;p&gt;In &lt;code&gt;src/App.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Users&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/Users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using this way. all the components can access the store.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-add-an-async-function-middleware-using-redux-thunk"&gt;
  &lt;/a&gt;
  Step 5: Add an Async Function Middleware using Redux Thunk
&lt;/h3&gt;

&lt;p&gt;After setting up the store, now we need to make an API call to fetch our data but before this, we will add middleware to our store which enables us to create an asynchronous action.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redux Thunk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This library is a so-called redux-middleware, which must be initialized along with the initialization of the store. &lt;/p&gt;

&lt;p&gt;Because of this, it is possible to define &lt;em&gt;action-creators&lt;/em&gt; so that they return a function having the &lt;strong&gt;dispatch&lt;/strong&gt; method of redux-store as its parameter. &lt;/p&gt;

&lt;p&gt;As a result of this, one can make asynchronous action-creators, which first wait for some operations to finish, after which they then dispatch the real action.&lt;/p&gt;

&lt;p&gt;To introduce redux-thunk into our application first install it using &lt;code&gt;npm install --save redux-thunk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now in &lt;code&gt;src/store/index.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;applyMiddleware&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;thunk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux-thunk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;rootReducer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../reducers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;preloadedState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;middleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;thunk&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composeEnhancers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__REDUX_DEVTOOLS_EXTENSION_COMPOSE__&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;rootReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;preloadedState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;composeEnhancers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;applyMiddleware&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you noticed we introduce many new terms in the above code. Let's try to explore each one of them one by one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;compose&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is used when you want to pass multiple &lt;em&gt;store-enhancers&lt;/em&gt; to the store.&lt;/li&gt;
&lt;li&gt;It composes single-argument functions from right to left. The rightmost function can take multiple arguments as it provides the signature for the resulting composite function. for example: 
&lt;code&gt;compose(f, g, h)&lt;/code&gt; is identical to doing &lt;code&gt;(...args) =&amp;gt; f(g(h(...args)))&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;store enhancers&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They are &lt;em&gt;higher-order functions&lt;/em&gt; that add some extra functionality to the store. The only store enhancer which is supplied with redux by default is &lt;em&gt;applyMiddleware&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;applyMiddleware&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creates a store enhancer that applies middleware to the &lt;strong&gt;dispatch&lt;/strong&gt; method of the Redux store. This is handy for a variety of tasks, such as expressing asynchronous actions in a concise manner or logging every action payload.&lt;/li&gt;
&lt;li&gt;Because middleware is potentially asynchronous, this should be the first store enhancer in the composition chain.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll see the use of &lt;strong&gt;dispatch&lt;/strong&gt; in the next step.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-build-an-action-creator"&gt;
  &lt;/a&gt;
  Step 6: Build an Action Creator
&lt;/h3&gt;

&lt;p&gt;Now it's time to make an action creator which fetches data using REST APIs.&lt;/p&gt;

&lt;p&gt;Action creators are a &lt;strong&gt;pure function&lt;/strong&gt; which creates action.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actions&lt;/strong&gt; are plain JS objects that have a &lt;code&gt;type&lt;/code&gt; field and can contain additional data. It creates an event that describes something that happened in the application.&lt;/p&gt;

&lt;p&gt;We'll declare all the &lt;code&gt;type&lt;/code&gt; field in a separate file &lt;code&gt;src/actions/types.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;USER_DETAILS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USER_DETAILS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To build an Action creator:-&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;src/actions/user.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;USER_DETAILS&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUserDetails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Step 2: Inside Action Creator to make an API call&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Step 3: Dispatch an Action to update the state&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;USER_DETAILS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code snippet, we make an API call, and as soon as we get our response we &lt;strong&gt;dispatch&lt;/strong&gt; the action so we can change the state. &lt;/p&gt;

&lt;p&gt;The store now uses the &lt;strong&gt;reducer&lt;/strong&gt; to handle &lt;strong&gt;actions&lt;/strong&gt;, which are dispatched or 'sent' to the store with its &lt;strong&gt;dispatch&lt;/strong&gt; method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-7-connect-redux-store-to-components"&gt;
  &lt;/a&gt;
  Step 7: Connect redux store to components
&lt;/h3&gt;

&lt;p&gt;We have finally done with the store setup. We are one step away so just follow up 🤓🤓. &lt;/p&gt;

&lt;p&gt;In &lt;code&gt;src/components/Users/index.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getUserDetails&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../actions/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./user.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;getUserDetails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userReducer&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUserDetails&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleButtonClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//make a call to the Action creator&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Step 1: Make a call to Action-creator from Users Component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;getUserDetails&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// Update the UI as soon as we get our response through API call&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Step 5: Inside UseEffect of User Component to update the UI&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;setUserDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userReducer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userReducer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;.....&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapStateToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;userReducer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userReducer&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;getUserDetails&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapStateToProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code snippet, we share the redux store with components with the help of &lt;code&gt;connect&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Higher-order components are a function that accepts a "regular" component as its parameter and returns a new "regular" component as its return value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;connect&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;connect&lt;/em&gt; method provided by react-redux is an example of &lt;strong&gt;Higher-order components&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;connect&lt;/em&gt; method is used for transforming the "regular" React component so that the state of the Redux store can be "mapped" into the component's props.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It accepts two parameters: &lt;code&gt;mapStateToProps&lt;/code&gt; and &lt;code&gt;mapDispatchToProps&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;mapStateToProps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is a function that can be used for defining the props of the connected component that are based on the state of the Redux store.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mapDispatchToProps&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is a JS object of action-creators functions passed to the connected components as props.&lt;/li&gt;
&lt;li&gt;The functions passed in &lt;em&gt;mapDispatchToProps&lt;/em&gt; must be action creators, i.e. functions that returns Redux actions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you noticed how we can pass our &lt;em&gt;action creators&lt;/em&gt; and &lt;em&gt;redux state&lt;/em&gt; as a parameter to the &lt;em&gt;Users&lt;/em&gt; component.&lt;/p&gt;

&lt;p&gt;On button click, we invoke action-creator which makes an API call and update the redux state.&lt;br&gt;
In &lt;code&gt;useEffect&lt;/code&gt; we will monitor the change in redux state and update the UI with response data.&lt;/p&gt;

&lt;p&gt;Finally, our React application with Redux is ready!!! 😎😎&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8hszZSIk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622408091353/JRvs9DBnQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8hszZSIk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622408091353/JRvs9DBnQ.gif" alt="react-redux.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the final code in my &lt;a href="https://github.com/anuradha9712/react-redux-application"&gt;github repo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up!!
&lt;/h2&gt;

&lt;p&gt;Thank you for your time!! Let's connect to learn and grow together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/anuradha-aggarwal-4a2751107/"&gt;LinkedIn&lt;/a&gt; &lt;a href="https://twitter.com/Anuradh06359394"&gt;Twitter&lt;/a&gt; &lt;a href="https://www.instagram.com/blogcode404/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/anuradha2612"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y61HrVIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-blue.png" alt="Buy-me-a-coffee"&gt;&lt;/a&gt;  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>redux</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Why your website needs validation</title>
      <author>Jordan Finneran</author>
      <pubDate>Sun, 30 May 2021 21:19:39 +0000</pubDate>
      <link>https://dev.to/jordanfinners/why-your-website-needs-validation-44jm</link>
      <guid>https://dev.to/jordanfinners/why-your-website-needs-validation-44jm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="#intro"&gt;Intro&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#forms"&gt;Forms&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#custom"&gt;Custom Validation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#summary"&gt;Summary&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Continuing on from my previous blog about &lt;a href="https://jordanfinners.dev/blogs/website-security-week"&gt;website security week&lt;/a&gt;, we're going to talk about a validation.&lt;/p&gt;

&lt;p&gt;If accept user input, you are going to need to validate the input. Non validated user inputs can lead to security vulnerabilities for example SQL injection attacks, where user input escapes your database and starts modifying it. It can also lead to exceptions from your code if a user inputs text rather than a number for example.&lt;/p&gt;

&lt;p&gt;Please Please Please ensure you do the same validation server side as you do on the frontend (client) side.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#forms"&gt;
  &lt;/a&gt;
  Forms &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You user inputs should be contained in HTML forms which comes with lots of powerful validation tools built in.&lt;br&gt;
This also means you can start to add validation without adding any extra javascript, increasing performance.&lt;/p&gt;

&lt;p&gt;First thing to check on your inputs is, are you using the correct type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  button&lt;/li&gt;
&lt;li&gt;  checkbox&lt;/li&gt;
&lt;li&gt;  color&lt;/li&gt;
&lt;li&gt;  date&lt;/li&gt;
&lt;li&gt;  datetime-local&lt;/li&gt;
&lt;li&gt;  email&lt;/li&gt;
&lt;li&gt;  file&lt;/li&gt;
&lt;li&gt;  hidden&lt;/li&gt;
&lt;li&gt;  image&lt;/li&gt;
&lt;li&gt;  month&lt;/li&gt;
&lt;li&gt;  number&lt;/li&gt;
&lt;li&gt;  password&lt;/li&gt;
&lt;li&gt;  radio&lt;/li&gt;
&lt;li&gt;  range&lt;/li&gt;
&lt;li&gt;  reset&lt;/li&gt;
&lt;li&gt;  search&lt;/li&gt;
&lt;li&gt;  submit&lt;/li&gt;
&lt;li&gt;  tel&lt;/li&gt;
&lt;li&gt;  text&lt;/li&gt;
&lt;li&gt;  time&lt;/li&gt;
&lt;li&gt;  url&lt;/li&gt;
&lt;li&gt;  week&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will provide lots of out of the box validation goodness from the outset. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types"&gt;More information on the types&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next up for file inputs ensure you've set the &lt;code&gt;accept&lt;/code&gt; attribute which allows you to check the type of the file for example &lt;code&gt;accept="image/png, image/jpeg"&lt;/code&gt;.&lt;br&gt;
You should also set the &lt;code&gt;multiple&lt;/code&gt; attribute to whether you are allowing many files or a single.&lt;/p&gt;

&lt;p&gt;Next up for number inputs set the &lt;code&gt;step&lt;/code&gt; attribute to ensure only increments of the amount you want are allowed to be entered.&lt;br&gt;
Also set the &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; values as required to limit the numbers that can be inputted.&lt;br&gt;
For non numeric values there are &lt;code&gt;minlength&lt;/code&gt; and &lt;code&gt;maxlength&lt;/code&gt; which limit the number of characters that can be inputted.&lt;/p&gt;

&lt;p&gt;Finally we have &lt;code&gt;pattern&lt;/code&gt; attribute, this can be used to match a specific Regular Expression to validate the input. If you are using one of the existing types above, for example email, you &lt;em&gt;don't&lt;/em&gt; then need to have your own email regular expression.&lt;/p&gt;

&lt;p&gt;Example usage:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form name="venue"&amp;gt;
    &amp;lt;label&amp;gt;What is the max number of decimal things?
        &amp;lt;input name="capacity" type="number" placeholder="e.g. 32" min="0" max="100" step="0.1" /&amp;gt;
    &amp;lt;/label&amp;gt;

    &amp;lt;label&amp;gt;Any images of your venue you wish to upload?
        &amp;lt;input name="images" type="file" accept="image/png, image/jpeg" multiple/&amp;gt;
    &amp;lt;/label&amp;gt;

    &amp;lt;label&amp;gt;How do we contact you?
        &amp;lt;input name="contact" type="email" placeholder="e.g. bob@bob.com" /&amp;gt;
    &amp;lt;/label&amp;gt;

    &amp;lt;label&amp;gt;Enter UUID to test pattern usage?
        &amp;lt;input name="pattern" type="text" pattern="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}" /&amp;gt;
    &amp;lt;/label&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#custom-validation"&gt;
  &lt;/a&gt;
  Custom Validation &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you want to extend the validation of a form, I would recommend adding an event listener on the form for &lt;code&gt;submit&lt;/code&gt; event, and then prevent the default action using &lt;code&gt;event.preventDefault()&lt;/code&gt;.&lt;br&gt;
You can then run any validation on the form using javascript and set &lt;code&gt;setCustomValidity&lt;/code&gt; on the inputs which then uses the in built goodness of forms and inputs to display the error message.&lt;/p&gt;

&lt;p&gt;Example Usage:&lt;/p&gt;

&lt;p&gt;HTML&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form name="venue" onsubmit="submit"&amp;gt;
    &amp;lt;p class="passwordRules"&amp;gt;Passwords must have at least one uppercase and lowercase letter, one number, and at least 8 or more characters.&amp;lt;/p&amp;gt;

    &amp;lt;label&amp;gt;Password
        &amp;lt;input 
        name="password" 
        type="password" 
        required 
        placeholder="XXXXXXXX"
        pattern="(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{8,}"
        title="Must contain at least one uppercase and lowercase letter, one number, and at least 8 or more characters"/&amp;gt;
    &amp;lt;/label&amp;gt;

    &amp;lt;label class="secondPass"&amp;gt;Confirm Password
        &amp;lt;input
        name="confirmPassword" 
        type="password" 
        required 
        placeholder="XXXXXXXX"
        pattern="(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{8,}"
        title="Must contain at least one uppercase and lowercase letter, one number, and at least 8 or more characters"/&amp;gt;
    &amp;lt;/label&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Javascript&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  /**

&lt;ul&gt;
&lt;li&gt;Handle form submission&lt;/li&gt;
&lt;li&gt;@param {Event} event the form submission event, preventing the normal form behavior
*/
async submit(event) {
event.preventDefault();
// custom validation of the passwords
this.validatePassword();
// grab the form and trigger validation
const form = this.querySelector('form');
const valid = form.reportValidity();
if (valid) {
    // do something with the form
} else {
  // form isn't valid
}
}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;/**&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Checks to see if passwords match
*/
validatePassword() {
const pass = this.querySelector('input[name="password"]');
const confirmPass = this.querySelector('input[name="confirmPassword"]');
if (pass.value !== confirmPass.value) {
  confirmPass.setCustomValidity("Passwords don't match");
} else {
  confirmPass.setCustomValidity('');
}
}
&lt;/li&gt;
&lt;/ul&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;a href="#summary"&gt;
&lt;/a&gt;
Summary &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;


&lt;p&gt;In summary, HTML gives us really powerful validation tools to check the user input and validate with minimal Javascript, which we can also extend with a little bit of Javascript too.&lt;br&gt;
We must also ensure that any validation we have completed on the frontend is also done on the server side to prevent users circumventing your frontend and directly interacting with your API.&lt;/p&gt;

&lt;p&gt;Validating your user input prevents a whole heap of issues and vulnerabilities for your applications and business.&lt;/p&gt;

&lt;p&gt;Happy Validating!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>security</category>
    </item>
    <item>
      <title>Building a Portfolio: A Project Idea</title>
      <author>Ghaleb</author>
      <pubDate>Sun, 30 May 2021 20:19:36 +0000</pubDate>
      <link>https://dev.to/ghamadi/building-a-portfolio-a-project-idea-48bh</link>
      <guid>https://dev.to/ghamadi/building-a-portfolio-a-project-idea-48bh</guid>
      <description>&lt;p&gt;In the first part of this series, I introduced the general factors that generally make up a good project. Today, I will be suggesting a project idea, why it works, and some recommended features.&lt;/p&gt;

&lt;p&gt;I will also share a few resources that can be useful for full-stack developers when creating this project. The idea itself is not limited to web development, but I will be discussing it from the perspective of full-stack web developers.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#the-project-a-password-manager"&gt;
  &lt;/a&gt;
  The Project: A Password Manager
&lt;/h1&gt;

&lt;p&gt;Password managers are not a new idea by any means, and managing passwords is not an &lt;em&gt;unsolved problem&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;There is a large number of solutions out there, so you will not be in lack of resources for inspiration. The large number of solutions, however, should not discourage you from implementing one yourself.&lt;/p&gt;

&lt;p&gt;I believe a password manager is comprehensive enough to be a good addition to most, if not all, portfolios. It is also complex enough to help you show your skills.&lt;/p&gt;

&lt;p&gt;Security is a very important component of any full-stack project, and password managers employ a suite of security concepts. Presenting a password manager not only equates presenting essential skills for full-stack development, but also your familiarity with security concepts. A password manager is also a useful project.&lt;/p&gt;

&lt;p&gt;It is one thing when you build an unpublished, dummy project. It is another thing entirely when that project is in active use. A published project conveys confidence in the implementation, and makes your sales pitch more convincing.&lt;/p&gt;

&lt;p&gt;A password manager is not limited to a small audience; it is useful to almost everyone. As such, finding a decent number of users in your circle of friends and family is not hard.&lt;/p&gt;

&lt;p&gt;I do have one warning here: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are not at all familiar with concepts of security, or you do not intend to maximize security, then limit the users of the project to yourself, and avoid sensitive data (or keep it local).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another great aspect of this project idea, is that it inherently involves user management and non-trivial CRUD operations. A couple of unrelated tables (or document collections if you wish to use something like Firebase) will not be enough for a decent implementation. &lt;/p&gt;

&lt;p&gt;So, even if you do not care about maximizing security, your project will check most boxes in the list of skills needed for your full-stack position.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#why-it-works-key-factors"&gt;
  &lt;/a&gt;
  Why it Works: Key Factors
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#1-problem-statement"&gt;
  &lt;/a&gt;
  1. Problem statement
&lt;/h3&gt;

&lt;p&gt;The importance of a password manager is well documented and is only expected to increase. As a matter of fact, password managers have become necessary if a user wishes to claim security. &lt;/p&gt;

&lt;p&gt;So, problem statement: ✔&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-data-persistence"&gt;
  &lt;/a&gt;
  2. Data persistence
&lt;/h3&gt;

&lt;p&gt;Another obviously present component in this project. More importantly, the data model required for a proper password manager is not overly simple. &lt;/p&gt;

&lt;p&gt;At the very least, a basic - but useful - password manager needs to handle users, roles, and multiple types of secure items (not just accounts' passwords).&lt;/p&gt;

&lt;p&gt;So, clearly, data persistence: ✔&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-decent-scope"&gt;
  &lt;/a&gt;
  3. Decent scope
&lt;/h3&gt;

&lt;p&gt;The scope of your application primarily depends on how much work you intend to invest in it. To justify this project idea however, we should discuss the minimal functionality required.&lt;/p&gt;

&lt;p&gt;The core features would be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authentication &amp;amp; authorization&lt;/li&gt;
&lt;li&gt;Client-side encryption &amp;amp; decryption of data&lt;/li&gt;
&lt;li&gt;A secure, random password generator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other good-to-have features could be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Custom fields for secure items (allow user to add, remove, and rename fields of whatever secure items they wish to store)&lt;/li&gt;
&lt;li&gt;Editable templates of secure items&lt;/li&gt;
&lt;li&gt;Sharing encrypted data among users (public key encryption)&lt;/li&gt;
&lt;li&gt;Authenticating stored items (use case for HMAC)&lt;/li&gt;
&lt;li&gt;Master password reset (not a trivial problem to solve since the forgotten master password is needed to decrypt stored items)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the features above are important. You can either create a basic application with the core features, or expand it with the good-to-have features. Either way, you are still no where near nice-to-have features, and the scope of your application is already non-trivial.&lt;/p&gt;

&lt;p&gt;Decent scope: ✔&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-clean-architecture"&gt;
  &lt;/a&gt;
  4. Clean architecture
&lt;/h3&gt;

&lt;p&gt;Mostly because of the 'decent scope', you will increasingly suffer as you work on your project if you are not applying good coding practices. &lt;/p&gt;

&lt;p&gt;In other words, a project like this one almost forces you to carefully consider your architecture properly before implementing.&lt;/p&gt;

&lt;p&gt;This will be your responsibility as a developer. It cannot really be expanded upon here without explicitly discussing an implementation, which is beyond the scope of this article.&lt;/p&gt;

&lt;p&gt;Note that it might be a good idea to document your architecture if you intend to showcase your project later on.&lt;/p&gt;

&lt;p&gt;Clean architecture: ✔&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#why-it-works-bonus-points"&gt;
  &lt;/a&gt;
  Why it Works: Bonus Points
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#1-encryption-vs-hashing"&gt;
  &lt;/a&gt;
  1. Encryption vs Hashing
&lt;/h3&gt;

&lt;p&gt;Remember, this is a project that emphasizes security. You do not have the option of storing passwords in plaintext and claiming that this is a dummy project and you wanted to focus on core functionality :) &lt;/p&gt;

&lt;p&gt;You will have to hash users' authentication passwords and encrypt their secure items. That means you will need to understand the exact differences between the two concepts, as well as the differences between the different algorithms within each realm. You will also need to understand best use cases for different algorithms to justify your choices.&lt;/p&gt;

&lt;p&gt;In short, this project helps you demonstrate good working knowledge in different security concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-api-consumption-optional"&gt;
  &lt;/a&gt;
  2. API consumption (optional)
&lt;/h3&gt;

&lt;p&gt;This was listed as an optional key component of a good project in my previous post. You will probably not need to consume an API for the core functionality of this app, but you can get creative with nice-to-have features.&lt;/p&gt;

&lt;p&gt;This is entirely optional, but you are expected to deal with APIs as an engineer, and as such, there is no harm in demonstrating comfort in using them.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;A password manager involves all the key components discussed to make a project fit for a full-stack developer's portfolio. &lt;/p&gt;

&lt;p&gt;More importantly, however, it also forces you to learn security concepts. These concepts are extremely relevant but often ignored or forgotten in projects, because they are not required for the app to function. &lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h1&gt;

&lt;p&gt;Here's a list of resources that may be useful to building this web-based password manager:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=w68BBPDAWr8"&gt;How Password Managers Work - Computerphile&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;I cannot recommend this video enough&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cryptojs.gitbook.io/docs/"&gt;CryptoJS&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;A JavaScript crypto library &lt;/li&gt;
&lt;li&gt;Includes hashing and encryption algorithms&lt;/li&gt;
&lt;li&gt;Lacks asymmetric encryption&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dchest/tweetnacl-js/blob/master/README.md#documentation"&gt;TweetNaCl.js&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;A JavaScript crypto library focused on encryption&lt;/li&gt;
&lt;li&gt;Includes asymmetric encryption but lacks HMAC &amp;amp; PBKDF2&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/davidbau/seedrandom"&gt;seedrandom&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Seeded random number generator for JavaScript&lt;/li&gt;
&lt;li&gt;Might prove useful for a secure password generator&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>portfolio</category>
      <category>career</category>
      <category>webdev</category>
    </item>
    <item>
      <title>My Dev Journey: Week 4</title>
      <author>Harry York</author>
      <pubDate>Sun, 30 May 2021 20:05:38 +0000</pubDate>
      <link>https://dev.to/harryyork97/my-dev-journey-week-4-2me2</link>
      <guid>https://dev.to/harryyork97/my-dev-journey-week-4-2me2</guid>
      <description>&lt;p&gt;Week 4 marks the end of the JavaScript Fundamentals block! Wow this has been a big challenge but I feel so happy looking back at what I can do now as opposed to just three weeks ago. This (along with a three day bank-holiday weekend 🍻) have spurred me on to be even more excited to move onto the next three block of the course, all about Backend development!&lt;/p&gt;

&lt;p&gt;Thanks for checking out this blog entry, and consider following me on &lt;a href="https://twitter.com/grand_oldduke"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/harryyork97"&gt;GitHub&lt;/a&gt; to see when I post more updates, and keep track of how I find the Backend block of the course. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-ive-learnt-this-week"&gt;
  &lt;/a&gt;
  What I've learnt this week
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#revision"&gt;
  &lt;/a&gt;
  Revision
&lt;/h3&gt;

&lt;p&gt;We started the week off with solo sprint of recapping a lot of the content we have covered in the previous two weeks, this was so welcomed! It feels like we've been going a mile a minute over the past two weeks, so to have to reflective time where everyone can take stock of where they're at in the course and to brush up on some of the fundamental concepts has been wonderful.&lt;/p&gt;

&lt;p&gt;Our recap covered topics like array methods, closures, Object-Orient Programming, and recursion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#async"&gt;
  &lt;/a&gt;
  Async
&lt;/h3&gt;

&lt;p&gt;We dedicated two whole days to Async, and it was great to get familiar with a concept I'd heard a lot about, but never seen implemented into code. I have to say that this is something that puzzled me, but I couldn't stop thinking about. Several times over the two days I found myself zoned out in the middle of a task like washing the dishes, eating tea, or showering, and then snapping too realising that I had spaced out. Perhaps I was starting to live asynchronously 🤔&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apis-and-promises"&gt;
  &lt;/a&gt;
  API's and Promises
&lt;/h3&gt;

&lt;p&gt;The final two days covered working with dummy API requests as well as getting data from API's like the &lt;a href="https://swapi.dev/"&gt;Star Wars API&lt;/a&gt;, and the &lt;a href="https://pokeapi.co/"&gt;Pokémon API&lt;/a&gt;. As well as using amazing tools like &lt;a href="https://nodejs.org/api/fs.html"&gt;fs&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/axios"&gt;axios&lt;/a&gt;, and &lt;a href="https://www.npmjs.com/package/inquirer"&gt;inquirer&lt;/a&gt;. And this was a whole lot of fun, especially using inquirer to provide an input to the code rather than taking it as a hard coded input.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-ive-found-useful-this-week"&gt;
  &lt;/a&gt;
  Resources I've found useful this week
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org/api/fs.html"&gt;fs&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/axios"&gt;axios&lt;/a&gt;, and &lt;a href="https://www.npmjs.com/package/inquirer"&gt;inquirer&lt;/a&gt; documentation, went I'm picking things up for the first time well-written documentation full of examples is really useful to me&lt;/li&gt;
&lt;li&gt;Fun API's to practice with! We've been using the &lt;a href="https://swapi.dev/"&gt;Star Wars API&lt;/a&gt; and  &lt;a href="https://pokeapi.co/"&gt;Pokémon API&lt;/a&gt; so far and I'm excited to find more&lt;/li&gt;
&lt;li&gt;And as always the Northcoders notes!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>bootcamp</category>
    </item>
    <item>
      <title>Throttling vs Debouncing - an interesting analogy</title>
      <author>mayankav</author>
      <pubDate>Sun, 30 May 2021 19:51:31 +0000</pubDate>
      <link>https://dev.to/mayankav/throttling-vs-debouncing-29e8</link>
      <guid>https://dev.to/mayankav/throttling-vs-debouncing-29e8</guid>
      <description>&lt;p&gt;Events like 'click', 'scroll', 'drag' etc. can be abused to trigger the event handler function as many times as to noticeably degrade the performance of a web app. To limit such unwanted function calls in order to keep the performance up to the mark, we use polyfills like Throttling and Debouncing.&lt;/p&gt;

&lt;p&gt;Let us try to understand both of these function timing algorithms but first by some analogy that makes it easy to digest.&lt;/p&gt;

&lt;p&gt;Your grandmother promises you an ice-cream when you ask her for one but after every 2 days, not any early than that. You asked for an ice-cream today, you got it already.&lt;/p&gt;

&lt;h2&gt;&lt;u&gt;Throttling&lt;/u&gt;&lt;/h2&gt;

&lt;p&gt;Now, a day later, you ask your grandmother for another ice-cream. She tells you, you can have one tomorrow or anytime after that but not today since it's not 2 days from the last time yet. So the rule is simple, you get an ice-cream every 2 days. That's throttling your call to the function askForIcecream(). &lt;b&gt;All your early requests were simply ignored.&lt;/b&gt; Technically, when you throttle a function, you make sure once it is called it cannot be called again until a given time interval has passed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--90PiFAEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3dbh854xvy0c233xssh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--90PiFAEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3dbh854xvy0c233xssh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;The Throttling Grand Mother&lt;/center&gt;

&lt;h2&gt;&lt;u&gt;Debouncing&lt;/u&gt;&lt;/h2&gt;

&lt;p&gt;What if your grandmother was a little more grumpy? You just had your ice-cream yesterday and ask her for another one today, she sends you away and tells you not to ask for it for another 2 days now. You broke the rule, you get a punishment. Making an untimely call for an ice-cream just got it delayed by another 2 days. You keep making early requests and your ice-cream keeps getting delayed. That's debouncing your call to the function askForIcecream(). &lt;b&gt;All your early requests were penalized.&lt;/b&gt; Technically, when you debounce a function, you make sure its called only after a given interval of time has passed from the last call but there's an additional criteria. Every time someone tries to invoke the function before its time, the "delay" gets added. &lt;/p&gt;

&lt;p&gt;‍&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZO8PKRIV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5q1jnleme0zi26627z46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZO8PKRIV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5q1jnleme0zi26627z46.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;The Debouncing Grand Mother&lt;/center&gt;
&lt;br&gt;
‍

&lt;p&gt;Shall we check our understanding against the real deal now? How do we apply this to our web apps? I mentioned a few events in the beginning. A few examples involving those events shall be sufficient case-study to start using Throttling and Debouncing in our next project.&lt;/p&gt;

&lt;p&gt;‍&lt;/p&gt;

&lt;h2&gt;&lt;u&gt;Case Study&lt;/u&gt;&lt;/h2&gt;


&lt;h4&gt;1 - Search-box -&lt;/h4&gt; There's a web-app that lists a variety of products from different categories on its products page. What's the best way to display only the relevant products out of a million other products available? Yeah, give the user a search box. A search box with a button that says "Search" or "Go". You input the name of the product, click on the button and a function (called getResults) fires that gives you the relevant list of products matching your search string. I do not see a reason to restrict number of times getResults() is called. Let's think about another scenario, your users also want suggestions as a list in a drop-down selection panel. As soon as they start typing they want to see the suggestions appear that of course should keep changing as they keep typing (You know even Google has this on its search page). Now when you think, you'll figure out, you need to use some "type" event. So what options do we have in JavaScript? We have "onKeyPress", "onKeyUp" and "onKeyDown". Let's say we want to use "onKeyPress" and fire a function (getSuggestions) every time the user types a character in the search-box. Now when you think again, this can keep firing getSuggestions() on every character that may not be very useful. Why not fire a function when the user types and then stops for a while (say 2 milliseconds). Technically speaking, we now want to debounce the call to getSuggestions() for 2 ms.

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ODuNYMPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovjlu5utzj2ge6rv3ep8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ODuNYMPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovjlu5utzj2ge6rv3ep8.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;An example picked up from google&lt;/center&gt;
&lt;br&gt;
‍


&lt;h4&gt;2 - Resizing the window -&lt;/h4&gt; Lets says you want to display different content when an user resizes the window to a smaller size. You can obviously do that with some CSS and media queries but lets assume you want to detect the change in size of the window and you want to do it optimally. Normally when you attach an event listener function to the "resize" event on "window" object, the handler keeps firing as you drag the cursor, which may not be optimal for your use case. In such cases you'd want some expensive logic that is inside the event handler function to run after say, every 1 second. Technically in such cases you'd throttle the heavy function that is called from within the event handler function every 1 second. All the "resize" events shall be ignored until 1 second from the last call to the event handler.

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ckIvfVdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/faohs2vh6ns75epnuokv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ckIvfVdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/faohs2vh6ns75epnuokv.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;An example picked up from google&lt;/center&gt;
&lt;br&gt;
‍

&lt;p&gt;There can be many similar examples and scenarios where you'd want to choose one of the above mentioned strategies to keep the performance intact. I leave that on you to explore. I hope this piece of information is sufficient to make things clear at least theoretically.&lt;/p&gt;

&lt;p&gt;‍&lt;/p&gt;

&lt;p&gt;For a practical example of how to implement the &lt;b&gt;debouncing&lt;/b&gt; poly-fill, check out the following pen&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;a href="https://codepen.io/mayankav/pen/yLaXJKO"&gt;https://codepen.io/mayankav/pen/yLaXJKO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For a practical example of how to implement the &lt;b&gt;throttling&lt;/b&gt; poly-fill, check out the following pen&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;a href="https://codepen.io/mayankav/pen/ExWbLmv"&gt;https://codepen.io/mayankav/pen/ExWbLmv&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Originally Posted Here - &lt;/h3&gt;

&lt;p&gt;&lt;a href="https://mayankav.webflow.io/blog/throttling-vs-debouncing"&gt;https://mayankav.webflow.io/blog/throttling-vs-debouncing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‍&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>vue</category>
      <category>performance</category>
    </item>
    <item>
      <title>Publishing First Rust Crate</title>
      <author>Ayush</author>
      <pubDate>Sun, 30 May 2021 19:27:29 +0000</pubDate>
      <link>https://dev.to/ayush1325/publishing-first-rust-crate-4al2</link>
      <guid>https://dev.to/ayush1325/publishing-first-rust-crate-4al2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h1&gt;

&lt;p&gt;I am a College Student and have been using and experimenting with Rust for a while now. I wrote a small crate to identify the various video formats using their magic bytes as kinda a project for getting selected in GSOC21. Sadly, it didn't work out but I thought now that I have the crate, I might as well publish it. I remember searching for it a year ago when I was trying to create a Plex like media server in Rust and coming up empty. So, I started looking at the Crates.io &lt;a href="https://doc.rust-lang.org/cargo/reference/publishing.html"&gt;documentation&lt;/a&gt; and found it to be quite a painless process.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction-to-crate"&gt;
  &lt;/a&gt;
  Introduction to Crate
&lt;/h1&gt;

&lt;p&gt;The crate I wanted to publish was &lt;a href="https://github.com/Ayush1325/media_infer"&gt;media_infer&lt;/a&gt;. It basically reads the starting bytes of a file or stream of bytes and tries to figure out the video container. The resources for the various magic bytes I used are given below: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_file_signatures"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.garykessler.net/library/file_sigs.html"&gt;Garykessler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#steps-to-publish"&gt;
  &lt;/a&gt;
  Steps to Publish
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#create-an-account-in-cratesio"&gt;
  &lt;/a&gt;
  Create an account in Crates.io
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#acquire-api-token"&gt;
  &lt;/a&gt;
  Acquire API Token
&lt;/h2&gt;

&lt;p&gt;You will need to create a new token the first time. It seems every device should have a different token. After the token is created, the Crates.io token section gives the command to type and it is something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cargo login &amp;lt;token&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-metadata-to-the-cargotoml"&gt;
  &lt;/a&gt;
  Add Metadata to the Cargo.toml
&lt;/h2&gt;

&lt;p&gt;Set the fields like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;authors&lt;/li&gt;
&lt;li&gt;license or license-file&lt;/li&gt;
&lt;li&gt;description&lt;/li&gt;
&lt;li&gt;homepage&lt;/li&gt;
&lt;li&gt;documentation&lt;/li&gt;
&lt;li&gt;repository&lt;/li&gt;
&lt;li&gt;readme&lt;/li&gt;
&lt;li&gt;keywords&lt;/li&gt;
&lt;li&gt;categories
The versioning should be kept in mind since there is no way to edit an already published crate.
## Check LICENSE and README files
README file from the git repository is used and should be in markdown. Crates.io doesn't seem to recognize Org documents.
## Check Package
The files that will be included in teh .crate file can be checked using:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cargo package --list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cargo will automatically ignore files ignored by your version control system when packaging, but if you want to specify an extra set of files to ignore you can use the exclude key in the manifest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[package]&lt;/span&gt;
&lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;span class="py"&gt;exclude&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;"public/assets/*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"videos/*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or include:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[package]&lt;/span&gt;
&lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;span class="py"&gt;exclude&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;"public/assets/*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"videos/*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Crates.io currently has a 10MB size limit on the .crate file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dry-run"&gt;
  &lt;/a&gt;
  Dry Run
&lt;/h2&gt;

&lt;p&gt;Cargo has a pretty nifty command which basically checks if everything is in order and even gives warnings about things that can be improved.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cargo publish --dry-run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#publish"&gt;
  &lt;/a&gt;
  Publish
&lt;/h2&gt;

&lt;p&gt;Once everything is finalized, the crate can be published using the simple command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cargo publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once a version is already published, the same version cannot be published again even if the previous publish has been yanked.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This was the fist time I have published a library for any language, so it was kind of a great learning experience to actually do it myself. Earlier even though I knew what the crates were, it used to seem kind of like a difficult goal to achieve. Now, I think I understand and appreciate the crates a lot more.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://doc.rust-lang.org/cargo/reference/publishing.html"&gt;Crates.io Publish Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crates.io/crates/media_infer"&gt;Crates.io media_infer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Ayush1325/media_infer"&gt;Github media_infer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rust</category>
      <category>firstpost</category>
    </item>
    <item>
      <title>Different approach to loading screen in React</title>
      <author>Kuba</author>
      <pubDate>Sun, 30 May 2021 19:23:53 +0000</pubDate>
      <link>https://dev.to/kuba_szw/different-approach-to-loading-screen-in-react-249b</link>
      <guid>https://dev.to/kuba_szw/different-approach-to-loading-screen-in-react-249b</guid>
      <description>&lt;p&gt;Most of the loading screens I saw, based on boolean variable &lt;code&gt;loading&lt;/code&gt;. Then based on it, component &lt;code&gt;loadingScreen&lt;/code&gt; is returned or the actual page. The more data I wanted to load, the more &lt;code&gt;if statements&lt;/code&gt; I had to make to check if I am still loading. More such ifs sounds like a bad idea to me 🤷‍♀️. &lt;/p&gt;

&lt;p&gt;I wanted to make my &lt;code&gt;LoadingScreen&lt;/code&gt; component smart enough to figure out, if it should be still displayed.  &lt;/p&gt;

&lt;p&gt;Let's keep loading screen simple for this example. If it has children, display them. Else, use default loader.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// LoadingScreen.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LoadingScreen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bg-gray-600 h-screen w-screen fixed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="p"&gt;):(&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Default&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since loader has to decide if data is already loaded, it needs to have access to those data. From the main component point of view it will look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// MainPage.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MainPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;keyValuePairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;            &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyValuePairs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LoadingScreen&lt;/span&gt; &lt;span class="nx"&gt;toLoad&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Conent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapStateToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;makeRequest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The simplest way of checking if data is already loaded, is checking if all elements in array &lt;code&gt;toLoad&lt;/code&gt; are not &lt;code&gt;undefined&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Let's add such check to &lt;code&gt;LoadingScreen&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// LoadingScreen.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LoadingScreen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDataLoaded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLoad&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLoad&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;isDataLoaded&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="kc"&gt;null&lt;/span&gt;
        &lt;span class="p"&gt;):(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bg-gray-600 h-screen w-screen fixed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="p"&gt;):(&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Default&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! &lt;code&gt;LoadingScreen&lt;/code&gt; will be displayed till data will stay &lt;code&gt;undefined&lt;/code&gt;. Another approach is to check if data is equal to it's initial state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// MainPage.js&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LoadingScreen&lt;/span&gt; &lt;span class="nx"&gt;toLoad&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt; &lt;span class="nx"&gt;toLoadInitialState&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="nx"&gt;initialData&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the check will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// LoadingScreen.js &lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDataLoaded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLoad&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLoad&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLoadInitialState&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course the problem will be when obtained data will be equal initial data but in most of my cases it does the job.&lt;/p&gt;

&lt;p&gt;It is about one month since I started to learn React so feel free to point out any rookie mistake I made 😉.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What are Microservices? | Advantages of Microservice Architecture</title>
      <author>Srajan Gupta</author>
      <pubDate>Sun, 30 May 2021 19:04:25 +0000</pubDate>
      <link>https://dev.to/srajangupta__/what-are-microservices-advantages-of-microservice-architecture-2jd2</link>
      <guid>https://dev.to/srajangupta__/what-are-microservices-advantages-of-microservice-architecture-2jd2</guid>
      <description>&lt;p&gt;In this video, we learn all about Microservices, and the advantages of using Microservices architecture over Monolithic architecture.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BwuXPgGBmBA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>systemdesign</category>
      <category>monolithic</category>
    </item>
    <item>
      <title>CSS-Only Direction-Aware Cube Links</title>
      <author>Asmae El-Ghezzaz</author>
      <pubDate>Sun, 30 May 2021 18:40:12 +0000</pubDate>
      <link>https://dev.to/elghezzaz_dev/css-only-direction-aware-cube-links-275a</link>
      <guid>https://dev.to/elghezzaz_dev/css-only-direction-aware-cube-links-275a</guid>
      <description>&lt;p&gt;Hello Guys,&lt;/p&gt;

&lt;p&gt;Today I created a Amazing css  Only Direction-Aware Cube LinksHover Effect Using HTML &amp;amp; CSS. this hover effect is simple but it looks amazing. I hope you like this also comments about your thoughts.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/elghezzaz/embed/GRWOQZJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>How To Quickly Add Cypress To Your Next.js App</title>
      <author>Ash Connolly</author>
      <pubDate>Sun, 30 May 2021 18:33:31 +0000</pubDate>
      <link>https://dev.to/ashconnolly/how-to-add-jest-to-your-next-js-app-2a3p</link>
      <guid>https://dev.to/ashconnolly/how-to-add-jest-to-your-next-js-app-2a3p</guid>
      <description>&lt;p&gt;Pssst.. you might also like this guide on adding Jest to your Next.js App. Combined with Cypress, it's a great setup! 😃&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ashconnolly" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--333mGAJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ydglmnZf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/204950/ac281f92-162f-4f59-91bf-2fbcd762187d.jpeg" alt="ashconnolly image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ashconnolly/how-to-quickly-add-jest-to-your-next-js-app-1h32" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How To Quickly Add Jest To Your Next.js App&lt;/h2&gt;
      &lt;h3&gt;Ash Connolly ・ May 30 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#nextjs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#why-use-cypress-for-end-to-end-integration-testing"&gt;
  &lt;/a&gt;
  Why use Cypress for end to end / integration testing?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Writing Cypress tests are easy and feel intuitive&lt;/li&gt;
&lt;li&gt;Good developer experience with quick setup&lt;/li&gt;
&lt;li&gt;The tests resemble how apps are used, not how they are implemented, making them as reliable and code agnostic as possible!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#adding-cypress"&gt;
  &lt;/a&gt;
  Adding Cypress
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#install-the-dependencies"&gt;
  &lt;/a&gt;
  Install the dependencies
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;yarn: &lt;code&gt;yarn add cypress start-server-and-test —dev&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;npm: &lt;code&gt;npm install cypress start-server-and-test --save-dev&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;start-server-and-test&lt;/code&gt; will allow us to run our app locally before starting Cypress.&lt;/p&gt;

&lt;p&gt;Now we need to open Cypress for the first time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;yarn: &lt;code&gt;yarn run cypress open&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;npm: &lt;code&gt;npx cypress open&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will add a bunch of folders to the root of your app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cypress/fixtures → these are our mock server response&lt;/li&gt;
&lt;li&gt;cypress/integration → these our UI tests&lt;/li&gt;
&lt;li&gt;cypress/plugins → these are, you guessed it, cypress plugins!&lt;/li&gt;
&lt;li&gt;cypress/supports → these are reusable functions to use in our tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will also have added a bunch of helpful example tests in &lt;code&gt;cypress/integration/examples&lt;/code&gt; too!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-scripts"&gt;
  &lt;/a&gt;
  Adding scripts
&lt;/h3&gt;

&lt;p&gt;Now we need to add some scripts to our &lt;code&gt;package.json&lt;/code&gt; so we can run cypress. &lt;/p&gt;

&lt;p&gt;What we could do open two terminal windows... &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In one we would run our app locally using &lt;code&gt;yarn dev&lt;/code&gt; or &lt;code&gt;yarn start&lt;/code&gt; (depending on your setup). &lt;/li&gt;
&lt;li&gt;And in the other terminal run the cypress tests against our local app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But that's not ideal. Instead we want to be able to run a single command that will do both of these for us. This will make running the tests in a release pipeline (like jenkins, circle CI, or github actions etc) easier to do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; I use &lt;code&gt;yarn dev&lt;/code&gt; to run my app locally (as it's a next.js app) on port &lt;code&gt;3000&lt;/code&gt;. if you use a different command (like &lt;code&gt;start&lt;/code&gt;) or a different port, be sure to change it in the scrips below.&lt;/p&gt;

&lt;p&gt;Add the following scripts (the ones starting with &lt;code&gt;cy&lt;/code&gt;) to your package.json:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cy:open-only&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cypress open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cy:run-only&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cypress run&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cy:open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start-server-and-test dev 3000 cy:open-only&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cy:run&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start-server-and-test dev 3000 cy:run-only&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember, the &lt;code&gt;start-server-and-test&lt;/code&gt; command will allow us to run our app locally before starting Cypress.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;cy:open-only&lt;/code&gt; will open the cypress GUI&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cy:run-only&lt;/code&gt; will run cypress tests&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cy:open&lt;/code&gt; will run &lt;code&gt;dev&lt;/code&gt; to run our app locally, and then run &lt;code&gt;cy:open-only&lt;/code&gt; to open the cypress GUI.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cy:run&lt;/code&gt; will run &lt;code&gt;dev&lt;/code&gt; to run our app locally, and then run &lt;code&gt;cy:run-only&lt;/code&gt; to run the cypress tests in the terminal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two commands on their own will not work unless your app is running. Which is why we have the last two commands, which will run our app locally, then run the tests, without the need to run our app in a separate terminal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-our-first-test"&gt;
  &lt;/a&gt;
  Adding our first test
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add a test file to &lt;code&gt;./cypress/integration/&lt;/code&gt; called &lt;code&gt;app.spec.js&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should load our app and show content&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;http://localhost:3000&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Welcome to Next.js!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be sure to update the &lt;code&gt;cy.contains&lt;/code&gt; to reference some text found on your homepage. I'm doing this in a brand new Next.js app, so I'm checking for &lt;code&gt;Welcome to Next.js!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now if we run:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;yarn: &lt;code&gt;yarn cy:run&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;npm: &lt;code&gt;npm run cy:run&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will see our tests running in the terminal!:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iv3yKldC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxrdng8mg95zjnkzi5ko.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iv3yKldC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxrdng8mg95zjnkzi5ko.png" alt="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxrdng8mg95zjnkzi5ko.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also open the Cypress GUI and see our tests run in a browser: Then we'll open cypress&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;yarn: &lt;code&gt;yarn cy:open&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;npm: &lt;code&gt;npm run cy:open&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And we should see our Cypress testing window, showing all available tests:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Otw9t8nU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlaf9613vrs25x98bx5e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Otw9t8nU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlaf9613vrs25x98bx5e.png" alt="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlaf9613vrs25x98bx5e.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: I have collapsed the folder called &lt;code&gt;examples&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Click the &lt;code&gt;app.spec.js&lt;/code&gt; and it will pop open a browser, navigate to your app, and run our tests against it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BAirGOsc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmzh57hqtfyixikwu5yc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BAirGOsc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmzh57hqtfyixikwu5yc.png" alt="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmzh57hqtfyixikwu5yc.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#done"&gt;
  &lt;/a&gt;
  Done!
&lt;/h2&gt;

&lt;p&gt;And that's it! We have added Cypress to our Next.js app! 🎉 😃 &lt;/p&gt;

&lt;p&gt;Now we can write end-to-end tests for all of our user journeys! For further learning on Cypress, I highly recommend the "Cypress in a Nutshell" video by &lt;a href="https://dev.to/amirrustam"&gt;Amir Rustamzadeh&lt;/a&gt; (Head of Developer Experience at Cypress). It's a very practical and concise watch!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LcGHiFnBh3Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you're interested in hearing more tips about React, Next.js, and JavaScript, feel free to &lt;a href="http://ashconnolly.com/twitter"&gt;follow me on twitter&lt;/a&gt;! 😃&lt;/p&gt;

&lt;p&gt;Stunning cover photo by &lt;a href="https://unsplash.com/@sir_jarvis?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Matthew on Unsplash!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>VS Code Remote SSH Multipass</title>
      <author>Josue Bustos</author>
      <pubDate>Sun, 30 May 2021 18:31:58 +0000</pubDate>
      <link>https://dev.to/josuebustos/vs-code-remote-ssh-multipass-dn8</link>
      <guid>https://dev.to/josuebustos/vs-code-remote-ssh-multipass-dn8</guid>
      <description>&lt;p&gt;This guide will show you how to remote SSH into a Ubuntu VM instance in Visual Studio Code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i3R260m_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i1.wp.com/jonamdall.com/wp-content/uploads/2018/05/leeloo-dallas-multipass.gif%3Fresize%3D480%252C220%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3R260m_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i1.wp.com/jonamdall.com/wp-content/uploads/2018/05/leeloo-dallas-multipass.gif%3Fresize%3D480%252C220%26ssl%3D1" alt="multipass"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Multipass is a platform developed by &lt;a href="https://canonical.com/"&gt;Canonical&lt;/a&gt; to prototype cloud launches locally for free. Learn more about Multipass and its capabilities by visiting &lt;a href="https://multipass.run/"&gt;multipass.run&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This guide assumes you are comfortable using the terminal and connecting to a remote server environment without a GUI. Review the prerequisites to follow along.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Homebrew for macOS&lt;/li&gt;
&lt;li&gt;Visual Studio Code (VS Code)&lt;/li&gt;
&lt;li&gt;Terminal, iTerm, or VS Code integrated terminal &lt;/li&gt;
&lt;li&gt;Remote SSH extension for VS Code &lt;/li&gt;
&lt;li&gt;SSH key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's begin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-multipass-on-macos"&gt;
  &lt;/a&gt;
  Installing Multipass on macOS
&lt;/h2&gt;

&lt;p&gt;Open your preferred Terminal app and copy-paste the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install --cask multipass
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Verify the installation was successful:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ multipass version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A sample output should look similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$  multipass version
multipass  1.6.2+mac
multipassd 1.6.2+mac
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! &lt;/p&gt;

&lt;p&gt;Now you can start launching Ubuntu VM instances on the fly with Multipass.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#launch-a-vm-instance"&gt;
  &lt;/a&gt;
  Launch a VM Instance
&lt;/h1&gt;

&lt;p&gt;To quickly launch your first instance, type the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ multipass launch

// example output
Starting fitting-diplodocus |
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Multipass will randomly create an alias name and provision your instance using the latest LTS Ubuntu image. &lt;/p&gt;

&lt;p&gt;Using this command also provisions your instance with default resources and a network such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Storage: 5 GB &lt;/li&gt;
&lt;li&gt;User: Ubuntu&lt;/li&gt;
&lt;li&gt;Password: N/A (can be modified)&lt;/li&gt;
&lt;li&gt;Network: Bridged (w/ Internet access)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or you can type a command to view more information about your instance like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;multipass exec keen-yak -- lsb_release --description

// example output
Description:  Ubuntu 20.04.2 LTS
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to list stopped or running instances, type :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ multipass ls

// example output
Name                    State             IPv4             Image
Imag-Name               Running           191.128.04.24    Ubuntu 20.04 LTS
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I personally like the robust horizontal output with more info. Also, make sure to copy the IPv4 Address shown below so you can use it later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;multipass info samcli

// example output
Name:           Image-Name
State:          Running
IPv4:           100.100.04.13
Release:        Ubuntu 20.04.2 LTS
Image hash:     9dd5cb9f73c4 (Ubuntu 20.04 LTS)
Load:           1.01 0.68 0.27
Disk usage:     1.3G out of 4.7G
Memory usage:   138.5M out of 981.3M
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, access the Ubuntu instance you just created by typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ multipass shell Image-Name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deleting-your-instance"&gt;
  &lt;/a&gt;
  Deleting your instance
&lt;/h3&gt;

&lt;p&gt;Once you decide you no longer need your VM instance, you can delete it by typing the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ multipass delete Image-Name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Deleting a VM instance only removes it from queue. Conceptually you can think of deleting a file and sending to the trash bin. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning: You will not be able to recover your instance after executing this command.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To completeley remove an instance from disk use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;multipass purge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Visit the &lt;a href="https://multipass.run/docs#command-line-reference"&gt;Multipass documenation&lt;/a&gt; to get familiar with advanced command combinations to create and manage your Ubuntu VM instances.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, it's time to SSH into your instance using Visual Studio Code so you can, well, code.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#vs-code-remote-ssh"&gt;
  &lt;/a&gt;
  VS Code Remote SSH
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;To follow along, make sure you have VS Code and the &lt;a href="https://code.visualstudio.com/docs/remote/ssh-tutorial#_install-the-extension"&gt;remote SSH extension&lt;/a&gt; installed. For detailed instructions and troubleshooting, visit the &lt;a href="https://code.visualstudio.com/docs/remote/ssh-tutorial"&gt;VS Code docs&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's begin...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-ssh-host"&gt;
  &lt;/a&gt;
  Add SSH Host
&lt;/h2&gt;

&lt;p&gt;Before we can SSH into our Multipass VM instance, you need to add a new Host in the user's SSH config file. You can directly access the file by locating the directory it's in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// on macOS
/Users/&amp;lt;user-name&amp;gt;/.ssh/config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// on Linux
/home/ubuntu/.ssh/config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Edit the file by adding or appending these three lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Host Alias-Name
  HostName 100.100.04.13
  User ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's going on here?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Host: A random name you chose.&lt;/li&gt;
&lt;li&gt;HostName: Is the IPv4 address of the VM instance.&lt;/li&gt;
&lt;li&gt;User: The user name of the instance.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#add-authorization-key"&gt;
  &lt;/a&gt;
  Add Authorization Key
&lt;/h2&gt;

&lt;p&gt;Below are two links if you need a quick refresher on how to install and create SSH keys.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Install Remote SSH extension &lt;a href="https://code.visualstudio.com/docs/remote/ssh-tutorial#_install-the-extension"&gt;tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How to &lt;a href="https://code.visualstudio.com/docs/remote/ssh-tutorial#_set-up-ssh"&gt;generate SSH keys&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Log into your VM instance using the Multipass shell command and append your host SSH key to the &lt;strong&gt;authorization_keys&lt;/strong&gt; file in the VM guest instance.&lt;/p&gt;

&lt;p&gt;Finally, change to your home directory and create a directory of your choice.&lt;/p&gt;

&lt;p&gt;Phewww! We're almost there...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-to-a-vm-instance-in-vs-code"&gt;
  &lt;/a&gt;
  Connect to a VM Instance in VS Code
&lt;/h2&gt;

&lt;p&gt;To SSH into your Multipass VM instance, navigate to the  &lt;strong&gt;"Open a Remote Window"&lt;/strong&gt; button on the bottom left corner in VS Code. &lt;/p&gt;

&lt;p&gt;This will open a dropdown menu. Click on &lt;strong&gt;"Connect Current Window to Host..."&lt;/strong&gt;. Next, select the alias or Host that you created earlier in the guide. VS Code will refresh the current window and establish an SSH connection. &lt;/p&gt;

&lt;p&gt;If it's not already open, expand the file explorer on the left pane and click on the green button called &lt;strong&gt;"Open Folder"&lt;/strong&gt;. Use the command palette to navigate to the directory you created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ujz6f65v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.josuebustos.com/static/vscode-ssh/ssh_connect.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ujz6f65v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.josuebustos.com/static/vscode-ssh/ssh_connect.gif" alt="shell"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you see this warning &lt;em&gt;"Visual Studio Code is unable to watch for file changes in this large workspace" (error ENOSPC)"&lt;/em&gt; It means Ubuntu doesn't have enough memory to watch file changes. You have to increase the limit to its max 524,288. Refer to the VS Code docs to &lt;a href="https://code.visualstudio.com/docs/setup/linux#_visual-studio-code-is-unable-to-watch-for-file-changes-in-this-large-workspace-error-enospc"&gt;workaround&lt;/a&gt; this issue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AND that's it! You've successfully SSH into a Multipass Ubuntu instance using VS Code.&lt;/p&gt;

&lt;p&gt;Enjoy prototyping the cloud!&lt;/p&gt;

&lt;p&gt;Until next time... &lt;/p&gt;

</description>
      <category>ubuntu</category>
      <category>ssh</category>
      <category>vscode</category>
      <category>multipass</category>
    </item>
    <item>
      <title>How to use MJS files in Node.js?</title>
      <author>Benny Neugebauer</author>
      <pubDate>Sun, 30 May 2021 18:23:55 +0000</pubDate>
      <link>https://dev.to/bennycode/how-to-use-mjs-files-in-node-js-23ep</link>
      <guid>https://dev.to/bennycode/how-to-use-mjs-files-in-node-js-23ep</guid>
      <description>&lt;p&gt;Today I want to show you how to import functions from *.mjs files. You can think of MJS as JavaScript code that is exported in a standardized module format. It's basically (M)odular (J)ava(S)cript. The standardization itself is called ECMAScript Modules (ESM).&lt;/p&gt;

&lt;p&gt;By default, the Node.js platform doesn't use ES modules but CommonJS, which is a different module formatting system. Fortunately, the Node.js team introduced the concept of ES modules back in 2017 with Node v8.9.0. At that time, you could run Node.js with an additional flag (&lt;code&gt;--experimental-modules&lt;/code&gt;) to make use of it.&lt;/p&gt;

&lt;p&gt;Since Node v13.2.0 the experimental flag is no longer required. It only takes a few steps now to use an ECMAScript module. Let me show you how to do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-create-a-es-module-mjs-file"&gt;
  &lt;/a&gt;
  1. Create a ES Module / MJS File
&lt;/h2&gt;

&lt;p&gt;Setting up an ES module is simple: Just create a file with the *.mjs extension and export your code using the &lt;code&gt;export&lt;/code&gt; keyword:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;myFunction.mjs&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-import-your-code"&gt;
  &lt;/a&gt;
  2. Import your code
&lt;/h2&gt;

&lt;p&gt;You can import an ES module with the &lt;code&gt;import&lt;/code&gt; keyword. If you work with TypeScript, you are probably already familiar with this syntax. You can import MJS files into ordinary JavaScript (JS) files:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;start.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./myFunction.mjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tip: Don't forget to add the *.mjs extension to you import statement. If you omit the file extension, Node.js will look for a .js file and report the following error:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;node:internal/process/esm_loader: internalBinding('errors').triggerUncaughtException&lt;br&gt;
Error [ERR_MODULE_NOT_FOUND]: Cannot find module&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#3-set-your-package-type-to-module"&gt;
  &lt;/a&gt;
  3. Set your package type to "module"
&lt;/h2&gt;

&lt;p&gt;That's probably the biggest change: You have to create a property with the name &lt;code&gt;type&lt;/code&gt; in your &lt;code&gt;package.json&lt;/code&gt; file. To use ES modules, it has to bet set to &lt;code&gt;module&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;package.json&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my-package"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node src/start.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.0"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you forgot to set the &lt;code&gt;type&lt;/code&gt; property, or if you set it to &lt;code&gt;commonjs&lt;/code&gt;, you will run into the following error:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(node:2346) Warning: To load an ES module, set "type": "module" in the package.json or use the .mjs extension.&lt;br&gt;
SyntaxError: Cannot use import statement outside a module&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#closing"&gt;
  &lt;/a&gt;
  Closing
&lt;/h2&gt;

&lt;p&gt;Now you know the basics of using MJS files. I tested my code listings with Node v15.14.0. I wish you good luck when trying it yourself! 🍀&lt;/p&gt;

</description>
      <category>node</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
