<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Find Quality Products at a Better Price From Sourcing Brokers</title>
      <author>AWs Architektur</author>
      <pubDate>Tue, 31 Aug 2021 14:32:54 +0000</pubDate>
      <link>https://dev.to/awsarchitektur/how-to-find-quality-products-at-a-better-price-from-sourcing-brokers-465p</link>
      <guid>https://dev.to/awsarchitektur/how-to-find-quality-products-at-a-better-price-from-sourcing-brokers-465p</guid>
      <description>&lt;p&gt;If you're in the business of starting and growing companies &lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Buying_agent"&gt;sourcing agent&lt;/a&gt;  out parts and components then you'll want to keep reading. In this article I'll cover a very important aspect of sourcing that goes on behind the scenes. After all, what's the point of sourcing the best materials if you don't get them shipped to you in good time for your manufacturing requirements? It goes something like this... Here's what happens:&lt;/p&gt;

&lt;p&gt;China, India, Mexico, Vietnam, Thailand, Korea, Philippines, and several other nations have become major exporters over the past five years &lt;a href="https://ed.ted.com/on/JSgCiaU9#digdeeper"&gt;https://ed.ted.com/on/JSgCiaU9#digdeeper&lt;/a&gt; . Many of these nations have been using their tremendous buying power to drive up the value of their currencies relative to the dollar of the United States, which has had a negative impact on American manufacturers who have attempted to ship goods into these markets. &lt;/p&gt;

&lt;h2&gt;Find Quality Products&lt;/h2&gt;

&lt;p&gt;This means that more foreign suppliers are shipping products in these countries which require special labeling or packaging requirements in order to ensure their acceptance by the different international clients that these countries have. Because of this worldwide trend, sourcing agents across the globe are becoming extremely important to the product sourcing process.&lt;/p&gt;

&lt;p&gt;A sourcing agent maintains a consistent and routine relationship with these international clients. They provide critical sourcing and quality inspection services, allowing the client to receive high quality products at the most competitive prices available. In this way, these agents help to protect the interests of the manufacturer as well as help to secure orders from international customers. In short, they help to make sure that the manufacturer of a given product doesn't encounter a problem getting the parts or materials it needs in the quantities necessary.&lt;/p&gt;

&lt;h2&gt;Find Chinese suppliers&lt;/h2&gt;

&lt;p&gt;In addition, a sourcing agent can also help a company find Chinese suppliers. In the past, companies had to do all of the sourcing research and sourcing themselves. For many companies, this was extremely time consuming and very difficult. But today, thanks to the Internet, companies can use a variety of tools to sift through the many China sourcing agents available, and in some cases find Chinese suppliers online.&lt;/p&gt;

&lt;p&gt;There is another aspect of sourcing agent that many companies don't think of. They may not know about the value of having a quality inspection done on any shipments that are sent from the United States into China. Quality inspections are becoming more important due to the increased pressures that China has placed on its domestic market. &lt;/p&gt;

&lt;h2&gt;Experiencing Sourcing Agents&lt;/h2&gt;

&lt;p&gt;Many companies are experiencing sourcing agent problems because they have chosen to do business with a company based in China that has little experience in the quality inspection field. The best solution for such a problem would be to find a company or supplier based in the United States that has experience in the quality inspection field and to partner with them on a one-time basis in the future.&lt;/p&gt;

&lt;p&gt;If a sourcing agent is unable to provide a high level of quality control, a company will not be able to ensure its clients that the goods they are sending to China are the highest possible quality. Without this inspection, it is possible for companies to send their raw materials to China, but if the raw materials are substandard, their products may not pass standard international quality controls. &lt;/p&gt;

&lt;p&gt;In the long run, partnering with an experienced sourcing agent who can provide a company with an excellent quality control inspection, as well as a detailed report on the status of each shipment, is essential to companies that are serious about doing business in China.&lt;/p&gt;

&lt;p&gt;Most sourcing agents that work in the United States are extremely experienced in sourcing products from China. Many of these agents are specialized in only one area, such as electronic components or sanitary supervision. It is not uncommon for sourcing agents to specialize in a particular niche, such as medical equipment or pesticides. This means that if a company needs to source medical devices or pesticides from China, it is possible to find specialized agents who know all of the necessary standards and regulations to meet the needs of these businesses.&lt;/p&gt;

&lt;p&gt;In conclusion, sourcing from China presents many opportunities for companies in the United States to serve their clients and provide them with quality products at a lower cost. However, sourcing brokering companies must work with an effective sourcing agent that can provide them with a detailed and accurate assessment of each shipment, along with a detailed report on each specific item of equipment. &lt;/p&gt;

&lt;h2&gt;Final Words&lt;/h2&gt;

&lt;p&gt;It is also important for a sourcing agent to work with its clients on an individual basis, as well as providing personalized services to ensure that all shipments are handled according to each clients' individual specifications. These agencies have the experience and expertise to help companies manage their operations effectively and ensure that the goods sent to China are exactly what their clients need.&lt;/p&gt;

</description>
      <category>sourcingagent</category>
      <category>agent</category>
      <category>sources</category>
      <category>business</category>
    </item>
    <item>
      <title>Software shenanigans</title>
      <author>Agustín Tomas Larghi</author>
      <pubDate>Tue, 31 Aug 2021 13:49:31 +0000</pubDate>
      <link>https://dev.to/4gus71n/software-shenanigans-1n94</link>
      <guid>https://dev.to/4gus71n/software-shenanigans-1n94</guid>
      <description>&lt;p&gt;I've decided to start a new series of posts ("Software shenaningans") oriented to soft-skill improvements, communication, how to coordinate things with your team, the kind of things that - opposite to software technologies - won't get outdated.&lt;/p&gt;

&lt;p&gt;Since the pandemic started, I've noticed many companies have turned onto remote work, yet many people are not used to working remotely. So I thought about writing a quick post about a few things I've learned to improve productivity when working remotely.&lt;/p&gt;

&lt;p&gt;FYI, I've been working remotely most of my career, even before COVID, so most of the things I'm going to talk about here come from my remote work experience.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sX9ZJlM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6hfp5jcfexoezkuw9ka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sX9ZJlM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6hfp5jcfexoezkuw9ka.png" alt="Communication Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've seen many &lt;em&gt;talented&lt;/em&gt; engineers fail because of communication issues, sometimes because they can't communicate their ideas properly, but more often than not it is because of their own insecurities. I've seen engineers get anxious over having to ping a manager, schedule a meeting, or do an &lt;code&gt;@here&lt;/code&gt; on the Slack general channel. I'd like to think that I'm very loud on Slack, I'm not afraid of hitting that &lt;code&gt;@here&lt;/code&gt; to get people in sync, and &lt;em&gt;no one ever has slapped my wrist by doing so&lt;/em&gt;. No one is ever going to yell at you because you are trying to express your ideas.&lt;/p&gt;

&lt;p&gt;If you are an over-thinker here’s a simple diagram to help you figure things out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HpDJ_vH6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lr0j93nveg8wwu8v20mj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HpDJ_vH6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lr0j93nveg8wwu8v20mj.png" alt="Overthinker Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's go through some examples:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0YKOKqs3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x64bokoc7kn1xx5wfius.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0YKOKqs3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x64bokoc7kn1xx5wfius.png" alt="Slack Example 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is this okay?&lt;/strong&gt; 🙅‍♂️ No, don't ping the whole channel just to say hello. Is it okay - and I encourage - being cheerful and polite, but don't disrupt people unnecessarily. Thinks that as soon as you do an &lt;code&gt;@here&lt;/code&gt; you will have most people on that channel context switch from whatever they were doing onto Slack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DtiMlHwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1k58qfql86iyewxzjnt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DtiMlHwD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1k58qfql86iyewxzjnt.png" alt="Slack Example 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is this okay?&lt;/strong&gt; 🙅‍♂️ No, if things are getting on 🔥 ping everyone, the faster you all address the issue, the better. Again, think that most people when they look at Slack they will see something like this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8lvvOAxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hu0kc820uh509fbcj8lo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8lvvOAxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hu0kc820uh509fbcj8lo.png" alt="Slack Example 2 Channel Highlight"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All channels highlighted all the time, unless you ping people directly, chances are they won't notice what you just write until the end of the day 😕.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SUrtEfqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76p8pqt5cavm7jp5jgss.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SUrtEfqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76p8pqt5cavm7jp5jgss.png" alt="Slack Example 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is this okay?&lt;/strong&gt; 👍 Yes, the same thing we were talking about before, if you need someone to take immediate action on something that is blocking you, ping that person directly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yet-more-slack-tips"&gt;
  &lt;/a&gt;
  Yet More Slack tips
&lt;/h3&gt;

&lt;p&gt;1️⃣ Keep 🧵 conversations&lt;/p&gt;

&lt;p&gt;If you don't keep the conversation flow tidy on Slack, things can get messy. For example, picture you jump on the &lt;code&gt;#engineering&lt;/code&gt; channel, and you see you are 30-something messages behind this convo 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EPw6Mm-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnp055bkv02pt1369qs8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EPw6Mm-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnp055bkv02pt1369qs8.png" alt="More Slack Tips 30 Something Convo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not easy to catch up, right? For new people joining this conversation, it may be hard to get the context of what's going on when you don't know where the conversation &lt;em&gt;started&lt;/em&gt;. And it will very likely take you a considerable amount of time until you do catch up. Plus, things can get muddy if other people are talking about different things.&lt;/p&gt;

&lt;p&gt;Keeping &lt;strong&gt;threaded&lt;/strong&gt; conversations may mitigate this issue 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aLrM1juV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7o9uhwzj8v7eyict99ey.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aLrM1juV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7o9uhwzj8v7eyict99ey.png" alt="Keep Threaded Convos"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, you can later link this conversation to &lt;code&gt;Jira&lt;/code&gt;/&lt;code&gt;Azure&lt;/code&gt;/&lt;code&gt;Trello&lt;/code&gt; tickets - or whatever CMS your team uses - for future reference. Same for the PRs, you can link the Slack conversations so whoever reviews your PR can have a little bit of context about what the changes are for.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R8ByJGDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nw6mj5auxblirahpi9em.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R8ByJGDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nw6mj5auxblirahpi9em.png" alt="PR Tempalte"&gt;&lt;/a&gt;&lt;br&gt;
I'm a big fan of using PR templates, and linking the Slack convos to the PRs gives much more context to the person doing the review.&lt;/p&gt;

&lt;p&gt;2️⃣ Using the &lt;code&gt;/remind&lt;/code&gt; command&lt;/p&gt;

&lt;p&gt;Usually, on my day-to-day, I do almost all my work following the reminders of the day before. The &lt;code&gt;/remind&lt;/code&gt; me command is quite helpful to keep track of things.&lt;/p&gt;

&lt;p&gt;Let's say you were discussing something with someone and you need to follow up later 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D0rlM0IP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ae0rrrqherm9pdro9u8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D0rlM0IP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ae0rrrqherm9pdro9u8f.png" alt="RemindMe Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can target the &lt;code&gt;/remind&lt;/code&gt; command to different people or channels, not just to yourself. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dFQXSW2G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1hmfzjhv2i6rvhd9pms.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dFQXSW2G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1hmfzjhv2i6rvhd9pms.png" alt="RemindMe Example 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For me this is &lt;em&gt;the&lt;/em&gt; most powerful tool on Slack.&lt;/p&gt;

&lt;p&gt;3️⃣ Grouping channels into &lt;em&gt;sections&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As we were saying before, most of us, when we open Slack in the morning, the first thing we see is just a humongous list of highlighted channels. Some of them we don't even care - for example, a &lt;code&gt;#random&lt;/code&gt; channel just for fun, channels that are completely unrelated to the work we do, etc.&lt;br&gt;
So instead of having to waste time going through each channel, sort out the channels by &lt;em&gt;priority&lt;/em&gt; using sections.&lt;/p&gt;

&lt;p&gt;Something like this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OE_xZ7zw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e81njem3m1qdyzligs26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OE_xZ7zw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e81njem3m1qdyzligs26.png" alt="Sections Before"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Becomes this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D-wCIY-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gri3v7xkq3yp34q3mfn9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D-wCIY-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gri3v7xkq3yp34q3mfn9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That way you can check the truly important channels first, and if you have time, go through the rest later.&lt;/p&gt;

&lt;p&gt;4️⃣ Rule of thumb&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Avoid DMs as much as possible&lt;/strong&gt;. Try to post on public channels as often as possible, in my experience, teams who communicate through public channels perform better than the ones who rely mostly on DMs. Think that if you are discussing something with someone else via a private DM 🅰️ other people won't be able to catch up with what you are talking about, you may be talking about some technical adjustments in the back-end with just one single engineer, what if some other engineer had something to say about but he couldn't because he didn't know about this conversation? 🅱️ Also, you cannot link or reference private DMs, if someone new joins the DM he won't be able to see any previous conversation.&lt;/p&gt;

&lt;p&gt;Finally, speaking on public channels encourages people to speak up, be more transparent, and it removes that feeling that some people have of--"Oh, I better not talk about this &lt;em&gt;here&lt;/em&gt; so I don't open a can of worms!"&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Always try to ping people directly&lt;/strong&gt;. It is unlikely that people will reply immediately to you if you don't ping them directly 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fDNVQiH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1e85xdzs7txa0sr9a9a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDNVQiH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1e85xdzs7txa0sr9a9a.png" alt="Ping Directly Example"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xICtHXGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkl2at0bbht73cps6t57.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xICtHXGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkl2at0bbht73cps6t57.png" alt="Email Etiquette"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've seen so many people so quick to jump the 🔫 and hit the SEND button way too soon when sending emails. A bad email can cause more confusion than anything else, and if the &lt;em&gt;tone&lt;/em&gt; set in the email sounds &lt;em&gt;rude&lt;/em&gt; it can complicate things even further. So, I'll just drop some tips I've found useful:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read your emails aloud before you send them.&lt;/strong&gt; The &lt;em&gt;tone&lt;/em&gt; in an email is key. I remember once I had this lengthy email thread going on with a back-end engineer from a contractor company working with us. We would &lt;em&gt;only&lt;/em&gt; talk via email, so that made things even more difficult. And these guys were working in a completely opposite time zone than ours, so it was basically sending an email, and waiting for the response to come back the next day. I'm not going to lie, I was getting annoyed by the whole situation 😅.&lt;br&gt;
The whole thread was about us asking for some credentials to use an SDK in the front-end, and we were going back and forth with the back-end guys because they would provide the credentials but this wouldn't work as expected. So at some point, I replied something like this 👇&lt;/p&gt;

&lt;p&gt;&lt;em&gt;John, I know this is doable because I've seen it in the documentation here: &lt;a href="http://somelink-to-some-documentation.com"&gt;http://somelink-to-some-documentation.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Of course, one minute after hitting send, I'm pinged via Slack by one of my Engineer Managers - and rightly so - and he asks me to read my response aloud, and then I realize that I'd completely dropped the ball. The tone was &lt;em&gt;rude&lt;/em&gt;, and it didn't get us any further into solving the issue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Double check names&lt;/strong&gt;. Many people, myself included, can get annoyed when other people misspell their names. Just take a minute to double-check that you have correctly written the name of the person you are addressing. Once, in one of my previous jobs, I was helping a new hire, a new Android engineer getting on board. We would talk over email because he didn't have his Slack credentials set yet. I usually go that extra mile when onboarding someone because I want them to have a pleasant experience. But this person would keep misspelling my name on every email. Augustin instead of &lt;em&gt;Agustin&lt;/em&gt;. So, I let the first email pass. Then in the second email, I bold my signature so he could see my name. The same thing again, so I finally add a PS on the third email -- "FYI my name spells Agustin 🙂". So, take that extra minute to double-check names. Don't skip accents on the letters. Otherwise, it looks as if you don't care about the email content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you are not a native speaker, use some tools to enhance your grammar.&lt;/strong&gt; A text with spelling mistakes won't be taken as seriously as one that's not. There are some great tools out there to avoid common grammar mistakes. Like &lt;a href="https://www.grammarly.com"&gt;Grammarly&lt;/a&gt; or &lt;a href="http://gingersoftware.com/"&gt;Ginger&lt;/a&gt;. Both are great tools to prevent those little details, that especially us who are not native English speakers, often do.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OSG5DvMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8ed5e1omri8ajfc5yxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OSG5DvMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8ed5e1omri8ajfc5yxg.png" alt="Introduction Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A good intro is a nice way to start a new job with the right foot. I always encourage people to present themselves when they are about to join a new team, just doing a quick intro on the Slack &lt;code&gt;#general&lt;/code&gt; 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WTDkbYmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/631emsyoz59kyt0j0aev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WTDkbYmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/631emsyoz59kyt0j0aev.png" alt="Slack Intro"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I would even recommend that you ask your manager if it would be okay to send an email to your whole &lt;em&gt;team&lt;/em&gt; presenting yourself more in detail 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K2P1b_fv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic8tovfhi7o66gcivkbq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K2P1b_fv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic8tovfhi7o66gcivkbq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you know, try to be &lt;em&gt;personal&lt;/em&gt;, don't be like -- "Hi, I'm Agus and I like coding, and coding is also my hobby". I don't think anyone has so little going on in their lives. Also, sometimes using emojis helps to set the &lt;em&gt;emotional tone&lt;/em&gt; in a message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_c0e8At--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzdunsgt6bdghtnepa4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_c0e8At--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzdunsgt6bdghtnepa4j.png" alt="Meeting Etiquette"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1️⃣ &lt;strong&gt;Always have your camera turned on&lt;/strong&gt;. Seeing someone else's face on the screen helps people connect more, and it also helps you being taken more seriously by your teammates. I mean, if someone has their camera turned off, you don't know what they are doing, right? Are they paying attention to what you're saying? Are they watching Netflix? &lt;br&gt;
If you feel uncomfortable by having 50 people stare at you through your webcam during a meeting, &lt;strong&gt;just switch tabs&lt;/strong&gt;. I often do that if I have to talk at a meeting where I know there's going to be a lot of people, I just switch tabs so I don't have to see the amount of users or anything else, but I keep my cam turned on so everyone else can see me.&lt;br&gt;
It is okay if you don't want to turn on your webcam during a meeting because you're having lunch - although I don't recommend having lunch in front of your laptop, it's not healthy 🙂 - or because of something else. But do so once &lt;em&gt;you've become comfortable with your team&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;2️⃣ &lt;strong&gt;If you are in a noisy environment use audio filtering.&lt;/strong&gt;You can buy a headset with noise filtering included or use audio filtering software such as &lt;a href="https://krisp.ai"&gt;Krisp&lt;/a&gt;. Most people won't even tell you if you have noise in the background out of shyness or because they think it would be disrespectful. So, make sure no one has to try to figure out what you are saying behind the barking of your 🐕. &lt;/p&gt;

&lt;p&gt;3️⃣ &lt;strong&gt;If you need to say something, but feel uncomfortable interrupting people, use the chat section&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5wLZGEmI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhx0579dxrmbc8jvtnvc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5wLZGEmI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhx0579dxrmbc8jvtnvc.png" alt="Zoom Chat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4️⃣ &lt;strong&gt;Watch out for the "radio silence" during conversations.&lt;/strong&gt; When you start working with a new team where each member knows little to nothing about each other, or if you start working with a team that isn't used to work remotely, you may run into those uncomfortable situations where someone asks a question, a minute goes by, and no one answers. Then, &lt;em&gt;what can we do to solve these situations?&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;For example, let's say we are on a Zoom call, and one of the front-end engineers asks a question like:-&lt;em&gt;" How is the UX supposed to look like when we navigate into this section, and there's no internet connectivity?"&lt;/em&gt; Let's say 10 seconds go by then:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1️⃣ If you think you know to answer the question, answer it. It doesn't matter if you think it would be a dumb answer, it will prompt someone else to chime in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2️⃣ Redirect the question to someone who may know how to answer the question. For example, if a front-end engineer wants to know how to implement the UX for a specific edge-case scenario, redirect that question to one of the designers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3️⃣ If no one knows how to answer the question, they are taking too much time, or just going back and forth, then park the convo and propose to follow up on a Slack thread later.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Something else to keep in mind is that these situations may be a direct result of a lack of &lt;em&gt;ownership&lt;/em&gt; across team members. It takes time and effort to boost people into taking more ownership, this is something that the team achieves through regular 1:1 meetings and giving honest feedback to each other.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HpKdm4xb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxt5otl6aiuc9yrslvt2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HpKdm4xb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxt5otl6aiuc9yrslvt2.png" alt="TLDR Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reach out to people. Don't overthink about sending messages or scheduling a meeting with your teammates. That's what we are paid to do.&lt;/li&gt;
&lt;li&gt;Don't be an emotionless drone. Talk to people over Slack as if you were in a real office.&lt;/li&gt;
&lt;li&gt;Step up, have ownership of the product. Even if sometimes you think it is not your responsibility to lead some initiative or organize something, just do it. It will make everyone’s work - including yours - easier in the future.&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Which is Best Partner for eCommerce Shipping in India
</title>
      <author>pavankumars178</author>
      <pubDate>Tue, 31 Aug 2021 13:38:15 +0000</pubDate>
      <link>https://dev.to/pavankumars178/which-is-best-partner-for-ecommerce-shipping-in-india-15j2</link>
      <guid>https://dev.to/pavankumars178/which-is-best-partner-for-ecommerce-shipping-in-india-15j2</guid>
      <description>&lt;p&gt;&lt;strong&gt;Overview of ecommerce shipping in India&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ecommerce businesses owe a big chunk of their growth to the efforts of the ecommerce shipping industry in India. Ecommerce shipping has become a vast industry that provides numerous specialised and niche shipping services which help ensure a smoother delivery experience. Faster and more efficient delivery is key to ensuring customers are happy and keep coming back. We’ll be walking you through the best of the best for &lt;a href="https://www.clickpost.ai/blog/ecommerce-shipping"&gt;ecommerce shipping in India&lt;/a&gt; and how to select the best partner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Choose the Best Partner for Ecommerce Shipping in India&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With over 150+ different shipping partners located all across India, choosing the best partner for ecommerce shipping needs is like finding a needle in a haystack. However, knowing your shipping needs can help ensure you pick the right ones. Take a good look at what your shipping strategy needs to be. You’ll find the following elements take priority when it comes to ecommerce shipping needs. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Pin Code Serviceability&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;The best partner in ecommerce shipping is one that serves the pin codes of your choice at the volume you require.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Tech capabilities&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;A good shipping partner is equipped with the latest tech to enable real-time tracking and automated shipping services. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Shipping Services&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Different shipping companies offer different services like express delivery, hyperlocal delivery and customised packaging which can improve delivery experience.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Cost&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The cost of shipping should ideally be inclusive of various shipping services so as to reduce losses and maintain profitability. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Top 10 Best Partner for eCommerce Shipping in India&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that you’ve mapped out your core shipping strategy, you’ve got a clearer picture of what you need from a shipping partner. However, it’s also important to take a good look at the range of services that different shipping companies offer. To that end, we’ve compiled a brief list of the top 10 best partners for ecommerce shipping in India. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Aramex&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Founded in 1997 and acquired by Delhivery to operate in India, Aramex is a UAE-based global carrier that offers express delivery services and COD (cash-on-delivery) services.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Blue Dart&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since its launch in 1983, Blue Dart has become one of the leading global shipping partners. It has a reach of 35000+ pin codes and offers specialised shipping services like weather resistant packaging.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Delhivery&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Delhivery began its journey in India in 2011 and provides numerous shipping services like express delivery, specialised order handling, and bulk order shipping. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. DHL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;DHL has been operational since 1969 and is the best shipping partner if you want to offer environmentally-friendly shipping to customers and reduce the wastage of delivery.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Ecom Express&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Launched in 2012, Ecom Express caters specifically to ecommerce businesses with a reach of 27000+ pin codes and offers express shipping guaranteed to be completed in 72 hours. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. EKart&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;In 2009, Ekart was started by FlipKart to handle shipping services for ecommerce businesses, providing next-day and same-day shipping to customers across 3800+ pin codes. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. FedEx&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Since 1971, FedEx has been providing shipping services globally and has a reach of 19000+ pin codes. Heavyweight, fragile, and dangerous items can be shipped with FedEx. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Safe Express&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Safe Express has been providing safe and secured shipping services to ecommerce businesses in India since 1995. It offers security, surveillance and better tracking using GPRS tech. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. ShadowFax&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Shadowfax’s journey began in India in 2015 and provides express shipping, hyperlocal delivery and reverse shipping services across a reach of 7000+ pin codes. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. XpressBees&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;XpressBees is another company that was established in 2015 and caters to ecommerce shipping exclusively. In addition to express delivery, this company aids with customs clearances across 13000+ pin codes. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;The best ecommerce business must have this best partner for ecommerce shipping in order to fulfill customer demands and maximise order fulfillment. From speedy shipping services to use of advanced technology to optimise order tracking and secure delivery, the efforts of the ecommerce shipping industry have taken online shopping to the next level. With the best partner for shipping, you can take your ecommerce business to the next level. &lt;/p&gt;

</description>
      <category>ecommerce</category>
      <category>shipping</category>
    </item>
    <item>
      <title>I just made my first $1 on the Internet!!! 😲💸</title>
      <author>Hugo Montenegro</author>
      <pubDate>Tue, 31 Aug 2021 13:34:33 +0000</pubDate>
      <link>https://dev.to/hm/i-just-made-my-first-1-on-the-internet-12bk</link>
      <guid>https://dev.to/hm/i-just-made-my-first-1-on-the-internet-12bk</guid>
      <description>&lt;p&gt;I couldn't be happier right now.&lt;/p&gt;

&lt;p&gt;I've been working on &lt;a href="http://www.namy.ai"&gt;www.namy.ai&lt;/a&gt; for a while, and yesterday I finally finished making &amp;amp; training an AI model that I was happy with, and deployed it to live. Then I made a &lt;em&gt;small&lt;/em&gt; announcement on Twitter (~300 followers) about it.&lt;/p&gt;

&lt;p&gt;Some people visited and entered prompts, loitered around, but I didn't see anyone actually buy a domain. "Oh well" I said, I still needed to improve my SEO anyways (barely have done anything on that front😅)&lt;/p&gt;

&lt;p&gt;BUT TODAY I log into my dashboard, and I see:&lt;br&gt;
balance: €0.99 EUR&lt;/p&gt;

&lt;p&gt;😲&lt;/p&gt;

&lt;p&gt;It finally happened!!!!!! My FIRST internet money that I earned on my own!!!!&lt;/p&gt;

&lt;p&gt;I know it's not a lot and that I have a long way to go (and just making twitter posts is not sustainable. I need to improve SEO.), but damn does it feel good!&lt;/p&gt;

&lt;p&gt;It's definitely validating that someone, somewhere paid money for something you built. Great feeling!&lt;/p&gt;

&lt;p&gt;Anyways I just wanted to share this little victory with the community here. Wish you all the best!&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>saas</category>
      <category>ai</category>
      <category>showdev</category>
    </item>
    <item>
      <title>How I structure my React projects</title>
      <author>Lars Wächter</author>
      <pubDate>Tue, 31 Aug 2021 13:24:23 +0000</pubDate>
      <link>https://dev.to/larswaechter/how-i-structure-my-react-projects-jii</link>
      <guid>https://dev.to/larswaechter/how-i-structure-my-react-projects-jii</guid>
      <description>&lt;p&gt;This post was originally published on my &lt;a href="https://larswaechter.dev/blog/react-project-structure/"&gt;blog&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;It's been quite a while since I wrote an &lt;a href="https://larswaechter.dev/blog/nodejs-rest-api-structure/"&gt;article&lt;/a&gt; about how I structure my Node.js REST APIs. The article covered the approach of designing a well organized and maintainable folder structure for Node.js applications.&lt;/p&gt;

&lt;p&gt;So today I don't want to talk about Node.js APIs, but about the architecture of React applications and answer the same question from the previous article a second time:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What should the folder structure look like?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And again: there’s &lt;strong&gt;no perfect or 100% correct&lt;/strong&gt; answer to this question, but there are tons of other articles discussing this one on the internet too. This folder structure is also partly based on multiple of them.&lt;/p&gt;

&lt;p&gt;One important thing to mention is that React does not really tell you how to organize your project, except the fact that you should avoid too much nesting and overthinking. To be exact they say: (&lt;a href="https://reactjs.org/docs/faq-structure.html"&gt;Source&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;React doesn’t have opinions on how you put files into folders. That said there are a few common approaches popular in the ecosystem you may want to consider.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take a look at the linked source where you can read more about those common approaches. They won't be further discussed in this article.&lt;/p&gt;

&lt;p&gt;The following structure and architecture is one that has proven maintainable and reliable for me. It might give you a help for designing your own project. Keep in mind that the following architecture is based on a application bootstrapped with &lt;a href="https://github.com/facebook/create-react-app"&gt;create-react-app&lt;/a&gt; and written in &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-root"&gt;
  &lt;/a&gt;
  Directory: root
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── node_modules
├── public
├── src
├── package.json
└── package-lock.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This structure is nothing special and shouldn’t be new to you. It’s actually a basic &lt;a href="https://github.com/facebook/create-react-app"&gt;create-react-app&lt;/a&gt; setup. The interesting part here is the content of the &lt;code&gt;src&lt;/code&gt; folder which this article is about.&lt;/p&gt;

&lt;p&gt;So what do we have in here?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── api
├── components
├── i18n
├── modules
├── pages
├── stores
├── tests
├── utils
├── index.js
├── main.js
└── style.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the application is primarily split into eight directories. From here on, we'll go top-down through the directories and examine each one.&lt;/p&gt;

&lt;p&gt;Let’s start with the &lt;code&gt;api&lt;/code&gt; directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srcapi"&gt;
  &lt;/a&gt;
  Directory: src/api
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── api
│   ├── services
│   │   ├── Job.js
│   │   ├── User.js
│   ├── auth.js
│   └── axios.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;api&lt;/code&gt; directory contains all services that take care of the communication between the React application (frontend) and an API (backend). A single service provides multiple functions to retrieve data from or post data to an external service using the HTTP protocol.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;auth.js&lt;/code&gt; provides functions for authentication and &lt;code&gt;axios.js&lt;/code&gt; contains an &lt;a href="https://www.npmjs.com/package/axios"&gt;axios&lt;/a&gt; instance including interceptors for the outgoing HTTP requests and incoming responses. Moreover, the process of refreshing JWTs is handled in here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srccomponents"&gt;
  &lt;/a&gt;
  Directory: src/components
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── components
│   ├── Job
│   │   ├── Description.js
│   │   └── Preview.js
│   └── User
│   │   ├── Card.js
│   │   ├── Create.js
│   │   └── List.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're already familiar with React you should know that it's mainly component based. The components are actually the heart of every React application. The whole application, at least the presentational view, is built of many small components.&lt;/p&gt;

&lt;p&gt;So what is a component? &lt;a href="https://reactjs.org/docs/components-and-props.html"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Imagine you have a website like Twitter or Facebook. The large website is made of many smaller pieces (components) that can be Buttons, Inputs or Widgets for example. Those pieces are put together to build ever more complex and larger ones. Each component has its own lifecyle and state management, whereby you can share a component's state with other ones.&lt;/p&gt;

&lt;p&gt;Components are reused multiple times within the application to save the developer from writing redundant code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://de.wikipedia.org/wiki/Don%E2%80%99t_repeat_yourself"&gt;Don't repeat yourself (DRY)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Splitting the codebase into multiple components is not just a "React thing". It's a common pattern in software engineering to simplify the development process and the maintenance later on.&lt;/p&gt;

&lt;p&gt;In React, a component is mostly a simple JavaScript function or a class. Usually, I create a new file for each single component. In some rare cases I group multiple of them (functions or classes) into a single file. Imagine a &lt;code&gt;UserList.js&lt;/code&gt; component which renders multiple elements of &lt;code&gt;UserListItem&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserListItem&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;))}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserListItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, it makes sense to combine both into one file. Further, &lt;code&gt;UserListItem&lt;/code&gt; is probably not even used by any other component than &lt;code&gt;UserList&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Beside the components themselves, you can also add their stylesheets or tests to this directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srci18n"&gt;
  &lt;/a&gt;
  Directory: src/i18n
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── i18n
│   ├── de.json
│   └── en.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;i18n&lt;/code&gt; stands for &lt;strong&gt;internationalization&lt;/strong&gt; and takes care of the language support of the application. The including JSON files are basically objects containg fixed constants as keys and their associated translations as values.&lt;/p&gt;

&lt;p&gt;Therefore, the keys should be equal for each language file. Only the values (translations) differ from each other. You can easily query those language files later on by writing your own custom hook or component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srcmodules"&gt;
  &lt;/a&gt;
  Directory: src/modules
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── modules
│   ├── logger.js
│   └── session.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This directory includes some global modules that might be used for logging or as wrapper for the browser's &lt;code&gt;LocalStorage&lt;/code&gt; for example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srcpages"&gt;
  &lt;/a&gt;
  Directory: src/pages
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── pages
│   ├── Home
│   │   ├── components
│   │   │   ├── Dashboard.js
│   │   │   └── Welcome.js
│   │   └── index.js
│   ├── Login.js
│   └── Profile.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;pages&lt;/code&gt; directory includes the &lt;code&gt;react-router-dom&lt;/code&gt; paths accessed while navigating through the application. Here, we collect multiple components into a single larger one to display a complete page view.&lt;/p&gt;

&lt;p&gt;A page might contain its own &lt;code&gt;component&lt;/code&gt; directory which includes "local" components that are only used on this page. For complex pages with a deep component tree you might want to check out the &lt;a href="https://reactjs.org/docs/context.html"&gt;React Context API&lt;/a&gt; which makes it much easier to pass props along the tree and to handle a global "page state".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srcstores"&gt;
  &lt;/a&gt;
  Directory: src/stores
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── stores
│   ├── language.js
│   └── user.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This directory includes all global React states that can be accessed from any component within the application. While &lt;a href="https://react-redux.js.org/"&gt;Redux&lt;/a&gt; is probably the most popular solution for managing global state I prefer to use &lt;a href="https://github.com/pmndrs/zustand"&gt;zustand&lt;/a&gt;. It's very easy to get started with and its API is really straightforward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srctests"&gt;
  &lt;/a&gt;
  Directory: src/tests
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── tests
│   ├── language.test.js
│   └── utils.test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;tests&lt;/code&gt; directory includes tests that do not belong to certain components. This could be tests for the implementation of algorithms for example. Moreover, I validate and compare the keys of the language files I mentioned above to make sure I did not miss any translation for a given language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-srcutils"&gt;
  &lt;/a&gt;
  Directory: src/utils
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── utils
│   ├── hooks
│   │   ├── useChat.js
│   │   ├── useOutsideAlerter.js
│   │   ├── useToast.js
│   ├── providers
│   │   ├── HomeContextProvider.js
│   │   ├── ToastContextProvider.js
│   ├── colors.js
│   ├── constants.js
│   ├── index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have a bunch of utilities like: custom hooks, context providers, constants and helper functions. Feel free to add more stuff here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#all-together"&gt;
  &lt;/a&gt;
  All together
&lt;/h2&gt;

&lt;p&gt;Last but not least a complete overview of the project structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-project
├── api
│   ├── services
│   │   ├── Job.js
│   │   ├── User.js
│   ├── auth.js
│   └── axios.js
├── components
│   ├── Job
│   │   ├── Description.js
│   │   └── Preview.js
│   └── User
│   │   ├── Card.js
│   │   ├── Create.js
│   │   └── List.js
├── i18n
│   ├── de.json
│   └── en.json
├── modules
│   ├── logger.js
│   └── session.js
├── pages
│   ├── Home
│   │   ├── components
│   │   │   ├── Dashboard.js
│   │   │   └── Welcome.js
│   │   └── index.js
│   ├── Login.js
│   └── Profile.js
├── stores
│   ├── language.js
│   └── user.js
├── tests
│   ├── language.test.js
│   └── utils.test.js
├── utils
│   ├── hooks
│   │   ├── useChat.js
│   │   ├── useOutsideAlerter.js
│   │   ├── useToast.js
│   ├── providers
│   │   ├── HomeContextProvider.js
│   │   ├── ToastContextProvider.js
│   ├── colors.js
│   ├── constants.js
│   ├── index.js
├── index.js
├── main.js
└── style.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it! I hope this is a little help for people who don't know how to structure their React application or didn’t know how to start. Feel free to give any suggestions.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>Automating Flutter App Versioning Using Fastlane Plugin</title>
      <author>RUBICON</author>
      <pubDate>Tue, 31 Aug 2021 13:23:26 +0000</pubDate>
      <link>https://dev.to/rubicon_dev/automating-flutter-app-versioning-using-fastlane-plugin-1d6</link>
      <guid>https://dev.to/rubicon_dev/automating-flutter-app-versioning-using-fastlane-plugin-1d6</guid>
      <description>&lt;p&gt;If you’ve ever developed mobile applications and published them to their stores, then you are aware of the specific rules of versioning an app. Those rules revolve around two properties: App versioning and incrementing build number.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-our-facts-right"&gt;
  &lt;/a&gt;
  Getting our Facts Right
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#app-versioning"&gt;
  &lt;/a&gt;
  App Versioning
&lt;/h4&gt;

&lt;p&gt;Versioning is a critical component of an app upgrade and maintenance strategy.&lt;/p&gt;

&lt;p&gt;On iOS, the app version is presented by the CFBundleShortVersionString key that must correspond to &lt;a href="https://semver.org/"&gt;semantic versioning&lt;/a&gt;. This key is a machine-readable string composed of one to three period-separated integers, such as 10.14.1. The string can only contain numeric characters (0-9) and periods.&lt;br&gt;
Each integer provides information about the build version in the format [Major].[Minor].[Patch]:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Major: A major revision number.&lt;/li&gt;
&lt;li&gt;Minor: A minor revision number.&lt;/li&gt;
&lt;li&gt;Patch: A maintenance release number.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleversion"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On Android, the app version is presented by the versionName inside of the build.gradle file. Android doesn’t enforce any rules when it comes to specifying the name.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#build-number"&gt;
  &lt;/a&gt;
  Build number
&lt;/h4&gt;

&lt;p&gt;Build number (CFBundleVersion on iOS, versionCode on Android) is an identificator that is used only to determine whether one version of an app is more recent than the other, with the higher number indicating a more recent version. Both Google Play Store and Apple AppStore use the build number to protect against downgrades by preventing users from installing an app with a lower build number than the version currently installed on their device. On Android, that number is an integer, but on iOS, that number can be presented both as an integer or as a semantic version.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flutters-way-of-handling-stuff"&gt;
  &lt;/a&gt;
  Flutter's Way of Handling Stuff
&lt;/h3&gt;

&lt;p&gt;The Flutter team has decided to handle this very neatly; they have a property in pubspec.yaml called version that follows this pattern: {major}.{minor}.{patch}+{version}. Therefore, in order to publish our app with the app version of 1.2.4 and build number of 5, our pubspec.yaml would have a version property that looks like this: version: 1.2.4+5. The next time the application goes through the build process, those values are applied. However, the question is, how we can automate this whole process of versioning?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#flutterversionmanager-plugin-for-fastlane-the-fun-part"&gt;
  &lt;/a&gt;
  flutter_version_manager plugin for Fastlane - The Fun Part!
&lt;/h4&gt;

&lt;p&gt;Fastlane is the easiest way to build and release mobile apps. It has been used widely by the mobile application developers community. It’s written in Ruby, is open source and it has great support for developing your own custom plugins. That being said, I present to you the flutter_version_manager plugin for Fastlane:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rubiconba/fastlane-plugin-flutter-version-manager"&gt;https://github.com/rubiconba/fastlane-plugin-flutter-version-manager&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;This approach is very subjective as this is the method I use to handle versioning of an app.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This plugin heavily resides on having a git repository and at least one commit as build number is applied through timestamp of HEAD commit. By leveraging the power of git, we no longer have to worry about incrementing versionCode/CFBundleVersion. As for the app version, version.yml file that we had to create manually should be used as a single source of truth. Now, there are a couple of ways of handling an app version using this plugin:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Increment a version manually and call -apply on the fastlane plugin. -applycommand will automatically apply all the changes to pubspec.yaml&lt;/li&gt;
&lt;li&gt;Use -major, -minor, or -patch to bump semantic version. It automatically calls -apply and updates the pubspec.yaml.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That being said, a DevOps engineer has power over versioning. For example, he may create a patch pipe that runs on patch branch that will call deploy_as_patch lane which automatically bumps patch version and deploys the latest version. You can find an example of Fastfile &lt;a href="https://github.com/rubiconba/fastlane-plugin-flutter-version-manager/blob/master/fastlane/Fastfile"&gt;here&lt;/a&gt;. Full documentation is available in a &lt;a href="https://github.com/rubiconba/fastlane-plugin-flutter-version-manager"&gt;git repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This plugin is open-source and any contributions to it are more than welcome. Happy DevOpsing! ^^&lt;/p&gt;




&lt;p&gt;Original blog post: &lt;a href="https://www.rubicon-world.com/blog/2020/09/automating-flutter-app-versioning-using-fastlane-plugin/"&gt;Automating Flutter App Versioning Using Fastlane Plugin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>mobile</category>
      <category>flutter</category>
      <category>devops</category>
      <category>fastlane</category>
    </item>
    <item>
      <title>ES6 - A beginners guide, following my own learning</title>
      <author>Stefan Wright</author>
      <pubDate>Tue, 31 Aug 2021 13:14:49 +0000</pubDate>
      <link>https://dev.to/stefanwrightcodes/es6-a-beginners-guide-following-my-own-learning-4e05</link>
      <guid>https://dev.to/stefanwrightcodes/es6-a-beginners-guide-following-my-own-learning-4e05</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome"&gt;
  &lt;/a&gt;
  Welcome
&lt;/h2&gt;

&lt;p&gt;For my employment we have been asked to learn/revisit ES6 as we begin to transfer the JS in our codebase into ES6, if you're here then its likely you already know what ES6 is, if you don't...let me summarise below. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-es6"&gt;
  &lt;/a&gt;
  What is ES6?
&lt;/h3&gt;

&lt;p&gt;Well, ES6 stands for ECMAScript 6 which has been around now since June 2015, it is also known as ECMAScript 2015. &lt;a href="https://en.wikipedia.org/wiki/ECMAScript"&gt;ECMAScript&lt;/a&gt; itself has been around since June 1997 with an annual review of the standards in place. ECMAScript was invented to standardize JavaScript meaning that browsers could be built around that standard ensuring support of the different levels. ES6 introduces us with some new tools which I will go into in more detail in this series, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Arrow Functions&lt;/li&gt;
&lt;li&gt;New Variable scoping (var, let, const)&lt;/li&gt;
&lt;li&gt;Template Literals&lt;/li&gt;
&lt;li&gt;Object and Array Destructuring&lt;/li&gt;
&lt;li&gt;Default Parameters&lt;/li&gt;
&lt;li&gt;Rest and Spread Operators&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many ES6 tutorials will also cover various Array "helpers". I'll be looking to touch on these too as they are frequently used, but I have found often referred back to as a reminder of how to write it "properly". So those are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;forEach&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;li&gt;find&lt;/li&gt;
&lt;li&gt;every/some&lt;/li&gt;
&lt;li&gt;and reduce (save the hardest til last!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this series, for each of the above I will try to include a variety of examples and real-world use cases&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>es6</category>
      <category>es5</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Everything you need to know about OpenTelemetry Collector 🚀</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Tue, 31 Aug 2021 12:57:05 +0000</pubDate>
      <link>https://dev.to/signoz/everything-you-need-to-know-about-opentelemetry-collector-l7f</link>
      <guid>https://dev.to/signoz/everything-you-need-to-know-about-opentelemetry-collector-l7f</guid>
      <description>&lt;p&gt;The first step in setting up distributed systems monitoring and tracing is instrumentation, which enables generating and managing telemetry data. Once the telemetry data is generated, you need a way to collect and analyze it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's where OpenTelemetry collector comes into the picture.&lt;/p&gt;

&lt;p&gt;OpenTelemetry collector provides a vendor-neutral way to collect, process, and export your telemetry data(logs, metrics, and traces) to an analysis backend of your choice.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kAeGuZpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tl5efkay1799makz5n8e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kAeGuZpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tl5efkay1799makz5n8e.png" alt="OpenTelemetry Architecture"&gt;&lt;/a&gt;Architecture - How OpenTelemetry fits in an application architecture. OTel collector refers to OpenTelemetry Collector&lt;/p&gt;

&lt;p&gt;Before deep-diving into OpenTelemetry collectors, let's take a short detour to understand what OpenTelemetry is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-opentelemetry"&gt;
  &lt;/a&gt;
  What is OpenTelemetry?
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry is a set of API, SDKs, libraries, and integrations that is aiming to standardize the generation, collection, and management of telemetry data(logs, metrics, and traces). OpenTelemetry is a Cloud Native Computing Foundation project created after the merger of OpenCensus(from Google) and OpenTracing(From Uber).&lt;/p&gt;

&lt;p&gt;The data you collect with OpenTelemetry is vendor-agnostic and can be exported in many formats. Telemetry data has become critical to observe the state of distributed systems. With microservices and polyglot architectures, there was a need to have a global standard. OpenTelemetry aims to fill that space and is doing a great job at it thus far.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-to-use-opentelemetry-collector"&gt;
  &lt;/a&gt;
  Why to use OpenTelemetry Collector?
&lt;/h2&gt;

&lt;p&gt;A OpenTelemetry collector has three main functions - collect, process, and export the telemetry data collected. But before trying to understand more about OpenTelemetry collectors, let us first understand why it is a critical component of your monitoring architecture. Why can't you send your telemetry data directly to a backend analysis tool of your choice?&lt;/p&gt;

&lt;p&gt;OpenTelemetry Collector gives you the flexibility to handle multiple data formats and offloads responsibility from the application to manage telemetry data.&lt;/p&gt;

&lt;p&gt;List of reasons why to use OpenTelemetry Collector:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provides a vendor-agnostic way to collect telemetry data&lt;/li&gt;
&lt;li&gt;Offloads responsibility from the application to manage telemetry data, thereby reducing overhead&lt;/li&gt;
&lt;li&gt;Makes changes to the way of managing telemetry data easier&lt;/li&gt;
&lt;li&gt;Enables data export in multiple formats, multiple vendors to your choice&lt;/li&gt;
&lt;li&gt;Enables quick config-based updates, trivial to update a config file to receive data in another format&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#architecture-of-opentelemetry-collector"&gt;
  &lt;/a&gt;
  Architecture of OpenTelemetry collector
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry collector consists of three main components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Receivers
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Receivers are used to get data into the collector. You can use it to configure ports and formats the collector can take data in. It could be push or pull-based. You can receive data in multiple formats. It has a default OTLP format, but you can also receive data in other popular open-source formats like Jaeger or Prometheus. SigNoz uses the default OTLP format to receive telemetry data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Processors
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Processors are used to doing any processing required on the collected data like data massaging, data manipulation, or any change in the data as it flows through the collector. It can also be used to remove PII data from the collected telemetry data, which can be very useful. You can also do things like batching the data before sending it out, retrying in case the exporting fails, adding metadata, tail-based sampling, etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exporters
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Exporters are used to exporting data to a backend analysis tool like &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt;. You can send out data in multiple data formats.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rSZlzqyC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kj6c7suzy2licb29ipqx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rSZlzqyC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kj6c7suzy2licb29ipqx.png" alt="OpenTelemetry Collector"&gt;&lt;/a&gt;Architecture of OpenTelemetry Collector with receivers, processors and exporters.&lt;/p&gt;

&lt;p&gt;With the combination of these three components, OpenTelemetry Collector can be used to build data pipelines. Receiving data in one format, processing it and then sending out the data in another data format. This provides flexibility to teams working on distributed global systems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-configure-a-opentelemetry-collector"&gt;
  &lt;/a&gt;
  How to configure a OpenTelemetry collector?
&lt;/h2&gt;

&lt;p&gt;You need to configure the three components of the OpenTelemetry collector described above. Once configured, these components must be enabled via pipelines within the service section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#receivers"&gt;
  &lt;/a&gt;
  Receivers
&lt;/h3&gt;

&lt;p&gt;In the sample code shown below, we have two receivers:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;OTLP
Default OpenTelemetry protocol to transfer telemetry data. SigNoz receives telemetry data in OTLP format.&lt;/li&gt;
&lt;li&gt;Jaeger
You can also receive traces data in Jaeger format, which is a popular distributed tracing tool.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;receivers:
      otlp:
        protocols:
          grpc:
          http:
      jaeger:
        protocols:
          grpc:
          thrift_http:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#processors"&gt;
  &lt;/a&gt;
  Processors
&lt;/h3&gt;

&lt;p&gt;There are three processors in the code sample shown below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Batch&lt;br&gt;&lt;br&gt;
Batching helps better compress the data and reduce the number of outgoing connections required to transmit the data. This processor supports both size and time-based batching.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Memory limiter&lt;br&gt;&lt;br&gt;
The memory limiter processor is used to prevent out-of-memory situations on the collector. Given that the amount and type of data a collector processes are environment-specific and resource utilization of the collector is also dependent on the configured processors, it is important to put checks in place regarding memory usage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Queued retry&lt;br&gt;&lt;br&gt;
This processor is highly recommended to configure for every collector as it minimizes the likelihood of data being dropped due to delays in processing or issues exporting the data.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;processors:
      batch:
        send_batch_size: 1000
        timeout: 10s
      memory_limiter:
        # Same as --mem-ballast-size-mib CLI argument
        ballast_size_mib: 683
        # 80% of maximum memory up to 2G
        limit_mib: 1500
        # 25% of limit up to 2G
        spike_limit_mib: 512
        check_interval: 5s
      queued_retry:
        num_workers: 4
        queue_size: 100
        retry_on_failure: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find detailed information about these processors and more in &lt;a href="https://github.com/open-telemetry/opentelemetry-collector/tree/caadbbc476cc13ba87503b8ae7a1a8a50d5b22c4/processor" rel="noopener noreferrer nofollow"&gt;OpenTelemetry Collector GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exporters"&gt;
  &lt;/a&gt;
  Exporters
&lt;/h3&gt;

&lt;p&gt;In this sample code, we have created two exporters.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;kafka/traces&lt;br&gt;&lt;br&gt;
This forwards collected traces to write to a kafka topic named as &lt;code&gt;otlp_spans&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;kafka/metrics&lt;br&gt;&lt;br&gt;
This forwards collected metrics to write to a kafka topic named as &lt;code&gt;otlp_metrics&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exporters:
      kafka/traces:
        brokers:
          - signoz-kafka:9092
        topic: 'otlp_spans'
        protocol_version: 2.0.0
      kafka/metrics:
        brokers:
          - signoz-kafka:9092
        topic: 'otlp_metrics'
        protocol_version: 2.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;You can also configure extensions which enables things like monitoring the health of OpenTelemetry Collector.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h3&gt;

&lt;p&gt;Extensions provide capabilities on top of primary functionality of the OpenTelemetry Collector.&lt;/p&gt;

&lt;p&gt;In this example, we have enabled two extensions.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Health Check&lt;br&gt;&lt;br&gt;
It enables a url that can be used to check the status of the OpenTelemetry Collector.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Zpages&lt;br&gt;&lt;br&gt;
It enables an HTTP endpoint that provides live data for debugging different components of the OpenTelemetry Collector.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;extensions:
      health_check: {}
      zpages: {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configuring-the-service-section-and-data-pipelines"&gt;
  &lt;/a&gt;
  Configuring the service section and data pipelines
&lt;/h3&gt;

&lt;p&gt;All the components that are configured must be enabled via pipelines within the service section. If a component is not defined in the service section, then it is not enabled. Pipelines make OpenTelemetry collector a must-have component in your architecture. It provides the flexibility of receiving and exporting data in multiple formats.&lt;/p&gt;

&lt;p&gt;In the example shown below, we have enabled two pipelines.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;traces
In this pipeline, we can receive traces in &lt;code&gt;jaeger&lt;/code&gt; and &lt;code&gt;otlp&lt;/code&gt; formats. We then use three processors on the collected traces namely &lt;code&gt;memory_limiter&lt;/code&gt; , &lt;code&gt;batch&lt;/code&gt; and &lt;code&gt;queued_retry&lt;/code&gt; . We export the processed traces to kafka topics.&lt;/li&gt;
&lt;li&gt;metrics
In the pipeline, we receive metrics in &lt;code&gt;otlp&lt;/code&gt; formats. Process the collected metrics using batch processor and then export the processed metrics to kafka topics.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;service:
      extensions: [health_check, zpages]
      pipelines:
        traces:
          receivers: [jaeger, otlp]
          processors: [memory_limiter, batch, queued_retry]
          exporters: [kafka/traces]
        metrics:
          receivers: [otlp]
          processors: [batch]
          exporters: [kafka/metrics]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;A sample OpenTelemetry Collector configuration file. (Source: &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-conf
  labels:
    app: opentelemetry
    component: otel-collector-conf
data:
  otel-collector-config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
      jaeger:
        protocols:
          grpc:
          thrift_http:
    processors:
      batch:
        send_batch_size: 1000
        timeout: 10s
      memory_limiter:
        # Same as --mem-ballast-size-mib CLI argument
        ballast_size_mib: 683
        # 80% of maximum memory up to 2G
        limit_mib: 1500
        # 25% of limit up to 2G
        spike_limit_mib: 512
        check_interval: 5s
      queued_retry:
        num_workers: 4
        queue_size: 100
        retry_on_failure: true
    extensions:
      health_check: {}
      zpages: {}
    exporters:
      kafka/traces:
        brokers:
          - signoz-kafka:9092
        topic: 'otlp_spans'
        protocol_version: 2.0.0
      kafka/metrics:
        brokers:
          - signoz-kafka:9092
        topic: 'otlp_metrics'
        protocol_version: 2.0.0
    service:
      extensions: [health_check, zpages]
      pipelines:
        traces:
          receivers: [jaeger, otlp]
          processors: [memory_limiter, batch, queued_retry]
          exporters: [kafka/traces]
        metrics:
          receivers: [otlp]
          processors: [batch]
          exporters: [kafka/metrics]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#getting-started-with-opentelemetry"&gt;
  &lt;/a&gt;
  Getting started with OpenTelemetry
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry provides a vendor-agnostic way of collecting and managing telemetry data. The next step is to choose a backend analysis tool that can help you make sense of the collected data. &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; is a full-stack open-source application performance monitoring and observability platform.&lt;/p&gt;

&lt;p&gt;If you have docker installed, getting started with SigNoz just takes three easy steps at the command line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/SigNoz/signoz.git
cd signoz/deploy/
./install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read more about deploying SigNoz from its &lt;a href="https://signoz.io/docs/deployment/docker/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SigNoz can be used to visualize metrics and traces with charts that can enable quick insights for your teams.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZldkcrEV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by1t5n6kds8c3fdp1iwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZldkcrEV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by1t5n6kds8c3fdp1iwa.png" alt="SigNoz dashboard showing overview metrics like RPS"&gt;&lt;/a&gt;SigNoz UI showing application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/p&gt;

&lt;p&gt;You can try out SigNoz by visiting its GitHub repo 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>monitoring</category>
      <category>microservices</category>
      <category>opentelemetry</category>
    </item>
    <item>
      <title>Presenting Enigma Reloaded(a self hosted, offline, DIY, encryption webapp)</title>
      <author>Enigma Reloaded</author>
      <pubDate>Tue, 31 Aug 2021 12:40:55 +0000</pubDate>
      <link>https://dev.to/enigmareloaded/presenting-enigma-reloaded-a-self-hosted-offline-diy-encryption-webapp-51df</link>
      <guid>https://dev.to/enigmareloaded/presenting-enigma-reloaded-a-self-hosted-offline-diy-encryption-webapp-51df</guid>
      <description>&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;As you already know in 2021 human privacy is at the mercy of large tech corporations. All data in and out including our private messages is being scanned and analyzed whether if you like it or not.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-enigma-reloaded"&gt;
  &lt;/a&gt;
  What is enigma reloaded?
&lt;/h2&gt;

&lt;p&gt;It's a simple tool that works as a contact book where you can keep the public keys and conversations with your contacts.  It works inside your browser without any:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;external service or server&lt;/li&gt;
&lt;li&gt;dependency on the internet (it has 100% offline support)&lt;/li&gt;
&lt;li&gt;all data stored in the browser is encrypted using AES&lt;/li&gt;
&lt;li&gt;dependency on the domain, &lt;code&gt;enigma-reloaded.github.io&lt;/code&gt;. You can self host it, it's simple HTML, CSS and JS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#use-case"&gt;
  &lt;/a&gt;
  Use case
&lt;/h2&gt;

&lt;p&gt;Take this message:&lt;br&gt;
&lt;code&gt;Hey Bob, how are you?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Without being encrypted you see the message, Bob sees the message, your app from your phone or browser sees the message, bob's app sees the message, and maybe more than that.&lt;/p&gt;

&lt;p&gt;Enigma reloaded helps you turn that message into&lt;br&gt;
&lt;code&gt;oayt2NqA kTlEB6 vzYArrD 0OXUw 1Z H 8ZX gFIGa1wM A1fC2Oil qA,mw iU8vPnhuw 8Jmbtk 4 mTp1 WP8cq asM ZP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which looks like a text fragment from analyzer point of view. But the true meaning is indecipherable, unless you are Bob, the true receiver who can decipher back the text using his Enigma Reloaded with his public key.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-it"&gt;
  &lt;/a&gt;
  How to get it?
&lt;/h2&gt;

&lt;p&gt;You can use Enigma Reloaded directly here: &lt;a href="https://enigma-reloaded.github.io/enigma-reloaded"&gt;https://enigma-reloaded.github.io/enigma-reloaded&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or even better, to have 110% control, download gh-pages branch: &lt;a href="https://github.com/enigma-reloaded/enigma-reloaded/tree/gh-pages"&gt;https://github.com/enigma-reloaded/enigma-reloaded/tree/gh-pages&lt;/a&gt; as a zip and host it's content.&lt;/p&gt;

&lt;p&gt;You can also check the source code for it here: &lt;a href="https://github.com/enigma-reloaded/enigma-reloaded"&gt;https://github.com/enigma-reloaded/enigma-reloaded&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-nice-features"&gt;
  &lt;/a&gt;
  Other nice features:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Encrypt and decrypt files&lt;/li&gt;
&lt;li&gt;Time based PIN access control&lt;/li&gt;
&lt;li&gt;backup and restoration from encrypted backups&lt;/li&gt;
&lt;li&gt;PWA installation&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>privacy</category>
      <category>security</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Setting Up Tailwind CSS in Laravel</title>
      <author>Ash Allen</author>
      <pubDate>Tue, 31 Aug 2021 12:35:55 +0000</pubDate>
      <link>https://dev.to/ashallendesign/setting-up-tailwind-css-in-laravel-mgc</link>
      <guid>https://dev.to/ashallendesign/setting-up-tailwind-css-in-laravel-mgc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/" rel="noopener noreferrer"&gt;Tailwind CSS&lt;/a&gt; is a really cool CSS framework that you can use when building your applications and websites. In fact, I think it's that cool that since it's release, I've switched away from using &lt;a href="https://getbootstrap.com/" rel="noopener noreferrer"&gt;Bootstrap&lt;/a&gt; as my go-to framework for new projects and use Tailwind instead.&lt;/p&gt;

&lt;p&gt;In this article, we're going to take a quick look at what Tailwind CSS is and why I think it's useful. We're then going to step through two different ways of how to set up Tailwind in your &lt;a href="https://laravel.com/" rel="noopener noreferrer"&gt;Laravel&lt;/a&gt; projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-tailwind-css"&gt;
  &lt;/a&gt;
  What is Tailwind CSS?
&lt;/h2&gt;

&lt;p&gt;Tailwind is a utility-first CSS framework that you can use to style your website directly in your HTML. As an example, it provides you with CSS classes such as &lt;code&gt;flex&lt;/code&gt;, &lt;code&gt;pt-4&lt;/code&gt;, &lt;code&gt;text-center&lt;/code&gt; so that you can have granular control.&lt;/p&gt;

&lt;p&gt;To give an example, let's look at how you might make a button using Tailwind:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"&amp;gt;
  Button
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we wanted to make this same style button using Bootstrap, we'd probably do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button class="btn btn-primary"&amp;gt;
  Button
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we're adding individual CSS classes to the markup, rather than having one or two classes like you would in Bootstrap.&lt;/p&gt;

&lt;p&gt;Now, don't worry, I know what you're thinking... "That HTML looks really messy and overcomplicated. The Bootstrap version looks so much better and easier to understand!". I thought the same thing when I first started using Tailwind. I just thought that it was a bit of a fad that would probably die down after a few months. But, I gave it a try anyway so that I could make a more informed decision. I loved it!&lt;/p&gt;

&lt;p&gt;Of course, it felt a little bit weird at first, but after an hour or two it felt really natural to use. When I was using Bootstrap, I always felt like I was fighting the built-in CSS styles to get anything done. It was great for throwing together sites really quickly, but to tailor them to my own liking, I had to override a lot of styles. But with Tailwind, if I wanted to quickly add a style to a button, it was as easy as adding it straight to the HTML.&lt;/p&gt;

&lt;p&gt;If you're interested in reading more about why Tailwind is useful, Adam Wathan (the creator of Tailwind) has a &lt;a href="https://adamwathan.me/css-utility-classes-and-separation-of-concerns/" rel="noopener noreferrer"&gt;really interesting article&lt;/a&gt; about it that I'd recommend reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-cdn"&gt;
  &lt;/a&gt;
  Using the CDN
&lt;/h2&gt;

&lt;p&gt;The easiest (but not necessarily the best) way to get started with Tailwind is to add the stylesheet to your HTML using the CDN. This is particularly useful if you want to quickly prototype an idea or just have a play around with the framework.&lt;/p&gt;

&lt;p&gt;To get started, you just need to add the following line to into the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of your HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css" rel="stylesheet"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although this is the quickest way to add Tailwind to your project, I'd probably advise against it for any live projects, because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The size of the CSS file is larger than it would be if bundled after installing via NPM.&lt;/li&gt;
&lt;li&gt;You can't customize Tailwind's default theme.&lt;/li&gt;
&lt;li&gt;You can't use any directives like @apply, @variants, etc.&lt;/li&gt;
&lt;li&gt;You can't enable additional variants like &lt;code&gt;group-focus&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You can't install third-party plugins.&lt;/li&gt;
&lt;li&gt;You can't tree-shake unused styles.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#using-npm"&gt;
  &lt;/a&gt;
  Using NPM
&lt;/h2&gt;

&lt;p&gt;If you're intending on using Tailwind in a project that's going to be live, it's much better to install it using NPM. By doing this, you aren't affected by the downsides that I stated above like when using the CDN. So, let's take a look at how to get started:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-tailwind"&gt;
  &lt;/a&gt;
  Installing Tailwind
&lt;/h3&gt;

&lt;p&gt;To install Tailwind, you'll just need to run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -D tailwindcss@latest postcss@latest autoprefixer@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setting-up-your-tailwind-config"&gt;
  &lt;/a&gt;
  Setting up Your Tailwind Config
&lt;/h3&gt;

&lt;p&gt;Now that we have Tailwind installed, we can run the following command to create a blank &lt;code&gt;tailwind.config.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx tailwindcss init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now have a &lt;code&gt;tailwind.config.js&lt;/code&gt; that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
  purge: [],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {},
  },
  variants: {
    extend: {},
  },
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the file that you might use when you need to make changes to your theme or install plugins. As an example, if we wanted to define 'Poppins' as our default 'sans' font, we could update the file like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
  purge: [],
  darkMode: false, // or 'media' or 'class'
  theme: {
    fontFamily: {
      'sans': ['Poppins', 'ui-sans-serif', 'system-ui'],
    },
    extend: {},
  },
  variants: {
    extend: {},
  },
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configuring-laravel-mix"&gt;
  &lt;/a&gt;
  Configuring Laravel Mix
&lt;/h3&gt;

&lt;p&gt;Now that we have Tailwind installed and configured ready to go, we can set up &lt;a href="https://laravel-mix.com" rel="noopener noreferrer"&gt;Laravel Mix&lt;/a&gt; so that our CSS is bundled whenever we build our assets.&lt;/p&gt;

&lt;p&gt;I'm going to make the assumption here that you're using the default &lt;code&gt;app.css&lt;/code&gt; file here that comes with a fresh Laravel installation. But if not, you can update the first parameter in the &lt;code&gt;postCss()&lt;/code&gt; method to match your main CSS file path.&lt;/p&gt;

&lt;p&gt;I'm also going to make the assumption that your &lt;code&gt;webpack.mix.js&lt;/code&gt; file still looks the same as the one that comes in the fresh default Laravel installation.&lt;/p&gt;

&lt;p&gt;Let's add the necessary &lt;code&gt;require()&lt;/code&gt; method to our &lt;code&gt;postCss()&lt;/code&gt; method in the &lt;code&gt;webpack.mix.js&lt;/code&gt; file like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mix = require('laravel-mix');

mix.js('resources/js/app.js', 'public/js')
    .postCss("resources/css/app.css", "public/css", [
        require("tailwindcss"),
    ]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-tailwind-to-your-applications-css"&gt;
  &lt;/a&gt;
  Adding Tailwind to Your Application's CSS
&lt;/h3&gt;

&lt;p&gt;We're almost there! Now that we've installed and configured Tailwind, we need to add the styles to our main CSS file.&lt;/p&gt;

&lt;p&gt;I'm going to make the assumption here that we're using the &lt;code&gt;resources/css/app.css&lt;/code&gt; CSS file mentioned above. All we need to do is open up the file and add the following to the top:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@tailwind base
@tailwind components
@tailwind utilities
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tailwind should now be added to your project's CSS file and you should be able to start using it right away. You'll also need to remember to add it to the top of your HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8" /&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&amp;gt;
    &amp;lt;link href="{{ asset('css/app.css') }}" rel="stylesheet"&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations, you've now got Tailwind installed ready to use in your project!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#purging-unused-css-classes"&gt;
  &lt;/a&gt;
  Purging Unused CSS Classes
&lt;/h2&gt;

&lt;p&gt;I'd recommend configuring Tailwind to purge unused CSS classes from your application's CSS file.&lt;/p&gt;

&lt;p&gt;As a really basic example, let's imagine that you're only using the &lt;code&gt;text-blue-500&lt;/code&gt; class in your application. It wouldn't make sense for us to include all of the other classes that Tailwind provides in our application's CSS. If we included all of the unused classes, we would be increasing the size of our CSS file which can have a negative effect on search rankings in Google.&lt;/p&gt;

&lt;p&gt;So, to purge any unused CSS classes, we can update our &lt;code&gt;tailwind.config.js&lt;/code&gt; file to look similar to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; module.exports = {
   purge: [
     './resources/**/*.blade.php',
     './resources/**/*.js',
     './resources/**/*.vue',
   ],
    darkMode: false, // or 'media' or 'class'
    theme: {
      extend: {},
    },
    variants: {
      extend: {},
    },
    plugins: [],
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we've added three new lines to the &lt;code&gt;purge&lt;/code&gt; section of the file. These lines allow us to preserve any CSS classes that are found in any files inside our &lt;code&gt;resources&lt;/code&gt; folder that end with &lt;code&gt;.blade.php&lt;/code&gt;, &lt;code&gt;.js&lt;/code&gt; or &lt;code&gt;.vue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But, it's really important to make sure that you write your styles in your markup in a way that can be preserved. Let's take a look at the example that the Tailwind documentation gives of how NOT to write your classes.&lt;/p&gt;

&lt;p&gt;Because of the way that the regex rule works that is used to detect the CSS classes, it will detect strings that aren't separated by spaces, quotes or angle brackets. This means that if you have any of these in your classes (for example, if you were adding conditional classes), they might get ignored and purged.&lt;/p&gt;

&lt;p&gt;For example, let's say that in a Vue.js file, you were adding conditional CSS classes. If there's an error, you want to add the &lt;code&gt;text-red-600&lt;/code&gt; class, but if there's no error, you want to add &lt;code&gt;text-green-600&lt;/code&gt;. You could potentially write it like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="text-{{ error ? 'red' : 'green' }}-600"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, this would detect &lt;code&gt;text-{{&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;:&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;}}-600&lt;/code&gt;. As you can probably guess, this means that because it didn't detect &lt;code&gt;text-red-600&lt;/code&gt; or &lt;code&gt;text-green-600&lt;/code&gt;, the classes you need would be purged from your CSS (assuming that they aren't included elsewhere in your markup somewhere).&lt;/p&gt;

&lt;p&gt;Instead, to write the classes in a way that can be detected and not purged, you would write the conditional like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="{{ error ? 'text-red-600' : 'text-green-600' }}"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To learn more about this, I'd recommend giving the official Tailwind documentation's section about &lt;a href="https://tailwindcss.com/docs/optimizing-for-production#writing-purgeable-html" rel="noopener noreferrer"&gt;writing purgeable HTML&lt;/a&gt; a read.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#splitting-html-into-components"&gt;
  &lt;/a&gt;
  Splitting HTML into Components
&lt;/h2&gt;

&lt;p&gt;As your application grows, you'll likely find that you'll be reusing common parts of your markup in a lot of different places. So, in a similar way that you'd tend to try and keep your code DRY (don't repeat yourself), you can do the same in Laravel with your views.&lt;/p&gt;

&lt;p&gt;In this particular section, we'll be using Blade components as examples, but the concept can still be applied if you're building your frontend using something like Vue.&lt;/p&gt;

&lt;p&gt;So, to get a bit of context, let's imagine that we have a button that we use in many places across our frontend that has the following markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Button
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's say that a few months after releasing the original website, we want to update all of the buttons to be green rather than blue. Of course, we could do a 'find and replace' across all of our Blade files. But, as you can probably guess, that would be cumbersome and would leave room for error. What would happen if you forgot to change one of them? Or if you accidentally changed another element that was using the &lt;code&gt;bg-blue-500&lt;/code&gt; class but that wasn't meant to be updated?&lt;/p&gt;

&lt;p&gt;To get around this, we can make use of Laravel components. Components allow us to create reusable elements that we can use in our Blade files.&lt;/p&gt;

&lt;p&gt;To get a better idea of what they are and how to use them, let's imagine the following HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Button One
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Button Two
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're going to take these two buttons and split them into components that we can use instead. Let's start by creating our component by making a new &lt;code&gt;resources/views/components/button.blade.php&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;We can then move the button's HTML into our new &lt;code&gt;button.blade.php&lt;/code&gt; file like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Button One
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, we'll need to make sure that we make the button text dynamic so that we can reuse this component across our system. We can do that by outputting a &lt;code&gt;$text&lt;/code&gt; attribute that we'll be passing to the component. Our new button markup would then look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  {{ $text }}
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can update our original HTML with the two buttons to use our new components rather than the button's duplicated markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;x-button&lt;/span&gt; &lt;span class="na"&gt;text=&lt;/span&gt;&lt;span class="s"&gt;"Button One"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;x-button&lt;/span&gt; &lt;span class="na"&gt;text=&lt;/span&gt;&lt;span class="s"&gt;"Button Two"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This now means that if we want to update the colours of our buttons from blue to green, all we'll need to do is change it once in our &lt;code&gt;resources/views/components/button.blade.php&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;You might find that in one part of your frontend that you'd like to keep the general look of the button but change something (the font size as an example). Instead of needing to create a new component or manually create the button without a component, we can make our component's CSS classes dynamic.&lt;/p&gt;

&lt;p&gt;To do this, we can update our component like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;{{&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="na"&gt;attributes-&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;merge(['class' =&amp;gt; 'bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded']) }}"&amp;gt;
  {{ $text }}
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could then call our component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;x-button&lt;/span&gt; &lt;span class="na"&gt;text=&lt;/span&gt;&lt;span class="s"&gt;"Button One"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-xl"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would result in the following HTML being output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-xl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Button One
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To find out more about components in Laravel, I'd definitely recommend giving the &lt;a href="https://laravel.com/docs/8.x/blade#components" rel="noopener noreferrer"&gt;official documetation&lt;/a&gt; a read. It shows the different types of things that you can do with components and gives some really useful examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hopefully, this article should have given you an overview of how you can set up Tailwind CSS for your Laravel applications and websites. It should have also shown you how to set up Laravel Mix to purge any unused CSS and then briefly showed you how to split your reusable HTML into components.&lt;/p&gt;

&lt;p&gt;If this post helped you out, I'd love to hear about it. Likewise, if you have any feedback to improve this post, I'd also love to hear that too.&lt;/p&gt;

&lt;p&gt;If you're interested in getting updated each time I publish a new post, feel free to &lt;a href="https://ashallendesign.co.uk/blog"&gt;sign up for my newsletter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Keep on building awesome stuff! 🚀&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>tailwindcss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How I created a PHP function to transform a Local DateTime to UTC</title>
      <author>mattiatoselli</author>
      <pubDate>Tue, 31 Aug 2021 12:19:41 +0000</pubDate>
      <link>https://dev.to/mattiatoselli/how-i-created-a-php-function-to-transform-a-local-datetime-to-utc-56oo</link>
      <guid>https://dev.to/mattiatoselli/how-i-created-a-php-function-to-transform-a-local-datetime-to-utc-56oo</guid>
      <description>&lt;p&gt;Today I had to resolve a problem at work, at first sight it could be simple, but hands on, it was not so.&lt;/p&gt;

&lt;p&gt;Probably You will find another solution, but to me this was simple to code and enough easy to maintain. The idea is to use the functions that starting from PHP 5.4 we have to solve this problem.&lt;/p&gt;

&lt;p&gt;I had an API which received the DateTime and the timezone, and I had to transform it in UTC before sending it to the DB, using Unix timestamp was not an option.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;//we can specify GMT or for example a timezone name, under the snippet I'll provide the link to de documentation to find the names of the different timezones&lt;/span&gt;

&lt;span class="nv"&gt;$userTimezone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DateTimeZone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GMT+2'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$myDateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'2021-08-31 10:48'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$userTimezone&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//get the offset of the selected timezone from UTC&lt;/span&gt;
&lt;span class="nv"&gt;$offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$userTimezone&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getOffset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$myDateTime&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//create the corresponding DateTime in UTC&lt;/span&gt;
&lt;span class="nv"&gt;$myInterval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nc"&gt;DateInterval&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;createFromDateString&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$offset&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'seconds'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$myDateTime&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$myInterval&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//print the result&lt;/span&gt;
&lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$myDateTime&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y-m-d H:i:s'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;Echo&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usefull-links"&gt;
  &lt;/a&gt;
  Usefull links
&lt;/h2&gt;

&lt;p&gt;I have to mention this article which helped me very much, my snippet is an adaptation of this one &lt;a href="https://blog.serverdensity.com/handling-timezone-conversion-with-php-datetime/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, for a better implemantation, i suggest to use the strings accepted by the method, you can consult the list in the PHP DOC &lt;a href="https://www.php.net/manual/en/timezones.php"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>functional</category>
      <category>datetime</category>
    </item>
    <item>
      <title>🔥 Vue Tips #23: Why there must be one source of truth</title>
      <author>Michael Thiessen</author>
      <pubDate>Tue, 31 Aug 2021 12:16:59 +0000</pubDate>
      <link>https://dev.to/michaelthiessen/vue-tips-23-why-there-must-be-one-source-of-truth-58hi</link>
      <guid>https://dev.to/michaelthiessen/vue-tips-23-why-there-must-be-one-source-of-truth-58hi</guid>
      <description>&lt;p&gt;&lt;em&gt;This newsletter was sent out to my list on August 25, 2021. &lt;a href="https://michaelnthiessen.com/newsletter"&gt;Sign up here&lt;/a&gt; to get emails like this each week!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Heyo,&lt;/p&gt;

&lt;p&gt;I've got some more tips, an article, and a quote — as always.&lt;/p&gt;

&lt;p&gt;If you know someone who would enjoy these tips, forward this email to them or send them &lt;a href="https://michaelnthiessen.com/newsletter"&gt;here&lt;/a&gt; so they can sign themselves up.&lt;/p&gt;

&lt;p&gt;The more people that sign up, the more I feel obligated to pack in tons of value, and that's especially good for you, right?&lt;/p&gt;

&lt;p&gt;So share this newsletter with others, even if it's just for purely selfish reasons 😏&lt;/p&gt;

&lt;p&gt;— Michael&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-there-must-be-one-source-of-truth"&gt;
  &lt;/a&gt;
  🔥 Why there must be one source of truth
&lt;/h2&gt;

&lt;p&gt;This is the most important principle of state management that I know:&lt;/p&gt;

&lt;p&gt;Each piece of state has a single owner, a single source of truth.&lt;/p&gt;

&lt;p&gt;No one else is allowed to modify the state. It's just borrowed temporarily.&lt;/p&gt;

&lt;p&gt;If you have an array in a Vuex store, only that Vuex store can update it. Anywhere in your app that needs that value &lt;em&gt;must&lt;/em&gt; get it from the store (whether directly or through another component).&lt;/p&gt;

&lt;p&gt;If the state is owned by a component, only that component can modify it. This means other comopnents must emit an event to that component, which can then decide what it wants to do.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;If you allow state to be modified from anywhere, your code becomes a tangled mess.&lt;/p&gt;

&lt;p&gt;With a single source of truth, you can easily understand what's happening.&lt;/p&gt;

&lt;p&gt;The best code is easily understood.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aria-roles-you-didnt-know-you-needed"&gt;
  &lt;/a&gt;
  🔥 Aria roles you didn't know you needed
&lt;/h2&gt;

&lt;p&gt;Aria roles are used to tell a screenreader what an element is for.&lt;/p&gt;

&lt;p&gt;This is really important when the native HTML elemen just doesn't exist (eg. roles like &lt;code&gt;toolbar&lt;/code&gt; and &lt;code&gt;alert&lt;/code&gt;) or when you're using a different HTML element for design or technical reasons (eg. wrapping a &lt;code&gt;radio&lt;/code&gt; button to style it).&lt;/p&gt;

&lt;p&gt;But please, remember that you should always use the semantic element where you can. This is always the best and most effective solution.&lt;/p&gt;

&lt;p&gt;There are six different categories of aria roles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Widget - roles like &lt;code&gt;button&lt;/code&gt;, &lt;code&gt;checkbox&lt;/code&gt;, &lt;code&gt;separator&lt;/code&gt;, &lt;code&gt;tab&lt;/code&gt;, or &lt;code&gt;scrollbar&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Composite - roles like &lt;code&gt;combobox&lt;/code&gt; and &lt;code&gt;listbox&lt;/code&gt; (these are for dropdown menus), &lt;code&gt;radiogroup&lt;/code&gt;, or &lt;code&gt;tree&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Document structure - this includes &lt;code&gt;article&lt;/code&gt;, &lt;code&gt;presentation&lt;/code&gt;, &lt;code&gt;figure&lt;/code&gt;, &lt;code&gt;feed&lt;/code&gt;, and &lt;code&gt;directory&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Landmark - &lt;code&gt;banner&lt;/code&gt;, &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;navigation&lt;/code&gt;, and &lt;code&gt;region&lt;/code&gt; are roles in this category&lt;/li&gt;
&lt;li&gt;Live region - &lt;code&gt;alert&lt;/code&gt;, &lt;code&gt;log&lt;/code&gt;, &lt;code&gt;marquee&lt;/code&gt;, and &lt;code&gt;status&lt;/code&gt; are roles that might update with real-time information&lt;/li&gt;
&lt;li&gt;Window - &lt;code&gt;alertdialog&lt;/code&gt; and &lt;code&gt;dialog&lt;/code&gt; are the only two roles in this category&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can check out the full list here: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques#roles"&gt;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques#roles&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sponsored-harperdb-the-best-db-for-frontend-devs"&gt;
  &lt;/a&gt;
  📜 (Sponsored) HarperDB, the best db for frontend devs
&lt;/h2&gt;

&lt;p&gt;...but it's not &lt;em&gt;exactly&lt;/em&gt; a database.&lt;/p&gt;

&lt;p&gt;For me, the most frustrating part of building an app is all of the backend stuff.&lt;/p&gt;

&lt;p&gt;You need to find somewhere to persist the data, another place to put the API, and then spend hours configuring and setting it all up. If you pick the one that's easy to use, your project will outgrow it. But if you go all-in with AWS you never even get the project off the ground 🤦‍♂️.&lt;/p&gt;

&lt;p&gt;HarperDB does all of this stuff for you, in an easy-to-use package that grows with your project. Here are its best features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NoSQL and SQL hybrid&lt;/li&gt;
&lt;li&gt;Custom API functions (powered by Fastify)&lt;/li&gt;
&lt;li&gt;Simple REST API to access everything&lt;/li&gt;
&lt;li&gt;Really easy to use admin dashboard to create tables, add or delete data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I've only played around with HarperDB a bit, but so far I'm impressed, and I plan to use it on my next project.&lt;/p&gt;

&lt;p&gt;The best way to get started is &lt;a href="https://harperdb.io/docs/getting-started/"&gt;through the HarperDB docs&lt;/a&gt;, but they also have a &lt;a href="https://api.harperdb.io/"&gt;well-documented API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There's also this &lt;a href="https://github.com/cassidoo/book-rating-demo"&gt;demo in React&lt;/a&gt;. There's nothing yet for Vue + HarperDB, but that just means you could be the one to build it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-dark-side-of-nuxt"&gt;
  &lt;/a&gt;
  📜 The Dark Side of Nuxt
&lt;/h2&gt;

&lt;p&gt;Nuxt is a fantastic framework, but even the best frameworks aren't perfect.&lt;/p&gt;

&lt;p&gt;It this article, Jonas uses his experience as a consultant to explore the dark side of Nuxt, and how to refactor the Nuxt Hacker News clone to use Fastify and Vite to eliminate some of those dark spots.&lt;/p&gt;

&lt;p&gt;Read it here: &lt;a href="https://vuejsdevelopers.com/2021/03/23/nuxt-vite-fastify/"&gt;Rewriting Nuxt HN with Fastify, Vite and Vue 3&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%97%9E-news-its-still-conference-season"&gt;
  &lt;/a&gt;
  🗞 News: It's (still) conference season!
&lt;/h2&gt;

&lt;p&gt;If you didn't get the memo last week, we have &lt;em&gt;four&lt;/em&gt; incredible conferences coming up in the next 3 months, all accessible online and two offering (limited) in-person experiences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nuxtnation.com/"&gt;Nuxt Nation&lt;/a&gt; — September 15th — free and online&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.vuejs.amsterdam/"&gt;Vuejs Global (Amsterdam)&lt;/a&gt; — October 1st and 4th — Amsterdam and online&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://vuejs.london/"&gt;Vue.js Conference (London)&lt;/a&gt; — October 20-21 — London and online&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.vuetoronto.com/"&gt;VueConf Toronto&lt;/a&gt; — November 22-23 — free + online&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#simplicity"&gt;
  &lt;/a&gt;
  💬 Simplicity
&lt;/h2&gt;

&lt;p&gt;"Complicated code is a sign that you don't understand your program well enough to make it simple." — Steve McConnell&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spacedrepetition-clean-up-your-tailwind-classes"&gt;
  &lt;/a&gt;
  🧠 Spaced-repetition: Clean up your Tailwind classes
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The best way to commit something to long-term memory is to periodically review it, gradually increasing the time between reviews 👨‍🔬&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actually remembering these tips is much more useful than just a quick distraction, so here's a tip from a couple weeks ago to jog your memory.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After using Tailwind for awhile you'll start to notice you end up with a lot of elements that have tons of classes on them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mx-5 w-1/2 md:mx-0 md:w-auto mb-8 flex justify-end"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can combine all of these utility classes together into a single class by using the &lt;code&gt;@apply&lt;/code&gt; directive:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"combined"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"combined"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.combined&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;mx-5&lt;/span&gt; &lt;span class="err"&gt;w-1/2&lt;/span&gt; &lt;span class="py"&gt;md&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;mx-0&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;w-auto&lt;/span&gt; &lt;span class="n"&gt;mb-8&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt; &lt;span class="n"&gt;justify-end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This lets you reuse those styles without having to create a whole new Vue component for them.&lt;/p&gt;

&lt;p&gt;Of course, one of the best parts of Vue is that we can create reusable components, but not everything needs to be (or deserves to be) it's own component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exclusive-tips-and-insights-every-week"&gt;
  &lt;/a&gt;
  Exclusive tips and insights every week
&lt;/h2&gt;

&lt;p&gt;Join 8135 other Vue devs and &lt;a href="//michaelnthiessen.com/newsletter"&gt;get exclusive tips and insights&lt;/a&gt; like these delivered straight to your inbox, every week.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You have great content in your emails. I seriously learn something from every one of them. — Titus Decali&lt;/p&gt;

&lt;p&gt;Thanks for another beautiful tip 🙏 — Victor Onuoha&lt;/p&gt;

&lt;p&gt;Loving these, and the spaced repetition — Mark Goldstein&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="//michaelnthiessen.com/newsletter"&gt;Sign up here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
