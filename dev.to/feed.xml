<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>100 d√≠as de c√≥digo: 10, repasando HTML, creando mas repositorios y comenzando con la hoja de estilos de mi pagina personal.</title>
      <author>Daro</author>
      <pubDate>Sat, 13 Nov 2021 00:43:07 +0000</pubDate>
      <link>https://dev.to/darito/100-dias-de-codigo-10-repasando-html-creando-mas-repositorios-y-comenzando-con-la-hoja-de-estilos-de-mi-pagina-personal-4ij9</link>
      <guid>https://dev.to/darito/100-dias-de-codigo-10-repasando-html-creando-mas-repositorios-y-comenzando-con-la-hoja-de-estilos-de-mi-pagina-personal-4ij9</guid>
      <description>&lt;p&gt;¬°Hey, hey, hey!&lt;/p&gt;

&lt;p&gt;Bienvenidos a este nuevo d√≠a del reto, hoy es el d√≠a en el que comienzo a mejorar mis habilidades de escritura probando touch typing que, de forma muy resumida, consiste en escribir en el teclado lo mas r√°pido posible.&lt;/p&gt;

&lt;p&gt;Lo hice con ayuda de esta &lt;a href="https://www.typingstudy.com"&gt;guia&lt;/a&gt; y se los recomiendo ya que te permite codificar mas r√°pido. &lt;br&gt;
Te recomiendo intentarlo aunque tengas una velocidad muy buena.&lt;/p&gt;

&lt;p&gt;Tambi√©n he avanzado en algunas otras cosas que me gustar√≠a contarles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ayer"&gt;
  &lt;/a&gt;
  Ayer:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Avance hasta la secci√≥n de Fundamentos de HTML en &lt;a href="https://www.theodinproject.com/"&gt;The odin Project&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Aprend√≠ a agregar una clave ssh a mi cuenta de github.&lt;/li&gt;
&lt;li&gt;Realice una instalaci√≥n y configuracion de git en linux.&lt;/li&gt;
&lt;li&gt;Cree un proyecto de ejemplo en github y realice cambios.&lt;/li&gt;
&lt;li&gt;Aprend√≠ que la mejor forma de hacer una explicaci√≥n de los cambios en una confirmaci√≥n (commit) es escribirlo de forma imperativa.&lt;/li&gt;
&lt;li&gt;Volv√≠ a aprender los comandos basicos de linux como &lt;code&gt;pwd&lt;/code&gt;, &lt;code&gt;touch&lt;/code&gt;, &lt;code&gt;cat&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;cd&lt;/code&gt; entre otros.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hoy"&gt;
  &lt;/a&gt;
  Hoy:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Avance hasta la secci√≥n &lt;code&gt;Project recipes&lt;/code&gt; del capitulo &lt;strong&gt;HTML foundations&lt;/strong&gt; de la guia &lt;a href="https://www.theodinproject.com/"&gt;The odin Project&lt;/a&gt; con lo cual ya realice mi objetivo de spring semanal.&lt;/li&gt;
&lt;li&gt;Cree unos cuantos repositorios para los proyectos que voy realizando en la guia.&lt;/li&gt;
&lt;li&gt;Comenc√© a codificar los estilos principales de mi pagina web.&lt;/li&gt;
&lt;li&gt;Repase las etiquetas de html. (se los recomiendo porque yo ya no recordaba algunas)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ademas encontr√© &lt;a href="https://www.befunky.com/es/crear/editor-de-fotos/"&gt;este&lt;/a&gt; editor de fotos online que es bastante interesante y &lt;a href="https://comprimir-video.convertir-pdf.com/"&gt;este&lt;/a&gt; compresor de v√≠deo. &lt;/p&gt;

&lt;p&gt;¬øDeber√≠a de hacer una guia de todas las herramientas que utilizo en el d√≠a a d√≠a? Quiz√°s...&lt;/p&gt;

&lt;p&gt;¬°Y eso es todo por hoy! Espero que les vaya super bien con sus proyectos y animo.&lt;br&gt;
Adi√≥s mundo!&lt;/p&gt;

</description>
      <category>spanish</category>
      <category>html</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Day 7 of #100daysofcode: General Progress and Competitive Programming</title>
      <author>Ryan Whelchel</author>
      <pubDate>Sat, 13 Nov 2021 00:09:35 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/day-7-of-100daysofcode-general-progress-and-competitive-programming-fo9</link>
      <guid>https://dev.to/rydwhelchel/day-7-of-100daysofcode-general-progress-and-competitive-programming-fo9</guid>
      <description>&lt;p&gt;Between Competitive Programming, talking with my professors, planning my next semester, working on my resume and working on my project I had a very full day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#competitive-programming"&gt;
  &lt;/a&gt;
  Competitive Programming
&lt;/h2&gt;

&lt;p&gt;I participated in my first competitive programming event today and had a lot of fun. I was the senior in my team, so I took the lead and helped coach my team through some of the problems. One of the members of my team had very little coding experience, so it was cool to show him the ropes on how to approach some of these problems and to show him some of the common problem patterns you'd run into. He was pretty excited about using Dictionaries to count duplicates so that was fun.&lt;/p&gt;

&lt;p&gt;Everybody in the team were familiar with different languages, so I thought it would be best to use Python as it is fairly simple to understand. That seemed to work very well, and I was able to bust out some of the Python-tech that I've learned over the years, namely list comprehension and f-strings. &lt;/p&gt;

&lt;p&gt;We placed a little above middle of the pack, but we were happy with how we did and I feel like everyone walked away today better programmers.&lt;/p&gt;

&lt;p&gt;In the future, I would like to participate in an even more competitive scenario where you compete for a prize with randomly selected teams. I think that would be really fun.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;I made a lot of progress today. I spent more time with React-bootstrap and decided on which components I am going to use in my page. In addition, I modified the CSS layout and fixed some code modularity problems I had with my Flask server. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrow"&gt;
  &lt;/a&gt;
  Tomorrow
&lt;/h2&gt;

&lt;p&gt;I'm going to continue working on my project. I hope I will have some what of a final product to show off tomorrow. Don't be too harsh on the design; I never claimed to be a good designer!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-im-struggling-on"&gt;
  &lt;/a&gt;
  What I'm Struggling on
&lt;/h2&gt;

&lt;p&gt;I'm still finding some trouble on how to use Flexbox in conjunction with Grid. As I understand it, they're both made much more powerful when you use them in conjunction, so I'm trying to force myself to use them together.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=RhUuMl3R1PE"&gt;CSS Grid Tutorial - Dev Dreamer&lt;/a&gt; &lt;br&gt;
&lt;a href="https://react-bootstrap.github.io/components/"&gt;React-Bootstrap Components&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Betterer v5.0.0</title>
      <author>Craig ‚ò†Ô∏èüíÄüëª</author>
      <pubDate>Sat, 13 Nov 2021 00:06:54 +0000</pubDate>
      <link>https://dev.to/phenomnominal/betterer-v500-5-4518</link>
      <guid>https://dev.to/phenomnominal/betterer-v500-5-4518</guid>
      <description>&lt;p&gt;Oof, this one feels like it's been a while coming, but after a whole bunch of work, and a whole bunch of breaking changes &lt;strong&gt;I've just released&lt;/strong&gt; &lt;a href="https://www.npmjs.com/package/@betterer/cli"&gt;&lt;strong&gt;v5.0.0&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;of&lt;/strong&gt; &lt;a href="https://phenomnomnominal.github.io/betterer/"&gt;&lt;strong&gt;Betterer!&lt;/strong&gt;&lt;/a&gt; üéâ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-betterer"&gt;
  &lt;/a&gt;
  What is &lt;strong&gt;Betterer&lt;/strong&gt;?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://phenomnomnominal.github.io/betterer/"&gt;&lt;strong&gt;Betterer&lt;/strong&gt;&lt;/a&gt; is a test runner that helps make incremental improvements to your code!&lt;/p&gt;

&lt;p&gt;The first time &lt;strong&gt;Betterer&lt;/strong&gt; it runs a test, it will take a snapshot of the current state. From that point on, whenever it runs it will compare against that snapshot. It will either throw an error (if the test got worse ‚ùå), or update the snapshot (if the test got better ‚úÖ). That's pretty much it!&lt;/p&gt;

&lt;p&gt;You can check out the (newly updated!) documentation at &lt;a href="https://phenomnomnominal.github.io/betterer/"&gt;https://phenomnomnominal.github.io/betterer/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-happened-to-v2-v3-v4"&gt;
  &lt;/a&gt;
  What happened to v2, v3, v4...?
&lt;/h2&gt;

&lt;p&gt;"But Craig", I hear you say, "The &lt;a href="https://dev.to/phenomnominal/betterer-v1-0-0-301b"&gt;last time you posted about &lt;strong&gt;Betterer&lt;/strong&gt;&lt;/a&gt;, it was at v1.0.0!? What's been going on?!". üî•üî•üî•&lt;/p&gt;

&lt;p&gt;That's very astute of you dear reader, and let's just put it this way - I sure do love breaking APIs! One of the interesting things about &lt;strong&gt;Betterer&lt;/strong&gt; is that it is a tool designed for problems that emerge in large and old codebases. That means it has to be able to handle large and old codebases from the get go! So I've had a lot of fun as I've tried to figure out the best workflows and APIs for using &lt;strong&gt;Betterer&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Between v1.0.0 and now, I've released a bunch of features, consolidated and simplified APIs, and just generally made &lt;strong&gt;Betterer&lt;/strong&gt; more usable and flexible. I'm pretty happy with where it is at now, so I figured it was about time for an update. I've even been talking about it at a few conferences now that they're coming back! What a world üåç!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-v500"&gt;
  &lt;/a&gt;
  What's in v5.0.0?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#parallel-tests"&gt;
  &lt;/a&gt;
  Parallel tests:
&lt;/h3&gt;

&lt;p&gt;Performance is hard. Prior to v5, the default &lt;strong&gt;Betterer&lt;/strong&gt; reporter would struggle pretty badly, especially when lots of tests were running and producing lots of issues. That was because the main thread was responsible for updating the reporter output &lt;em&gt;and&lt;/em&gt; running all the tests.&lt;/p&gt;

&lt;p&gt;To fix this, &lt;strong&gt;Betterer&lt;/strong&gt; will now execute all your tests using &lt;a href="https://nodejs.org/api/worker_threads.html"&gt;Node.js Worker Threads&lt;/a&gt;! That frees up the main thread to focus on rendering and also means that multiple tests can run at the same time. Getting this to work required breaking some APIs, so your &lt;a href="https://phenomnomnominal.github.io/betterer/docs/test-definition-file"&gt;test definition file&lt;/a&gt; needs to change:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  Before:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .betterer.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BettererTest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@betterer/betterer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererTest&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="c1"&gt;// ... test config&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my other test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererTest&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="c1"&gt;// ... test config&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  After:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .betterer.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BettererTest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@betterer/betterer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererTest&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="c1"&gt;// ... test config&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my other test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererTest&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="c1"&gt;// ... test config&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But never fear, you can use the &lt;code&gt;betterer upgrade&lt;/code&gt; command to do this migration for you! Just running &lt;code&gt;betterer upgrade&lt;/code&gt; will show you what the migration will look like, and &lt;code&gt;betterer upgrade --save&lt;/code&gt; will actually update your files. Easy ‚ú®. The &lt;code&gt;betterer upgrade&lt;/code&gt; command will be used in the future when I (most probably) break more stuff.&lt;/p&gt;

&lt;p&gt;Check out the &lt;strong&gt;beast&lt;/strong&gt; of a PR &lt;a href="https://github.com/phenomnomnominal/betterer/pull/815"&gt;here&lt;/a&gt; (and yes, it took me three branches to get it right üòÖ)&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#betterer-angular"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Betterer&lt;/strong&gt; ‚ù§Ô∏è &lt;strong&gt;Angular&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;I've published a new &lt;strong&gt;Betterer&lt;/strong&gt; test for incrementally adding &lt;a href="https://angular.io/guide/angular-compiler-options"&gt;&lt;strong&gt;Angular&lt;/strong&gt; compiler configuration&lt;/a&gt; to a project! I'm pretty excited by this, as there are a lot of &lt;em&gt;big&lt;/em&gt; Angular codebases out there that don't utilise the full power of the Angular compiler. In particular, I think &lt;strong&gt;Betterer&lt;/strong&gt; could be a good way to introduce the &lt;a href="https://angular.io/guide/template-typecheck#strict-mode"&gt;&lt;code&gt;strictTemplates&lt;/code&gt;&lt;/a&gt; option. You can now do that with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//.betterer.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;angular&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@betterer/angular&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;strict templates&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./tsconfig.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;strictTemplates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/**/*.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/**/*.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Expect to see a full post detailing this in the near future!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#simpler-raw-bettererfiletest-endraw-"&gt;
  &lt;/a&gt;
  Simpler &lt;code&gt;BettererFileTest&lt;/code&gt;:
&lt;/h3&gt;

&lt;p&gt;The old &lt;code&gt;BettererFileTest&lt;/code&gt; API was a bit clunky and confusing due to the &lt;code&gt;BettererFileResolver&lt;/code&gt; thing. I've hidden that away in the internals, so now the public API is less clunky and confusing:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  Before:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BettererFileResolver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BettererFileTest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@betterer/betterer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFileTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererFileResolver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererFileTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filePaths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fileTestResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// test implementation...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  After:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BettererFileTest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@betterer/betterer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFileTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BettererFileTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filePaths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fileTestResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// test implementation...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Smaller public API, less magic, and you only have to use it if you know why, choice! üëç&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#improved-workflow"&gt;
  &lt;/a&gt;
  Improved workflow:
&lt;/h3&gt;

&lt;p&gt;I'm still working on figuring out the ideal &lt;strong&gt;Betterer&lt;/strong&gt; workflow. For now, I recommend running &lt;strong&gt;Betterer&lt;/strong&gt; in &lt;a href="https://phenomnomnominal.github.io/betterer/docs/running-betterer#pre-commit-mode"&gt;Pre-commit mode&lt;/a&gt; as a pre-commit hook (perhaps using &lt;a href="https://typicode.github.io/husky"&gt;husky&lt;/a&gt; and &lt;a href="https://github.com/okonet/lint-staged"&gt;lint-staged&lt;/a&gt;) and in &lt;a href="https://phenomnomnominal.github.io/betterer/docs/running-betterer#ci-mode"&gt;CI mode&lt;/a&gt; on your build server.&lt;/p&gt;

&lt;p&gt;But one thing about &lt;strong&gt;chonky&lt;/strong&gt; codebases is that they often have &lt;em&gt;lots&lt;/em&gt; of contributors! Lots of contributors making changes (and making things better) means that üëª &lt;em&gt;merge&lt;/em&gt; &lt;em&gt;conflicts&lt;/em&gt; üëª in the &lt;a href="https://phenomnomnominal.github.io/betterer/docs/results-file"&gt;results file&lt;/a&gt; are quite common!&lt;/p&gt;

&lt;p&gt;To try to help with resolving merge conflicts, I've introduced the &lt;code&gt;betterer merge&lt;/code&gt; command. You can still fix merge conflicts manually, but &lt;code&gt;betterer merge&lt;/code&gt; will do it for you! If you're as lazy as me, you can even enable &lt;code&gt;automerge&lt;/code&gt; and you'll never have to think about merging the results file ever again (I hope, this could still be buggy üêõüòÖ.&lt;/p&gt;

&lt;p&gt;To enable automerge run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;betterer init &lt;span class="nt"&gt;--automerge&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#improved-caching"&gt;
  &lt;/a&gt;
  Improved caching:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Betterer&lt;/strong&gt; got some cool (ish) &lt;a href="https://phenomnomnominal.github.io/betterer/docs/cache"&gt;caching&lt;/a&gt; implemented in v4, but turns out caching is a hard problem (üòÖ), so it's &lt;a href="https://github.com/phenomnomnominal/betterer/pull/712"&gt;taken&lt;/a&gt; &lt;a href="https://github.com/phenomnomnominal/betterer/pull/746/files"&gt;a&lt;/a&gt; &lt;a href="https://github.com/phenomnomnominal/betterer/pull/819/files"&gt;little&lt;/a&gt; bit to get right. &lt;/p&gt;

&lt;p&gt;It works by passing the &lt;code&gt;--cache&lt;/code&gt; flag when running &lt;strong&gt;Betterer&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;betterer &lt;span class="nt"&gt;--cache&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That will create a file something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"testCache"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"no hack comments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"packages/angular/src/angular.ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"b66de728222febdecb3cf11d3aa510b3a8a6ae0e37c0539e37787964573a56ad1b7eb6ee378a9087"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"packages/angular/src/index.ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"b66de728222febdecb3cf11d3aa510b3a8a6ae0eb9494122f82a750085fc20d2c3b0f14b34897431"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"packages/betterer/src/betterer.ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"b66de728222febdecb3cf11d3aa510b3a8a6ae0e94efcd2f99a4cf14222c400693335ac1b94696bb"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Betterer&lt;/strong&gt; will use this cache to only re-test files that have actually changes, so it can be &lt;em&gt;much&lt;/em&gt; faster (useful for running on &lt;a href="https://phenomnomnominal.github.io/betterer/docs/running-betterer#pre-commit-mode"&gt;pre-commit&lt;/a&gt;!) I suspect there are still issues here, so please try it out and create issues. üôå&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#bug-fixes-and-improvements"&gt;
  &lt;/a&gt;
  Bug fixes and improvements:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/phenomnomnominal/betterer/pull/828/files"&gt;&lt;code&gt;betterer results&lt;/code&gt;&lt;/a&gt; command to get a quick summary:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kj2DFq98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tvzavtxwithpzxge39ut.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kj2DFq98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tvzavtxwithpzxge39ut.png" alt="An example of Betterer's results summary output" width="880" height="309"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/phenomnomnominal/betterer/issues/831"&gt;Negative filters&lt;/a&gt;. I already suspect I'll regret this, but you can now use &lt;code&gt;"!"&lt;/code&gt; at the start of a filter to negate it. Now &lt;code&gt;--filter myTest&lt;/code&gt; will just run &lt;code&gt;"myTest"&lt;/code&gt;, and &lt;code&gt;--filter !myTest&lt;/code&gt; will run every other test.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rewrote most of the &lt;a href="https://phenomnomnominal.github.io/betterer/docs/index"&gt;public API docs&lt;/a&gt;. These are now generated from the code, so should &lt;em&gt;hopefully&lt;/em&gt; be easier to keep up to date. ü§û&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Removed a bunch of stuff from the public API. This means more consistency, and I'll be less likely to accidentally break stuff in the future. üòá&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks ‚ù§Ô∏è
&lt;/h2&gt;

&lt;p&gt;Huge thanks to everyone who has helped me with this stuff, if you've read my &lt;a href="https://twitter.com/phenomnominal/status/1453511720098541569"&gt;rambling, cryptic tweets&lt;/a&gt;, opened &lt;a href="https://github.com/phenomnomnominal/betterer"&gt;issues on Github&lt;/a&gt;, chatted to me about &lt;strong&gt;Betterer&lt;/strong&gt; at conferences, it's all meant a lot! Maybe I'll print some stickers or something? ‚òÄÔ∏è&lt;/p&gt;

&lt;p&gt;Love ü•∞ this? Hate ü§¨ this? Go off in the comments, DM me on Twitter, or be the &lt;strong&gt;third&lt;/strong&gt; person to join the &lt;a href="https://discord.com/invite/YNgtXt6QVX"&gt;&lt;strong&gt;Betterer&lt;/strong&gt; Discord&lt;/a&gt;. Catch you on the line üíª!&lt;/p&gt;

</description>
      <category>incremental</category>
      <category>improvement</category>
      <category>betterer</category>
      <category>release</category>
    </item>
    <item>
      <title>SOLID</title>
      <author>Mauro de Carvalho</author>
      <pubDate>Sat, 13 Nov 2021 00:03:15 +0000</pubDate>
      <link>https://dev.to/mdcg/solid-2de</link>
      <guid>https://dev.to/mdcg/solid-2de</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introdu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Introdu√ß√£o
&lt;/h2&gt;

&lt;p&gt;Recentemente estava buscando ampliar um pouco o meu conhecimento no desenvolvimento back-end, e me deparei com um projeto super legal chamado &lt;strong&gt;Web Developer Roadmap 2021&lt;/strong&gt;, criado por Kamran Ahmed. Basicamente, este estipula alguns ‚Äúcaminhos‚Äù a se seguir para voc√™ iniciar/melhorar o seu conhecimento acerca do desenvolvimento front-end, back-end e devOps. Vale a pena dar uma conferida se voc√™, assim como eu, tem uma certa dificuldade, dada a grande variedade de tecnologias existentes, de saber onde focar seus estudos.&lt;/p&gt;

&lt;p&gt;Na introdu√ß√£o deste roadmap, existe uma lista de no√ß√µes/tecnologias/metodologias a serem entendidas independente do caminho que voc√™ for seguir. Alguns deles eu j√° domino, como Git, uso b√°sico do terminal, estruturas de dados e licen√ßas. Por√©m, ainda n√£o me sinto confort√°vel com os demais ‚Äúrequisitos‚Äù listados nesta introdu√ß√£o, por isso, irei documentar aqui no Dev.to um pouco dos meus estudos acerca deles.&lt;/p&gt;

&lt;p&gt;Vale ressaltar que talvez essa publica√ß√£o n√£o seja o suficiente para voc√™ se aprofundar no tema-chave (indicado pelo t√≠tulo). Por√©m, ainda assim vale a leitura, j√° que talvez a minha vis√£o possa agregar um pouco nos seus conhecimentos em rela√ß√£o ao assunto. Ent√£o sem mais delongas, vamos iniciar o nosso assunto sobre SOLID!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9"&gt;
  &lt;/a&gt;
  O que √©?
&lt;/h2&gt;

&lt;p&gt;Basicamente, &lt;strong&gt;SOLID&lt;/strong&gt; √© um acr√¥nimo criado por Michael Feathers para &lt;strong&gt;cinco princ√≠pios&lt;/strong&gt; de design na programa√ß√£o orientada a objetos, com o intuito de criar projetos de software mais compreens√≠veis, flex√≠veis e manuten√≠veis. S√£o eles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Single Responsibility Principle - SRP&lt;/em&gt;&lt;/strong&gt; (Princ√≠pio da responsabilidade √∫nica)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Open Closed Principle - OCP&lt;/em&gt;&lt;/strong&gt; (Princ√≠pio do aberto/fechado)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Liskov Substitution Principle - LSP&lt;/em&gt;&lt;/strong&gt; (Princ√≠pio da substitui√ß√£o de Liskov)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Interface Segregation Principle - ISP&lt;/em&gt;&lt;/strong&gt; (Princ√≠pio da segrega√ß√£o de interfaces)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Dependency Inversion Principle - DIP&lt;/em&gt;&lt;/strong&gt; (Princ√≠pio da invers√£o de depend√™ncia)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#o-primeiro-princ%C3%ADpio-srp"&gt;
  &lt;/a&gt;
  O primeiro princ√≠pio: SRP
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;‚Äúuma classe deve ter apenas uma √∫nica responsabilidade.‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A descri√ß√£o mais clara e formal deste princ√≠pio diz que &lt;strong&gt;a classe deve ter uma, e apenas uma, raz√£o para mudar&lt;/strong&gt;. Em outras palavras, poder√≠amos dizer que uma classe deve ser especializada em um √∫nico objetivo dentro do software, ou seja, ela deve executar/desempenhar uma √∫nica tarefa/a√ß√£o. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#o-segundo-princ%C3%ADpio-ocp"&gt;
  &lt;/a&gt;
  O segundo princ√≠pio: OCP
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;"entidades de software devem ser abertas para extens√£o, mas fechadas para modifica√ß√£o."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Em resumo, para termos classes ainda mais coesas e de f√°cil evolu√ß√£o, elas devem ser modeladas de modo que quando houver mudan√ßas nas regras de neg√≥cios, que n√£o haja a necessidade de altera√ß√£o no c√≥digo original, mas sim que o comportamento deste possa ser estendido com facilidade.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#o-terceiro-princ%C3%ADpio-lsp"&gt;
  &lt;/a&gt;
  O terceiro princ√≠pio: LSP
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;‚Äúobjetos em um programa devem ser substitu√≠veis por inst√¢ncias de seus subtipos, sem alterar a funcionalidade do programa.‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;O princ√≠pio de substitui√ß√£o de Liskov leva esse nome por ter sido criado por &lt;strong&gt;Barbara Liskov&lt;/strong&gt; que introduziu este conceito em uma confer√™ncia em 1987 e, posteriormente, em 1994 no artigo &lt;strong&gt;&lt;em&gt;Family Values: A behavioral Notion of Subtyping&lt;/em&gt;&lt;/strong&gt; juntamente com Jeannette Wing. A defini√ß√£o original desse princ√≠pio, de forma resumida, √© a seguinte:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Se q(x) √© uma propriedade demonstr√°vel dos objetos x de tipo T. Ent√£o q(y) deve ser verdadeiro para objetos y de tipo S onde S √© um subtipo de T.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Em outras palavras, toda e qualquer classe derivada deve poder ser usada como se fosse a classe base. Este princ√≠pio tem algo bem parecido com a &lt;em&gt;metodologia do projeto por contrato&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Precondi√ß√µes n√£o podem ser refor√ßadas em uma sub-classe. Isto significa que n√£o √© permitida uma sub-classe com precondi√ß√µes mais fortes que a sua super-classe;&lt;/li&gt;
&lt;li&gt;P√≥s-condi√ß√µes n√£o podem ser enfraquecidas em uma sub-classe. Isto significa que n√£o √© permitida uma sub-classe que cont√©m condi√ß√µes posteriores mais fracas que a super-classe.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#o-quarto-princ%C3%ADpio-isp"&gt;
  &lt;/a&gt;
  O quarto princ√≠pio: ISP
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;‚Äúmuitas interfaces de clientes espec√≠ficas, s√£o melhores do que uma para todos prop√≥sitos.‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Esse √© um princ√≠pio um pouco mais simples que os anteriores. Em resumo, basicamente ele diz que √© melhor criar interfaces mais espec√≠ficas ao inv√©s de uma √∫nica interface gen√©rica. Uma classe n√£o deve ser for√ßada a implementar interfaces e m√©todos que n√£o ir√£o utilizar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#o-quinto-princ%C3%ADpio-dip"&gt;
  &lt;/a&gt;
  O quinto princ√≠pio: DIP
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;‚Äúdeve-se depender de abstra√ß√µes, n√£o de objetos concretos.‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;De acordo com &lt;strong&gt;Robert Martin&lt;/strong&gt; (Uncle Bob), este princ√≠pio pode ser definido da seguinte forma:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;M√≥dulos de alto n√≠vel n√£o devem depender de m√≥dulos de baixo n√≠vel. Ambos devem depender da abstra√ß√£o;&lt;/li&gt;
&lt;li&gt;Abstra√ß√µes n√£o devem depender de detalhes. Detalhes devem depender de abstra√ß√µes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Abstra√ß√µes tendem a ser est√°veis, j√° as implementa√ß√µes, inst√°veis. Caso uma classe qualquer precise depender de outro m√≥dulo, seria interessante que esta seja uma abstra√ß√£o. Tente ao m√°ximo n√£o depender de outras implementa√ß√µes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; N√£o confunda &lt;strong&gt;Invers√£o de depend√™ncia&lt;/strong&gt; com &lt;strong&gt;Inje√ß√£o de depend√™ncia&lt;/strong&gt;. S√£o duas coisas diferentes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclus√£o
&lt;/h2&gt;

&lt;p&gt;Como dito anteriormente, esse √© um resumo bem superficial e talvez n√£o seja o suficiente para voc√™ se aprofundar no assunto. Contudo, deixo aqui a recomenda√ß√£o de um livro muito bom que abriu muito a minha mente sobre SOLID:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Orienta√ß√£o a Objetos e SOLID para Ninjas&lt;/strong&gt; - &lt;em&gt;Projetando classes flex√≠veis&lt;/em&gt;, de Mauricio Aniche. Voc√™ pode adquirir esse livro clicando &lt;a href="https://www.casadocodigo.com.br/products/livro-oo-solid"&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Obrigado pela leitura e at√© a pr√≥xima! ;)&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>resume</category>
      <category>oop</category>
      <category>programming</category>
    </item>
    <item>
      <title>Javascript Superpower - Higher Order Function</title>
      <author>Fadhil Radhian</author>
      <pubDate>Fri, 12 Nov 2021 23:47:50 +0000</pubDate>
      <link>https://dev.to/fadhilradh/javascript-superpower-higher-order-function-4inn</link>
      <guid>https://dev.to/fadhilradh/javascript-superpower-higher-order-function-4inn</guid>
      <description>&lt;p&gt;Yes I know, Higher Order Function seems a little bit daunting at first. &lt;/p&gt;

&lt;p&gt;Higher order? What does order even mean ?&lt;/p&gt;

&lt;p&gt;Don't worry, I will explain it to you with human language üòé&lt;/p&gt;

&lt;p&gt;Actually its concept is very simple.&lt;/p&gt;

&lt;p&gt;It is just a function that takes a parameter (like normal function!) but its parameter is not a value.&lt;/p&gt;

&lt;p&gt;So what it is then ?&lt;/p&gt;

&lt;p&gt;Its parameter is some part of its functionality.&lt;/p&gt;

&lt;p&gt;But why ?&lt;/p&gt;

&lt;p&gt;Let's step back a little bit.&lt;/p&gt;

&lt;p&gt;In your journey as a programmer, you must have seen two functions that do stuff similarly, with only minor difference.&lt;/p&gt;

&lt;p&gt;Sometimes you feel like "Hmm.. why I need to write this again? It is very similar to that one". üòë&lt;/p&gt;

&lt;p&gt;You feel like they should have be a one reusable function, and that minor difference is passed through the function's parameter.&lt;/p&gt;

&lt;p&gt;Just like normal functions with different values as their parameter.&lt;/p&gt;

&lt;p&gt;But how we do it ?&lt;/p&gt;

&lt;p&gt;We do it with, yes, &lt;strong&gt;Higher Order Function&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Basically, Higher Order function is a &lt;em&gt;reusable function that takes a part of its functionality from its parameter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Its purpose is one : Generalizing our function. To make it reusable in many places in our code with similar but slightly different use case.&lt;/p&gt;

&lt;p&gt;Cool, isn't it ?&lt;/p&gt;

&lt;p&gt;It is in accordance to key programming principle :&lt;br&gt;
Don't Repeat Yourself (DRY).&lt;/p&gt;

&lt;p&gt;And if you're like me, I like to write something that can be used in different places.&lt;/p&gt;

&lt;p&gt;It feels like I invent something, and it feels satisfying.&lt;/p&gt;

&lt;p&gt;Now let's start with a little bit of example.&lt;/p&gt;

&lt;p&gt;Let's suppose we have a function that takes and array and return array with elements divided by 2 :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IYekFWUd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ds3hf7rw83wv6q4gassn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IYekFWUd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ds3hf7rw83wv6q4gassn.png" alt="Image description" width="663" height="422"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Yes, I know this example use that 'cruel' for loop. It is on purpose, to make a function that somewhat long but simple to understand)&lt;/p&gt;

&lt;p&gt;Now, in other place in our code, we have that 'similar but little different' function with the previous one :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QDrGIcqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amow3o3zos1z5gorlt1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QDrGIcqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amow3o3zos1z5gorlt1z.png" alt="Image description" width="880" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, we have 'that' type of function, again, somewhere else in our code :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vCeeeh4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qv8r0hj1udcm3q1w6spb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vCeeeh4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qv8r0hj1udcm3q1w6spb.png" alt="Image description" width="880" height="422"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it feels repetitive and our code get unnecessarily big. üòû&lt;/p&gt;

&lt;p&gt;I know how you feel.&lt;/p&gt;

&lt;p&gt;And yes, we break DRY principle.&lt;/p&gt;

&lt;p&gt;So, how we simplify these functions then ?&lt;/p&gt;

&lt;p&gt;Simple : &lt;strong&gt;by passing that different part in the function, as parameter&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But can we pass string like " + 3 " and put it in our function ?&lt;/p&gt;

&lt;p&gt;No, we can't do that in Javascript.&lt;/p&gt;

&lt;p&gt;Then, how we do it ?&lt;br&gt;
&lt;em&gt;We make it a function and then, pass it as parameter.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, this is our "Use It Anywhere Function" :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aPXfgK-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g8l80rhqvihxqgedmyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aPXfgK-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g8l80rhqvihxqgedmyi.png" alt="Image description" width="838" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We gave it a general name too, copyArrayAndManipulate()&lt;/p&gt;

&lt;p&gt;We just have to call it with different parameter each time we need slightly different functionality (see the last line).&lt;/p&gt;

&lt;p&gt;Now we have a reusable function, and our code get smaller and abstracted.&lt;/p&gt;

&lt;p&gt;That's it folks!&lt;/p&gt;

&lt;p&gt;Hopefully, now you understand Higher Order Function in Javascript. Congrats! üéâ &lt;/p&gt;

&lt;p&gt;See you next time !&lt;/p&gt;

&lt;p&gt;Reach me at : &lt;br&gt;
&lt;a href="https://www.linkedin.com/in/fadhil-radhian/"&gt;https://www.linkedin.com/in/fadhil-radhian/&lt;/a&gt;&lt;br&gt;
Github : fadhilradh&lt;/p&gt;

&lt;p&gt;Screenshots credit: &lt;br&gt;
Twitter: @willsentance&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>functional</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Remote Development with AWS Cloud9 IDE using a Docker and Docker-Compose application</title>
      <author>Cindy Le</author>
      <pubDate>Fri, 12 Nov 2021 23:41:47 +0000</pubDate>
      <link>https://dev.to/cindyledev/getting-started-with-aws-cloud9-ide-using-a-docker-and-docker-compose-application-35hj</link>
      <guid>https://dev.to/cindyledev/getting-started-with-aws-cloud9-ide-using-a-docker-and-docker-compose-application-35hj</guid>
      <description>&lt;p&gt;In this tutorial, we will be setting up Telescope in AWS Cloud9 IDE. &lt;a href="https://telescope.cdot.systems/"&gt;Telescope&lt;/a&gt; is a tool for tracking blogs around Seneca's open source develop. The application itself has many microservices that use Docker containers and are composed together using Docker-Compose. You can find the GitHub repo &lt;a href="https://github.com/Seneca-CDOT/telescope"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#telescope-tech-stack"&gt;
  &lt;/a&gt;
  Telescope Tech Stack
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Next.js&lt;/li&gt;
&lt;li&gt;Material UI&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;Elasticsearch&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Traefik&lt;/li&gt;
&lt;li&gt;Firebase&lt;/li&gt;
&lt;li&gt;Jest&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#telescope-microservices"&gt;
  &lt;/a&gt;
  Telescope Microservices
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Auth&lt;/li&gt;
&lt;li&gt;Feed-Discovery&lt;/li&gt;
&lt;li&gt;Image&lt;/li&gt;
&lt;li&gt;Parser&lt;/li&gt;
&lt;li&gt;Planet&lt;/li&gt;
&lt;li&gt;Posts&lt;/li&gt;
&lt;li&gt;Search&lt;/li&gt;
&lt;li&gt;Status&lt;/li&gt;
&lt;li&gt;Users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/cloud9/"&gt;AWS Cloud9&lt;/a&gt; is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: The EC2 instance used in this guide is not within AWS's Free-Tier so please see &lt;a href="https://aws.amazon.com/ec2/pricing/on-demand/"&gt;EC2 Pricing&lt;/a&gt; to see if you're comfortable with these costs. Cloud9 has a cost-saving setting to help reduce costs by automatically hibernating after 30 minutes of inactivity. Running Docker in development is CPU intensive so these are the EC2 instances I recommend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Minimum: &lt;code&gt;t2.medium (4 GiB RAM + 2 vCPU)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Recommended: &lt;code&gt;t2.large (8 GiB RAM + 2 vCPU)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Summary of Pricing&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;t2.medium costs \$0.0464 per hour&lt;/li&gt;
&lt;li&gt;t2.large costs \$0.0928 per hour&lt;/li&gt;
&lt;li&gt;30GB Amazon Elastic Block Storage (EBS) costs \$3 per month&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cost Estimate Per Month&lt;/strong&gt;:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;t2.medium&lt;/th&gt;
&lt;th&gt;t2.large&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cost per hour&lt;/td&gt;
&lt;td&gt;\$0.0464&lt;/td&gt;
&lt;td&gt;\$0.0928&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hours per day&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Days per month&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sub-total&lt;/td&gt;
&lt;td&gt;\$11.14&lt;/td&gt;
&lt;td&gt;\$22.27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30GB EBS Volume&lt;/td&gt;
&lt;td&gt;\$3&lt;/td&gt;
&lt;td&gt;\$3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;\$14.14&lt;/td&gt;
&lt;td&gt;\$25.27&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create an &lt;a href="https://aws.amazon.com/"&gt;AWS Account&lt;/a&gt;. You can watch this &lt;a href="https://www.youtube.com/watch?v=3hLmDS179YE&amp;amp;t=10552s"&gt;part&lt;/a&gt; of the AWS Certified Cloud Practitioner course on creating an account if you need help.&lt;/li&gt;
&lt;li&gt;Sign into your AWS Account&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-your-cloud9-environment"&gt;
  &lt;/a&gt;
  Creating your Cloud9 Environment:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;In the upper-right hand corner of your AWS Management Console, select &lt;code&gt;US East (Ohio) us-east-2&lt;/code&gt; as your &lt;code&gt;Region&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gb0iQlu0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_08_11-.png" alt="Select us-east-2 region" width="450" height="287"&gt;
&lt;/li&gt;
&lt;li&gt;In the upper-left hand corner of your AWS Management Console, click on &lt;code&gt;Services&lt;/code&gt;. This is bring up a list of AWS Services, search for &lt;code&gt;Cloud9&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Create Environment&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7rZ4MgK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_14_54-Welcome%2Bto%2BAWS%2BCloud9%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" alt="Create environment" width="880" height="374"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Step 1 - Name environment:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Name: &lt;code&gt;Telescope-Dev&lt;/code&gt; (whatever you want)&lt;/p&gt;

&lt;p&gt;Description (optional): &lt;code&gt;AWS Cloud9 development environment for Telescope&lt;/code&gt;&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lBDCJknR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_15_58-Create%2Ba%2Bnew%2Benvironment%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lBDCJknR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_15_58-Create%2Ba%2Bnew%2Benvironment%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" alt="Step 1" width="880" height="599"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 2 - Configure settings:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Environment type: &lt;code&gt;Create a new EC2 instance for environment (direct access)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Instance type: &lt;code&gt;Other instance type: t2.medium (4 GiB RAM + 2 vCPU)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Platform: &lt;code&gt;Ubuntu Server 18.04 LTS&lt;/code&gt;&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wd1JQQ0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_17_57-Create%2Ba%2Bnew%2Benvironment%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wd1JQQ0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_17_57-Create%2Ba%2Bnew%2Benvironment%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" alt="Step 2a" width="880" height="712"&gt;&lt;/a&gt;&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9R5r9j17--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_19_55-Create%2Ba%2Bnew%2Benvironment%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9R5r9j17--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_19_55-Create%2Ba%2Bnew%2Benvironment%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" alt="Step 2b" width="880" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 3 - Review and click &lt;code&gt;Create Environment&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will take a few minutes for AWS to create your new C9 environment&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#opening-the-ports-on-our-ec2-instance"&gt;
  &lt;/a&gt;
  Opening the ports on our EC2 instance:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Firstly, we'll need the MAC address of our EC2 instance
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -s http://169.254.169.254/latest/meta-data/mac

06:c5:aa:63:ee:f4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vPDsrRnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_30_02-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vPDsrRnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_30_02-.png" alt="Getting MAC address" width="880" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using your EC2 instance's MAC address, we can get a list of Security Groups
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/&amp;lt;your_mac&amp;gt;/security-group-ids

sg-0c63c6f026a2b9288
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Find out what your IP address is using &lt;a href="http://checkip.amazonaws.com/"&gt;http://checkip.amazonaws.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;You will need to authorize your IP address access to ports 3000, 8000, and 8443
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ec2 authorize-security-group-ingress --group-id &amp;lt;sg-id&amp;gt; \
--port 3000 \
--protocol tcp \
--cidr &amp;lt;my-ip&amp;gt;/32
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ec2 authorize-security-group-ingress --group-id &amp;lt;sg-id&amp;gt; \
--port 8000 \
--protocol tcp \
--cidr &amp;lt;my-ip&amp;gt;/32
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ec2 authorize-security-group-ingress --group-id &amp;lt;sg-id&amp;gt; \
--port 8443 \
--protocol tcp \
--cidr &amp;lt;my-ip&amp;gt;/32
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eEQ_wymV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_34_11-Telescope-Dev%2B-%2BAWS%2BCloud9%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eEQ_wymV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_34_11-Telescope-Dev%2B-%2BAWS%2BCloud9%2B%25E2%2580%2594%2BMozilla%2BFirefox.png" alt="Opening the ports" width="880" height="595"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#resize-your-amazon-ebs-volume"&gt;
  &lt;/a&gt;
  Resize your Amazon EBS volume
&lt;/h2&gt;

&lt;p&gt;Check first using &lt;code&gt;df -h&lt;/code&gt; in the terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Filesystem      Size  Used Avail Use% Mounted on
/dev/xvda1      9.7G  9.3G  371M  97% /
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you first create an EC2 instance, it has an EBS Volume of 10GB. To increase it to 20GB, create a new file called &lt;code&gt;resize.sh&lt;/code&gt; in &lt;code&gt;~/environment&lt;/code&gt; directory and copy the following script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/bash

# Specify the desired volume size in GiB as a command-line argument. If not specified, default to 20 GiB.
SIZE=${1:-20}

# Get the ID of the environment host Amazon EC2 instance.
INSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id)

# Get the ID of the Amazon EBS volume associated with the instance.
VOLUMEID=$(aws ec2 describe-instances \
  --instance-id $INSTANCEID \
  --query "Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.VolumeId" \
  --output text)

# Resize the EBS volume.
aws ec2 modify-volume --volume-id $VOLUMEID --size $SIZE

# Wait for the resize to finish.
while [ \
  "$(aws ec2 describe-volumes-modifications \
    --volume-id $VOLUMEID \
    --filters Name=modification-state,Values="optimizing","completed" \
    --query "length(VolumesModifications)"\
    --output text)" != "1" ]; do
sleep 1
done

# Check if we're on an NVMe filesystem
if [ $(readlink -f /dev/xvda) = "/dev/xvda" ]
then
  # Rewrite the partition table so that the partition takes up all the space that it can.
  sudo growpart /dev/xvda 1

  # Expand the size of the file system.
  # Check if we are on AL2
  STR=$(cat /etc/os-release)
  SUB="VERSION_ID=\"2\""
  if [[ "$STR" == *"$SUB"* ]]
  then
    sudo xfs_growfs -d /
  else
    sudo resize2fs /dev/xvda1
  fi

else
  # Rewrite the partition table so that the partition takes up all the space that it can.
  sudo growpart /dev/nvme0n1 1

  # Expand the size of the file system.
  # Check if we're on AL2
  STR=$(cat /etc/os-release)
  SUB="VERSION_ID=\"2\""
  if [[ "$STR" == *"$SUB"* ]]
  then
    sudo xfs_growfs -d /
  else
    sudo resize2fs /dev/nvme0n1p1
  fi
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: AWS Free-Tier includes 30GB of Storage, 2 million I/Os, and 1GB of snapshot storage with &lt;a href="https://aws.amazon.com/ebs/pricing/"&gt;Amazon Elastic Block Store (EBS)&lt;/a&gt; free for 12 months.&lt;/p&gt;

&lt;p&gt;In the terminal, execute the script by running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sh resize.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Verify size change with &lt;code&gt;df -h&lt;/code&gt; again&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Filesystem      Size  Used Avail Use% Mounted on
/dev/xvda1       20G  9.3G   11G  48% /
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-dockercompose"&gt;
  &lt;/a&gt;
  Install Docker-Compose
&lt;/h2&gt;

&lt;p&gt;By default, Docker is installed on AWS EC2's Ubuntu but Docker-Compose is not, so we have to install it ourselves.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run to download the current stable version of Docker-Compose:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Apply executable permissions to the downloaded file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo chmod +x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Check installation using:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker-compose --version

docker-compose version 1.29.2, build 5becea4c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-the-telescope-repository-in-cloud9"&gt;
  &lt;/a&gt;
  Setting up the Telescope repository in Cloud9:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;In the terminal, clone the Telescope repository and name the remote &lt;code&gt;upstream&lt;/code&gt; by entering
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone -o upstream https://github.com/Seneca-CDOT/telescope.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Change to the telescope directory
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd telescope
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Set all the necessary environment variables in your env.remote file to contain your EC2 instance's public IPv4 address by executing the &lt;code&gt;aws-ip.sh&lt;/code&gt; script
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sh ./tools/aws-ip.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#if-you-did-everything-correctly-youve-completed-the-environment-setup-using-aws-cloud9-yay"&gt;
  &lt;/a&gt;
  If you did everything correctly, you've completed the environment setup using AWS Cloud9! Yay!
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#now-to-get-started-with-development"&gt;
  &lt;/a&gt;
  Now to get started with development...
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Install all depenencies
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Start all Telescope services. This will take some time to complete
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose --env-file .env up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Start the Telescope development server on Port 3000
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PORT=3000 npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Find your EC2 instance's public IPv4
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -s http://169.254.169.254/latest/meta-data/public-ipv4

35.174.16.133
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open &lt;code&gt;&amp;lt;public-ip&amp;gt;:8000&lt;/code&gt; browser tab to see Telescope running on a AWS Cloud9 environment!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open &lt;code&gt;&amp;lt;public-ip&amp;gt;:3000/feeds&lt;/code&gt; in another browser tab to see all the feeds in the backend&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open &lt;code&gt;&amp;lt;public-ip&amp;gt;:8443/v1/&amp;lt;microservice-port&amp;gt;&lt;/code&gt; in another browser tab to see the microservices. For example &lt;code&gt;35.174.16.133:8443/v1/posts&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IfIyuz_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_54_59-Mozilla%2BFirefox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IfIyuz_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://seneca-cdot-telescope.s3.amazonaws.com/aws-cloud9/2021-10-26%2B09_54_59-Mozilla%2BFirefox.png" alt="Ports 3000 and 8000 opened in browser" width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frequently-asked-questions-faq"&gt;
  &lt;/a&gt;
  Frequently Asked Questions (FAQ)
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#whats-in-raw-awsipsh-endraw-"&gt;
  &lt;/a&gt;
  What's in &lt;code&gt;aws-ip.sh&lt;/code&gt;?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ipv4=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)

sed -r \
  -e  "s@(.+=)http://localhost:8000(/[^ ]*)*@\1http://$ipv4:3000\2@g" \
  -e  "s@(.+=)http://localhost:3000(/[^ ]*)*@\1http://$ipv4:8000\2@g" \
  -e  "s@(.+=)http://localhost([^:]*)@\1http://$ipv4:8443\2@g" \
  -e  "s@development\.yml@gitpod\.yml@" \
  config/env.development &amp;gt; .env

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-do-i-stop-my-docker-containers"&gt;
  &lt;/a&gt;
  How do I stop my docker containers?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run services:stop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-do-i-delete-my-docker-containers"&gt;
  &lt;/a&gt;
  How do I delete my docker containers?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker system prune -af --volumes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#i-think-i-have-multiple-services-using-the-same-port-how-i-can-check"&gt;
  &lt;/a&gt;
  I think I have multiple services using the same port, how I can check?
&lt;/h3&gt;

&lt;p&gt;To see a list of all running services and what ports they're binding to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo lsof -i -P -n | grep LIST
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#i-cant-open-8000-running-what-could-i-be-doing-wrong"&gt;
  &lt;/a&gt;
  I can't open :8000 running, what could I be doing wrong?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you have a VPN on, turn it off and get your IP address by visiting &lt;a href="http://checkip.amazonaws.com/"&gt;http://checkip.amazonaws.com/&lt;/a&gt; then allow your IP address to access the ports 3000 and 8000.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS may change your EC2 instance IP address when you stop or restart your EC2 instance. One solution is to purchase an &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#eip-basics"&gt;Elastic IP address&lt;/a&gt; to reserve the particular public IP address. However, you can just clean out the &lt;code&gt;env.remote&lt;/code&gt; and &lt;code&gt;.env&lt;/code&gt; files and run the &lt;code&gt;./tools/aws-ip.sh&lt;/code&gt; script again to set your new EC2 IP address in the appropriate environment variables. Just remember to use the new EC2 IP address in the browser as well.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=RrKRN9zRBWs"&gt;AWS Certified Developer - Associate 2020&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>docker</category>
      <category>devops</category>
    </item>
    <item>
      <title>Learn Scheme by Example: Tk GUI with Chicken Scheme</title>
      <author>Matthew D. Miller</author>
      <pubDate>Fri, 12 Nov 2021 21:51:55 +0000</pubDate>
      <link>https://dev.to/goober99/learn-scheme-by-example-tk-gui-with-chicken-scheme-3cn9</link>
      <guid>https://dev.to/goober99/learn-scheme-by-example-tk-gui-with-chicken-scheme-3cn9</guid>
      <description>&lt;p&gt;PS/Tk stands for a portable Scheme interface to the Tk GUI toolkit. It has a rich history going all the way back to Scheme_wish by Sven Hartrumpf in 1997. Wolf-Dieter Busch created a Chicken port called Chicken/Tk in 2004. It took on its current name when Nils M Holm stripped it of Chicken-isms to make it portable amongst Scheme implementations in 2006.&lt;/p&gt;

&lt;p&gt;If you've ever tried to write portable Scheme, you know that, except for the most trivial of programs, it is much easier said than done. Holm's &lt;code&gt;pstk.scm&lt;/code&gt; had a configurable section titled &lt;code&gt;NON-PORTABLE&lt;/code&gt; that you had to configure for your chosen implementation. It came full circle and was repackaged as a Chicken egg.&lt;/p&gt;

&lt;p&gt;Chicken is a popular Scheme implementation that compiles Scheme to C. Eggs are Chicken-specific extenstion libraries that are stored in a centralized repository (like CPAN but for Chicken Scheme). Instead of building yet another calculator, let's build a GUI for generating a tone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1wZ6z-7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goober99/lisp-gui-examples/master/screenshots/pstk.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1wZ6z-7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goober99/lisp-gui-examples/master/screenshots/pstk.png%3Fraw%3Dtrue" alt="Screenshot" title="Example screenshot" width="489" height="244"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll need Chicken installed. It's available in the repositories of most Linux distros. PS/Tk interfaces with Tk, not with C library bindings, but with a named pipe to &lt;code&gt;tclsh8.6&lt;/code&gt;. The TCL package in most Linux distros will provide this. For Debian, I did &lt;code&gt;sudo apt install chicken-bin tcl tk&lt;/code&gt;. Once Chicken is installed, you can use the &lt;code&gt;chicken-install&lt;/code&gt; utility that comes with it to install the PS/Tk egg.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;chicken-install &lt;span class="nt"&gt;-sudo&lt;/span&gt; pstk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you think of Tk, you may think of something that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dZb0FlVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goober99/lisp-gui-examples/master/screenshots/tk-old.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dZb0FlVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goober99/lisp-gui-examples/master/screenshots/tk-old.png%3Fraw%3Dtrue" alt="Screenshot" title="Legacy Tk open dialog" width="426" height="263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tk has come a long way in recent years. Tcl/Tk 8.5 and later comes with a new set of widgets built in called Tile or Ttk that can be themed. These widgets are available alongside the classic widgets, so you have to explicitly tell your app to use Ttk or else it will end up looking like it was designed for a 1980s Unix workstation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;import&lt;/span&gt; &lt;span class="nv"&gt;pstk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk-start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ttk-map-widgets&lt;/span&gt; &lt;span class="ss"&gt;'all&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; Use the Ttk widget set&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/wm&lt;/span&gt; &lt;span class="ss"&gt;'title&lt;/span&gt; &lt;span class="nv"&gt;tk&lt;/span&gt; &lt;span class="s"&gt;"Bleep"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk-event-loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All PS/Tk function names begin with &lt;code&gt;tk/&lt;/code&gt; or &lt;code&gt;tk-&lt;/code&gt; (or &lt;code&gt;ttk/&lt;/code&gt; and &lt;code&gt;ttk-&lt;/code&gt; for the few Ttk-specific functions). The &lt;a href="https://github.com/utz82/pstk/tree/master/doc"&gt;doc directory&lt;/a&gt; in the PS/Tk GitHub repo unfortunately has not been updated since this convention was adopted. One example from the docs is &lt;code&gt;start-tk&lt;/code&gt; which is now &lt;code&gt;tk-start&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ttk-map-widgets&lt;/code&gt; function is what tells Tk to use the Ttk widgets instead of the classic widgets. Tk comes with a few built-in themes. The default themes on Windows and macOS supposedly do a decent job of approximating the look of native widgets on those platforms. I don't use either of those platforms, so I can't verify this first hand. For some reason, the default theme on Linux is vaguely Windows 95ish. It comes with a built-in theme called &lt;a href="https://wiki.tcl-lang.org/page/ttk%3A%3Atheme%3A%3Aclam"&gt;clam&lt;/a&gt; that is supposed to provide "a look somewhat like a Linux application". You can set this theme with &lt;code&gt;(ttk/set-theme "clam")&lt;/code&gt;, but it's really not that much of an improvement.&lt;/p&gt;

&lt;p&gt;Ideally, something like &lt;a href="https://github.com/Geballin/gtkTtk"&gt;gtkTtk&lt;/a&gt; that has GTK do the actual drawing would be integrated into Tcl/Tk and become the default on Linux. In the meantime, there are &lt;a href="https://ttkthemes.readthedocs.io/en/latest/themes.html"&gt;third party themes&lt;/a&gt; that imitate the look and feel of the most popular GTK and Qt themes. I use MATE with the Arc GTK theme, so I went with the Arc theme. There was even a Debian package for it (&lt;code&gt;sudo apt install tcl-ttkthemes&lt;/code&gt;). We can then &lt;a href="https://blog.serindu.com/2019/03/07/applying-tk-themes-to-git-gui/"&gt;apply the theme system wide&lt;/a&gt; (&lt;code&gt;echo '*TkTheme: arc' | xrdb -merge -&lt;/code&gt;), so that all Tk apps such as git-gui also inherit the theme. It is probably better to give your Linux users instructions on how to install their own theme instead of hard coding one with &lt;code&gt;ttk/set-theme&lt;/code&gt;, so they can choose one that matches their system theme (KDE users might pick Breeze while Ubuntu users might opt for Yaru). The screenshots in this tutorial use the Arc theme.&lt;/p&gt;

&lt;p&gt;We set the window title with &lt;code&gt;tk/wm&lt;/code&gt; and start the event loop with &lt;code&gt;tk-event-loop&lt;/code&gt;. We now have an empty window. Now let's add some widgets to this window.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;slider&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'scale&lt;/span&gt; &lt;span class="ss"&gt;'from:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="ss"&gt;'to:&lt;/span&gt; &lt;span class="mi"&gt;20000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;slider&lt;/span&gt; &lt;span class="ss"&gt;'set&lt;/span&gt; &lt;span class="mi"&gt;440&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/grid&lt;/span&gt; &lt;span class="nv"&gt;slider&lt;/span&gt; &lt;span class="ss"&gt;'row:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ss"&gt;'columnspan:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ss"&gt;'sticky:&lt;/span&gt; &lt;span class="ss"&gt;'ew&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="ss"&gt;'pady:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Widgets are organized hierarchically. This is done by invoking a parent widget with the sub-command &lt;code&gt;create-widget&lt;/code&gt;. PS/Tk associates a widget named &lt;code&gt;tk&lt;/code&gt; with the top-level window, so most widgets will start as a call to &lt;code&gt;tk&lt;/code&gt; (e.g. &lt;code&gt;(tk 'create-widget 'label 'text: "Hello, World!")&lt;/code&gt;). Options are quoted and get a trailing colon (e.g. &lt;code&gt;'text: "Hello, World!"&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Creating a widget returns a Scheme function. If you give this function a name, you can call it with sub-commands such as &lt;code&gt;configure&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, and &lt;code&gt;set&lt;/code&gt;. Just creating a widget doesn't make it appear on screen. For that you need a geometry manager, of which Tk has three: the packer, the gridder, and the placer (&lt;code&gt;tk/pack&lt;/code&gt;, &lt;code&gt;tk/grid&lt;/code&gt;, and &lt;code&gt;tk/place&lt;/code&gt; in Scheme, respectively).&lt;/p&gt;

&lt;p&gt;The range of frequencies audible by humans is typically between 20 Hz and 20 KHz (we lose the ability to hear some of those higher frequencies as we age). The &lt;a href="https://en.wikipedia.org/wiki/A440_(pitch_standard)"&gt;musical note A above middle C&lt;/a&gt; is 440 Hz. Since A4 serves as a general tuning standard, it seems like a sensible default, but if you run the above in Chicken, this is what you'll see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6g2opxKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goober99/lisp-gui-examples/master/screenshots/pstk-linearslider.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6g2opxKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/goober99/lisp-gui-examples/master/screenshots/pstk-linearslider.png%3Fraw%3Dtrue" alt="Slider" title="Slider showing 440 using a linear scale" width="160" height="99"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The scale of 20 to 20,000 is so large that 440 doesn't appear to move the slider at all. Ideally, 440 would fall about the middle of the slider. To achieve this, let's use a logarithmic scale.&lt;/p&gt;

&lt;p&gt;I found a &lt;a href="https://stackoverflow.com/questions/846221/logarithmic-slider/846249#846249"&gt;Stack Overflow answer&lt;/a&gt; on how to map a slider to a logarithmic scale. The code given in the answer is JavaScript, but it was easy enough to port to Scheme.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="c1"&gt;; Scale used by slider&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;*min-position*&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;*max-position*&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;; Range of frequencies&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;*min-frequency*&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;*max-frequency*&lt;/span&gt; &lt;span class="mi"&gt;20000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;; Logarithmic scale for frequency (so middle A [440] falls about in the middle)&lt;/span&gt;
&lt;span class="c1"&gt;; Adapted from https://stackoverflow.com/questions/846221/logarithmic-slider&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;min-freq&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt; &lt;span class="nv"&gt;*min-frequency*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;max-freq&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt; &lt;span class="nv"&gt;*max-frequency*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;frequency-scale&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;max-freq&lt;/span&gt; &lt;span class="nv"&gt;min-freq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;*max-position*&lt;/span&gt; &lt;span class="nv"&gt;*min-position*&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;; Convert slider position to frequency&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;position-&amp;gt;frequency&lt;/span&gt; &lt;span class="nv"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;exp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;min-freq&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;frequency-scale&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;position&lt;/span&gt; &lt;span class="nv"&gt;*min-position*&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
&lt;span class="c1"&gt;; Convert frequency to slider position&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-&amp;gt;position&lt;/span&gt; &lt;span class="nv"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt; &lt;span class="nv"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;min-freq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;frequency-scale&lt;/span&gt; &lt;span class="nv"&gt;*min-position*&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I added some global parameters to the top of the script. The variable name &lt;code&gt;*min-position*&lt;/code&gt; is just a Lisp naming convention for global parameters. I came up with the range of 0-2,000 by trial and error. It seemed to strike the best balance between each step of the slider making a noticeable change to the frequency while still allowing the user to narrow in on a specific frequency with just the slider.&lt;/p&gt;

&lt;p&gt;Then we create two functions: one that takes the position on the slider and returns the frequency (&lt;code&gt;position-&amp;gt;frequency&lt;/code&gt;) and another that takes a frequency and returns the position on the slider (&lt;code&gt;frequency-position&lt;/code&gt;). Now let's set the initial position of our slider with the &lt;code&gt;frequency-&amp;gt;position&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;slider&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'scale&lt;/span&gt; &lt;span class="ss"&gt;'from:&lt;/span&gt; &lt;span class="nv"&gt;*min-position*&lt;/span&gt; &lt;span class="ss"&gt;'to:&lt;/span&gt; &lt;span class="nv"&gt;*max-position*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;slider&lt;/span&gt; &lt;span class="ss"&gt;'configure&lt;/span&gt; &lt;span class="ss"&gt;'value:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-&amp;gt;position&lt;/span&gt; &lt;span class="mi"&gt;440&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Underneath the slider is a spin box showing the current frequency and buttons to increase/decrease the frequency by one octave.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="c1"&gt;; Create a spin box with a units label&lt;/span&gt;
&lt;span class="c1"&gt;; Returns frame widget encompassing both spin box and label and the spin box&lt;/span&gt;
&lt;span class="c1"&gt;; widget itself. This way you can access the value of the spin box.&lt;/span&gt;
&lt;span class="c1"&gt;; e.g. (define-values (box-with-label just-box) (units-spinbox 1 12 6 "inches"))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;units-spinbox&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;initial&lt;/span&gt; &lt;span class="nv"&gt;units&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;container&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'frame&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;spinbox&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;container&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'spinbox&lt;/span&gt; &lt;span class="ss"&gt;'from:&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="ss"&gt;'to:&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt;
                             &lt;span class="ss"&gt;'width:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-length&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;number-&amp;gt;string&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;label&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;container&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'label&lt;/span&gt; &lt;span class="ss"&gt;'text:&lt;/span&gt; &lt;span class="nv"&gt;units&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;spinbox&lt;/span&gt; &lt;span class="ss"&gt;'set&lt;/span&gt; &lt;span class="nv"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/pack&lt;/span&gt; &lt;span class="nv"&gt;spinbox&lt;/span&gt; &lt;span class="nv"&gt;label&lt;/span&gt; &lt;span class="ss"&gt;'side:&lt;/span&gt; &lt;span class="ss"&gt;'left&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;values&lt;/span&gt; &lt;span class="nv"&gt;container&lt;/span&gt; &lt;span class="nv"&gt;spinbox&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;lower-button&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'button&lt;/span&gt; &lt;span class="ss"&gt;'text:&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;define-values&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-ext&lt;/span&gt; &lt;span class="nv"&gt;frequency-int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;units-spinbox&lt;/span&gt; &lt;span class="nv"&gt;*min-frequency*&lt;/span&gt; &lt;span class="nv"&gt;*max-frequency*&lt;/span&gt; &lt;span class="mi"&gt;440&lt;/span&gt; &lt;span class="s"&gt;"Hz"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;higher-button&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'button&lt;/span&gt; &lt;span class="ss"&gt;'text:&lt;/span&gt; &lt;span class="s"&gt;"&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/grid&lt;/span&gt; &lt;span class="nv"&gt;lower-button&lt;/span&gt; &lt;span class="ss"&gt;'row:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'column:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="ss"&gt;'pady:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/grid&lt;/span&gt; &lt;span class="nv"&gt;frequency-ext&lt;/span&gt; &lt;span class="ss"&gt;'row:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'column:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="ss"&gt;'pady:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/grid&lt;/span&gt; &lt;span class="nv"&gt;higher-button&lt;/span&gt; &lt;span class="ss"&gt;'row:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'column:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="ss"&gt;'pady:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The frame widget is an invisible widget that helps with layout. Since all I need to arrange within the frame is a spin box and a label, I used &lt;code&gt;tk/pack&lt;/code&gt; to &lt;code&gt;pack&lt;/code&gt; them side by side. The frame is then organized in a &lt;code&gt;grid&lt;/code&gt; with the rest of the widgets. I created a function that I can reuse later to generate the spin box, label, and frame all together. At this point, we are starting to have a nice looking interface, but it doesn't do anything. If you click the buttons or slide the slider, nothing happens. The widgets have a &lt;code&gt;command&lt;/code&gt; option that wires the widget up to a function. If we add a command to the slider, that command will be called each time the slider is moved.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;slider&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'scale&lt;/span&gt; &lt;span class="ss"&gt;'from:&lt;/span&gt; &lt;span class="nv"&gt;*min-position*&lt;/span&gt; &lt;span class="ss"&gt;'to:&lt;/span&gt; &lt;span class="nv"&gt;*max-position*&lt;/span&gt;
                   &lt;span class="ss"&gt;'command:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-int&lt;/span&gt; &lt;span class="ss"&gt;'set&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;position-&amp;gt;frequency&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command for the slider takes one argument that indicates the new value of the slider. The spin box does have a &lt;code&gt;command&lt;/code&gt; option, but the command is only called when the value is changed by clicking the up or down arrow, not when the value is changed by other means such as typing a frequency into the field. Tk has a &lt;code&gt;bind&lt;/code&gt; command (the Scheme &lt;code&gt;tk/bind&lt;/code&gt; function) that allows binding functions to an event on a widget. We'll bind our callback to the &lt;code&gt;KeyRelase&lt;/code&gt; event. The &lt;code&gt;tk/bind&lt;/code&gt; function takes up to three arguments. The first is the widget to bind to (or a tag created with &lt;code&gt;tk/bindtags&lt;/code&gt; to apply the binding to multiple widgets). The second is the event pattern. The event pattern is surrounded by angle brackets and can specify modifiers, event types, and more. You can find detailed documentation on the event pattern in the &lt;a href="https://www.tcl.tk/man/tcl8.6/TkCmd/bind.htm"&gt;Tcl/Tk documentation&lt;/a&gt;. The third is a lambda expression to associate with the event.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/bind&lt;/span&gt; &lt;span class="nv"&gt;frequency-int&lt;/span&gt; &lt;span class="ss"&gt;'&amp;lt;KeyRelease&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="c1"&gt;; If frequency value is a valid number, set slider to current value&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;numified&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-&amp;gt;number&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-int&lt;/span&gt; &lt;span class="ss"&gt;'get&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="nv"&gt;numified&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;slider&lt;/span&gt; &lt;span class="ss"&gt;'configure&lt;/span&gt; &lt;span class="ss"&gt;'value:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-&amp;gt;position&lt;/span&gt; &lt;span class="nv"&gt;numified&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wire the buttons up to callback functions called &lt;code&gt;decrease-octave&lt;/code&gt; and &lt;code&gt;increase-octave&lt;/code&gt;. An &lt;a href="https://en.wikipedia.org/wiki/Octave"&gt;octave&lt;/a&gt; is "the interval between one musical pitch and another with double its frequency."&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="c1"&gt;; Set frequency slider and display&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-frequency&lt;/span&gt; &lt;span class="nv"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nv"&gt;freq&lt;/span&gt; &lt;span class="nv"&gt;*min-frequency*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nv"&gt;freq&lt;/span&gt; &lt;span class="nv"&gt;*max-frequency*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;slider&lt;/span&gt; &lt;span class="ss"&gt;'configure&lt;/span&gt; &lt;span class="ss"&gt;'value:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-&amp;gt;position&lt;/span&gt; &lt;span class="nv"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-int&lt;/span&gt; &lt;span class="ss"&gt;'set&lt;/span&gt; &lt;span class="nv"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;; Buttons increase and decrease frequency by one octave&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;adjust-octave&lt;/span&gt; &lt;span class="nv"&gt;modifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-frequency&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-&amp;gt;number&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-int&lt;/span&gt; &lt;span class="ss"&gt;'get&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nv"&gt;modifier&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;decrease-octave&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;adjust-octave&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;increase-octave&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;adjust-octave&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you slide the slider, the text field updates accordingly. If you type a number in the text field, the slider updates accordingly. All good, right? What if a user (and you know they will) enters a number higher than 20,000 or a letter?&lt;/p&gt;

&lt;p&gt;Let's extend the function that returns our labeled spin box to bind a validation function to the &lt;code&gt;FocusOut&lt;/code&gt; event on the spin box. The spin box does have a &lt;code&gt;validatecommand&lt;/code&gt; option, but I wasn't able to get it working. I looked through the examples that have come with the various variations of PS/Tk and couldn't find a single example of a spin box with a &lt;code&gt;validatecommand&lt;/code&gt;. I even looked at the source code for &lt;a href="https://github.com/bintracker/bintracker/"&gt;Bintracker&lt;/a&gt;, a chiptune audio workstation written in Chicken Scheme with a PS/Tk GUI and developed by the current maintainer of the PS/Tk egg. Even it binds a &lt;code&gt;validate-new-value&lt;/code&gt; function to the &lt;code&gt;Return&lt;/code&gt; and &lt;code&gt;FocusOut&lt;/code&gt; events of the spin box rather than using &lt;code&gt;validatecommand&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="c1"&gt;; Create a spin box with a units label&lt;/span&gt;
&lt;span class="c1"&gt;; Returns frame widget encompassing both spin box and label and the spin box&lt;/span&gt;
&lt;span class="c1"&gt;; widget itself. This way you can access the value of the spin box.&lt;/span&gt;
&lt;span class="c1"&gt;; e.g. (define-values (box-with-label just-box) (units-spinbox 1 12 6 "inches"))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;units-spinbox&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;initial&lt;/span&gt; &lt;span class="nv"&gt;units&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;container&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'frame&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;spinbox&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;container&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'spinbox&lt;/span&gt; &lt;span class="ss"&gt;'from:&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="ss"&gt;'to:&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt;
                             &lt;span class="ss"&gt;'width:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-length&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;number-&amp;gt;string&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;label&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;container&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'label&lt;/span&gt; &lt;span class="ss"&gt;'text:&lt;/span&gt; &lt;span class="nv"&gt;units&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;spinbox&lt;/span&gt; &lt;span class="ss"&gt;'set&lt;/span&gt; &lt;span class="nv"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/bind&lt;/span&gt; &lt;span class="nv"&gt;spinbox&lt;/span&gt; &lt;span class="ss"&gt;'&amp;lt;FocusOut&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;current-value&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-&amp;gt;number&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;spinbox&lt;/span&gt; &lt;span class="ss"&gt;'get&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;current-value&lt;/span&gt;
                     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nv"&gt;current-value&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nv"&gt;current-value&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;spinbox&lt;/span&gt; &lt;span class="ss"&gt;'set&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="c1"&gt;; Also reset slider position to make sure it still matches display&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;slider&lt;/span&gt; &lt;span class="ss"&gt;'configure&lt;/span&gt; &lt;span class="ss"&gt;'value:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-&amp;gt;position&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-&amp;gt;number&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-int&lt;/span&gt; &lt;span class="ss"&gt;'get&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/pack&lt;/span&gt; &lt;span class="nv"&gt;spinbox&lt;/span&gt; &lt;span class="nv"&gt;label&lt;/span&gt; &lt;span class="ss"&gt;'side:&lt;/span&gt; &lt;span class="ss"&gt;'left&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;values&lt;/span&gt; &lt;span class="nv"&gt;container&lt;/span&gt; &lt;span class="nv"&gt;spinbox&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll also use this function to create a field to specify the duration of the beep in milliseconds:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;define-values&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;duration-ext&lt;/span&gt; &lt;span class="nv"&gt;duration-int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;units-spinbox&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;600000&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="s"&gt;"ms"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/grid&lt;/span&gt; &lt;span class="nv"&gt;duration-ext&lt;/span&gt; &lt;span class="ss"&gt;'row:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ss"&gt;'column:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="ss"&gt;'pady:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Frequency is rather abstract. Let's also give the user the ability to select a musical note. We can store the corresponding frequencies for A4-G4 in an association list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="c1"&gt;; Notes -&amp;gt; frequency (middle A-G [A4-G4])&lt;/span&gt;
&lt;span class="c1"&gt;; http://pages.mtu.edu/~suits/notefreqs.html&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;notes&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"A"&lt;/span&gt; &lt;span class="mf"&gt;440.00&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"B"&lt;/span&gt; &lt;span class="mf"&gt;493.88&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C"&lt;/span&gt; &lt;span class="mf"&gt;261.63&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"D"&lt;/span&gt; &lt;span class="mf"&gt;293.66&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"E"&lt;/span&gt; &lt;span class="mf"&gt;329.63&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"F"&lt;/span&gt; &lt;span class="mf"&gt;349.23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"G"&lt;/span&gt; &lt;span class="mf"&gt;292.00&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll give the user a drop-down menu. Whenever a note is selected from the drop-down menu, we'll look up the frequency in the association list and set it using the &lt;code&gt;set-frequency&lt;/code&gt; helper function we created for the octave buttons.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;note-frame&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'frame&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;note&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;note-frame&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'combobox&lt;/span&gt; &lt;span class="ss"&gt;'width:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ss"&gt;'values:&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A"&lt;/span&gt; &lt;span class="s"&gt;"B"&lt;/span&gt; &lt;span class="s"&gt;"C"&lt;/span&gt; &lt;span class="s"&gt;"D"&lt;/span&gt; &lt;span class="s"&gt;"E"&lt;/span&gt; &lt;span class="s"&gt;"F"&lt;/span&gt; &lt;span class="s"&gt;"G"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/bind&lt;/span&gt; &lt;span class="nv"&gt;note&lt;/span&gt; &lt;span class="ss"&gt;'&amp;lt;&amp;lt;ComboboxSelected&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-frequency&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cadr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;assoc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;note&lt;/span&gt; &lt;span class="ss"&gt;'get&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;note-label&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;note-frame&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'label&lt;/span&gt; &lt;span class="ss"&gt;'text:&lt;/span&gt; &lt;span class="s"&gt;"‚ô™"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/pack&lt;/span&gt; &lt;span class="nv"&gt;note-label&lt;/span&gt; &lt;span class="nv"&gt;note&lt;/span&gt; &lt;span class="ss"&gt;'side:&lt;/span&gt; &lt;span class="ss"&gt;'left&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/grid&lt;/span&gt; &lt;span class="nv"&gt;note-frame&lt;/span&gt; &lt;span class="ss"&gt;'row:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ss"&gt;'column:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="ss"&gt;'pady:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's make some noise. There are Chicken Scheme &lt;a href="http://wiki.call-cc.org/eggref/5/allegro"&gt;bindings&lt;/a&gt; to the &lt;a href="https://en.wikipedia.org/wiki/Allegro_(software_library)"&gt;Allegro&lt;/a&gt; library. Allegro is a library primarily used by games for cross-platform graphics, input devices, and more. What we're interested in is the audio addon that can be used to generate a tone with a sine wave. You'll need to install the Allegro library. Make sure you also install the header files. In some Linux distros, these are split into a separate package (e.g. &lt;code&gt;liballegro5-dev&lt;/code&gt; on Debian). Also, install the Allegro egg (&lt;code&gt;chicken-install -sudo allegro&lt;/code&gt;). I added the following lines near the top to import the Allegro bindings (and the chicken memory module, which we'll also use) and initialize Allegro.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;prefix&lt;/span&gt; &lt;span class="nv"&gt;allegro&lt;/span&gt; &lt;span class="s"&gt;"al:"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;chicken&lt;/span&gt; &lt;span class="nv"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;+pi+&lt;/span&gt; &lt;span class="mf"&gt;3.141592&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;; Initialize Allegro and audio addon&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Could not initialize Allegro."&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:audio-addon-install&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Could not initialize sound."&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:reserve-samples&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Allegro egg is accompanied by a couple of examples but no examples showing the use of the audio addon. The Allegro library itself comes with an &lt;a href="https://github.com/liballeg/allegro5/blob/master/examples/ex_saw.c"&gt;example showing how to generate a saw wave&lt;/a&gt;, but being a C library, the example is, of course, in C. I &lt;a href="https://github.com/goober99/lisp-gui-examples/blob/master/examples/pstk/saw.scm"&gt;ported that example to Scheme&lt;/a&gt;. I would have contributed the example back to the Allegro egg, but the repo is marked as "archived by the owner" and read-only on GitHub. I've included the example in the repo alongside the rest of the code for this tutorial in case someone finds it useful.&lt;/p&gt;

&lt;p&gt;Allegro is very low-level. You create an audio &lt;code&gt;stream&lt;/code&gt;. In this case, the stream buffers eight fragments of 1,024 samples each at a frequency (often called sampling rate) of 44,100 Hz (the sampling rate of an audio CD), which means there are 44,100 samples per second. Each sample is a 32-bit float (what is called the bit depth of the audio), and we only have one channel to keep things as simple as possible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="c1"&gt;; Generate a tone using Allegro&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;generate-tone&lt;/span&gt; &lt;span class="nv"&gt;frequency&lt;/span&gt; &lt;span class="nv"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;samples-per-buffer&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;stream-frequency&lt;/span&gt; &lt;span class="mi"&gt;44100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;amplitude&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;stream&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:make-audio-stream&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="nv"&gt;samples-per-buffer&lt;/span&gt; &lt;span class="nv"&gt;stream-frequency&lt;/span&gt; &lt;span class="ss"&gt;'float32&lt;/span&gt; &lt;span class="ss"&gt;'one&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;queue&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:make-event-queue&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;event&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:make-event&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:audio-stream-attach-to-mixer!&lt;/span&gt; &lt;span class="nv"&gt;stream&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:default-mixer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Could not attach stream to mixer."&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:event-queue-register-source!&lt;/span&gt; &lt;span class="nv"&gt;queue&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:audio-stream-event-source&lt;/span&gt; &lt;span class="nv"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;event-loop&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="c1"&gt;; Grab and handle events&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;duration&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;stream-frequency&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;samples-per-buffer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:event-queue-wait!&lt;/span&gt; &lt;span class="nv"&gt;queue&lt;/span&gt; &lt;span class="nv"&gt;event&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:event-type&lt;/span&gt; &lt;span class="nv"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;'audio-stream-fragment&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;buffer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:audio-stream-fragment&lt;/span&gt; &lt;span class="nv"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="c1"&gt;; If the stream is not ready for new data, buffer will be null.&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;event-loop&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fill-buffer&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;; Placeholder&lt;/span&gt;
              &lt;span class="c1"&gt;; Repeat&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;event-loop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))))))))&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:audio-stream-drain&lt;/span&gt; &lt;span class="nv"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An event loop waits for the audio stream to ask for another buffer. Our job is to fill that buffer with 1,024 32-bit floats at a time. In the code listing above, this is done by &lt;code&gt;fill-buffer&lt;/code&gt;. That was just a placeholder, so I could break the code up into shorter, more easily explainable chunks. This is what goes in the place of &lt;code&gt;(fill-buffer buffer n)&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;adr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pointer-&amp;gt;address&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;i&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;samples-per-buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;time&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;samples-per-buffer&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;stream-frequency&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="c1"&gt;; al:audio-stream-fragment returns a C pointer. Use (chicken&lt;/span&gt;
        &lt;span class="c1"&gt;; memory) module to operate on foreign pointer objects.&lt;/span&gt;
        &lt;span class="c1"&gt;; Iterate over array four bytes at a time since 32-bit depth.&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pointer-f32-set!&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;address-&amp;gt;pointer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;adr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;amplitude&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sin&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;+pi+&lt;/span&gt; &lt;span class="nv"&gt;frequency&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;al:audio-stream-fragment-set!&lt;/span&gt; &lt;span class="nv"&gt;stream&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Error setting stream fragment"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Allegro egg is a pretty thin wrapper of the Allegro library. The &lt;code&gt;audio-stream-fragment&lt;/code&gt; procedure in the egg just passes along the C pointer that the corresponding &lt;code&gt;al_get_audio_stream_fragment&lt;/code&gt; function from the C library returns. It would have been nice if the egg had offered some Scheme conveniences atop Allegro like allowing us to pass a Scheme list or array to Allegro to provide the buffer of samples. Since it doesn't, we'll use the chicken memory module to fill the C array starting at the C pointer returned by &lt;code&gt;audio-stream-fragment&lt;/code&gt;. We use &lt;code&gt;pointer-&amp;gt;address&lt;/code&gt; to get the address of the pointer. A pointer refrences a byte of memory. We can reference the preceding or following byte by subtracting or adding 1 to the address. Since we are filling the array with 32-bit floats, and 32 bits is 4 bytes, we want to increment the address by 4 each time. Then we can set the value of the current location with pointer-f32-set!.&lt;/p&gt;

&lt;p&gt;Then you just need to feed Allegro buffers of 1,024 samples at a time. The &lt;a href="http://pld.cs.luc.edu/telecom/mnotes/digitized_sound.html"&gt;basic formula for a sine wave&lt;/a&gt; is A sin(2œÄft) where &lt;em&gt;A&lt;/em&gt; is amplitude, &lt;em&gt;f&lt;/em&gt; is frequency, and &lt;em&gt;t&lt;/em&gt; is time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;amplitude&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sin&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;+pi+&lt;/span&gt; &lt;span class="nv"&gt;frequency&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wire this up to a play button, and you're ready to make some noise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scheme"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt; &lt;span class="nv"&gt;play-button&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk&lt;/span&gt; &lt;span class="ss"&gt;'create-widget&lt;/span&gt; &lt;span class="ss"&gt;'button&lt;/span&gt; &lt;span class="ss"&gt;'text:&lt;/span&gt; &lt;span class="s"&gt;"Play"&lt;/span&gt; &lt;span class="ss"&gt;'command:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;generate-tone&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-&amp;gt;number&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;frequency-int&lt;/span&gt; &lt;span class="ss"&gt;'get&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;string-&amp;gt;number&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;duration-int&lt;/span&gt; &lt;span class="ss"&gt;'get&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tk/grid&lt;/span&gt; &lt;span class="nv"&gt;play-button&lt;/span&gt; &lt;span class="ss"&gt;'row:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ss"&gt;'column:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ss"&gt;'padx:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="ss"&gt;'pady:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tk has been around a long time, and it shows. While it is stable and highly portable, even with recent improvements, it just looks a little dated. At least on Linux, none of the themes I tried really fit in. There were always differences that made the Tk GUI stick out like a sore thumb. If you're building an internal tool where it doesn't really matter how pretty it is, you can get Tk to work with a variety of Schemes in a variety of places.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can check out the entire example on &lt;a href="https://github.com/goober99/lisp-gui-examples"&gt;GitHub&lt;/a&gt;. This started as a personal learning project to explore the state of GUI programming in Lisp and has become a series of tutorials on building GUIs with various dialects of Lisp.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>lisp</category>
      <category>scheme</category>
      <category>gui</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>When should I use code?</title>
      <author>Vicki (she/they)</author>
      <pubDate>Fri, 12 Nov 2021 21:12:39 +0000</pubDate>
      <link>https://dev.to/vickilanger/when-should-i-use-code-2jef</link>
      <guid>https://dev.to/vickilanger/when-should-i-use-code-2jef</guid>
      <description>&lt;p&gt;You can use code whenever you want. Programmers often joke that they‚Äôll take 20 hours to code something that would have taken them only 20 minutes to do. Imagine the person who programmed the robot vacuum.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQdkRfjv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgs.xkcd.com/comics/the_general_problem.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQdkRfjv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgs.xkcd.com/comics/the_general_problem.png" alt="an XKCD comic strip with 3 boxes. &amp;lt;br&amp;gt;
1st box: stick figure 1 asks &amp;quot;can you pass the salt?&amp;quot;&amp;lt;br&amp;gt;
2nd box: stick figure 1 sits there waiting for the salt&amp;lt;br&amp;gt;
3rd box: stick figure 1 says &amp;quot;I said-&amp;quot; and stick figure 2 responds &amp;quot;I know! I'm developing a system to pass you arbitrary condiments&amp;quot;. stick figure 1 responds &amp;quot;It's been 20 minutes!&amp;quot; lastly, stick figure 2 says &amp;quot; It'll save time in the long run!&amp;quot;" width="550" height="230"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#does-it-make-sense-timewise"&gt;
  &lt;/a&gt;
  Does it make sense, timewise?
&lt;/h2&gt;

&lt;p&gt;Personally, I‚Äôd count how often I do it, estimate how long it would take to automate or code the thing, then see if the hours programming is going worth the effort. For example, if it takes 10 minutes to do dishes and you have to do it every day that would be 3650 hours per year. Would 100s hours of programming be worth coaxing a computer to do dishes for you?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a2YLrk7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgs.xkcd.com/comics/is_it_worth_the_time.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a2YLrk7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgs.xkcd.com/comics/is_it_worth_the_time.png" alt="an XKCD comic &amp;quot;Is it worth the time&amp;quot; chart. &amp;quot;How long can you work on making a routine more efficient before you're spending more time than you save.&amp;quot; Don't forget the time you spend finding the chart to look up what you save. And the time spent reading this reminder about the time spent. And the time trying to figure out if either of those actually make sense. Remember, every second counts toward your life total, including these right now." width="571" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Xkcd.com made this chart to show how much time is saved by automating something. Let‚Äôs look at making an automatic cat snack dispenser. Let‚Äôs say it takes 5 seconds to open a bag of treats and give them to the cat. We‚Äôll also say you give the cat some snacks 1 time per week. The snack dispenser would cut 5 seconds from your snack process because you don‚Äôt have to do it anymore. This chart shows that over 5 years, our cat snack dispenser would only save 2 hours. Is it worth it? That‚Äôs up to you. It probably depends on how long it would take to code the snack dispenser and how demanding your cat is.&lt;/p&gt;

&lt;p&gt;Going back to the dishes example, after programming a computer to do dishes, it now only takes 5 minutes. So, 5 minutes have been shaved off of the time it takes to do the daily task. This would save 6 days over 5 years. Is it worth it? That‚Äôs up to you. Though, it may depend on how long it takes to code this automatic dish washing machine.&lt;/p&gt;

&lt;p&gt;Typically, when the gain from your code is more than your loss, get to coding.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-exception-to-the-rule"&gt;
  &lt;/a&gt;
  An exception to the rule
&lt;/h2&gt;

&lt;p&gt;When we are learning, this may be a little different. You‚Äôre also gaining a better understanding of code every time you use code to do something. In this case, you would gain the benefit of the code and the knowledge on how to do the things you learned to build that code. So, it may very well be worth building that automatic cat snack dispenser even if it doesn‚Äôt fit my &lt;code&gt;gain &amp;gt; loss&lt;/code&gt; rule. The cat would really appreciate it.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The 3 most interesting C++ posts of October 2021</title>
      <author>Sandor Dargo</author>
      <pubDate>Fri, 12 Nov 2021 20:59:11 +0000</pubDate>
      <link>https://dev.to/sandordargo/the-3-most-interesting-c-posts-of-october-2021-23p6</link>
      <guid>https://dev.to/sandordargo/the-3-most-interesting-c-posts-of-october-2021-23p6</guid>
      <description>&lt;p&gt;Let me share with you 3 interesting &lt;a href="https://dev.to/t/cpp"&gt;#cpp&lt;/a&gt; posts from October. I know, it's the middle of November. I've been on vacation, then this week there was &lt;a href="https://meetingcpp.com/"&gt;Meeting C++&lt;/a&gt; so I had little time.&lt;/p&gt;

&lt;p&gt;As I wrote during the earlier months, I don't take the most popular articles anymore, because I find that while some articles do meet the criteria to add #cpp as a tag, but they are not mostly about C++. So there is a bit of subjectivity to this list. I also try not to include multiple articles from the same author and I don't include the wrap-up of the previous month either ;)&lt;/p&gt;

&lt;p&gt;Feel free to share your favourite one in the comments.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://dev.to/aboss123"&gt;Ashish&lt;/a&gt; wrote many popular posts in October, I picked the one that explains the difference between implicit and explicit constructors. Keep up the good work!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aboss123" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YeUsHCVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1TjiwDlw--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/720677/4d96b5bd-7555-4446-8466-b7d5cf70b057.png" alt="aboss123"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aboss123/c-programming-implicit-and-explicit-constructors-27be" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;C++ Programming:  Implicit and Explicit Constructors&lt;/h2&gt;
      &lt;h3&gt;Ashish Bailkeri „Éª Oct 18 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#cpp&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;&lt;a href="https://dev.to/elvisoric"&gt;Elvis&lt;/a&gt; picked an interesting topic about lambdas. He answered the question that you probably wouldn't even have thought about; how to inherit from them?&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/elvisoric" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ENFv_c---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5uE8bdq2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/506731/9f050cc7-2d51-49f4-b8f1-55da24aaa17c.jpeg" alt="elvisoric"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/elvisoric/inheriting-from-lambdas-5cac" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to inherit from lambdas?&lt;/h2&gt;
      &lt;h3&gt;Elvis Oric „Éª Oct 13 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#cpp&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Last but not least, &lt;a href="https://dev.to/deciduously"&gt;Ben&lt;/a&gt; shared a very interesting article on creating a compiled binary, using source code hosted on GitHub, for other people to include in their environments.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/deciduously" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZeeUe55H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Jq_3CU64--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/63000/2c770bec-a282-4dce-a8a1-9de749786416.jpg" alt="deciduously"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/deciduously/workstation-management-with-nix-flakes-build-a-cmake-c-package-21lp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Workstation Management With Nix Flakes: Build a Cmake C++ Package&lt;/h2&gt;
      &lt;h3&gt;Ben Lovy „Éª Oct 31 „Éª 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cpp&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nix&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-deeper"&gt;
  &lt;/a&gt;
  Connect deeper
&lt;/h2&gt;

&lt;p&gt;If you liked this article, please &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hit on the like button,
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://eepurl.com/gvcv1j"&gt;subscribe to my newsletter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;and let's connect on &lt;a href="https://twitter.com/SandorDargo"&gt;Twitter&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>bestofdev</category>
      <category>cpp</category>
    </item>
    <item>
      <title>Learn Materialize by running streaming SQL on your nginx logs</title>
      <author>Bobby Iliev</author>
      <pubDate>Fri, 12 Nov 2021 20:32:35 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/learn-materialize-by-running-streaming-sql-on-your-nginx-logs-3n32</link>
      <guid>https://dev.to/bobbyiliev/learn-materialize-by-running-streaming-sql-on-your-nginx-logs-3n32</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;In this tutorial, I will show you how &lt;a href="https://materialize.com"&gt;Materialize&lt;/a&gt; works by using it to run SQL queries on continuously produced nginx logs. By the end of the tutorial, you will have a better idea of what Materialize is, how it's different than other SQL engines, and how to use it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;For the sake of simplicity, I will use a brand new Ubuntu 21.04 server where I will install nginx, Materialize and &lt;code&gt;mzcli&lt;/code&gt;, a CLI tool similar to &lt;code&gt;psql&lt;/code&gt; used to connect to Materialize and execute SQL on it.&lt;/p&gt;

&lt;p&gt;If you want to follow along you could spin up a new Ubuntu 21.04 server on your favorite could provider. &lt;/p&gt;

&lt;p&gt;If you prefer running Materialize on a different operating system, you can follow the steps on how to install Materialize here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/install/"&gt;How to install Materialize&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-is-materialize"&gt;
  &lt;/a&gt;
  What is Materialize
&lt;/h1&gt;

&lt;p&gt;Materialize is a streaming database for real-time analytics. &lt;/p&gt;

&lt;p&gt;It is not a substitution for your transactional database, instead it accepts input data from a variety of sources like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Messages from streaming sources like Kafka&lt;/li&gt;
&lt;li&gt;Archived data from object stores like S3&lt;/li&gt;
&lt;li&gt;Change feeds from databases like PostgreSQL&lt;/li&gt;
&lt;li&gt;Data in Files: CSV, JSON and even unstructured files like logs &lt;em&gt;(what we'll be using today.)&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And it maintains the answers to your SQL queries over time, keeping them up-to-date as new data flows in (using &lt;em&gt;materialized views&lt;/em&gt;), instead of running them against a static snapshot at a point in time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D0uJV0b0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/MU5IHOV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D0uJV0b0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/MU5IHOV.png" alt="Materialize Landing Page" width="880" height="435"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more about Materialize, make sure to check out their official documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://materialize.com/docs/"&gt;Materialize Documentation&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-materialize"&gt;
  &lt;/a&gt;
  Installing Materialize
&lt;/h1&gt;

&lt;p&gt;Materialize runs as a single binary called &lt;code&gt;materialized&lt;/code&gt; &lt;em&gt;(d for daemon, following Unix conventions)&lt;/em&gt;. Since we're running on Linux, we'll just install Materialize directly. To install it, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install materialized
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once it's installed, start Materialize (with sudo so it has access to nginx logs):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo materialized
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have the &lt;code&gt;materialized&lt;/code&gt; running, we need to open a new terminal to install and run a CLI tool that we use to interact with our Materialize instance! &lt;/p&gt;

&lt;p&gt;There are other ways that you could use in order to run Materialize as described &lt;a href="https://materialize.com/docs/install/"&gt;here&lt;/a&gt;. For a production-ready Materialize instance, I would recommend giving &lt;a href="https://materialize.com/product"&gt;Materialize Cloud&lt;/a&gt; a try!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-raw-mzcli-endraw-"&gt;
  &lt;/a&gt;
  Installing &lt;code&gt;mzcli&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;The &lt;a href="https://github.com/MaterializeInc/mzcli#quick-start"&gt;&lt;code&gt;mzcli&lt;/code&gt; tool&lt;/a&gt; lets us connect to Materialize similar to how we would use a SQL client to connect to any other database.&lt;/p&gt;

&lt;p&gt;Materialize is wire-compatible with PostgreSQL, so if you have &lt;code&gt;psql&lt;/code&gt; already installed you could use it instead of &lt;code&gt;mzcli&lt;/code&gt;, but with &lt;code&gt;mzcli&lt;/code&gt; you get nice syntax highlighting and autocomplete when writing your queries.&lt;/p&gt;

&lt;p&gt;To learn the main differences between the two, make sure to check out the official documentation here: &lt;a href="https://materialize.com/docs/connect/cli/"&gt;Materialize CLI Connections&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The easiest way to install &lt;code&gt;mzcli&lt;/code&gt; is via &lt;code&gt;pipx&lt;/code&gt;, so first run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apt install pipx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and, once &lt;code&gt;pipx&lt;/code&gt; is installed, install &lt;code&gt;mzcli&lt;/code&gt; with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pipx install mzcli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have &lt;code&gt;mzcli&lt;/code&gt; we can connect to &lt;code&gt;materialized&lt;/code&gt; with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mzcli -U materialize -h localhost -p 6875 materialize
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TTZzk7pD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/SyLQvlT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TTZzk7pD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/SyLQvlT.png" alt="Materialize mzcli autocompletion" width="262" height="67"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this demo, let's quickly install nginx and use Regex to parse the log and create Materialized Views.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-nginx"&gt;
  &lt;/a&gt;
  Installing nginx
&lt;/h2&gt;

&lt;p&gt;If you don't already have nginx installed, install it with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's populate the access log with some entries with a Bash loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for i in {1..200} ; do curl -s 'localhost/materialize'  &amp;gt; /dev/null ; echo $i ; done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you have an actual nginx &lt;code&gt;access.log&lt;/code&gt;, you can skip the step above.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we'll have some entries in the &lt;code&gt;/var/log/nginx/access.log&lt;/code&gt; access log file that we would be able to able to feed into Materialize.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-materialize-source"&gt;
  &lt;/a&gt;
  Adding a Materialize Source
&lt;/h2&gt;

&lt;p&gt;By creating a Source you are essentially telling Materialize to connect to some external data source. As described in the introduction, you could connect a wide variety of sources to Materialize. &lt;/p&gt;

&lt;p&gt;For the full list of source types make sure to check out the official documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://materialize.com/docs/sql/create-source/"&gt;Materialize source types&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's start by creating a &lt;a href="https://materialize.com/docs/sql/create-source/text-file/"&gt;text file source&lt;/a&gt; from our nginx access log.&lt;/p&gt;

&lt;p&gt;First, access the Materialize instance with the &lt;code&gt;mzcli&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mzcli -U materialize -h localhost -p 6875 materialize
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run the following statement to create the source:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE SOURCE nginx_log 
FROM FILE '/var/log/nginx/access.log'  
WITH (tail = true)  
FORMAT REGEX '(?P&amp;lt;ipaddress&amp;gt;[^ ]+) - - \[(?P&amp;lt;time&amp;gt;[^\]]+)\] "(?P&amp;lt;request&amp;gt;[^ ]+) (?P&amp;lt;url&amp;gt;[^ ]+)[^"]+" (?P&amp;lt;statuscode&amp;gt;\d{3})';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A quick rundown:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CREATE SOURCE&lt;/code&gt;: First we specify that we want to create a source&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;FROM FILE&lt;/code&gt;: Then we specify that this source will read from a local file, and we provide the path to that file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;WITH (tail = true)&lt;/code&gt;: Continually check the file for new content&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;FORMAT REGEX&lt;/code&gt;: as this is an unstructured file we need to specify regex as the format so that we could get only the specific parts of the log that we need. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's quickly review the Regex itself as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Materialize-specific behavior to note here is the &lt;code&gt;?P&amp;lt;NAME_HERE&amp;gt;&lt;/code&gt; pattern extracts the matched text into a column named &lt;code&gt;NAME_HERE&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To make this a bit more clear, a standard entry in your nginx access log file would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;123.123.123.119 - - [13/Oct/2021:10:54:22 +0000] "GET / HTTP/1.1" 200 396 "-" "Mozilla/5.0 zgrab/0.x"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;(?P&amp;lt;ipaddress&amp;gt;[^ ]+)&lt;/code&gt;: With this pattern we match the IP address for each line of the nginx log, e.g. &lt;code&gt;123.123.123.119&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\[(?P&amp;lt;time&amp;gt;[^\]]+)\]&lt;/code&gt;: the timestamp string from inside square brackets, e.g. &lt;code&gt;[13/Oct/2021:10:54:22 +0000]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"(?P&amp;lt;request&amp;gt;[^ ]+)&lt;/code&gt;: the type of request like &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;(?P&amp;lt;url&amp;gt;[^ ]+)&lt;/code&gt;: the relative URL, eg. &lt;code&gt;/favicon.ico&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;(?P&amp;lt;statuscode&amp;gt;\d{3})&lt;/code&gt;: the three digit HTTP status code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you execute the create source statement, you can confirm the source was created successfully by running the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mz&amp;gt; SHOW SOURCES;
// Output
+-----------+
| name      |
|-----------|
| nginx_log |
+-----------+
SELECT 1
Time: 0.021s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have our source in place, let's go ahead and create a view!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-a-materialized-view"&gt;
  &lt;/a&gt;
  Creating a Materialized View
&lt;/h1&gt;

&lt;p&gt;You may be familiar with &lt;a href="https://en.wikipedia.org/wiki/Materialized_view"&gt;Materialized Views&lt;/a&gt; from the world of traditional databases like PostgreSQL, which are essentially cached queries. The unique feature here is the materialized view we are about to create is &lt;strong&gt;automatically kept up-to-date&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In order to create a materialized view, we will use the following statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE MATERIALIZED VIEW aggregated_logs AS
  SELECT
    ipaddress,
    request,
    url,
    statuscode::int,
    COUNT(*) as count
  FROM nginx_log GROUP BY 1,2,3,4;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The important things to note are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Materialize will keep the results of the embedded query in memory, so you'll always get a fast and up-to-date answer&lt;/li&gt;
&lt;li&gt;The results are incrementally updated as new log events arrive &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Under the hood, &lt;strong&gt;Materialize compiles your SQL query into a dataflow&lt;/strong&gt; and then takes care of all the heavy lifting for you. This is incredibly powerful, as it allows you to process data in real-time using &lt;em&gt;just&lt;/em&gt; SQL.&lt;/p&gt;

&lt;p&gt;A quick rundown of the statement itself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First we start with the &lt;code&gt;CREATE MATERIALIZED VIEW aggregated_logs&lt;/code&gt; which identifies that we want to create a new Materialized view named &lt;code&gt;aggregated_logs&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then we specify the &lt;code&gt;SELECT&lt;/code&gt; statement that we are interested in keeping track of over time. In this case we are aggregating the data in our log file by &lt;code&gt;ipaddress&lt;/code&gt;, &lt;code&gt;request&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;statuscode&lt;/code&gt;, and we are counting the total instances of each combo with a &lt;code&gt;COUNT(*)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When creating a Materialized View, it could be based on multiple sources like a stream from Kafka, a raw data file that you have on an S3 bucket, or your PostgreSQL database. This single statement will give you the power to analyze your data in real-time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We specified a simple &lt;code&gt;SELECT&lt;/code&gt; that we want the view to be based on but this could include complex operations like &lt;code&gt;JOIN&lt;/code&gt;s, however for the sake of this tutorial we are keeping things simple.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For more information about Materialized Views check out the official documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://materialize.com/docs/sql/create-materialized-view/"&gt;Creating Materialized views&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you could use this new view and interact with the data from the nginx log with pure SQL!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reading-from-the-view"&gt;
  &lt;/a&gt;
  Reading from the view
&lt;/h1&gt;

&lt;p&gt;If we do a &lt;code&gt;SELECT&lt;/code&gt; on this Materialized view, we get a nice aggregated summary of stats:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;aggregated_logs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="n"&gt;ipaddress&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;           &lt;span class="n"&gt;url&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;statuscode&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;
&lt;span class="c1"&gt;----------------+---------+--------------------------+------------+-------&lt;/span&gt;
 &lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;GET&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;materialize&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As more requests come in to the nginx server, the aggregated stats in the view are kept up-to-date.&lt;/p&gt;

&lt;p&gt;We could also write queries that do further aggregation and filtering on top of the materialized view, for example, counting requests by route only:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT url, SUM(count) as total FROM aggregated_logs GROUP BY 1 ORDER BY 2 DESC;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we were re-run the query over and over again, we could see the numbers change instantly as soon as we get new data in the log as Materialize processes each line of the log and keeps listening for new lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+--------------------------+-------+
| url                      | total |
|--------------------------+-------|
| /materialize/demo-page-2 | 1255  |
| /materialize/demo-page   | 1957  |
| /materialize             | 400   |
+--------------------------+-------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As another example, let's use &lt;code&gt;psql&lt;/code&gt; together with the &lt;code&gt;watch&lt;/code&gt; command to see this in action. &lt;/p&gt;

&lt;p&gt;If you don't have &lt;code&gt;psql&lt;/code&gt; already isntalled you can install it with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install postgresql-client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, let's run the &lt;code&gt;SELECT * FROM aggregated_logs&lt;/code&gt; statement every second using the &lt;code&gt;watch&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;watch -n1 "psql -c 'select * from aggregated_logs' -U materialize -h localhost -p 6875 materialize"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;strong&gt;another terminal window&lt;/strong&gt;, you could run another &lt;code&gt;for&lt;/code&gt; loop to generate some new nginx logs and see how the results change:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for i in {1..2000} ; do curl -s 'localhost/materialize/demo-page-2' &amp;gt; /dev/null ; echo $i ; done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of the &lt;code&gt;watch&lt;/code&gt; command would look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nAkopN1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/21223421/141499876-58fdf03e-fb68-4966-ad12-b3708d50bb91.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nAkopN1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/21223421/141499876-58fdf03e-fb68-4966-ad12-b3708d50bb91.gif" alt="Materialize nginx logs demo" width="880" height="395"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to experiment with more complex queries and analyze your nginx access log for suspicious activity using pure SQL and keep track of the results in real time!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;By now, hopefully you have a hands-on understanding of how incrementally maintained materialized views work in Materialize.  In case that you like the project, make sure to star it on GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/MaterializeInc/materialize"&gt;https://github.com/MaterializeInc/materialize&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are totally new to SQL, make sure to check out this free eBook here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobbyiliev/introduction-to-sql"&gt;Free introduction to SQL basics eBook&lt;/a&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>sql</category>
      <category>devops</category>
      <category>nginx</category>
    </item>
    <item>
      <title>50 drops of PHP</title>
      <author>Roberto B.</author>
      <pubDate>Fri, 12 Nov 2021 20:15:21 +0000</pubDate>
      <link>https://dev.to/robertobutti/50-drops-of-php-433m</link>
      <guid>https://dev.to/robertobutti/50-drops-of-php-433m</guid>
      <description>&lt;p&gt;"50 drops of PHP" is an open-source e-book, that you can download it for free here: &lt;a href="https://hifolks.gumroad.com/l/50-drops-of-php?price=0"&gt;https://hifolks.gumroad.com/l/50-drops-of-php?price=0&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;This book collects 50 useful, unknown, underrated PHP functions or stuff discovered, used, learned during the PHP daily use.&lt;/p&gt;

&lt;p&gt;Using frameworks daily, sometimes the perception of the power of the language and of the basic functionalities provided by the PHP core could be lost. I see that usually I used to look the framework documentation or looking for a package in Packagist for system, array, string functions instead using some core functionalities provided by the language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#opensource"&gt;
  &lt;/a&gt;
  Open-source
&lt;/h2&gt;

&lt;p&gt;It is open-source, so you can find Markdown source files and above all, a lot of examples and snippets in this repository:&lt;br&gt;
&lt;a href="https://github.com/roberto-butti/50-drops-of-php"&gt;https://github.com/roberto-butti/50-drops-of-php&lt;/a&gt; (feel free to "star" the project on GitHub)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Welcome to 50 drops of PHP

&lt;ul&gt;
&lt;li&gt;The reason why

&lt;ul&gt;
&lt;li&gt;Continuous release&lt;/li&gt;
&lt;li&gt;Where to find this book&lt;/li&gt;
&lt;li&gt;Thanks to...&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;System

&lt;ul&gt;
&lt;li&gt;Get used PHP version: phpversion()&lt;/li&gt;
&lt;li&gt;Display OS information: php_uname()&lt;/li&gt;
&lt;li&gt;Get memory usage in bytes: memory_get_usage()&lt;/li&gt;
&lt;li&gt;Get environment variable value: getenv()

&lt;ul&gt;
&lt;li&gt;All environment variables&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;How to exit: exit()

&lt;ul&gt;
&lt;li&gt;Exit parameter&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Shutdown function: register_shutdown_function()&lt;/li&gt;
&lt;li&gt;Listening signals: pcntl_signal()&lt;/li&gt;
&lt;li&gt;Loaded PHP modules: get_loaded_extensions()&lt;/li&gt;
&lt;li&gt;Compare versions: version_compare()

&lt;ul&gt;
&lt;li&gt;Comparing without operator&lt;/li&gt;
&lt;li&gt;Comparing with operator&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Retrieve the current Process Identifier: getmypid()&lt;/li&gt;
&lt;li&gt;Get resources usage: getrusage()

&lt;ul&gt;
&lt;li&gt;The input parameter $mode&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Return current UNIX timestamp: microtime()&lt;/li&gt;
&lt;li&gt;Why you need to avoid to use microtime() to measure the time&lt;/li&gt;
&lt;li&gt;Get monotonic time: hrtime()&lt;/li&gt;
&lt;li&gt;Get temporary directory: sys_get_temp_dir()&lt;/li&gt;
&lt;li&gt;Get temp file name: tempnam()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Array

&lt;ul&gt;
&lt;li&gt;Apply function to each array elements: array_map()&lt;/li&gt;
&lt;li&gt;A string from an array:  join()&lt;/li&gt;
&lt;li&gt;Check if a key exists in the array:  key_exists()&lt;/li&gt;
&lt;li&gt;Check if an element is included in the array:  in_array()

&lt;ul&gt;
&lt;li&gt;Strict comparison&lt;/li&gt;
&lt;li&gt;Case Sensitive&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Merge two arrays: array_merge()

&lt;ul&gt;
&lt;li&gt;Key collision: array merge of arrays with numeric keys&lt;/li&gt;
&lt;li&gt;Key collision: array merge of arrays with strings keys&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Generate and fill a new array: range()

&lt;ul&gt;
&lt;li&gt;Step&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Creating array from variables: compact()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Variables, Constants

&lt;ul&gt;
&lt;li&gt;Get variable type: gettype()&lt;/li&gt;
&lt;li&gt;Portable directory separator: DIRECTORY_SEPARATOR&lt;/li&gt;
&lt;li&gt;Portable end of line: PHP_EOL()&lt;/li&gt;
&lt;li&gt;Export object properties as array: get_object_vars()&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Functions

&lt;ul&gt;
&lt;li&gt;Anonymous functions

&lt;ul&gt;
&lt;li&gt;An example with a PHP core function&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Arrow Functions with PHP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Strings

&lt;ul&gt;
&lt;li&gt;Padding strings: str_pad()&lt;/li&gt;
&lt;li&gt;Converting case of a sentences of strings: mb_convert_case()&lt;/li&gt;
&lt;li&gt;Parse string: sscanf()&lt;/li&gt;
&lt;li&gt;Format a string: sprintf()

&lt;ul&gt;
&lt;li&gt;Padding&lt;/li&gt;
&lt;li&gt;Numbers (integers)&lt;/li&gt;
&lt;li&gt;Numbers (floats)&lt;/li&gt;
&lt;li&gt;Formatting cheat sheet&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Validating string, alphabetics: ctype_alpha()&lt;/li&gt;
&lt;li&gt;Validating string, digits: ctype_digit()&lt;/li&gt;
&lt;li&gt;Validate strings, lower case letters: ctype_lower()&lt;/li&gt;
&lt;li&gt;Generate unique string: uniqid()&lt;/li&gt;
&lt;li&gt;Store objects or variables: serialize()&lt;/li&gt;
&lt;li&gt;Retrieve saved objects or variables: unserialize()&lt;/li&gt;
&lt;li&gt;Compress content: gzcompress()&lt;/li&gt;
&lt;li&gt;Uncompress content: gzuncompress()&lt;/li&gt;
&lt;li&gt;Delete characters: trim()&lt;/li&gt;
&lt;li&gt;From JSON string to PHP object: json_decode()

&lt;ul&gt;
&lt;li&gt;Flags&lt;/li&gt;
&lt;li&gt;Catching errors in parsing&lt;/li&gt;
&lt;li&gt;Big integers&lt;/li&gt;
&lt;li&gt;More than one flag&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Format a string with an array: vsprintf()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Files

&lt;ul&gt;
&lt;li&gt;File information: stat()

&lt;ul&gt;
&lt;li&gt;Symbolic link information&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Parsing directory: scandir()&lt;/li&gt;
&lt;li&gt;Split filename infos: pathinfo()&lt;/li&gt;
&lt;li&gt;Create a directory: mkdir()

&lt;ul&gt;
&lt;li&gt;Permissions&lt;/li&gt;
&lt;li&gt;Nested directories&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The fingerprint of a file: md5_file()&lt;/li&gt;
&lt;li&gt;Find files that match a pattern: glob()&lt;/li&gt;
&lt;li&gt;Read dir: readdir()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>php</category>
      <category>programming</category>
      <category>books</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Seeding Postgres with Docker</title>
      <author>Karan Pratap Singh</author>
      <pubDate>Fri, 12 Nov 2021 19:50:19 +0000</pubDate>
      <link>https://dev.to/karanpratapsingh/seeding-postgres-with-docker-19n7</link>
      <guid>https://dev.to/karanpratapsingh/seeding-postgres-with-docker-19n7</guid>
      <description>&lt;p&gt;Seeding postgres container during local development can be bit cumbersome, at least during the initial setup. Usually, we connect to the container and execute the seed script.&lt;/p&gt;

&lt;p&gt;But now, let's see how we can automate that by using &lt;code&gt;docker-entrypoint-initdb.d&lt;/code&gt;, which runs all the &lt;code&gt;*.sh&lt;/code&gt; or &lt;code&gt;*.sql&lt;/code&gt; scripts on initialization. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's assume we have this folder structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚îú‚îÄ‚îÄ Dockerfile
‚îú‚îÄ‚îÄ docker-compose.yml
‚îî‚îÄ‚îÄ scripts
    ‚îî‚îÄ‚îÄ db
        ‚îú‚îÄ‚îÄ dump.sql
        ‚îî‚îÄ‚îÄ init.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;dump.sql&lt;/code&gt; can be sql script that we want to seed the db with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- CreateTable&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nv"&gt;"id"&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;"name"&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;"email"&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;-- Seed&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'userid'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Gopher'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'hello@gopher.com'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;init.sh&lt;/code&gt;, we will just execute our &lt;code&gt;*.sql&lt;/code&gt; script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

psql &lt;span class="nt"&gt;-U&lt;/span&gt; &lt;span class="nv"&gt;$POSTGRES_USER&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nv"&gt;$POSTGRES_DB&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; /app/scripts/db/dump.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;Dockerfile&lt;/code&gt;, we will copy our &lt;code&gt;init.sh&lt;/code&gt; to &lt;code&gt;docker-entrypoint-initdb.d&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; postgres:12 as db&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./scripts/db/init.sh /docker-entrypoint-initdb.d&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./scripts/db/dump.sql ./scripts/db/dump.sql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will define our &lt;code&gt;docker-compose.yml&lt;/code&gt; like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.8"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;db&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;db&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
      &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;db&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_USER=user&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_PASSWORD=password&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_DB=database&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;5432:5432&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start our containers!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IIZK3LUj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l58wtcv4a9kzk8g4hfvu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IIZK3LUj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l58wtcv4a9kzk8g4hfvu.png" alt="output" width="880" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I hope this was helpful, feel free to reach out to me on &lt;a href="https://twitter.com/karan_6864"&gt;twitter&lt;/a&gt; if you face any issues. Thanks for reading!&lt;/p&gt;

</description>
      <category>docker</category>
      <category>postgres</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
