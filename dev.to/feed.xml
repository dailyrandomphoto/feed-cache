<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>#WeThe15</title>
      <author>InHuOfficial</author>
      <pubDate>Thu, 19 Aug 2021 13:50:25 +0000</pubDate>
      <link>https://dev.to/inhuofficial/wethe15-great-shame-about-the-website-though-3k24</link>
      <guid>https://dev.to/inhuofficial/wethe15-great-shame-about-the-website-though-3k24</guid>
      <description>&lt;p&gt;A great campaign idea and launched in tandem with the 2020 Paralympics, "We The 15" is a campaign I could get behind. And while the video is great, the website is a mess!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-campaign"&gt;
  &lt;/a&gt;
  What is the campaign?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;WeThe15 is a global movement, which was founded by a coalition of organisations from sport, human rights, policy, communications, business, arts and entertainment, uniting to change attitudes and create more opportunities for persons with disabilities, as well as improve mobility and accessibility.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source: &lt;a href="https://www.wethe15.org/the-campaign"&gt;https://www.wethe15.org/the-campaign&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In essence it is a campaign designed to start the conversation around accessibility, disability and inclusion and then drive that conversation into action!&lt;/p&gt;

&lt;p&gt;A 10 year long campaign to remove barriers that people with disabilities face every day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-am-i-excited-by-this"&gt;
  &lt;/a&gt;
  Why am I excited by this?
&lt;/h2&gt;

&lt;p&gt;Well you probably know I love accessibility. &lt;/p&gt;

&lt;p&gt;But more importantly their promotion video is, without doubt, the single best video (advert) on disability I have seen and I hope it will resonate with people.&lt;/p&gt;

&lt;p&gt;It puts the point across that I believe deeply in. &lt;/p&gt;

&lt;p&gt;People with disabilities do not want sympathy, they are not "special" or "inspiring". &lt;/p&gt;

&lt;p&gt;They are people, with lives, jobs, desires and wishes. &lt;/p&gt;

&lt;p&gt;All people with disabilities want is:&lt;/p&gt;

&lt;p&gt;✅ A conversation to happen around accessibility and inclusion.. &lt;/p&gt;

&lt;p&gt;✅ That leads to consideration when designing products and services or policies...&lt;/p&gt;

&lt;p&gt;✅ That leads to a more accessible and inclusive world. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;They basically want you to stop being so absent minded and think about disability and accessibility so they can get on with life without having to face the barriers your shoddy code creates.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-video"&gt;
  &lt;/a&gt;
  The video!
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/gHCDvdCaJhI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Absolute perfection if you ask me! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#although-the-website-leaves-a-lot-to-be-desired"&gt;
  &lt;/a&gt;
  Although the website leaves a lot to be desired....
&lt;/h2&gt;

&lt;p&gt;I am disappointed that the website makes a load of accessibility mistakes though!&lt;/p&gt;

&lt;p&gt;I am not going to list them all but for a 7 page website there are a lot of issues:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They use userway overlay - &lt;a href="https://overlaysdontwork.com/"&gt;&lt;strong&gt;overlays are not accessible&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;You can't access the drop down menu with the keyboard so 70% of the site is not accessible to keyboard users.&lt;/li&gt;
&lt;li&gt;There are colour contrast issues.&lt;/li&gt;
&lt;li&gt;Their subscribe form doesn't have visible, permanent labels!&lt;/li&gt;
&lt;li&gt;They have missed a couple of alt attributes...yes really!&lt;/li&gt;
&lt;li&gt;Their social media links to not have any text that a screen reader can access.&lt;/li&gt;
&lt;li&gt;They start at heading level 2 on the home page, heading level 3 on others!&lt;/li&gt;
&lt;li&gt;Some of the buttons do not have visible focus indicators.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are accessibility &lt;strong&gt;basics&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-could-you-do-me-a-favour"&gt;
  &lt;/a&gt;
  So &lt;strong&gt;could you do me a favour?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Can you tweet this article to @wethe15 and see if we can get their attention so I can help them fix this problem before the campaign gets momentum!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-information"&gt;
  &lt;/a&gt;
  More information
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.wethe15.org/"&gt;WeThe15 website&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bbc.co.uk/news/disability-58231022"&gt;BBC article on WeThe15&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course, you can always brush up on your accessibility skills with my mega reference piece:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/101-digital-accessibility-tips-and-tricks-4728" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;101 Digital Accessibility tips and tricks&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ Jul 30 ・ 68 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>a11y</category>
      <category>webdev</category>
      <category>news</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Hello World! We've launched🚀</title>
      <author>Kartik Grewal</author>
      <pubDate>Thu, 19 Aug 2021 13:46:43 +0000</pubDate>
      <link>https://dev.to/canonic/hello-world-we-ve-launched-3c3b</link>
      <guid>https://dev.to/canonic/hello-world-we-ve-launched-3c3b</guid>
      <description>&lt;p&gt;Hello World!&lt;/p&gt;

&lt;p&gt;It brings us immense joy to announce that we are ready to get out of Beta. After 8 months of successfully launching our product, we worked on new features, bug fixes and great feedback from all of you. The result was a much stable and smoother platform equipped with features to help you build a production-ready backend in minutes without any knowledge of code.&lt;/p&gt;

&lt;p&gt;We'd love to hear your feedback here - &lt;a href="https://www.producthunt.com/posts/canonic-2"&gt;https://www.producthunt.com/posts/canonic-2&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wait-whats-canonic"&gt;
  &lt;/a&gt;
  Wait! ….what’s Canonic?
&lt;/h3&gt;

&lt;p&gt;Canonic is a low-code intuitive platform to build scalable backend and craft APIs for your web apps, mobile apps and microservices. It enables developers to ship production-ready backend instantly. All without writing a single line of code!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-whats-new-in-canonic"&gt;
  &lt;/a&gt;
  So what’s new in Canonic?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Execute Database and Scheduled Triggers without diving into cron&lt;/strong&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Integrate with external databases&lt;/strong&gt; - Postgres, SQL, MySQL, MongoDB &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Choose the region for deployment and keep your app secure&lt;/strong&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;New Marketplace of integrations&lt;/strong&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SDK to help integrate backend with frontend&lt;/strong&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Accelerate Development time&lt;/strong&gt; - With our intuitive interface, defining database models and crafting APIs becomes quick and easy. Logic blocks help you define your business logic. And it's all hosted by default! so you can instantly start integrating APIs with your frontend.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Single Touch point to manage your entire backend&lt;/strong&gt; - Everything from hosting, to database, to APIs can be managed on Canonic, saving you the hassle of setting up and managing multiple services.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deploy scalable backend&lt;/strong&gt; - With instant deployments and serverless architecture, scalability stays high while keeping costs down. As your project grows, you can make use of built-in code editor to write business logic that require code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Automate Events&lt;/strong&gt; - Database &amp;amp; scheduled triggers help you achieve automation without diving into cron and scripts. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A much smoother and stable platform.&lt;/strong&gt; &lt;br&gt;
We’re excited for you to try our new and improved Canonic, and we hope that this tool will help you create an amazing backend. The Canonic Team and I are beyond thankful to our amazing and supportive Canonic community. Without the incredible amount of feedback and support we wouldn't be here today.&lt;/p&gt;

&lt;p&gt;Let us know your thoughts! - &lt;a href="https://www.producthunt.com/posts/canonic-2"&gt;https://www.producthunt.com/posts/canonic-2&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>backend</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hands on Web Share API</title>
      <author>Felix Jordan</author>
      <pubDate>Thu, 19 Aug 2021 13:26:48 +0000</pubDate>
      <link>https://dev.to/ecxio/hands-on-web-share-api-5bb8</link>
      <guid>https://dev.to/ecxio/hands-on-web-share-api-5bb8</guid>
      <description>&lt;p&gt;Hello world, welcome to my first post!&lt;br&gt;
In this one, I will explain what the Web Share API is and what you can do with it. If you didn't work it yet, maybe you give it a try in your current or next project.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-the-web-share-api"&gt;
  &lt;/a&gt;
  What is the Web Share API?
&lt;/h2&gt;

&lt;p&gt;Let's say, you want to share some page specific data from your website to some social media platforms and maybe messengers.&lt;br&gt;
The Web Share API give web developers the power to use the native share mechanisms, that we all know from native applications (e.g. if you click the share button in Safari on the bottom center). It's one of these cool new APIs, that give the web more capability and push the keyword "Progressive Web App" a little more. If you haven't got any idea what the hell I'm talking about, here is a picture for you:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0jiqSwfa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53gosz0qo8cdhg3vox4i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0jiqSwfa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53gosz0qo8cdhg3vox4i.png" alt="Web Share API - native dialog on iOS after clicking the button"&gt;&lt;/a&gt;&lt;em&gt;Web Share API - native dialog on iOS after clicking the button&lt;/em&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#why-should-i-use-the-web-share-api"&gt;
  &lt;/a&gt;
  Why should I use the Web Share API?
&lt;/h2&gt;

&lt;p&gt;You may ask yourself why you should use this API, because you already have enough share possibilities like WhatsApp, Facebook, Twitter, LinkedIn etc. within your application. That's fine, but think about the Web Share API as the cool new kid on the block, which also makes it much easier for you to implement these share possibilities.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#without-the-web-share-api"&gt;
  &lt;/a&gt;
  Without the Web Share API
&lt;/h3&gt;

&lt;p&gt;In this case, we should have to provide a link/button for every social media/messenger platform. That means, we have to take care of each link separately. That also implies to maintain these links, because they could change in the future.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#with-the-web-share-api"&gt;
  &lt;/a&gt;
  With the Web Share API
&lt;/h3&gt;

&lt;p&gt;In this case, we will just have one button to click on. After clicking this button, the native dialog will be shown. One advantage of this native feature is, that it is known by the users. Another advantage (I think a bigger one) is, that if there is a new social media platform or native share feature (in the OS) it's directly implemented! All done by the native mechanism! Yeah! 🎉&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#how-can-i-use-the-web-share-api"&gt;
  &lt;/a&gt;
  How can I use the Web Share API?
&lt;/h2&gt;

&lt;p&gt;Like any other new cool Browser API out there, it's asynchronous. That means we have to work with Promises (if you are not familiar with Promises, I'm sure you will find a good article out there). In this case, we will call our &lt;code&gt;navigator.share()&lt;/code&gt; function, which will return a promise:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sharePromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;share&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shareData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, maybe we need some more context to have a good example.&lt;/p&gt;

&lt;p&gt;Let's start with the &lt;code&gt;share()&lt;/code&gt; function, that will take the data object (&lt;code&gt;shareData&lt;/code&gt;) as a parameter. The result of this call, will be the native share dialog with some share targets, depending on the data that was thrown in. A &lt;strong&gt;share target&lt;/strong&gt; is a possible option, that is displayed to the user in the dialog. This could be a contact (via WhatsApp, Telegram etc.), native applications or built-in service (e.g. "Copy to clipboard"). To make it clear here, you can't decide which share targets should be shown to the user, they were provided by the user agent.&lt;/p&gt;

&lt;p&gt;So let's start with the most secret part ... the &lt;code&gt;shareData&lt;/code&gt;. Honestly, it's just an object that &lt;strong&gt;can&lt;/strong&gt; contain the following members:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;title&lt;/li&gt;
&lt;li&gt;text&lt;/li&gt;
&lt;li&gt;url&lt;/li&gt;
&lt;li&gt;files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the future there could be some more members, but this is the current state. It's important that not all data members have to be provided, but at least one member should be inside.&lt;/p&gt;

&lt;p&gt;The user agent will take care of the &lt;code&gt;shareData&lt;/code&gt; and converts these in a suitable format for the different targets. This could include merging or discarding some members. But this magic is done behind the scene, we can just take a drink and enjoy the beautiful interface. 🍹&lt;br&gt;
The share targets that you will see on the native dialog depends on the &lt;code&gt;shareData&lt;/code&gt; payload. Anyway, let's dive into the different members of the &lt;code&gt;shareData&lt;/code&gt; object.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#title-member"&gt;
  &lt;/a&gt;
  Title member
&lt;/h3&gt;

&lt;p&gt;This member is a string and contains the title of the document that is shared. In my tests, I couldn't find it anyway. So in most cases, this member is not being displayed or used on most targets.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#url-member"&gt;
  &lt;/a&gt;
  Url member
&lt;/h3&gt;

&lt;p&gt;The url member is just a simple pure string URL that refers to a resource that should be shared. This could be an absolute or relative URL. If you provide a relative URL it will automatically update the url like a &lt;em&gt;href&lt;/em&gt; attribute.&lt;/p&gt;

&lt;p&gt;Pro Tip: If you just provide an empty string as url, then it will automatically reffers to the current page.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#text-member"&gt;
  &lt;/a&gt;
  Text member
&lt;/h3&gt;

&lt;p&gt;The text member is also a string option, that allows you to provide a body of the message for the shared data. This member is often use by the share targets (e.g. email body text).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#everything-in-action"&gt;
  &lt;/a&gt;
  Everything in action
&lt;/h3&gt;

&lt;p&gt;You might think, why didn't we cover the files member. Please keep cool and take a breath, we will cover it in a couple of minutes. But I think now it's time for some code. Finally 🎉&lt;/p&gt;

&lt;p&gt;Let's say we have a fancy button on our page, where we just want to share some data related to the current page. The JS code would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// our share button in the markup&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shareButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;share&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// create share data object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shareData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Web Share API&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The best way to share your data.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="c1"&gt;// reffers to the current page&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// click event handler is necessary to call navigator.share()&lt;/span&gt;
&lt;span class="nx"&gt;shareButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// does the browser supports the feature?&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;share&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;share&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shareData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🥳 Shared via API.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`😢 &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// you could do a fallback solution here ... &lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;😢 Your browser does not support the web share api.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's go through the code step by step. At first, we create an object and add some members to it, in this case &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt;. Then we add an event listener to our &lt;code&gt;shareButton&lt;/code&gt;. In the event handler, we check for &lt;code&gt;navigator.share&lt;/code&gt;, because we want to check if the browser supports the Web Share API. If not, it will return &lt;code&gt;undefined&lt;/code&gt; and the else branch will be executed. There could be a fallback solution for all browsers that are not supporting this functionality. At least this would be the best, if we think about progressive enhancement. But in this post we want to concentrate on the if branch.&lt;/p&gt;

&lt;p&gt;First, we will open the &lt;code&gt;try&lt;/code&gt; block and call the &lt;code&gt;navigator.share(shareData)&lt;/code&gt; inside. Now the native dialog will open up with all possible share targets. With &lt;code&gt;await&lt;/code&gt; we will wait until the promise is fulfilled. That means, until the user cancel the sharing or chose a share target. On cancel, the code above will run the &lt;code&gt;catch&lt;/code&gt; block. If the user finally shares the data via a share target, then the promise will be resolved. Then we successfully shared some data with the Web Share API 🎉&lt;/p&gt;

&lt;p&gt;ℹ️ &lt;strong&gt;Important note&lt;/strong&gt;: Even if the sharing was successful, we didn't get any detailed information. The promise itself will just return &lt;code&gt;undefined&lt;/code&gt;. There is no way to get the chosen share target of the user. I know that's a bit disappointing, but there is a good reason.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a requirement to not allow the website to learn which apps are installed, or which app was chosen from &lt;code&gt;share()&lt;/code&gt;, because this information could be used for fingerprinting, as well as leaking details about the user's device. &lt;em&gt;&lt;a href="https://www.w3.org/TR/web-share/"&gt;https://www.w3.org/TR/web-share/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#files-member"&gt;
  &lt;/a&gt;
  Files member
&lt;/h3&gt;

&lt;p&gt;Now it's time to talk about the &lt;code&gt;files&lt;/code&gt; member. This one contains all shared files as an array. By adding this member to you &lt;code&gt;shareData&lt;/code&gt;, we have to handle binary data and the code gets a little more complex. But don't be afraid, we will go through it together.&lt;/p&gt;

&lt;p&gt;So time for some imagination 💭 again...&lt;br&gt;
Imagine you want to share a super cool looking image, if the user clicks on our share button. We need to load the file like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./super-cool-looking.jpeg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image/jpeg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filesArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// add it to the shareData&lt;/span&gt;
&lt;span class="nx"&gt;shareData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filesArray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In these lines of code we fetch the image, convert the raw data to BLOB (binary large object) and create a new File with the File interface. Then we just put it into an array. Of course, it's possible for you to add their more than one file.&lt;br&gt;
In the end, we just add the files property to the &lt;code&gt;shareData&lt;/code&gt; object and initialize it with the &lt;code&gt;filesArray&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you can share images via the Web Share API, but be aware that this feature is not supported in all browsers. There is also an opportunity to check, if file sharing is possible in the browser. You can use the &lt;code&gt;navigator.canShare()&lt;/code&gt; function for this. It could look like this for our example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canShare&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canShare&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;filesArray&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;share&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shareData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;File sharing is not supported.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function has one parameter like the &lt;code&gt;share()&lt;/code&gt; function and will return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, if the browser can share the object (&lt;code&gt;shareData&lt;/code&gt;) you put in.&lt;br&gt;
But there is a big disadvantage for this approach, because this functionality is experimental and is not supported everywhere. Sadly, file sharing isn't that easy to handle on every device and browser. But as always, do it progressive (like above) and support modern browsers.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#when-to-use"&gt;
  &lt;/a&gt;
  When to use?
&lt;/h2&gt;

&lt;p&gt;One important note, the &lt;code&gt;navigator.share()&lt;/code&gt; function will just work on a user interaction (e.g. click event handler). That means, you can not run the code on page load. Which is good, because otherwise we would have the next stupid thing like cookie banners or push notification permission request.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#which-browsers-support-the-web-share-api"&gt;
  &lt;/a&gt;
  Which Browsers support the Web Share API?
&lt;/h2&gt;

&lt;p&gt;I don't want to talk about it in detail, because it could be outdated. So here is the link to &lt;a href="https://caniuse.com/web-share"&gt;Web Share API support&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As shown above, the modern way of sharing data in JS makes the code quiet easy and understandable. Also it's easy to maintain the code and we get the native share mechanism, which will also support future social platforms automatically. I'm a real fan of this approach and would recommend to give it a try in your next project. If you already made some experiences with this API, please share your thoughts in the comment section below. 👇&lt;/p&gt;




&lt;p&gt;My sources&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/TR/web-share/"&gt;w3c Web Share&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/share"&gt;mdn Web Share API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.dev/web-share/"&gt;web.dev Web Share&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>firstpost</category>
    </item>
    <item>
      <title>Fireslime is now Blue Fire</title>
      <author>Erick</author>
      <pubDate>Thu, 19 Aug 2021 13:07:26 +0000</pubDate>
      <link>https://dev.to/blue-fire/fireslime-is-now-blue-fire-405g</link>
      <guid>https://dev.to/blue-fire/fireslime-is-now-blue-fire-405g</guid>
      <description>&lt;p&gt;TLDR: Fireslime, the team behind the Flame Engine, is changing their name to Blue Fire. We are also moving away from the idea of being just an indie game studio and want to focus more on maintaining Open Source projects and create an open and friendly community around those projects.&lt;/p&gt;

&lt;p&gt;Almost 3 years ago, I (Erick) and Luan started a little project together. We both enjoyed game development, and after talking about some ideas, we created Fireslime, a small, informal, Indie Game Studio.&lt;/p&gt;

&lt;p&gt;When Fireslime started, Luan had already created the very first version of Flame, a Flutter based game engine. Since we both liked learning and exploring new things, we decided to use Flame as the engine of our games; that way, we could slowly improve the engine, while we developed the game. But back then, our focus was mainly on building games, and not the game engine itself. Flame was just a means to an end for us, a tool to create our games.&lt;/p&gt;

&lt;p&gt;As time passed, we created multiple games. We even fully released two of them, and launched two demo versions. They didn't manage to make much success on their own, but they helped us grow Flame.&lt;/p&gt;

&lt;p&gt;Suddenly, we started to realize that the people who were in the community Discord (that we created for the Fireslime's games) were actually there because of the Flame Engine or the other open source projects we maintain, and not for the games themselves.&lt;/p&gt;

&lt;p&gt;As the Flame Engine and our other projects grew, so did the time we spent on them. Which inadvertently meant that we spent less time working on our games.&lt;/p&gt;

&lt;p&gt;Over time, more people joined the team as maintainers, the first to join was Renan, a software developer, bad gamer and bad comedian. After Renan the next one to join was  Lukas, a ​​developer, keyboard builder, backpacker and climber. And last but not least, Jochum, an open source enthusiast, GitLab fanboy, collector of strange linux devices and proud owner of a Commodore 64. And while the team grew, that initial idea of being a game studio was steadily fading.&lt;/p&gt;

&lt;p&gt;So we decided to finally embrace this situation that we found ourselves in, and officially announce our new goal and focus: working on Open Source projects and building a friendly community around our Flutter and Dart projects.&lt;/p&gt;

&lt;p&gt;Fireslime was a name that we decided on originally for a game studio, as it was playful and friendly. But with our new focus in mind, we wanted something different; something open and something that had its roots in both Fireslime and Flutter. So, as a team, we chose the name Blue Fire.&lt;/p&gt;

&lt;p&gt;"Blue" expresses our focus and love for the Flutter framework and Dart, on which our projects are built and our community lives. And "Fire" represents our roots, our history and our connection to the Flame Engine.&lt;/p&gt;

&lt;p&gt;Does that mean that we will no longer build games? No! Our biggest project is the Flame Engine, and the best way of validating and testing such a game engine, is to build games with it. But now that we have our goal and focus clear, we can honestly say that we are committed to Flame, Flutter and our other Open Source projects (be it our other libraries or games), with the hopes to help and grow both the Flame and Flutter community and their corresponding ecosystem.&lt;/p&gt;

&lt;p&gt;So, from us as Fireslime, we thank everyone that has supported, helped and followed us over these last few years. And we hope you will all keep supporting us as Blue Fire as well, and be part of our community! &lt;/p&gt;

&lt;p&gt;The Blue Fire team wishes you happy coding.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Must Known JavaScript console.log() Tips And Tricks!</title>
      <author>TheDailyTechTalk</author>
      <pubDate>Thu, 19 Aug 2021 12:47:29 +0000</pubDate>
      <link>https://dev.to/thedailytechtalk/must-known-javascript-console-log-tips-and-tricks-2cfo</link>
      <guid>https://dev.to/thedailytechtalk/must-known-javascript-console-log-tips-and-tricks-2cfo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#must-known-javascript-consolelog-tips-amp-tricks"&gt;
  &lt;/a&gt;
  Must known JavaScript console.log() tips &amp;amp; tricks!
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#javascript-console"&gt;
  &lt;/a&gt;
  JavaScript Console
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The console object provides access to the browser's debugging console (e.g. the Web console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most developers usually use &lt;code&gt;console.log()&lt;/code&gt; to debug JavaScript code, but &lt;code&gt;console&lt;/code&gt; provides us with such a powerful set of features it would be shame not to use them, or at least know what they do.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;console.log()&lt;/code&gt; For general output of logging information.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;console.info()&lt;/code&gt; Informative logging of information.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;console.warn()&lt;/code&gt; Outputs a warning message.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;console.error()&lt;/code&gt; Outputs an error message to the Web console.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using other logging besides &lt;code&gt;console.log()&lt;/code&gt; will provide you with more informative and clearer logs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d1haIhfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rh74jy8pa4thcj7duem.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d1haIhfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rh74jy8pa4thcj7duem.png" alt="console logging example"&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start-by-exploring-console-object"&gt;
  &lt;/a&gt;
  Lets start by exploring console object
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Umad8Mcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kwlj6wc7wgj0e8q7gqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Umad8Mcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kwlj6wc7wgj0e8q7gqa.png" alt="console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see Console object has plenty of methods. Lets explore some of more useful ones.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consoleclear"&gt;
  &lt;/a&gt;
  console.clear()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;console.clear()&lt;/code&gt; clear the console.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consoledir"&gt;
  &lt;/a&gt;
  console.dir()
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;console.log()&lt;/code&gt; prints the object in its string representation while &lt;code&gt;console.dir()&lt;/code&gt; recognizes the object as an object and prints it’s properties in the form of a clean expandable list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;duck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8vAS9R3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0uarwub9qbw15xjf90r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8vAS9R3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0uarwub9qbw15xjf90r.PNG" alt="console.dir()"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consoletable"&gt;
  &lt;/a&gt;
  console.table()
&lt;/h2&gt;

&lt;p&gt;With &lt;code&gt;console.table()&lt;/code&gt; we can create beautiful tables. This is probably my favourite &lt;code&gt;console&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7zZoO7dI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1eka7eaofk3p3twymy0g.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7zZoO7dI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1eka7eaofk3p3twymy0g.PNG" alt="console.table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consoletime-consoletimelog-and-consoletimeend"&gt;
  &lt;/a&gt;
  console.time(), console.timeLog() and console.timeEnd()
&lt;/h2&gt;

&lt;p&gt;Use &lt;code&gt;console.time()&lt;/code&gt; to start a timer.&lt;br&gt;
Use &lt;code&gt;console.timeLog()&lt;/code&gt; to print time elapsed since the timer started.&lt;br&gt;
Use &lt;code&gt;console.timeEnd()&lt;/code&gt; to print the total amount of time since &lt;code&gt;console.time()&lt;/code&gt; started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dtzQJKQL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01eoysbgw6q8uw7r7025.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dtzQJKQL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01eoysbgw6q8uw7r7025.PNG" alt="console.table()"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#consolegroup-and-consolegroupend"&gt;
  &lt;/a&gt;
  console.group() and console.groupEnd()
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The console.group() method creates a new inline group in the Web console log. This indents following console messages by an additional level, until console.groupEnd() is called.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3_xctQCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvyy14yey3zykvxy37rm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3_xctQCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvyy14yey3zykvxy37rm.PNG" alt="group"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#console-logging-with-css"&gt;
  &lt;/a&gt;
  console logging with CSS
&lt;/h2&gt;

&lt;p&gt;This works with most console method such as &lt;code&gt;.log()&lt;/code&gt;, &lt;code&gt;.warn()&lt;/code&gt;, &lt;code&gt;.error()&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Please note that we have to use '%c' for css to work!&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%cTheDailyTechTalk!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:red;font-family:system-ui;font-size:4rem;-webkit-text-stroke: 1px black;font-weight:bold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0AZfb8VJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxl8cpeg8znxtypzpubb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0AZfb8VJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxl8cpeg8znxtypzpubb.PNG" alt="group"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I recently started a new blog &lt;a href="https://thedailytechtalk.com"&gt;TheDailyTechTalk&lt;/a&gt; where I create free content. If you liked this post and would like to read more posts about javascript please check it out 🎉🎉&lt;br&gt;
🥰&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you like what I write and want to support me, please follow me on &lt;a href="https://twitter.com/TheDailyTechTa1"&gt;Twitter&lt;/a&gt; to learn more about programming and similar topics ❤️❤️&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>programming</category>
    </item>
    <item>
      <title>My Journey from Angular to React in 2021</title>
      <author>Indrajeet Nikam</author>
      <pubDate>Thu, 19 Aug 2021 12:30:19 +0000</pubDate>
      <link>https://dev.to/indrajitbnikam/my-journey-from-angular-to-react-in-2021-5bai</link>
      <guid>https://dev.to/indrajitbnikam/my-journey-from-angular-to-react-in-2021-5bai</guid>
      <description>&lt;h2&gt;
  &lt;a href="#my-journey-from-angular-to-react-in-2021"&gt;
  &lt;/a&gt;
  My Journey from Angular to React in 2021
&lt;/h2&gt;

&lt;p&gt;Hi Folks, long time no see 👋🏼 😷&lt;/p&gt;

&lt;p&gt;Hope everyone is safe &amp;amp; doing fine amidst this Covid situation.&lt;/p&gt;

&lt;p&gt;This time, I have a different topic to talk about. i.e. &lt;strong&gt;&lt;em&gt;"How I transitioned from an Angular Developer to a Senior React Developer in 2021."&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hope you will learn and be able to relate a thing or two from my journey.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#angular-history"&gt;
  &lt;/a&gt;
  Angular history
&lt;/h1&gt;

&lt;p&gt;I got introduced to Angular back in 2018 when I was doing my PG-DAC course in Sunbeam Institute(CDAC Centre), Pune. It was very brief but it got me started with Angular Development.&lt;/p&gt;

&lt;p&gt;After the course was completed, I got a job offer from Siemens India.&lt;/p&gt;

&lt;p&gt;Where I spent the last +3 years working on Angular related projects.&lt;/p&gt;

&lt;p&gt;I learned so much during this time from my awesome colleagues and through self-teaching. This time helped me build a strong foundation as a framework-agnostic web developer.&lt;/p&gt;

&lt;p&gt;During this time I also explored Web-Assembly, CSS3(in-depth) and many other interesting topics related to web development.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#roadblocks-ahead"&gt;
  &lt;/a&gt;
  Roadblocks ahead
&lt;/h1&gt;

&lt;p&gt;I think Angular is pretty good as a framework, in fact, in certain aspects, it's better than react(Now that I work with react, I'm allowed to say that 😅). But, much as I loved working with Angular on different projects. Soon I realised that, that's not what everybody thinks.&lt;/p&gt;

&lt;p&gt;When I learned about React/Vue's popularity 1 year back. I was stunned. I did my research at the time and I just could not ignore the fact that,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React has much more jobs than Angular worldwide. which means more opportunities.&lt;/li&gt;
&lt;li&gt;A pretty good number of big companies use React. For example Netflix, Twitter, Airbnb, AWS to name a few.&lt;/li&gt;
&lt;li&gt;Sheer amount of community size that reacts has especially because of JS(as opposed to TS based Angular). Which means more support.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is just scratching the surface. A lot of new startups prefer to React as their go-to framework for web development. This is also the reason I got a job at &lt;a href="https://www.cashfree.com/"&gt;Cashfree&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;You can find many detailed comparisons in the following articles,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fulcrum.rocks/blog/angular-vs-react/"&gt;https://fulcrum.rocks/blog/angular-vs-react/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.simform.com/blog/angular-vs-react"&gt;https://www.simform.com/blog/angular-vs-react&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So my reason was not something technical, like react is much better than angular when it comes performance, bla bla bla! Because I don't think one is better than the other, both are great frameworks build by brilliant people. It was rather the ecosystem that React has developed so far, that led me to believe, it's time to switch the framework for good.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#react-journey"&gt;
  &lt;/a&gt;
  React Journey
&lt;/h1&gt;

&lt;p&gt;I had decided to switch to react as my primary framework about a year ago.&lt;/p&gt;

&lt;p&gt;Initially, I did not have any idea where to start? So I started with some youtube videos to get some feel of React. But they were short and did not provide much information. I used to create small applications like the Todo app or tic-tac-toe game etc. in my spare time. But it was still not enough. Unlike Angular, I did not work on React in a professional capacity at the time. So It was hard for me to understand how the entire ecosystem works together. All I was working on was some small apps that only gave me insights into few features of React.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Trust me, I hated React in the first few weeks as I was heavily used to Typescript before that (Angular people can relate better) 😂&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After quite some time(Approx. 6 months 😅), I realised that the only way for me to learn a great deal about React is through some bigger project.&lt;/p&gt;

&lt;p&gt;So started looking for such courses on &lt;a href="https://www.udemy.com/"&gt;Udemy&lt;/a&gt;(My goto learning platform, also created in React 😉).&lt;/p&gt;

&lt;p&gt;After compiling down to a few courses, The course that I found the most helpful was,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fffR-8lW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629366117674/c5hOh2pkD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fffR-8lW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629366117674/c5hOh2pkD.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#complete-react-developer-in-2021-w-redux-hooks-graphql"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/course/complete-react-developer-zero-to-mastery/"&gt;Complete React Developer in 2021 (w/ Redux, Hooks, GraphQL)&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;BTW, this is not an affiliated link.&lt;/p&gt;

&lt;p&gt;Authors of the course &lt;a href="https://www.udemy.com/user/andrei-neagoie/"&gt;Andrei Neagoie&lt;/a&gt; &amp;amp; &lt;a href="https://www.udemy.com/user/yihua-zhang-5/"&gt;Yihua Zhang&lt;/a&gt; are very experienced &amp;amp; passionate developers. Their teaching style is also pretty simple. You learn everything by doing. They have only worked on one project throughout the course to teach all the below topics, which helps you understand how the entire ecosystem works together(which you should know!).&lt;/p&gt;

&lt;p&gt;It teaches you about,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React libraries like React-router, Redux, Thunk, Redux-saga etc.&lt;/li&gt;
&lt;li&gt;Styled components&lt;/li&gt;
&lt;li&gt;HOC, Container patterns&lt;/li&gt;
&lt;li&gt;React Hooks&lt;/li&gt;
&lt;li&gt;Context API&lt;/li&gt;
&lt;li&gt;GrapghQL + Apollo&lt;/li&gt;
&lt;li&gt;Performance Optimisation&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;and much more...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On top of that, &lt;a href="https://zerotomastery.io/"&gt;ZTM&lt;/a&gt;(ZeroToMastery) gives you access to the discord community which has a huge number of active members.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9O4GjFPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629366196324/VhdwNFM-9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9O4GjFPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629366196324/VhdwNFM-9.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I just can't emphasise enough, how great this course is ❤️.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#react-dev-job"&gt;
  &lt;/a&gt;
  React Dev Job
&lt;/h1&gt;

&lt;p&gt;At this point, I was already familiar with React to pretty good lengths. I had also worked on a lot of projects. You can find them on my portfolio &lt;a href="https://indrajeet.me"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also created my portfolio using react during this time to stand out even more.&lt;/p&gt;

&lt;p&gt;Now it was time to search for a react job and cracking it.&lt;/p&gt;

&lt;p&gt;In the beginning I tried using platforms like &lt;a href="http://naukri.com"&gt;Naukri.com&lt;/a&gt;, &lt;a href="http://linkedin.com"&gt;LinkedIn.com&lt;/a&gt; etc. I used to apply almost everywhere in the beginning(with my so-called Indian Mentality 😅), Good number of companies used to follow up soon as well. But After having discussions, I used to get the same feeling over and over again. Interviews felt a bit easy. I could not picture myself learning something in these companies(Not referring to every company!). So I wanted to apply for a job at some startups that I knew back then and were doing great IMHO. Coincidentally, One day I tried applying to this blogging platform, &lt;a href="https://hashnode.com/"&gt;Hashnode&lt;/a&gt;. At the time they used to post their jobs on &lt;a href="https://www.notion.so/"&gt;Notion&lt;/a&gt; &amp;amp; &lt;a href="https://angel.co/jobs"&gt;AngelList&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That's how I got to know about AngelList. There were few other good sites that I found later. But AngelList changed my life and Aspirations. It not only had great startups listed on it, It even had a job posting from across the world with compensation mentioned. That just blew my mind and I got a better stand of how much I am worth in the IT industry.&lt;/p&gt;

&lt;p&gt;I now started compiling job opportunities from AngelList. I started applying soon after.&lt;/p&gt;

&lt;p&gt;To be honest, I applied at more than 100 job postings, I gave more than 40 interviews during the span of 3 months. As I spent a lot of time being interviewed almost every day. I learned a lot about my improvement areas and eventually became good at those.&lt;/p&gt;

&lt;p&gt;At the end of this Job Search Spree. I found my current company Cashfree and I finally accepted an offer for Senior Frontend Developer. At Cashfree alone I gave about 4 Interviews and some Technical Tests.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---K8Tda78--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E9JReyeVkAcw1xi.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOrgJ7K6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1297866990455939072/7m-Ojieh_normal.jpg" alt="Indrajeet Nikam profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Indrajeet Nikam
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @indrajeet_nikam
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Excited to announce that I have joined &lt;a href="https://twitter.com/gocashfree"&gt;@gocashfree&lt;/a&gt; in the Engineering team! &lt;br&gt;&lt;br&gt;Looking forward to working with my awesome colleagues and developing cutting edge solutions for the fintech ecosystem. I can already feel the adrenaline of working in a dynamic workplace.&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/Cashfree"&gt;#Cashfree&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      09:52 AM - 19 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1428293694898069506" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1428293694898069506" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1428293694898069506" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h1&gt;
  &lt;a href="#advice"&gt;
  &lt;/a&gt;
  Advice
&lt;/h1&gt;

&lt;p&gt;Few things that helped me.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Preparing for almost a year, being interviewed 40+ times, creating your own portfolio. All of it might look daunting to some people(including me 1 year ago). But don't let it discourage you from &lt;strong&gt;starting small.&lt;/strong&gt; I never planned to do this many things in the first place. It just happened. So don't worry, &lt;strong&gt;It's worth the effort&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Work on your &lt;strong&gt;online presence for better opportunities&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Get your basics right.&lt;/strong&gt;(I mean JavaScript, CSS in case of frontend dev)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Be Patient&lt;/strong&gt; in your job search. &lt;strong&gt;You don't have to join the first company you apply to.&lt;/strong&gt; You almost always get less pay than you deserve that way.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Be open-minded for opportunities&lt;/strong&gt; and plan logically.&lt;/li&gt;
&lt;li&gt;Most important, &lt;strong&gt;Don't get into this Angular vs. React fight 😂.&lt;/strong&gt; Both are great and you should know both(at least to a certain extent).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I used to blog on  &lt;a href="https://fullyunderstood.com"&gt;fullyunderstood.com&lt;/a&gt;, you can check my previous blogs there.&lt;/p&gt;

&lt;p&gt;From here onwards, I'll be posting all my blogs on this domain 👉🏼 &lt;a href="https://blog.indrajeet.me"&gt;blog.indrajeet.me&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In case you are interested in Technical blogs regarding web development. You can consider following me  &lt;a href="https://blog.indrajeet.me/"&gt;here&lt;/a&gt;, on  &lt;a href="https://www.linkedin.com/in/indrajeet-nikam-3737a8101/"&gt;LinkedIn&lt;/a&gt;  or on  &lt;a href="https://twitter.com/indrajeet_nikam"&gt;Twitter&lt;/a&gt; .&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>angular</category>
    </item>
    <item>
      <title>How To Use Error Boundaries in React With Error Monitoring</title>
      <author>Justin Hunter</author>
      <pubDate>Thu, 19 Aug 2021 12:27:06 +0000</pubDate>
      <link>https://dev.to/exceptionless/how-to-use-error-boundaries-in-react-with-error-monitoring-435h</link>
      <guid>https://dev.to/exceptionless/how-to-use-error-boundaries-in-react-with-error-monitoring-435h</guid>
      <description>&lt;p&gt;Backend engineers have all the tools. Nice error handling. Reporting. Metrics. What about us frontend devs? Sure, we can catch errors in our functions, but what about errors in our presentational code? Take React for example. Write some bad code in your function component and the whole app crashes.&lt;/p&gt;

&lt;p&gt;Fortunately, frontend devs are getting more and more tools to help them with error handling. In fact, with the release of React 16, a new tool was added to the toolbox designed to specifically handle errors in components. &lt;a href="https://reactjs.org/docs/error-boundaries.html"&gt;Error Boundaries allow developers to catch and handle errors&lt;/a&gt; in the presentational layer of React applications. From the React team's announcement:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the past, JavaScript errors inside components used to corrupt React’s internal state and cause it to emit cryptic errors on next renders. These errors were always caused by an earlier error in the application code, but React did not provide a way to handle them gracefully in components, and could not recover from them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That all changed with React 16. However, if you wanted to recover from a presentational layer error AND report it, there wasn't anything out of the box to help you. This is where &lt;a href="https://exceptionless.com/?utm_source=first_signup&amp;amp;utm_medium=blog&amp;amp;utm_campaign=error_boundary"&gt;Exceptionless&lt;/a&gt; (an open-source error handling and monitoring tool) and React work really well together.&lt;/p&gt;

&lt;p&gt;Let's run through a quick tutorial that creates a React app that does the following:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creates-an-error-boundary"&gt;
  &lt;/a&gt;
  Creates an Error Boundary
&lt;/h2&gt;

&lt;p&gt;Forces an error in a function component&lt;br&gt;
Recovers from that error&lt;br&gt;
Reports it to our monitoring service (Exceptionless)&lt;br&gt;
Getting Started&lt;br&gt;
For this tutorial, you will need to have the following installed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node.js v12 or greater&lt;/li&gt;
&lt;li&gt;NPM&lt;/li&gt;
&lt;li&gt;Text editor&lt;/li&gt;
&lt;li&gt;&lt;a href="https://exceptionless.com/?utm_source=second_signup&amp;amp;utm_medium=blog&amp;amp;utm_campaign=error_boundary"&gt;Free account on Exceptionless&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With those things in place, let's generate our React app. From the command line, run the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx create-react-app error-boundary-example&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When your app is created, change into the directory and install the Exceptionless React package:&lt;/p&gt;

&lt;p&gt;cd error-boundary-example &amp;amp;&amp;amp; npm i @exceptionless/react&lt;/p&gt;

&lt;p&gt;This should get you set up with an app and the required package. Now, let's write a bit of code to show off the functionality. We'll walk through setting up an Error Boundary first.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-an-error-boundary-in-react"&gt;
  &lt;/a&gt;
  Creating an Error Boundary in React
&lt;/h2&gt;

&lt;p&gt;The first thing we need to do is create an Error Boundary file. This will act as a wrapper component for the rest of our application. In src folder of your React application, create a new file called ErrorBoundary.js. This will allow us to render a fallback when we hit an error in our component. We'll use Exceptionless's built-in Error Boundary to actually handle reporting the error. You'll see that soon, but let's focus on rendering the fallback for now.&lt;/p&gt;

&lt;p&gt;Inside your new file, add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  render() {
    if (this.state.hasError) {
      return (
        &amp;lt;div&amp;gt;
          &amp;lt;h1&amp;gt;Uh oh!&amp;lt;/h1&amp;gt;
          &amp;lt;p&amp;gt;
            This wasn't supposed to happen. If you continue to see this message,
            please reach out to support.
          &amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file will, again, wrap our main application code. So it will work throughout all of our components. If there's an error in a component, rather than totally crashing the application, it will render what we have in our render method here. You can change this to include whatever styling and information you'd like. I kept mine pretty simple.&lt;/p&gt;

&lt;p&gt;Now, we need to connect this to our application components.&lt;/p&gt;

&lt;p&gt;Wrapping The App Component&lt;br&gt;
You may have many providers in your application that all wrap your main App component. That's OK. This new Error Boundary component will simply wrap everything at the top level. Go to your index.js and update your file to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import ErrorBoundary from './ErrorBoundary';

ReactDOM.render(
  &amp;lt;React.StrictMode&amp;gt;
    &amp;lt;ErrorBoundary&amp;gt;
      &amp;lt;App /&amp;gt;
    &amp;lt;/ErrorBoundary&amp;gt;
  &amp;lt;/React.StrictMode&amp;gt;,
  document.getElementById('root')
);

reportWebVitals();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, before we handle reporting the error to Exceptionless, let's make sure this code works. Start up your application with npm start. We need to force an error. So, go into your App.js file and add an undefined variable into your component body:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import logo from './logo.svg';
import './App.css';

function App() {
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;header className="App-header"&amp;gt;
        &amp;lt;p&amp;gt;{undefinedVariable}&amp;lt;/p&amp;gt;
        &amp;lt;img src={logo} className="App-logo" alt="logo" /&amp;gt;
        &amp;lt;p&amp;gt;
          Edit &amp;lt;code&amp;gt;src/App.js&amp;lt;/code&amp;gt; and save to reload.
        &amp;lt;/p&amp;gt;
        &amp;lt;a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        &amp;gt;
          Learn React
        &amp;lt;/a&amp;gt;
      &amp;lt;/header&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;export default App;&lt;br&gt;
You can see I've added undefinedVariable into the component. Because that variable is, well, undefined, the component will break. Save your code and check out the app. You'll see...&lt;/p&gt;

&lt;p&gt;...an error message still. What gives?&lt;/p&gt;

&lt;p&gt;Well, in development mode, React is going to try to help you out by rendering the error on screen. If you refresh the page, you should see your fallback component render for a split-second before the error appears on screen. When this code is deployed to a production environment, the error won't be displayed on screen. You know this because you've seen your production React apps crash. We all have. It shows a white screen. That's it. Now, though, your app will show the fallback screen.&lt;/p&gt;

&lt;p&gt;Pretty cool!&lt;/p&gt;

&lt;p&gt;Now, we need to make sure the error is reported back to our monitoring system. We will surely get emails from customers about this, but having the details handy might help us solve the problem before our support team can even get to those emails.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#capturing-errors"&gt;
  &lt;/a&gt;
  Capturing Errors
&lt;/h2&gt;

&lt;p&gt;Now that we can display a message, Let's work on capturing the error and sending it to our reporting system—Exceptionless.&lt;/p&gt;

&lt;p&gt;The Exceptionless React package includes an Error Boundary helper called ExceptionlessErrorBoundary. All we need to do is import this into our index.js and wrap our App component with it. You'll need to grab yourself an API key from your Exceptionless account for this. You can follow &lt;a href="https://exceptionless.com/docs/getting-started/"&gt;this guide to do so&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's take a look at what the code looks like. This is what you should update your index.js file to look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import {
  Exceptionless, 
  ExceptionlessErrorBoundary
} from "@exceptionless/react";
import ErrorBoundary from './ErrorBoundary';

const startExceptionless = async () =&amp;gt; {
  await Exceptionless.startup((c) =&amp;gt; {
    c.apiKey = "YOUR API KEY";
    c.useDebugLogger();

    c.defaultTags.push("Example", "React");
  });
};

startExceptionless();

ReactDOM.render(
  &amp;lt;React.StrictMode&amp;gt;
    &amp;lt;ErrorBoundary&amp;gt;
      &amp;lt;ExceptionlessErrorBoundary&amp;gt;
        &amp;lt;App /&amp;gt;
      &amp;lt;/ExceptionlessErrorBoundary&amp;gt;
    &amp;lt;/ErrorBoundary&amp;gt;
  &amp;lt;/React.StrictMode&amp;gt;,
  document.getElementById('root')
);

reportWebVitals();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now go back to your React app and re-load. You won't necessarily see it there, but the error event was sent to Exceptionless. Open up your Exceptionless dashboard and take a look at the Exceptions events:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--glwLGagu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/poujav9b76u8x4k4kdwh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--glwLGagu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/poujav9b76u8x4k4kdwh.png" alt="exception events with error boundary example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can click into your exceptions to get more details. In this case, we will see what the variable was and the full stack trace for our React app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Error Boundaries in React are powerful tools in helping you debug and quickly fix your applications. You can see how quickly we set this up to not only render a fallback UI and to report to an error monitoring service. You could write even less code and only report the error if you wanted to, but I'll leave that up to you.&lt;/p&gt;

&lt;p&gt;There are plenty of error monitoring services out there that you can plug this into, but if you're interested in an open-source solution, get started with &lt;a href="https://exceptionless.com/?utm_source=third_signup&amp;amp;utm_medium=blog&amp;amp;utm_campaign=error_boundary"&gt;Exceptionless&lt;/a&gt; today.&lt;/p&gt;

</description>
      <category>react</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>Preparation Guide for the Associate-level AWS Certification Exams</title>
      <author>JC San Juan</author>
      <pubDate>Thu, 19 Aug 2021 12:24:46 +0000</pubDate>
      <link>https://dev.to/jcsanjuan/how-to-pass-the-aws-associate-level-exams-4ab1</link>
      <guid>https://dev.to/jcsanjuan/how-to-pass-the-aws-associate-level-exams-4ab1</guid>
      <description>&lt;p&gt;&lt;em&gt;A quick guide to becoming AWS certified in 2021. Study materials and resources used are linked below.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VtDhGI5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nckdh722n94o1kzf5mhr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VtDhGI5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nckdh722n94o1kzf5mhr.png" alt="This image contains all the associate-level certification badges from AWS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I finally cleared all the associate-level exams this month. I have learned a lot from my preparation, and would like to share with you some useful tips and resources that might also help you in your certification journey.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#about-the-associatelevel-exams"&gt;
  &lt;/a&gt;
  &lt;br&gt;About the Associate-Level Exams:
&lt;/h4&gt;

&lt;p&gt;The associate-level certifications cover a broad number of AWS services that are tackled at a mid-level depth. Each exam contains 65 items, which can be of multiple choice or multiple response type. Just recently, exam labs were also added in the new version of the SOA exam. You can check the official exam guides below for more information:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/certification/certified-solutions-architect-associate/?ep=sec&amp;amp;sec=assoc_saa"&gt;AWS Certified Solutions Architect — Associate (SAA-C02)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/certification/certified-developer-associate/?ep=sec&amp;amp;sec=assoc_dev"&gt;AWS Certified Developer — Associate (DVA-C01)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/certification/certified-sysops-admin-associate/?ep=sec&amp;amp;sec=assoc_sysops"&gt;AWS Certified SysOps Administrator — Associate (SOA-C02)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#which-exam-to-take"&gt;
  &lt;/a&gt;
  &lt;br&gt;Which Exam to Take:
&lt;/h4&gt;

&lt;p&gt;If you're new to AWS, you can start with the Solutions Architect Associate exam since it covers all the core services and basic concepts you’ll need to get started. However, if you already have some hands-on experience, you can choose one that fits your role. The Developer Associate was my first AWS certification since it aligns with what I do at work.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#exam-difficulty"&gt;
  &lt;/a&gt;
  &lt;br&gt;Exam Difficulty:
&lt;/h4&gt;

&lt;p&gt;Out of the three exams, I personally found the SysOps Administrator Associate as the toughest, while I found the Developer Associate as the easiest. I think what you’ll find easy or difficult depends on your current role and level of hands-on experience in AWS.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#study-materials"&gt;
  &lt;/a&gt;
  &lt;br&gt;Study Materials:
&lt;/h4&gt;

&lt;p&gt;Here’s a list of all the resources I used to prepare for the exams. The first two are paid materials, while the rest are provided for free by AWS.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://courses.datacumulus.com/"&gt;DataCumulus Courses&lt;/a&gt;
— Stephane Maarek’s courses are extremely helpful especially if you’re new to AWS. It’s easily digestible and more affordable than the other courses available.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://portal.tutorialsdojo.com/"&gt;Tutorials Dojo Study Guide and Practice Exams&lt;/a&gt;
— Jon Bonso’s practice tests are the best out there. They also provide study guides and eBooks on their portal.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/certification/certification-prep/"&gt;AWS Whitepapers, FAQs, and Exam Readiness Training&lt;/a&gt;
— AWS offers free technical documentations and training materials to assist you in your preparation. It’s best to go through their recommended readings to supplement your knowledge.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#reviewing-tips"&gt;
  &lt;/a&gt;
  &lt;br&gt;Reviewing Tips:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Create a study plan&lt;/strong&gt;
— Set a reasonable timeline for studying and commit to it. You can allot some time per day or per week depending on your work schedule. It took me a month to prepare for DVA, and a week for the SOA and SAA exams. Take your time, and learn at your own pace.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Take down notes&lt;/strong&gt;
— Note down important details or new concepts. You can also use &lt;a href="https://apps.ankiweb.net/"&gt;Anki&lt;/a&gt; to create flashcards, or &lt;a href="https://www.notion.so/"&gt;Notion&lt;/a&gt; for note-taking. I might share my notes in the future once I'm done organizing them. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Do some hands-on&lt;/strong&gt;
— You can sign up for an &lt;a href="https://aws.amazon.com/free/"&gt;AWS Free Tier account&lt;/a&gt; to do some hands-on exercises. Doing the labs will help you solidify your knowledge in AWS.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Take practice exams&lt;/strong&gt;
— Take the Tutorials Dojo exams on Review Mode. This way, you can see the correct answers and explanations after each question.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Set a hard deadline&lt;/strong&gt;
— I always book the exam before starting my review so I can really commit to my study plan. I encourage you to &lt;a href="https://www.aws.training/Certification"&gt;book your exam&lt;/a&gt; this way, too! You can always reschedule to a later date if you think you need more time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/VbnUQpnihPSIgIXuZv/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/VbnUQpnihPSIgIXuZv/giphy.gif" alt="Cat with eyeglasses using a laptop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you found this helpful. You can reach me on &lt;a href="https://www.linkedin.com/in/sanjuanjc/"&gt;LinkedIn&lt;/a&gt;, or you can leave a comment if you have further questions. I'd be glad to help you out.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>career</category>
    </item>
    <item>
      <title>How to add a new line in Python?</title>
      <author>hrishikesh1990</author>
      <pubDate>Thu, 19 Aug 2021 12:14:50 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-add-a-new-line-in-python-821</link>
      <guid>https://dev.to/hrishikesh1990/how-to-add-a-new-line-in-python-821</guid>
      <description>&lt;p&gt;In this short tutorial, we look at how to add a Python new line. We look at the Python new line character and how the other methods can be used. &lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents-python-new-line"&gt;
  &lt;/a&gt;
  Table of Contents - Python new line:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#python-new-line"&gt;Python new line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#newline-character-in-python"&gt;Newline character in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multiline-strings"&gt;Multi-line string&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#closing-thoughts-python-new-line"&gt;Closing thoughts - Python new line&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#python-new-line"&gt;
  &lt;/a&gt;
  Python new line:
&lt;/h2&gt;

&lt;p&gt;In programming, it is a common practice to break lines and display content in a new line. This improves the readability of the output. Apart from that, you would frequently come across the new line character a lot while working with files. &lt;/p&gt;

&lt;p&gt;Hence it is quite important that you understand how to add a new line and familiarise yourself with how the new line character works. This tutorial is aimed to do the same. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#newline-character-in-python"&gt;
  &lt;/a&gt;
  Newline character in Python:
&lt;/h2&gt;

&lt;p&gt;In Python, the new line character “\n” is used to create a new line. When inserted in a string all the characters after the character are added to a new line. Essentially the occurrence of the “\n” indicates that the line ends here and the remaining characters would be displayed in a new line. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;str_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hire the top &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;1% freelance developers"&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;‘’’&lt;/span&gt;&lt;span class="n"&gt;Output&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Hire&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; 
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;freelance&lt;/span&gt; &lt;span class="n"&gt;developers&lt;/span&gt;&lt;span class="err"&gt;’’’&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As aforementioned, the character after the new line character is printed in a new line.&lt;/p&gt;

&lt;p&gt;Different ways to implement this would include either adding it to string directly, or concatenating it before printing it.&lt;br&gt;
A common question that beginners have while learning how to apply a new line is - since we are adding it to a string - Why doesn’t Python print “\n” as it is? And how does it know that a new line must be added? &lt;/p&gt;

&lt;p&gt;Well, the backslash (“\”) in the new line character is called an escape sequence. Escape sequences are used to add anything illegal to a string. This way Python understands that the following character is not a part of a string and executes it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multiline-strings"&gt;
  &lt;/a&gt;
  Multiline Strings:
&lt;/h2&gt;

&lt;p&gt;Multiline strings are another easy way to print text in a new line. As the name suggests the string itself spans over multiple lines. These strings can be assigned by using either 3 double quotes or 3 single quotes. Python understands that the string is a multiline string and prints it as such.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;str_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""Hire the top 
1% freelance 
developers"""&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="s"&gt;'''Output - Hire the top 
1% freelance 
developers'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the string is printed in the same way as the information was passed. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts-python-new-line"&gt;
  &lt;/a&gt;
  Closing thoughts - Python new line:
&lt;/h2&gt;

&lt;p&gt;Although both methods can be used in Python to add new lines I would recommend using the first method as it is the most commonly accepted method. Also, given Python has an in-built character that facilitates this it is best to utilize it. &lt;/p&gt;

&lt;p&gt;However, please feel free to explore and understand how the multiline method works. &lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>5 Awesome Minimum Viable Product Examples</title>
      <author>Digitalya</author>
      <pubDate>Thu, 19 Aug 2021 12:12:55 +0000</pubDate>
      <link>https://dev.to/digitalyaops/5-awesome-minimum-viable-product-examples-5a16</link>
      <guid>https://dev.to/digitalyaops/5-awesome-minimum-viable-product-examples-5a16</guid>
      <description>&lt;p&gt;When you have a product idea, it’s easy to get carried away. There’s always one more feature to add, a little piece of that, another button. But disorganized development is what makes you lose track of your end goal. You will see 5 awesome minimum viable product examples that will help you kick off your journey.&lt;/p&gt;

&lt;p&gt;This is how a minimum viable product helps you. By developing a product with enough features to attract early users, you get the chance to learn more about your audience and see what they want to use.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What is an MVP?&lt;/li&gt;
&lt;li&gt;Why use an MVP?&lt;/li&gt;
&lt;li&gt;How do you create a minimum viable product?&lt;/li&gt;
&lt;li&gt;What makes a good MVP?&lt;/li&gt;
&lt;li&gt;5 awesome minimum viable product examples&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-what-is-an-mvp"&gt;
  &lt;/a&gt;
  1. What is an MVP?
&lt;/h2&gt;

&lt;p&gt;In the words of Eric Ries, the author of The Lean Start-up, a minimum viable product is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"that version of a new product which allows a team to collect the maximum amount of validated learning about customers with the least effort"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Long story short, an MVP is a product that has just enough features to attract users. Its purpose is to validate your idea in the early stages of &lt;a href="https://www.mindxmaster.com/how-to-develop-a-new-product-and-produce-it/"&gt;product development&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What makes it important is the opportunity to collect feedback from the users. With this, you can iterate and make improvements in the future. An MVP is crucial in agile software development. This methodology is based on validation and iterating products based on user experience.&lt;/p&gt;

&lt;p&gt;The term minimum viable product was introduced in 2001 by Frank Robinson, co-founder, and president of SyncDev, who defined the MVP as&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“the right-sized product for your company and your customer. It’s big enough to cause adoption, satisfaction, and sales, but not so big as to be bloated and risky. Technically, it is the product with maximum ROI divided by risk. The MVP is determined by revenue-weighting major features across your most relevant customers, not aggregating all requests for all features from all customers.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F0nvAQ47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hta4wjtphgo63rej9k7i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F0nvAQ47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hta4wjtphgo63rej9k7i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-why-use-an-mvp"&gt;
  &lt;/a&gt;
  2. Why use an MVP?
&lt;/h2&gt;

&lt;p&gt;In his book, The Lean Startup, Eric Ries said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“The big question of our time is not Can it be built? But should it be built?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A minimum viable product is a great way of finding out (before it’s too late) whether you should continue with your product idea.&lt;/p&gt;

&lt;p&gt;As you’d expect, the dominant benefit of an MVP is gaining validated learnings about customers without fully developing your product. The sooner in the product development cycle you find out if your product is appealing to your targeted audience, the less effort and money you’ll spend on something that won’t succeed in the market.&lt;/p&gt;

&lt;p&gt;The question “Why use an MVP” will be answered clearly when you see the success stories in the 5 awesome minimum viable product examples below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#minimum-viable-product-disadvantages"&gt;
  &lt;/a&gt;
  Minimum Viable Product Disadvantages
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Not fully understanding an MVP’s intended use&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When the term MVP is used loosely, some people understand that it means developing a product with the minimal amount of functionalities they can deliver. While this isn't entirely wrong, it excludes the vital criteria that the MVP should have a feature set sufficient to be able to learn if the product is viable or not.&lt;/p&gt;

&lt;p&gt;This means that your MVP provides no insights to influence your strategic decisions. Therefore, you have no chance to reduce the amount of effort or money you spend on product development—one of the most important minimum viable product benefits.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Confusing the MVP with other types of minimum products&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are the Minimum Marketable Feature (MMF) or the Minimum Marketable Product (MMP). These are focused on earning. The MMP is a product that has the smallest possible feature set that will address the needs of the users while creating the desired customer experience—making the product marketable. This is a tool to reduce time-to-market. We will talk about other types of products further in the article.&lt;/p&gt;

&lt;p&gt;There’s not much harm done with this confusion unless you forget to ask yourself if your product is the right one to satisfy a certain need.&lt;/p&gt;

&lt;p&gt;Usually, people stress the minimum part of an MVP but forget about the viable part. If you do that, you risk delivering a product that won’t provide an assessment on how (or if) customers will use it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Not implementing the feedback you receive&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An MVP was created, launched, and customers have used it. You received some feedback, but it doesn’t align with your vision, so you decide not to implement it.&lt;/p&gt;

&lt;p&gt;The proper use of an MVP implies that the team might dramatically change the delivered product or even abandon it altogether based on the feedback it received. The purpose of the minimum part of an MVP enables teams to do the least amount of work possible to useful feedback—or as Eric Ries defines it, “validated learnings”. Otherwise, you risk working on a product that no one wants or uses.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ub3NPW-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sh4it7mbdkoa6ob72ozk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ub3NPW-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sh4it7mbdkoa6ob72ozk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#minimum-viable-product-advantages"&gt;
  &lt;/a&gt;
  Minimum Viable Product Advantages
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. The spotlight is on core functionalities&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using an MVP helps you keep clarity and focus on what the main functionalities of your product are. It allows you to test out your business concept—while minimizing the amount of time and money you spend.&lt;/p&gt;

&lt;p&gt;In the initial phase of product development, you need to specify the core features and customer value of the software—write it down in a checklist. Having this primary vision always on your mind will help you stay on track and analyze your next steps better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Create a relationship with your initial users&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s always a good idea to engage with new users and stakeholders during the initial stage of product development. Early customers can become brand ambassadors and give you priceless feedback. There’s nothing better than having your software customer-oriented.&lt;/p&gt;

&lt;p&gt;Validated learnings and specific research of your target audience are incredibly valuable for software development. The feedback you get from early adopters can be much more valuable than any predictions or business analytics. Users can tell you which features they appreciate the most or what they would like to see in the next release.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Quicker and easier release&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, using the concept of MVP prevents you from cluttering your initial product with unnecessary features. Therefore, your software can be adopted easily, and it won’t be complicated to use. Before you bring in more features, it’s good to test the UX and usability of your core product.&lt;/p&gt;

&lt;p&gt;Additionally, the choice to develop only the core functionality will speed up the product delivery. After the first release, you can test the main product hypothesis and gather feedback on both core features and desired ones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Minimal risks in product development&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many popular digital products were developed as MVP first: Facebook, Instagram, Spotify, Uber, Dropbox, and many others. You should always keep in mind that a polished, large-scale application will take years to develop—with a lot of money, time, and effort invested.&lt;/p&gt;

&lt;p&gt;The MVP concept protects you from unnecessary spending or wasting time on products or features that your target market doesn’t want or won’t use. By developing your future product incrementally, you shelter yourself from the biggest risk: misusing resources.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-types-of-minimum-products"&gt;
  &lt;/a&gt;
  Other types of “minimum products”
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Minimum viable product vs minimum marketable product&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The minimal marketable product (MMP) is based on the idea of “less is more”. An MMP is a product with the smallest possible feature set that can still address your users’ needs, creates the desired user experience, and can be sold successfully. As we mentioned before, it’s a tool to reduce time-to-market.&lt;/p&gt;

&lt;p&gt;As Steve Blank put it, a successful MMP is to&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“develop the product for the few, not the many”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You need to focus on the features that will make an actual difference for your users. To discover these features, an MVP is a great opportunity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Minimum viable product vs minimum marketable feature&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As the name suggests, a minimum marketable feature (MMF) is the smallest set of functionalities in your product that have to be provided for the user to recognize any value. The term ‘marketable’ refers to a feature that provides sufficient value to the customer so that he buys the product.&lt;/p&gt;

&lt;p&gt;An MMF addresses a certain need or solves a specific problem. It needs to be of high quality and usability, and it applies to both internal and external products.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Minimum viable product vs proof of concept&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A proof of concept (POC) is a small, internal validation project. Its purpose is to provide a “yes” or “no” answer to the question “is the concept viable?”. It has to demonstrate functionality and feasibility for product development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Minimum viable product vs prototype&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A proof of concept shows if a product concept can be done, a prototype shows how it will be done. This usually starts with sketches then eventually evolves into an interactive model that should look like the final product.&lt;/p&gt;

&lt;p&gt;The purpose of a prototype is to display a product’s design and navigation flow—to maximize efficiency. Discovering errors in a prototype, during the early phases of your project, is its main purpose.&lt;/p&gt;

&lt;p&gt;To recap, here are the main benefits of minimum viable product:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Product hypotheses validation with real-life data&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Time-to-market reduction for future feature releases&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Delivers value to early users&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gain validated learnings&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test your product/market fit before developing your full product&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Grow a user base&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Same time, money, and other resources&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-q_QCep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3d1btd7acjaqp756dfnn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-q_QCep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3d1btd7acjaqp756dfnn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-how-do-you-create-a-minimum-viable-product"&gt;
  &lt;/a&gt;
  3. How do you create a minimum viable product?
&lt;/h2&gt;

&lt;p&gt;There’s more than one minimum viable product framework that you can follow to find your MVP. We’re going to talk about the five-step process refined by Patrick Vlaskovits in his book The Entrepreneur’s Guide to Customer Development.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;From a bird’s eye view, these are the five stages:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Define your ecosystem&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Determine your value propositions for each of your stakeholders&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hypothesize a final MVP&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Identify your biggest risk&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Design your value path&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s see what this process is all about.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-define-your-ecosystem"&gt;
  &lt;/a&gt;
  1. Define your ecosystem
&lt;/h3&gt;

&lt;p&gt;Drawing a map of your ecosystem is just a diagram used to display all of your target users. You’ll likely have multiple categories of customers using your product.&lt;/p&gt;

&lt;p&gt;You should have a box for each stakeholder: users, customers, partners, and any other possible entities.&lt;/p&gt;

&lt;p&gt;The next step is to define the value—more specifically, what your users will receive when using your product. Draw lines for who pays whom.&lt;/p&gt;

&lt;p&gt;The last step here is to define how your product will be distributed. What marketing and sales channels will be used to get the product to its end users?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-determine-your-value-propositions-for-each-of-your-stakeholders"&gt;
  &lt;/a&gt;
  2. Determine your value propositions for each of your stakeholders
&lt;/h3&gt;

&lt;p&gt;During this stage, you need to think about what high-level benefits your stakeholders will gain from your product, and what they would be willing to trade in return. For example, your end-users could get to have more time with their family. Or your customers might obtain an increase in revenue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-hypothesize-a-final-mvp"&gt;
  &lt;/a&gt;
  3. Hypothesize a final MVP
&lt;/h3&gt;

&lt;p&gt;Vlaskovits said that final MVPs will test assumptions for your business models, while intermediate ones verify components with high-risk. To identify your final minimum viable product, visualize the basic functionalities of your product that you need to bring to each stakeholder to achieve the value you previously proposed.&lt;/p&gt;

&lt;p&gt;Additionally, you should think of what each type of user would have to pay for using your MVP and how you should measure the viability of your MVP.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-identify-your-biggest-risk"&gt;
  &lt;/a&gt;
  4. Identify your biggest risk
&lt;/h3&gt;

&lt;p&gt;To validate your assumptions, you need to outline the risks associated with your business models and order them from highest to lowest. This way you can determine potential blockers or where your product might fail. As a result, you minimize the possibility of failure and also the loss of resources before developing the full product.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-design-your-value-path"&gt;
  &lt;/a&gt;
  5. Design your value path
&lt;/h3&gt;

&lt;p&gt;During this final step, you need to visualize the customer discovery process. This journey should take you from the point you’re in today to your final MVP. Taking the ideas from your risk assessment from the previous step, imagine the core assumptions you need to test for each identified risk.&lt;/p&gt;

&lt;p&gt;You will notice that your value path will be made out of intermediate MVP that verify key hypotheses. If one assumption is validated, you move to the next one, and so forth, until you get to your final MVP.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hp4Ktifd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77s4pdrbiszus1sy1rdw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hp4Ktifd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77s4pdrbiszus1sy1rdw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-what-makes-a-good-mvp"&gt;
  &lt;/a&gt;
  4. What makes a good MVP?
&lt;/h2&gt;

&lt;p&gt;As a bottom line, a good MVP will be a product that works and is usable. When you want to cut corners, building the bare minimum functionalities will most likely make you fail.&lt;/p&gt;

&lt;p&gt;A good MVP fixes a problem you want to address, the simplicity of the product won’t turn users away. Your final MVP should be backed by market research and a target audience. The trick is to carefully select which features are key to solving your customers’ problems.&lt;/p&gt;

&lt;p&gt;Most of the time, it’s a good idea to opt for &lt;a href="https://digitalya.co/blog/inhouse-vs-outsourcing-pros-cons-for-product-development/"&gt;outsourcing with a software development company&lt;/a&gt; for creating your MVP. Such an agency will assist you in the full cycle of your product development, from creating a strategy to &lt;a href="https://www.digitalya.co/services/mvp-development/"&gt;developing an MVP&lt;/a&gt; together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-5-awesome-minimum-viable-product-examples"&gt;
  &lt;/a&gt;
  5. 5 awesome minimum viable product examples
&lt;/h2&gt;

&lt;p&gt;There are many types of MVP, generally put into two categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Low-Fidelity MVP used to:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Understand the problems of your customers better&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Validate your product ideas&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verify if the problem you identified is worth solving&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Explore what solution would be more efficient&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;High-Fidelity MVP, useful for:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Finding out how much customers are willing to pay for your product&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find early adopters of your product&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Define and optimize your marketing strategy&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Identify growth opportunities&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When deciding which type of MVP you need, here are a couple of questions you need to ask yourself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What is my biggest risk and how can I avoid it?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How much time do I have to develop my MVP?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What’s my budget?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make everything clearer, here are 5 awesome minimum viable product examples that were developed with the help of a dedicated team:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-clientzen"&gt;
  &lt;/a&gt;
  1. ClientZen
&lt;/h3&gt;

&lt;p&gt;This is a platform that will turn your customers into brand ambassadors with the help of real-time feedback. &lt;a href="https://digitalya.co/services/dedicated-scrum-development-team-romania/"&gt;ClientZen&lt;/a&gt; is the first customer-experience management platform designed especially for B2B digital agencies.&lt;/p&gt;

&lt;p&gt;It uses artificial intelligence to measure how happy your customers are, in real-time, based on sentiment analysis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nx2oFfd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwygo9d2q7asr016xkib.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nx2oFfd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwygo9d2q7asr016xkib.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This web application provides data-driven analysis which, in turn, generates accurate personality insights from your clients. This helps you take action to improve your NPS score and reduce the churn rate.&lt;/p&gt;

&lt;p&gt;The initial challenge was having happy clients. Most of the time, the means through which we assess feedback don’t provide sufficient results—or it’s not in real-time. ClientZen wanted to provide an AI and ML-based solution to generate new business opportunities.&lt;/p&gt;

&lt;p&gt;Here’s the solution &lt;a href="https://www.digitalya.co/services/web-application-development-services/"&gt;Digitalya&lt;/a&gt; has come up with:&lt;/p&gt;

&lt;p&gt;A web application that can be integrated with the most common means of communication, like Gmail and Slack, and provides accurate feedback—based on how your customers feel. As a user, you get personality insights generated from analyzing written communication and business advice. This all relies on the NPS level your client is on.&lt;/p&gt;

&lt;p&gt;The problem this MVP answered is the need to gather and examine customer feedback. And the features it provides are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Login&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dashboards for clients overview and different types of insights&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Communication platforms integration&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-feetup%C2%AE"&gt;
  &lt;/a&gt;
  2. FeetUp®
&lt;/h3&gt;

&lt;p&gt;This is a mobile application that wants to bring inverted yoga to everyone by providing customized video content for any type of body. &lt;a href="https://digitalya.co/case-study/feetup/"&gt;FeetUp®&lt;/a&gt; provides its users with a broad database of yoga, fitness, and relaxation classes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bo6YQyXK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2660fytthb90m75ok69.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bo6YQyXK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2660fytthb90m75ok69.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This MVP wanted to help its users practice yoga in the comfort of their home, without having to hire a personal yoga. It provides instructions and classes for any type of practitioner. Another great functionality is the ability to do live streams, as a teacher, and to engage with the community.&lt;/p&gt;

&lt;p&gt;The team delivered a mobile app that provides video and audio content to a large audience at the same time, while also tracking their behavior. There’s a customizable admin area, used to upload content and moderate activity. Here’s what functionalities this MVP came with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Login&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Content database—video and audio&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Behavior and progress tracking&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Integrated shop&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customer support&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get a better understanding of how a software development agency can help you launch an MVP and further develop your idea, take a look at the rest of our &lt;a href="https://digitalya.co/case-studies/"&gt;Case Studies&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-buffer"&gt;
  &lt;/a&gt;
  3. Buffer
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://buffer.com/"&gt;Buffer&lt;/a&gt; is an app that allows you to schedule your social media posts for multiple channels in one place. However, before the actual development processes, Joel Gascoigne, Buffer’s founder, tried testing the market.&lt;/p&gt;

&lt;p&gt;He started with a simple landing page that simply described what the app did. If people were interested in this product, there was a signup form, where they could leave their email and get notified when the app went online.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eN0hL1Sr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kragq0z3hqsouqgruq6l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eN0hL1Sr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kragq0z3hqsouqgruq6l.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;He promoted this landing page on social media and realized that there was a customer segment interested in his actual product.&lt;/p&gt;

&lt;p&gt;The next step was figuring out how much potential customers would be willing to pay for using it. For this, he updated his landing page with some basic prices and saw how many people were signing up for the paid versions of the app.&lt;/p&gt;

&lt;p&gt;After this process, Joel decided that it was time to develop the actual product—with a simple, minimalistic feature set. Shortly after that, Buffer gained more users and generated revenue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-dropbox"&gt;
  &lt;/a&gt;
  4. Dropbox
&lt;/h3&gt;

&lt;p&gt;Even though it’s hard to believe, &lt;a href="https://techcrunch.com/2011/10/19/dropbox-minimal-viable-product/"&gt;Dropbox&lt;/a&gt; is another example of a successful minimum viable product. This started as a video of a prototype of the solution Drew Houston came up with. He did this so that people could get a feel of how the app would work, before the actual development process.&lt;/p&gt;

&lt;p&gt;After posting the video, he more than tripled the number of potential customers. People liked what solution he was proposing, and they signed up for the actual product.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-zappos"&gt;
  &lt;/a&gt;
  5. Zappos
&lt;/h3&gt;

&lt;p&gt;This is a “Wizard of Oz” type of MVP example. The whole MVP concept is that the project looks completely functional from an outside perspective. However, everything on the inside is human-operated. Everything is manual. This type of minimum viable product is also called “Manual-first MVPs”, for obvious reasons.&lt;/p&gt;

&lt;p&gt;Zappos is a great example here. The founder, Nick Swinmurn, wanted to check if people would buy shoes without being able to try them on first. So he took a picture at a store and promoted it on social media. He found out that he actually had a customer market when people started making purchases. Nowadays, Zappos is a successful business and was recently bought by Amazon—one of the many success stories.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-conclusion"&gt;
  &lt;/a&gt;
  6. Conclusion
&lt;/h2&gt;

&lt;p&gt;An MVP is an efficient core piece of your experimentation strategy. You assume that your possible customers have a certain need, and you come up with a product to help them. Your dedicated team then delivers the final MVP that your users can use—this way you gain validated learnings and crucial feedback on your idea. Based on all this information, you can either continue your work, adapt it, or move on to your next innovative project.&lt;/p&gt;

&lt;p&gt;When choosing the type of MVP you want to work on, one of the most important factors that influence your decision will be your budget. You can &lt;a href="https://digitalya.co/blog/how-much-does-it-cost-to-make-an-app/"&gt;estimate how much your app will cost&lt;/a&gt;, based on what features you want to integrate into it.&lt;/p&gt;

</description>
      <category>mvp</category>
      <category>productivity</category>
      <category>development</category>
      <category>digitalproduct</category>
    </item>
    <item>
      <title>Why Should You Use A VPN?</title>
      <author>Maxim King</author>
      <pubDate>Thu, 19 Aug 2021 12:11:38 +0000</pubDate>
      <link>https://dev.to/maximking1/why-should-you-use-a-vpn-45e0</link>
      <guid>https://dev.to/maximking1/why-should-you-use-a-vpn-45e0</guid>
      <description>&lt;p&gt;A VPN is a Virtual Private Network, in many of my guides I will always recommend using a VPN Service for the ultimate online protection. But, what does it actually do? I’ve been asked this question many times so I’ll explain it here.&lt;/p&gt;

&lt;p&gt;A VPN will essentially masks your IP Address and location when browsing the web. When you visit a website in the headers (this is like what it requests) it will send a host IP which will either be your Home IP if your on your Home Network or Mobile Sim IP Address. Every network has its own IP Address, it’s the internet’s way of sending and receiving packets. It’s like your Home Address, so people can send and receive parcels they need the Address. When your VPN is active all it does is instead of talking directly to your Router it will forward the request via one of there servers (usually this is there nearest one, you can in there app) and you will look like your sending that packet form there server, this will make your IP completely hidden. But beware, if you don’t choose a “safe” VPN Service they will be able to see any of your traffic these are the ones I recommend below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VyperVPN - Paid&lt;/li&gt;
&lt;li&gt;ProtonVPN - Paid, Free Plan Very Limited&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many more out there just these 2 are great ones I recommend.. For anymore help you can contact me on my &lt;a href="https://discord.gg/FzsJMSRYDD"&gt;discord server&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>vpn</category>
      <category>security</category>
      <category>ip</category>
      <category>protection</category>
    </item>
    <item>
      <title>Webpack FUNdamentals</title>
      <author>Vinicius Cerqueira Bonifácio</author>
      <pubDate>Thu, 19 Aug 2021 12:10:52 +0000</pubDate>
      <link>https://dev.to/vinicius77/webpack-fundamentals-2po8</link>
      <guid>https://dev.to/vinicius77/webpack-fundamentals-2po8</guid>
      <description>&lt;p&gt;Hello super devs, 👋&lt;/p&gt;

&lt;p&gt;How is everybody doing there? Good? &lt;/p&gt;

&lt;p&gt;&lt;del&gt;Are you watching lot of sports on Olympic Games? Has your country conquered many medals?&lt;br&gt;
Remember to leave your chair sometimes and go outside to make some exercises also. There is no &lt;code&gt;git revert HEAD&lt;/code&gt; for life.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;As you can see above it took me a little bit to publish this article. 😅 Never mind about &lt;strong&gt;OG&lt;/strong&gt; anymore. 😉&lt;/p&gt;

&lt;p&gt;Today I am going to talk a little bit about &lt;strong&gt;Webpack&lt;/strong&gt; and we are going to try to recreate a very simple &lt;strong&gt;React&lt;/strong&gt; application, step by step.&lt;/p&gt;

&lt;p&gt;OK, but what the heck is &lt;strong&gt;Webpack&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WwmG6I0M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99p39eed7pblulmzed7k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwmG6I0M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99p39eed7pblulmzed7k.png" alt="What the heck"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#webpack"&gt;
  &lt;/a&gt;
  Webpack 🕸️ 📦
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Webpack&lt;/strong&gt; is an open-source JavaScript module bundler. I know, blah blah blah ...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ADoIBriU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/OBUnW8FIqb04/200.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ADoIBriU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/OBUnW8FIqb04/200.gif" alt="Blah Blah"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's break into pieces so it becomes easy (or not) to understand:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;module&lt;/strong&gt;: a component or part of a program that contains one or more routines.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;bundler:&lt;/strong&gt; A group of objects held together, wrapped in a package.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Until yesterday, browsers couldn't handle code divided into multiple modules. The &lt;strong&gt;Webpack&lt;/strong&gt;'s mission is to &lt;strong&gt;wrap all the source code into a single file&lt;/strong&gt; containing all the application code.&lt;/p&gt;

&lt;p&gt;Do you really need to know about it? Sincerely you do not. I particularly like to understand how things work under the hood. Believe me, it can surprise you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DlE2sWUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/c0/b3/72/c0b372b37ebf6f0c7949aefc8e39b68e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DlE2sWUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/c0/b3/72/c0b372b37ebf6f0c7949aefc8e39b68e.gif" alt="Under the hood"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are still here, it is time to get hands dirty! &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#project-barebones"&gt;
  &lt;/a&gt;
  Project Bare-bones 💀 🦴
&lt;/h3&gt;

&lt;p&gt;Let's start by creating a project structure similar to the image below: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BbwrDK4t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f78lv0gbi6o6v3dmvsff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BbwrDK4t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f78lv0gbi6o6v3dmvsff.png" alt="Folder Structure on VS Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;package.json&lt;/code&gt; file:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"webpack-fun"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"webpack fundamentals"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#installing-the-webpack-package"&gt;
  &lt;/a&gt;
  Installing the Webpack package
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; webpack webpack-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here we are installing the &lt;strong&gt;Webpack package&lt;/strong&gt; as a development dependency as well as its &lt;strong&gt;cli&lt;/strong&gt; (Command Line Interface).&lt;/p&gt;

&lt;p&gt;Once done that, we should define the initial &lt;strong&gt;Webpack settings&lt;/strong&gt; (&lt;code&gt;webpack.config.js&lt;/code&gt; file): &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#webpack-configuration-file"&gt;
  &lt;/a&gt;
  Webpack Configuration File
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Don't you worry I will explain it: 🙌 &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;path:&lt;/strong&gt; &lt;code&gt;NodeJS&lt;/code&gt; path module used for handling file paths.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;config:&lt;/strong&gt; Object that holds the &lt;strong&gt;Webpack configuration&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;entry:&lt;/strong&gt; Where &lt;strong&gt;Webpack&lt;/strong&gt; looks to start building the bundle. The context is an absolute string to the directory that contains the entry files. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;output:&lt;/strong&gt; contains set of options instructing &lt;strong&gt;Webpack&lt;/strong&gt; on &lt;strong&gt;how&lt;/strong&gt; and &lt;strong&gt;where&lt;/strong&gt; it should output your &lt;strong&gt;bundles&lt;/strong&gt;, &lt;strong&gt;assets&lt;/strong&gt; the &lt;strong&gt;bundle&lt;/strong&gt; or &lt;strong&gt;load&lt;/strong&gt; with &lt;strong&gt;Webpack&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;module.exports:&lt;/strong&gt; &lt;code&gt;NodeJS&lt;/code&gt; special object that represents the current module, and exports is an object that will be exposed as a module.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#defining-the-build-script-raw-packagejson-endraw-"&gt;
  &lt;/a&gt;
  Defining the build script (&lt;code&gt;package.json&lt;/code&gt;) 🏗️
&lt;/h3&gt;

&lt;p&gt;Now, we need to define the build script responsible for triggering the &lt;strong&gt;Webpack bundling&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack --mode=development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I guess we are ready to test the application. Let's add some dummy code in a brand new &lt;code&gt;src/index.js&lt;/code&gt; file, just to verify if it works:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;consoleLogTricks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Look at this:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Question:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Did you now about it, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Probably yes!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if we &lt;strong&gt;run the build script&lt;/strong&gt; created previously (&lt;code&gt;npm run build&lt;/code&gt;), a new &lt;strong&gt;bundled file&lt;/strong&gt; should be created at &lt;code&gt;/build/main.js&lt;/code&gt;. It is the bundled content of our &lt;code&gt;index.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Isn't it amazing? Well, nothing special I guess. 🥱 🥱 &lt;/p&gt;

&lt;p&gt;Let's try to mimic a &lt;strong&gt;React&lt;/strong&gt;-like application. Under the &lt;code&gt;src&lt;/code&gt; directory create a file called &lt;code&gt;App.jsx&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;💡 People often use the &lt;code&gt;.js&lt;/code&gt; extension which is fine. &lt;br&gt;
As my personal preference, when I am creating components I use the &lt;code&gt;.jsx&lt;/code&gt; one. Their icons also change on &lt;strong&gt;VSCode&lt;/strong&gt; and I know what that's about. 😉 ⚛️&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;src/App.jsx&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Remember to export :)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Import the App component in the &lt;code&gt;index.js&lt;/code&gt; file we created previously:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;welcome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Welcome &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We are almost there. At the moment your application is not doing too much. It is &lt;strong&gt;missing some packages&lt;/strong&gt; that will help us to transform it in a minimal &lt;strong&gt;React&lt;/strong&gt; application.&lt;/p&gt;

&lt;p&gt;Go ahead and install them: 💪&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; react react-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Done that, it is time to &lt;strong&gt;rewrite&lt;/strong&gt; your &lt;code&gt;index.js&lt;/code&gt; and &lt;code&gt;App.jsx&lt;/code&gt; files and use the packages we have just installed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;index.js&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;App.jsx&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;Webpack&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to create an &lt;code&gt;index.html&lt;/code&gt; file that will be the entry point of our application and load our bundled JavaScript code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Minimal React App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#loaders"&gt;
  &lt;/a&gt;
  Loaders 🔄
&lt;/h3&gt;

&lt;p&gt;We have an issue here. Do you remember that &lt;strong&gt;Webpack&lt;/strong&gt; is a &lt;strong&gt;JavaScript&lt;/strong&gt; bundler? Our components are using &lt;code&gt;JSX&lt;/code&gt; that is a syntax extension to JavaScript.&lt;/p&gt;

&lt;p&gt;🗒️ If it confuses you, please refer to &lt;a href="https://reactjs.org/docs/introducing-jsx.html"&gt;Introducing JSX&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;loaders&lt;/strong&gt; come to our rescue.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Installing the necessary &lt;strong&gt;Babel&lt;/strong&gt; packages:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @babel/core babel-loader @babel/preset-react &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Setting up a &lt;strong&gt;loader&lt;/strong&gt; in the &lt;code&gt;webpack.config.js&lt;/code&gt; file, under the &lt;code&gt;module&lt;/code&gt; property. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This &lt;strong&gt;loader&lt;/strong&gt; is responsible to transform &lt;strong&gt;JSX&lt;/strong&gt; code into regular &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;js$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;presets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/preset-react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should be able to bundle our application "properly" now. 🎉 🎊 🥳 &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-lthydration-timegt-endraw-"&gt;
  &lt;/a&gt;
  🥤 &lt;code&gt;&amp;lt;Hydration Time&amp;gt;&lt;/code&gt; 🥤
&lt;/h3&gt;

&lt;p&gt;I know, it is quite overwhelming all this "setup" process. Luckily, you won't be configuring &lt;strong&gt;Webpack&lt;/strong&gt; from scratch that often or maybe you never will. &lt;br&gt;
Understanding at least the basics of how it works may be useful to you someday. Who knows? &lt;strong&gt;¯_(ツ)_/¯&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Take your time to wrap up things in your head, eat a snack, drink a glass of Tang / Kool-aid and come back here when you feel ready.&lt;/p&gt;

&lt;p&gt;No pressure at all! See you in &lt;strong&gt;5&lt;/strong&gt; minutes. 😂&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-raw-lthydration-timegt-endraw-"&gt;
  &lt;/a&gt;
  🥤 &lt;code&gt;&amp;lt;/Hydration Time&amp;gt;&lt;/code&gt; 🥤
&lt;/h3&gt;

&lt;p&gt;There is just one important detail. If we try to make any &lt;code&gt;async&lt;/code&gt; operation (e.g. REST API operations), it may happen that some browsers &lt;strong&gt;won't understand&lt;/strong&gt; what is going on. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJVE7DQj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/wFOq9TrnBxgAAAAd/you-wouldnt-get-it-joker.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJVE7DQj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/wFOq9TrnBxgAAAAd/you-wouldnt-get-it-joker.gif" alt="Joker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Babel&lt;/strong&gt; has the &lt;code&gt;polyfill&lt;/code&gt; package for solving this issue, so let's go for it. 💪&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installing &lt;code&gt;polyfill&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; @babel/polyfill
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add it into the &lt;code&gt;entry&lt;/code&gt; property in our &lt;code&gt;webpack.config.js&lt;/code&gt; file.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;const config = {
&lt;/span&gt;&lt;span class="gi"&gt;+  entry: ['@babel/polyfill', './src/index.js'],
&lt;/span&gt;&lt;span class="gd"&gt;-  entry: "./src/index.js",
&lt;/span&gt;  output: {
    // ...
  }
  // ...
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#transpilers"&gt;
  &lt;/a&gt;
  Transpilers 🤔 ⁉️
&lt;/h3&gt;

&lt;p&gt;This word looks weird. Actually it sounds like a &lt;strong&gt;pile&lt;/strong&gt; of &lt;strong&gt;Transformers&lt;/strong&gt;. 🥁 😭&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H0L8JDjw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.picclickimg.com/d/l400/pict/263635869483_/TRANSFORMERS-GOBOTS-Misc-ROBOTS-PARTS-PILE-LOT.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H0L8JDjw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.picclickimg.com/d/l400/pict/263635869483_/TRANSFORMERS-GOBOTS-Misc-ROBOTS-PARTS-PILE-LOT.jpg" alt="Transformers pile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bad jokes aside, it is the term used to mean that a source code is &lt;strong&gt;transformed&lt;/strong&gt; from a language to another. (Maybe &lt;strong&gt;Transformed&lt;/strong&gt; + &lt;strong&gt;Compiled&lt;/strong&gt; ?)&lt;/p&gt;

&lt;p&gt;Anyway, the question is why do we need a &lt;strong&gt;transpiler&lt;/strong&gt;?&lt;br&gt;
It is known that most browsers don't really support the newest &lt;strong&gt;JavaScript&lt;/strong&gt; features such as &lt;strong&gt;ES6, ES7, ES11&lt;/strong&gt; and so on. &lt;br&gt;
The function of a &lt;strong&gt;transpiler&lt;/strong&gt; is (guess what? 🫂) to transpile those new features into standard &lt;strong&gt;ES5&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installing the preset:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @babel/preset-env &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Adding the &lt;code&gt;@babel/preset-env&lt;/code&gt; plugin in the &lt;code&gt;webpack.config.js&lt;/code&gt; file.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;js$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;babel-loader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="c1"&gt;// 👇 H e r e ! 👇 &lt;/span&gt;
    &lt;span class="nl"&gt;presets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@babel/preset-env&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@babel/preset-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally we are able to write &lt;strong&gt;JavaScript&lt;/strong&gt; code using all the latest features. 👨‍💻&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#adding-css"&gt;
  &lt;/a&gt;
  Adding CSS 💅
&lt;/h3&gt;

&lt;p&gt;A web application without &lt;strong&gt;CSS&lt;/strong&gt; is like a cheese burger without the hamburger. 🍔 🧀 &lt;br&gt;
I mean, it is totally possible but it is not the same thing. There is a flavor missing somewhere. 🤣&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdBygNI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/Z546MhC.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdBygNI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/Z546MhC.gif" alt="Cheese burger without a burger"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Let's create a &lt;strong&gt;CSS&lt;/strong&gt; file on &lt;code&gt;src/index.css&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;⚠️ &lt;strong&gt;The commercial usage of this file is prohibited by law&lt;/strong&gt; ⚠️&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;empty-cells&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;show&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;mediumaquamarine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blanchedalmond&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Import it on &lt;code&gt;index.js&lt;/code&gt; file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./index.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Apply it in the &lt;code&gt;App.jsx&lt;/code&gt; component:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;wrapper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;Webpack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🤺 &lt;strong&gt;Touché moment:&lt;/strong&gt; Yes, we need to &lt;strong&gt;install&lt;/strong&gt; more &lt;strong&gt;loaders&lt;/strong&gt; in order to make our &lt;strong&gt;CSS&lt;/strong&gt; styles work as well. How did you know that? 🤓&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;style-loader css-loader &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;In short:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;style-loader:&lt;/strong&gt; Generates and injects a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; element which contains all of the application styles.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;css-loader:&lt;/strong&gt; Transforms &lt;strong&gt;CSS&lt;/strong&gt; into a &lt;strong&gt;JavaScript&lt;/strong&gt; module and allows &lt;strong&gt;minification&lt;/strong&gt;. E.g.(&lt;strong&gt;Input:&lt;/strong&gt; CSS ➡ &lt;strong&gt;Output:&lt;/strong&gt; JavaScript)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please, don't forget to also add the &lt;strong&gt;loaders&lt;/strong&gt; in your &lt;code&gt;webpack.config.js&lt;/code&gt; file, otherwise all our effort and the &lt;em&gt;RSI&lt;/em&gt; (Repetitive Strain Injury) acquired by typing &lt;code&gt;npm install&lt;/code&gt; hundred times will be in vain: 😂 👌&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// ... previous config&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// ⬇️  👇  👇  ⬇️&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;      
      &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;css$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;loaders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;style-loader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;css-loader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
     &lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="c1"&gt;// ⬆️  ☝️  ☝️  ⬆️&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#webpack-development-server"&gt;
  &lt;/a&gt;
  Webpack Development Server 🖥️ ⬆️
&lt;/h3&gt;

&lt;p&gt;One thing that drive me nuts is having to manually refresh the page every time I make changes in the application. 🥴&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TDXr0k9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/JlZBGvRWIFMAAAAM/crazy-ppl-make-me-crazy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TDXr0k9E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/JlZBGvRWIFMAAAAM/crazy-ppl-make-me-crazy.gif" alt="Drive me nuts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't stress yourself, at this point of the article you have already &lt;strong&gt;mastered&lt;/strong&gt; using &lt;code&gt;npm&lt;/code&gt; to install packages. 🎓 😂&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install the server package:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; webpack-dev-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Define the &lt;strong&gt;start script&lt;/strong&gt; in your &lt;code&gt;package.json&lt;/code&gt; file.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack --mode=development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;//  👇  👇  👇  👇&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack-dev-server --mode=development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;  
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Add the &lt;code&gt;devServer&lt;/code&gt; property into &lt;code&gt;webpack.config.js&lt;/code&gt; file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;const config = {
&lt;/span&gt;  entry: './src/index.js',
  output: {
    // ...
  },
&lt;span class="gi"&gt;+  devServer: {    
+    contentBase: path.resolve(__dirname, 'build'),
+    compress: true,    
+    port: 3000  
+   },
&lt;/span&gt;  // ...
&lt;span class="err"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the &lt;code&gt;npm start&lt;/code&gt; script in your terminal should start the server at &lt;code&gt;http://localhost:3000&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#error-handling"&gt;
  &lt;/a&gt;
  Error Handling 🚫
&lt;/h3&gt;

&lt;p&gt;The way &lt;strong&gt;Webpack&lt;/strong&gt; shows error differs a little if compared to an application created using &lt;code&gt;create-react-app&lt;/code&gt;. &lt;br&gt;
Very often a error is shown but not its real location.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source maps&lt;/strong&gt; provide us with the source code that is actually causing the error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3wW0bUkV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/NWuJ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3wW0bUkV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/NWuJ.gif" alt="Bug tracking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time, as an rare exception, you won't need to install anything. 🎉 🥳 👯‍♀️&lt;/p&gt;

&lt;p&gt;Just add the &lt;code&gt;devtool&lt;/code&gt; property in our &lt;code&gt;webpack.config.js&lt;/code&gt; file and a source map will be generated (&lt;code&gt;build/main.js.map&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;const config = {
&lt;/span&gt;  entry: './src/index.js',
  output: {
    // ...
  },
  devServer: {
    // ...
  },
&lt;span class="gi"&gt;+  devtool: 'source-map', 👈
&lt;/span&gt;  // ..
&lt;span class="err"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#minifying-the-source-code-in-production"&gt;
  &lt;/a&gt;
  Minifying the source code in production
&lt;/h2&gt;

&lt;p&gt;Since we are using &lt;strong&gt;Webpack&lt;/strong&gt; in its latest version, no further configuration is need in order to &lt;strong&gt;minify&lt;/strong&gt; the source code.&lt;/p&gt;

&lt;p&gt;Ah, ok. I almost forget to explain what &lt;code&gt;minifiyng&lt;/code&gt; code means.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Minifying&lt;/strong&gt; means that your code that was previously &lt;strong&gt;classified as illegible by your workmates&lt;/strong&gt; becomes officially gibberish. 😂 🤣 😆 😭 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vjp4YBMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/FBtL.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vjp4YBMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/FBtL.gif" alt="Pair Programming"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Minifying&lt;/strong&gt; is the process that removes both comments, whitespaces, newline characters, replaces variable names with a single character and so on, in order to minimize code and reduce file size (&lt;strong&gt;TLDR;&lt;/strong&gt; to optimize performance).&lt;/p&gt;

&lt;p&gt;As result of minifying we would have something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;:{}};&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=!&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="na"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;})},&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toStringTag&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toStringTag&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Module&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;__esModule&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;})},&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__esModule&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to add a &lt;code&gt;npm&lt;/code&gt; script (&lt;code&gt;package.json&lt;/code&gt;) to do so. &lt;br&gt;
⚠️ &lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;--mode=production&lt;/code&gt;. ⚠️&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="err"&gt;"scripts":&lt;/span&gt; {
&lt;span class="gi"&gt;+  "build": "webpack --mode=production",
&lt;/span&gt;  // ...
&lt;span class="err"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion-frenzies-and-farewell"&gt;
  &lt;/a&gt;
  Conclusion, Frenzies and Farewell 💭💡👋
&lt;/h3&gt;

&lt;p&gt;Indeed, there a lot more concepts to cover regarding &lt;strong&gt;Webpack&lt;/strong&gt; but hopefully this introduction is enough for you to go and start exploring it by your own. 🗺️ 📍&lt;/p&gt;

&lt;p&gt;Albert Einstein once said: 🧠&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you can't explain it to a six year old, you don't understand it yourself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After finish reading this whole article to my 2 years old sibling, he starts to uncontrollably crying. &lt;br&gt;
I guess it is &lt;strong&gt;happy crying&lt;/strong&gt; because it looks like he got it even being younger than the expected! 👶&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oyq0OP3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/ZYa6ah7Iof8AAAAC/crying-cry.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oyq0OP3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/ZYa6ah7Iof8AAAAC/crying-cry.gif" alt="Happy Crying"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sorry, I must go now. He is becoming really loud. 🏃‍♂️💨&lt;br&gt;
Maybe I should read him my other article about &lt;strong&gt;Regex&lt;/strong&gt;. 😬 🤭&lt;/p&gt;

&lt;p&gt;Congratulations for reaching the end 🎉 and I wish you all a great weekend. 🙏&lt;/p&gt;

&lt;p&gt;See ya!&lt;/p&gt;

</description>
      <category>webpack</category>
      <category>javascript</category>
      <category>react</category>
      <category>npm</category>
    </item>
  </channel>
</rss>
