<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Spans - a key concept of distributed tracing 📊</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Wed, 22 Dec 2021 13:26:38 +0000</pubDate>
      <link>https://dev.to/signoz/spans-a-key-concept-of-distributed-tracing-4idg</link>
      <guid>https://dev.to/signoz/spans-a-key-concept-of-distributed-tracing-4idg</guid>
      <description>&lt;p&gt;Spans are fundamental building blocks of distributed tracing. A single trace in distributed tracing consists of a series of tagged time intervals known as spans. Spans represent a logical unit of work in completing a user request or transaction.&lt;/p&gt;

&lt;p&gt;Distributed tracing is critical to application performance monitoring in microservice-based architecture. Before we deep dive into spans, let's have a brief overview of distributed tracing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-distributed-tracing"&gt;
  &lt;/a&gt;
  What is distributed tracing?
&lt;/h2&gt;

&lt;p&gt;In a microservices architecture, a user request travels through hundreds, even thousands of services before serving the user what they need. Engineering teams often responsible for maintaining single services have no visibility over how the system performs as a whole.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CWiA_oW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/12/fictional_ecommerce_microservices_architecture.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CWiA_oW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/12/fictional_ecommerce_microservices_architecture.webp" alt="Microservices architecture" width="880" height="510"&gt;&lt;/a&gt;Microservice architecture of a fictional e-commerce application&lt;/p&gt;

&lt;p&gt;Distributed tracing gives insights into how a particular service is performing as part of the whole in a distributed software system. It involves passing a trace context with each user request which is then passed across hosts, services, and protocols to track the user request.&lt;/p&gt;

&lt;p&gt;These requests are broken down into spans, and the entire request is represented by a trace.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What are spans in distributed tracing?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
In distributed tracing, a user request or a transaction is represented by a trace. Traces are broken down into multiple spans. Spans represent a single logical operation within a trace. For example, a function call during a user request can be represented by a span.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#spans-in-distributed-tracing"&gt;
  &lt;/a&gt;
  Spans in distributed tracing
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-are-spans"&gt;
  &lt;/a&gt;
  What are spans?
&lt;/h3&gt;

&lt;p&gt;Each unit of work in a trace is represented by a span. A trace represents a complete process for a request - from its initiation to its completion. The picture below shows one trace which is composed of multiple spans.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S-bEucsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/12/spans_flamegraphs1.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S-bEucsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/12/spans_flamegraphs1.webp" alt="A complete trace consisting of multiple spans" width="880" height="272"&gt;&lt;/a&gt;A complete trace consisting of multiple spans shown on SigNoz dashboard&lt;/p&gt;

&lt;p&gt;The first span is known as the parent span and the subsequent spans are child spans. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parent Span:&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Also known as root spans, a parent span encapsulates the end-to-end latency of an entire request. To explain it more clearly, let us define adding a product to a cart on an e-commerce website as a user request. The parent span will measure the time it took from the event of an end-user clicking a button to the product being added to the cart. The parent span can also end if some error occurs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Child Spans:&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
A child span is triggered by a parent span and can be a function call, DB calls, calls to another service, etc. In the example mentioned above, a child span can be a function checking whether the item is available or not. Child spans provide visibility into each component of a request.&lt;/p&gt;

&lt;p&gt;Combining all the spans in a trace can give you a detailed idea about how the request performed across its entire lifecycle.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-are-spans-composed-of"&gt;
  &lt;/a&gt;
  What are spans composed of?
&lt;/h3&gt;

&lt;p&gt;A span contains a span context that uniquely identifies the request the span is part of. Spans can provide request, error, and duration metrics that can be used to debug availability and performance issues.&lt;/p&gt;

&lt;p&gt;You can also add span attributes to provide more context to your operations. Span attributes are key-value pairs that can be used to provide additional context on a span about the specific operation it tracks.&lt;/p&gt;

&lt;p&gt;Let us see details of a selected span in an APM tool like &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EnXAW413--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/12/span_attributes1.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EnXAW413--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/12/span_attributes1.webp" alt="Span attributes" width="880" height="556"&gt;&lt;/a&gt;Span attributes: Details associated with a span captured by SigNoz&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example-of-a-basic-span"&gt;
  &lt;/a&gt;
  Example of a basic span
&lt;/h3&gt;

&lt;p&gt;Let’s see an example of creating a basic span using the OpenTelemetry instrumentation library. &lt;a href="https://opentelemetry.io/" rel="noopener noreferrer nofollow"&gt;OpenTelemetry&lt;/a&gt; is a set of API, SDKs, libraries, and integrations that is aiming to standardize the generation, collection, and management of telemetry data(logs, metrics, and traces).&lt;/p&gt;

&lt;p&gt;Example of creating a basic span in java (Source: OpenTelemetry docs)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Span&lt;/span&gt; &lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tracer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spanBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my span&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;startSpan&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// put the span into the current Context&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Scope&lt;/span&gt; &lt;span class="nx"&gt;scope&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeCurrent&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// your use case&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Throwable&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Change it to your error message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// closing the scope does not end the span, this has to be done manually&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Example of adding span attributes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Span&lt;/span&gt; &lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tracer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spanBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/resource/path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;setSpanKind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SpanKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CLIENT&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;startSpan&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http.method&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http.url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Read more about OpenTelemetry:&lt;br&gt;&lt;br&gt;
&lt;a href="https://signoz.io/blog/opentelemetry-collector-complete-guide/"&gt;OpenTelemetry Collector: architecture and configuration guide&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

</description>
      <category>monitoring</category>
      <category>performance</category>
      <category>microservices</category>
      <category>distributedsystems</category>
    </item>
    <item>
      <title>AatroX Vue Lite - Open-Source VueJS 3 &amp; TailwindCSS Admin Dashboard Template is Out Now! </title>
      <author>UI Lib</author>
      <pubDate>Wed, 22 Dec 2021 13:14:56 +0000</pubDate>
      <link>https://dev.to/uilibofficial/aatrox-vue-lite-open-source-vuejs-3-tailwindcss-admin-dashboard-template-is-out-now-5h30</link>
      <guid>https://dev.to/uilibofficial/aatrox-vue-lite-open-source-vuejs-3-tailwindcss-admin-dashboard-template-is-out-now-5h30</guid>
      <description>&lt;p&gt;&lt;a href="https://ui-lib.com/downloads/aatrox-vue-dashboard/"&gt;AatroX Vue Lite - Open-Source VueJS 3 &amp;amp; TailwindCSS Admin Dashboard Template&lt;/a&gt; - is a useful, developer-friendly, and highly customizable dashboard template. It has everything you could want in an admin dashboard. We adhered to the highest industry standards to provide you with the best Vue Admin template.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ui-lib.com/downloads/aatrox-vue-lite/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JFZrk14F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ui-lib.com/blog/wp-content/uploads/2021/12/atrox-vue-lite-vuejs-3-tailwindcss-1024x567.png" alt="" width="880" height="487"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Atrox is extremely fast and simple to use, as well as highly scalable. So, with a little effort, you will be able to create any application you desire.&lt;/p&gt;

&lt;p&gt;Furthermore, the template design is eye-catching and fully responsive. As a result, no matter what device they use, anyone who visits your application will have a fantastic experience. It will run smoothly on all devices, including desktops, tablets, and smartphones.&lt;/p&gt;

&lt;p&gt;With the help of this template, you can create web apps like, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ecommerce Backends&lt;/li&gt;
&lt;li&gt;Analytics Apps&lt;/li&gt;
&lt;li&gt;SaaS Platforms&lt;/li&gt;
&lt;li&gt;Project Management Apps&lt;/li&gt;
&lt;li&gt;Education Apps&lt;/li&gt;
&lt;li&gt;Fitness Apps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and a lot more.&lt;/p&gt;

&lt;p&gt;Atrox also includes useful features that will help you create high-quality apps exactly as you envision them. Furthermore, we've loaded the Atrox admin template with useful features like Vitejs, Nuxt-inspired routing, accessible front-end routing, and so on.&lt;/p&gt;

&lt;h3 id="h-key-features"&gt;Key Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Vue 3 &amp;amp; Vite&lt;/li&gt;
&lt;li&gt;Beautifully Crafted&lt;/li&gt;
&lt;li&gt;tailwindCSS&lt;/li&gt;
&lt;li&gt;Nuxt-inspired Routing&lt;/li&gt;
&lt;li&gt;Well Organized&lt;/li&gt;
&lt;li&gt;Production Ready&lt;/li&gt;
&lt;li&gt;Accessible frontend routing&lt;/li&gt;
&lt;li&gt;Ready to Deploy&lt;/li&gt;
&lt;li&gt;Clean Code&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation ⚒️
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;We recommend you use yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1 - Install all packages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn

# npm install [for npm]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2 - Run development server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn dev

# npm run dev [for npm]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3 - Generate build files for deployment&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn build

# npm run build [for npm]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#whats-included"&gt;
  &lt;/a&gt;
  What’s Included 📦
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aatrox-vue-free.netlify.app/dashboards/dashboard-version-one"&gt;Dashboard Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aatrox-vue-free.netlify.app/components/button"&gt;Buttons Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aatrox-vue-free.netlify.app/profile/profileTwo"&gt;Profile Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aatrox-vue-free.netlify.app/signIn"&gt;Sign in Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aatrox-vue-free.netlify.app/signUp"&gt;Sign Up Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#browser-support"&gt;
  &lt;/a&gt;
  Browser Support 🖥️
&lt;/h2&gt;

&lt;p&gt;AatroX Vue Lite - open-source VueJS 3 &amp;amp; TailwindCSS admin dashboard template is built to work best in the latest desktop and mobile and tablet browsers. It supports all the major browsers including.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chrome (latest)&lt;/li&gt;
&lt;li&gt;FireFox (latest)&lt;/li&gt;
&lt;li&gt;Safari (latest)&lt;/li&gt;
&lt;li&gt;Opera (latest)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aatorx-vue-doc.vercel.app/"&gt;Documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#looking-for-a-premium-version"&gt;
  &lt;/a&gt;
  Looking For a Premium Version? 🧐
&lt;/h2&gt;

&lt;p&gt;If you want to save even more time and design effort, we have a pro version of this product that includes even more pages and components.&lt;/p&gt;

&lt;p&gt;You can upgrade to the &lt;a href="https://ui-lib.com/downloads/aatrox-vue-dashboard"&gt;Aatrox Vue – Vuejs 3 &amp;amp; TailwindCss Admin Dashboard's&lt;/a&gt; version. It comes with many dashboard versions, apps, tons of components, charts, and a lot more. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Free Version &lt;/td&gt;
&lt;td&gt;&lt;a href="https://ui-lib.com/downloads/aatrox-vue-dashboard"&gt;Aatrox Dashboard PRO&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;strong&gt;5&lt;/strong&gt; Demo Pages&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;50+&lt;/strong&gt; demo pages&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;✔ Dark &amp;amp; Light Mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; ✔ 1 Dashboard&lt;/td&gt;
&lt;td&gt;✔ 5 Dashboard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; ❌ &lt;/td&gt;
&lt;td&gt;✔ 11 App Pages&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; ❌ &lt;/td&gt;
&lt;td&gt;✔ 6 UiKits Pages&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; ❌ &lt;/td&gt;
&lt;td&gt;✔ Advanced Widgets&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;  ✔ 1 Profile Version&lt;/td&gt;
&lt;td&gt;✔ 2 Profile Versions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;  ✔  2 Authentication Page&lt;/td&gt;
&lt;td&gt;✔ 10 Authentication Pages&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; ❌ &lt;/td&gt;
&lt;td&gt;✔ 10 Types of Charts Demo Pages&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;For more info click the image below 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ui-lib.com/downloads/aatrox-vue-dashboard"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3f1hnfN6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ui-lib.com/blog/wp-content/uploads/2021/12/Aatrox-1024x741.png" alt="" width="880" height="637"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-us"&gt;
  &lt;/a&gt;
  About Us
&lt;/h2&gt;

&lt;p&gt;We are &lt;a href="https://ui-lib.com/"&gt;Ui-Lib&lt;/a&gt;, a team of awesome developers and designers attempting to make the lives of other developers easier. 😊&lt;/p&gt;

</description>
      <category>vue</category>
      <category>tailwindcss</category>
      <category>opensource</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Welcome Thread - v156</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 22 Dec 2021 13:05:56 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v156-436f</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v156-436f</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/12Ay4ElBWg6mdO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/12Ay4ElBWg6mdO/giphy.gif" alt="Ringo saying hello" width="160" height="160"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Listen to the S7E7 of DevDiscuss: "We Have Tools To Help You With Your Imposter Syndrome"</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 22 Dec 2021 12:46:15 +0000</pubDate>
      <link>https://dev.to/devteam/listen-to-the-s7e7-of-devdiscuss-we-have-tools-to-help-you-with-your-imposter-syndrome-32j0</link>
      <guid>https://dev.to/devteam/listen-to-the-s7e7-of-devdiscuss-we-have-tools-to-help-you-with-your-imposter-syndrome-32j0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#on-this-weeks-episode-of-devdiscuss-we-talk-about-some-tools-that-will-help-you-get-through-your-imposter-syndrome"&gt;
  &lt;/a&gt;
  On this week's episode of DevDiscuss, we talk about some tools that will help you get through your imposter syndrome.
&lt;/h2&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s7-e7-we-have-tools-to-help-you-with-your-imposter-syndrome"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S7:E7 - We Have Tools To Help You With Your Imposter Syndrome&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s7-e7-we-have-tools-to-help-you-with-your-imposter-syndrome" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s7-e7-we-have-tools-to-help-you-with-your-imposter-syndrome" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s7-e7-we-have-tools-to-help-you-with-your-imposter-syndrome" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s7-e7-we-have-tools-to-help-you-with-your-imposter-syndrome" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s7-e7-we-have-tools-to-help-you-with-your-imposter-syndrome"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s7-e7-we-have-tools-to-help-you-with-your-imposter-syndrome"&gt;
      &lt;img id="episode-profile-image" alt="S7:E7 - We Have Tools To Help You With Your Imposter Syndrome" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Quick refresher — DevDiscuss is the first original podcast from DEV all about the burning topics that impact all our lives as developers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Episode Info&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;In S7E7, we talk about imposter syndrome and how to conquer it with some members of the Forem team and a mental health expert. Let's explore this challenging psychological pattern (that affects so many of us) together!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosts"&gt;
  &lt;/a&gt;
  Hosts:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a class="mentioned-user" href="https://dev.to/ben"&gt;@ben&lt;/a&gt;&lt;/strong&gt; — Creator of DEV &amp;amp; Co-Founder of Forem&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a class="mentioned-user" href="https://dev.to/aritdeveloper"&gt;@aritdeveloper&lt;/a&gt;&lt;/strong&gt; — Software Engineer @ Forem&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#guests"&gt;
  &lt;/a&gt;
  Guests:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Michael Boroff&lt;/strong&gt; — Mental Health Program Manager @ Crossover Health&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a class="mentioned-user" href="https://dev.to/nickytonline"&gt;@nickytonline&lt;/a&gt;&lt;/strong&gt; — Lead Software Engineer @ Forem &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us know your thoughts on this show in the comments below — or on Twitter (&lt;a href="https://twitter.com/thepracticaldev"&gt;@thepracticaldev&lt;/a&gt; ).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0zcTd9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/qZelsWAXfWpAA/giphy.gif%3Fcid%3Decf05e47ddu6jql6tkj8kvdmj4z5ofal65l38f235ruuinlo%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0zcTd9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/qZelsWAXfWpAA/giphy.gif%3Fcid%3Decf05e47ddu6jql6tkj8kvdmj4z5ofal65l38f235ruuinlo%26rid%3Dgiphy.gif%26ct%3Dg" alt="Speakers" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devdiscuss"&gt;follow DevDiscuss&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; — or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  Quick Listening Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s7-e7-we-have-tools-to-help-you-with-your-imposter-syndrome/id1513053883?i=1000545752211"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/1Cek03jUpA8jVBzvgFGeT8"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZkaXNjdXNzLzU2?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjouYTys_f0AhUAAAAAHQAAAAAQCg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devdiscuss-dev-xtQvoDylAUg/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevDiscuss-p1324596/?topicId=168597101"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devdiscuss_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.dev/podcasts/devdiscuss/episodes/239"&gt;DEV Pods Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt; for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Our season seven sponsors: &lt;a href="https://www.microsoft.com/en-us/dev-community/Event/Register?eventId=DevDiscussPodcast_o7nllI4cp4Vg&amp;amp;ocid=aid3038582"&gt;Microsoft&lt;/a&gt;, &lt;a href="https://developer.newrelic.com/"&gt;New Relic&lt;/a&gt;, &amp;amp; &lt;a href="https://dev.toource=devdiscuss&amp;amp;utm_medium=syndication&amp;amp;utm_campaign=october21"&gt;Vultr&lt;/a&gt;!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Building an AWS S3 file explorer app within 30 minutes using ToolJet</title>
      <author>Shubhendra Singh Chauhan</author>
      <pubDate>Wed, 22 Dec 2021 12:36:50 +0000</pubDate>
      <link>https://dev.to/tooljet/building-an-aws-s3-file-explorer-app-within-30-minutes-using-tooljet-22hp</link>
      <guid>https://dev.to/tooljet/building-an-aws-s3-file-explorer-app-within-30-minutes-using-tooljet-22hp</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In this article, you'll learn how to build an explorer app that lets you view existing files and upload new files to your AWS S3 bucket.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ir0BfbH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/miug7wxs8za3fpls7fpy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir0BfbH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/miug7wxs8za3fpls7fpy.png" alt="Explorer App UI" width="880" height="594"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;We will divide this tutorial into two parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the first part, we will build the UI of the Explorer app in ToolJet.&lt;/li&gt;
&lt;li&gt;In the second part, we will connect the AWS S3 data source to our app and will create and connect queries to UI components.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 ToolJet has a feature to import apps from the dashboard. I have exported the source code of the Explorer app into the JSON file and you can use this file to import the app into your ToolJet account.&lt;br&gt;
Check out the  &lt;a href="https://gist.github.com/withshubh/5a5e937e186fee2af48240d4a27ea8e2"&gt;source code here&lt;/a&gt; .&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;AWS account with S3 service activated and having at least one bucket with some objects(any type of file).

&lt;ul&gt;
&lt;li&gt;At least one IAM user with &lt;strong&gt;Access key - Programmatic access&lt;/strong&gt; enabled. Learn to create one &lt;a href="https://docs.aws.amazon.com/powershell/latest/userguide/pstools-appendix-sign-up.html"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;ToolJet (&lt;a href="https://github.com/ToolJet/ToolJet"&gt;&lt;/a&gt;&lt;a href="https://github.com/ToolJet/ToolJet"&gt;https://github.com/ToolJet/ToolJet&lt;/a&gt;): It is a free and open-source, low-code platform that allows you to quickly build tools.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#building-the-explorer-ui"&gt;
  &lt;/a&gt;
  Building the Explorer UI
&lt;/h2&gt;

&lt;p&gt;Let's start with building the UI for Explorer. Login to the ToolJet and then on the dashboard, click on the &lt;strong&gt;Create new application&lt;/strong&gt; button to create a new app. Once the app has been created, you will be redirected to the visual app editor. You can change the name of the app by editing the default name i.e Untitled app from the top left of the app builder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uwy8Uuse--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvo0iphcag2bid5ktxh0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uwy8Uuse--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvo0iphcag2bid5ktxh0.gif" alt="Login tooljet" width="880" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Visual app editor has 4 divisions:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At the center is the &lt;strong&gt;App builder&lt;/strong&gt;, where you'll build the UI of the app.&lt;/li&gt;
&lt;li&gt;At the bottom is the &lt;strong&gt;&lt;a href="https://docs.tooljet.com/docs/tutorial/building-queries"&gt;Query editor&lt;/a&gt;&lt;/strong&gt;, where you'll be creating queries.&lt;/li&gt;
&lt;li&gt;On the right sidebar, you'll find &lt;strong&gt;&lt;a href="https://docs.tooljet.com/docs/tutorial/adding-widget/"&gt;Widget Manager&lt;/a&gt;&lt;/strong&gt; that has a list of built-in widgets and components. You can drag and drop to start laying out your user interface.&lt;/li&gt;
&lt;li&gt;On the left sidebar, you'll see the &lt;strong&gt;&lt;a href="https://docs.tooljet.com/docs/tutorial/adding-a-datasource"&gt;Datasource manager&lt;/a&gt;&lt;/strong&gt;. From here, you can add a new datasource or edit an existing datasource.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#lets-build-the-ui"&gt;
  &lt;/a&gt;
  Let's build the UI
&lt;/h3&gt;

&lt;p&gt;To build the UI, you’ll need to drag and drop the following components from the Widget Manager(at the left sidebar) and place them accordingly.&lt;/p&gt;

&lt;p&gt;Here is my version configuration of components for building the UI:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;Container&lt;/strong&gt; as header and &lt;strong&gt;Text&lt;/strong&gt; widget, to give a title to the app i.e AWS S3 File Explorer&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;Dropdown widget,&lt;/strong&gt; that we will be connected to a query to list the buckets&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;Button,&lt;/strong&gt; that will have an on-click action set to list all the files from the selected bucket in the dropdown.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;Table&lt;/strong&gt;, that will list all the contents of the selected bucket in the dropdown.&lt;/li&gt;
&lt;li&gt;Another &lt;strong&gt;Container,&lt;/strong&gt; that will have nested components like a &lt;strong&gt;Text box,&lt;/strong&gt; &lt;strong&gt;File Picker,&lt;/strong&gt; and a &lt;strong&gt;Button&lt;/strong&gt;. This will be used to upload the file to the selected bucket.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 See the &lt;a href="https://docs.tooljet.com/docs/widgets/text"&gt;documentation&lt;/a&gt; to learn more about customizing the widgets and making the UI more beautiful. ✨&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6JCcDVyF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fm2x6mkbgtqyouzb2dh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6JCcDVyF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fm2x6mkbgtqyouzb2dh.png" alt="App UI" width="880" height="594"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#connecting-to-aws-s3"&gt;
  &lt;/a&gt;
  Connecting to AWS S3
&lt;/h2&gt;

&lt;p&gt;Now that we have built the UI of our app, let's connect the datasource to our app. Go to the Datasource manager on the left sidebar and click on &lt;strong&gt;Add datasource.&lt;/strong&gt; ToolJet offers integrations for several datasources such as Airtable, Elasticsearch, Cloud Firestore, REST API, GraphQL, etc. We will select &lt;strong&gt;AWS S3&lt;/strong&gt; from the datasource dialog window.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GGp-gXKi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/macwoa4r4c8w6kjo3wra.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GGp-gXKi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/macwoa4r4c8w6kjo3wra.gif" alt="adding datasource" width="880" height="430"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The AWS S3 datasource requires the following information to establish a connection:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Access Key ID&lt;/li&gt;
&lt;li&gt;Secret Key&lt;/li&gt;
&lt;li&gt;Region: &lt;a href="https://docs.aws.amazon.com/general/latest/gr/rande.html"&gt;AWS service region&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Learn how to fetch the Access Key and Secret Key from the following guide: &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"&gt;Generate AWS access key &amp;amp; secret&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have entered the required information, click on &lt;strong&gt;Test Connection&lt;/strong&gt; to check if the connection is established or failed. Then &lt;strong&gt;Save&lt;/strong&gt; the datasource.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ybV7b6lq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4d2zze4iq9vl5ouwg48m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ybV7b6lq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4d2zze4iq9vl5ouwg48m.png" alt="Connecting S3" width="705" height="492"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-queries"&gt;
  &lt;/a&gt;
  Creating Queries
&lt;/h3&gt;

&lt;p&gt;Now that we have successfully connected the AWS datasource let's move on to create queries. Queries will perform actions such as reading the files and buckets from S3 and uploading files to a bucket.&lt;/p&gt;

&lt;p&gt;For the Explorer app, we will need three queries:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. A query to fetch the list of all buckets.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;2. A query to fetch all the objects in the bucket selected by the user.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;3. A query to upload the file from the local machine to the bucket selected by the user.&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;1. Let’s build the first query to fetch the list of buckets:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to the &lt;strong&gt;Query Editor&lt;/strong&gt; and click on the &lt;code&gt;+&lt;/code&gt; button to add a new query.&lt;/li&gt;
&lt;li&gt;Select the datasource as &lt;strong&gt;AWS S3&lt;/strong&gt; from the dropdown.&lt;/li&gt;
&lt;li&gt;From the &lt;strong&gt;Operation&lt;/strong&gt; dropdown, select &lt;strong&gt;List buckets.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Rename this query as &lt;code&gt;getBuckets&lt;/code&gt; from the center of the query editor&lt;/li&gt;
&lt;li&gt;Go to the &lt;strong&gt;Advanced&lt;/strong&gt; tab of the Query Editor, and toggle the &lt;code&gt;Run this query on page load?&lt;/code&gt; this will allow this query to run when the app is published.&lt;/li&gt;
&lt;li&gt;Now click on the &lt;strong&gt;Save&lt;/strong&gt; button to save our first query.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Click on the &lt;strong&gt;Preview&lt;/strong&gt; button on the top right of the Query Editor to verify the results of the query. You’ll get the results in the Preview section of Query Editor.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nEpVOou---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/969u6wb2th8eob6kao4b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nEpVOou---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/969u6wb2th8eob6kao4b.png" alt="Query list buckets" width="880" height="431"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connecting our first query to the dropdown widget&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click on the Dropdown widget open the &lt;strong&gt;Inspect Panel&lt;/strong&gt; on the right sidebar.&lt;/li&gt;
&lt;li&gt;We will now link the query to update the &lt;strong&gt;Option values&lt;/strong&gt; and &lt;strong&gt;Option labels&lt;/strong&gt;. We will enter &lt;code&gt;{{queries.getBuckets.data.Buckets.map(bucket =&amp;gt; bucket['Name'])}}&lt;/code&gt; , here we are fetching the &lt;code&gt;data&lt;/code&gt; from the &lt;code&gt;getBuckets&lt;/code&gt; query (i.e our first query) and we are using the &lt;code&gt;map&lt;/code&gt; function to create an array of &lt;code&gt;Name&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run the query from the sidebar in Query Editor and you’ll see that the dropdown now includes the list of buckets from your S3.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 ToolJet will auto-suggest your queries and let you simply select the one you want.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yze8f9L4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7uu0b1gcl7fsbdor6b0i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yze8f9L4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7uu0b1gcl7fsbdor6b0i.png" alt="Connect query one" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;2. Let’s build the second query to fetch the list of objects in the selected bucket:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new query from the query editor.&lt;/li&gt;
&lt;li&gt;From the &lt;strong&gt;Operations&lt;/strong&gt; dropdown, select &lt;code&gt;List objects in a bucket&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the bucket field, enter &lt;code&gt;{{components.dropdown1.value}}&lt;/code&gt; - here we are getting the &lt;code&gt;value&lt;/code&gt; (i.e. the selected bucket) from the &lt;code&gt;dropdown1&lt;/code&gt; (i.e. the dropdown widget)&lt;/li&gt;
&lt;li&gt;Now click on the &lt;strong&gt;Save&lt;/strong&gt; button to save our second query.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4PA1IP7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9iciwaog0ioyblq09t1x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4PA1IP7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9iciwaog0ioyblq09t1x.png" alt="Building second query" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connecting our second query to the Table:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click on the &lt;strong&gt;Table&lt;/strong&gt; to open the inspect panel on the right sidebar.&lt;/li&gt;
&lt;li&gt;We will want the table to reference the data fetched from the query, so in the &lt;strong&gt;Table data&lt;/strong&gt; property, we will enter &lt;code&gt;{{queries.s32.data['Contents']}}&lt;/code&gt; - here &lt;code&gt;q32&lt;/code&gt; is the query that we created, and the content objects fetched are stored in &lt;code&gt;data&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now add appropriate columns to our table and add properties to them:

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Key&lt;/strong&gt;: A key is a unique identifier for an object within a bucket. Every object in a bucket has exactly one key. In the &lt;code&gt;Name&lt;/code&gt; field of this column enter Key and in the &lt;code&gt;Key&lt;/code&gt; field enter Key.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Last modified:&lt;/strong&gt; Every object in a bucket has a few default metadata including the date and time an object was last modified, size of object, etc. We will create a column for this and will &lt;strong&gt;Name&lt;/strong&gt; it &lt;code&gt;Last Modified&lt;/code&gt; and will enter &lt;strong&gt;Key&lt;/strong&gt; as &lt;code&gt;LastModified&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Size&lt;/strong&gt;: In the &lt;strong&gt;Name&lt;/strong&gt; field enter &lt;code&gt;Size&lt;/code&gt; and in the &lt;strong&gt;Key&lt;/strong&gt; field enter &lt;code&gt;Size&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gMfCrSk2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2h6ab12usur8z3l37z1l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gMfCrSk2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2h6ab12usur8z3l37z1l.png" alt="connecting second query" width="880" height="443"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Now let's build the last query to upload file to the selected bucket:&lt;/strong&gt;&lt;br&gt;
    1. Add a new query from the query editor and name it &lt;code&gt;uploadToS3&lt;/code&gt;&lt;br&gt;
    2. From the &lt;strong&gt;Operations&lt;/strong&gt; dropdown, select &lt;code&gt;Upload object&lt;/code&gt;.&lt;br&gt;
    3. In the &lt;strong&gt;Bucket&lt;/strong&gt; field enter &lt;code&gt;{{components.dropdown1.value}}&lt;/code&gt; to get the &lt;code&gt;value&lt;/code&gt; (i.e. the selected bucket) from the &lt;code&gt;dropdown1&lt;/code&gt; (i.e. the dropdown widget).&lt;br&gt;
    4. In the &lt;strong&gt;Key&lt;/strong&gt; field enter &lt;code&gt;{{ components.textinput1.value + '/'+ components.filepicker1.file[0].name}}&lt;/code&gt; to get the &lt;code&gt;value&lt;/code&gt; i.e. the &lt;strong&gt;File Path&lt;/strong&gt; from the text box and the key(Name) of the object from the &lt;strong&gt;File Picker.&lt;/strong&gt; &lt;br&gt;
    5. In the &lt;strong&gt;Content type&lt;/strong&gt; enter &lt;code&gt;{{components.filepicker1.file[0].type}}&lt;/code&gt; &lt;br&gt;
    6. In the &lt;strong&gt;Upload data&lt;/strong&gt; field enter &lt;code&gt;{{components.filepicker1.file[0].type}}&lt;/code&gt; - here it’s fetching the content i.e. the file or object from the File Picker.&lt;br&gt;
    7. Click on &lt;strong&gt;Save&lt;/strong&gt; to save this query.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 For this query, we will not toggle on the &lt;code&gt;Run this query on page load?&lt;/code&gt; since this is only required when we want a query to run automatically whenever the app is opened.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jHB7sXKh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnxv5rz0cucmphta3r6i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jHB7sXKh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnxv5rz0cucmphta3r6i.png" alt="building last query" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connecting our last query to the file picker:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click on the &lt;strong&gt;File Picker&lt;/strong&gt; widget to open the &lt;strong&gt;Inspect panel&lt;/strong&gt; on the right sidebar.&lt;/li&gt;
&lt;li&gt;We will use the File Picker with its default properties. We’re using Images as the default &lt;strong&gt;Accept file type&lt;/strong&gt;. You can change according to your needs. Learn more about its properties &lt;a href="https://docs.tooljet.com/docs/widgets/filepicker"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Now, let’s drag and drop an image file to the file picker or click on the file picker to open the window and choose an image file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q5pz1MuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxk1uprmu1ogwshotmy8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q5pz1MuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxk1uprmu1ogwshotmy8.png" alt="connecting last query" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Now that we have connected our queries, let’s add events to our buttons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Fetch Files(Button1)&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;Click on the button to Open the &lt;strong&gt;Inspect panel.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Change the button text to &lt;strong&gt;Fetch Files&lt;/strong&gt; or whatever looks good to you.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Loading State&lt;/strong&gt; field add &lt;code&gt;{{queries.s32.isLoading}}&lt;/code&gt;. The loading state shows a loading skeleton for the button. &lt;code&gt;isLoading&lt;/code&gt; property to get the status of the query.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Events&lt;/strong&gt; section, click on &lt;code&gt;Add a handler&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Event&lt;/strong&gt; dropdown select &lt;code&gt;On click&lt;/code&gt;, In &lt;strong&gt;Action&lt;/strong&gt; dropdown select &lt;code&gt;Run query&lt;/code&gt;, and in &lt;strong&gt;Query&lt;/strong&gt; dropdown select &lt;code&gt;s32&lt;/code&gt;.
Now, we have set up the fetch files button to successfully get the list of objects from the bucket and display it on the table. 🎉&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e2PwRGJo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32htzkxujk9g0hzz15m1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e2PwRGJo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32htzkxujk9g0hzz15m1.png" alt="fetch button" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Upload files(Button2)&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;Click on the button to Open the &lt;strong&gt;Inspect panel.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Change the button text to &lt;strong&gt;Upload Files&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Loading State&lt;/strong&gt; field add &lt;code&gt;{{queries.uploadToS3.isLoading}}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For this button, we will add two event handlers- one to run the &lt;code&gt;uploadToS3&lt;/code&gt; query and the second to show an upload successful alert.&lt;/li&gt;
&lt;li&gt;For the first event handler, select &lt;code&gt;On click&lt;/code&gt; &lt;strong&gt;Event&lt;/strong&gt;, &lt;code&gt;Run Query&lt;/code&gt; &lt;strong&gt;Action&lt;/strong&gt;, and choose &lt;code&gt;uploadToS3&lt;/code&gt; query from &lt;strong&gt;Query&lt;/strong&gt; dropdown.&lt;/li&gt;
&lt;li&gt;For the second one, Choose &lt;code&gt;On click&lt;/code&gt; &lt;strong&gt;Event&lt;/strong&gt;, &lt;code&gt;Show alert&lt;/code&gt; &lt;strong&gt;Action&lt;/strong&gt;, &lt;code&gt;Success&lt;/code&gt; as &lt;strong&gt;Alert type&lt;/strong&gt;, and enter the &lt;code&gt;Upload successful&lt;/code&gt; as the &lt;strong&gt;Message&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, we have successfully set up our second button to run the query to upload the file from the file picker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pa6HpwlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mp2hzgkxr1qwtogaufsz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pa6HpwlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mp2hzgkxr1qwtogaufsz.png" alt="upload button" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lets-make-the-app-live"&gt;
  &lt;/a&gt;
  Let's make the app live
&lt;/h2&gt;

&lt;p&gt;To do this just click on the &lt;strong&gt;Deploy&lt;/strong&gt; button on the top-right corner. On the dialog box:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on the &lt;strong&gt;+Version&lt;/strong&gt; button to create a version of the app&lt;/li&gt;
&lt;li&gt;Click on the &lt;strong&gt;Save&lt;/strong&gt; button to save the progress and then click on the &lt;strong&gt;Deploy&lt;/strong&gt; button to deploy on the server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ixOkVvB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zaw0t7byxwupuxe17n4r.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ixOkVvB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zaw0t7byxwupuxe17n4r.gif" alt="deploying app" width="880" height="430"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And voila! You’ve just built an app to view and upload files directly to your S3 bucket using low-code. 🎉&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>aws</category>
    </item>
    <item>
      <title>React Music Player</title>
      <author>Amir</author>
      <pubDate>Wed, 22 Dec 2021 12:33:02 +0000</pubDate>
      <link>https://dev.to/amir_alipour/react-music-player-4621</link>
      <guid>https://dev.to/amir_alipour/react-music-player-4621</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;a href="https://npmjs.com/reaplay"&gt;Reaplay&lt;/a&gt;&lt;/strong&gt; is React &lt;a href="https://reactjs.org/docs/higher-order-components.html"&gt;HOC&lt;/a&gt; for create your custom music player with any styles you like.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;give me your tracks list, and i'll give you must state, functionalities you need for create a music player&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Install&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; reaplay 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add reaplay
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Usage&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Reaplay&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reaplay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;songList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;songSrc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// url song (https://example.com/song.mp3)&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;songSrc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// url song&lt;/span&gt;
     &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./songSrc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;//local song,&lt;/span&gt;
   &lt;span class="p"&gt;]&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="c1"&gt;//                         optional ↓&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Reaplay&lt;/span&gt; &lt;span class="na"&gt;tracks&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;songList&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

           &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;loading :&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="c1"&gt;// your player&lt;/span&gt;
           &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Reaplay&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;"tracks" prop is required but "startIndex" is optional prop&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#some-states-of-player-example"&gt;
  &lt;/a&gt;
  some states of player (example)
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;player.isLoading&lt;/code&gt;&lt;br&gt;
&lt;code&gt;player.duration&lt;/code&gt;&lt;br&gt;
&lt;code&gt;player.trackProgress&lt;/code&gt;&lt;br&gt;
&lt;code&gt;player.volume&lt;/code&gt;&lt;br&gt;
&lt;code&gt;player.isRepeat&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;and &lt;a href="https://github.com/Amir-Alipour/reaplay#props---properties"&gt;more&lt;/a&gt; states for create your dynamically player ui&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-functions-of-player-example"&gt;
  &lt;/a&gt;
  some functions of player (example)
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;player.toNextTrack()&lt;/code&gt;&lt;br&gt;
&lt;code&gt;player.toPrevTrack()&lt;/code&gt;&lt;br&gt;
&lt;code&gt;player.setVolume(70)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;player.setIsRepeat(true) | player.setIsRepeat((isRepeat) =&amp;gt; !isRepeat)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;player.playFast()&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;and &lt;a href="https://github.com/Amir-Alipour/reaplay#props---events"&gt;more&lt;/a&gt; functionalities you can use for your own player events&lt;/strong&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  example
&lt;/h3&gt;

&lt;p&gt;you can clone &lt;a href="https://github.com/Amir-Alipour/reaplay/tree/master/example"&gt;this&lt;/a&gt;, or use little example in &lt;a href="https://codesandbox.io/s/blissful-frost-yl38y"&gt;codesandbox&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;For supporting me, Please click on the Star button on Github and Share this post and finally send the Repo to your friends.&lt;br&gt;
Github Repo:&lt;br&gt;
&lt;a href="https://github.com/Amir-Alipour/reaplay"&gt;https://github.com/Amir-Alipour/reaplay&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>react</category>
      <category>player</category>
      <category>reaplay</category>
    </item>
    <item>
      <title>Code Coverage, Java Debugger API and Full Integration in Building DDJT - Day 3</title>
      <author>Shai Almog</author>
      <pubDate>Wed, 22 Dec 2021 12:18:49 +0000</pubDate>
      <link>https://dev.to/codenameone/code-coverage-java-debugger-api-and-full-integration-in-building-ddjt-day-3-1i20</link>
      <guid>https://dev.to/codenameone/code-coverage-java-debugger-api-and-full-integration-in-building-ddjt-day-3-1i20</guid>
      <description>&lt;p&gt;Yesterday &lt;a href="https://dev.to/codenameone/scaffolding-spring-boot-freemarker-and-jdi-building-ddtj-day-2-7od"&gt;we got the first PR through&lt;/a&gt; and now I'm on the second PR.&lt;/p&gt;

&lt;p&gt;We almost have an &lt;a href="https://github.com/ddtj/ddtj/"&gt;open source project&lt;/a&gt;. Well, technically we already have the source code and a few lines of code, but it still isn't exactly a "project". Not in the sense of "it needs to do something useful". But it compiles, runs unit tests and even has 80% code coverage. That last one was painful. I'm not a fan of arbitrary metrics to qualify the quality of code. The 80% code coverage is a good example of this.&lt;br&gt;
Case in point, this code. Currently, the source code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;MonitoredSession&lt;/span&gt; &lt;span class="n"&gt;monitoredSession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connectSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"java.home"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"-Dhello=true"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But originally it looked like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;MonitoredSession&lt;/span&gt; &lt;span class="n"&gt;monitoredSession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connectSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Changing this increased code coverage noticeably because code down the road I have special case conditions for variables that aren't null. For good test coverage, I would also want to test the null situation, but it doesn't affect test coverage. Now obviously, you don't write tests just to satisfy a code coverage tool... But if we rely on metrics like that as a benchmark of code quality and reliability. We should probably stop.&lt;/p&gt;

&lt;p&gt;Another problem I have with this approach is the amount of work required to get that last 10-20% of code coverage to pass the 80% requirement. That's insanely hard. If you work on a project with 100% code coverage requirement, you have my condolences. I think an arbitrary percentage of code for coverage is a problematic metric. I like the statement coverage stats better, but they still suffer from similar problems.&lt;/p&gt;

&lt;p&gt;On the plus side, I love the code coverage report; I feel it gives some sense of where the project stands and helps make sense of it all. In that sense, Sonar Cloud is pretty great.&lt;/p&gt;

&lt;p&gt;Keen observers of the code will notice I didn't add any coverage to the common code. It has very little business logic at the moment and in fact I removed even that piece of code in the upcoming PR.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-tests"&gt;
  &lt;/a&gt;
  Writing Tests
&lt;/h2&gt;

&lt;p&gt;I spent a lot of time writing tests and mocking, which is good preparation for building a tool that will generate mocked unit tests. As a result, I feel the secondary goal of generating tests based on code coverage report; is more interesting than ever before. I can't wait to dogfood the code to see if I can bring up the statistics easily.&lt;/p&gt;

&lt;p&gt;One thing I find very painful in tests is the error log file. For the life of me, I do not know why Maven tests target shows a stack trace that points at the line in the test instead of the full stack trace by default. IntelliJ/IDEA improved on this, but it's still not ideal. Especially when combing through CI logs.&lt;/p&gt;

&lt;p&gt;Right now, all of my tests are unit tests because I don't have full integration in place yet. But this will change soon. I'm still not sure what form I will pick for integration tests since the initial version of the application won't have a web front-end. I've yet to test the CLI. &lt;/p&gt;

&lt;p&gt;It conflicted me a bit when I started writing this code. As I mentioned before, integrating the Java debug API into the Spring Boot backend was a pretty big shift in direction for me. But it makes sense and solves a lot of problems. The main point of contention for me was supporting other languages/platforms. But I hope I'll be able to integrate with the respective platforms native debug APIs as we add them. This will make the debugging process for other platforms similar to the Java debug sessions. I'll try to write the code in a modular way so we can inject support for additional platforms.&lt;/p&gt;

&lt;p&gt;I'm pretty sure program execution for python, node etc. will allow similar capabilities as JDI on Java SE. So if the code is modular enough, I could just add packages to match every supported platform. At least, that's the plan right now. If that won't work, we can always refactor or just add an agent option for those platforms. Our requirements are relatively simple, we don't need expression evaluation, etc. only the current stack frame data and simple step over results.&lt;/p&gt;

&lt;p&gt;When I thought about using a debugger session, I thought about setting breakpoints for every method. This is obviously problematic since there are limits on the number of breakpoints we can set. Instead, I'm using method entry callbacks to track the application. Within every method, I use step over to review the elements within. This isn't implemented yet mostly because it's pretty darn hard to test this from unit tests.&lt;/p&gt;

&lt;p&gt;That's why I paused the work on the debugger session and moved down the stack to the CLI. I want to use the actual product to debug this functionality. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrating-cli-through-web-service"&gt;
  &lt;/a&gt;
  Integrating CLI through Web Service
&lt;/h2&gt;

&lt;p&gt;I created a CLI project and defined the dependencies, but until now I didn't really write any CLI code. The plan is that the CLI will communicate with the backend code via REST. Initially, I thought of using Swagger (Open API) which is pretty great. If you're unfamiliar with it, it essentially generates the documentation and even application code for all the networking you need. Just by inspecting your API, pretty sweet!&lt;/p&gt;

&lt;p&gt;It generates a lot of boilerplate that's sometimes verbose and less intuitive. It also blocks some code reuse. If I had an extensive project or a public facing API, I might have used it. But for something intended for internal use, it seems like an overkill. So I ended up using Gson, which I used in the past, and the new &lt;a href="https://github.com/ddtj/ddtj/pull/2/files#diff-806d340badbe3c5f02113a15b0a9d8b6c4242ce155f36c3a0cc595b106c2f0bfR86"&gt;Java 11 HttpClient&lt;/a&gt; API. The API is pretty nice and pretty easy to work with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#over-eager-picocli"&gt;
  &lt;/a&gt;
  Over Eager PicoCLI
&lt;/h3&gt;

&lt;p&gt;I really like &lt;a href="https://picocli.info/"&gt;PicoCLI&lt;/a&gt;, I think that if you &lt;a href="https://github.com/ddtj/ddtj/blob/cf316d9f4c0c361686dbee48f68c4e9b2c7f2636/CLI/src/main/java/dev/ddtj/cli/Main.java"&gt;look at this source file&lt;/a&gt;, you can easily see why. It makes coding a command line app trivial. You get gorgeous CLI APIs with highlighting, completion, smart grouping and so much more. It even has a preprocessor, which makes it easy to compile it with GraalVM. &lt;/p&gt;

&lt;p&gt;Unfortunately, I ran into a use case that PicoCLI was probably a bit too "clever".&lt;/p&gt;

&lt;p&gt;My initial design was to provide a command like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java -jar ddtj.jar -run [-javahome:&amp;lt;path-to-java-home] [-whitelist:regex-whitelist classes] [-arg=&amp;lt;app argument&amp;gt;...] mainClass
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that &lt;code&gt;-arg&lt;/code&gt; would essentially allow us to take all the arguments we want to pass to the target JVM. E.g. if we want to pass an environment variable to the JVM we can do something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-arg "-Denv=x"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problem is that PicoCLI thinks that -D is another argument and tries to parse it. I spent a lot of time trying to find a way to do this. I don't think it's possible with PicoCLI, but I might have missed something. The problem is, I don't want to replicate all the JVM arguments with PicoCLI arguments, e.g. classpath parameters, etc. Unfortunately, this is the only option I can see right now. &lt;/p&gt;

&lt;p&gt;I'll have to re-think this approach after I get the MVP off the ground, but for now I changed the CLI specification to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java -jar ddtj.jar -run mainClass [-javahome:&amp;lt;path-to-java-home] [-whitelist:regex-whitelist classes] [-classpath...] [-jar...] 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact, here's what the help command passed to PicoCLI generated for that code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xYWGM33b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8vgvdkkdzcgyvfj33uo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xYWGM33b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8vgvdkkdzcgyvfj33uo.png" alt="Command Line Help from PicoCLI" width="880" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#completely-redid-the-common"&gt;
  &lt;/a&gt;
  Completely Redid the Common
&lt;/h3&gt;

&lt;p&gt;When I implemented the common project, I did so based on guesses. Which were totally wrong. I had to move every source file from my original implementation into the backend project. Then I had to reimplement classes for the common code. &lt;/p&gt;

&lt;p&gt;The reason for this is the web interface. It made me realize I stuck the data model in common instead of the data that needs to move to the client (which is far smaller). &lt;/p&gt;

&lt;p&gt;Implementing the web interface was trivial. I just went over the commands I listed in the documentation and added a web service method for each command. Then added a DTO (Data Transfer Object) for each one. The DTOs are all in the common project, which is how it should be. &lt;/p&gt;

&lt;p&gt;Initially, I thought I'd just write all the logic within the web service rest class, but I eventually separated the logic to a generic service class. I'd like to add a web UI in the future so it makes sense to have common logic in a &lt;a href="https://github.com/ddtj/ddtj/blob/cf316d9f4c0c361686dbee48f68c4e9b2c7f2636/Backend/src/main/java/dev/ddtj/backend/service/MainService.java"&gt;service class&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handling-state"&gt;
  &lt;/a&gt;
  Handling State
&lt;/h3&gt;

&lt;p&gt;State is a tough call for this type of application. I don't want a database and everything is "in memory". But even then, do we use session management?&lt;/p&gt;

&lt;p&gt;What if we have multiple apps running on the backend?&lt;/p&gt;

&lt;p&gt;So currently I just punted this problem from the MVP. If you run more than one app, it will fail. I just store data in one local field on the session object. I don't need static variables here since spring defaults to singletons for session beans and there's no clustering involved. &lt;/p&gt;

&lt;p&gt;After the MVP, we should look into running multiple applications. This might require changing the CLI to determine the app we're working on right now. I think we'll still keep state in a field, but we should have a way to flush the state to reduce RAM usage. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#snyk-integration"&gt;
  &lt;/a&gt;
  Snyk Integration
&lt;/h2&gt;

&lt;p&gt;Yesterday I had some issues with Snyk. If you're unfamiliar with it, it's a tool that seamlessly scans your code for vulnerabilities and helps you fix them. Pretty cool. The integration was super easy to do, and I was pretty pleased with it. Then I tried to add a badge to the project...&lt;/p&gt;

&lt;p&gt;Apparently, Snyk badges don't work well with a mono-repo. They expect the pom file to be at the top level of the project. So I gave up on the badge for that. The scanning worked, so it's weird to me that the badge would fail.&lt;/p&gt;

&lt;p&gt;I'll try to monitor that one and see if there's a solution for that. I discussed this with their support, which was reasonably responsive but didn't seem to have a decent answer for that.&lt;/p&gt;

&lt;p&gt;It's a shame, I like the idea of a badge that authenticates the security status of the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrow"&gt;
  &lt;/a&gt;
  Tomorrow
&lt;/h2&gt;

&lt;p&gt;This has been a busy day, but it felt unproductive in the end because all the time I wasted on the CLI and trying to get things like the Snyk badge working. This is something to be weary of. Always look for the shortcut when doing an MVP and if you can't get something working, just cut it out for now. We can always get back to that later.&lt;/p&gt;

&lt;p&gt;Tomorrow I hope to get the current PR up to function coverage standards and start wiring in the command line API so I can start debugging the debugger process in real-world conditions.  There are still some commented out code fragments and some smells I need to improve.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>java</category>
      <category>startup</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Building a Login Function with AWS Amplify and Flutter</title>
      <author>Yasunori Kirimoto</author>
      <pubDate>Wed, 22 Dec 2021 12:03:23 +0000</pubDate>
      <link>https://dev.to/aws-builders/building-a-login-function-with-aws-amplify-and-flutter-4667</link>
      <guid>https://dev.to/aws-builders/building-a-login-function-with-aws-amplify-and-flutter-4667</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vJWnfhwh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-076_01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJWnfhwh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-076_01.png" alt="img" width="727" height="300"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#i-built-a-login-function-with-aws-amplify-and-flutter-tada"&gt;
  &lt;/a&gt;
  I built a login function with AWS Amplify and Flutter 🎉
&lt;/h3&gt;

&lt;p&gt;I built a login function using &lt;a href="https://aws-amplify.github.io/docs/"&gt;AWS Amplify&lt;/a&gt;, Amplify UI Components' &lt;a href="https://docs.amplify.aws/ui/q/framework/flutter"&gt;amplify_authenticator&lt;/a&gt;, and &lt;a href="https://flutter.dev"&gt;Flutter&lt;/a&gt;!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#advance-preparation"&gt;
  &lt;/a&gt;
  Advance Preparation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Preparing the Flutter environment

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://day-journal.com/memo/flutter-001"&gt;Flutter #001 - Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Flutter v2.8.0&lt;/li&gt;
&lt;li&gt;Dart v2.15.0&lt;/li&gt;
&lt;li&gt;Xcode v13.1&lt;/li&gt;
&lt;li&gt;Android SDK v32.0.0&lt;/li&gt;
&lt;li&gt;Android Studio v2020.3&lt;/li&gt;
&lt;li&gt;Visual Studio Code v1.63.0&lt;/li&gt;
&lt;li&gt;Flutter extension v3.29.0&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Preparing the AWS Amplify environment

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://day-journal.com/memo/aws-amplify-001"&gt;AWS Amplify #001 - Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;node v16.10.0&lt;/li&gt;
&lt;li&gt;npm v7.24.0&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#creating-a-flutter-project"&gt;
  &lt;/a&gt;
  Creating a Flutter project
&lt;/h2&gt;

&lt;p&gt;First, we need to create a Flutter project.&lt;br&gt;
&lt;a href="https://day-journal.com/memo/flutter-002"&gt;Flutter #002 - Building the Environment&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flutter create amplify_app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dweUFNj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-076_02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dweUFNj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-076_02.png" alt="img" width="494" height="238"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;This completes the creation of the Flutter project.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-aws-amplify"&gt;
  &lt;/a&gt;
  Setting up AWS Amplify
&lt;/h2&gt;

&lt;p&gt;The next step is to configure AWS Amplify for Flutter and add authentication capabilities.&lt;/p&gt;

&lt;p&gt;Configuring AWS Amplify for Flutter&lt;br&gt;
&lt;a href="https://day-journal.com/memo/aws-amplify-006"&gt;AWS Amplify #006 - Building the environment [Flutter version]&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bCqFbOlN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-076_03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCqFbOlN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-076_03.png" alt="img" width="658" height="504"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2T8xQfpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-076_04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2T8xQfpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-076_04.png" alt="img" width="733" height="264"&gt;&lt;/a&gt;  &lt;/p&gt;



&lt;p&gt;Add authentication&lt;br&gt;
&lt;a href="https://day-journal.com/memo/aws-amplify-003"&gt;AWS Amplify #003 - Add Authentication&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify add auth
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jJHn0F4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-076_05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJHn0F4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-076_05.png" alt="img" width="656" height="499"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_v4rAKNw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-076_06.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_v4rAKNw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-076_06.png" alt="img" width="880" height="465"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;This completes the setup of AWS Amplify.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#configuring-flutter"&gt;
  &lt;/a&gt;
  Configuring Flutter
&lt;/h2&gt;

&lt;p&gt;Finally, we'll write the actual code for the login function.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#overall-configuration"&gt;
  &lt;/a&gt;
  Overall configuration
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S_0n_r87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-076_07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S_0n_r87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-076_07.png" alt="img" width="295" height="496"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#pubspecyaml"&gt;
  &lt;/a&gt;
  pubspec.yaml
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;amplify_app&lt;/span&gt;
&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;A new Flutter project.&lt;/span&gt;

&lt;span class="na"&gt;publish_to&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;none'&lt;/span&gt;

&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;1.0.0+1&lt;/span&gt;

&lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;sdk&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;&amp;gt;=2.15.0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;lt;3.0.0'&lt;/span&gt;

&lt;span class="na"&gt;dependencies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;flutter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;sdk&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;flutter&lt;/span&gt;

    &lt;span class="na"&gt;cupertino_icons&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^1.0.2&lt;/span&gt;

    &lt;span class="na"&gt;amplify_auth_cognito&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^0.3.0-0&lt;/span&gt;
    &lt;span class="na"&gt;amplify_authenticator&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^0.1.0-0&lt;/span&gt;
    &lt;span class="na"&gt;amplify_flutter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^0.3.0-0&lt;/span&gt;

&lt;span class="na"&gt;dev_dependencies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;flutter_test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;sdk&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;flutter&lt;/span&gt;

    &lt;span class="na"&gt;flutter_lints&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^1.0.0&lt;/span&gt;

&lt;span class="na"&gt;flutter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;uses-material-design&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Install the Amplify UI Components package related to "&lt;a href="https://pub.dev/packages/amplify_authenticator"&gt;amplify_authenticator&lt;/a&gt;."&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;amplify_auth_cognito&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^0.3.0-0&lt;/span&gt;
&lt;span class="na"&gt;amplify_authenticator&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^0.1.0-0&lt;/span&gt;
&lt;span class="na"&gt;amplify_flutter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^0.3.0-0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;/lib&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#maindart"&gt;
  &lt;/a&gt;
  main.dart
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:amplify_auth_cognito/amplify_auth_cognito.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:amplify_authenticator/amplify_authenticator.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:amplify_flutter/amplify.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'amplifyconfiguration.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;runApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatefulWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;_MyAppState&lt;/span&gt; &lt;span class="n"&gt;createState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_MyAppState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_MyAppState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;_configureAmplify&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_configureAmplify&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Amplify&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addPlugin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AmplifyAuthCognito&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
      &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Amplify&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;configure&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amplifyconfig&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Could not configure Amplify: &lt;/span&gt;&lt;span class="si"&gt;$e&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;theme:&lt;/span&gt; &lt;span class="n"&gt;ThemeData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;light&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
      &lt;span class="nl"&gt;darkTheme:&lt;/span&gt; &lt;span class="n"&gt;ThemeData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dark&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
      &lt;span class="nl"&gt;home:&lt;/span&gt; &lt;span class="n"&gt;Authenticator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;LoggedInScreen&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoggedInScreen&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;LoggedInScreen&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Logged In'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;SignOutButton&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
          &lt;span class="o"&gt;],&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Load the AWS Amplify related things.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:amplify_auth_cognito/amplify_auth_cognito.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:amplify_authenticator/amplify_authenticator.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:amplify_flutter/amplify.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'amplifyconfiguration.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Set up the AWS Amplify authentication.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_configureAmplify&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Amplify&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addPlugin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AmplifyAuthCognito&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
      &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Amplify&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;configure&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amplifyconfig&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Could not configure Amplify: &lt;/span&gt;&lt;span class="si"&gt;$e&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Configure the UI components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;theme:&lt;/span&gt; &lt;span class="n"&gt;ThemeData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;light&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
      &lt;span class="nl"&gt;darkTheme:&lt;/span&gt; &lt;span class="n"&gt;ThemeData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dark&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
      &lt;span class="nl"&gt;home:&lt;/span&gt; &lt;span class="n"&gt;Authenticator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;LoggedInScreen&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Configure the screen after login.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Logged In'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;SignOutButton&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
          &lt;span class="o"&gt;],&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;/android/app&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#buildgradle"&gt;
  &lt;/a&gt;
  build.gradle
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gradle"&gt;&lt;code&gt;&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;localProperties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Properties&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;localPropertiesFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rootProject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'local.properties'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;localPropertiesFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exists&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;localPropertiesFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'UTF-8'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;localProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;load&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;flutterRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;localProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'flutter.sdk'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flutterRoot&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;GradleException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Flutter SDK not found. Define location with flutter.sdk in the local.properties file."&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;flutterVersionCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;localProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'flutter.versionCode'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flutterVersionCode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;flutterVersionCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;flutterVersionName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;localProperties&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'flutter.versionName'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flutterVersionName&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;flutterVersionName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'1.0'&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="nl"&gt;plugin:&lt;/span&gt; &lt;span class="s1"&gt;'com.android.application'&lt;/span&gt;
&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="nl"&gt;plugin:&lt;/span&gt; &lt;span class="s1"&gt;'kotlin-android'&lt;/span&gt;
&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="nl"&gt;from:&lt;/span&gt; &lt;span class="s2"&gt;"$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"&lt;/span&gt;

&lt;span class="n"&gt;android&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;compileSdkVersion&lt;/span&gt; &lt;span class="n"&gt;flutter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compileSdkVersion&lt;/span&gt;

    &lt;span class="n"&gt;compileOptions&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sourceCompatibility&lt;/span&gt; &lt;span class="n"&gt;JavaVersion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;VERSION_1_8&lt;/span&gt;
        &lt;span class="n"&gt;targetCompatibility&lt;/span&gt; &lt;span class="n"&gt;JavaVersion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;VERSION_1_8&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;kotlinOptions&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;jvmTarget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'1.8'&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;sourceSets&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;srcDirs&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;'src/main/kotlin'&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;defaultConfig&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).&lt;/span&gt;
        &lt;span class="n"&gt;applicationId&lt;/span&gt; &lt;span class="s2"&gt;"com.example.amplify_app"&lt;/span&gt;
        &lt;span class="n"&gt;minSdkVersion&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;
        &lt;span class="n"&gt;targetSdkVersion&lt;/span&gt; &lt;span class="n"&gt;flutter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;targetSdkVersion&lt;/span&gt;
        &lt;span class="n"&gt;versionCode&lt;/span&gt; &lt;span class="n"&gt;flutterVersionCode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toInteger&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;versionName&lt;/span&gt; &lt;span class="n"&gt;flutterVersionName&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;buildTypes&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// TODO: Add your own signing config for the release build.&lt;/span&gt;
            &lt;span class="c1"&gt;// Signing with the debug keys for now, so `flutter run --release` works.&lt;/span&gt;
            &lt;span class="n"&gt;signingConfig&lt;/span&gt; &lt;span class="n"&gt;signingConfigs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;debug&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;flutter&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="s1"&gt;'../..'&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s2"&gt;"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;To display the amplify_authenticator on Android, you need to specify the Android SDK version, so select a fixed "minSdkVersion."&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gradle"&gt;&lt;code&gt;    &lt;span class="n"&gt;defaultConfig&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).&lt;/span&gt;
        &lt;span class="n"&gt;applicationId&lt;/span&gt; &lt;span class="s2"&gt;"com.example.amplify_app"&lt;/span&gt;
        &lt;span class="n"&gt;minSdkVersion&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;
        &lt;span class="n"&gt;targetSdkVersion&lt;/span&gt; &lt;span class="n"&gt;flutter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;targetSdkVersion&lt;/span&gt;
        &lt;span class="n"&gt;versionCode&lt;/span&gt; &lt;span class="n"&gt;flutterVersionCode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toInteger&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;versionName&lt;/span&gt; &lt;span class="n"&gt;flutterVersionName&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Run "Run and Debug" in Visual Studio Code and log in after user registration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H6goXAwZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://day-journal.com/memo/images/try-076_00.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H6goXAwZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://day-journal.com/memo/images/try-076_00.gif" alt="img" width="480" height="835"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Check to see if the user is registered in the AWS console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1yL9JhSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-076_08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1yL9JhSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-076_08.png" alt="img" width="880" height="508"&gt;&lt;/a&gt;  &lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#i-was-able-to-build-the-login-function-with-aws-amplify-and-flutter-thumbsup"&gt;
  &lt;/a&gt;
  I was able to build the login function with AWS Amplify and Flutter 👍
&lt;/h4&gt;

&lt;p&gt;If you want to implement the login function in Flutter, Firebase is often used, but I was able to confirm that it can be implemented with AWS Amplify 💡 &lt;/p&gt;

</description>
      <category>awsamplify</category>
      <category>flutter</category>
      <category>aws</category>
      <category>dart</category>
    </item>
    <item>
      <title>Setting up a new Rails 7 app with Vite, Inertia, and Svelte</title>
      <author>Stefan Buhrmester</author>
      <pubDate>Wed, 22 Dec 2021 11:45:08 +0000</pubDate>
      <link>https://dev.to/buhrmi/setting-up-a-new-rails-7-app-with-vite-inertia-and-svelte-c9e</link>
      <guid>https://dev.to/buhrmi/setting-up-a-new-rails-7-app-with-vite-inertia-and-svelte-c9e</guid>
      <description>&lt;p&gt;&lt;a href="https://edgeguides.rubyonrails.org/7_0_release_notes.html"&gt;Rails 7 has been released&lt;/a&gt; and &lt;a href="https://www.simplethread.com/rails-7-the-end-of-webpacker/"&gt;Webpacker is being phased out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you're like me and prefer to use component frameworks over DHH's &lt;a href="https://hotwired.dev"&gt;new Hotwire thing&lt;/a&gt;, you might want to look for alternatives now. I'm happy to say that I found &lt;a href="https://vite-ruby.netlify.app/"&gt;vite_ruby&lt;/a&gt; to be a more than capable replacement.&lt;/p&gt;

&lt;p&gt;So here is a quick guide how to set up a new Rails 7 app using my favorite frameworks out there (&lt;a href="https://inertiajs.com"&gt;Inertia&lt;/a&gt; and &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt;) and bundle it all up with Vite. You can also skip all this and download the endresult directly from here: &lt;a href="https://github.com/buhrmi/rails7-starter"&gt;https://github.com/buhrmi/rails7-starter&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-go"&gt;
  &lt;/a&gt;
  Let's go
&lt;/h2&gt;

&lt;p&gt;Start off by initializing a new Rails 7 app without Javascript and asset pipeline:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails new app --skip-javascript --skip-asset-pipeline
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this is done, add the &lt;code&gt;inertia_rails&lt;/code&gt; and &lt;code&gt;vite_rails&lt;/code&gt; gems to your Gemfile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bundle add inertia_rails
bundle add vite_rails
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;vite_rails&lt;/code&gt; gem adds an installer to your project. Run it with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bundle exec vite install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This generates some default config file, and also your &lt;code&gt;frontend&lt;/code&gt; directory. Find the &lt;code&gt;application.js&lt;/code&gt; in your &lt;code&gt;app/frontend&lt;/code&gt; directory and replace its contents with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createInertiaApp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@inertiajs/inertia-svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;InertiaProgress&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@inertiajs/progress&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DOMContentLoaded&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;csrfToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;meta[name=csrf-token]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;
  &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;common&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X-CSRF-Token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;csrfToken&lt;/span&gt;

  &lt;span class="nx"&gt;InertiaProgress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="nx"&gt;createInertiaApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`../pages/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.svelte`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last but not least, add the node packages to your app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev axios svelte @sveltejs/vite-plugin-svelte @inertiajs/inertia @inertiajs/inertia-svelte @inertiajs/progress
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can place your Inertia page components into &lt;code&gt;app/frontend/pages&lt;/code&gt;, start your rails server with &lt;code&gt;rails s&lt;/code&gt;, and it should all work as usual.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hmr"&gt;
  &lt;/a&gt;
  HMR
&lt;/h2&gt;

&lt;p&gt;Once &lt;a href="https://github.com/inertiajs/inertia/pull/1017"&gt;this PR&lt;/a&gt;  made its way into a released version, HMR should also work out of the box and you can start the vite dev server with &lt;code&gt;./bin/vite dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Happy coding :)&lt;/p&gt;

&lt;p&gt;Ps.: I'm working on a new &lt;a href="https://www.shitcoinsociety.com"&gt;browser-based game&lt;/a&gt; using exactly this approach. I'd be super happy if you'd check it out.&lt;/p&gt;

</description>
      <category>rails</category>
      <category>vite</category>
      <category>svelte</category>
    </item>
    <item>
      <title>We opened a lightweight Web IDE UI framework!</title>
      <author>Ziv</author>
      <pubDate>Wed, 22 Dec 2021 11:44:34 +0000</pubDate>
      <link>https://dev.to/wewoor/we-opened-a-lightweight-web-ide-ui-framework-2ank</link>
      <guid>https://dev.to/wewoor/we-opened-a-lightweight-web-ide-ui-framework-2ank</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aHKFyppF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0bx0o181g1ji25cn0q4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aHKFyppF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0bx0o181g1ji25cn0q4.png" alt="Molecule Logo" width="120" height="120"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A lightweight Web IDE UI Framework&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/DTStack/molecule"&gt;Molecule&lt;/a&gt; is a lightweight Web IDE UI framework built with React.js and inspired by VS Code. We designed the Extension APIs similar to the VS Code to help developers develop the Web IDE System more efficiently. Molecule built-in the Monaco Editor, we provided extract APIs of the Keybinding and QuickAccess.&lt;/p&gt;

&lt;p&gt;Due to the Extension mechanism, the developers can decouple the business code from the IDE UI,  but to focus on the business iteration, part of IDE UI almost move to the isolated iteration. It is a better way to make the product can keep moving.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kr8gI_vy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwrucf61gv2bsxj5kd99.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kr8gI_vy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwrucf61gv2bsxj5kd99.png" alt="Workbench" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;In &lt;a href="https://www.dtstack.com/dtinsight/"&gt;DTSTack&lt;/a&gt;, we have many Web applications, like Batch/Stream Task Development, Analysis, Data Source Management, Algorithm Development. The developers need to code, debugging in our platform, so the IDE is a frequent scene in our product.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zMf-s_Mc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlhpjybgbxrrt7a23wk4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMf-s_Mc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlhpjybgbxrrt7a23wk4.png" alt="Early Web IDE Product Version" width="880" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Early Web IDE Product Version&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This screenshot shows the early version of the IDE, and the product is simple yet. The IDE UI is based on React.js, Ant Design, and Codemirror so on technologies. Besides, due to the IDE Workbench applied in our multiple products,  we have to abstract a simple IDE UI React component to share with the other products.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iKMuwK3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1hpg39c60jex0llvb79.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iKMuwK3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1hpg39c60jex0llvb79.png" alt="Current Web IDE Product Version" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Current Web IDE Product Version&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With the business growing and product iteration, the features in Workbench are more and more complex. As all you know, the product of interactive and visual upgrade every year, but the early Front end structure is so fat, extensible badly, can't support new incoming features and designs. UI designers are always confused why the cost of upgrading the frontend is so high.&lt;/p&gt;

&lt;p&gt;In the past two years, We researched the &lt;a href="https://github.com/c9"&gt;Cloud9 IDE&lt;/a&gt;, &lt;a href="https://github.com/microsoft/vscode"&gt;VS Code&lt;/a&gt;, &lt;a href="https://github.com/eclipse-theia/theia"&gt;Eclipse Theia&lt;/a&gt; solutions. These products have good UI abstraction, extensibility, and full features for IDE. But, so many features are useless for our product, and it's too hard to customize for our team. Another reason is our React.js code is also hard to integrate with these solutions.&lt;/p&gt;

&lt;p&gt;So, We want a solution, which has good UI abstraction, easy-to-customize UI, Color Theme, friendly for React.js applications. Finally, VS Code inspired us. The team tried to make the &lt;a href="https://github.com/DTStack/molecule"&gt;Molecule&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#core-features"&gt;
  &lt;/a&gt;
  Core Features
&lt;/h2&gt;

&lt;p&gt;The Molecule wrote in Typescript and applied the React.js, Monaco Editor so on technologies, and the main features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Built-in VS Code Workbench UI&lt;/li&gt;
&lt;li&gt;Compatible with the VS Code ColorTheme&lt;/li&gt;
&lt;li&gt;Customize the Workbench via React Component easily&lt;/li&gt;
&lt;li&gt;Built-in Monaco-Editor Command Palette, Keybinding features&lt;/li&gt;
&lt;li&gt;Support the i18n, built-in zhCN, and English&lt;/li&gt;
&lt;li&gt;Built-in Settings, support to edit and extend via the Extension&lt;/li&gt;
&lt;li&gt;Built-in basic Explorer, Search components and support extending via the Extension&lt;/li&gt;
&lt;li&gt;Typescript Ready&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---J8d4nqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mj5uvr442q858e57u3x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---J8d4nqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mj5uvr442q858e57u3x.png" alt="Workbench Parts" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This picture is the default IDE Workbench of Molecule, basically, like Workbench, ColorTheme, QuickAccess, Keybinding, i18n, Settings, and so on features are easy to extend via the Extension API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-differences-of-molecule-with-other-web-ide-solutions"&gt;
  &lt;/a&gt;
  What are the differences of Molecule with other Web IDE Solutions?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;React.js application friendly&lt;/li&gt;
&lt;li&gt;Built on React.js component and More powerful UI custom ability&lt;/li&gt;
&lt;li&gt;Compatible the VS Code so many ColorTheme extensions &lt;/li&gt;
&lt;li&gt;Only focusing on UI,  it's easy to understand to Front-end developers.&lt;/li&gt;
&lt;li&gt;Support to extend like File System, Version Control, LSP, DAP, Terminal, and so on features if you want&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-it"&gt;
  &lt;/a&gt;
  How to use it?
&lt;/h2&gt;

&lt;p&gt;Read the &lt;a href="https://dtstack.github.io/molecule/docs/quick-start"&gt;QuickStart&lt;/a&gt;, please.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#todo"&gt;
  &lt;/a&gt;
  TODO
&lt;/h2&gt;

&lt;p&gt;Molecule only released a  Beta version currently. The  APIs are not stable enough. Some concepts referred to from VS Code are over-designed. We are going to make the Extension API  is more powerful.  Keep optimizing the details of UI and ColorTheme,  developing a more rich layout system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finally"&gt;
  &lt;/a&gt;
  Finally
&lt;/h2&gt;

&lt;p&gt;Hoping our experience is helpful to you.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub: &lt;a href="https://github.com/DTStack/molecule"&gt;https://github.com/DTStack/molecule&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Website: &lt;a href="https://dtstack.github.io/molecule/en/"&gt;https://dtstack.github.io/molecule/en/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Preview: &lt;a href="https://dtstack.github.io/molecule-examples/#/"&gt;https://dtstack.github.io/molecule-examples/#/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Leaked C# 11 Features! The best Christmas Gift from Microsoft?</title>
      <author>Dotnetsafer</author>
      <pubDate>Wed, 22 Dec 2021 11:34:23 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/leaked-c-11-features-the-best-christmas-gift-from-microsoft-pn1</link>
      <guid>https://dev.to/dotnetsafer/leaked-c-11-features-the-best-christmas-gift-from-microsoft-pn1</guid>
      <description>&lt;p&gt;It's already the end of 2022 (I'm still digesting 2019) and I think we would all agree that it has been a very intense and full year, such as the release of C# 10, .NET 6 and many more things. But what's this about C# 11 features coming out already? Wasn't it that Microsoft released C# 10 a month ago?&lt;/p&gt;

&lt;p&gt;Is Microsoft really preparing an amazing gift for all C# developers? &lt;strong&gt;C# 11 as a gift this Christmas?&lt;/strong&gt; If this is true, &lt;strong&gt;let's see in advance the features that we will find in C# 11.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C# 10 is the latest version&lt;/strong&gt; of Microsoft's C# programming language. It is designed to be an &lt;strong&gt;easy-to-learn&lt;/strong&gt; programming language for beginners with a focus on simplicity, readability, and productivity.&lt;/p&gt;

&lt;p&gt;I already talked about &lt;a href="https://dev.to/dotnetsafer/5-new-net-6-features-to-be-released-officially-next-week-167n"&gt;the features of C# 10&lt;/a&gt;, but just to refresh your memory, &lt;strong&gt;some of the features that are available in C# 10 are:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;File-scoped namespace declaration&lt;/li&gt;
&lt;li&gt;Global using directives&lt;/li&gt;
&lt;li&gt;Loop constructs&lt;/li&gt;
&lt;li&gt;Record structs&lt;/li&gt;
&lt;li&gt;handling&lt;/li&gt;
&lt;li&gt;Improvements on lambda expressions&lt;/li&gt;
&lt;li&gt;Standardized types and data structures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These features, which were implemented in C# 10, greatly &lt;strong&gt;improved the performance of applications&lt;/strong&gt;, in turn reducing development costs and time.&lt;/p&gt;

&lt;p&gt;But let's see what's going on these days with C# 11 and why it's being talked about so much.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-about-c%C2%A011"&gt;
  &lt;/a&gt;
  What is about C# 11?
&lt;/h2&gt;

&lt;p&gt;As many of us already know, Microsoft released C#10 at the beginning of November, bringing with it many new innovative features making C# a much more versatile language. But since a couple of days ago &lt;strong&gt;rumors about C#11 have started to spread in the networks&lt;/strong&gt; and its possible features have been published in a Reddit thread which makes mention of an changelog in &lt;a href="https://github.com/dotnet/csharplang/blob/main/meetings/2021/LDM-2021-08-30.md"&gt;Microsoft's official Github&lt;/a&gt;. &lt;strong&gt;The features seem very interesting and curious, so let's analyze them:&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#generic-attributes"&gt;
  &lt;/a&gt;
  Generic attributes
&lt;/h2&gt;

&lt;p&gt;This is the first feature talked about in one of the first &lt;a href="https://github.com/dotnet/csharplang/issues/124"&gt;C# issues on GitHub&lt;/a&gt;. Microsoft has had a couple of issues with this promising feature as it encountered some incompatibilities with other tools at the last minute (including crashes and problems compiling). For this reason Microsoft did not officially release this feature in C# 10, but in a preview. Let's see how it works:&lt;/p&gt;

&lt;p&gt;As &lt;a href="https://github.com/ashmind"&gt;Ashmind&lt;/a&gt; has explained with his words in his &lt;a href="https://github.com/dotnet/roslyn/issues/953"&gt;Proposal&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"For some attributes (e.g. &lt;code&gt;TypeConverterAttribute&lt;/code&gt;) that are used to reference types, the current usage looks like this:"&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;TypeConverter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;According to him, &lt;strong&gt;this problem has 2 disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can't guarantee that the type matches the requirements of the attribute - e.g. has an empty constructor or inherits &lt;code&gt;TypeConverter&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The syntax is a bit verbose.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ashmind suggested that the generic attributes should be supported, including any generic constraints. Followed by an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TypeConverter&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This very good proposal you suggest &lt;strong&gt;has a couple of advantages&lt;/strong&gt;. In his own words:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Support for type constraints in type-referencing attributes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shorter syntax.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As far as I know, generic attributes are already supported in IL.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#field-keyword"&gt;
  &lt;/a&gt;
  Field Keyword
&lt;/h2&gt;

&lt;p&gt;The favorite feature of many C# developers. We have been analyzing this feature in the previews of C# 10 &lt;strong&gt;but it was not officially released&lt;/strong&gt; (according to Microsoft) &lt;strong&gt;due to lack of time&lt;/strong&gt;, but it seems that they are convinced that &lt;strong&gt;in C# 11 it will be released&lt;/strong&gt; and we will be able to use it with enthusiasm.&lt;/p&gt;

&lt;p&gt;To understand the Field Keyword, I will use the explanation of &lt;a href="https://github.com/lachbaer"&gt;Lachbaer&lt;/a&gt;, the creator of this &lt;a href="https://github.com/dotnet/csharplang/issues/140"&gt;proposal&lt;/a&gt;, as it seemed to me to be the best way to understand the Field Keyword:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Create auto-properties that can also have getters and setters. These can access the automatically created backing field with the &lt;code&gt;field&lt;/code&gt; keyword, that acts like a variable, as value does for properties."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Below, &lt;strong&gt;Lachbaer&lt;/strong&gt; explains how this feature works with a very simple example:&lt;/p&gt;

&lt;p&gt;A semi-auto-property with an automatic backing-field is created under the follwing cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;there must be either a &lt;code&gt;get;&lt;/code&gt; or &lt;code&gt;set;&lt;/code&gt; statement,&lt;/li&gt;
&lt;li&gt;the property has an initializer&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#constraint"&gt;
  &lt;/a&gt;
  Constraint
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;PropertyConstraint&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentNullException&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The setter defines a constraint. &lt;code&gt;field&lt;/code&gt; represents the automatically created backing field. As possible with auto-properties, the backing field is initialized by &lt;code&gt;= ""&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getter-logic"&gt;
  &lt;/a&gt;
  Getter logic
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;PropertyAssertedGet&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;getCounter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// property scoped field #133&lt;/span&gt;
    &lt;span class="k"&gt;get&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;getCounter&lt;/span&gt;&lt;span class="p"&gt;++;&lt;/span&gt;
        &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getCounter&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s"&gt;"In my code this prop is only called 3 times, somethings terribly wrong."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#event-raising"&gt;
  &lt;/a&gt;
  Event raising
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;PropertyEvent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;oldValue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nf"&gt;OnPropertyChanging&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;PropertyChangingEventArgs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* current value */&lt;/span&gt; &lt;span class="n"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* new value */&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nf"&gt;OnPropertyChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;PropertyChangedEventArgs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* current value */&lt;/span&gt; &lt;span class="n"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="cm"&gt;/* new value */&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my opinion &lt;strong&gt;it is one of the most promising features and the most awaited by all developers in C# 10&lt;/strong&gt;. It is not known exactly when it will be officially released but we will follow it closely.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#list-patterns"&gt;
  &lt;/a&gt;
  List patterns
&lt;/h2&gt;

&lt;p&gt;Let's take a look at Microsoft's textual words on why this feature has not been released in C# 10:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"We have a syntactic design and semantic design for arrays and indexable types, but we will need to some more work for IEnumerable support. We hope to have an initial preview soon into the C# 11 development cycle to help get user feedback on the design choices we've made so far."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;¯\&lt;em&gt;( ͡° ͜ʖ ͡°)&lt;/em&gt;/¯&lt;/p&gt;

&lt;p&gt;List Patterns is a feature suggested by &lt;a href="https://github.com/alrz"&gt;Alrz&lt;/a&gt; and is detailed in this way: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Lets you to match an array or a list with a sequence of patterns e.g. array is {1, 2, 3} will match an integer array of the length three with 1, 2, 3 as its elements, respectively."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To understand this better, let's look at part of the example he used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;positional_pattern&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;positional_pattern_clause&lt;/span&gt; &lt;span class="n"&gt;length_pattern_clause&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;property_or_list_pattern_clause&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;simple_designation&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
  &lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;property_or_list_pattern_clause&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;list_pattern_clause&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;property_pattern_clause&lt;/span&gt;
  &lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;property_pattern_clause&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sc"&gt;'{'&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;subpattern&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;','&lt;/span&gt; &lt;span class="n"&gt;subpattern&lt;/span&gt;&lt;span class="p"&gt;)*&lt;/span&gt; &lt;span class="sc"&gt;','&lt;/span&gt;&lt;span class="p"&gt;?)?&lt;/span&gt; &lt;span class="sc"&gt;'}'&lt;/span&gt;
  &lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;list_pattern_clause&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sc"&gt;'{'&lt;/span&gt; &lt;span class="nf"&gt;pattern&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;','&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)*&lt;/span&gt; &lt;span class="sc"&gt;','&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="sc"&gt;'}'&lt;/span&gt;
  &lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the complete example and more information in the &lt;a href="https://github.com/alrz/csharplang/blob/list-patterns/proposals/list-patterns.md"&gt;List Patterns proposal on GitHub.&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#static-abstracts-in-interfaces"&gt;
  &lt;/a&gt;
  Static abstracts in interfaces
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href="https://github.com/MadsTorgersen"&gt;MadsTorgersen &lt;/a&gt;(the contributor to this proposal) specifying abstract static members in an interface &lt;strong&gt;obligates the classes and structs that implement the interface to include those members&lt;/strong&gt;, either explicitly or implicitly, in their implementations of the interface in question. It is possible to get access to the members by specifying type parameters that are not prohibited by the interface's restrictions.&lt;/p&gt;

&lt;p&gt;The inability to abstract over static members and build generic code that works across types that specify those static members &lt;strong&gt;is a major limitation of the present state of the art&lt;/strong&gt;. This is especially troublesome for member types that only exist in a static form, such as operators, which are particularly difficult to deal with.&lt;/p&gt;

&lt;p&gt;Static abstracts in interfaces &lt;strong&gt;allows generic algorithms over numeric types to be implemented&lt;/strong&gt;, which are represented by interface constraints that indicate the existence of certain operators. As a result, the algorithms may be stated in terms of the following operators:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Interface specifies static properties and operators&lt;/span&gt;
&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;IAddable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IAddable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;Zero&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="p"&gt;+(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Classes and structs (including built-ins) can implement interface&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Int32&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IAddable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Int32&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// Explicit&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Int32&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="p"&gt;+(&lt;/span&gt;&lt;span class="n"&gt;Int32&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Int32&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="c1"&gt;// Implicit&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Zero&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                          
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Generic algorithms can use static members on T&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;AddAll&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IAddable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// Call static operator    &lt;/span&gt;
    &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Use `+`                   &lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Generic method can be applied to built-in and user-defined types&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sixtyThree&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;AddAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the complete example and more information in the &lt;a href="https://github.com/dotnet/csharplang/issues/4436"&gt;Static abstracts in interfaces &lt;strong&gt;proposal on GitHub.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MadsTorgesen&lt;/strong&gt; has also proposed a couple of alternatives, such as &lt;strong&gt;Structural constraint:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"An alternative approach would be to have "structural constraints" directly and explicitly requiring the presence of specific operators on a type parameter. The drawbacks of that are:"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This would have to be written out every time. Having a named constraint seems better.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is a whole new kind of constraint, whereas the proposed feature utilizes the existing concept of interface constraints.&lt;br&gt;
It would only work for operators, not (easily) other kinds of static members.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#declarations-under-or%C2%A0patterns"&gt;
  &lt;/a&gt;
  Declarations under or patterns
&lt;/h2&gt;

&lt;p&gt;This is a feature suggested again by &lt;a href="https://github.com/alrz"&gt;Alrz&lt;/a&gt; and is detailed in this way:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Allow pattern variables to be declared in different mutually exclusive patterns. This is the part of &lt;a href="https://github.com/dotnet/csharplang/blob/main/proposals/csharp-9.0/patterns3.md"&gt;pattern-matching proposal&lt;/a&gt; that did not make it into C# 9.0."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If each mutually exclusive pattern creates a different set of variables with different types, then &lt;strong&gt;the variables will not be firmly assigned in that specific code path&lt;/strong&gt;, which is what is desired. This contains the or patterns, as well as each occurrence of a switch section, among other things.&lt;/p&gt;

&lt;p&gt;A pattern variable may be definitively assigned in a &lt;code&gt;when&lt;/code&gt; clause but not in the body of a switch section, for example, as a result of this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="nf"&gt;Use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;// ok&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="nf"&gt;Use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;// ok&lt;/span&gt;
     &lt;span class="nf"&gt;Use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ok&lt;/span&gt;
     &lt;span class="nf"&gt;Use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// error; not definitely assigned&lt;/span&gt;
     &lt;span class="nf"&gt;Use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// error; not definitely assigned&lt;/span&gt;
     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pattern variables may be defined on both sides of the equation in a recursive way by multiplying them together as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;Use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, I recommend reading the &lt;a href="https://github.com/dotnet/csharplang/issues/4018"&gt;&lt;strong&gt;Declarations Under or Patterns Proposal&lt;/strong&gt;&lt;/a&gt; in depth on GitHub if you want to know it perfectly.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#when-will-c-11-be-released"&gt;
  &lt;/a&gt;
  When will C# 11 be released?
&lt;/h2&gt;

&lt;p&gt;C# 11 at Christmas? I think it will simply be a dream that may come true &lt;strong&gt;(it is not the first time that Microsoft works in silence)&lt;/strong&gt;, although seeing all the features that were released in C# 10, it looks unlikely. Anyway, &lt;strong&gt;we'll find out in the next few days.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What about you? My dear reader? What do you think will happen with C# 11? Let me know! I would like to know your opinion too :)&lt;/p&gt;

&lt;p&gt;If you liked this article, don't forget to FOLLOW US, so that you can be one of the first to read what's new in .NET.&lt;/p&gt;

&lt;p&gt;And if you are reading this, it means that you belong to the &lt;strong&gt;1% of the people&lt;/strong&gt; who read the articles UNTIL THE END, as Christmas and the New Year are approaching… tell me with gifts 🎁 how good 2021 has been for you.&lt;/p&gt;

&lt;p&gt;I hope you have a very merry Christmas! :) ⛄🎄&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ujyt1HxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vutuxw0zyoza6hzd47ih.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ujyt1HxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vutuxw0zyoza6hzd47ih.gif" alt="C sharp 11 " width="500" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>chsarp</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>8 Interesting Project Ideas for Web Developers</title>
      <author>Ayesha Sahar</author>
      <pubDate>Wed, 22 Dec 2021 11:32:30 +0000</pubDate>
      <link>https://dev.to/iayeshasahar/8-interesting-project-ideas-for-web-developers-4okd</link>
      <guid>https://dev.to/iayeshasahar/8-interesting-project-ideas-for-web-developers-4okd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Table of Contents&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#a"&gt;Survey Form&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#b"&gt;Countdown Timer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#c"&gt;Build a Drawing Tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#d"&gt;Browser Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#e"&gt;Social Buttons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#f"&gt;Product landing page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#g"&gt;Quiz game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#h"&gt;Tribute page&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Introduction&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Web development is the most promising and attractive field to work with for students and even professionals. Everyone looks forward to being a web developer and the best way to do that is to do the hands-on practice of developing the websites and projects. The more you practice, the better will your real-world development skills be.&lt;/p&gt;

&lt;p&gt;So, here's a list of 8 interesting project ideas for you guys to work on ;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-survey-form"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Survey Form&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This is a good project for a beginner in web development. You can make this survey form that asks the user for some information like Name, Age, email, mobile number, or some other information depending on requirements. Then connect it to a backend database to store the information. This is a full-stack development project. It would help you polish your HTML, CSS, JavaScript, and backend database management skills. But if you don't know backend yet, then you can make this project by just HTML and CSS too!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-countdown-timer"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Countdown Timer&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This is a very simple project. It is a virtual clock that counts down from a certain date to indicate the beginning or end of any event. This project is a webpage that basically has to update the time every second. The main aim is to show a continuously decrementing display of the days, hours, minutes, and seconds to a particular date or time. JS can be used for this project. If you want to improve this project, then add features like add, start or stop buttons, display an alert when selected time is reached, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-build-a-drawing-tool"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Build a Drawing Tool&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I think eveyone has used MS-Paint to create some awesome artwork as a child. Guess what? You can create an online canvas to do the same! HTML, CSS, and JS can be used to build this app. Drawing can be done using the mouse. Features of this project are- change color, erase, change the size of the drawing tool, reset/clear the canvas. Another good feature would be to allow your users to share their work on social media or save their work in any image format.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-browser-extensions"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Browser Extensions&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;All of us have been using at least some browser extensions for a long time. But did you know that the browser extensions are made using JavaScript? This project will test your skills and understanding of JavaScript. Extensions can be made to make your day-to-day tasks easier and well organized. You can make a to-do app extension so you can directly see your list of things to do from your browser without opening another app. Make any extension you want and host them on the Chrome or Mozilla web store!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-social-buttons"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. Social Buttons&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Every website has social media share buttons for sharing content with others via social media platforms. Creating websites that have share buttons is a challenging project for any developer. You have to make a dynamic page by using JavaScript coding which includes the social media share button. We can also use HTML for adding images to create a better effective template for the website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-product-landing-page"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. Product landing page&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;For this project, you must have good knowledge of HTML and CSS. You'll have to create columns and then align the components of the landing page within the columns. There would be basic editing tasks like cropping and resizing images, using design templates to make the layout more appealing, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-quiz-game"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. Quiz game&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;It is a JavaScript quiz game that can take multiple answers and show the correct result to users. Applying JavaScript knowledge in real-world scenarios is usually much more challenging than gaining it. While building this project, you will deal with complex logic and learn a lot about data management and DOM manipulation. You can make the game simple or complicated depending on your JavaScript skills and ability to handle complex logic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-tribute-page"&gt;
  &lt;/a&gt;
  &lt;strong&gt;8. Tribute page&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;For reference, Google the term “tribute page,”  and you will definitely find a comprehensive list of links showing you how to build tribute pages. Basically, it is a webpage dedicated in honor of someone you love, admire, or respect. It can be made for anyone, whether a person or a beloved pet. This project is perfect for sharpening your HTML and CSS skills and knowledge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Gaining knowledge helps but it's still practicing and implementing this knowledge is what makes you a better developer. It's useless to be known as a developer if you just have knowledge but zero problem-solving skills. If you are a beginner or an intermediate web developer, then practice a lot by building various projects. They will help you become a good developer in this most demanding field. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's connect!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✨ &lt;a href="https://twitter.com/IAyeshaSahar"&gt;Twitter&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;✨ &lt;a href="https://github.com/AyeshaSahar"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
