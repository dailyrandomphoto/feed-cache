<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is MTTR (Mean Time To Repair)?</title>
      <author>Scott Lasica</author>
      <pubDate>Mon, 01 Nov 2021 22:52:06 +0000</pubDate>
      <link>https://dev.to/scottlasica/what-is-mttr-mean-time-to-repair-4l51</link>
      <guid>https://dev.to/scottlasica/what-is-mttr-mean-time-to-repair-4l51</guid>
      <description>&lt;p&gt;When using cloud-native services, you will undoubtedly have cloud incidents that disrupt the normal operation of your systems. No SRE team believes they can achieve 100% uptime. Instead, they plan ahead, trying to anticipate what could go wrong (or has in the past) and create runbooks (sometimes called pipelines or workflows) to get things back to normal as quickly as possible.&lt;/p&gt;

&lt;p&gt;MTTR is a metric used by SRE teams to help their team better understand how often incidents occur, and how quickly they are repaired. The first three letters are always seen as Mean Time To, but the R is interchanged between Repair, Respond, Resolve, Remediate, and Recover. MTTR can also sometimes be used in customer contracts, with consequences when exceeded. Keep in mind that MTTR represents a typical repair time, not guaranteed, so when reviewing a vendor’s MTTR know that some incidents will resolve more quickly, and others longer.&lt;/p&gt;

&lt;p&gt;MTTR is calculated differently by many organizations. The key is consistency within the organization, and that it’s a meaningful metric that can be used to help the SRE team improve their results (and reduce the MTTR). When you hear someone talk about MTTR, it’s always a good idea to get clarification to ensure you’re on the same page and your discussion makes sense.&lt;/p&gt;

&lt;p&gt;However calculated, a low MTTR is obviously a good thing and indicates either a robust and resilient set of services, a sharp and quick to respond team or both. MTTR can be measured in whatever units make sense (minutes, hours, days).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-contributes-to-mttr"&gt;
  &lt;/a&gt;
  What contributes to MTTR?
&lt;/h2&gt;

&lt;p&gt;A typical SRE workflow after an outage or disruption in the service is detected involves multiple steps that contribute to the end-to-end response time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DGFf0ma8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AotRs2UIFC9nAlhEijDBNrw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DGFf0ma8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AotRs2UIFC9nAlhEijDBNrw.png" alt="image" width="700" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First step is to troubleshoot to determine the root cause of the problem. ZK Research found that &lt;a href="https://zkresearch.com/blog/2016/10/sd-wan-can-make-network-management-impactful-to-the-business/"&gt;90% of the time spent in MTTR&lt;/a&gt; is spent identifying the source of the problem.&lt;/p&gt;

&lt;p&gt;When an incident occurs, the responder often has to first acknowledge the alert (unless you don’t have monitoring and alerts and you learn of outages from your users), then gather the appropriate system information, then find the runbook that should be used to start the repair. At this point you hope that the person following the runbook is using the right one, for the right environment, and has the right permissions to run it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-reduce-your-mttr"&gt;
  &lt;/a&gt;
  How do you reduce your MTTR?
&lt;/h2&gt;

&lt;p&gt;As you can see above, there are multiple steps involved in responding to an event that requires the SRE to interact with multiple services. SREs should continually look for repeatable processes they can automate, with code. By doing so they reduce human error, have a consistent approach to incident remediation regardless of who is handling it, and can in many cases greatly speed up the time to resolve, thereby reducing MTTR. Tying together monitoring, alerting, and data collection the SRE can have everything they need at their fingertips to make the call on next remediation steps. They can get even more advanced by having a slack channel spun up or a zoom meeting created adding the right people for the severity and type of issue that occurs.&lt;/p&gt;

&lt;p&gt;Fylamynt has created the world’s first enterprise ready low code platform for building, running and analyzing SRE cloud workflows. With Fylamynt an SRE can automate the parts of the runbook that are the most time consuming, allowing them to make decisions where their expertise is needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fylamynt.com/"&gt;Try Fylamynt for free -&amp;gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>A Comparison of SRE Workflow Tools</title>
      <author>Scott Lasica</author>
      <pubDate>Mon, 01 Nov 2021 22:48:34 +0000</pubDate>
      <link>https://dev.to/scottlasica/a-comparison-of-sre-workflow-tools-3ceo</link>
      <guid>https://dev.to/scottlasica/a-comparison-of-sre-workflow-tools-3ceo</guid>
      <description>&lt;p&gt;When considering tools to help optimize parts or all of your cloud incident remediation workflows and runbooks, there are several factors to take into consideration. This article will break down several capabilities to successfully achieve good optimization, and will do a direct comparison between the companies leading the charge into this new and expanding area.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclosure: I work at Fylamynt, one of the offerings, but will keep the comparison to facts that can be known based on company web sites and information from customers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This article will compare several offerings in the market: Fylamynt, FireHydrant, Blameless, Rundeck and Transposit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrations"&gt;
  &lt;/a&gt;
  Integrations
&lt;/h2&gt;

&lt;p&gt;One of the first and most important factors to consider is how many third party integrations the platform has, and how easy they are to use. SREs have a plethora of options at their fingertips to handle monitoring, data collection, incident tracking, and many others.&lt;/p&gt;

&lt;p&gt;First, let’s take a raw look at what integrations the platforms support.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ayGtelkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/607/1%2Age5xZUzfaFSmU_DIFyqEbQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ayGtelkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/607/1%2Age5xZUzfaFSmU_DIFyqEbQ.png" alt="Table" width="607" height="1338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y — Only available on Advanced and Enterprise plans.&lt;br&gt;
Community — Not supported as an enterprise integration by Rundeck.&lt;/p&gt;

&lt;p&gt;Be careful to simply checkbox supported integrations. For example, both Fylamynt and Rundeck list Datadog logos on their integrations page, but not all integrations are created equal. Let’s break each offering down.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;FireHydrant:&lt;/em&gt; FireHydrant is an incident management system that helps engineers manage incidents by creating tickets, setting up Slack and Zoom channels as required. However, it lacks incident response features that help engineers remediate the problems.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Blameless:&lt;/em&gt; Blameless is a post-mortem tool that’s typically used after an incident happened and resolved to understand what happened during the incident resolution. The tool shows a timeline view of what happened, but doesn’t help in resolving the problem itself.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Rundeck:&lt;/em&gt; Rundeck (acquired by PagerDuty) was a tool that was founded in 2010, and was originally targeted towards running multiple scripts (e.g. bash, Python) together in a single pipeline. It’s a tool that’s typically run by an engineer using a CLI. Rundeck lacks integrations with cloud-native SaaS services and API-driven, event-triggered automation that’s more common in today’s incident response workflows.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Transposit:&lt;/em&gt; Transposit has changed their message over time from being a ServiceNow kind of platform for IT to helping SREs resolve incidents. It’s unclear what exact features they support in their tool. They claim to help with responding to alerts, unclear how they differ from showing a timeline view or resolving the incident itself.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fylamynt:&lt;/em&gt; Fylamynt provides a no code / low code drag and drop editor for all of their supported integrations. Within minutes you can drag your favorite tool or service into the editor, wire it to another and in the GUI make small configuration changes. Fylamynt has simplified the use of all the product and service APIs allowing engineers to wire them up in no time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-workflows"&gt;
  &lt;/a&gt;
  Building The Workflows
&lt;/h2&gt;

&lt;p&gt;Creating your workflows/runbooks in the past has typically been writing some code to your tool APIs, creating your own branches and customizations. While in many cases this works and in fact can even get quite complex, there are several potential issues.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Error prone — humans make mistakes (just look at the Facebook outage)&lt;/li&gt;
&lt;li&gt;Time consuming — looking up all the APIs, writing the code, testing all of the connections&lt;/li&gt;
&lt;li&gt;Maintenance — APIs and capabilities change, as well as how you want your runbooks to behave&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Considering the above issues, providing a quick and error free way to build your workflows/runbooks is ideal. Fylamynt has a no code / low code drag and drop builder that includes all of the integrations they support. Engineers can drag nodes to the editor, wire them up and with minor conifg changes in the UI they’re ready to go. You can add more complex things like conditional branches, custom code and input/output transformation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitations"&gt;
  &lt;/a&gt;
  Limitations
&lt;/h2&gt;

&lt;p&gt;When looking at solution limitations, it’s helpful to consider a few fundamental pillars needed to effectively reduce cloud incident remediation time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#collaboration"&gt;
  &lt;/a&gt;
  Collaboration
&lt;/h3&gt;

&lt;p&gt;Rarely is it solely up to a single individual to respond to, solve and report on incidents. When incidents are serious and need to be escalated, or require the expertise of a subject matter expert with knowledge beyond that of the on call engineer, collaboration needs to happen. Having the ability to spin up a slack channel or a zoom — quickly and dropped right in front of the pre-defined set of people that need to be there is a huge time saver. You can see in the feature chart above that many of the platforms do not have this ability.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automation"&gt;
  &lt;/a&gt;
  Automation
&lt;/h3&gt;

&lt;p&gt;Any adequate solution must be able to automate portions of the remediation process. At a minimum assembling the relevant data to put in front of an SRE is required. If not, countless time will be wasted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#orchestration"&gt;
  &lt;/a&gt;
  Orchestration
&lt;/h3&gt;

&lt;p&gt;Being able to quickly and easily build and modify workflows/runbooks, with the ability to easily integrate your tools is critical. The difference between dragging and dropping your steps together vs. writing custom code that could have errors, not scale, and not restrict permissions is quite large.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case-management"&gt;
  &lt;/a&gt;
  Case Management
&lt;/h3&gt;

&lt;p&gt;Having the ability to see your incidents in a dashboard, with the steps that have been taken, success/failure and the time things have taken is very important. In Fylamynt we call these tasks, and within the dashboard you can see all of the workflow executions, state and time each took. Having this realtime view into the state of incidents is critical.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#human-in-the-loop"&gt;
  &lt;/a&gt;
  Human In The Loop
&lt;/h3&gt;

&lt;p&gt;Fully automating your workflow/runbook might sound amazing. Imagine never being woken up when something breaks in the middle of the night. However, many people get wary of full automation, especially when you have actions like taking down services or VMs. To help this, all of the solutions allow you to put a human in the loop which means the runbook will pause and wait for human decision. Much of the data gathering can be automated ahead of time so everything the SRE needs to make that decision is at their fingertips.&lt;/p&gt;

&lt;p&gt;With Fylamynt you can add human approval into your workflow with a Slack message or email.&lt;/p&gt;

&lt;p&gt;Fylamynt has created the world’s first enterprise ready low code platform for building, running and analyzing SRE cloud workflows. With Fylamynt an SRE can automate the parts of the runbook that are the most time consuming, allowing them to make decisions where their expertise is needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fylamynt.com/"&gt;Try Fylamynt for free -&amp;gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sre</category>
      <category>devops</category>
      <category>cloudnative</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>Can I Automate Away SRE Roles?</title>
      <author>Scott Lasica</author>
      <pubDate>Mon, 01 Nov 2021 22:40:53 +0000</pubDate>
      <link>https://dev.to/scottlasica/can-i-automate-away-sre-roles-28k4</link>
      <guid>https://dev.to/scottlasica/can-i-automate-away-sre-roles-28k4</guid>
      <description>&lt;p&gt;The word automation brings some strong emotions to the surface for many. It could elicit joy from automating mundane tasks, but it can also create fear and mistrust. There has been extensive history and research on automation being brought into many industries.&lt;/p&gt;

&lt;p&gt;I’ll start in 1811 England. There was a new invention called a &lt;a href="https://en.wikipedia.org/wiki/Power_loom"&gt;loom&lt;/a&gt;, allowing lower skilled laborers to operate and produce lower quality products that ruined the artisans’ reputation for quality. The name Luddites was coined, and this group of people went on to physically smash looms eventually causing Parliament to make frame-breaking a hanging offense. The industrial revolution continued in spite of the Luddites and a whole new role was born: the factory worker, which exploded in numbers creating many more jobs than those that were displaced.&lt;/p&gt;

&lt;p&gt;Let’s jump ahead to more modern automation. Computers brought amazing automation to just about every industry on the planet. Think of the efficiencies brought to accounting, manufacturing, media and many, many more. Taking a look at the &lt;a href="https://data.bls.gov/timeseries/LNS14000000?amp%253bdata_tool=XGtable&amp;amp;output_view=data&amp;amp;include_graphs=true"&gt;US Bureau of Labor Statistics data&lt;/a&gt; (dating back to 1980), employment levels tracked very closely with major events, dipping for things like the housing crisis and climbing during times like the dot-com bubble. They do not seem to coordinate with large shifts in technology. In fact, we are currently experiencing a &lt;a href="https://www.cnbc.com/2021/10/20/global-shortage-of-workers-whats-going-on-experts-explain.html"&gt;worldwide labor shortage&lt;/a&gt; as new advancements in AI and other technologies “threaten” to take over jobs. The Economic Policy Institute &lt;a href="https://www.epi.org/publication/the-zombie-robot-argument-lurches-on-there-is-no-evidence-that-automation-leads-to-joblessness-or-inequality/"&gt;posted&lt;/a&gt; in 2017 that there is no evidence that automation leads to joblessness or inequality.&lt;/p&gt;

&lt;p&gt;Every industry, every role faces some type of automation “intrusion” at some point. The role of a Site Reliability Engineer (SRE) is no different. Just as an SRE wouldn’t consider the best way to learn of an outage is when customers start complaining, an SRE also wouldn’t want to shy away from automation where it makes sense. Part of an SREs duties are to create automation for cloud-native systems in order to reduce MTTR and create organization wide optimization.&lt;/p&gt;

&lt;p&gt;So can we automate all the SRE duties and eliminate the role? Far from it. Google posted a great article on &lt;a href="https://sre.google/sre-book/automation-at-google/"&gt;SRE automation&lt;/a&gt;, how they thought they were automating themselves out of jobs when in fact it turned out to free up time to focus on things that could help the business instead of constant tedious tasks or firefighting.&lt;/p&gt;

&lt;p&gt;Don’t be a Luddite.&lt;/p&gt;

&lt;p&gt;Fylamynt has created the world’s first enterprise ready low code platform for building, running and analyzing SRE cloud workflows. With Fylamynt an SRE can automate the parts of the runbook that are the most time consuming, allowing them to make decisions where their expertise is needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fylamynt.com/"&gt;Try Fylamynt for free -&amp;gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sre</category>
      <category>devops</category>
      <category>cloudnative</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>What is SRE (Site Reliability Engineering)?</title>
      <author>Scott Lasica</author>
      <pubDate>Mon, 01 Nov 2021 22:37:32 +0000</pubDate>
      <link>https://dev.to/scottlasica/what-is-sre-site-reliability-engineering-243g</link>
      <guid>https://dev.to/scottlasica/what-is-sre-site-reliability-engineering-243g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Site reliability engineering &lt;a href="https://sre.google/"&gt;(SRE)&lt;/a&gt; is a software engineering (developer) approach to IT operations (ops). SRE teams manage systems, handle scale, firefight incidents/problems and automate some operational tasks.&lt;/p&gt;

&lt;p&gt;SRE was coined by the Google engineering team, when they realized that the duties and responsibilities required had &lt;a href="https://www.fylamynt.com/post/sre-vs-devops"&gt;deviated significantly&lt;/a&gt; from traditional IT/DevOps. One of the key differences is the use of code to help solve problems within cloud-native systems and infrastructure.&lt;/p&gt;

&lt;p&gt;Any system that requires high availability and/or scalability needs SRE as a dedicated practice.&lt;/p&gt;

&lt;p&gt;SRE can also stand for site reliability engineer, which are the individuals who handle site reliability engineering. SREs perform many tasks and are focused on the production cloud environment. Some of the common tasks an SRE will perform are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scaling the system&lt;/li&gt;
&lt;li&gt;Optimizing cloud spend&lt;/li&gt;
&lt;li&gt;Remediating incidents (when things break)&lt;/li&gt;
&lt;li&gt;Automation&lt;/li&gt;
&lt;li&gt;Standardization&lt;/li&gt;
&lt;li&gt;Patching and upgrades&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SREs will often write custom code (software) to link systems together, and will create workflows (often called runbooks) to help automate parts or all of the cloud system needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-an-sre-do"&gt;
  &lt;/a&gt;
  What does an SRE do?
&lt;/h2&gt;

&lt;p&gt;At a high level an SRE is responsible for ensuring the systems run 24/7 and can handle scale as needed. To achieve this requires a lot of tools and expertise, not to mention often times having to “carry the pager” and handle incidents any time of the day or night.&lt;/p&gt;

&lt;p&gt;Historically SREs came from the software development or sysadmin worlds and became a bit of a hybrid of the two. There are several areas that SREs are responsible for.&lt;br&gt;
Deployment — How code is deployed into the production environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Monitoring&lt;/strong&gt; — Using systems to monitor proper operations.&lt;br&gt;
&lt;strong&gt;Alerting&lt;/strong&gt; — Using tools to alert the appropriate people when systems aren’t functioning properly (or are at risk of not functioning properly).&lt;br&gt;
&lt;strong&gt;Configuration&lt;/strong&gt; — Configuring systems appropriately for optimal performance or cost reduction.&lt;br&gt;
&lt;strong&gt;Performance&lt;/strong&gt; — Keeping latency of systems within acceptable limits.&lt;br&gt;
&lt;strong&gt;Change management&lt;/strong&gt; — Keeping track of changes in systems both as a historical record but also in many cases to comply with industry standards and certifications&lt;br&gt;
&lt;strong&gt;Emergency response&lt;/strong&gt; — Quickly reacting to and mitigating cloud incidents as they happen&lt;br&gt;
&lt;strong&gt;Optimization&lt;/strong&gt; — Optimizing systems, often with automation, to reduce &lt;a href="https://en.wikipedia.org/wiki/Mean_time_to_repair"&gt;MTTR&lt;/a&gt; (Mean Time To Recovery/Repair/Resolution) — when things break, fix them as quickly as possible.&lt;/p&gt;

&lt;p&gt;One of the primary outputs from an SRE are called runbooks or workflows. There are many situations that happen repeatedly, so it of course makes sense to create a repeatable process to handle these situations. Tying steps together in an automated way is how SREs optimize their processes. Common workflows will deal with things like cost optimization or incident remediation. For example, an SRE might create a workflow that runs on a daily basis for cost optimization (autoscaling). A simplified workflow for this could have the following steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check instance utilization&lt;/li&gt;
&lt;li&gt;If usage has remained under 50% for the last 24 hours reduce instance size&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conversely, an SRE might create a workflow for replacing a bad EC2 instance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alert from AWS Health&lt;/li&gt;
&lt;li&gt;Spin up new instance&lt;/li&gt;
&lt;li&gt;Reroute traffic&lt;/li&gt;
&lt;li&gt;Kill old instance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These very simplified workflows will have several steps in them, with conditional branches and could even have what’s being called a “human in the loop”, which is a defined pause point in the workflow to allow a human to verify the situation and authorize appropriate actions.&lt;/p&gt;

&lt;p&gt;SREs look for repeatable processes and then try to automate as much of those as they can to both simplify their job, but also to maintain as high availability as possible. No SRE team expects systems to have 100% uptime, but they plan for incidents and create processes to address them quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sre-tools"&gt;
  &lt;/a&gt;
  SRE Tools
&lt;/h2&gt;

&lt;p&gt;There are many categories of tools that SREs use to effectively maintain cloud operations. The tools range from monitoring, logging, alerting, incident management, orchestration, and workflow automation and execution.&lt;/p&gt;

&lt;p&gt;Fylamynt has created the world’s first enterprise ready low code platform for building, running and analyzing SRE cloud workflows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fylamynt.com/"&gt;Try Fylamynt for free -&amp;gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sre</category>
      <category>devops</category>
      <category>cloudnative</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>SRE vs DevOps</title>
      <author>OpsBecca</author>
      <pubDate>Mon, 01 Nov 2021 22:17:38 +0000</pubDate>
      <link>https://dev.to/opsbecca/sre-vs-devops-1nol</link>
      <guid>https://dev.to/opsbecca/sre-vs-devops-1nol</guid>
      <description>&lt;p&gt;We often hear SRE and DevOps interchangeably used to describe operational activities done by engineers for applications running in private or public cloud environments. What’s the difference?&lt;/p&gt;

&lt;p&gt;From Wikipedia&lt;br&gt;
“DevOps is a set of practices that combines software development (Dev) and IT operations (Ops).”&lt;br&gt;
“Site reliability engineering (SRE) is a set of principles and practices[1] that incorporates aspects of software engineering and applies them to infrastructure and operations problems.[2]&lt;br&gt;
DevOps was coined by Patrick Debois in 2009 to describe the culture of having developers and operations engineers work together. There was a constant conflict between developers who build the software and IT operations teams that manage the day to day operations of the software. It was often referred to as developers throwing software “over the wall” to operations.&lt;/p&gt;

&lt;p&gt;DevOps brought a change to this culture that brings the responsibility of building and running software to both dev and ops, with increasing collaboration and shared responsibility across various aspects of software development life cycle (code, build, test, deploy and management)&lt;br&gt;
“DevOps is not a process or a technology. It’s a philosophy or culture of having developers and operations work together to achieve the common goal of running software to achieve high performance and high availability.”&lt;/p&gt;

&lt;p&gt;The field of site reliability engineering (SRE) originated at Google with Ben Treynor Sloss, who founded a site reliability team after joining the company in 2003. The Google SRE books have formalized many of the ideas that are developed in these site reliability teams since then.&lt;/p&gt;

&lt;p&gt;Unlike DevOps, SRE is both a job function and a set of principles that are followed by a team to achieve high reliability for software services offered by a company to its customers. SRE also brought engineering principles of writing “infrastructure-as-code”, testing and deploying operational software similar to how product services are developed.&lt;br&gt;
“SREs are software engineers doing operational work!”&lt;br&gt;
Though SRE predates DevOps, it’s an implementation of DevOps principles in a specific manner. Automation plays an important role in SRE.&lt;/p&gt;

&lt;p&gt;For an in-depth explanation of “What’s SRE”, check out our other blog on &lt;a href="http://www.Fylamynt.com"&gt;www.Fylamynt.com&lt;/a&gt;&lt;br&gt;
Fylamynt is an SRE platform that helps SREs build and run automation workflows.&lt;/p&gt;

</description>
      <category>sre</category>
      <category>devops</category>
    </item>
    <item>
      <title>Can We Create a "Resize Hack" With Container Queries?</title>
      <author>Jhey Tompkins</author>
      <pubDate>Mon, 01 Nov 2021 22:17:05 +0000</pubDate>
      <link>https://dev.to/jh3y/can-we-create-a-resize-hack-with-container-queries-3pe0</link>
      <guid>https://dev.to/jh3y/can-we-create-a-resize-hack-with-container-queries-3pe0</guid>
      <description>&lt;p&gt;If you follow new developments in CSS, you've likely heard of the impending arrival of &lt;strong&gt;container queries&lt;/strong&gt;. We’re going to look at the basics here, but if you’d like another look, check out Una’s &lt;a href="https://css-tricks.com/next-gen-css-container/"&gt;"Next Gen CSS: @container”&lt;/a&gt; article. After we have a poke at the basics ourselves, we’re going to build something super fun with them: a fresh take on the classic CSS meme featuring Peter Griffin fussing with window blinds. ;)&lt;/p&gt;

&lt;p&gt;So, what is a container query? It's… exactly that. Much like we have media queries for querying things such as the viewport size, a container query allows us to query the size of a container. Based on that, we can then apply different styles to the children of said container.&lt;/p&gt;

&lt;p&gt;What does it look like? Well, the exact standards are being worked out. Currently, though, it’s something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* Or... */&lt;/span&gt;
  &lt;span class="py"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="n"&gt;inline-size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@container&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;hotpink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; keyword turns on &lt;code&gt;layout-containment&lt;/code&gt; for an element. &lt;code&gt;inline-size&lt;/code&gt; allows users to be more specific about containment. This currently means we can only query the container’s &lt;code&gt;width&lt;/code&gt;. With &lt;code&gt;size&lt;/code&gt;, we are able to query the container’s &lt;code&gt;height&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Again, we things could still change. At the time of writing, the only way to use container queries (without a &lt;a href="https://github.com/jsxtools/cqfill"&gt;polyfill&lt;/a&gt;) is behind a flag in Chrome Canary (&lt;code&gt;chrome://flags&lt;/code&gt;). I would definitely recommend having a quick read through the drafts over on &lt;a href="https://drafts.csswg.org/css-contain/#valdef-contain-layout"&gt;csswg.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The easiest way to start playing would be to whip up a quick demo that sports a resizable container element.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/poeyxba?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/zYZKEyM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Try changing the &lt;code&gt;contain&lt;/code&gt; values (in Chrome Canary) and see how the demo responds. This demo uses &lt;code&gt;contain: layout size&lt;/code&gt; which doesn’t restrict the axis. When both the &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; of the container meet certain thresholds, the shirt sizing adjusts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@container&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.t-shirt__container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"L"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--scale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s what you need to know to about container queries for now. It's really just a few new lines of CSS.&lt;/p&gt;

&lt;p&gt;The only thing is: most demos for container queries I’ve seen so far use a pretty standard "card" example to demonstrate the concept. Don't get me wrong, because cards are a great use case for container queries. A card component is practically the poster child of container queries. Consider a generic card design and how it could get affected when used in different layouts. This is a common problem. Many of us have worked on projects where we wind up making various card variations, all catering to the different layouts that use them.&lt;/p&gt;

&lt;p&gt;But cards don't inspire much to start playing with container queries. I want to see them pushed to greater limits to do interesting things. I've played with them a little in that t-shirt sizing demo. And I was going to wait until there was better browser support until I started digging in further (I'm a &lt;a href="https://brave.com/"&gt;Brave&lt;/a&gt; user currently). But then &lt;a href="https://twitter.com/bramus"&gt;Bramus&lt;/a&gt; shared there was a container query polyfill!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qCBr4mr---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1419673582188249089/kpp3If6j_normal.jpg" alt="Jhey 🐻🛠 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jhey 🐻🛠
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jh3yy
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Shout out to &lt;a href="https://twitter.com/bramus"&gt;@bramus&lt;/a&gt; for sharing the Container Queries polyfill by &lt;a href="https://twitter.com/jon_neal"&gt;@jon_neal&lt;/a&gt; the other day 👏&lt;br&gt;&lt;br&gt;This prompted me to get "hacking"! 😅&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/Em5TLyslip"&gt;twitter.com/bramusblog/sta…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:22 PM - 30 Apr 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Bram.us
          &lt;/span&gt;
          @bramusblog
        &lt;/div&gt;
        A first look at CQFill, a Polyfill for CSS Container Queries (by @jon_neal)

🔗 https://t.co/koWPzUccMk 

🏷 #ContainerQueries #css #polyfill https://t.co/jVxGdSMuzO
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1388257513657839617" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1388257513657839617" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1388257513657839617" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;And this got me thinking about ways to “hack” container queries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;⚠️ Spoiler alert&lt;/strong&gt; : My hack didn’t work. It did momentarily, or at least I thought it did. But, this was actually a blessing because it prompted more conversation around container queries.&lt;/p&gt;

&lt;p&gt;What was my idea? I wanted to create something sort of like the "&lt;a href="https://css-tricks.com/the-checkbox-hack/"&gt;Checkbox Hack&lt;/a&gt;" but for container queries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container__resizer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container__fixed-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The idea is that you could have a container with a resizable element inside it, and then another element that gets fixed positioning outside of the container. Resizing containers could trigger container queries and restyle the fixed elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container__resize&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vertical&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container__fixed-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.container__fixed-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try resizing the red box in this demo. It will change the color of the purple box.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/mdWyLBW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-we-debunk-a-classic-css-meme-with-container-queries"&gt;
  &lt;/a&gt;
  Can we debunk a classic CSS meme with container queries?
&lt;/h2&gt;

&lt;p&gt;Seeing this work excited me a bunch. Finally, an opportunity to create a version of the Peter Griffin CSS meme with CSS and debunk it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/yYSSBtDgbbRzq/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/yYSSBtDgbbRzq/giphy.gif" alt="Peter Griffin Blinds Meme" width="640" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You’ve probably seen the meme. It’s a knock on the Cascade and how difficult it is to manage it. I created the demo using &lt;code&gt;cqfill@0.5.0&lt;/code&gt;… with my own little touches, of course. 😅&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/LYxKjKX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Moving the cord handle, resizes an element which in turn affects the container size. Different container breakpoints would update a CSS variable, &lt;code&gt;--open&lt;/code&gt;, from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;, where &lt;code&gt;1&lt;/code&gt; is equal to an “open” and &lt;code&gt;0&lt;/code&gt; is equal to a “closed” state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@container&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;54px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.blinds__blinds&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;--css-container&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;54px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.blinds__blinds&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@container&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;58px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.blinds__blinds&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;--css-container&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;58px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.blinds__blinds&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@container&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;62px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.blinds__blinds&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;--css-container&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;62px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.blinds__blinds&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But…. as I mentioned, this hack isn’t possible.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--66CYnaCb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1433687120204337152/w4S8YTx__normal.jpg" alt="MiAAAAAAAh (is Terrifying) profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        MiAAAAAAAh (is Terrifying)
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @terriblemia
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/jh3yy"&gt;@jh3yy&lt;/a&gt; &lt;a href="https://twitter.com/CodePen"&gt;@CodePen&lt;/a&gt; Hmmm, containing inline-size shouldn't allow block (height) queries. You're likely hacking a bug in the js polyfill.&lt;br&gt;&lt;br&gt;I love the idea, but I don't think this approach will work using Container Queries in CSS.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      05:39 AM - 01 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1388367573448683523" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1388367573448683523" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1388367573448683523" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;What’s great here is that it prompted conversation around how container queries work. It also highlighted a bug with the container query polyfill which is now fixed. I would love to see this “hack” work though.&lt;/p&gt;

&lt;p&gt;Miriam Suzanne has been creating some fantastic content around container queries. The capabilities have been changing a bunch. That's the risk of living on the bleeding edge. One of &lt;a href="https://www.miriamsuzanne.com/2021/05/02/container-queries/"&gt;her latest articles&lt;/a&gt; sums up the current status.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--bP2aJYQY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1331240375265193986/on59ek6B_normal.jpg" alt="Jonathan Neal profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jonathan Neal
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jon_neal
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/jh3yy"&gt;@jh3yy&lt;/a&gt; &lt;a href="https://twitter.com/MiriSuzanne"&gt;@MiriSuzanne&lt;/a&gt; &lt;a href="https://twitter.com/CodePen"&gt;@CodePen&lt;/a&gt; I’ll get this fixed soon. Following the spec is CRITICAL.&lt;br&gt;&lt;br&gt;BTW, I’m kinda worried about how many videos &amp;amp; demos already rely on the "export" behavior. The yet-published code on main drops this requirement, so `import '/path/to/cqfill.js'` will be all that is needed.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      03:12 AM - 02 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1388692845658247181" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1388692845658247181" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1388692845658247181" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Although my original demo/hack didn't work, we can still kinda use a "resize" hack to create those blinds. Again, we can query &lt;code&gt;height&lt;/code&gt; if we use &lt;code&gt;contain: layout size&lt;/code&gt;. Side note: it’s interesting how we’re currently unable to use &lt;code&gt;contain&lt;/code&gt; to query a container’s height based on resizing its child elements.&lt;/p&gt;

&lt;p&gt;Anyway. Consider this demo:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/jOBEKZO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The arrow rotates as the container is resized. The trick here is to use a container query to update a scoped CSS custom property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.arrow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--rotate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.arrow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--rotate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've kinda got a container query trick here then. The drawback with not being able to use the first hack concept is that we can't go completely 3D. Overflow &lt;code&gt;hidden&lt;/code&gt; will stop that. We also need the cord to go beneath the window which means the windowsill would get in the way.&lt;/p&gt;

&lt;p&gt;But, we can almost get there.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/qBrEMEe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This demo uses a preprocessor to generate the container query steps. At each step, a scoped custom property gets updated. This reveals Peter and opens the blinds.&lt;/p&gt;

&lt;p&gt;The trick here is to scale up the container to make the resize handle bigger. Then I scale down the content to fit back where it's meant to.&lt;/p&gt;




&lt;p&gt;This fun demo “debunking the meme” isn’t 100% there yet, but, we’re getting closer. Container queries are an exciting prospect. And it’ll be interesting to see how they change as browser support evolves. It’ll also be exciting to see how people push the limits with them or use them in different ways.&lt;/p&gt;

&lt;p&gt;Who knows? The “resize hack” might fit in nicely alongside the infamous “checkbox hack” one day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stay Awesome! ʕ •ᴥ•ʔ&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Creating a flexible Backoffice Tool in a Technical Company using Slack</title>
      <author>Kuba Martin</author>
      <pubDate>Mon, 01 Nov 2021 22:13:29 +0000</pubDate>
      <link>https://dev.to/spacelift/creating-a-flexible-backoffice-tool-in-a-technical-company-using-slack-24jl</link>
      <guid>https://dev.to/spacelift/creating-a-flexible-backoffice-tool-in-a-technical-company-using-slack-24jl</guid>
      <description>&lt;p&gt;Working on a SaaS product you’ll occasionally have to take administrative actions to assist a user or help them debug an issue. Maybe something is misconfigured and they need a hand, or possibly they just want another week in their trial. If you’re using something like Django, then you get a nice built-in admin UI based on your model definition, and that’s it – you have a great tool at your disposal by default. Even though you still need to carefully design the access flow, as they otherwise commonly become attack vectors.&lt;/p&gt;

&lt;p&gt;If however you’re building a project in a custom way akin to “let’s combine many libraries and build exactly what we need” instead, then all you’ll have is the raw query language interface of your database – and that only if you’re lucky enough to have chosen a database which supports non-trivial querying.&lt;/p&gt;

&lt;p&gt;In the long run though, as most developers know, running SQL queries on prod isn’t really a scalable or secure approach and requires significant coordination, communication and supervision in order not to accidentally corrupt your data. You also have to limit access to a few select individuals and have to manage access to sensitive data.&lt;/p&gt;

&lt;p&gt;Moreover, you might have other dependencies than the SQL database. Then administering all the third-party services would require you to jump around various admin UIs, making everything even more complicated and error prone…&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-obvious%E2%84%A2-solution"&gt;
  &lt;/a&gt;
  The Obvious™ Solution
&lt;/h1&gt;

&lt;p&gt;There’s a whole class of tools tailored specifically to solving this use case – WYSIWYG back office tools. Using one of these tools you can easily create dialogs with SQL queries underneath and connect them directly to your database. Depending on the tool, it might even be usable by non-technical people.&lt;/p&gt;

&lt;p&gt;Unfortunately, these tools also bring a whole class of problems with them, mainly access management – both for people, and for the tool itself. You can use a cloud-based, managed tool, but then you have to give it arbitrary querying access to your internal production database. This usually makes sense, but is a security consideration that you have to take into account. You can also use self-hosted open source tools, but these come with their own set of trade-offs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You have to self-host them, costing you precious time.&lt;/li&gt;
&lt;li&gt;They need to have access to your production database, and people in your organization need to have access to them. So you either make them publicly accessible – and trust their security – or you make them internally accessible, and set up limited internal network access for everybody who needs to use them.&lt;/li&gt;
&lt;li&gt;Access-management in the tool itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other than that, one common disadvantage is that they’re &lt;strong&gt;yet another&lt;/strong&gt; tool you’ll have to use in your day-to-day work. They are also usually optimized for working with a SQL database, not additional third-party services.&lt;/p&gt;

&lt;p&gt;After comparing various solutions on both sides of the cloud/open-source divide, we’ve decided we didn’t like either set of trade-offs, which put a hold on the whole initiative for a while.&lt;/p&gt;

&lt;p&gt;Then we had an idea… What’s the most popular DevOps administration and management tool? Slack of course! I’m slightly joking, but the ChatOps trend’s significance cannot be denied. In this case, it did indeed look like it could solve all our problems.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-slack"&gt;
  &lt;/a&gt;
  Why Slack?
&lt;/h1&gt;

&lt;p&gt;Slack is great for a few reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It’s a textual interface – almost a terminal really – so you can transfer a lot of UX knowledge from your terminal experiences. Developers are always happy to use a text interface.&lt;/li&gt;
&lt;li&gt;You already manage access to Slack channels, so you can piggyback on top of that and only make your tool available in select channels. This way you don’t have to build additional access management for your tooling.&lt;/li&gt;
&lt;li&gt;If you design the UX well, it’s very easy to use for non-technical users.&lt;/li&gt;
&lt;li&gt;You automatically have a public audit log of all executed commands – the channel message history.&lt;/li&gt;
&lt;li&gt;You already use Slack.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It does have its disadvantages too:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When Slack is dead (which hasn’t been a rare occurrence in recent times), you can’t access your backoffice tool. But that’s ok, as long as you keep your most critical maintenance commands available through alternative access channels.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now for some Slack technicalities. For a project like this you can use slash commands or a slackbot. The gist of it is that slash commands are more structured, but also more limited. Slackbots on the other hand just interact with your channels like a normal user would, so the flexibility is limitless, but it requires more work on your side. In order to provide an experience that’s as user-friendly and magical as possible, we went with the slackbot approach.&lt;/p&gt;

&lt;p&gt;And thus the Backoffice Bot was born…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--76MGSohZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqsaol4vhsj38ohbztno.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--76MGSohZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqsaol4vhsj38ohbztno.png" alt="slackbot1" width="880" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#building-the-slackbot"&gt;
  &lt;/a&gt;
  Building the Slackbot
&lt;/h1&gt;

&lt;p&gt;Internally, we already had an event handling system in place for application events – i.e. GitHub push notifications. We actually even have a &lt;a href="https://docs.spacelift.io/integrations/slack"&gt;Slack integration&lt;/a&gt;, so there was ample opportunity for copy-paste driven development.&lt;/p&gt;

&lt;p&gt;In practice though, it’s pretty simple. There’s an AWS API Gateway endpoint to handle Slack webhooks, it puts events on an SQS queue and then a handler which has access to all relevant production systems takes care of handling each message and potentially responding to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gGFKEcBH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gtj9fbguinrlcm4yl68.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gGFKEcBH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gtj9fbguinrlcm4yl68.png" alt="slacbot2" width="880" height="147"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One more advantage of the slackbot using our existing event handling framework, is that we not only have access to our SQL database, we also have access to any third-party products we use, like various AWS offerings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-router-structure"&gt;
  &lt;/a&gt;
  The Router Structure
&lt;/h2&gt;

&lt;p&gt;All commands are registered with a message pattern, which is then converted into a regular expression with capture groups for the arguments. Here is an example code block specifying a command with its handler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  Command:     "set &amp;lt;subdomain&amp;gt; trial remaining to &amp;lt;number&amp;gt; days",
  Description: "Set account to be on an Enterprise trial for a specified number of days from now.",
  Channels:    []string{s.BackofficeChannelID},
  Handler: func(ctx *Context, event slackevents.EventsAPIInnerEvent, params map[string]string) error {
     ctx.sendSimpleResponse("Setting %s trial remaining to %s days.", params[“subdomain”], params[“number”])
     // ...
  },
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initially we planned to make it a sophisticated &lt;a href="https://en.wikipedia.org/wiki/Trie"&gt;trie&lt;/a&gt;-based router, but that’s just immensely more complex than going over a list of regular expressions and trying to match each. With this amount of traffic and number of commands there was simply no point in optimizing further.&lt;/p&gt;

&lt;p&gt;This way of adding commands is really simple and there’s a bonus – an automatically generated &lt;code&gt;@Backoffice Bot help&lt;/code&gt; message, which dynamically lists and describes all commands available in the current channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approval-flow"&gt;
  &lt;/a&gt;
  Approval Flow
&lt;/h2&gt;

&lt;p&gt;With processes like these, oftentime you want certain commands to require approval. We do this by using Slack reactions. &lt;/p&gt;

&lt;p&gt;The Slackbot will first detail what it would like to do (dry-run so to say), and then ask for approval. Approval is required from the caller, as well as a predefined number of other people, which depends on the “destructiveness” of the command at hand.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2HBBXezu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tvns13wnnfrce71ova8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2HBBXezu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9tvns13wnnfrce71ova8.png" alt="slackbot3" width="880" height="779"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order not to double-execute commands, we’re marking handled messages using a Slack reaction – this way we don’t have to use an external database. You can see this in the above picture with the Spacelift logo reaction on the root message.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#access-control"&gt;
  &lt;/a&gt;
  Access Control
&lt;/h2&gt;

&lt;p&gt;One additional requirement was that different commands are allowed to be executed by different people. In our case there are commands which are built for non-technical people, for example extending account trials; as well as commands built for technical people, for example displaying diagnostic information or cycling a worker pool’s workers.&lt;/p&gt;

&lt;p&gt;We achieve this by limiting the available commands based on the channel. We have a #backoffice channel for non-technical people and a #backoffice-developers channel for technical people. They are private, so we can limit access levels by inviting select people to relevant channels.&lt;/p&gt;

&lt;p&gt;The help message takes this into account, and only shows the commands available to you in the current channel.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-does-it-work-in-practice"&gt;
  &lt;/a&gt;
  How does it work in practice
&lt;/h1&gt;

&lt;p&gt;Everybody using our new Backoffice Bot has quickly fallen in love with it. Adding new commands follows the same process as getting standard product changes into production, which is familiar to all developers out of the box. There are no additional tools, workflows, or processes to maintain. We definitely recommend this approach if you ever find yourself having similar challenges to solve.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sETWLidr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e152tag4fykftvx4v0dh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sETWLidr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e152tag4fykftvx4v0dh.png" alt="slackbot4" width="570" height="570"&gt;&lt;/a&gt;&lt;br&gt;
(The original post was published at &lt;a href="https://spacelift.io/blog/flexible-backoffice-tool-using-slack"&gt;Spacelift&lt;/a&gt;)&lt;/p&gt;

</description>
      <category>slack</category>
      <category>bot</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Incident Response vs. Incident Managment</title>
      <author>Scott Lasica</author>
      <pubDate>Mon, 01 Nov 2021 20:59:45 +0000</pubDate>
      <link>https://dev.to/scottlasica/incident-response-vs-incident-managment-5036</link>
      <guid>https://dev.to/scottlasica/incident-response-vs-incident-managment-5036</guid>
      <description>&lt;p&gt;If you found your way to this post, it’s likely because you’re trying to determine what the difference is between incident response and incident management. You may be a new SRE, or switched companies and things aren’t being treated in the same way. The good news is you’ve come to the right place. The bad news is you won’t be leaving with a definitive answer.&lt;/p&gt;

&lt;p&gt;Incident response and incident management are defined differently by different organizations around the world. Doing a google on incident response vs incident management brings up an article from the &lt;a href="https://www.ncsc.gov.uk/collection/incident-management/incident-response"&gt;UK NCSC&lt;/a&gt;. In this article, they state:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Incident Management (IM) sits within and across any response process, ensuring all stages are handled. IM deals with any communications, media handling, escalations and any reporting issues, pulling the whole response together, coherently and holistically.&lt;/p&gt;

&lt;p&gt;Incident Response (IR) This includes triage, in-depth analysis, technical recovery actions and more.*&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above implies that IM is at a higher level, spanning the organization and defining the overall process for handling incidents, while IR defines the actual technical steps done to contain and resolve the issue.&lt;/p&gt;

&lt;p&gt;On the same first page google results, I found another definition from the &lt;a href="https://us-cert.cisa.gov/bsi/articles/best-practices/incident-management"&gt;US CISA&lt;/a&gt;. This definition states:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This process of identifying, analyzing, and determining an organizational response to computer security incidents is called incident management.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately this reads as the opposite of the prior definition, stating that IM encompasses the technical steps of identifying and analyzing the incident, as well as the “response” which implies the repair/remediation.&lt;/p&gt;

&lt;p&gt;Just another couple Google results down the page finds a post from &lt;a href="https://www.educause.edu/focus-areas-and-initiatives/policy-and-security/cybersecurity-program/resources/information-security-guide/incident-management-and-response"&gt;Educause&lt;/a&gt;. Here, they say they are the same thing:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Information security incident management programs (sometimes also called information security incident response programs)…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Irrespective of your definition, it’s important to define a clear incident response process with repeatable consistent steps to be followed in the case of an outage.&lt;/p&gt;

&lt;p&gt;Fylamynt can help with the world’s first enterprise ready low code platform for building, running and analyzing SRE cloud workflows. With Fylamynt an SRE can automate the parts of the runbook that are the most time consuming, allowing them to make decisions where their expertise is needed.&lt;/p&gt;

&lt;p&gt;For good practices around IR and IM, take a look at our article &lt;a href="https://www.fylamynt.com/post/what-is-a-runbook"&gt;What’s a Runbook?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fylamynt.com/"&gt;Try Fylamynt for free -&amp;gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sre</category>
      <category>devops</category>
      <category>cloudnative</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>A Beginner's Guide to Organizing Blade Templates in Laravel </title>
      <author>Kingsley Ubah</author>
      <pubDate>Mon, 01 Nov 2021 20:24:46 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/a-beginners-guide-to-organizing-blade-templates-in-laravel-2e3b</link>
      <guid>https://dev.to/ubahthebuilder/a-beginners-guide-to-organizing-blade-templates-in-laravel-2e3b</guid>
      <description>&lt;p&gt;Laravel is a PHP-based web framework which follows the Model-View-Controller (MVC) architecture. &lt;/p&gt;

&lt;p&gt;A core part of the MVC trilogy is &lt;strong&gt;View&lt;/strong&gt;. All of the UI markup which a user sees and interacts with on the web browser goes into the views folder, which automatically gets created when a Laravel project is initialized. &lt;/p&gt;

&lt;p&gt;The view can be built using blade templates. Blade is a  &lt;a href="https://laravel.com/docs/8.x/blade"&gt;templating language&lt;/a&gt;  which Laravel uses by default to create the HTML layout of the website.&lt;/p&gt;

&lt;p&gt;There are certain best practises to adhere to when building the markup for your full-stack website in Laravel. These are especially important to follow if you are building a site which comprises of many pages and UI functionalities.&lt;/p&gt;

&lt;p&gt;In this article, we are going to take a look at the several ways which we can structure our templates so that they are more clean, lean and readable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#organize-your-views-in-folders"&gt;
  &lt;/a&gt;
  Organize your views in folders
&lt;/h3&gt;

&lt;p&gt;A recommended approach is organizing views into folders. Using folders leads to a cleaner codebase, especially for big websites. For example, suppose you have a website with 5 main pages like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/faqs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/about&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/blog&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/contact&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of these pages might have other subpages. &lt;/p&gt;

&lt;p&gt;For example, the Blog page may have other subpages to &lt;strong&gt;create&lt;/strong&gt;, &lt;strong&gt;delete&lt;/strong&gt; and &lt;strong&gt;update&lt;/strong&gt; a blog post. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;create&lt;/code&gt; page will consist a form for submitting a blog post. The &lt;code&gt;delete&lt;/code&gt; page might contain a single post with a confirmation question of whether you want to delete that post. The &lt;code&gt;update&lt;/code&gt; view might return a form with the body of a post already passed in. &lt;/p&gt;

&lt;p&gt;This means that the blog page will be composed of the following views:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#indexbladephp"&gt;
  &lt;/a&gt;
  index.blade.php
&lt;/h4&gt;

&lt;p&gt;To show list of blog posts&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#createbladephp"&gt;
  &lt;/a&gt;
  create.blade.php
&lt;/h4&gt;

&lt;p&gt;A form to create and post a new blog post&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#editbladephp"&gt;
  &lt;/a&gt;
  edit.blade.php
&lt;/h4&gt;

&lt;p&gt;A form to edit and update a existing blog post&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#singlebladephp"&gt;
  &lt;/a&gt;
  single.blade.php
&lt;/h4&gt;

&lt;p&gt;A page showing a single blog post&lt;/p&gt;

&lt;p&gt;A very clean way to organise this is to create separate folders for each page. Then store the views in their respective folders , like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

    &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="c1"&gt;// About views&lt;/span&gt;

    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blade&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="c1"&gt;// homepage for /about&lt;/span&gt;

    &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;faqs&lt;/span&gt; &lt;span class="c1"&gt;// FAQ views&lt;/span&gt;

    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blade&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="c1"&gt;// homepage for /faqs&lt;/span&gt;

    &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="c1"&gt;// Blog views&lt;/span&gt;

        &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blade&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt; 

        &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blade&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt; 

        &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;edit&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blade&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt; 

        &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;single&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blade&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then from the controllers, you can return each of these views in a consistent manner:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app/Http/Controllers/FaqController.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FaqController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'faq.index'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;app/Http/Controllers/AboutController.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AboutController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'about.index'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;app/Http/Controllers/BlogController.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BlogController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// get blog posts from database&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blog.index'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;compact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blogs'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blog.create'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// validate request &lt;/span&gt;

        &lt;span class="c1"&gt;// add blog post to blog table for user&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;back&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;withMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Post Created!'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blog&lt;/span&gt; &lt;span class="nv"&gt;$blog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blog.single'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;compact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blog'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;edit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blog&lt;/span&gt; &lt;span class="nv"&gt;$blog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blog.edit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;compact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blog'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Blog&lt;/span&gt; &lt;span class="nv"&gt;$blog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// validate form data&lt;/span&gt;

       &lt;span class="c1"&gt;// update current post&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blog.show'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$blog&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blog&lt;/span&gt; &lt;span class="nv"&gt;$blog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// authenticate&lt;/span&gt;

        &lt;span class="nv"&gt;$blog&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blog.index'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't worry too much about the code.&lt;/p&gt;

&lt;p&gt;Instead focus on what we are returning inside in &lt;code&gt;view()&lt;/code&gt;. You can notice the consistency (they all have their folder names). All view files are categorized based on the name of the page. &lt;/p&gt;

&lt;p&gt;That way, all you need to do in the controller is pass in the view’s name preceded by the folder name.&lt;/p&gt;

&lt;p&gt;This simplifies the whole process and makes it more intuitive to understand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extending-layouts"&gt;
  &lt;/a&gt;
  Extending layouts
&lt;/h3&gt;

&lt;p&gt;Sometimes, in your Laravel application, you might be required to share certain UI elements and UI styling across many pages. This is easily achieved with a layout file. &lt;/p&gt;

&lt;p&gt;Inside this file, you can define the elements which you want to share across multiple pages. A good example of this are the navigation menu and the footer section.&lt;/p&gt;

&lt;p&gt;By default, Laravel ships with &lt;code&gt;welcome.blade.php&lt;/code&gt; as the default layout file. &lt;/p&gt;

&lt;p&gt;It is better to create a standalone folder for all layouts. So we can move &lt;code&gt;welcome.blade.php&lt;/code&gt; into the layouts folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

    &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;layouts&lt;/span&gt; 

    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;welcome&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blade&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="c1"&gt;// layout page&lt;/span&gt;

    &lt;span class="c1"&gt;// ... Other layouts go inside the layouts folder&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside this file, we define the layouts (Navbar, Footer, Sidebar), and then yield a section of the page to other pages using the &lt;code&gt;@yield&lt;/code&gt; statement:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;views/layouts/welcome.blade.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contain"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Navigation&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sidebar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Sidebar&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt; @yield('heading') &lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

            @yield('content')
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Footer&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then from inside the other pages, we can extend the layouts and supply the (unique) content section, like in the following pages:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;views/about/index.blade.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="k"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'layouts.welcome'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;endsection&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'heading'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"About Me"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;views/about/index.blade.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="k"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'layouts.welcome'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="no"&gt;FAQ&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;endsection&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'heading'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Frequently Asked Questions"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the layouts will persist across all three pages:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0oO_g1MF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635770406381/qBRqnLn5zN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0oO_g1MF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635770406381/qBRqnLn5zN.png" alt="FAQ page" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oxW9zUrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635770425757/J6ZXrnoAV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oxW9zUrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635770425757/J6ZXrnoAV.png" alt="About page" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, certain pages might not require the layouts. For example, we might not want to extend the Navbar and Sidebar for  the &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;register&lt;/code&gt; pages. Instead, we only want the footer.&lt;/p&gt;

&lt;p&gt;For auth-related pages, we can create a separate layout file which contains just the footer. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;views/layouts/auth.blade.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contain"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt; @yield('heading') &lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

                @yield('content')
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Footer&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can extend that layout from our auth views:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;views/auth/login.blade.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="k"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'layouts.auth'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nc"&gt;Login&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nc"&gt;This&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;the&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;endsection&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nf"&gt;section&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'heading'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Login"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is how the login page will look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qgn8LC3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635770941603/rnmHThU4t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qgn8LC3A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635770941603/rnmHThU4t.png" alt="Login page" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Notice how the auth-related pages were grouped inside the auth folder.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#creating-modular-and-reusable-ui-components-with-partials"&gt;
  &lt;/a&gt;
  Creating modular and reusable UI components with partials
&lt;/h3&gt;

&lt;p&gt;We can take on a more modular approach when building views. This is highly useful when creating a piece of UI or functionality which you intend to reuse across multiple sections and pages.&lt;/p&gt;

&lt;p&gt;Some examples of this are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A navigation menu&lt;/li&gt;
&lt;li&gt;A form which you want to reuse for creating a blog post and updating a blog post.&lt;/li&gt;
&lt;li&gt;A  modal UI which you want to reuse in different places&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Partials are essentially UI modules which can be included in any page. If you are from a React background, you can think of it as &lt;strong&gt;UI components&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;We will refactor the layout file (welcome.blade.php) by moving the Navigation section, Sidebar and Footer section into separate partials:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;views/partials/navbar.blade.php&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Navigation&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;views/partials/sidebar.blade.php&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sidebar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Sidebar&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;views/partials/footer.blade.php&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Footer&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we will include the partials in the layout:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;views/layouts/welcome.blade.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contain"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        @include('layouts.partials.navbar')

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        @include('layouts.partials.sidebar')

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt; @yield('heading') &lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

            @yield('content')
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            @include('layouts.partials.footer')
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This reduces the amount of code we write in the layout file. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;The views folder is one of the most important parts of the Laravel framework,  and is also an important part of the MVC trilogy.&lt;/p&gt;

&lt;p&gt;Properly organizing your view templates doesn’t just make the code more understandable to yourself, but also to your fellow developer colleagues.&lt;/p&gt;

&lt;p&gt;In this article we saw different ways to organize views in Laravel. This included folder-based organization, proper use of layouts and breaking down the UI into reusable partials.&lt;/p&gt;

&lt;p&gt;Thanks for reading along. &lt;/p&gt;

&lt;p&gt;You can also find me on  &lt;a href="https://twitter.com/UbahTheBuilder"&gt;Twitter &lt;/a&gt;. &lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>codequality</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Basic Express Server Using Replit.com</title>
      <author>SandraRodgers</author>
      <pubDate>Mon, 01 Nov 2021 20:17:14 +0000</pubDate>
      <link>https://dev.to/sandrarodgers/basic-express-server-using-replitcom-2ba9</link>
      <guid>https://dev.to/sandrarodgers/basic-express-server-using-replitcom-2ba9</guid>
      <description>&lt;p&gt;In this post, I will introduce how to set up the most basic Express server in Node.JS, and how to see that your server is ready to accept requests. We will also use &lt;a href="//codepen.io"&gt;CodePen&lt;/a&gt; to write a fetch GET request to your server so you can see a basic request and response from a frontend (built with CodePen) to a backend (built with Replit).&lt;/p&gt;

&lt;p&gt;Replit.com and Codepen.io are tools I use all the time when I want to test some code or play around with something. If you want to practice writing HTTP requests, this is a great way to get you set up to do that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-your-express-server"&gt;
  &lt;/a&gt;
  Set up your Express server
&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href="https://replit.com"&gt;Replit&lt;/a&gt;. Click on the &lt;strong&gt;Create Repl&lt;/strong&gt; button. Search templates for Node.js. Replit will assign a random name to your repl but you can change it to whatever makes sense to you.&lt;/p&gt;

&lt;p&gt;Now we will set up the Express server.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can use Node.JS by itself to create a server, but the Node.JS Express framework provides an easier way to quickly set one up. If you really want to see how to build a Node server without using Express, take a look at this page on &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/Node_server_without_framework"&gt;MDN&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;First, we must require the framework Express and run the express application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const app = express();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;In Replit, if you use the&lt;/em&gt; &lt;code&gt;require('express')&lt;/code&gt; &lt;em&gt;syntax, it will auto-install express for you. Otherwise, you can type&lt;/em&gt; &lt;strong&gt;&lt;em&gt;npm install express&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;in the shell.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In order to enable CORS and to avoid getting a CORS error, we can install the Express CORS middleware package. We will have to place it before we call the express() method, so your file should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const cors = require('cors');
const app = express();

app.use(cors());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final step to setting up an Express server is to make your server listen for connections on a given path. We will create a port and use the listen() method to listen for connections. You can use any number between 1 and 65535, but &lt;a href="https://computer.howstuffworks.com/web-server8.htm"&gt;the traditional port number for web servers is 80&lt;/a&gt;. Use whatever you want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const port = 8080;
app.listen(port, () =&amp;gt; {
  console.log(`Example app listening at http://localhost:${port}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, we will set up an endpoint to respond to GET requests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.get('/', (req, res) =&amp;gt; {
  res.json('Hello World')
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This endpoint includes &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an instance of Express (&lt;code&gt;app&lt;/code&gt;) &lt;/li&gt;
&lt;li&gt;the HTTP request method (in this case, &lt;code&gt;get&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;a path (&lt;code&gt;'/'&lt;/code&gt;) &lt;/li&gt;
&lt;li&gt;a function to handle the request. That function will take in the request and it will respond by sending a message back to the client (frontend). Read more at &lt;a href="http://expressjs.com/en/starter/basic-routing.html"&gt;expressjs.com&lt;/a&gt; to learn about basic routing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is our server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const cors = require('cors');
const app = express();
const port = 8080;

app.use(cors());

app.get('/', (req, res) =&amp;gt; {
  res.json('Hello World')
});

app.listen(port, () =&amp;gt; {
  console.log(`Example app listening at http://localhost:${port}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure you click the big button at the top of the repl that says &lt;strong&gt;Run&lt;/strong&gt; to start up your server. If you want to see my actual repl, it's &lt;a href="https://replit.com/@SandraR/Basic-Express-Server#index.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-your-frontend-at-codepen"&gt;
  &lt;/a&gt;
  Set up your Frontend at CodePen
&lt;/h2&gt;

&lt;p&gt;Now, we want to create a frontend so we can have the frontend client make a request to the backend server we just built. And we want to see the response on the front end.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="//codepen.io"&gt;CodePen&lt;/a&gt; and create a new 'pen'. Here is my &lt;a href="https://codepen.io/sandrarodgers/pen/VwzrZPe"&gt;pen&lt;/a&gt; for this article if you need an example.&lt;/p&gt;

&lt;p&gt;In the Javascript section of the pen, we will use the &lt;code&gt;fetch()&lt;/code&gt; method to write a request to our server to fetch the message (the message we set up our &lt;code&gt;get&lt;/code&gt; endpoint to send back - 'Hello World'). &lt;/p&gt;

&lt;p&gt;&lt;em&gt;The &lt;code&gt;fetch()&lt;/code&gt; method comes from the Fetch API, which is a client-side browser API. It is not actually part of the Javascript language itself, but is one of the many APIs that is built into the web browser and sits on top of the Javascript language. Read more at &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Introduction"&gt;MDN&lt;/a&gt; to learn about the awesomeness that is the browser Web APIs.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A basic fetch request will include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;fetch()&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;the endpoint URL (the path to the resource we want to fetch). The path includes the url + the path we put in our endpoint, which was '/'.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fetch('https://basic-express-server.sandrar.repl.co/')
    .then(response =&amp;gt; response.json())
    .then(data =&amp;gt; {console.log(data)})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;To create a url to reach your server on Replit.com, use the structure: /[repl-name].[username].repl.co/&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Calling the fetch method with the endpoint url returns a promise, so we can use the Javascript &lt;code&gt;.then()&lt;/code&gt; to wait for the response. Inside the callback of the &lt;code&gt;.then()&lt;/code&gt;, we will deal with the response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    .then(response =&amp;gt; response.json())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to take the JSON content from the response object that is sent back. So we use the &lt;code&gt;json()&lt;/code&gt; method on the response. That &lt;code&gt;json()&lt;/code&gt; method also returns a promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    .then(data =&amp;gt; {console.log(data)})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we use .&lt;code&gt;then()&lt;/code&gt; again, and in the second .then() we now have the response parsed into JSON that we can read, so we console.log that parsed response.&lt;/p&gt;

&lt;p&gt;Then we must open the console to read it. Look for a small button in CodePen that says 'console' and click on it to open the nifty CodePen console. Or you can just open your devtools and check in there. You should see&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Hello World&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And that's it! We see that we have correctly built a server with an endpoint. We can make a request to that endpoint and get back the response that we expect.&lt;/p&gt;

&lt;p&gt;I hope this was helpful to you!&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>fetch</category>
      <category>http</category>
    </item>
    <item>
      <title>Aprendendo mais sobre API's</title>
      <author>Sergio</author>
      <pubDate>Mon, 01 Nov 2021 20:17:01 +0000</pubDate>
      <link>https://dev.to/sergjun/aprendendo-mais-sobre-apis-g25</link>
      <guid>https://dev.to/sergjun/aprendendo-mais-sobre-apis-g25</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#intro"&gt;Porque aprender mais sobre API's&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#oque"&gt;O que é uma API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#apirest"&gt;APIREST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#csr"&gt;Controller-Services-Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hv"&gt;Headers-Verbos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#parametros"&gt;Parâmetros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#porque-aprender-mais-sobre-apis"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Porque aprender mais sobre API's
&lt;/h2&gt;

&lt;p&gt;Meu primeiro contato com API's não faz muito tempo mas foi algo meio estranho, sempre me pareceu que era uma coisa muito mais complexa do que parecia ser &lt;em&gt;(e é)&lt;/em&gt;, mas nunca tive curiosidade o suficiente para ir afundo, afinal, eu dava o fetch na URL, fazia um &lt;strong&gt;GET&lt;/strong&gt; me voltava o json que eu queria e eu manipulava isso a meu bel prazer ou eu conseguia fazer um &lt;strong&gt;POST&lt;/strong&gt; simples voltava o status code 200 e ta pronto o sorvetinho.&lt;/p&gt;

&lt;p&gt;Essa semana precisei testar uma API privada do 0 e ver o que era possível fazer com os métodos disponíveis e, não sei se por inexperiência minha, ou se a plataforma que eu estava usando não ajudou (talvez um misto dos dois), eu não consegui testar muita coisa, afinal, tinha um conhecimento extremamente raso sobre API's e com isso, decidi estudar e ir mais afundo, continuo com o conhecimento raso, mas agora entendo um pouco melhor sobre API's, o que são e suas funcionalidades, vou escrever esse artigo para fixar melhor as informações que aprendi essa semana, se isso conseguir ajudar alguém que, por ventura, esbarre em dificuldades semelhantes as que eu tive então sera uma vitoria dupla! &lt;/p&gt;

&lt;p&gt;Alguns disclaimers necessários:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Boa parte do que aprendi aqui, aprendi pesquisando em diversas fontes mas a mais rica e que mais me agregou conhecimento foi o&lt;a href="https://www.youtube.com/watch?v=VqVQ7vHY32o&amp;amp;list=PLf8x7B3nFTl17WeEVj405tHlstiq1kNBX"&gt; Curso de testes de API Rest do Julio de Lima&lt;/a&gt;, se esse conteúdo te ajudar de qualquer forma, peço que fortaleça o canal dele se inscrevendo e dando like nos vídeos, a quantidade e qualidade de conteúdo sobre testes que ele faz merece ser reconhecida e retribuída de alguma maneira&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Caso encontre algo de errado escrito aqui, desde conceitos ate erros gramaticais, por favor, me avise (seja por comentários, twitter etc) &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;br&gt;
 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9-uma-api"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; O que é uma API
&lt;/h2&gt;

&lt;p&gt;Ao pé da letra, API significa &lt;strong&gt;"Application Programming Interface"&lt;/strong&gt;, traduzido ficaria, &lt;strong&gt;"Interface de Programação de Aplicativos"&lt;/strong&gt;, a principio esse conceito não ficou tão claro pra mim então comecei a pesquisar mais e ler mais sobre como outras pessoas "definiam" uma API.&lt;/p&gt;

&lt;p&gt;O próprio Julio em um dos videos dele deu a explicação que eu achei mais didática e clara possível, se temos o UI/UX, que se trata sobre a User Interface (Interface do Usuário) e User Experience (Experiencia do Usuário, podemos pensar na API como uma UI, mas voltada ao software que irá utilizá-la, onde, ao se pensar no UI, se pensa em uma pessoa vendo aquela interface e o quão intuitiva ela é, na API se pensa em, o quão "intuitivo" sera para outros softwares interagirem com o que aquela API oferece!&lt;/p&gt;

&lt;p&gt;O software não precisa saber (geralmente) em que linguagem a API foi escrita, ele só precisa saber o tipo de resultado que ela ira gerar, o resto é abstraído, apenas o resultado importa, da mesma forma que você não precisa saber o que acontece embaixo dos panos do dev.to, você veio ler o texto apenas.&lt;/p&gt;

&lt;p&gt; &lt;br&gt;
 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#apirestrestful"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; APIREST/RESTful
&lt;/h2&gt;

&lt;p&gt;Esse tópico com certeza merece um artigo só pra ele para dissecar o tanto de coisa que tem para ser entendida sobre REST, mas fica para a proxima, só de ter a noção do que é uma APIRest já ajuda a entender melhor sobre tudo isso.&lt;/p&gt;

&lt;p&gt;O ponto central sobre REST &lt;strong&gt;(sigla para Representational State Transfer ou Transferência de Estado Representacional)&lt;/strong&gt; é ser um modelo/estilo de arquitetura definido pela W3C, um dos seus principais conceitos é utilizar o protocolo HTTP (verbos, accept headers, códigos de estado HTTP etc) de forma explícita e representativa para se comunicar e geralmente utilizar arquivos JSON e XML para a transferencia de dados.&lt;/p&gt;

&lt;p&gt;Isso significa que, se você já mexeu com uma APIRestful, APIs que seguem esse estilo de arquitetura, você consegue ter noção sobre como outras API's com essa arquitetura funcionam.&lt;/p&gt;

&lt;p&gt; &lt;br&gt;
 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#controllerservicesrepository"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; Controller-Services-Repository
&lt;/h2&gt;

&lt;p&gt;Geralmente dentro de uma APIRest nos temos essas três "entidades" fazendo com que ela seja funcional e definindo elas seria mais ou menos assim: &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#services"&gt;
  &lt;/a&gt;
  Services
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Geralmente é a camada do backend que armazena as regras de negocio&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#repositories"&gt;
  &lt;/a&gt;
  Repositories
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Responsável por trafegar as informações entre a regra de negocio e o sistema de armazenamento/banco de dados&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#controller"&gt;
  &lt;/a&gt;
  Controller
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Intermediador entre quem chama (aplicação que vc esta utilizando) e os serviços e repositórios&lt;/li&gt;
&lt;li&gt;Disponível via HTTP, geralmente&lt;/li&gt;
&lt;li&gt;Controla autenticação/autorizações&lt;/li&gt;
&lt;li&gt;Recebe endpoints via anotações&lt;/li&gt;
&lt;li&gt;Define os métodos/verbos necessários para acessar as funções&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Um fluxo simulando a utilização de uma API seria mais ou menos assim:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- Interface Grafica =&amp;gt; Controller =&amp;gt; Services =&amp;gt; Repository =&amp;gt; Database&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Seu site/interface grafica faz a requisição a API pelo controller, que envia a requisição ao services que envia o que foi solicitado ao Repository que ai vai consultar/enviar as informações para o banco de dados/database e então:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- Interface Grafica &amp;lt;= Controller &amp;lt;= Services &amp;lt;= Repository &amp;lt;= Database&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Fazer o caminho contrario, o Database, envia o resultado da sua requisição para o Repository, que envia para o Services, que envia para o Controller e este te da uma resposta em JSON ou XML!&lt;/p&gt;

&lt;p&gt; &lt;br&gt;
 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#headersverbos"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; Headers-Verbos
&lt;/h2&gt;

&lt;p&gt;Cabeçalho e Headers são dois métodos do protocolo HTTP que são utilizados em requisições numa APIRest, detalhando um pouco mais sobre eles teríamos:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#headers"&gt;
  &lt;/a&gt;
  Headers
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Informações técnicas para ajudar o servidor a entender o que está sendo enviado naquela requisição&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Authorization geralmente vai no header da requisição&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#verbos"&gt;
  &lt;/a&gt;
  Verbos
&lt;/h3&gt;

&lt;p&gt;As ações que aquela requisição deseja fazer, geralmente as mais utilizadas são: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;POST - Criar uma nova informação no backend, pode ser usado também para enviar informações sensíveis utilizando o protocolo HTTPS para criptografar a informação, por exemplo, para autenticar um usuário.&lt;/li&gt;
&lt;li&gt;GET - Buscar uma informação no backend&lt;/li&gt;
&lt;li&gt;PUT - Atualizar uma informação no backend&lt;/li&gt;
&lt;li&gt;DELETE - Deletar uma informação no backend&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#exemplo-de-requisi%C3%A7%C3%A3o-via-curl"&gt;
  &lt;/a&gt;
  Exemplo de requisição via CURL
&lt;/h3&gt;



&lt;p&gt;&lt;code&gt;curl -X POST -is "https://api.github.com/user/repos" -H 'Authorization: token &amp;lt;token&amp;gt;' -H 'Content-Type: application/json' -d '{"name": "teste-api-swagger"}'&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;onde:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://curl.se/"&gt;curl&lt;/a&gt; é uma ferramenta/biblioteca por linha de comando para transferência de data via URL&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-X declara qual verbo/método sera feito, nesse caso POST para autenticação&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-i é o método indicando que, queremos ver as informações do cabeçalho que a nossa resposta retorna&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-s é o método indicando que, não queremos ver as informações sobre quanto tempo demorou para download e quanto tempo demorou para processar&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-H significa que as informações em "" são informações referentes ao header da requisição, nesse caso, a Autorização via token e o content-type indicando que estamos enviando um json&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-d é o body da nossa requisição, o conteúdo dela por assim dizer&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;br&gt;
 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#par%C3%A2metros"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; Parâmetros
&lt;/h2&gt;

&lt;p&gt;Nas requisições, há algumas formas de se passar parâmetros e assim conseguir respostas de acordo com a sua necessidade, podemos passar parametros pelo &lt;strong&gt;body&lt;/strong&gt; da requisição, pelo &lt;strong&gt;header&lt;/strong&gt;, pelo &lt;strong&gt;query&lt;/strong&gt; ou pelo &lt;strong&gt;path&lt;/strong&gt; dela&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Body:&lt;br&gt;
Usando o -d dentro do curl &lt;strong&gt;ex: -d '{"name": "teste-api-swagger"}&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Header:&lt;br&gt;
Usando o -H dentro do curl, com aspas simples &lt;strong&gt;-H 'Authorization: chave de autorização da API'&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Query:&lt;br&gt;
Depois do endpoint, usando o ? e o &amp;amp; caso tiver mais de um parâmetro, &lt;strong&gt;"ex: localhost:3000/users?id=1&amp;amp;name=teste"&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Path:&lt;br&gt;
Depois do endpoint, colocando um / antes do nome do parametro, &lt;strong&gt;"ex: localhost:3000/users/1"&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>learinpublic</category>
    </item>
    <item>
      <title>What is application-level encryption and why it’s not TLS </title>
      <author>Cossack Labs</author>
      <pubDate>Mon, 01 Nov 2021 20:11:45 +0000</pubDate>
      <link>https://dev.to/cossacklabs/what-is-application-level-encryption-and-why-its-not-tls-49hb</link>
      <guid>https://dev.to/cossacklabs/what-is-application-level-encryption-and-why-its-not-tls-49hb</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Сheck this out to protect your apps’ data like a pro 💎.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, the situation is quite pragmatic: Alice wants to ensure no one eavesdrops on her love messages 🕊️ to Bob. In this video by &lt;a class="mentioned-user" href="https://dev.to/vixentael"&gt;@vixentael&lt;/a&gt;
, you can see the difference between &lt;a href="https://www.infoq.com/articles/ale-software-architects/"&gt;application-level encryption (ALE)&lt;/a&gt; and transport layer security (TLS). Let’s talk about their use cases.&lt;/p&gt;




&lt;p&gt;Both ALE and TLS are ways to protect data between applications by encrypting it. The difference lies in where and who encrypts/decrypts the data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The main thing about ALE is that encryption is done on application-level—inside your application, inside your code.&lt;/strong&gt; You write a code on how to encrypt and decrypt the data, you decide which cypher to use, where to get the encryption key, and send the data encrypted from your app. &lt;/p&gt;

&lt;p&gt;Imagine Alice sends a JSON love message. Using ALE, you can encrypt the whole JSON or only a particular field, like “message” in this example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oo2jF4ZG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrac0q2wq5tu5zfxl2is.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oo2jF4ZG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrac0q2wq5tu5zfxl2is.png" alt="Example JSON message"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No matter which underlying transport and/or at-rest encryption are used, your data is encrypted within the application, as long as you choose it. So, &lt;strong&gt;with ALE, Alice’s messages are protected within the app context&lt;/strong&gt; from Eve—from physical disk access risks, leakage through logs, snapshots, and automated backups. 😌&lt;/p&gt;

&lt;p&gt;Now, let’s have a closer look at TLS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLS protects data from eavesdropping between servers&lt;/strong&gt; (like leakage and tampering of network traffic on the internet) and adds authentication for node-to-node links if you set it up correctly. All websites use TLS, and most mobile &amp;amp; desktop applications do too. As a developer, you often don’t need to do anything inside your applications to support TLS, only to generate TLS certificates for their server’s domain name.&lt;/p&gt;

&lt;p&gt;But at the same time, &lt;strong&gt;TLS protects messages only during network transmission.&lt;/strong&gt; Before and after—messages are not protected.&lt;/p&gt;

&lt;p&gt;Thus, if Alice uses TLS to encrypt messages to Bob, and Eve has physical access to Alice’s or Bob’s computer or logs—she can read their messages. &lt;strong&gt;TLS protection does not cover such security events as&lt;/strong&gt; physical access to servers, privileged DB access, as well as backups, logs, and snapshot issues. 😕🕳️ See the table below. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dZM21zyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2jo0dc1l7wqnl1p5k33.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dZM21zyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2jo0dc1l7wqnl1p5k33.jpg" alt="Compare TS and ALE controls"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Does Alice need to use ALE all the time? It depends, it depends. Use TLS by default, and add ALE when data is sensitive, and you can improve your application with some cryptographic code. &lt;strong&gt;To choose ALE/TLS more smartly, we need to consider threat models relevant to the case.&lt;/strong&gt; 🤔&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TLS protects data in transit but won’t help against insiders with access to the database. When insiders and APTs are realistic threat vectors, ALE becomes more relevant. And what’s essential—&lt;strong&gt;ALE provides many security guarantees in one shot.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;To learn more about ALE, dive into &lt;a href="https://www.infoq.com/articles/ale-software-architects/"&gt;Application Level Encryption for Software Architects&lt;/a&gt; article by &lt;a href="https://www.linkedin.com/in/eugene-pilyankevich-59a31655/"&gt;Eugene Pilyankevich&lt;/a&gt; or watch &lt;a href="https://twitter.com/vixentael"&gt;@Anastasiia Voitova&lt;/a&gt; explaining why &lt;a href="https://youtu.be/CqsrA4eeGSs"&gt;End-to-end encrypted doesn't mean secure&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;And you’re always welcome to follow &lt;a class="mentioned-user" href="https://dev.to/cossacklabs"&gt;@cossacklabs&lt;/a&gt;
 for data security updates on &lt;a href="https://twitter.com/cossacklabs"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.youtube.com/channel/UCQbAyrwHKJ8QRDTOHs90O0g"&gt;YouTube&lt;/a&gt;, &lt;a href="https://www.linkedin.com/company/cossack-labs/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://github.com/cossacklabs"&gt;GitHub&lt;/a&gt;, and &lt;a href="https://www.cossacklabs.com/"&gt;website&lt;/a&gt;. 👋🧡🔐&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
