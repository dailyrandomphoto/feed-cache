<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Un-official  Github Action for Deployment to Railway</title>
      <author>Bervianto Leo Pratama</author>
      <pubDate>Sat, 20 Nov 2021 05:10:10 +0000</pubDate>
      <link>https://dev.to/berviantoleo/un-official-github-action-for-deployment-to-railway-4g83</link>
      <guid>https://dev.to/berviantoleo/un-official-github-action-for-deployment-to-railway-4g83</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;DIY Deployments&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/bervProject"&gt;
        bervProject
      &lt;/a&gt; / &lt;a href="https://github.com/bervProject/railway-deploy"&gt;
        railway-deploy
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Github Action to Deploy App to Railway using Railway CLI
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Railway Deploy Github Action&lt;/h1&gt;
&lt;p&gt;This action deploys your app to Railway using Railway CLI.&lt;/p&gt;
&lt;h2&gt;
Inputs&lt;/h2&gt;
&lt;h3&gt;
&lt;code&gt;railway_token&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Optional&lt;/strong&gt; Railway Token to deploy the app.&lt;/p&gt;
&lt;h2&gt;
Outputs&lt;/h2&gt;
&lt;h3&gt;
&lt;code&gt;status&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;Success/Failure result&lt;/p&gt;
&lt;h2&gt;
Example usage&lt;/h2&gt;
&lt;h3&gt;
Using with&lt;/h3&gt;
&lt;div class="highlight highlight-source-yaml position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-ent"&gt;uses&lt;/span&gt;: &lt;span class="pl-s"&gt;bervProject/railway-deploy@main&lt;/span&gt;
&lt;span class="pl-ent"&gt;with&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;railway_token&lt;/span&gt;: &lt;span class="pl-s"&gt;${ secret.RAILWAY_TOKEN }&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Using env&lt;/h3&gt;
&lt;div class="highlight highlight-source-yaml position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-ent"&gt;uses&lt;/span&gt;: &lt;span class="pl-s"&gt;bervProject/railway-deploy@main&lt;/span&gt;
&lt;span class="pl-ent"&gt;env&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;RAILWAY_TOKEN&lt;/span&gt;: &lt;span class="pl-s"&gt;${ secret.RAILWAY_TOKEN }&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/bervProject/railway-deploy"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bervProject/railway-deploy/blob/main/action.yml"&gt;Yaml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;Example project that implement the &lt;strong&gt;bervproject/railway-deploy&lt;/strong&gt;:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/bervProject"&gt;
        bervProject
      &lt;/a&gt; / &lt;a href="https://github.com/bervProject/MyPersonalWebAPI"&gt;
        MyPersonalWebAPI
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Personal Web API using FeathersJS
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
MyPersonalWebAPI&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Web API for Bervianto's Web&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Build Status&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Codacy&lt;/th&gt;
&lt;th&gt;Travis&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://app.codacy.com/app/berviantoleo/MyPersonalWebAPI?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=bervProject/MyPersonalWebAPI&amp;amp;utm_campaign=Badge_Grade_Settings" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/978bcaf30389526c76fa6a3ace4a002a81bf7aee081f5f7190c2fb1b720bcfdb/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6135663230613763613338383430336639383463333237653338303832366532" alt="Codacy Badge"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/521594a5edc92a312ce12326784835c327ef9f4c0e992859def388ddcbe3f3f2/68747470733a2f2f7472617669732d63692e6f72672f6265727650726f6a6563742f4d79506572736f6e616c5765624150492e7376673f6272616e63683d6d6173746572"&gt;&lt;img src="https://camo.githubusercontent.com/521594a5edc92a312ce12326784835c327ef9f4c0e992859def388ddcbe3f3f2/68747470733a2f2f7472617669732d63692e6f72672f6265727650726f6a6563742f4d79506572736f6e616c5765624150492e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
Notes (Requirement for Development or Production)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Using Dockerfile or Docker Compose&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please rename &lt;code&gt;.env.example&lt;/code&gt; into &lt;code&gt;.env&lt;/code&gt; and update secret keys&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using Heroku&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Update environment or config, using &lt;code&gt;secret&lt;/code&gt; and &lt;code&gt;production&lt;/code&gt; as keys and insert your value.&lt;/p&gt;
&lt;h2&gt;
About&lt;/h2&gt;
&lt;p&gt;This project uses &lt;a href="http://feathersjs.com" rel="nofollow"&gt;Feathers&lt;/a&gt;. An open source web framework for building modern real-time applications.&lt;/p&gt;
&lt;h2&gt;
Changelog&lt;/h2&gt;
&lt;p&gt;Changelog &lt;a href="https://github.com/bervProject/MyPersonalWebAPICHANGELOG.md"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;Copyright (c) 2018&lt;/p&gt;
&lt;p&gt;Licensed under the &lt;a href="https://github.com/bervProject/MyPersonalWebAPILICENSE"&gt;MIT license&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/bervProject/MyPersonalWebAPI"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bervProject/MyPersonalWebAPI/blob/master/.github/workflows/node%26docker.yml"&gt;Action Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>actionshackathon21</category>
    </item>
    <item>
      <title>Responsive Design CSS tips</title>
      <author>Fidal Mathew</author>
      <pubDate>Sat, 20 Nov 2021 03:22:21 +0000</pubDate>
      <link>https://dev.to/fidalmathew/responsive-design-css-tips-nhj</link>
      <guid>https://dev.to/fidalmathew/responsive-design-css-tips-nhj</guid>
      <description>&lt;p&gt;Hi folks, hope you are doing well. In this post I am going to share you some tips that I personally use while making websites responsive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Padding/Margin -&lt;/strong&gt; We usually use a lot of padding when we make websites for desktops, to make them more attractive. While making it responsive for mobiles, tablets try decreasing the existing paddings and margins.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Use em/rem/ percentages -&lt;/strong&gt; Always try using &lt;code&gt;em/percentage/rem&lt;/code&gt; instead of px, so that the text, images size adjust with respect to the device width.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Flex-wrap -&lt;/strong&gt; Using flexbox to align your HTML elements such as &lt;code&gt;&amp;lt;div&amp;gt;,&amp;lt;p&amp;gt;&lt;/code&gt; etc provides the force elements onto one line or can wrap onto multiple lines according to their width.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Media query -&lt;/strong&gt; Media query should be used to set width and height according to the breakpoints. Breakpoint refers to the width at which the website starts looking distorted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Box-Sizing -&lt;/strong&gt; It resolves a lot of problems padding causes, using box-sizing on HTML elements with a percentage width will take padding into account rather than having to adjust the width due to padding.&lt;/p&gt;

&lt;p&gt;If you know of other tips/tricks, let me know in the comments. Thanks for reading :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect with me on -&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/fidalmathew10"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/FidalMathew"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/fidal-mathew-82aba7200/"&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Spring Boot + Angular 13 example: CRUD application</title>
      <author>Tien Nguyen</author>
      <pubDate>Sat, 20 Nov 2021 03:18:17 +0000</pubDate>
      <link>https://dev.to/tienbku/spring-boot-angular-13-example-crud-application-9dg</link>
      <guid>https://dev.to/tienbku/spring-boot-angular-13-example-crud-application-9dg</guid>
      <description>&lt;p&gt;In this tutorial, we will learn how to build a full stack Spring Boot + Angular 13 example with a CRUD Application. The back-end server uses Spring Boot with Spring Web MVC for REST Controller and Spring Data JPA for interacting with embedded database (H2 database). Front-end side is made with Angular 13, HttpClient, Router and Bootstrap 4.&lt;/p&gt;

&lt;p&gt;Full article: &lt;a href="https://www.bezkoder.com/spring-boot-angular-13-crud/"&gt;https://www.bezkoder.com/spring-boot-angular-13-crud/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using other databases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bezkoder.com/spring-boot-angular-13-mysql/"&gt;Spring Boot + Angular 13 +  MySQL example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bezkoder.com/spring-boot-angular-13-postgresql/"&gt;Spring Boot + Angular 13 + PostgreSQL example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bezkoder.com/angular-13-spring-boot-mongodb/"&gt;Spring Boot + Angular 13 + MongoDB example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Spring Boot and Angular 13 CRUD example&lt;/h2&gt;

&lt;p&gt;We will build a full-stack Angular 13 + Spring Boot Tutorial CRUD Application in that:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Each Tutorial has id, title, description, published status.&lt;/li&gt;
    &lt;li&gt;We can create, retrieve, update, delete Tutorials.&lt;/li&gt;
    &lt;li&gt;We can also find Tutorials by title.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The images below shows screenshots of our System.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new Tutorial:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DzPEqG6x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e93pb4zpj2pc2bfoqn07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DzPEqG6x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e93pb4zpj2pc2bfoqn07.png" alt="spring-boot-angular-13-crud-example-create-tutorial" width="600" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retrieve Tutorials:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WJSpNtUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bw56zutyn7hidf4tkpqu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WJSpNtUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bw56zutyn7hidf4tkpqu.png" alt="spring-boot-angular-13-crud-example-retrieve-tutorial" width="680" height="510"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on &lt;strong&gt;Edit&lt;/strong&gt; button to update a Tutorial:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IYt5oboK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r4iw92s6d3nkj0asyri.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IYt5oboK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r4iw92s6d3nkj0asyri.png" alt="spring-boot-angular-13-crud-example-retrieve-one-tutorial" width="550" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On this Page, you can:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;change status to &lt;strong&gt;Published&lt;/strong&gt; using &lt;strong&gt;Publish&lt;/strong&gt; button&lt;/li&gt;
    &lt;li&gt;remove the Tutorial from Database using &lt;strong&gt;Delete&lt;/strong&gt; button&lt;/li&gt;
    &lt;li&gt;update the Tutorial details on Database with &lt;strong&gt;Update&lt;/strong&gt; button&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tgsO23MK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gpw39rr62bnixqp8eq9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tgsO23MK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gpw39rr62bnixqp8eq9.png" alt="spring-boot-angular-13-crud-example-update-tutorial" width="520" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to implement Form Validation, please visit:&lt;br&gt;
&lt;a href="https://bezkoder.com/angular-12-form-validation/"&gt;Angular Form Validation example (Reactive Forms)&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search Tutorials by title:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n7icjT4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2aqjtqplkiqjmi2vy5wc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n7icjT4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2aqjtqplkiqjmi2vy5wc.png" alt="spring-boot-angular-13-crud-example-search-tutorial" width="700" height="310"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Spring Boot + Angular 13 fullstack Architecture&lt;/h2&gt;

&lt;p&gt;Now look at the application architecture we will build:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nZQkCUSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0gcm3auzszxitgegrx5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nZQkCUSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0gcm3auzszxitgegrx5.png" alt="spring-boot-angular-13-crud-example-architecture" width="600" height="220"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring Boot exports REST Apis using Spring Web MVC &amp;amp; interacts with embedded H2 Database using Spring Data JPA.&lt;/li&gt;
&lt;li&gt;Angular 13 Client sends HTTP Requests and retrieve HTTP Responses using HttpClient Module, shows data on the components. We also use Angular Router for navigating to pages.&lt;/li&gt;
&lt;/ul&gt;


You can also find the Spring Restful Apis that works with other databases here:
- &lt;a href="https://bezkoder.com/spring-boot-postgresql-example/"&gt;Spring JPA + PostgreSQL&lt;/a&gt;
- &lt;a href="https://bezkoder.com/spring-boot-jpa-crud-rest-api/"&gt;Spring JPA + MySQL&lt;/a&gt;
- &lt;a href="https://bezkoder.com/spring-boot-mongodb-crud/"&gt;Spring Data + MongoDB&lt;/a&gt;
- &lt;a href="https://www.bezkoder.com/spring-boot-sql-server/"&gt;Spring JPA + SQL Server&lt;/a&gt;
- &lt;a href="https://bezkoder.com/spring-boot-hibernate-oracle/"&gt;Spring JPA + Oracle&lt;/a&gt;
- &lt;a href="https://bezkoder.com/spring-boot-cassandra-crud/"&gt;Spring Data + Cassandra&lt;/a&gt;


&lt;h2&gt;Video&lt;/h2&gt;

&lt;p&gt;This is our Angular + Spring Boot CRUD application demo and brief instruction:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/K8mV6XWA_EY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In the video, we use Angular 10 with MySQL database, but the logic and UI are the same as this Angular version 13 and embedded database.&lt;/p&gt;

&lt;h2&gt;Spring Boot Back-end&lt;/h2&gt;

&lt;h3&gt;Overview&lt;/h3&gt;

&lt;p&gt;These are APIs that Spring Boot App will export:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Methods&lt;/th&gt;
&lt;th&gt;Urls&lt;/th&gt;
&lt;th&gt;Actions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;create new Tutorial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;retrieve all Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;retrieve a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;update a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;delete a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;delete all Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials?title=[keyword]&lt;/td&gt;
&lt;td&gt;find all Tutorials which title contains &lt;code&gt;keyword&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;We make CRUD operations &amp;amp; finder methods with Spring Data JPA's &lt;code&gt;JpaRepository&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The database will be H2 Database (in memory or on disk) by configuring project dependency &amp;amp; datasource.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Technology&lt;/h3&gt;

&lt;ul&gt;
        &lt;li&gt;Java 8&lt;/li&gt;
        &lt;li&gt;Spring Boot 2.2.1 (with Spring Web MVC, Spring Data JPA)&lt;/li&gt;
        &lt;li&gt;H2 Database&lt;/li&gt;
        &lt;li&gt;Maven 3.6.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Project Structure&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9h7yFNr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcvxhmfvqnvdwu6cxec4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9h7yFNr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcvxhmfvqnvdwu6cxec4.png" alt="spring-boot-angular-13-crud-example-server-project-structure" width="314" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;code&gt;Tutorial&lt;/code&gt; data model class corresponds to entity and table &lt;em&gt;tutorials&lt;/em&gt;.&lt;br&gt;
– &lt;code&gt;TutorialRepository&lt;/code&gt; is an interface that extends &lt;a href="https://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html"&gt;JpaRepository&lt;/a&gt; for CRUD methods and custom finder methods. It will be autowired in &lt;code&gt;TutorialController&lt;/code&gt;.&lt;br&gt;
– &lt;code&gt;TutorialController&lt;/code&gt; is a &lt;a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html"&gt;RestController&lt;/a&gt; which has request mapping methods for RESTful requests such as: &lt;em&gt;getAllTutorials&lt;/em&gt;, &lt;em&gt;createTutorial&lt;/em&gt;, &lt;em&gt;updateTutorial&lt;/em&gt;, &lt;em&gt;deleteTutorial&lt;/em&gt;, &lt;em&gt;findByPublished&lt;/em&gt;...&lt;br&gt;
– Configuration for Spring Datasource, JPA &amp;amp; Hibernate in &lt;strong&gt;application.properties&lt;/strong&gt;.&lt;br&gt;
– &lt;strong&gt;pom.xml&lt;/strong&gt; contains dependencies for Spring Boot and H2 Database.&lt;/p&gt;

&lt;h2&gt;Angular 13 Front-end&lt;/h2&gt;

&lt;h3&gt;Overview&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EBRLxtqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzgeizj3n1dp6phy0msw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EBRLxtqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzgeizj3n1dp6phy0msw.png" alt="spring-boot-angular-13-crud-example-client-overview" width="700" height="208"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– The &lt;code&gt;App&lt;/code&gt; component is a container with &lt;code&gt;router-outlet&lt;/code&gt;. It has navbar that links to routes paths via &lt;code&gt;routerLink&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;– &lt;code&gt;TutorialsList&lt;/code&gt; component gets and displays Tutorials.&lt;br&gt;
– &lt;code&gt;TutorialDetails&lt;/code&gt; component has form for editing Tutorial's details based on &lt;code&gt;:id&lt;/code&gt;.&lt;br&gt;
– &lt;code&gt;AddTutorial&lt;/code&gt; component has form for submission new Tutorial.&lt;/p&gt;

&lt;p&gt;– These Components call &lt;code&gt;TutorialService&lt;/code&gt; methods which use Angular &lt;code&gt;HTTPClient&lt;/code&gt; to make HTTP requests and receive responses.&lt;/p&gt;

&lt;h3&gt;Technology&lt;/h3&gt;

&lt;ul&gt;
    &lt;li&gt;Angular 13&lt;/li&gt;
    &lt;li&gt;Angular HttpClient&lt;/li&gt;
    &lt;li&gt;Angular Router&lt;/li&gt;
    &lt;li&gt;Bootstrap 4&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Project Structure&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qyaps9qD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9agk9rk1ha17zc8xq2w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qyaps9qD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9agk9rk1ha17zc8xq2w.png" alt="spring-boot-angular-13-crud-example-client-project-structure" width="288" height="896"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;tutorial.model.ts&lt;/code&gt; exports the main class model: &lt;code&gt;Tutorial&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;There are 3 components: &lt;code&gt;tutorials-list&lt;/code&gt;, &lt;code&gt;tutorial-details&lt;/code&gt;, &lt;code&gt;add-tutorial&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tutorial.service&lt;/code&gt; has methods for sending HTTP requests to the Apis.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app-routing.module.ts&lt;/code&gt; defines routes for each component.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app&lt;/code&gt; component contains router view and navigation bar.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app.module.ts&lt;/code&gt; declares Angular components and import necessary modules.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For step by step instruction and Github, please visit:&lt;br&gt;
&lt;a href="https://www.bezkoder.com/spring-boot-angular-13-crud/"&gt;https://www.bezkoder.com/spring-boot-angular-13-crud/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Further Reading&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/"&gt;Spring Data JPA&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html"&gt;Spring Web MVC&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://angular.io/guide/http"&gt;Angular HttpClient&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://angular.io/guide/template-syntax"&gt;Angular Template Syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Security: &lt;a href="https://bezkoder.com/angular-12-spring-boot-jwt-auth/"&gt;Angular + Spring Boot: JWT Authentication &amp;amp; Authorization example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Upload: &lt;a href="https://www.bezkoder.com/angular-13-spring-boot-file-upload/"&gt;Angular + Spring Boot: File upload/download example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to implement Form Validation, please visit:&lt;br&gt;
&lt;a href="https://bezkoder.com/angular-12-form-validation/"&gt;Angular Form Validation example (Reactive Forms)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or Pagination: &lt;a href="https://bezkoder.com/pagination-spring-boot-angular-12/"&gt;Angular + Spring Boot: Pagination example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Serverless with Firebase:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bezkoder.com/angular-13-firebase-crud/"&gt;Angular CRUD with Firebase Realtime Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bezkoder.com/angular-13-firestore-crud-angularfirestore/"&gt;Angular CRUD with Cloud Firestore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bezkoder.com/angular-13-firebase-storage/"&gt;Angular File Upload with Firebase Storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>java</category>
      <category>spring</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Frontend Challenge #5, FAQ Accordion</title>
      <author>JC Smiley</author>
      <pubDate>Sat, 20 Nov 2021 02:50:02 +0000</pubDate>
      <link>https://dev.to/jcsmileyjr/frontend-challenge-5-faq-accordion-21p9</link>
      <guid>https://dev.to/jcsmileyjr/frontend-challenge-5-faq-accordion-21p9</guid>
      <description>&lt;p&gt;This is a brief description of the fifth frontend project I've completed from &lt;a href="https://www.frontendmentor.io/home"&gt;Frontend Mentors&lt;/a&gt;, FAQ Accordion component. Frontend Mentors is a online platform that provide front-end challenges that include professional web designs. &lt;/p&gt;

&lt;p&gt;You can play with the solution &lt;a href="https://jcsmileyjr.github.io/FAQ-Accordion/"&gt;here&lt;/a&gt;. I want to add one restriction, the challenge is designed to view the responsiveness at 375px and 1440px width. Any other size and it looks dicey. This is intentional.  &lt;/p&gt;

&lt;p&gt;The goal is to build this:&lt;br&gt;
&lt;em&gt;Desktop&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DK-cPVaa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybagfpbkvj3pvva369eq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DK-cPVaa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybagfpbkvj3pvva369eq.jpg" alt="Given desktop image" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mobile&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SkFuvOBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mox0gqb5ebe949hk3ux.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SkFuvOBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mox0gqb5ebe949hk3ux.jpg" alt="Given mobile image" width="375" height="768"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h2&gt;

&lt;p&gt;First course of action was to attempt the design responsiveness aspect from the start.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EsC0rnkY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mry5z8qlyx2nbt82atrs.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EsC0rnkY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mry5z8qlyx2nbt82atrs.PNG" alt="Code for design responsiveness" width="482" height="432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;

&lt;p&gt;I realized I needed to make sure the accordion title is clickable and the content of the accordion needed to be hidden. When clicked, the content of the accordion is made visible, the accordion title's style is changed, and the arrow SVG turns 180 degrees.&lt;/p&gt;

&lt;p&gt;The first problem I faced was the functionality of opening and closing each accordion section. I couldn't get it to work properly after a night of troubleshooting. A few days later, I suddenly awoke during the night with a simpler solution that should have been the first option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nRCH2P_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9bb6oqzuw6a5xtzhr4e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nRCH2P_2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9bb6oqzuw6a5xtzhr4e.png" alt="Code to open or close the accordion" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h2&gt;

&lt;p&gt;The most difficult problem of the challenge was positioning and layering three separate images while hiding some of them. Up until now I never had to hide parts of an image.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kqO3RT5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mt82nwws2ujqdtmr77x8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kqO3RT5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mt82nwws2ujqdtmr77x8.png" alt="compare desktop versions" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h2&gt;

&lt;p&gt;This was a wonderful learning opportunity to use different sizes of the same image based on screen width. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aS1uBifc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80iu5wf3vly8o13y198e.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aS1uBifc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80iu5wf3vly8o13y198e.PNG" alt="Code of HTML 5 picture element" width="880" height="115"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5
&lt;/h2&gt;

&lt;p&gt;Unique accessibility concepts I've learned while building this custom accordion component&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The custom accordion component needed the ability to be  navigated with tabs.&lt;/li&gt;
&lt;li&gt;The header of an accordion needed to be a button since it was clickable.&lt;/li&gt;
&lt;li&gt;Since the component would collapse, there was an aria label called "aria-expanded" to learn about.&lt;/li&gt;
&lt;li&gt;I didn't need a title in the alt tag for the image because it was purely decoration.&lt;/li&gt;
&lt;li&gt;The hidden area to be open is considered a "region" and needs a "aria-labelledby" to the clickable button.&lt;/li&gt;
&lt;li&gt;A label element should be attached to a input, text-area, or select element.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BRyjo64y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kg3vypgcrvtm9qdq2ol.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BRyjo64y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kg3vypgcrvtm9qdq2ol.png" alt="Accessible code comparison" width="880" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After making these changes, my site can now be navigated with the tab button and the accordion component opened with the enter key.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-outcome"&gt;
  &lt;/a&gt;
  Final Outcome
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sh6185IE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ok039kbynupl8gj0idhm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sh6185IE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ok039kbynupl8gj0idhm.PNG" alt="Final desktop version" width="646" height="410"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-learned"&gt;
  &lt;/a&gt;
  What I learned
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Mimic an accordion object functionality without using Detail and Summary HTML5 elements. &lt;/li&gt;
&lt;li&gt;Practice CSS styling like CSS background gradient&lt;/li&gt;
&lt;li&gt;Stacking, positioning, and layering images with CSS&lt;/li&gt;
&lt;li&gt;Practice CSS functionality on the webpage like animating elements while hovering&lt;/li&gt;
&lt;li&gt;Script tags go at the bottom of the html page. I spent 30 minutes screaming "why is this not working" for nothing. &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#resources-used"&gt;
  &lt;/a&gt;
  Resources used
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/responsive-images-css/"&gt;HTML5 Responsive Images BY CSS-TRICKS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://evolvingweb.ca/blog/building-accordions-html5-details-tag-no-javascript-needed"&gt;Mimic HTML5 Accordion elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/5513382/absolute-position-and-overflowhidden"&gt;Tips on hiding and positioning images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webaim.org/techniques/keyboard/tabindex"&gt;Accessibility: Tab-index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/TR/wai-aria-practices-1.1/#accordion"&gt;Accessibility: Accordion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wave.webaim.org/"&gt;Accessibility tester&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to connect with me on &lt;a href="https://twitter.com/JCSmiley4"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/jcsmileyjr/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find the completed code &lt;a href="https://github.com/jcsmileyjr/FAQ-Accordion"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>challenge</category>
    </item>
    <item>
      <title>Creating Serverless Websites with AWS, Bref, and PHP</title>
      <author>Justin Wheeler</author>
      <pubDate>Sat, 20 Nov 2021 02:29:18 +0000</pubDate>
      <link>https://dev.to/aws-builders/creating-serverless-websites-with-aws-bref-and-php-203j</link>
      <guid>https://dev.to/aws-builders/creating-serverless-websites-with-aws-bref-and-php-203j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;I would like to start by explaining that I am going to assume you are familiar with &lt;a href="https://aws.amazon.com/"&gt;AWS&lt;/a&gt; and the following topics. If that's not the case then I would recommend you at least try to understand the basics of these topics before attempting to follow along.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/api-gateway/"&gt;API Gateway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/cloudfront/"&gt;CloudFront&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/ec2/"&gt;EC2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/ecr/"&gt;ECR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/lambda/"&gt;Lambda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/route53/"&gt;Route53&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/s3/"&gt;S3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/serverless/"&gt;Serverless&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Serverless websites on AWS are a common theme. This is expected since hosting a serverless website can have many benefits over traditional web hosting solutions that involve virtual servers. Benefits like: better scalability, lower costs, and reduced latency. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://dashbird.io/blog/business-benefits-of-serverless/"&gt;https://dashbird.io/blog/business-benefits-of-serverless/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most of these serverless websites rely on &lt;em&gt;static&lt;/em&gt; web technologies like JavaScript. This permits the simplest serverless website solution as pictured below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ul0Sb_ER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wn6cd5deldopayjxr8cm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ul0Sb_ER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wn6cd5deldopayjxr8cm.png" alt="Static Website Architecture" width="452" height="122"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problem we're aiming to solve is that this simplistic architecture does not support &lt;em&gt;dynamic&lt;/em&gt; web technologies like ASP.NET, JSP, or PHP that are still used to build incredible websites today. Websites like Etsy, Facebook, and Slack.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://trio.dev/blog/companies-using-php"&gt;https://trio.dev/blog/companies-using-php&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dynamic websites can leverage AWS to achieve serverless hosting. It just takes a couple of extra steps and a couple of extra services. Let's walk through a working solution.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#bref"&gt;
  &lt;/a&gt;
  Bref
&lt;/h2&gt;

&lt;p&gt;In the scenario of PHP, there is an amazing project called &lt;a href="https://bref.sh/"&gt;Bref&lt;/a&gt;, which we can use to simplify our configuration. With Bref we can run our PHP websites on Lambda instead of relying on services like EC2. &lt;/p&gt;

&lt;p&gt;To quote their documentation,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Bref is an open-source project that brings full support for PHP and its frameworks to AWS Lambda.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;

&lt;p&gt;The simplest implementation is to package our website as a container image and eventually deploy it to Lambda. In order to reference an image for our Lambda function, we need to upload our image to ECR first. Luckily AWS makes interacting with ECR extremely easy. Let's walk through the steps.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create Dockerfile&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# reference bref as the base image&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; bref/php-74-fpm&lt;/span&gt;

&lt;span class="c"&gt;# install composer&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;curl &lt;span class="nt"&gt;-s&lt;/span&gt; https://getcomposer.org/installer | php

&lt;span class="c"&gt;# require bref&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;php composer.phar require bref/bref

&lt;span class="c"&gt;# copy contents into expected directory&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /var/task&lt;/span&gt;

&lt;span class="c"&gt;# set handler to our index&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; _HANDLER=index.php /opt/bootstrap&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://docs.docker.com/engine/reference/builder/"&gt;https://docs.docker.com/engine/reference/builder/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/wheelers-websites/CloudGuruChallenge_20.10/blob/master/php-api/Dockerfile"&gt;https://github.com/wheelers-websites/CloudGuruChallenge_20.10/blob/master/php-api/Dockerfile&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Authenticate to ECR&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws ecr get-login-password &lt;span class="nt"&gt;--region&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AWS_REGION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; | docker login &lt;span class="nt"&gt;--username&lt;/span&gt; AWS &lt;span class="nt"&gt;--password-stdin&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AWS_ACCOUNT_ID&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.dkr.ecr.&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AWS_REGION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.amazonaws.com"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ecr/get-login-password.html"&gt;https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ecr/get-login-password.html&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.docker.com/engine/reference/commandline/login/"&gt;https://docs.docker.com/engine/reference/commandline/login/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build Your Docker Image&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AWS_ECR_REPOSITORY&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://docs.docker.com/engine/reference/commandline/build/"&gt;https://docs.docker.com/engine/reference/commandline/build/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tag Your Docker Image&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker tag &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AWS_ECR_REPOSITORY&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:latest"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AWS_ACCOUNT_ID&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.dkr.ecr.&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AWS_REGION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.amazonaws.com/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AWS_ECR_REPOSITORY&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:latest"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://docs.docker.com/engine/reference/commandline/tag/"&gt;https://docs.docker.com/engine/reference/commandline/tag/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push Your Docker Image&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker push &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AWS_ACCOUNT_ID&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.dkr.ecr.&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AWS_REGION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.amazonaws.com/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AWS_ECR_REPOSITORY&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:latest"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://docs.docker.com/engine/reference/commandline/push/"&gt;https://docs.docker.com/engine/reference/commandline/push/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--02cl_WRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ao8q0vskff4qr2skco2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--02cl_WRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ao8q0vskff4qr2skco2.jpg" alt="ECR Commands" width="744" height="763"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Find these push commands customized to your account in the ECR console&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h2&gt;

&lt;p&gt;Now that our container image is within ECR we are able to create a Lambda function that references it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EGOvlsoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcmknq0huthlb5botjyx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EGOvlsoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcmknq0huthlb5botjyx.PNG" alt="ECR Console" width="880" height="162"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GBIbi8nM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpcjv91hqucss9tcs49c.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GBIbi8nM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpcjv91hqucss9tcs49c.jpg" alt="Lambda Console" width="880" height="434"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that is done we need to use API Gateway to provide an endpoint for our function. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gvHcbvN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgg68d2xtendj7k1f116.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gvHcbvN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgg68d2xtendj7k1f116.PNG" alt="API Gateway Console" width="880" height="305"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we can reference that endpoint as a CloudFront origin to serve our website. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GilplAIX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbewp7iyo0b0pmxwlzp3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GilplAIX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbewp7iyo0b0pmxwlzp3.PNG" alt="CloudFront Origins" width="880" height="144"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hc1fZGeI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odje6tv09pkxbqz348f1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hc1fZGeI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odje6tv09pkxbqz348f1.PNG" alt="CloudFront Behaviors" width="880" height="148"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we can optimize this architecture by uploading our static content to S3 and serving that content with a separate origin.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Um13UtKh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ozrhrut6r6pijg34rqr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Um13UtKh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ozrhrut6r6pijg34rqr.png" alt="PHP Diagram" width="880" height="243"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#cicd"&gt;
  &lt;/a&gt;
  CI/CD
&lt;/h2&gt;

&lt;p&gt;As we all know that websites change regularly, I wanted to mention &lt;a href="https://aws.amazon.com/devops/continuous-integration/"&gt;Continuous Integration&lt;/a&gt; and &lt;a href="https://aws.amazon.com/devops/continuous-delivery/"&gt;Continuous Deployment&lt;/a&gt; briefly. I would implement a process to build and update the container image in ECR and on Lambda when code changes are pushed to a Git repository. This is crucial to keep your environment current with your Git repository while avoiding manual deployments. Manual deployments are error-prone and completely avoidable. The image creation and ECR updates can easily be done by repeating the steps outlined above when the source changes in a script. Following those steps with another like below we can update the Lambda function automatically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws lambda update-function-code &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--function-name&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AWS_LAMBDA_FUNCTION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--image-uri&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AWS_ACCOUNT_ID&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.dkr.ecr.&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AWS_REGION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.amazonaws.com/&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AWS_ECR_REPOSITORY&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:latest"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--region&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;AWS_REGION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lambda/update-function-code.html"&gt;https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lambda/update-function-code.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you're new to CI/CD then I would recommend these great resources to get started. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/codepipeline/"&gt;AWS CodePipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/actions"&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We started by discussing the problem of hosting dynamic websites using serverless technology. Then we discussed Bref and Docker, which both help in hosting a serverless version of PHP. Then we walked through the architecture required. We pushed our container image to ECR and deployed our PHP code as a Lambda function. Then we created an API Gateway endpoint to invoke our Lambda function over HTTP. Finally, we uploaded our static content to S3 and placed both origins behind a CloudFront distribution. To conclude I would like to reiterate that dynamic websites can enjoy the benefits of serverless and I wholeheartedly believe it's worth the effort.&lt;/p&gt;

&lt;p&gt;Please find this live serverless PHP website that I developed as a living example.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wheelerrecommends.com/"&gt;https://wheelerrecommends.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you liked this content maybe you would like to &lt;a href="https://www.buymeacoffee.com/wheelersweb"&gt;Buy Me a Coffee&lt;/a&gt; or connect with me on &lt;a href="https://www.linkedin.com/in/wheelers-websites/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>bref</category>
      <category>php</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Update Package Version in Package.json</title>
      <author>Pankaj Kumar</author>
      <pubDate>Sat, 20 Nov 2021 02:14:36 +0000</pubDate>
      <link>https://dev.to/pankajkumar/update-package-version-in-packagejson-57g</link>
      <guid>https://dev.to/pankajkumar/update-package-version-in-packagejson-57g</guid>
      <description>&lt;p&gt;As a developer, you might have seen some warning of deprecation over the terminal when you use old versions of packages. This situation mainly occurs when you work on a long time project and updating an existing project. Since in an application, there is a need of so many packages and its very difficult to update each package one by one.&lt;/p&gt;

&lt;p&gt;For the first time, When I came to such a situation I was a beginner and I do the task manually. But next time when I got time to search this over google I found a very easy way to update all the code at once.&lt;/p&gt;

&lt;p&gt;In this article, I am going to explain the way in which is most easy to update the package in our application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-outdated-package"&gt;
  &lt;/a&gt;
  Check outdated package
&lt;/h2&gt;

&lt;p&gt;For checking the list of the outdated package in our application which needs to update to the latest version. We can use below command to see the list of outdated package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
npm outdated

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the above command we can see the list of outdated package with their versions and also the latest versions in the application. See the below image:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Km0llE_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jsonworld.com/images/npm-outdated-packages.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Km0llE_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jsonworld.com/images/npm-outdated-packages.png" alt="npm outdated packages" width="634" height="176"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#ways-to-update-npm-package"&gt;
  &lt;/a&gt;
  Ways to update NPM package
&lt;/h2&gt;

&lt;p&gt;There are two ways for updating any package :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using npm update&lt;/li&gt;
&lt;li&gt;Using npm-check-update package &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#using-npm-update"&gt;
  &lt;/a&gt;
  Using npm update
&lt;/h2&gt;

&lt;p&gt;We need to write the below command and all the packages will be updated within a minute based on number of packages and internet speed, just write command and your package will be updated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
npm update

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-npmupdatecheck-package"&gt;
  &lt;/a&gt;
  Using npm-update-check package
&lt;/h2&gt;

&lt;p&gt;It works same as npm update command. This package is available at npmjs.org.The difference is that it's a utility that automatically adjusts packages which are listed into package.json file , whenever any updates are required. For that we need to install it via command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;

npm install -g npm-check-updates


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After installing the above package to a global location, now we will be able to update packages automatically. The next step is to update all the packages by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
ncu -u

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally,  install it via npm install.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jsonworld.com/articles"&gt;Click here&lt;/a&gt; to find more content on JavaScript libraries/frameworks.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>npm</category>
    </item>
    <item>
      <title>Oracle Cloud free tier: Set up a free web Visual Studio Code</title>
      <author>Juan Carlos García Martínez</author>
      <pubDate>Sat, 20 Nov 2021 01:16:20 +0000</pubDate>
      <link>https://dev.to/thewraven/oracle-cloud-free-tier-set-up-a-free-web-visual-studio-code-450n</link>
      <guid>https://dev.to/thewraven/oracle-cloud-free-tier-set-up-a-free-web-visual-studio-code-450n</guid>
      <description>&lt;p&gt;Using the free tier of Oracle Cloud, you can create an instance with up to 4 cores and 24 GB of RAM! That's enough for most of my development tasks, and this comes included in Free Tier!.&lt;br&gt;
If you can't switch to ARM architecture, there is option for 2 VMs with 1-core AMD x64 and 1 GB of RAM. &lt;/p&gt;

&lt;p&gt;This kind of setup might be useful if you're someone that wants to have a development environment on-the-go, and code in your iPad or a laptop with limited resources, or if you're someone who likes to experiment just like me.&lt;/p&gt;

&lt;p&gt;In this guide, we will configure a VM with an Ampere ARM processor to run visual studio code on the web.&lt;/p&gt;



&lt;p&gt;First of all, you need to create an account in &lt;a href="https://www.oracle.com/cloud/sign-in.html"&gt;Oracle Cloud&lt;/a&gt;, and remember to select the "Always free" option, that does not asks you for a credit card. This is way more beginner-friendy than other clouds, such as AWS that don't allow a hard-limit on budgets.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating an ARM VM&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Go to Compute &amp;gt; Instances&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BghQ5nHR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ani2tvmq7a44rzj6r8lb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BghQ5nHR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ani2tvmq7a44rzj6r8lb.png" alt="Instance section is under Compute section" width="880" height="605"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Push "Create an Instance", and a new dialog will appear.&lt;/p&gt;

&lt;p&gt;First, you'll need to input a name for the instance.&lt;/p&gt;

&lt;p&gt;Next, you can choose the OS image and the VM shape. I choose Ubuntu for this one, and also used Ampere ARM instance type, which you can max out to 4CPUs with 24GB of RAM! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8RCeslw4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ue3l911r4fn9bcvyvx7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8RCeslw4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ue3l911r4fn9bcvyvx7.png" alt="You can choose over a variety of Linux distros, and there is also a free tier for x86 instances" width="880" height="649"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll also need to setup the SSH keys you have, or if you prefer you can also create a new one. In this case, I'll use the keys I already have&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RdN7RXpM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y3niiy2gqjmmyqyphd7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RdN7RXpM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y3niiy2gqjmmyqyphd7.png" alt="If you do want to create a new pair of SSH keys, pick the 'Generate a key pair for me' option" width="880" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click Create, and the instance will start provisioning&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s-ZQDsWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xd4b09471pr2cldr4bez.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-ZQDsWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xd4b09471pr2cldr4bez.png" alt="Status of the VM is now Running, so you're now able to log in through SSH" width="880" height="138"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once your VM state is &lt;em&gt;Running&lt;/em&gt;, connect to the instance through SSH, using your local terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh ubuntu@${PUBLIC_IP}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First and foremost, let's update the packages already installed with the following commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update

&lt;span class="nb"&gt;sudo &lt;/span&gt;apt upgrade &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Configuring code-server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Then, let's install &lt;a href="https://github.com/cdr/code-server"&gt;code-server&lt;/a&gt; , which allow us to run vscode as a web server in this instance and connect from our local machines.&lt;/p&gt;

&lt;p&gt;Copy the following into the remote session: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl -fsSL [https://code-server.dev/install.sh](https://code-server.dev/install.sh) | sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You'll see something similar to this in your shell:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Ubuntu 20.04.3 LTS
Installing v3.12.0 of the arm64 deb package from GitHub.

- Reusing ~/.cache/code-server/code-server_3.12.0_arm64.deb
- &lt;span class="nb"&gt;sudo &lt;/span&gt;dpkg &lt;span class="nt"&gt;-i&lt;/span&gt; ~/.cache/code-server/code-server_3.12.0_arm64.deb
&lt;span class="o"&gt;(&lt;/span&gt;Reading database ... 112463 files and directories currently installed.&lt;span class="o"&gt;)&lt;/span&gt;
Preparing to unpack .../code-server_3.12.0_arm64.deb ...
Unpacking code-server &lt;span class="o"&gt;(&lt;/span&gt;3.12.0&lt;span class="o"&gt;)&lt;/span&gt; over &lt;span class="o"&gt;(&lt;/span&gt;3.12.0&lt;span class="o"&gt;)&lt;/span&gt; ...
Setting up code-server &lt;span class="o"&gt;(&lt;/span&gt;3.12.0&lt;span class="o"&gt;)&lt;/span&gt; ...

deb package has been installed.

To have systemd start code-server now and restart on boot:
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; &lt;span class="nt"&gt;--now&lt;/span&gt; code-server@&lt;span class="nv"&gt;$USER&lt;/span&gt;
Or, &lt;span class="k"&gt;if &lt;/span&gt;you don&lt;span class="s1"&gt;'t want/need a background service you can run:
code-server
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this, execute in your terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;code-server&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;this will create a default configuration and then start an HTTP server at port 8080. We need to make some changes to the configuration before code is ready to use.&lt;/p&gt;

&lt;p&gt;Now, stop the running server with &lt;code&gt;Ctrl+C&lt;/code&gt;, then open the configuration file to enable the self-signed TLS certificate, and also run in the default HTTPS port (443).&lt;/p&gt;

&lt;p&gt;Open the  &lt;code&gt;~/.config/code-server/config.yaml&lt;/code&gt; file, and perform two changes in this YAML file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change the &lt;code&gt;cert&lt;/code&gt; field to &lt;strong&gt;true.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Change the &lt;code&gt;bind-addr&lt;/code&gt; field to &lt;code&gt;0.0.0.0:443&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before starting the server, we need to give proper permissions for the server to run in port 443 and allow the incoming traffic from the internet.&lt;/p&gt;

&lt;p&gt;Let's use the &lt;a href="https://man7.org/linux/man-pages/man8/setcap.8.html"&gt;setcap&lt;/a&gt; command to allow this binary to use the privileged port 443, without running with complete root permissions.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo setcap cap_net_bind_service=+ep /usr/lib/code-server/lib/node&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, we will enable the &lt;code&gt;code-server&lt;/code&gt; service and start it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; &lt;span class="nt"&gt;--now&lt;/span&gt; code-server@&lt;span class="nv"&gt;$USER&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl start code-server@ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Verify that the service is now running &lt;/p&gt;

&lt;p&gt;&lt;code&gt;systemctl status code-server@ubuntu.service&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Your console will print out something similar to this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;● code-server@ubuntu.service - code-server
     Loaded: loaded &lt;span class="o"&gt;(&lt;/span&gt;/lib/systemd/system/code-server@.service&lt;span class="p"&gt;;&lt;/span&gt; enabled&lt;span class="p"&gt;;&lt;/span&gt; vendor preset: enabled&lt;span class="o"&gt;)&lt;/span&gt;
     Active: active &lt;span class="o"&gt;(&lt;/span&gt;running&lt;span class="o"&gt;)&lt;/span&gt; since Mon 2021-11-15 23:41:32 UTC&lt;span class="p"&gt;;&lt;/span&gt; 3min 46s ago
   Main PID: 34764 &lt;span class="o"&gt;(&lt;/span&gt;node&lt;span class="o"&gt;)&lt;/span&gt;
      Tasks: 22 &lt;span class="o"&gt;(&lt;/span&gt;limit: 21304&lt;span class="o"&gt;)&lt;/span&gt;
     Memory: 40.2M
     CGroup: /system.slice/system-code&lt;span class="se"&gt;\x&lt;/span&gt;2dserver.slice/code-server@ubuntu.service
             ├─34764 /usr/lib/code-server/lib/node /usr/lib/code-server
             └─34783 /usr/lib/code-server/lib/node /usr/lib/code-server

Nov 15 23:41:32 vscode-remote systemd[1]: Starting code-server...
Nov 15 23:41:32 vscode-remote systemd[1]: Started code-server.
Nov 15 23:41:33 vscode-remote code-server[34783]: &lt;span class="o"&gt;[&lt;/span&gt;2021-11-15T23:41:33.119Z] info  code-server 3.12.0 b37ff28a0a582aee84a8f961755d0cb40a4081db
Nov 15 23:41:33 vscode-remote code-server[34783]: &lt;span class="o"&gt;[&lt;/span&gt;2021-11-15T23:41:33.121Z] info  Using user-data-dir ~/.local/share/code-server
Nov 15 23:41:33 vscode-remote code-server[34783]: &lt;span class="o"&gt;[&lt;/span&gt;2021-11-15T23:41:33.144Z] info  Using config file ~/.config/code-server/config.yaml
Nov 15 23:41:33 vscode-remote code-server[34783]: &lt;span class="o"&gt;[&lt;/span&gt;2021-11-15T23:41:33.145Z] info  HTTP server listening on http://0.0.0.0:443
Nov 15 23:41:33 vscode-remote code-server[34783]: &lt;span class="o"&gt;[&lt;/span&gt;2021-11-15T23:41:33.145Z] info    - Authentication is enabled
Nov 15 23:41:33 vscode-remote code-server[34783]: &lt;span class="o"&gt;[&lt;/span&gt;2021-11-15T23:41:33.145Z] info      - Using password from ~/.config/code-server/config.yaml
Nov 15 23:41:33 vscode-remote code-server[34783]: &lt;span class="o"&gt;[&lt;/span&gt;2021-11-15T23:41:33.145Z] info    - Using certificate &lt;span class="k"&gt;for &lt;/span&gt;HTTPS: ~/.local/share/code-server/localhost.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;** Configure the VNC Ingress rules **&lt;/p&gt;

&lt;p&gt;Even if the server is running, we're not able to access it from the external IP address, because of the firewall rules are not allowing the incoming connections.&lt;/p&gt;

&lt;p&gt;Let's configure the network rules in order to allow connections to the running port.&lt;/p&gt;

&lt;p&gt;Go back to Oracle Cloud web UI, go to Virtual Cloud Networks:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uQa7mAwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k632ji7unp9ka1m9203u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uQa7mAwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k632ji7unp9ka1m9203u.png" alt="Firewall rules are under Networking section" width="880" height="523"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a &lt;code&gt;vnc&lt;/code&gt; created by default, click on it and next click on the only subnet it has.&lt;/p&gt;

&lt;p&gt;There is a section called Security Lists. Click on the only security list and next, click on &lt;code&gt;Add Ingress Rules&lt;/code&gt; and configure the fields as displayed below: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oWcfDfu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zivnx3w7635pv4ogmgc5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oWcfDfu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zivnx3w7635pv4ogmgc5.png" alt="This is the section when we allow inbound or outbound traffic though Internet, or another networks." width="880" height="770"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will allow any TCP connection for 443 port (HTTPS) from any IP address (that is what CIDR means)&lt;/p&gt;

&lt;p&gt;Click again on &lt;code&gt;Add Ingress Rules&lt;/code&gt; inside the dialog.&lt;/p&gt;

&lt;p&gt;And after this, we finished the configuration for the server.&lt;/p&gt;

&lt;p&gt;You can now use the public IP for your instance in your browser to connect to your VS Code web server:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://PUBLIC_IP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You'll see a warning about a self-signed certificate. That is fine right now, because we don't have a public domain linked to this IP address, and &lt;code&gt;code-server&lt;/code&gt; baked a self-signed one. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1R3KM7WQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jjeup64xeaouzhf7bcws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1R3KM7WQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jjeup64xeaouzhf7bcws.png" alt="We're almost there! The vscode web is up and running" width="880" height="808"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go grab the password specified in&lt;code&gt;~/.config/code-server/config.yaml&lt;/code&gt; inside the VM instance, and paste it in the password field.&lt;/p&gt;

&lt;p&gt;Give it a few seconds and then you'll have a complete version of visual studio code running in your browser, with a VM up to 4 cores  / 24 GB of RAM 🎉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZSPXCwbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op5rrv9cy9qjhytkuc3m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZSPXCwbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op5rrv9cy9qjhytkuc3m.png" alt="After this setup, it's up and running!" width="880" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you find useful this guide, I'll keep posting other uses for your free tier Oracle Cloud, and hope this attracts more people that is starting in the cloud journey.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>cloud</category>
      <category>oracle</category>
    </item>
    <item>
      <title>Getting Started with Lighthouse User Flows</title>
      <author>Maxi Ferreira</author>
      <pubDate>Fri, 19 Nov 2021 22:37:52 +0000</pubDate>
      <link>https://dev.to/charca/getting-started-with-lighthouse-user-flows-24dm</link>
      <guid>https://dev.to/charca/getting-started-with-lighthouse-user-flows-24dm</guid>
      <description>&lt;p&gt;The Google Chrome Team recently announced two big features coming to &lt;a href="https://developer.chrome.com/blog/lighthouse-9-0/"&gt;Lighthouse 9.0&lt;/a&gt; and Chrome DevTools: User Flow Reports in Lighthouse, and a new Recorder panel in DevTools that can capture and replay user journeys with just a few clicks.&lt;/p&gt;

&lt;p&gt;I've been experimenting with both of these tools for the past couple of weeks, and I've been genuinely impressed by how powerful they are and the possibilities they bring when you use them together.&lt;/p&gt;

&lt;p&gt;In this post, I want to share a quick overview of what these features are and how they work, and finally walk you through an example that combines them to unlock their full potential. Let's dive in!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lighthouse-user-flow-reports"&gt;
  &lt;/a&gt;
  Lighthouse User Flow Reports
&lt;/h2&gt;

&lt;p&gt;Unlike traditional Lighthouse reports (which only audit a website during its initial page-load), user flow reports can analyze a page at any point during its life-cycle. We can take "snapshots" of a page at a particular moment, or even collect metrics over a period of time that includes user interactions.&lt;/p&gt;

&lt;p&gt;User flows are available as a new API in the &lt;a href="https://github.com/GoogleChrome/lighthouse"&gt;Lighthouse Node module&lt;/a&gt;, and we can use them alongside tools like Puppeteer which allow us to control the browser and trigger synthetic events programmatically.&lt;/p&gt;

&lt;p&gt;Here's an example of how we can generate a user flow report using Puppeteer and the Lighthouse API (you can see the complete code &lt;a href="https://github.com/Charca/lighthouse-user-flows/blob/main/examples/navigation-report.js"&gt;here&lt;/a&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;captureReport&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Puppeteer initialization&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;puppeteer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// Start user flow&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lighthouse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startFlow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My User Flow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// ... Caputure reports here ...&lt;/span&gt;

  &lt;span class="c1"&gt;// End user flow&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generateReport&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Within a user flow, there are three types of reports that we can capture:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Navigations&lt;/strong&gt; – to audit cold and warm page-loads,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Snapshots&lt;/strong&gt; – to audit the exact state of the page at any point in time, and&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Timespans&lt;/strong&gt; – to audit a page during any period of time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We're going to see concrete examples of each one of them in the last section, but here's a quick overview of what they do and how their APIs look like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hs5nKvP5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ukft25nj3v3e508i3s8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hs5nKvP5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ukft25nj3v3e508i3s8.png" alt="Navigation Report Diagram" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#navigations"&gt;
  &lt;/a&gt;
  Navigations
&lt;/h3&gt;

&lt;p&gt;These are the standard Lighthouse reports that audit a page during page-load, except that now we can measure both cold page-loads (clearing caches and local storage), and warm page-loads (without clearing the cache). We can even capture multiple navigation reports as part of the same user flow report see how they compare.&lt;/p&gt;

&lt;p&gt;This is how we can capture a navigation report with this new API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.nytimes.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also give the report a descriptive name with the &lt;code&gt;stepName&lt;/code&gt; option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.nytimes.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;stepName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cold navigation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we can capture a warm load by setting the &lt;code&gt;disableStorageReset&lt;/code&gt; flag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.nytimes.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;stepName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Warm navigation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;configContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;settingsOverrides&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;disableStorageReset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_hHNMifj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onfwjd27wm5x8t2lg2z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_hHNMifj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onfwjd27wm5x8t2lg2z8.png" alt="Snapshot Report Diagram" width="880" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#snapshots"&gt;
  &lt;/a&gt;
  Snapshots
&lt;/h3&gt;

&lt;p&gt;We can take a snapshot at any point during the user flow, and Lighthouse will analyze the page in its exact state. This is useful for when we want to audit a particular state of the UI that only appears after a user interaction – like a modal that shows up when the user clicks a button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;snapshot&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;stepName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Checkout modal opened&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we're only analyzing a single moment and not a period of time, the metrics in the snapshot report are not terribly useful for performance, but they're a great way to get accessibility and best practices insights based on the state of the page after the user interacts with it, which is something that wasn't possible before.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1OBzaus--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1k51r2k1e7oje0v1jjjq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1OBzaus--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1k51r2k1e7oje0v1jjjq.png" alt="Timespan Report Diagram" width="880" height="379"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#timestamps"&gt;
  &lt;/a&gt;
  Timestamps
&lt;/h3&gt;

&lt;p&gt;These reports audit a website over a period of time, which can contain user interactions as well. From a performance perspective, they're useful to measure Total Blocking Time (TBT) and Cumulative Layout Shift (CLS) while a user interacts with a page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startTimespan&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;stepName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Checkout flow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// ... user interactions here ...&lt;/span&gt;

&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endTimespan&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Measuring CLS beyond the initial page is particularly useful because it gives us a more accurate measure of this metric in the lab, that is closer to what we'll see in our field data.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;For a much more detailed overview of Lighthouse user flows with complete code examples, I highly recommend checking out the &lt;a href="https://web.dev/lighthouse-user-flows/"&gt;official tutorial&lt;/a&gt; on web.dev.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WdeWwpwc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7gihdl0e2do53m4ud57.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WdeWwpwc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7gihdl0e2do53m4ud57.png" alt="User Flow Reports Explained" width="880" height="743"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#chrome-devtools-recorder-panel"&gt;
  &lt;/a&gt;
  Chrome DevTools Recorder Panel
&lt;/h2&gt;

&lt;p&gt;The Recorder panel is a new feature coming to Chrome DevTools (currently available in Chrome 97), which allow us to record and replay user journeys with just a few clicks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GpFmmbmF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0xvc1wz603z02q2hvb7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GpFmmbmF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0xvc1wz603z02q2hvb7.gif" alt="Chrome DevTools Recorder Panel" width="800" height="552"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the time of writing, the Recorder panel is only available in the &lt;a href="https://www.google.com/chrome/dev/"&gt;Chrome Dev&lt;/a&gt; and &lt;a href="https://www.google.com/chrome/canary/"&gt;Canary&lt;/a&gt; builds, so make sure you have one of those installed if you'd like to follow along.&lt;/p&gt;

&lt;p&gt;You can find the Recorder panel in DevTools under &lt;strong&gt;More options&lt;/strong&gt; &amp;gt; &lt;strong&gt;More tools&lt;/strong&gt; &amp;gt; &lt;strong&gt;Recorder&lt;/strong&gt;, or by opening the Command Menu (with &lt;strong&gt;Cmd + Shift + P&lt;/strong&gt;) and searching for &lt;strong&gt;Recorder&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qcbLc2Uw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwbs6m4uhr77mqs26d0p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qcbLc2Uw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwbs6m4uhr77mqs26d0p.png" alt="Recorder How To Find It" width="880" height="642"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the Recorder panel opened, you can click the &lt;strong&gt;Start new recording&lt;/strong&gt; button, give the recording a name, and start interacting with the page in any way you want (for example, completing an sign up or checkout flow). Once you're done with the recording, you'll be able to replay it, modify it, run a performance profile for the entire journey, or export the recording as a Puppeteer script.&lt;/p&gt;

&lt;p&gt;This last feature is what we're mostly interested in. We can use the auto-generated Puppeteer script as a starting point for creating user flow reports with Lighthouse, which will save us a ton of time and effort. We'll explore this approach next.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lighthouse-reports-on-user-journeys"&gt;
  &lt;/a&gt;
  Lighthouse Reports on User Journeys
&lt;/h2&gt;

&lt;p&gt;Now that we've seen what Lighthouse user flow reports are and how we can record user journeys and export them as Puppeteer scripts with the DevTools Recorder panel, let's explore how we can use them together to capture a user flow report based on a user journey.&lt;/p&gt;

&lt;p&gt;The process is simple: we'll record a user journey in DevTools, export it as a Puppeteer script, and we'll modify the script by adding a few calls to the Lighthouse user flow APIs in the right places. In the end, we'll be able to run the script with Node.js and get shiny new User Flow Report back.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-project-setup"&gt;
  &lt;/a&gt;
  1. Project setup
&lt;/h3&gt;

&lt;p&gt;The first thing we need to do is initialize a new npm project (ideally in a new folder) and install the dependencies we're going to be using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir lighthouse-reports
cd lighthouse-reports
npm init -y
npm install lighthouse puppeteer open --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll use the &lt;code&gt;open&lt;/code&gt; package so that we can automatically open the HTML report in the browser once the script finishes, but this is an optional dependency (and you definitely don't need it if your running the script in CI).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-record-and-export-a-user-journey"&gt;
  &lt;/a&gt;
  2. Record and export a user journey
&lt;/h3&gt;

&lt;p&gt;For this tutorial, I'm going to use this &lt;a href="https://coffee-cart.netlify.app/"&gt;coffee shopping&lt;/a&gt; demo app (borrowed from Google's documentation) to record a simple user journey: adding a couple of items to the cart, navigating to the shopping cart, and going through the (fake) checkout process.&lt;/p&gt;

&lt;p&gt;I encourage you to do something similar to keep things simple, but you can of course use any website you want and go wild with your user journey. Simply hit the "Start recording" button on the Recorder panel and start interacting with the page by clicking around, scrolling, or filling out forms. Make sure you stop the recording once you're done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gcTlImKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpyfs790g3t99dkmrikl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gcTlImKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpyfs790g3t99dkmrikl.gif" alt="Example Recording Animation" width="800" height="581"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you've finished recording, make sure you can replay it by hitting the &lt;strong&gt;Replay&lt;/strong&gt; button on the top right. &lt;strong&gt;This is important.&lt;/strong&gt; If the flow can't be replayed consistently, you might run into issues generating the Lighthouse reports later on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For more details on how to use the Recorder panel, check you &lt;a href="https://developer.chrome.com/docs/devtools/recorder/"&gt;this great article&lt;/a&gt; in the Chrome DevTools documentation site.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you're happy with your recording, export the user flow as a Puppeteer script by clicking the Export icon on the top (be careful not to click the delete icon by mistake, they're dangerously close together!), and save it in the project folder as &lt;code&gt;user-flow.js&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-edit-the-script"&gt;
  &lt;/a&gt;
  3. Edit the script
&lt;/h3&gt;

&lt;p&gt;Now comes the fun part. If you open the &lt;code&gt;user-flow.js&lt;/code&gt; script, you'll find that it consists of a bunch of utility functions at the top, followed by a series of code blocks, each one representing a "step" in our user journey (clicks, scrolls, keyboard events, etc.)&lt;/p&gt;

&lt;p&gt;We're going to make a few modifications to this script to generate a Lighthouse user flow report consisting of four "sub-reports":&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two navigation reports (to measure both cold and warm page-loads),&lt;/li&gt;
&lt;li&gt;A snapshot report to capture the state of the page when the checkout modal is open, and&lt;/li&gt;
&lt;li&gt;A timespan report to capture the entire checkout flow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might find it easier to see the modifications to the script in &lt;a href="https://github.com/Charca/lighthouse-user-flows/blob/main/examples/user-flow-modified.js"&gt;this annotated file&lt;/a&gt; or in &lt;a href="https://github.com/Charca/lighthouse-user-flows/compare/modify-script"&gt;this diff&lt;/a&gt;, but if you prefer a step-by-step guide, just read on and code along!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#31-import-dependencies"&gt;
  &lt;/a&gt;
  3.1 Import dependencies
&lt;/h4&gt;

&lt;p&gt;First off, let's import the rest of our dependencies right after the &lt;code&gt;puppeteer&lt;/code&gt; require in the first line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lighthouse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lighthouse/lighthouse-core/fraggle-rock/api.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#32-create-the-user-flow"&gt;
  &lt;/a&gt;
  3.2 Create the user flow
&lt;/h4&gt;

&lt;p&gt;Right at the top of the script's main function, you'll find a couple of lines that create the Puppeteer &lt;code&gt;browser&lt;/code&gt; and &lt;code&gt;page&lt;/code&gt; instances. We'll create our user &lt;code&gt;flow&lt;/code&gt; instance right after that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lighthouse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startFlow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My User Flow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#33-add-the-navigation-reports"&gt;
  &lt;/a&gt;
  3.3 Add the Navigation reports
&lt;/h4&gt;

&lt;p&gt;Now we need to scroll down to where the code blocks start. We'll add the two navigation reports right after the block with the &lt;code&gt;targetPage.goto('https://coffee-cart.netlify.app/')&lt;/code&gt; call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Cold navigation report&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;targetPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://coffee-cart.netlify.app/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;stepName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cold navigation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Warm navigation report&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;targetPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://coffee-cart.netlify.app/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;stepName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Warm navigation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;configContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;settingsOverrides&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;disableStorageReset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#34-add-the-snapshot-report"&gt;
  &lt;/a&gt;
  3.4 Add the Snapshot report
&lt;/h4&gt;

&lt;p&gt;You can add this call between any two steps in the script, but for demonstration purposes, we want to take the snapshot once the Checkout modal opens. Add the following code right after the code block with the &lt;code&gt;waitForSelector&lt;/code&gt; call that waits for the &lt;code&gt;"aria/Proceed to checkout"&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;snapshot&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;stepName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Checkout modal opened&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#35-add-the-timespan-report"&gt;
  &lt;/a&gt;
  3.5 Add the Timespan report
&lt;/h4&gt;

&lt;p&gt;We'll start the timespan right after the &lt;code&gt;snapshot()&lt;/code&gt; call from the previous step:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startTimespan&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;stepName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Checkout flow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we'll end it at the end of the flow, right before the call to &lt;code&gt;browser.close()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endTimespan&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#36-generate-the-user-flow-report"&gt;
  &lt;/a&gt;
  3.6 Generate the user flow report
&lt;/h4&gt;

&lt;p&gt;Finally, we need to generate the report, save it as an HTML file, and open it in the browser. Add the following lines right before the end of the main function (after the call to &lt;code&gt;browser.close()&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reportPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/user-flow.report.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;report&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generateReport&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reportPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;report&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reportPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we're done! If you save and run the script (with &lt;code&gt;node user-flow.js&lt;/code&gt;), you should see the report coming up on your browser after a few moments. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0k1Xwtjb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkfz3wo97n8a3sunp7vl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0k1Xwtjb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkfz3wo97n8a3sunp7vl.png" alt="User Flow Report Screenshot" width="880" height="629"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you didn't follow the steps with me but would like to see how the report looks like, you can open the live report and play with it &lt;a href="https://lighthouse-user-flow-report.netlify.app/"&gt;here&lt;/a&gt;. You'll see a timeline with our four reports in the order we captured them, and you can click in each one for a more detailed view. How cool is that?!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;Lighthouse user flows and the new DevTools Recorder panel are like milk and cookies: they're both amazing on their own, but they're definitely better together.&lt;/p&gt;

&lt;p&gt;The new Lighthouse APIs enable new ways to measure the performance and accessibility of our websites, generating lab data that is more representative of what real users experience in the field. And with the auto-generated Puppeteer scripts, the process of capturing these data is a breeze.&lt;/p&gt;

&lt;p&gt;The Recorder panel also has many interesting use cases in addition to measuring performance. We can use the Puppeteer scripts as a starting point for running automated end-to-end tests, or even use them directly as a quick way to assert that user journeys can be completed correctly. And of course, since these are just Node scripts, we can run them as an additional step in our CI pipelines.&lt;/p&gt;

&lt;p&gt;Finally, I think it's important to keep in mind that these features are still quite young, so you may run into a few issues here and there (if you do, be sure to share your feedback with the Chrome team!). I still encourage you to give them a try and explore the cool things you can do with them.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;For more information about Lighthouse user flow reports, check out the &lt;a href="https://web.dev/lighthouse-user-flows/"&gt;official tutorial&lt;/a&gt; on web.dev.&lt;/li&gt;
&lt;li&gt;For detailed instructions about the DevTools Recorder panel, take a look at the &lt;a href="https://developer.chrome.com/docs/devtools/recorder/"&gt;official documentation&lt;/a&gt; on Chrome Developers.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Have you tried this? Did I make a mistake? Please let me know in the comments!&lt;/p&gt;

&lt;p&gt;Thank you for reading ❤️&lt;/p&gt;

</description>
      <category>performance</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>webperf</category>
    </item>
    <item>
      <title>Optimization of images with FastAPI</title>
      <author>Nelson Adonis Hernandez</author>
      <pubDate>Fri, 19 Nov 2021 22:32:39 +0000</pubDate>
      <link>https://dev.to/nelsoncode/optimization-of-images-with-fastapi-an2</link>
      <guid>https://dev.to/nelsoncode/optimization-of-images-with-fastapi-an2</guid>
      <description>&lt;p&gt;In this example we will see how to upload images and use background tasks to generate resolutions for different &lt;br&gt;
devices&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dependencies"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip3 &lt;span class="nb"&gt;install &lt;/span&gt;FastAPI uvicorn Pillow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#background-tasks"&gt;
  &lt;/a&gt;
  Background Tasks
&lt;/h3&gt;

&lt;p&gt;You can define background tasks to be run after returning a response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UploadFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BackgroundTasks&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.responses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSONResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;getcwd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;PATH_FILES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/"&lt;/span&gt;


&lt;span class="c1"&gt;# RESIZE IMAGES FOR DIFFERENT DEVICES
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resize_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sizes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="s"&gt;"width"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1280&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"height"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;720&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"width"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;640&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"height"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;480&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sizes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;size_defined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'width'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'height'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PATH_FILES&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;thumbnail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size_defined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PATH_FILES&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'height'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"_"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/upload/file"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upload_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;background_tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BackgroundTasks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UploadFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(...)):&lt;/span&gt;

    &lt;span class="c1"&gt;# SAVE FILE ORIGINAL
&lt;/span&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PATH_FILES&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"wb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;myfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;myfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;myfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# RESIZE IMAGES
&lt;/span&gt;    &lt;span class="n"&gt;background_tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resize_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JSONResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dogs.jpg # Original Image

720_dogs.jpg # Resolution 1280 x 720

480_dogs.jpg # Resolution 640 x 480
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example in Github Gist&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/nelsoncode019/35910eff9c09ca015cfb4748be345133"&gt;https://gist.github.com/nelsoncode019/35910eff9c09ca015cfb4748be345133&lt;/a&gt;&lt;/p&gt;

</description>
      <category>fastapi</category>
      <category>python</category>
      <category>backend</category>
      <category>nelsoncode</category>
    </item>
    <item>
      <title>GM from Tech by Choice</title>
      <author>Valerie Phoenix ✊🏾</author>
      <pubDate>Fri, 19 Nov 2021 22:27:06 +0000</pubDate>
      <link>https://dev.to/digitalblkhippy/gm-from-tech-by-choice-eo1</link>
      <guid>https://dev.to/digitalblkhippy/gm-from-tech-by-choice-eo1</guid>
      <description>&lt;p&gt;The mission of Tech by Choice should be one that everyone supports and benefits from. To see our vision come true, we must be transparent and community-driven. There should never be one person filling every role to keep things going.&lt;/p&gt;

&lt;p&gt;Being a membership-based nonprofit with a flat org structure is not enough to support the vision I have for the Tech by Choice community. I spent the last year searching for ways I can genuinely help and sustain the growth of Tech by Choice. To my surprise web 3 has offered a solution through its support of Decentralized Autonomous Nonprofit organizations &lt;a href="https://medium.com/blockchannel/what-is-a-dao-how-do-they-benefit-consumers-f7a0a862f3dc"&gt;Read more about DAOs here&lt;/a&gt;. We’ve partnered with a Black female NFT artist during the giving season that will create a generative art project to highlight the importance community has with ensuring tech is diverse &lt;a href="http://www.communiteanft.art/"&gt;view the project here&lt;/a&gt;. We will use a percentage of the funds raised to work with a DAO consultant to support the structural change of Tech by Choice. We will continue to behold our nonprofit status, but our structure internally will change to better support the community and our mission.&lt;/p&gt;

&lt;p&gt;Historically when an organization makes a significant change like this, people fear that they will water down what they do. For us, this is the complete opposite. This change will help us support our members more directly and communally. To prove this point, the very first proposal I will submit for our community is to find a way to help our members deal with the &lt;a href="https://www.vox.com/the-highlight/22323477/personal-finance-black-tax-racial-wealth-gap"&gt;Black Tax&lt;/a&gt;. This is a topic I’ve been vocal about and one that I know the Tech by Choice community has brought up as well. Through this new structure, we will find a way to elevate this burden for our members. &lt;/p&gt;

&lt;p&gt;This is just one example from me, a single member of the community. I know together we will create programs and funds that will support several burdens our members face. But to get there, we have to do this together.   &lt;/p&gt;

&lt;p&gt;The Tech by Choice community is one I care for deeply. I will always make time for our mission to ensure marginalized people know tech has a space for them. I hope those who read this message will see this change as me shifting my power and status within this organization as a way to keep it going. I hope people do not make this change as I walk away from giving up on our community.&lt;/p&gt;

&lt;p&gt;Valerie Phoenix &lt;br&gt;
Founder of Tech by Choice&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 19 Nov 2021 21:30:51 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-3ad7</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-3ad7</guid>
      <description>&lt;p&gt;Hey there! &lt;/p&gt;

&lt;p&gt;Looking back on this past week, what was something you were proud of accomplishing?&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Discovering a great new musical artist... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Congrats on your wins — let's take a collective victory lap! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/igJK985xZj8Cqq0YOW/giphy-downsized-large.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/igJK985xZj8Cqq0YOW/giphy-downsized-large.gif" alt='Kool &amp;amp; the Gang singing "Celebrate"' width="476" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>How to automate Open edX deployments using Github Actions</title>
      <author>Cubite</author>
      <pubDate>Fri, 19 Nov 2021 21:12:33 +0000</pubDate>
      <link>https://dev.to/corpcubite/how-to-automate-open-edx-deployments-using-github-actions-397l</link>
      <guid>https://dev.to/corpcubite/how-to-automate-open-edx-deployments-using-github-actions-397l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-open-edx%C2%AE-"&gt;
  &lt;/a&gt;
  What is Open edX® ?
&lt;/h3&gt;

&lt;p&gt;Open edX is an open-source platform you can use to create and host online courses. It was originally developed in 2012 by MIT and Harvard University and has since been adopted by organizations of all shapes and sizes to power a wide range of online learning use cases.&lt;br&gt;
It has been used by organizations and universities like Microsoft, IBM, MIT, and ASU.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-do-we-handle-deployments-by-default-in-open-edx-"&gt;
  &lt;/a&gt;
  How do we handle deployments by default in Open edX ?
&lt;/h3&gt;

&lt;p&gt;We use Ansible to provision and maintain our platform. If you are not familiar with Ansible, it's an open source Devops tool that automates the software provisioning and configuration. It building blocks are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ansible &lt;strong&gt;Playbooks&lt;/strong&gt; which has 1 or multiple roles. Imaging Playbook as full instructions on how to install your software, it's components and how the set them up to work properly.&lt;/li&gt;
&lt;li&gt;Ansible &lt;strong&gt;Roles&lt;/strong&gt;. Each component in your stack has it's own role. for example if your are using Django, Nginx and MySQL in your application, each one of them has it's own role.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Variables&lt;/strong&gt;. Each role has it's own variables. For example you should provide variables for MySQL role to define root username and password.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#what-is-the-workflow-to-change-a-variable-"&gt;
  &lt;/a&gt;
  What is the workflow to change a variable ?
&lt;/h3&gt;

&lt;p&gt;We have our playbooks, roles and their variables in a GitHub repo. Variables are divided to 2 different files &lt;a href="https://github.com/cubitetech/openedx-actions-demo/blob/main/edx-configs/vars.yml"&gt;&lt;code&gt;vars.yml&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/cubitetech/openedx-actions-demo/blob/main/edx-configs/passwords.yml"&gt;&lt;code&gt;passwords.yml&lt;/code&gt;&lt;/a&gt;. Passwords file is encrypted using Ansible Vault.&lt;br&gt;
To change a variable and deploy it to the Open edX server we need to:&lt;br&gt;
1- Pull the Github repo that has Open edX variables on a local machone&lt;br&gt;
2- Change one or multiple variables&lt;br&gt;
3- Push the changes back to the Github repo&lt;br&gt;
4- Deploy new variables to the server from an Ansible Control node. Here we pass new &lt;code&gt;vars.yml&lt;/code&gt; and &lt;code&gt;passwords.yml&lt;/code&gt; to ansible-playbook command, Something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ansible-playbook /edx/app/edx_ansible/edx_ansible/playbooks/openedx_native.yml &lt;span class="nt"&gt;--vault-password-file&lt;/span&gt; ~/.ansible_vault_pass.txt &lt;span class="nt"&gt;-i&lt;/span&gt; ./ansible-configs/inventory &lt;span class="nt"&gt;-e&lt;/span&gt;@./edx-configs/vars.yml &lt;span class="nt"&gt;-e&lt;/span&gt;@./edx-configs/passwords.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tSldASEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qkokpd9eg5i18wwiv3s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tSldASEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qkokpd9eg5i18wwiv3s.png" alt="Default Deployment Workflow" width="880" height="788"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#how-github-actions-can-help-to-automate-manual-deployments"&gt;
  &lt;/a&gt;
  How GitHub actions can help to automate manual deployments
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;br&gt;
Steps 3 and 4 are where things can get complicated. As you see in the previous diagram these steps are manual and it can become really time consuming and tedious if you need to make multiple deployments to the same server or even to a cluster of servers.&lt;br&gt;
&lt;strong&gt;Solution&lt;/strong&gt;&lt;br&gt;
Ideal solution will be to trigger new deployment to our server or servers as as soon as we push a new change to the GitHub repo. GitHub actions can do that for us. We can create a workflow that&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Checks out our repo in a job

&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;actions/checkout@v2&lt;/code&gt; action&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Install Ansible and all necessary libraries for a deployment&lt;/li&gt;
&lt;li&gt;Installs Open edX SSH key in it and adds it's key as known host

&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;shimataro/ssh-key-action@v2&lt;/code&gt; action&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deploys new variables using Ansible&lt;/li&gt;
&lt;li&gt;Restart all the services in Open edX to apply changes
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kfrXJcRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yt2ntutznwph957dy8n.png" alt="Github Actions Workflow" width="880" height="569"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#lets-see-how-it-works"&gt;
  &lt;/a&gt;
  Let's See how it works
&lt;/h4&gt;

&lt;p&gt;One of the variables in the &lt;code&gt;vars.yml&lt;/code&gt; file is &lt;a href="https://github.com/cubitetech/openedx-actions-demo/blob/main/edx-configs/vars.yml#L16"&gt;&lt;code&gt;EDXAPP_PLATFORM_NAME&lt;/code&gt;&lt;/a&gt; and we use it's value in template in multiple places like the footer.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NqJHgK1R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3v6q91730jxch1qhnwo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NqJHgK1R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3v6q91730jxch1qhnwo.png" alt="Footer" width="880" height="260"&gt;&lt;/a&gt;&lt;br&gt;
Now let's change it's value to &lt;code&gt;Cubite Technologies&lt;/code&gt; and commit the change. It should trigger GitHub action to deploy this new value to our server via Ansible.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bcDjaql30XM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Maintainer Must-Haves&lt;/li&gt;
&lt;li&gt;DIY Deployments&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/cubitetech"&gt;
        cubitetech
      &lt;/a&gt; / &lt;a href="https://github.com/cubitetech/openedx-actions-demo"&gt;
        openedx-actions-demo
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Repo to show how we can automate Open edX deployment using Github Actions
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;To learn more about Open edX check &lt;a href="https://open.edx.org"&gt;their website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>python</category>
      <category>django</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
