<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Implement dark mode in React üåûüåï</title>
      <author>Suryaraj Bhaduri</author>
      <pubDate>Sat, 18 Sep 2021 17:59:04 +0000</pubDate>
      <link>https://dev.to/suryaraj1/implement-dark-mode-in-react-4fi8</link>
      <guid>https://dev.to/suryaraj1/implement-dark-mode-in-react-4fi8</guid>
      <description>&lt;p&gt;Who doesn't want a dark theme on their website! Not only does it help us focus better, but also keeps our eyes safer ü§ì.&lt;/p&gt;

&lt;p&gt;The blog might add value if you belong to either of these situations -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Maybe you have been in a place wherein you want to implement a dark theme for your website but are struggling around the same üòµ. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You are starting out with React, so this might just be another fun exercise for you to try üéâ.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic knowledge of React and terminologies (state, props, etc.)&lt;/li&gt;
&lt;li&gt;Basic knowledge of CSS&lt;/li&gt;
&lt;li&gt;Will to learn üöÄ&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#spin-up-a-new-react-project"&gt;
  &lt;/a&gt;
  Spin up a new React Project ‚ú®
&lt;/h2&gt;

&lt;p&gt;You could use your local development environment or maybe use a sandbox. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Noteüìù - If using local setup prefer cleaning up the factory code before moving further.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, I will be using class based components for this one - &lt;em&gt;not using React Hooks&lt;/em&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-simple-page"&gt;
  &lt;/a&gt;
  Create a simple page
&lt;/h2&gt;

&lt;p&gt;In our &lt;code&gt;App()&lt;/code&gt;, just return a &lt;code&gt;div&lt;/code&gt; for the time being. (Can use a &lt;code&gt;button&lt;/code&gt; as well)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7wjMtaJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/01QinBSQ0fNs.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7wjMtaJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/01QinBSQ0fNs.png%3Fo%3D1" alt="Init setup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-state-to-our-app"&gt;
  &lt;/a&gt;
  Add state to our app
&lt;/h2&gt;

&lt;p&gt;We cannot do much with a &lt;em&gt;dumb component&lt;/em&gt; when it comes to embedding logic inside of it. So we need to add &lt;code&gt;state&lt;/code&gt; to the React component.&lt;/p&gt;

&lt;p&gt;Add a state called &lt;code&gt;isDarkThemeEnabled&lt;/code&gt; to the &lt;code&gt;App&lt;/code&gt; component and set it to &lt;code&gt;false&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4aW8OF9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/ag3pVgfVXhTE.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4aW8OF9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/ag3pVgfVXhTE.png%3Fo%3D1" alt="Adding state"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-theme-switcher-logic"&gt;
  &lt;/a&gt;
  Creating the theme switcher logic üí°
&lt;/h2&gt;

&lt;p&gt;This is the crux of the entire problem. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How to build the theme switcher / toggler ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This might become simple, if you try to draw an analogy to a light bulb. A light bulb has two states &lt;code&gt;on&lt;/code&gt; and &lt;code&gt;off&lt;/code&gt;. &lt;br&gt;
At any given point of time it is in one of the either states.&lt;/p&gt;

&lt;p&gt;Now, imagine the theme switcher to be a bulb and try to map the idea.&lt;/p&gt;

&lt;p&gt;You got it! üéâ If the theme switcher is imagined to be a light bulb, &lt;code&gt;light mode&lt;/code&gt; becomes &lt;code&gt;on&lt;/code&gt; and &lt;code&gt;dark mode&lt;/code&gt; becomes &lt;code&gt;off&lt;/code&gt; or vice-versa.&lt;/p&gt;

&lt;p&gt;Now, how to toggle the state ? Pretty simple, just flip the current state whenever a certain event fires.&lt;br&gt;
In simpler terms - on clicking a button change the state value from &lt;code&gt;true&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; or vice versa.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementing-the-theme-switcher-logic"&gt;
  &lt;/a&gt;
  Implementing the theme switcher logic
&lt;/h2&gt;

&lt;p&gt;Now, as we have designed the approach it's good time to start coding up the idea. &lt;br&gt;
FYI for changing state in React we use the &lt;code&gt;setState&lt;/code&gt; function. You can read about the &lt;code&gt;setState&lt;/code&gt; API from &lt;a href="https://reactjs.org/docs/react-component.html#setstate"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's create a &lt;code&gt;clickHandler&lt;/code&gt; and embed the state-toggler logic inside of it. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iquoRLMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/D1Tgr6rNzzYs.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iquoRLMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/D1Tgr6rNzzYs.png%3Fo%3D1" alt="Click handler"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pass this &lt;code&gt;clickHandler&lt;/code&gt; to the &lt;code&gt;onClick&lt;/code&gt; prop of the div, to trigger the function whenever user clicks on the div.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RGmLkbfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/JRBqnvVocHHr.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGmLkbfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/JRBqnvVocHHr.png%3Fo%3D1" alt="clickHandler passed to prop"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-svg-to-our-app"&gt;
  &lt;/a&gt;
  Adding SVG to our app
&lt;/h2&gt;

&lt;p&gt;I want to let the user know which mode he can currently switch to. Can be accomplished with text, but what better than using SVG icons to enhance the UI !üéâ&lt;/p&gt;

&lt;p&gt;I will be using &lt;a href="https://heroicons.com/"&gt;heroicons&lt;/a&gt; for high quality SVG icons.&lt;/p&gt;

&lt;p&gt;Create two files in your &lt;code&gt;/src&lt;/code&gt; directory, for two SVG icons for the two states. I will be using a Moon and a Sun SVG in this case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EzhOrfNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/5dvXgTl8N2Sb.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EzhOrfNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/5dvXgTl8N2Sb.png%3Fo%3D1" alt="folder structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To use any SVG in our React app, we can directly use them in our code or import the SVG as a React Component. I prefer the latter as it helps to keep the code cleaner.&lt;/p&gt;

&lt;p&gt;This is how we import an SVG icon as a React component -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ReactComponent&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Moon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./moon.svg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to toggle the SVG icons as well to suit our purpose. For this we will use &lt;code&gt;conditional rendering&lt;/code&gt;. &lt;br&gt;
This is a gem üíé. You can read about this &lt;a href="https://reactjs.org/docs/conditional-rendering.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea is, whenever &lt;code&gt;isDarkThemeEnabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; we need the &lt;code&gt;sun&lt;/code&gt; SVG to show up else the &lt;code&gt;moon&lt;/code&gt; SVG should show up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rU4uDxgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/EHAchyNyzNeh.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rU4uDxgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/EHAchyNyzNeh.png%3Fo%3D1" alt="conditional render"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how the app looks right now. You're almost there.üèÅ&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gcedvgiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/YBGzbUgmiLwfZ8btYR/giphy.gif%3Fcid%3D790b76119a759f7e2e69f43d496b14312912450918b94cdf%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gcedvgiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/YBGzbUgmiLwfZ8btYR/giphy.gif%3Fcid%3D790b76119a759f7e2e69f43d496b14312912450918b94cdf%26rid%3Dgiphy.gif%26ct%3Dg" alt="demo GIF"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-style-up-our-app"&gt;
  &lt;/a&gt;
  Let's style up our app
&lt;/h2&gt;

&lt;p&gt;When &lt;code&gt;dark mode&lt;/code&gt; is enabled we would want to paint our app background dark. So, for this we would prefer applying &lt;code&gt;classNames conditionally&lt;/code&gt;.&lt;br&gt;
You can read on this from &lt;a href="https://www.pluralsight.com/guides/applying-classes-conditionally-react"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We would be using &lt;code&gt;JSX expression&lt;/code&gt; and &lt;code&gt;Template Literals&lt;/code&gt; for this. When &lt;code&gt;isDarkThemeEnabled&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, which means &lt;code&gt;dark mode&lt;/code&gt; is enabled, we would append a &lt;code&gt;className&lt;/code&gt; to the &lt;code&gt;App&lt;/code&gt; className.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`App &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;isDarkThemeEnabled&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark-mode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now lets add some style for the &lt;code&gt;.App.dark-mode&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VY9bmj4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/AYcZa5vYeBd1.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VY9bmj4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/AYcZa5vYeBd1.png%3Fo%3D1" alt="CSS for App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's also style up the SVG icons üíÖ. Add a className of &lt;code&gt;moon&lt;/code&gt; and &lt;code&gt;sun&lt;/code&gt; to &lt;code&gt;&amp;lt;Moon /&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Sun /&amp;gt;&lt;/code&gt; components respectively.&lt;/p&gt;

&lt;p&gt;This is how the App code looks right now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactComponent&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Moon&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./moon.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactComponent&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Sun&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./sun.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;isDarkThemeEnabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isDarkThemeEnabled&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;isDarkThemeEnabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isDarkThemeEnabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isDarkThemeEnabled&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`App &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;isDarkThemeEnabled&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark-mode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toggler-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isDarkThemeEnabled&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Sun&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sun&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Moon&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;moon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add desired styles in the &lt;code&gt;styles.css&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TaDiF8Vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/EG3sEjQT2J30.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TaDiF8Vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/EG3sEjQT2J30.png%3Fo%3D1" alt="styles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚ú® Add a transition time to the wrapper class to make the color switch smoother. I added &lt;code&gt;transition: 0.3s ease&lt;/code&gt; to &lt;code&gt;.App&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is how the App looks finally!&lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt; - I have added some additional styles and animations.&lt;/p&gt;

&lt;p&gt;For a larger websites use &lt;code&gt;css variables&lt;/code&gt; to make painting UI components on theme toggle easier.&lt;/p&gt;

&lt;p&gt;Feel free to play around with the sandbox.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/competent-snowflake-d8ox5"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Congratulations!!&lt;/strong&gt; üéâüéâ You made it till the end. If you're still here chances are you probably liked the blog. &lt;/p&gt;

&lt;p&gt;You can also make improvisations to this simple project and share them. This would help in getting the fundamentals stronger üèã üöÄ.&lt;/p&gt;

&lt;p&gt;Do let me know how you liked the blog and where I need to improve. Would be eagerly waiting for feedback!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>react</category>
      <category>css</category>
    </item>
    <item>
      <title>Event Bubbling - JavaScript Concepts Simplified</title>
      <author>Thisura Thenuka</author>
      <pubDate>Sat, 18 Sep 2021 17:30:10 +0000</pubDate>
      <link>https://dev.to/thisurathenuka/event-bubbling-javascript-concepts-simplified-8bi</link>
      <guid>https://dev.to/thisurathenuka/event-bubbling-javascript-concepts-simplified-8bi</guid>
      <description>&lt;p&gt;Hello guys, welcome to another article in the JavaScript Concepts Simplified article series. Today, we'll be looking into Event Bubbling in JavaScript.&lt;/p&gt;

&lt;p&gt;I'm just going to go through some of the basic things you need to know before going into the main event.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background-knowledge"&gt;
  &lt;/a&gt;
  Background Knowledge
&lt;/h2&gt;

&lt;p&gt;An &lt;strong&gt;event&lt;/strong&gt; is an action or an occurrence that happens in your system. The simplest example would be the user clicking on a button.&lt;/p&gt;

&lt;p&gt;For each event that is fired, we can write an &lt;strong&gt;event handler&lt;/strong&gt; (A JavaScript function to handle the event) to do what we want to do. For example, we can write an event handler function to print something on the screen once the user clicks on the button.&lt;/p&gt;

&lt;p&gt;We also have &lt;strong&gt;event listeners&lt;/strong&gt; in JavaScript. Event listeners listen to the events happening. So, if we want to print something on the screen once the user clicks on the button, we need to first create an event listener to listen for the click event of the button.&lt;/p&gt;

&lt;p&gt;When we are loading HTML pages in browsers, the browser creates a tree-like structure for each page called the &lt;strong&gt;DOM&lt;/strong&gt;. For example, if you have a button inside your &lt;em&gt;body&lt;/em&gt; tag, the path to the button element would be &lt;strong&gt;html&lt;/strong&gt; -&amp;gt; &lt;strong&gt;body&lt;/strong&gt; -&amp;gt; &lt;strong&gt;button&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#three-phases-of-event-handling"&gt;
  &lt;/a&gt;
  Three Phases of Event Handling
&lt;/h2&gt;

&lt;p&gt;When it comes to handling events, modern browsers have three phases.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Capturing Phase&lt;/li&gt;
&lt;li&gt;Target Phase&lt;/li&gt;
&lt;li&gt;Bubbling Phase&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-capturing-phase"&gt;
  &lt;/a&gt;
  The Capturing Phase
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The browser checks to see if the element's outer-most ancestor has an onclick event handler registered on it for the capturing phase, and runs it if so.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events"&gt;Source - MDN Docs&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-target-phase"&gt;
  &lt;/a&gt;
  The Target Phase
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The browser checks to see if the target property has an event handler for the click event registered on it, and runs it if so.&lt;/p&gt;

&lt;p&gt;Then, if &lt;strong&gt;bubbles&lt;/strong&gt; is true, it propagates the event to the direct parent of the selected element, then the next one, and so on. Otherwise, if &lt;strong&gt;bubbles&lt;/strong&gt; is false, it doesn‚Äôt propagate the event to any ancestors of the target.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events"&gt;Source - MDN Docs&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-bubbling-phase"&gt;
  &lt;/a&gt;
  The Bubbling Phase
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The browser checks to see if the direct parent of the element selected has an onclick event handler registered on it for the bubbling phase, and runs it if so.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events"&gt;Source - MDN Docs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wait-what"&gt;
  &lt;/a&gt;
  Wait, What?
&lt;/h2&gt;

&lt;p&gt;It is hard to grasp the issue by reading the above lines. Let me simplify. Here is the issue we are facing. &lt;/p&gt;

&lt;p&gt;Think you have created a UI with two &lt;strong&gt;div&lt;/strong&gt; blocks (Block A and Block B). Block B is placed inside Block A. And you have created event handlers for the click event of both &lt;strong&gt;div&lt;/strong&gt; tags.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WXMr1Nyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631984146622/O4Tj89WAq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WXMr1Nyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631984146622/O4Tj89WAq.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now when you click on &lt;strong&gt;Block B&lt;/strong&gt;, before calling B's event handler, the browser calls A's event handler function. Obviously, this is not what we expected. When we click on B, only the event handler of B should be called.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-fix-this"&gt;
  &lt;/a&gt;
  How do we fix this?
&lt;/h2&gt;

&lt;p&gt;Luckily, we do have a solution for this. In the &lt;strong&gt;event&lt;/strong&gt; object, we have a function called &lt;strong&gt;stopPropogation&lt;/strong&gt;. You can call this function at the start of the event handler function of B. You will see that only the event handler function of B is getting executed this time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-is-event-bubbling-useful"&gt;
  &lt;/a&gt;
  When is Event Bubbling Useful?
&lt;/h2&gt;

&lt;p&gt;There could be some use cases where this can be useful. For example, when you have a list of items and you want to do something for all of the items, you will usually have to add event listeners for all the items.&lt;/p&gt;

&lt;p&gt;But since you now know the concept of event bubbling, you can just write and assign the event handler for the parent node and see the magic happen.&lt;/p&gt;

&lt;p&gt;This concept is called &lt;strong&gt;event delegation&lt;/strong&gt;. You can read more on that in  &lt;a href="https://davidwalsh.name/event-delegate"&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for reading the article. Hope you learned something valuable today. And most importantly, stay safe guys üò∑&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The Best SvelteKit YouTube Tutorials ‚Äì UPDATED</title>
      <author>kvetoslavnovak</author>
      <pubDate>Sat, 18 Sep 2021 17:29:45 +0000</pubDate>
      <link>https://dev.to/kvetoslavnovak/the-best-sveltekit-youtube-tutorials-updated-4fba</link>
      <guid>https://dev.to/kvetoslavnovak/the-best-sveltekit-youtube-tutorials-updated-4fba</guid>
      <description>&lt;p&gt;Here is my list of the best SvelteKit YouTube video tutorials:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thisstephie"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=uC6y59y4V4w&amp;amp;ab_channel=this.stephie"&gt;this.stephie &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uC6y59y4V4w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#noah-glaser"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=OTxIcU_2Qos&amp;amp;ab_channel=NoahGlaser"&gt;Noah Glaser&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OTxIcU_2Qos"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLT9tklUafCrKillL-YGj1IundEpNEDqvC"&gt;Full Playlist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tushar-shukla"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=bkqvVkP3sK8&amp;amp;ab_channel=TusharShukla"&gt;Tushar Shukla&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bkqvVkP3sK8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLgZ38BcfViGn2pL2J8Hd78gPblBnzX0IK"&gt;Full Playlist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#james-q-quick"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=UU7MgYIbtAk&amp;amp;t=2676s"&gt;James Q Quick&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UU7MgYIbtAk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#brayden-girard"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=P6gEnVlJPOc&amp;amp;list=PLPkJj9BR9B925L3K05PfIkDeU4sEIhj0n"&gt;Brayden Girard&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/P6gEnVlJPOc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLPkJj9BR9B925L3K05PfIkDeU4sEIhj0n"&gt;Full Playlist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#svelte-mastery"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=j4AV2Liojk0&amp;amp;t=6s&amp;amp;ab_channel=SvelteMasterySvelteMastery"&gt;Svelte Mastery &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/j4AV2Liojk0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#webjeda"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=Gtg4yG8Bhcs&amp;amp;list=PLm_Qt4aKpfKjf77S8UD79Ockhwp_699Ms&amp;amp;index=1&amp;amp;t=137s&amp;amp;ab_channel=WebJedaWebJeda"&gt;WebJeda&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Gtg4yG8Bhcs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLm_Qt4aKpfKjf77S8UD79Ockhwp_699Ms"&gt;Full Playlist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#david-parker"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=qmwJTI-vH6w&amp;amp;list=PLPqKsyEGhUnaq0FiYab4JlcQNedSlDylq&amp;amp;index=1&amp;amp;t=148s&amp;amp;ab_channel=DavidParkerDavidParker"&gt;David Parker&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qmwJTI-vH6w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLPqKsyEGhUnaq0FiYab4JlcQNedSlDylq"&gt;Full Playlist&lt;/a&gt;&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Get Most Out of an Online Course</title>
      <author>Bhagya Mudgal</author>
      <pubDate>Sat, 18 Sep 2021 16:47:59 +0000</pubDate>
      <link>https://dev.to/bhagyamudgal/how-to-get-most-out-of-an-online-course-mm0</link>
      <guid>https://dev.to/bhagyamudgal/how-to-get-most-out-of-an-online-course-mm0</guid>
      <description>&lt;p&gt;Today if anyone wants to learn a new skill, they prefer online courses over books because they tend to learn more in less duration by consuming video content instead of going through textbooks.&lt;br&gt;
There are many courses available on the internet free as well as paid, some people prefer free over paid and vice versa, it is completely a personal choice. The end goal for taking a course is to learn something new. We put our time into it so it is important for us to know how we can get the most out of an online course. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-follow-up-with-the-instructor"&gt;
  &lt;/a&gt;
  1. Follow up with the instructor
&lt;/h3&gt;

&lt;p&gt;Let's say you are doing a course that needs implementation like a coding course, so usually, what people do they watch the course like a movie or web series and they think that they are getting all things that the instructor is explaining but after they finish the course and try to implement those things they realize that they have forgotten some concepts and in the worst case they don't remember anything. Now they blame the course that it is not good so they try a new course or go through the same course again. To overcome this issue you should always implement side by side whatever the instructor is explaining. By doing this you will understand and remember concepts better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-focus-on-concepts-and-adapt-to-changes"&gt;
  &lt;/a&gt;
  2. Focus on concepts and adapt to changes
&lt;/h3&gt;

&lt;p&gt;Sometimes courses are not updated with the time but it does not mean that those courses are now useless. The content in that course may be better than of some new course. Let's say you want to learn react.js and now you are searching for a course to start learning and your friend is offering you a course of react.js that he purchased last year and it is not updated since then instead of saying to him that it is outdated and I will buy an updated one what you can do is to go through that course and if the instructor had used any particular package in that course that is now deprecated you can get its replacement by searching it on google. Concepts don't change over time so try to focus on concepts and adapt to changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-always-make-your-own-notes-for-the-course"&gt;
  &lt;/a&gt;
  3. Always make your own notes for the course
&lt;/h3&gt;

&lt;p&gt;Nowadays, it is very convenient to take notes while watching courses due to the online tools like the notion, google docs, etc. So try to make your own notes using one of these tools or you can follow the old way of using pen and paper to take notes. By doing this you will be able to summarise let's say 20 hrs of content into 4-5 pages so that if in future you forgot something you can always go through the notes instead of watching the course, it will definitely save you time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-complete-the-course"&gt;
  &lt;/a&gt;
  4. Complete the course
&lt;/h3&gt;

&lt;p&gt;The most important thing is to complete the course. People tend to start the course and leave it incomplete. This happens due to a lack of consistency, when we start something we should be consistent in it and do it regularly until it gets completed. When we do something regularly it's difficult for us to miss one day because our brain tells us that we are going out of track. Make a plan to study at least 1 hour per day and keep going until the course gets completed.&lt;/p&gt;




&lt;p&gt;Thanks for reading! I hope it will help you.&lt;/p&gt;

&lt;p&gt;Feel free to connect with me on &lt;a href="https://bit.ly/3AgR0MT"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://bit.ly/2YZxZRq"&gt;Instagram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To know more about me and my projects visit my &lt;a href="https://bit.ly/3zOlSUS"&gt;Portfolio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you find this post useful and informative, you can support me and &lt;a href="https://bit.ly/3nyg52d"&gt;Buy Me A Coffee&lt;/a&gt;. Your support encourages me to write more informational and useful content in the future.&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to write fewer tests but find more bugs</title>
      <author>Jo√£o Forja üí≠</author>
      <pubDate>Sat, 18 Sep 2021 16:13:44 +0000</pubDate>
      <link>https://dev.to/jooforja/how-to-write-fewer-tests-but-find-more-bugs-1736</link>
      <guid>https://dev.to/jooforja/how-to-write-fewer-tests-but-find-more-bugs-1736</guid>
      <description>&lt;p&gt;&lt;q&gt;How in general should I know what to test?&lt;/q&gt;&lt;/p&gt;

&lt;p&gt;Whenever we're deciding how to test a component, the main challenge is choosing which tests to write. That's because even a simple function like &lt;code&gt;add(a: number, b: number)&lt;/code&gt; has a potentially infinite number of input values it can receive. And since we have limited time and budget we can't do them all. Thus we need to be able to choose a small number of inputs, out of all the possible inputs, that will reveal as many bugs as possible.&lt;/p&gt;

&lt;p&gt;To solve this issue, I've been using an approach that combines Input Space Partitioning and Whitebox testing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#input-space-partitioning"&gt;
  &lt;/a&gt;
  Input space partitioning
&lt;/h2&gt;

&lt;p&gt;To put it simply, the idea behind Input Space Partitioning is that by analyzing the desired outputs of a piece of code, we can group its inputs such that if the code works for an input of a group, it will also work for any input of that same group. Therefore, we only need to write one test for each group.&lt;/p&gt;

&lt;p&gt;Note that inputs include everything that affects the behavior of a component (e.g. props, user action, API response values, etc...), and outputs everything it produces (e.g. rendered elements, API requests, values persisted to storage, etc...).&lt;/p&gt;

&lt;p&gt;Take as an example a &lt;a href="https://wiki.c2.com/?FizzBuzzTest"&gt;FizzBuzz&lt;/a&gt; inspired React component. The component should allow users to type numbers. When given a number that's a multiple of 3 the component should show &lt;code&gt;Fizz&lt;/code&gt;, a number multiple of 5 should show &lt;code&gt;Buzz&lt;/code&gt;, a number multiple of 3 and 5 should show &lt;code&gt;FizzBuzz&lt;/code&gt;, and a number that's multiple of neither 3 or 5 shows the given number.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Number&lt;/th&gt;
&lt;th&gt;Renders&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Multiple of 3 and not 5&lt;/td&gt;
&lt;td&gt;"Fizz"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiple of 5 and not 3&lt;/td&gt;
&lt;td&gt;"Buzz"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiple of 3 and 5&lt;/td&gt;
&lt;td&gt;"FizzBuzz"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiple of neither 3 or 5&lt;/td&gt;
&lt;td&gt;Given number&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Following the logic of Input Space Partitioning, the FizzBuzz input domain can be split into four different categories which are represented by the left column of the table above. This means that we only need to write four tests, one for each of the input categories.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whitebox-testing"&gt;
  &lt;/a&gt;
  WhiteBox testing
&lt;/h2&gt;

&lt;p&gt;You might be wondering how can we be sure, just by looking at the description of the behavior of the FizzBuzz component, that we've chosen the minimal amount of tests that will reveal as many bugs as possible. The answer is we can't. And that's why we also rely on Whitebox testing.&lt;/p&gt;

&lt;p&gt;Whitebox testing, in this context, means we'll use the knowledge of how a component is implemented to decide which tests to write. By looking at the implementation, we can have a better idea of what bugs we might have and thus allow us to choose tests more cost-effectively.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-1-implementation-matches-the-input-space-partitioning-analysis"&gt;
  &lt;/a&gt;
  Example 1 - Implementation matches the Input Space Partitioning analysis
&lt;/h3&gt;

&lt;p&gt;If the FizzBuzz code is written as follows, then for each input category, we only need to write one test assertion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FizzBuzz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fizzBuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fizzBuzz"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Enter a FizzBuzz number:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fizzBuzz"&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fizzBuzz"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fizzBuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The corresponding tests for this implementation would be as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="s2"&gt;`
  number  | result        | description
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;15&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of 3 and 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;  | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;     | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of 3 but not 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;     | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of 5 but not 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;  | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;        | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of neither 3 or 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$description - $number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FizzBuzz&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter a FizzBuzz number:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeVisible&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We don't need to write more than one assertion per input domain because with just one assertion we cover all the input domains we determined in the Input Space Analysis, and we cover all the relevant code branches.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-2-implementation-has-more-branches-than-input-partitions"&gt;
  &lt;/a&gt;
  Example 2 - Implementation has more branches than Input Partitions
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FizzBuzz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fizzBuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="c1"&gt;// rest as it was...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we're given an implementation like the one above, then one test assertion per input domain won't be enough, since the first two branches of the &lt;code&gt;fizzBuzz&lt;/code&gt; function won't be covered. So we'll need to adjust the test assertions so we cover everything in the &lt;code&gt;Multiples of neither 3 or 5&lt;/code&gt; partition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="s2"&gt;`
  number  | result        | description
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;15&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of 3 and 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;  | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;     | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of 3 but not 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;     | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of 5 but not 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;  | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;        | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of neither 3 or 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;  | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;        | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of neither 3 or 5 - special case 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;  | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;        | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of neither 3 or 5 - special case 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$description - $number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FizzBuzz&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter a FizzBuzz number:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeVisible&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One might argue that those first two assertions are simple enough that they're obviously correct and thus not worth testing. That's a fair observation and one of the advantages of this way of testing is exactly that we can take the implementation into account to write fewer tests. I'd still argue that it's a good principle to have every bit of code run at least once during tests, but I wouldn't reject a PR due to this.&lt;/p&gt;

&lt;p&gt;In case you're wondering, changing &lt;code&gt;fizzBuzz&lt;/code&gt; so we only need one assertion per test is an option. So if you're ever in a situation like this, take the opportunity and try to simplify the code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-3-implementation-uses-a-productiongrade-library"&gt;
  &lt;/a&gt;
  Example 3 - Implementation uses a production-grade library
&lt;/h3&gt;

&lt;p&gt;Imagine this implementation that uses a library underneath that's been battle-tested. Which tests should we write for it?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FizzBuzz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fizzBuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;battleTestedFizzBuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="c1"&gt;// rest as it was...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'd argue we only need one. Since the underlying library gives us confidence that the FizzBuzz logic works as expected, and the React-specific code is straightforward, just one test to see that the code runs should be enough.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Runs as expected&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FizzBuzz&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter a FizzBuzz number:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;15&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeVisible&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example-4-really-complex-implementation"&gt;
  &lt;/a&gt;
  Example 4 - Really complex implementation
&lt;/h3&gt;

&lt;p&gt;To finish these examples, take a look at the project &lt;a href="https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition"&gt;FizzBuzzEnterpriseEdition&lt;/a&gt;. Imagine that somehow the React component communicated with a running instance of that project to know what it should show the user based on its input. What tests would you write for it?&lt;/p&gt;

&lt;p&gt;My answer is that I don't know. Aside from picking one test assertion per partition determined in the Input Space Analysis, I have no idea what other inputs to pick. &lt;strong&gt;The code is so complex that it hides the bugs it might have.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All of these examples give us an interesting insight. &lt;strong&gt;The harder the code is to understand, the more test we'll have to write to be confident it works&lt;/strong&gt;. Therefore, having a clear logic for what we're implementing is essential to enable effective testing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#put-it-into-action"&gt;
  &lt;/a&gt;
  Put it into action
&lt;/h2&gt;

&lt;p&gt;If you were not familiar with any of the ideas in this article, this can be a lot to process. So here's a summary of how you can put these ideas into practice next time you have to test a component.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start by explicitly defining the behavior of the component.&lt;/li&gt;
&lt;li&gt;Make sure that for every possible input you know what the output should be.&lt;/li&gt;
&lt;li&gt;Partition the inputs based on the characteristics of the produced outputs.&lt;/li&gt;
&lt;li&gt;Look at the implementation of the component.&lt;/li&gt;
&lt;li&gt;Verify if one test per input partition is enough or too much.&lt;/li&gt;
&lt;li&gt;Write the tests.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#would-you-like-to-see-a-more-complex-example"&gt;
  &lt;/a&gt;
  Would you like to see a more complex example?
&lt;/h2&gt;

&lt;p&gt;I wrote a follow-up article to this one where I go over a more complex component and test it using the methodology described in this article. It is available for subscribers of my newsletter. So if you'd like to see it, be sure to &lt;a href="https://joaoforja.com/blog/this-is-what-you-can-do-to-know-what-to-test-on-your-react-components/#newsletter-subscribe"&gt;subscribe here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>testing</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What's new in PreviewDevice 0.8.0</title>
      <author>Anton Paliakou</author>
      <pubDate>Sat, 18 Sep 2021 15:32:12 +0000</pubDate>
      <link>https://dev.to/toni777772/what-s-new-in-previewdevice-0-8-0-5dc0</link>
      <guid>https://dev.to/toni777772/what-s-new-in-previewdevice-0-8-0-5dc0</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/Toni77777/PreviewDevice"&gt;PreviewDevice&lt;/a&gt; is a library with type-safe syntax sugar for preview device on SwiftUI. &lt;br&gt;
If you don't know what is the library, I recomment read this &lt;a href="https://tonidevblog.com/posts/meet-previewdevice/"&gt;article&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#whats-new-in-080-gogogo"&gt;
  &lt;/a&gt;
  What's new in 0.8.0? Go-go-go
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#added-support-new-apple-devices"&gt;
  &lt;/a&gt;
  Added support new Apple devices:
&lt;/h3&gt;

&lt;p&gt;iPhones: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iPhone 13 mini (&lt;code&gt;Device.iphone13Mini&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;iPhone 13 (&lt;code&gt;Device.iphone13&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;iPhone 13 Pro (&lt;code&gt;Device.iphone13Pro&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;iPhone 13 Pro Max (&lt;code&gt;Device.iphone13ProMax&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apple Watch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apple Watch Series 7 - 41mm (&lt;code&gt;Device.watchSeries7_41mm&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Apple Watch Series 7 - 45mm (&lt;code&gt;Device.watchSeries7_45mm&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;iPads:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iPad 9th generation (&lt;code&gt;Device.ipad_9Gen&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;iPad mini 6th generation (&lt;code&gt;Device.ipadMini6&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#preview-on-device-with-orientation-and-color-schemes"&gt;
  &lt;/a&gt;
  Preview on device with orientation and color schemes.
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Available iOS 15+ OSX 12+,  macCatalyst 15+, tvOS 15+, watchOS 8.0+&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;device&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="nv"&gt;orientation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portrait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="nv"&gt;colorSchemes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do you like the library? Click the star on &lt;a href="https://github.com/Toni77777/PreviewDevice"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading! See you soon. üëã&lt;/p&gt;

</description>
      <category>ios</category>
      <category>swift</category>
      <category>swiftui</category>
      <category>preview</category>
    </item>
    <item>
      <title>The Complete Guide to Full Stack Solana Development with React, Anchor, Rust, and Phantom</title>
      <author>fenilmodi00</author>
      <pubDate>Sat, 18 Sep 2021 15:32:02 +0000</pubDate>
      <link>https://dev.to/fenilmodi00/the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-4doe</link>
      <guid>https://dev.to/fenilmodi00/the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-4doe</guid>
      <description>&lt;p&gt;Building Full Stack dapps with React, Solana, Anchor, and Phantom wallet.&lt;/p&gt;

&lt;p&gt;In The Complete Guide to Full Stack Ethereum Development I did a deep dive into how to build a full stack dapp on Ethereum, which can also be applied to other EVM compatible chains like Polygon, Avalanche, and Ethereum Layer 2's.&lt;/p&gt;

&lt;p&gt;In this guide, I want to dive into Solana to show you how to build a full stack dapp. I also want to introduce the the ecosystem and the developer tooling to you to hopefully help you get up and running building your own ideas and applications going forward.&lt;/p&gt;

&lt;p&gt;Solana developer overview&lt;br&gt;
As someone who just started learning Solidity and its ecosystem about 6 months ago, I kind of assumed it couldn't be that much harder to get up and running with. I was wrong.&lt;/p&gt;

&lt;p&gt;Parts of the developer tooling are really nice and polished (the Solana CLI and Anchor), while the rest of the ecosystem, and even the documentation for Anchor (which to be fair, is very new), leaves a decent amount to be desired.&lt;/p&gt;

&lt;p&gt;That being said, once you get the hang of everything it quickly becomes much easier to understand how to start implementing your own ideas and begin experimenting.&lt;/p&gt;

&lt;p&gt;One of the keys to finding answers is to be vigilant about searching across all of Google, Github, and especially the various Discord servers for Anchor (project Serum) and Solana. The developers in those channels have been extremely helpful, especially Armani Ferrante who created the Anchor framework&lt;/p&gt;

&lt;p&gt;Project overview&lt;br&gt;
The tooling we'll be using today includes:&lt;/p&gt;

&lt;p&gt;Solana Tool Suite - This includes a really polished and well documented CLI for interacting with the Solana network.&lt;/p&gt;

&lt;p&gt;Anchor Framework - Anchor is actually a life saver for me, and I'm almost certain I would not have been able to get over the hump of building anything without it. It is the Hardhat of Solana development and more, and I love it. It also offers a DSL on top of Rust so that you do not need a deep understanding of the language to get started, though I am still trying to learn Rust as it will probably be useful to build anything non-trivial, even with the DSL. A good free place to learn Rust is The Rust Book.&lt;/p&gt;

&lt;p&gt;solana/web3.js - A Solana version of web3.js that seems to work pretty well, but the documentation was almost unusable for me&lt;/p&gt;

&lt;p&gt;React - The client-side framework&lt;/p&gt;

&lt;p&gt;I will leave off all of the in depth details around how Solana itself works, as other people can cover this better than me. Instead I'll try to just focus on building something and sharing the details that you need to be know to accomplish this, along with things I think are of utmost importance.&lt;/p&gt;

&lt;p&gt;If you want to learn more about Solana and how it works, here are a few good pieces:&lt;/p&gt;

&lt;p&gt;Solana Docs Introduction&lt;/p&gt;

&lt;p&gt;ok so what the fuck is the deal with solana anyway&lt;/p&gt;

&lt;p&gt;Solana Summer&lt;/p&gt;

&lt;p&gt;In this guide we'll focus mainly on project setup, testing, and front end client integration for building out a couple of types of applications, mainly focused on CRUD operations (without the delete of course), which I found to be somewhat undocumented (integration with client applications).&lt;/p&gt;

&lt;p&gt;We'll also learn how to airdrop tokens to our own development accounts using the Solana CLI, and deploy our apps to both a local network as well as a live test network.&lt;/p&gt;

&lt;p&gt;We won't be focusing on NFTs in this guide, but maybe I will focus on doing that in a future guide. For now, if you're interested in building an NFT marketplace on Solana, I recommend checking out Metaplex.&lt;/p&gt;

&lt;p&gt;Prerequisites&lt;br&gt;
This tutorial covers how to build a full stack app on Solana, but does not go into how to install all of the individual dependencies.&lt;/p&gt;

&lt;p&gt;Instead, I will list the dependencies and link to the documentation for how to install them, as each project will be able to explain and document these things better than I ever could, as well as keep them up to date.&lt;/p&gt;

&lt;p&gt;Node.js - I recommend installing Node using either nvm or fnm&lt;/p&gt;

&lt;p&gt;Solana Tool Suite - You can see the installation instructions here. note - I had a very hard time getting everything working on an M1 Mac, mainly solana-test-validator and cargo-build-bpf. I finally figured it out, and posted my solution here. I'm sure at some point this will be fixed and work out of the box.&lt;/p&gt;

&lt;p&gt;Anchor (including the Mocha installation) - Anchor installation was pretty straight-forward for me. You can find the installation instructions here.&lt;/p&gt;

&lt;p&gt;Solana browser wallet - I recommend Phantom, which is what I have tested this app with.&lt;/p&gt;

&lt;p&gt;Getting Started&lt;br&gt;
Before we get started building, let's take a look at the Solana CLI.&lt;/p&gt;

&lt;p&gt;Solana CLI&lt;br&gt;
The main things we'll be doing with the Solana CLI will be configuring our network (between localhost and a developer testnet) as well as airdropping tokens into our wallets, pretty much everything else we'll be doing with the Anchor CLI.&lt;/p&gt;

&lt;p&gt;For instance, we can check the current network (and other) configuration with this command:&lt;br&gt;
solana config get&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  output
&lt;/h1&gt;

&lt;p&gt;Config File: /Users/user/.config/solana/cli/config.yml&lt;br&gt;
RPC URL: &lt;a href="https://api.devnet.solana.com"&gt;https://api.devnet.solana.com&lt;/a&gt;&lt;br&gt;
WebSocket URL: wss://api.devnet.solana.com/ (computed)&lt;br&gt;
Keypair Path: /Users/user/.config/solana/id.json&lt;br&gt;
Commitment: confirmed&lt;br&gt;
If you do not have a Keypair path, set one up by following the instructions here&lt;/p&gt;

&lt;p&gt;We can change the network like so:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#set-to-localhost"&gt;
  &lt;/a&gt;
  set to localhost
&lt;/h1&gt;

&lt;p&gt;solana config set --url localhost&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#set-to-devnet"&gt;
  &lt;/a&gt;
  set to devnet
&lt;/h1&gt;

&lt;p&gt;solana config set --url devnet&lt;br&gt;
This is important as you will need to be aware of which network you are using as you're building, testing, and deploying your programs. You also need to be sure your wallet is using the same network that your local environment is using when testing, something I'll cover.&lt;/p&gt;

&lt;p&gt;We'll be starting by developing on a localhost network, then switching to the devnet network.&lt;/p&gt;


&lt;p&gt;We can also use the CLI to see our current local wallet address:&lt;br&gt;&lt;br&gt;
solana address&lt;br&gt;&lt;br&gt;
And then get the full details about an account:&lt;br&gt;&lt;br&gt;
solana account &lt;/p&gt;
&lt;br&gt;&lt;br&gt;
Next let's airdrop some tokens. To do so, first switch to the local network, as this is where we will be working to start off with:&lt;br&gt;&lt;br&gt;
solana config set --url localhost&lt;br&gt;&lt;br&gt;
Next, start the local network. This is going to be a local Solana node that we can deploy to for testing:&lt;br&gt;&lt;br&gt;
solana-test-validator&lt;br&gt;&lt;br&gt;
Once the local network is running, you can airdrop tokens to your account. With the network running, open a separate window and run the following command:&lt;br&gt;&lt;br&gt;
solana airdrop 100&lt;br&gt;&lt;br&gt;
You can the check the balance of your wallet:&lt;br&gt;&lt;br&gt;
solana balance

&lt;h1&gt;
  &lt;a href="#or"&gt;
  &lt;/a&gt;
  or
&lt;/h1&gt;


&lt;p&gt;solana balance &lt;/p&gt;
&lt;br&gt;&lt;br&gt;
You should now have a balance 100 SOL in your wallet. With that, we can get started building.

</description>
    </item>
    <item>
      <title>Github - the developer world continues...</title>
      <author>sai bhargav</author>
      <pubDate>Sat, 18 Sep 2021 15:23:12 +0000</pubDate>
      <link>https://dev.to/choppalibhargav/github-the-developer-world-continues-3hpb</link>
      <guid>https://dev.to/choppalibhargav/github-the-developer-world-continues-3hpb</guid>
      <description>&lt;p&gt;so hey there we are meeting again today so as i told in previous blog now we will discuss about the rest of the topics so lets jump into it&lt;br&gt;
as we discussed in previous blog most known git commands now we are curious about the less known git commands &lt;/p&gt;

&lt;p&gt;less known git commands :&lt;/p&gt;

&lt;p&gt;1.Git Stash&lt;/p&gt;

&lt;p&gt;One of the most delightful git commands is git stash. It keeps all your changes both to tracked files and in your working tree, stashing them away so that you can use them later. Git stash is temporary storage. With it, you can continue working where you left off whenever you are ready. Hence, you will have a clean working tree and can start working on something new. Also, note that git stash will never touch your untracked and ignored files.&lt;/p&gt;

&lt;p&gt;2.Git Rebase&lt;/p&gt;

&lt;p&gt;The git rebase command is used for moving or combining a range of commits to a new base commit. In other words, it can change the basis of the present branch from one commit to another and make the branch look like it was generated from another commit. Note that even if the branch looks identical, it is made of entirely new commits.&lt;br&gt;
This command is primarily used for keeping a linear project history.&lt;/p&gt;

&lt;p&gt;3.Git Diff&lt;/p&gt;

&lt;p&gt;The git diff command is used for comparing the changes committed in Git. This command will help you take two input data groups outputting the modifications between them. When you execute this command, it runs a diff function on the data source of Git. You can use it in compound with the git status and the git log commands.&lt;/p&gt;

&lt;p&gt;4.Git Reset&lt;/p&gt;

&lt;p&gt;Git reset is another powerful command which allows undoing your changes easily. This command is generally used for returning the entire working tree to the last committed state. It will discard a private branch commits or throw away the changes that have not been committed. The git reset command will also help you to unstage a file in Git.&lt;br&gt;
Generally, in Git every command allows undoing some changes, but only git reset and git checkout can be used for manipulating either individual files or commits.&lt;/p&gt;

&lt;p&gt;5.Git Blame&lt;/p&gt;

&lt;p&gt;Git blame is simply a great tracking command. It is aimed at showing the author information of every line of your project‚Äôs latest modified file. Hence, you can use it to find the author‚Äôs name and email address, or the commit hash of the last modified source file.&lt;/p&gt;

&lt;p&gt;6.Git-am&lt;/p&gt;

&lt;p&gt;The next rarely used but super-useful command is git-am. You can use it for applying a series of patches from a mailbox. It allows splitting mail messages in a mailbox onto commit log message, authorship information, and patches. Git-am applies all of them to the current branch.&lt;/p&gt;

&lt;p&gt;7.Git Cherry-pick&lt;/p&gt;

&lt;p&gt;Git cherry-pick is robust and not a famous command at the same time. It represents an act of picking a commit from a branch and applying it to another one. It can be related to the powerful Git tools used for undoing changes. Let‚Äôs say you have accidentally made a commit in the wrong branch. This command will let you switch to the desired branch and cherry-pick your commit to the place it should belong.&lt;/p&gt;

&lt;p&gt;What is git branching&lt;/p&gt;

&lt;p&gt;Branching is a feature available in most modern version control systems. Instead of copying files from directory to directory, Git stores a branch as a reference to a commit. In this sense, a branch represents the tip of a series of commits‚Äîit's not a container for commits this is like parent child relation where the child branch will inherit the parent when the work is done it will merge into parent to create a unified branch.&lt;/p&gt;

&lt;p&gt;So the last part is commit messages&lt;/p&gt;

&lt;p&gt;what is commit message&lt;/p&gt;

&lt;p&gt;The commit command is used to save changes to a local repository after staging in Git. However, before you can save changes in Git, you have to tell Git which changes you want to save as you might have made tons of edits to keep the record of what are the work you have done we do commit messages.&lt;/p&gt;

&lt;p&gt;what are good commit messages:&lt;/p&gt;

&lt;p&gt;1.feat: The new feature you're adding to a particular application&lt;br&gt;
2.fix: A bug fix&lt;br&gt;
3.style: Feature and updates related to styling&lt;br&gt;
4.refactor: Refactoring a specific section of the codebase&lt;br&gt;
5.test: Everything related to testing&lt;br&gt;
6.docs: Everything related to documentation&lt;br&gt;
7.chore: Regular code maintenance.[ You can also use emojis to represent commit types]&lt;/p&gt;

&lt;p&gt;so these are some commit messages so whenever we commit changes it is a best practice to write commit messages which helps us and others to understand.&lt;/p&gt;

&lt;p&gt;so this is it for todays blog i hope you enjoyed well and got some grasp of good knowledge so lets meet in another blog with some information.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Add new fields in Jquery</title>
      <author>MOHSIN ALI SOOMRO</author>
      <pubDate>Sat, 18 Sep 2021 15:16:53 +0000</pubDate>
      <link>https://dev.to/mohsinalisoomro/add-new-fields-in-jquery-147g</link>
      <guid>https://dev.to/mohsinalisoomro/add-new-fields-in-jquery-147g</guid>
      <description>&lt;h1&gt;
  &lt;a href="#here-is-the-code-snapshot"&gt;
  &lt;/a&gt;
  Here is the code Snapshot
&lt;/h1&gt;

&lt;p&gt;Simple Form with classes&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0hPrAfb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ei2kwdnk6hvdmuxwznm7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0hPrAfb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ei2kwdnk6hvdmuxwznm7.png" alt="show"&gt;&lt;/a&gt;&lt;br&gt;
The div that copy on each time&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SEMsiC6Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm8wlyfmi8jk8mrxxqur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SEMsiC6Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm8wlyfmi8jk8mrxxqur.png" alt="code-snapshot"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>EBC - Everything But Code</title>
      <author>Amy Hudspith</author>
      <pubDate>Sat, 18 Sep 2021 15:11:19 +0000</pubDate>
      <link>https://dev.to/huddlespith/ebc-everything-but-code-2lef</link>
      <guid>https://dev.to/huddlespith/ebc-everything-but-code-2lef</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-to-everything-but-code"&gt;
  &lt;/a&gt;
  Welcome to Everything But Code!
&lt;/h2&gt;

&lt;p&gt;This is going to be a series of posts covering what I feel are the most important/useful topics in programming that aren't writing the actual code. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-surely-the-code-is-the-most-important-thing"&gt;
  &lt;/a&gt;
  &lt;em&gt;But surely the code is the most important thing?&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;True! Having the slickest workflow means nothing if the code you end up writing doesn't work. But I think that having a good setup can help you to write code more efficiently and accurately, which will ultimately lead to better code!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ok-but-i-already-have-a-setup-why-should-i-read-this"&gt;
  &lt;/a&gt;
  &lt;em&gt;Ok, but I already have a setup, why should I read this?&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;It is easy to get comfortable with a particular way of coding, and you may think it won't be worth the time adjusting to a new system, especially if you don't know for certain that it will lead to an improvement. I would encourage you to give any concepts you read here a long think before trying so that you spend that precious time on solutions you do feel could improve your coding. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%C2%A0yeah-but-i-know-i-have-the-best-setup-i-spent-ages-researching-it-4-years-ago"&gt;
  &lt;/a&gt;
  ¬†&lt;em&gt;Yeah, but, I know I have the best setup, I spent ages researching it 4 years ago!&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;You are probably right that your setup was the best for you ... 4 years ago. But in the four following years not only will new systems and technologies have been created, but you will also have changed. I feel that it is worth having a look at your setup every so often to ensure it is still the best for you that it possibly can.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hold-up-im-a-complete-newbie-can-we-slow-down"&gt;
  &lt;/a&gt;
  &lt;em&gt;Hold up, I'm a complete newbie, can we slow down?&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Absolutely! Several of the posts in this series may be discussing things that you have never heard of before. Don't expect yourself to read through everything in one weekend and come out with the best setup ever; take your time and slowly introduce things to your workflow over time. This will allow you to adjust much more easily to each thing you introduce and give you the time and space to make sure you understand how each new introduction works with the systems you already have in place. &lt;/p&gt;

</description>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Map, filter, and reduce method in JavaScript</title>
      <author>Aryan Sharma</author>
      <pubDate>Sat, 18 Sep 2021 15:11:00 +0000</pubDate>
      <link>https://dev.to/sharmaryan/map-filter-and-reduce-method-in-javascript-2d2l</link>
      <guid>https://dev.to/sharmaryan/map-filter-and-reduce-method-in-javascript-2d2l</guid>
      <description>&lt;p&gt;I see a lot of peoples are getting confused when it comes to map, filter, and reduce method in JavaScript. Let's understand these array methods, one by one. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-map-method"&gt;
  &lt;/a&gt;
  1. Map() method
&lt;/h2&gt;

&lt;p&gt;Whenever we apply map method on an existing array we will get a new array, because of this our original array remain the same, its value will not change.&lt;/p&gt;

&lt;p&gt;In simple words we can say that, with the help of map method we can transform an array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have a look at the syntax of the map method.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l3aomG0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jECu5VIAQNk0S%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l3aomG0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jECu5VIAQNk0S%3Fformat%3Djpg%26name%3Dlarge" alt="map method syntax"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Array:&lt;/strong&gt; This is the original array on which we want to perform map method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;callback:&lt;/strong&gt; This is the function that will be called for every element of the original Array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;value:&lt;/strong&gt; It is value we get from original array and can make changes to it. We will understand it with the help of an example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index:&lt;/strong&gt; It is the index of the value, it is optional.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;array:&lt;/strong&gt; It is the original array, it gives the same array on each iteration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's understand with example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bjA2rS4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_irJD2VgAIkX0c%3Fformat%3Djpg%26name%3Dmedium" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bjA2rS4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_irJD2VgAIkX0c%3Fformat%3Djpg%26name%3Dmedium" alt="map method example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, first we have created an array name originalArr with some numbers. And after that we are console logging the value in originalArr. &lt;br&gt;
Now we are using map method over originalArr to get multiple of 2 of each element in the originalArr.&lt;/p&gt;

&lt;p&gt;On the other hand, map method will return all the values to the array name newArr by multiplying them with 2.&lt;/p&gt;

&lt;p&gt;Now we will check the originalArr, it will remain the same.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-filter-method"&gt;
  &lt;/a&gt;
  2. Filter() method
&lt;/h2&gt;

&lt;p&gt;This method is used for filtering out the values from an Array based on some logic.&lt;/p&gt;

&lt;p&gt;What I mean by this:&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
Consider this array of numbers,&lt;/p&gt;

&lt;p&gt;const numberOneToHundred = [1,2,3,.....,100];&lt;/p&gt;

&lt;p&gt;someone says get all the even number from this given array, or&lt;br&gt;
get all the numbers that are greater than 50,&lt;br&gt;
or get all the numbers which are divisible by 10.&lt;br&gt;
So in all of the above examples we are using filter method to get all the values from an array based on some logic.&lt;/p&gt;

&lt;p&gt;First we see the syntax and then we move on the example of the filter method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nNC06U26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jEyI0VQAMcxGS%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nNC06U26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jEyI0VQAMcxGS%3Fformat%3Djpg%26name%3Dlarge" alt="filter method syntax"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Filter method example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R0FgxEI0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jG4inVEAc9qKO%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R0FgxEI0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jG4inVEAc9qKO%3Fformat%3Djpg%26name%3Dlarge" alt="filter method example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, we have an array of age of all members in the family, now we will look after for those people only who are above 18.&lt;/p&gt;

&lt;p&gt;So filter method will filter out all the values which are greater than 18 and return a new array to the whoCanDriveCar variable.&lt;br&gt;
And the original array will remain the same, filter method will return a newly created array.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-reduce-method"&gt;
  &lt;/a&gt;
  3. Reduce() method
&lt;/h2&gt;

&lt;p&gt;We use reduce method where we want to come up with a single value from a given array.&lt;/p&gt;

&lt;p&gt;When you look at the meaning of reduce you will find that to make something smaller or less, so that is what reduce() method is doing.&lt;/p&gt;

&lt;p&gt;For example: On applying reduce method on an array of numbers, we can find out the sum of all the digits, and come up with the single value. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cY_UVDO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jO1pTVIAM-f3k%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cY_UVDO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jO1pTVIAM-f3k%3Fformat%3Djpg%26name%3Dlarge" alt="reduce method syntax"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;reduce method example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PkBi5IRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jTTl0VIAI6-KI%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PkBi5IRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_jTTl0VIAI6-KI%3Fformat%3Djpg%26name%3Dlarge" alt="reduce method example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example, we are getting sum of the values in the numbers array. In the callback method we have two parameters: accumulator, and value. What accumulator is doing in the above code is, it is storing the result on each iteration of the reduce method on callback function.&lt;br&gt;
The second argument in the reduce method is initialValue of the accumulator, which in this case is initialised with 0.&lt;br&gt;
So what actually happened here, from a given array, we come up with a single value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is my first post, if I miss something, then please let me know, your feedback will be really helpful. &lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Getting started with React Ink</title>
      <author>Anish De</author>
      <pubDate>Sat, 18 Sep 2021 15:02:57 +0000</pubDate>
      <link>https://dev.to/anishde12020/getting-started-with-react-ink-36po</link>
      <guid>https://dev.to/anishde12020/getting-started-with-react-ink-36po</guid>
      <description>&lt;p&gt;Have you ever wondered if you can use React for the command-line interface (CLI)? Yes, you can!!! React is not only used for web development but also for making Android and iOS apps &lt;a href="https://reactnative.dev/"&gt;(React Native)&lt;/a&gt; and VR Apps &lt;a href="https://github.com/facebookarchive/react-360#readme"&gt;(React 360)&lt;/a&gt; and a lot more!!! &lt;a href="https://github.com/vadimdemedes/ink"&gt;React Ink&lt;/a&gt; is used to build CLI apps with React and it is very easy to get started so let us get started.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-a-react-ink-project"&gt;
  &lt;/a&gt;
  Creating a React Ink Project
&lt;/h1&gt;

&lt;p&gt;For this example, I am going to be using &lt;a href="https://codesandbox.io/"&gt;CodeSandBox&lt;/a&gt; but you can use anything you wish to as long you have Node v10 or higher and npm installed.&lt;/p&gt;

&lt;p&gt;To get started we will firstly make a new directory and move into it (note that you shouldn't do this if you are using a cloud IDE like codesandbox or stackblitz)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir react-ink
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd react-ink
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to create an ink app and we can do that using &lt;a href="https://github.com/vadimdemedes/create-ink-app"&gt;&lt;code&gt;create-ink-app&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-ink-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are using an older version of npm, you might not have npx installed, in that case, you can install the &lt;code&gt;create-ink-app&lt;/code&gt; cli and use that.&lt;br&gt;
To install the cli, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g create-ink-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can just run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;create-ink-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now pat yourself on the back, you have successfully created a React Ink project. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#playing-around-with-the-started-code"&gt;
  &lt;/a&gt;
  Playing around with the started code
&lt;/h1&gt;

&lt;p&gt;This is how our directory structure should look like - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m3OiLREe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631959617867/3aTrdqVMQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m3OiLREe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631959617867/3aTrdqVMQ.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let us look at these files one by one&lt;/p&gt;

&lt;p&gt;First we have &lt;code&gt;ui.js&lt;/code&gt;. This is where you will write your React code. This is what we should be seeing in the file right now -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stranger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First of all, React is imported. Text is a JSX Component that is used to show any text in the CLI. Here the App takes in a prop, name and says "Hello, " if the name is supplied or else it would say "Hello, Stranger". Also, notice how the name is styled with a green text color. Now you might ask from where is the name prop coming? If you see &lt;code&gt;cli.js&lt;/code&gt;, you will find the answer.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cli.js&lt;/code&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cp"&gt;#!/usr/bin/env node
&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;importJsx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;import-jsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;meow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;meow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ui&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;importJsx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ui&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cli&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;meow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`
    Usage
      $ sandbox

    Options
        --name  Your name

    Examples
      $ sandbox --name=Jane
      Hello, Jane
`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the App component is being imported using a special &lt;code&gt;importJSX&lt;/code&gt; command. &lt;a href="https://www.npmjs.com/package/meow"&gt;Meow&lt;/a&gt; is a library that allows us to make interactive CLIs. Here look at the &lt;code&gt;render&lt;/code&gt; statement. A React element is being created where the App Element is passed as the first argument (ie the JSX part of the element) and then &lt;code&gt;cli.flags&lt;/code&gt; is an arrow of props that will be passed into the element. This is where the name prop is coming from!!!&lt;/p&gt;

&lt;p&gt;Now if we run &lt;code&gt;node cli.js&lt;/code&gt;, the code will be run. Running it with no arguments will yield the following result -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node cli.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K9MFH0ZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631960251325/adxkMN0J6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K9MFH0ZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631960251325/adxkMN0J6.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let us pass in the name flag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node cli.js --name=&amp;lt;yourName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace yourName with your name and see the output&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LXCt6MLq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631960380982/DNUy3vYvU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LXCt6MLq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631960380982/DNUy3vYvU.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Codesandbox - &lt;/p&gt;

&lt;p&gt;Use the terminal to run the file and ignore the browse preview&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/hardcore-greider-i6kjn"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  Typescript
&lt;/h1&gt;

&lt;p&gt;React Ink supports typescript as well and that is awesome so let us take a look at it. To start a react-ink project with typescript, we need to pass in the typescript flag.&lt;/p&gt;

&lt;p&gt;Firstly let us make a directory and move into it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir react-ink-ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd react-ink-ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us create a typescript React Ink project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-ink-app --typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are using an older version of npm, you might not have npx installed, in that case, you can install the &lt;code&gt;create-ink-app&lt;/code&gt; cli and use that.&lt;br&gt;
To install the cli, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g create-ink-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can just run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;create-ink-app --typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This time the directory structure is significantly different - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DPpC9-Fq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631961299423/nMcCOkwz0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DPpC9-Fq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631961299423/nMcCOkwz0.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have a source folder where all the typescript files are stored. Whenever we run &lt;code&gt;npm start&lt;/code&gt;, the typescript is compiled into javascript and the output is stored in the &lt;code&gt;dist&lt;/code&gt; folder. Most of the other things are the same. Keep in mind that the &lt;code&gt;cli.js&lt;/code&gt; file in the &lt;code&gt;dist&lt;/code&gt; folder is the main executable file.&lt;/p&gt;

&lt;p&gt;Codesandbox - &lt;/p&gt;

&lt;p&gt;Use the terminal to run the file and ignore the browse preview&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/billowing-https-qkx6h"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#symlink"&gt;
  &lt;/a&gt;
  Symlink
&lt;/h1&gt;

&lt;p&gt;One thing you might have noticed is that when you run &lt;code&gt;create-ink-app&lt;/code&gt;, it links the project. What is exactly happening? A symlink is created which allows you to run a command that invoked the cli.js file of this specific project. If you run your directory name as a command, you will see the same result as &lt;code&gt;node cli.js&lt;/code&gt; or &lt;code&gt;node dist/cli.js&lt;/code&gt; in the case of typescript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PuRmnlP0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631962074043/jUNFZANdV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PuRmnlP0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631962074043/jUNFZANdV.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
