<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 Underrated React Libraries ‚öõÔ∏è </title>
      <author>Chetan AtrawalkarüëâCA.</author>
      <pubDate>Sat, 03 Jul 2021 04:12:00 +0000</pubDate>
      <link>https://dev.to/chetan_atrawalkar/5-underrated-react-libraries-1lli</link>
      <guid>https://dev.to/chetan_atrawalkar/5-underrated-react-libraries-1lli</guid>
      <description>&lt;p&gt;Every React developer use react libraries in daily basis to build react applications and it's a  better and faster ways to create customized components. &lt;br&gt;
So today, I want to share 5 react libraries that will help you to make react projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. React-Perfect-Scrollbar&lt;/strong&gt;&lt;br&gt;
This is a wrapper to allow use perfect-scrollbar in React. It is used inside our project for creating nice scrollbars.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2ndgLv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207826/RL/Rps_xj7sac.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2ndgLv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207826/RL/Rps_xj7sac.jpg" alt="Scrollbars"&gt;&lt;/a&gt; &lt;br&gt;
&lt;a href="https://github.com/goldenyz/react-perfect-scrollbar"&gt;Homepage&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/goldenyz/react-perfect-scrollbar"&gt;GitHub&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Usage:-&lt;/strong&gt;&lt;br&gt;
Install the package &lt;code&gt;npm install react-perfect-scrollbar -S&lt;/code&gt; &lt;br&gt;
Import the css file if you have loader for css files:&lt;br&gt;
    &lt;code&gt;import 'react-perfect-scrollbar/dist/css/styles.css';&lt;/code&gt;&lt;br&gt;
Import the module in the place you want to use:&lt;br&gt;
    &lt;code&gt;import PerfectScrollbar from 'react-perfect-scrollbar'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. React DnD&lt;/strong&gt;&lt;br&gt;
React DnD is drag and drop library it mostly used for make drag and drop functionality on particular elements.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HR6wFdiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207825/RL/Rdnd_xnihmg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HR6wFdiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207825/RL/Rdnd_xnihmg.jpg" alt="DnD"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/react-dnd/react-dnd#readme"&gt;Homepage&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/react-dnd/react-dnd"&gt;GitHub&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Usage:-&lt;/strong&gt;&lt;br&gt;
Install the packages &lt;code&gt;npm install react-dnd react-dnd-html5-backend&lt;/code&gt;&lt;br&gt;
Import the module in the place you want to use:&lt;br&gt;
&lt;code&gt;import { useDrag } from 'react-dnd'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. React-Device-Detect&lt;/strong&gt;&lt;br&gt;
Detect device, and render view according to the detected device type.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LAjuhScP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207825/RL/Rdt_m4kwax.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LAjuhScP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207825/RL/Rdt_m4kwax.jpg" alt="detect"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/duskload/react-device-detect#readme"&gt;Homepage&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/duskload/react-device-detect"&gt;GitHub&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Usage:-&lt;/strong&gt;&lt;br&gt;
Install the packages using npm or yarn:&lt;br&gt;
 &lt;code&gt;npm install react-device-detect --save&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add react-device-detect&lt;/code&gt;&lt;br&gt;
Import the module in the place you want to use:&lt;br&gt;
&lt;code&gt;import {&lt;br&gt;
  BrowserView,&lt;br&gt;
  MobileView,&lt;br&gt;
  isBrowser,&lt;br&gt;
  isMobile&lt;br&gt;
} from "react-device-detect";&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Pure React Carousel&lt;/strong&gt;&lt;br&gt;
A highly impartial suite of React components that can be assembled by the consumer to create a responsive and aria compliant carousel with almost no limits on DOM structure or CSS styles.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OY_zzJzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207826/RL/Rpc_prcqdr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OY_zzJzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207826/RL/Rpc_prcqdr.jpg" alt="carousel"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/express-labs/pure-react-carousel#readme"&gt;Homepage&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/express-labs/pure-react-carousel"&gt;GitHub&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Usage:-&lt;/strong&gt;&lt;br&gt;
Add the module to your project.&lt;br&gt;
&lt;code&gt;npm i -S pure-react-carousel&lt;/code&gt;&lt;br&gt;
Import only the required components into your project.&lt;br&gt;
&lt;code&gt;import React from 'react';&lt;br&gt;
import { CarouselProvider, Slider, Slide, ButtonBack, ButtonNext } from 'pure-react-carousel';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. React Grid System&lt;/strong&gt;&lt;br&gt;
A powerful Bootstrap-like responsive grid system for React.&lt;br&gt;
&lt;code&gt;react-grid-system&lt;/code&gt; provides a responsive grid for React inspired by Bootstrap. Moreover, it has various additional powerful features, such as setting breakpoints and gutter widths through React's context.&lt;br&gt;
Three components are provided for creating responsive grids: &lt;code&gt;Container&lt;/code&gt;, &lt;code&gt;Row&lt;/code&gt;, and &lt;code&gt;Col&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NpJTBl_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207825/RL/Rgs_kf7ajs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NpJTBl_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625207825/RL/Rgs_kf7ajs.jpg" alt="Grid"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/sealninja/react-grid-system/issues"&gt;Homepage&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/sealninja/react-grid-system"&gt;GitHub&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Usage:-&lt;/strong&gt;&lt;br&gt;
Installation:-&lt;br&gt;
&lt;code&gt;npm install react-grid-system --save&lt;/code&gt;&lt;br&gt;
An example on how to use these:-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--24FmXWga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625284358/RL/carbon_fbibxl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--24FmXWga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625284358/RL/carbon_fbibxl.png" alt="example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you like this react libraries please drop your comments about your thoughts and suggest more libraries you used daily basis in react projects.&lt;br&gt;
For more content follow me on&lt;br&gt;
Instagram &lt;a class="mentioned-user" href="https://dev.to/chetan"&gt;@chetan&lt;/a&gt;
.fullstack&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you!&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;üòé Keep Claim And Just Code It!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>github</category>
    </item>
    <item>
      <title>Python REST API tutorial: Getting started with FastAPI</title>
      <author>Erin Schaffer</author>
      <pubDate>Fri, 02 Jul 2021 22:27:44 +0000</pubDate>
      <link>https://dev.to/educative/python-rest-api-tutorial-getting-started-with-fastapi-2gae</link>
      <guid>https://dev.to/educative/python-rest-api-tutorial-getting-started-with-fastapi-2gae</guid>
      <description>&lt;p&gt;A REST API is an architectural pattern for creating web services. REST is a set of rules that outlines the best practices for sharing data between clients and servers. They use HTTP requests to manipulate data and communicate with web services. REST APIs are stateless, cacheable, and consistent. They're great for building general-purpose and scalable web applications. The three major Python frameworks are Django, Flask, and FastAPI. &lt;/p&gt;

&lt;p&gt;Today, we're going to explore FastAPI, an open-source web framework used to build APIs with Python. &lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We'll cover&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#fastapi"&gt;What is FastAPI?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flaskvsfast"&gt;Flask vs FastAPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#helloworld"&gt;FastAPI Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#basics"&gt;Basic FastAPI building blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nextsteps"&gt;What to learn next&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-fastapi"&gt;
  &lt;/a&gt;
  What is FastAPI?
&lt;/h2&gt;

&lt;p&gt;The official FastAPI website describes FastAPI as a &lt;strong&gt;modern and high-performance web framework for building APIs with Python 3.6+&lt;/strong&gt; based on standard Python type hints. FastAPI is very fast due to its out-of-the-box support of the &lt;code&gt;async&lt;/code&gt; feature of Python 3.6+. &lt;/p&gt;

&lt;p&gt;FastAPI was released in 2018, and it was created by Sebasti√°n Ram√≠rez. Ram√≠rez was unhappy with existing frameworks like Flask and DRF, so he created his own framework using tools like Starlette and Pydantic. Now, many big tech companies like Uber, Netflix, and Microsoft are using FastAPI to build their apps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fastapi-features"&gt;
  &lt;/a&gt;
  FastAPI features
&lt;/h3&gt;

&lt;p&gt;FastAPI has many great features. Let's take a look at them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;High-performance&lt;/strong&gt;: As the name suggests, FastAPI is &lt;em&gt;fast&lt;/em&gt;. It's considered to be one of the fastest Python frameworks currently available.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Robust&lt;/strong&gt;: You can create production-ready code using automatic interactive documentation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Intuitive&lt;/strong&gt;: FastAPI was designed to be easy to use and learn. It offers great editor support and documentation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Quick to code&lt;/strong&gt;: FastAPI increases your developing speed by 200%-300%.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fewer bugs&lt;/strong&gt;: It reduces around 40% of induced bugs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Compatible&lt;/strong&gt;: It works well with the open standards for APIS, OpenAPI (previously known as Swagger), and JSON schema.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Plugins&lt;/strong&gt;: You can easily create plugins using dependency injection.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Type hints&lt;/strong&gt;: You can use type hinting for data validation and conversion.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flask-vs-fastapi"&gt;
  &lt;/a&gt;
  Flask vs FastAPI
&lt;/h2&gt;

&lt;p&gt;In this section, we'll explore Flask and FastAPI. We'll discuss their pros, cons, and use cases. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flask"&gt;
  &lt;/a&gt;
  Flask
&lt;/h3&gt;

&lt;p&gt;Flask is a &lt;strong&gt;Python microframework&lt;/strong&gt;. It comes with ORM, caching, and authentication. It was designed to build web applications using Python. It's considered to be easy, fast, and scalable. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: You can manipulate most aspects of Flask.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Intuitive&lt;/strong&gt;: Flask is great for beginners because of its simplicity. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Built-in development server&lt;/strong&gt;: This built-in functionality, along with its integrated support, allows for seamless unit testing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;No data validation&lt;/strong&gt;: With Flask, you can pass any data type. This can cause programs to crash often.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Time&lt;/strong&gt;: It has a single source that handles requests in turns, meaning that it can take some time for requests to be addressed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Use cases&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Flask is commonly used for projects such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;E-commerce systems&lt;/li&gt;
&lt;li&gt;Social media bots&lt;/li&gt;
&lt;li&gt;Social networks&lt;/li&gt;
&lt;li&gt;Static websites&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fastapi"&gt;
  &lt;/a&gt;
  FastAPI
&lt;/h3&gt;

&lt;p&gt;FastAPI is a modern, high-performance web framework. It's used to build web APIs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data validation&lt;/strong&gt;: It validates your data type even in nested JSON requests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Exception handling&lt;/strong&gt;: With FastAPI, it's easy to do exception handling. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Asynchronous code support&lt;/strong&gt;: It supports async code using the &lt;code&gt;async/await&lt;/code&gt; Python keywords. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Request validation&lt;/strong&gt;: FastAPI uses Pydantic for request validation. This process isn't always very intuitive, and it sometimes requires you to write your own custom validator.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Smaller community&lt;/strong&gt;: Since the framework is still pretty new, the community is smaller in comparison to other frameworks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Use cases&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FastAPI is commonly used for projects such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Internal crisis management&lt;/li&gt;
&lt;li&gt;Deploying machine learning models&lt;/li&gt;
&lt;li&gt;Create accounts, logins, and authentication for web applications&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fastapi-hello-world"&gt;
  &lt;/a&gt;
  FastAPI Hello World
&lt;/h2&gt;

&lt;p&gt;Let's get some practice with FastAPI! We'll take a look at a simple &lt;code&gt;Hello World!&lt;/code&gt; and break down the pieces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from fastapi import FastAPI

app = FastAPI()

@app.get("/")
def root ():
  return {"message": "Hello World!"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To start the server, we need to run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;uvicorn main:app --reload
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break this down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;main&lt;/code&gt;: refers to the file name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app&lt;/code&gt;: refers to the object of &lt;code&gt;FastAPI&lt;/code&gt; created inside the hello.py file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--reload&lt;/code&gt;: parameter that makes the server restart after the code changes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's break down our &lt;code&gt;Hello World!&lt;/code&gt; code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Line 1&lt;/strong&gt;: We import &lt;code&gt;FastAPI&lt;/code&gt;, which is a Python class that provides all the functionality for the API.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Line 3&lt;/strong&gt;: We create an instance of the class &lt;code&gt;FastAPI&lt;/code&gt; and name it &lt;code&gt;app&lt;/code&gt;.  This is the &lt;code&gt;app&lt;/code&gt; referred to by &lt;code&gt;uvicorn&lt;/code&gt; in the above command.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Line 5&lt;/strong&gt;: We create a &lt;code&gt;GET&lt;/code&gt; path.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Line 6&lt;/strong&gt;: We define the function that will execute whenever someone visits the above path.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Line 7&lt;/strong&gt;: We return a response to the client whenever the route is accessed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-fastapi-building-blocks"&gt;
  &lt;/a&gt;
  Basic FastAPI building blocks
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs explore some of the building blocks of FastAPI, including path parameters, query parameters, and request bodies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#path-parameters"&gt;
  &lt;/a&gt;
  Path parameters
&lt;/h3&gt;

&lt;p&gt;Path parameters help &lt;strong&gt;scope the API call down to a single resource&lt;/strong&gt;, which means you don't have to build a body for something as simple as a resource finder. &lt;/p&gt;

&lt;p&gt;These parameters are enclosed in curly brackets &lt;code&gt;{}&lt;/code&gt;, and they offer a way for you to &lt;strong&gt;control the representation of specific resources&lt;/strong&gt;. They're placed before the query string and within the path of an endpoint.&lt;/p&gt;

&lt;p&gt;Let's take a look at how to use them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from fastapi import FastAPI

app = FastAPI()

@app.get("/courses/{course_name}")
def read_course(course_name):
  return {"course_name": course_name}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The value of the path parameter &lt;code&gt;course_name&lt;/code&gt; will be passed to the function &lt;code&gt;read_couse()&lt;/code&gt; as the argument &lt;code&gt;course_name&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#query-parameters"&gt;
  &lt;/a&gt;
  Query parameters
&lt;/h3&gt;

&lt;p&gt;Query parameters are &lt;strong&gt;optional&lt;/strong&gt;. In FastAPI, function parameters that aren't declared as part of the path parameters are automatically interpreted as query parameters. &lt;/p&gt;

&lt;p&gt;Let's look at some sample code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from fastapi import FastAPI

app = FastAPI()

course_items = [{"course_name": "Python"}, {"course_name": "SQLAlchemy"}, {"course_name": "NodeJS"}]

@app.get("/courses/")
def read_courses(start: int, end: int):
    return course_items[start : start + end]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;query&lt;/em&gt; is the set of key-value pairs that comes after the question mark &lt;code&gt;?&lt;/code&gt; in a URL, separated by an ampersand &lt;code&gt;&amp;amp;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Take a look at the following URL:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://localhost:8000/courses/?start=0&amp;amp;end=10&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Its query parameters are:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;start&lt;/code&gt; with a value of &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; with a value of &lt;code&gt;10&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;line 8&lt;/strong&gt; of the code, we pass the two query parameters that our API would expect. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#request-body"&gt;
  &lt;/a&gt;
  Request body
&lt;/h3&gt;

&lt;p&gt;A request body is &lt;strong&gt;data sent by the client to your API&lt;/strong&gt;. To declare one in FastAPI, we can use Pydantic models. &lt;/p&gt;

&lt;p&gt;Let‚Äôs see an example of how we can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from typing import Optional
from fastapi import FastAPI
from pydantic import BaseModel

class Course(BaseModel):
    name: str
    description: Optional[str] = None
    price: int
    author: Optional[str] = None

app = FastAPI()

@app.post(‚Äú/courses/‚Äù)
def create_course(course: Course):
    return course
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs break this down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lines 1-3&lt;/strong&gt;: We import the required packages. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Line 5&lt;/strong&gt;: We declare the request data model. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Line 11&lt;/strong&gt;: We create an instance of the &lt;code&gt;FastAPI&lt;/code&gt; class.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Line 13&lt;/strong&gt;: We create a &lt;code&gt;POST&lt;/code&gt; path.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Line 14&lt;/strong&gt;: We add the request data model to the path.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-learn-next"&gt;
  &lt;/a&gt;
  What to learn next
&lt;/h2&gt;

&lt;p&gt;Congrats on taking your first steps with FastAPI! FastAPI is a lighter web framework for Python. It allows you to build APIs easily, quickly, and efficiently. If you‚Äôre interested in web application development, learning FastAPI will put you ahead of the curve. To get comfortable with the framework, we suggest you dive deeper into the framework and work on some projects.&lt;/p&gt;

&lt;p&gt;Some recommended topics to cover next are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parallel processing&lt;/li&gt;
&lt;li&gt;Deploying your API to the cloud using GitHub&lt;/li&gt;
&lt;li&gt;Default and optional parameters&lt;/li&gt;
&lt;li&gt;Etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get started learning these concepts and more, check out Educative's course &lt;a href="https://www.educative.io/courses/rest-api-python-microsoft-azure"&gt;&lt;strong&gt;Build a REST API Using Python and Deploy it to Microsoft Azure&lt;/strong&gt;&lt;/a&gt;. In this course, you‚Äôll learn how to build a REST API in Python using FastAPI and deploy you API on Microsoft Azure. By the end, you‚Äôll be able to implement FastAPI into your own projects.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-reading-about-python-and-apis"&gt;
  &lt;/a&gt;
  Continue reading about Python and APIs
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/web-development-in-python"&gt;A Complete Guide to Web Development in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/what-are-rest-apis"&gt;What are REST APIs? HTTP API vs REST API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/three-overlooked-api-features"&gt;3 Features beginner devs overlook when building APIs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>restapi</category>
      <category>fastapi</category>
      <category>programming</category>
    </item>
    <item>
      <title>Why is the Virtual DOM Necesssary?</title>
      <author>Aiden Bai</author>
      <pubDate>Fri, 02 Jul 2021 22:23:07 +0000</pubDate>
      <link>https://dev.to/aidenybai/why-is-the-virtual-dom-necesssary-59l2</link>
      <guid>https://dev.to/aidenybai/why-is-the-virtual-dom-necesssary-59l2</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Plug: I help develop &lt;a href="https://github.com/aidenybai/million"&gt;&lt;code&gt;million&lt;/code&gt;&lt;/a&gt;: &amp;lt;1kb virtual DOM - it's fast!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;The Virtual DOM was initially pioneered by the React authors on the basis of making delarative JavaScript patterns performant - but how? To understand this, we need to quickly review how traditional DOM manipulation works.&lt;/p&gt;

&lt;p&gt;Generally speaking, the easiest way of changing the DOM ("Modifying the HTML") is to mutate the &lt;code&gt;innerHTML&lt;/code&gt; property on an element. For example, if I want to add a &lt;code&gt;div&lt;/code&gt; element in the document body, I could do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;div&amp;gt;Hello World!&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;lt;body&amp;gt; now has a &amp;lt;div&amp;gt;Hello World!&amp;lt;/div&amp;gt; child.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This seems to be computationally performant, but it really isn't. While the action of reassignment is computationally performant, the DOM repaint ("Updating what the user sees") is not. This is because &lt;code&gt;innerHTML&lt;/code&gt; needs to parse DOM nodes from a string, preprocess, and append it, resulting in less-than-optimal performance. The issues with performance are increasingly noticable when there are more children/attributes and when the interval of mutation is shorter.&lt;/p&gt;

&lt;p&gt;So, how is this issue fixed? Well, instead, we do pinpoint changes to the DOM. For example, this solution would be almost &lt;strong&gt;10x faster&lt;/strong&gt; than the &lt;code&gt;innerHTML&lt;/code&gt; solution.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While this is simple enough, once you start performing continous mutations, more complexity arises. &lt;strong&gt;This is why the virtual DOM was created - to allow you to write declarative content (like the string in the &lt;code&gt;innerHTML&lt;/code&gt; example) while harnessing performance by making only pinpoint changes to the DOM.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-dom"&gt;
  &lt;/a&gt;
  Virtual DOM
&lt;/h2&gt;

&lt;p&gt;The virtual DOM is a tree of virtual nodes that represents what the DOM looks like. virtual nodes are light, stateless, and are JavaScript objects that only contain necessary fields. virtual nodes can be assembled into trees, and "diffed" to make pinpoint changes to the DOM.&lt;/p&gt;

&lt;p&gt;While this is efficient, it has some caveats. Notably, diffing is not computationally free. Traversing the trees have &lt;code&gt;O(n^3)&lt;/code&gt; time complexity, meaning the more children, the longer the time it will take to perform the action. To solve this, Million was created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IIIL_Je5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvsysw9ta4950c9tuc5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IIIL_Je5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvsysw9ta4950c9tuc5v.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/aidenybai/how-does-virtual-dom-work-b74"&gt;Read this article&lt;/a&gt; if you don't understand what the Virtual DOM is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#million"&gt;
  &lt;/a&gt;
  Million
&lt;/h2&gt;

&lt;p&gt;Million provides five major improvements: granular patching, fewer iterative passes, fast text interpolation, keyed virtual nodes, compiler flags.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Granular patching:&lt;/strong&gt; Instead of just replacing the entire element when there is a difference in props or children, only the necessary props are changed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fewer iterative passes:&lt;/strong&gt; Million attempts to reduce the amount of passes during diffing, allowing for better time and space complexity.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fast text interpolation:&lt;/strong&gt; Instead of replacing text nodes with DOM methods, Million uses compiler flags to set the &lt;code&gt;textContent&lt;/code&gt; of elements to boost performance.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Keyed virtual elements:&lt;/strong&gt; This allows for the patching algorithm to skip nodes if the new virtual element key is the same as the old one, minimizing the amount of unnecessary work.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Compiler Flags:&lt;/strong&gt; This allows for the patching algorithm to skip condition branches, meaning less work is done.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ql6zSgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wp2dox7hhqeev31ksm46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ql6zSgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wp2dox7hhqeev31ksm46.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Thanks for reading! Drop a star to &lt;a href="https://github.com/aidenybai/million"&gt;Million&lt;/a&gt; or follow/react to this article for more Virtual DOM content!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Simplifying Data for small teams and sole developers</title>
      <author>Alex</author>
      <pubDate>Fri, 02 Jul 2021 22:11:13 +0000</pubDate>
      <link>https://dev.to/fireharp/simplifying-data-for-small-teams-and-sole-developers-ib0</link>
      <guid>https://dev.to/fireharp/simplifying-data-for-small-teams-and-sole-developers-ib0</guid>
      <description>&lt;p&gt;Hello everyone,&lt;/p&gt;

&lt;p&gt;I'm Alex co-founder of SimpleData &lt;a href="https://datashouldbesimple.com/"&gt;https://datashouldbesimple.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Please help provide us some feedback on our early stage product )&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Which part of our product you're interested in? (API, Reporting, other)&lt;/li&gt;
&lt;li&gt;Which are languages you would use? (JS, Python, etc.)&lt;/li&gt;
&lt;li&gt;Which are the platforms? (Backend, FE, iOS, Android, Desktop)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any other free form feedback is highly appreciated.&lt;/p&gt;

&lt;p&gt;I would also &lt;a href="https://calendly.com/alex_yanitskiy/simpledata"&gt;love to talk to any interested person personally&lt;/a&gt; (with my colleague John). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#short-description"&gt;
  &lt;/a&gt;
  Short description
&lt;/h2&gt;

&lt;p&gt;The high-level arch is pretty simple&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nZagnqb8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txzawkcxccscqc98st6l.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nZagnqb8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txzawkcxccscqc98st6l.jpg" alt="archChart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;‚öôÔ∏è Consume data&lt;/li&gt;
&lt;li&gt;ü™Ñ Process it (not simple, haha)&lt;/li&gt;
&lt;li&gt;üöÄ Deliver prepared data, metrics in different ways: API, Reporting, custom apps&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I'm thinking it should help a lot of developers and teams to simplify their experience with plethora of Data tasks and should make it easier, faster (or even possible when we talk scoring/models/pre-built metrics or some tools like reporting).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simple-use-case"&gt;
  &lt;/a&gt;
  Simple Use case
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#task-spec"&gt;
  &lt;/a&gt;
  Task Spec
&lt;/h3&gt;

&lt;p&gt;This's a real scenario we used in one of our projects.&lt;/p&gt;

&lt;p&gt;Let's assume you want to get all the info on some of your users and pass it over to colleague in Slack via Slack App command &lt;code&gt;/user some@email.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The information contains Billing, Activity (in your app), Communications and whatever else you have on this user. Including calculated metrics like LTV.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ca_rzacc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqrfte46n5289q7y0knq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ca_rzacc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqrfte46n5289q7y0knq.png" alt="Screenshot 2021-06-22 at 23.19.34"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation-draft-wo-simpledata"&gt;
  &lt;/a&gt;
  Implementation draft (w/o SimpleData)
&lt;/h3&gt;

&lt;p&gt;If you start implementing this Slack App, you would need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data from your DB (probably easiest)&lt;/li&gt;
&lt;li&gt;data from 3rd party apps (Billing, all Comms ‚Äì CS, maybe emails, Activity ‚Äì events from user clients)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After some dev time ‚Äì you got it.&lt;/p&gt;

&lt;p&gt;Then you probably need to NLP analyse Comms for detecting sentiment (or use some app that does it for you). Calculate LTV. Evaluate churn risk, etc.&lt;/p&gt;

&lt;p&gt;After more dev time ‚Äì you probably also got it.&lt;/p&gt;

&lt;p&gt;Overall time spent would be from week to a few weeks after all the debugging and business needs optimizations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simpledata-implementation"&gt;
  &lt;/a&gt;
  SimpleData implementation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;simpledata&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;

&lt;span class="c1"&gt;# Get User Data
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_users_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="c1"&gt;# basics
&lt;/span&gt;   &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;
   &lt;span class="n"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gender&lt;/span&gt;
   &lt;span class="c1"&gt;# activity
&lt;/span&gt;   &lt;span class="n"&gt;last_active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_active&lt;/span&gt;
   &lt;span class="n"&gt;activity_rank&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activity_rank&lt;/span&gt;
   &lt;span class="n"&gt;days_active_last7_days&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;to_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="c1"&gt;# billing
&lt;/span&gt;   &lt;span class="n"&gt;subscriptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subscriptions&lt;/span&gt;
   &lt;span class="n"&gt;transactions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="c1"&gt;# etc.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty short and simple. Even if you just start you developer journey. Or if you have several teams / lots of tasks ‚Äî may simplify your hard work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-another-usecases"&gt;
  &lt;/a&gt;
  What about another usecases?
&lt;/h2&gt;

&lt;p&gt;And we have them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User Billing Info on your website&lt;/li&gt;
&lt;li&gt;User Info Apps (like Slack App above ‚Äì but may be elsewhere)&lt;/li&gt;
&lt;li&gt;Reporting&lt;/li&gt;
&lt;li&gt;Smart Alerts&lt;/li&gt;
&lt;li&gt;Scoring Models&lt;/li&gt;
&lt;li&gt;NLP Messages Processing (prioritization, sentiments, intent detection)&lt;/li&gt;
&lt;li&gt;Socket + Client (serverless way ‚Äì subscribe to our GraphQL API directly from client)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We're going to describe these and maybe more in our initial wiki and docs coming next few weeks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beta-access-to-everyone-from-devto"&gt;
  &lt;/a&gt;
  Beta access to everyone from dev.to!
&lt;/h2&gt;

&lt;p&gt;Expecting some initial invites-only beta access by end of summer ‚âà (&lt;a href="https://forms.gle/scanxW2nmKAFb7Wz6"&gt;you are welcome sign up here&lt;/a&gt;! I'll prioritize all dev.to requests üòâ)&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>discuss</category>
      <category>showdev</category>
      <category>startup</category>
    </item>
    <item>
      <title>üé¨Amazing Social Media Buttons Hover Effects| HTML &amp; CSS‚ú®</title>
      <author>Robson Muniz</author>
      <pubDate>Fri, 02 Jul 2021 22:08:15 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/amazing-social-media-buttons-hover-effects-html-css-5f9l</link>
      <guid>https://dev.to/robsonmuniz16/amazing-social-media-buttons-hover-effects-html-css-5f9l</guid>
      <description>&lt;p&gt;Hey Devs, in this video you will learn how to create an &lt;strong&gt;Amazing Social Media Buttons Hover Effects&lt;/strong&gt; with just HTML &amp;amp; CSS (No JavaScript).&lt;br&gt;
 We'll walk you through step-by-step on how to create it and how to add it to your websites. &lt;/p&gt;



&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/P9pi4hq7BBA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;üèÜ Recommended Projects üèÜ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üé¨ Neumorphism Login Form | HTML &amp;amp; CSS &lt;br&gt;
‚û§&lt;a href="https://youtu.be/QWh0S-3D7uY"&gt;https://youtu.be/QWh0S-3D7uY&lt;/a&gt;&lt;br&gt;
üé¨ Animated Sidebar Menu with HTML &amp;amp; CSS &lt;br&gt;
‚û§ Watch: &lt;a href="https://youtu.be/QPZrQ_xPVs4"&gt;https://youtu.be/QPZrQ_xPVs4&lt;/a&gt; &lt;br&gt;
üé¨ Amazing Social Media Buttons Hover Effects | HTML &amp;amp; CSS &lt;br&gt;
‚û§ &lt;a href="https://youtu.be/P9pi4hq7BBA"&gt;https://youtu.be/P9pi4hq7BBA&lt;/a&gt; &lt;br&gt;
üé¨ Animated Login Form | HTML, CSS &amp;amp; JavaScript &lt;br&gt;
‚û§ Watch: &lt;a href="https://youtu.be/ogNwc45qHKo"&gt;https://youtu.be/ogNwc45qHKo&lt;/a&gt; &lt;br&gt;
üé¨ Slider Sign In / Sign Up Form | HTML CSS Vanilla JS &lt;br&gt;
‚û§ Watch: &lt;a href="https://youtu.be/Wz5THk0-Y1s"&gt;https://youtu.be/Wz5THk0-Y1s&lt;/a&gt; &lt;/p&gt;




</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Using LINQ Expression Trees to build maintainable DTO modeling</title>
      <author>Ryan English</author>
      <pubDate>Fri, 02 Jul 2021 22:00:36 +0000</pubDate>
      <link>https://dev.to/grizzlyenglish/using-linq-expression-trees-to-build-maintainable-dto-modeling-366i</link>
      <guid>https://dev.to/grizzlyenglish/using-linq-expression-trees-to-build-maintainable-dto-modeling-366i</guid>
      <description>&lt;p&gt;Using LINQ Expression Trees to build maintainable DTO¬†modeling&lt;br&gt;
One of the biggest problems I faced working on a medium sized¬†.NET Framework code base was writing maintainable modeling systems without excessive code duplication.&lt;br&gt;
It becomes all too easy to utilize extension methods to model your DTOs from a given query's select, or to pull out too much data from your data set in order to instantiate a DTO. With expression tress you can minimize the data pulls as well as create simple mappings of the data.&lt;/p&gt;



&lt;p&gt;Let's say we have two classes in our dataset: &lt;em&gt;Student&lt;/em&gt; and &lt;em&gt;Class&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class Student
{
    public int Id { get; set; }
    public string Name { set; set; }
    public virtual ICollection&amp;lt;Class&amp;gt; Classes { get; set; }
}

public class Class
{
    public int Id { get; set; }
    public string Name { set; set; }
    public virtual ICollection&amp;lt;Class&amp;gt; Students { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we have two DTOs: &lt;em&gt;StudentModel&lt;/em&gt; and &lt;em&gt;ClassModel&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class StudentModel
{
    public int Id { get; set; }
    public string Name { get; set; }
}

public class ClassModel
{
    public int Id { get; set; }
    public string Name { get; set; }
    public List&amp;lt;StudentModel&amp;gt; Students { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are already two obvious errors you can make here: having code duplication generate the &lt;em&gt;StudentModel&lt;/em&gt; depending on the entry point of the code, or having to pull all the properties out of the database (in this case not a big deal) in order to model your DTOs in memory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* Utilizing LINQ to Entities you can see 
*  how we have to specify StudentModels mappings 
*  in the class models select statement
*/ 
return database.Classes
    .Select(cl =&amp;gt; new ClassModel
    {
        Id = cl.Id
        Students = cl.Students.Select(st =&amp;gt; new StudentModel
        {
            Id = st.Id
        }
    })
    .ToList()

// Or we could pull all the data in order to get a cleaner modeling
return database.Classes
    .ToList()
    .Select(cl =&amp;gt; new ClassModel(cl))
    .ToList()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, you can generate expression trees to handle the modeling, which allows you to focus on specifying the binding between the data and the property. This is exactly how the first &lt;em&gt;Select&lt;/em&gt; above operates, the difference is we can build the trees in order to reuse pieces throughout the system.&lt;/p&gt;

&lt;p&gt;So let's take that same &lt;em&gt;ClassModel&lt;/em&gt; and generate its expression tree like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class ClassModel
{
    public int Id { get; set; }
    public string Name { get; set; }
    public List&amp;lt;StudentModel&amp;gt; Students { get; set; }

    /* 
     * Here we define how a the source of 
     * the object is bound to this object
     * The passed in expression is the parameter of 
     * select statement, in this case will be the type of Class
     */
    public static MemberAssignment[] Assignments(Expression param)
    {
        return new MemberAssignment[]
        {
           /* 
            * Here we are saying we want to bind the property Id on 
            * ClassModel to the property Id 
            * on the passed param (Class)
            */
            Expression
                .Bind(
                    typeof(ClassModel).GetProperty("Id"), 
                    Expression.Property(param, "Id")
                ),
                // Same for name as above            
                        Expression
                .Bind(
                    typeof(ClassModel).GetProperty("Name"), 
                    Expression.Property(param, "Name")
                ),
            /* 
            * Here it gets a bit tricker, we are still binding 
            * students to students but we need to get a list 
            * (See StudentModel)
            */
            Expression
                 .Bind(
                    typeof(ClassModel).GetProperty("Students"), 
                    StudenModel.InitList(
                        Expression.Property(param, "Students")
                    )
                 )
        };
    }

    /*
     * Here is how the ClassModel is "newed" it creates 
     * a new ClassModel with a parameterless constructor
     * and binds all the known bindings to body, generating
     * new ClassModel { // Insert Bindings }
     */
    public static Expression&amp;lt;Func&amp;lt;Class, ClassModel&amp;gt;&amp;gt; Init()
    {
        // Define the soruce of the expressions type
        // in this case class dbo
        ParameterExpression param = 
                  Expression.Parameter(typeof(Class), "source");
        // New the class model using the above bindings
        MemberInitExpression init = 
             Expression.MemberInit(
                Expression.New(typeof(ClassModel)), 
                Assignments(param)
             );
        // Return the lambda which is 
        // source =&amp;gt; new ClassModel { Id = source.Id, Name = source.Name }
        return Expression.Lambda&amp;lt;Func&amp;lt;Class, ClassModel&amp;gt;&amp;gt;(init, param);
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we can create reusable expression trees to model &lt;em&gt;ClassModel&lt;/em&gt; no matter the data source, by specifying how a &lt;em&gt;Class&lt;/em&gt; object binds to a &lt;em&gt;ClassModel&lt;/em&gt; object‚Ää-‚Ääas long as we have a mapping. This becomes pretty apparent when we look at the &lt;em&gt;StudentModel&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class StudentModel
{
    public int Id { get; set; }
    public string Name { get; set; }

    // Same as the class model define the assignments
    public static MemberAssignment[] Assignments(Expression param)
    {
        return new MemberAssignment[]
        {
            /*
            * Here we are saying we want to bind the property Id 
            * on StudentModel to the property Id 
            * on the passed param (Student)
            */
            Expression.Bind(
                     typeof(StudentModel).GetProperty("Id"), 
                     Expression.Property(param, "Id")
            ),
            // Same for name as above
            Expression.Bind(
                     typeof(StudentModel).GetProperty("Name"), 
                     Expression.Property(param, "Name")
            ),
        };
    }

   // Just init a single StudentModel
   public static Expression&amp;lt;Func&amp;lt;Student, StudentModel&amp;gt;&amp;gt; Init()
   {
     ParameterExpression param = 
           Expression.Parameter(typeof(Student), "source");
     MemberInitExpression init = 
           Expression.MemberInit(
               Expression.New(typeof(StudentModel)), 
               Assignments(param)
           );
     return Expression.Lambda&amp;lt;Func&amp;lt;Student, StudentModel&amp;gt;&amp;gt;(init, param);
   }

    /*
     * This is a bit out of the scope of the article, 
     * but I wanted to include it to show the capablities  
     * Basically here we are generating the sub tree 
     * that will select and to list all the students in the class
     */
    public static MethodCallExpression InitList(Expression param)
    {
        /*
        * Just like the member init we have to bind 
        * the source of the select statement 
        * to the type of Student
        */
        ParameterExpression studentParam = 
           Expression.Parameter(typeof(Student), "source");

        /*
        * Next we new a student model with the assigments from above
        * So now we have 
        * new StudentModel{ Id = source.Id, Name = soruce.Name }
        */
        MemberInitExpression studentModelInit = 
           Expression.MemberInit(
               Expression.New(typeof(StudentModel)), 
               Assignments(studentParam)
           );

        /*
        * And finally smack these two together in a 
        * lambda statement to generate
        * source =&amp;gt; 
        * new StudentModel{ Id = source.Id, Name = soruce.Name }
        */
        LambdaExpression lambda = 
           Expression.Lambda&amp;lt;Func&amp;lt;Student, StudentModel&amp;gt;&amp;gt; 
                (studentModelInit, studentParam);

        /*
        * Now we have to specify we are making a call 
        * to the select statement and specify the types
        */
        MethodCallExpression studentSelect = Expression.Call(
            null,
            GetSelect().MakeGenericMethod(new Type[] { 
                // Our select "in"
                typeof(Student), 
                // Our select "out"
                typeof(StudentModel) 
                }),
            new Expression[] { 
                // The binding param (a list of students)
                param, 
                // The lamda body from above
                lambda 
                });

        // And finally to list it to get all of them
        return Expression.Call(
            typeof(Enumerable),
            "ToList",
            // Same here define the type of the out
            new Type[] { typeof(StudentModel) },
            // The "body" of the to list
            studentSelect
            );
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have all the bindings defined, we can make queries as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return database.Classes
    .Select(ClassModel.Init())
    .ToList();

return database.Students
    .Select(StudentModel.Init())
    .ToList()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;You might be thinking, "Wow, that is a lot of extra code and overhead in order to generate models" and I thought the same thing, which is why I created &lt;a href="https://github.com/GrizzlyEnglish/modelLINQ"&gt;modelLINQ&lt;/a&gt; (there are alternatives like &lt;a href="https://automapper.org/"&gt;AutoMapper&lt;/a&gt;).&lt;br&gt;
Using modelLINQ you can write smaller easier-to-digest modeling systems in order to create maintainable code. For example, I swapped the above code using modelLINQ.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class StudentModel
{
    public int Id { get; set; }
    public string Name { get; set; }

   /*
    * All we need to do is setup the init function
    * I like to use From&amp;lt;Source&amp;gt; syntax
    */
    public static Func&amp;lt;Expression, MemberAssignments[]&amp;gt; FromStudent() 
     param =&amp;gt;
        new MemberAssigment[] {
            // Directly bind from source to result on both properties
            param.DirectBind&amp;lt;StudentModel&amp;gt;("Id"),
            param.DirectBind&amp;lt;StudentModel&amp;gt;("Name")
        };
}

public class ClassModel
{
    public int Id { get; set; }
    public string Name { get; set; }
    public List&amp;lt;StudentModel&amp;gt; Students { get; set; }

    public static Func&amp;lt;Expression, MemberAssignments[]&amp;gt; FromClass() 
        param =&amp;gt;
        new MemberAssigment[] {
            // Directly bind from source to result on both properties
            param.DirectBind&amp;lt;StudentModel&amp;gt;("Id"),
            param.DirectBind&amp;lt;StudentModel&amp;gt;("Name"),

            /*
            * Creates a list of StudentModels
            * We have to specify the binding model, the source, 
            * and the result in order to generate the list mapping
            */
            param.BindSelectedList&amp;lt;ClassModel, Class, StudentModel&amp;gt;
                ("Students", "Students", StudentModel.FromStudent)
        };
}

// How to query
database.Class
  .Select(ClassModel.FromClass.Model&amp;lt;Class, ClassModel&amp;gt;())
  .ToList()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks for reading; I hope someone finds it useful! If you have any thoughts, or believe I am wrong, please comment I'd love to hear your feedback!&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
    </item>
    <item>
      <title>C# Async Await, Eventually: Asynchronous Programming</title>
      <author>G.L Solaria</author>
      <pubDate>Fri, 02 Jul 2021 21:50:28 +0000</pubDate>
      <link>https://dev.to/glsolaria/c-async-await-eventually-asynchronous-programming-5h46</link>
      <guid>https://dev.to/glsolaria/c-async-await-eventually-asynchronous-programming-5h46</guid>
      <description>&lt;p&gt;I have been known to complain about other people's explanation of async/await in C# (for example, &lt;a href="https://dev.to/glsolaria/comment/kd52"&gt;.NET Threading Gotchas&lt;/a&gt; and &lt;a href="https://dev.to/glsolaria/comment/fnjj"&gt;C# Async Await, Simply&lt;/a&gt;). I have even been told that if I know so much why don't I write a post instead of taking cheap shots from the sidelines - which is fair enough really. The problem is that the subject can get very complicated if you want to understand it deeply. &lt;/p&gt;

&lt;p&gt;So here is my attempt to explain it. I will explain what I consider the core concepts in 2 levels of difficulty: simply, and more complicated. I should also warn you the journey is long ...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BGScdxA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnp978rjw1lad9u8wzzc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BGScdxA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnp978rjw1lad9u8wzzc.gif" alt="Warning! Long journey ahead"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I will break it up as much as possible. The first part will try to explain what asynchronous programming is.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-asynchronous-programming"&gt;
  &lt;/a&gt;
  What is asynchronous programming?
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#simply-what-is-asynchronous-programming"&gt;
  &lt;/a&gt;
  Simply: What is asynchronous programming?
&lt;/h2&gt;

&lt;p&gt;Programming that allows code to be executed outside of the main program flow. The code below shows where the main program flow starts and ends.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Example&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Here starts the main program flow.&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Do this first"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Do this second"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// The main program flow ends once the main returns.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So any code executed outside this program flow is said to be executed asynchronously.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-complicated-what-is-asynchronous-programming"&gt;
  &lt;/a&gt;
  More complicated: What is asynchronous programming?
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Here starts the main program flow.&lt;/span&gt;
  &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Sleep the worker thread for 100 milliseconds.&lt;/span&gt;
    &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Worker Thread: Woke up"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// Start a worker thread and execute the work &lt;/span&gt;
  &lt;span class="c1"&gt;// asynchronously.&lt;/span&gt;
  &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Main Thread:   Woke up"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Block the main thread until the worker completes.&lt;/span&gt;
  &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Main Thread:   Do this last"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// The main program flow ends once the main returns.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So I have just slammed you with the concept of a thread and not explained it. You can think of a thread in C# as a light-weight program that can share memory with other threads including the main thread within the same application.&lt;/p&gt;

&lt;p&gt;The Main Thread associated with the program above starts a Worker Thread, goes to sleep for 100 milliseconds, then waits for the Worker Thread to complete. (Note that a Worker Thread in this case is just another thread that is not the Main Thread). The Worker Thread sleeps for 100 milliseconds, then completes.&lt;/p&gt;

&lt;p&gt;The output of the application is shown below ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Main Thread:   Woke up
Worker Thread: Woke up
Main Thread:   Do this last
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Did you expect the Main Thread to output "Woke up" before the Worker Thread? &lt;/p&gt;

&lt;p&gt;If so, congratulations ... maybe. If not well welcome to the joy of asynchronous programming. If you were unsure then I agree. I think there is no explicit guarantee that the Main Thread will output before the Worker Thread. It probably depends on how Console.WriteLine is implemented and how the threads are scheduled and prioritised by the runtime!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---xEeAh71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zz8g9wze4sh6oiukjj9r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---xEeAh71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zz8g9wze4sh6oiukjj9r.jpg" alt="It's always more complicated than you think!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are interested in when the Worker Thread might output before the Main Thread then consider the following code otherwise you can skip it ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;workerRanFirstCount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mainRanFirstCount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;totalRuns&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;runOrder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ConcurrentQueue&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

  &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;workers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;totalRuns&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;++&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;runOrder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"worker"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;runOrder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Block the main thread until the worker completes.&lt;/span&gt;
    &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runOrder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;First&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"worker"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;++&lt;/span&gt;&lt;span class="n"&gt;workerRanFirstCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runOrder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;First&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;++&lt;/span&gt;&lt;span class="n"&gt;mainRanFirstCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;runOrder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"Main ran first count = &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;mainRanFirstCount&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;; Worker ran first = &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;workerRanFirstCount&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output from a number of runs on my machine is shown below ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Main ran first count = 10; Worker ran first = 0
Main ran first count = 8; Worker ran first = 2
Main ran first count = 6; Worker ran first = 4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In conclusion the exact interleaving of threaded operations can be difficult to determine in asynchronous programming. Why am I telling you this? Because to fundamentally understand and implement predictable asynchronous code, you need to understand this issue.&lt;/p&gt;

&lt;p&gt;I will try to write up a follow on post at some point but I am interested in what you think of my explanation of asynchronous programming. Is it too complicated, or just right so far?&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>async</category>
      <category>await</category>
    </item>
    <item>
      <title>How to Collaborate on Components across¬†Projects with Bit</title>
      <author>Eden Ella</author>
      <pubDate>Fri, 02 Jul 2021 21:11:22 +0000</pubDate>
      <link>https://dev.to/giteden/how-to-collaborate-on-components-across-projects-with-bit-29c3</link>
      <guid>https://dev.to/giteden/how-to-collaborate-on-components-across-projects-with-bit-29c3</guid>
      <description>&lt;p&gt;Most of us build our web projects with components. It makes our code more reusable, more maintainable, more testable, and easier to understand and debug.&lt;/p&gt;

&lt;p&gt;We often share a few of these components, to be able to use them across projects. A "design system" for the UI, and some sort of a "toolbox" with util functions, for our logic.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why, then, do we stop there? Why not share and collaborate on everything?¬†&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Truth is, it's not that easy to share and collaborate on components. You can group components together in the same repository and publish them as a single package, but then, you're not really "collaborating on components", you're collaborating on a project.&lt;/p&gt;

&lt;p&gt;What you really need is a way to develop, share and modify &lt;em&gt;individual components&lt;/em&gt; from any project. Why? Because being able to pick and choose the components (and component versions) for your project, and being able to propose changes, increases the likelihood that these components will actually be used (and reused). &lt;/p&gt;

&lt;p&gt;That naturally translates to faster development and higher standard of code.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-bit-an-endtoend-solution-for-componentdriven-development"&gt;
  &lt;/a&gt;
  Introducing Bit - an end-to-end solution for component-driven development
&lt;/h2&gt;

&lt;p&gt;Bit is an extensible development platform that offers everything you need to collaborate on components (that is, instead of &lt;em&gt;only&lt;/em&gt; collaborating on projects)&lt;/p&gt;

&lt;p&gt;Let's start with Bit's essential features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Component source-control&lt;/strong&gt; - essentially, git for individual components.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Isolated component development&lt;/strong&gt; - that includes isolated rendering, tests and builds.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Component dependency management&lt;/strong&gt; ‚Äî auto-generated component dependency graphs, and smart dependency management. That includes &lt;em&gt;two types of dependencies&lt;/em&gt;: node packages and other components (more on that, later).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-workflow"&gt;
  &lt;/a&gt;
  The workflow
&lt;/h2&gt;

&lt;p&gt;We will create a Bit workspace, version it using git, and (on top of that) version each of the components (managed by the workspace) &lt;em&gt;independently&lt;/em&gt;, using Bit. &lt;/p&gt;

&lt;p&gt;Two layers of version-control, one for our entire project and another for our components. As you'll soon see, the two work in harmony to produce better, more effective, collaboration on code.  &lt;/p&gt;

&lt;p&gt;Bit will not only version each component independently but will also enable us to develop, test and build, each of them independently. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Our project repository (the Bit workspace) will be pushed to Github.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Our components (source-controlled by Bit and managed by the Bit workspace) will be pushed to a remote Bit scope &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To collaborate on components before they are tagged with a new release version, we will &lt;em&gt;suggest&lt;/em&gt; a new release version  by updating our workspace. Once that workspace is pushed to Github, the CI (Github Actions) will act on these suggestions, tag the suggested components with a new release version and push them to a remote Bit scope (where they can be cloned into other Bit workspaces).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#1-initialize-bit-and-git"&gt;
  &lt;/a&gt;
  1. Initialize Bit and git
&lt;/h3&gt;

&lt;p&gt;A Bit workspace is where multiple components are developed and composed together, while maintaining each as an independent project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;my-workspace   &lt;span class="c"&gt;# create a directory for our workspace&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-workspace      
&lt;span class="nv"&gt;$ &lt;/span&gt;git init             &lt;span class="c"&gt;# initialize git&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;bit init &lt;span class="nt"&gt;--harmony&lt;/span&gt;   &lt;span class="c"&gt;# initialize Bit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The following files were created:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚îú‚îÄ‚îÄ my-workspace
    ‚îî‚îÄ‚îÄ .git
       ‚îú‚îÄ‚îÄ bit
       ‚îú‚îÄ‚îÄ ...
    ‚îú‚îÄ‚îÄ .bitmap
    ‚îî‚îÄ‚îÄ workspace.jsonc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;workspace.jsonc&lt;/code&gt; - The workspace configuration file that sets rules and policies for the workspace and all its components. &lt;/p&gt;

&lt;p&gt;Notice there is only one configuration file for all our future components. That's possible thanks to Bit's CSS-like configuration system, where group of components are selected and configured together, and where specific selections override the more general ones. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;.bitmap&lt;/code&gt; - This is where component files are mapped to component IDs, so that Bit would track them and manage them as a discrete unit (essentially, this is where the "isolated development" starts).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.git/bit&lt;/code&gt; - Your local scope. Where your workspace component repositories are stored. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-create-component-files-sourcecontrol-and-manage-them-as-independent-components"&gt;
  &lt;/a&gt;
  2. Create component files, source-control and manage them as independent components
&lt;/h3&gt;

&lt;p&gt;Let's create two React components, a 'button' and an 'app-bar'. Each component will have its own directory.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚îú‚îÄ‚îÄ my-workspace
    ‚îú‚îÄ‚îÄ .git
    ‚îú‚îÄ‚îÄ components
       ‚îú‚îÄ‚îÄ button
       ‚îî‚îÄ‚îÄ app-bar
    ‚îú‚îÄ‚îÄ .bitmap
    ‚îî‚îÄ‚îÄ workspace.jsonc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Each will have the following files:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*.ts&lt;/code&gt; - the component implementation files&lt;br&gt;
&lt;code&gt;*.compositions.tsx&lt;/code&gt; - the component isolated previews&lt;br&gt;
&lt;code&gt;*.spec.ts&lt;/code&gt; - the component tests&lt;br&gt;
&lt;code&gt;*.docs.mdx&lt;/code&gt; - the component docs&lt;br&gt;
&lt;code&gt;index.ts&lt;/code&gt; - the component entry file&lt;/p&gt;

&lt;p&gt;To track them we'll run:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bit add components/button
&lt;span class="nv"&gt;$ &lt;/span&gt;bit add components/app-bar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Our components are now each managed and source-controlled independently.&lt;/p&gt;

&lt;p&gt;Our tracked components are now also visible in Bit's workspace UI. To see them, run Bit's server, and open &lt;code&gt;localhost:3000&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bit start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MJ92__d4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2ADc5rFCUOOLuEu7oTs8Up9g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MJ92__d4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2ADc5rFCUOOLuEu7oTs8Up9g.png" alt="An example workspace UI"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-run-each-components-ci-and-tag-it-with-a-new-release-version"&gt;
  &lt;/a&gt;
  3. Run each component's CI and tag it with a new release version
&lt;/h3&gt;

&lt;p&gt;Our components are ready to be built and tagged with a new release version.&lt;/p&gt;

&lt;p&gt;We'll version button as &lt;code&gt;1.0.0&lt;/code&gt;, and &lt;code&gt;app-bar&lt;/code&gt; as &lt;code&gt;0.0.1&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ bit tag button 1.0.0 --message "public release"
$ bit tag app-bar 0.0.0 --message "initial version"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above &lt;code&gt;tag&lt;/code&gt; command will not only version our components but will also build them each in their own isolated environments. That is, it will copy their source files and configurations (set in the &lt;code&gt;workspace.jsonc&lt;/code&gt;) to a directory that is isolated from the rest of the workspace. Once that's done, it will test and build them. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The build workflow, the test runner, the compiler, the linter, and other development tools - are all determined by a pre-configured shareable component development environment. Learn more about it &lt;a href="https://harmony-docs.bit.dev/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The artifacts produced by the build process will all be versioned as well, along with each component's source-files and configurations. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U8XTWMoE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AnDNK-OF3smGAykpiN2b76A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U8XTWMoE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AnDNK-OF3smGAykpiN2b76A.png" alt="A component Bit repository"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the versioned artifacts is the component's package (with an auto-generated &lt;code&gt;package.json&lt;/code&gt; file). The package is used by other components when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using a component authored in the same Bit workspace&lt;/li&gt;
&lt;li&gt;Using a component cloned into a Bit workspace&lt;/li&gt;
&lt;li&gt;Using a component installed (as a package) using Bit or any other npm client&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#collaborating-on-components"&gt;
  &lt;/a&gt;
  Collaborating on components
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#4-export-push-and-import-clone-components"&gt;
  &lt;/a&gt;
  4. Export (push) and import (clone) components
&lt;/h3&gt;

&lt;p&gt;Just like git repositories are pushed to remote hosting (like Github) so do &lt;a href="https://blog.bitsrc.io/independent-components-the-webs-new-building-blocks-59c893ef0f65"&gt;component repositories&lt;/a&gt; are pushed to remote Bit hosting, remote "scopes".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To 'export' (push)&lt;/strong&gt; components to remote scopes, run:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ bit export
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The remote scope to push the components to, is set in the &lt;code&gt;workspace.jsonc&lt;/code&gt; configuration file. &lt;/p&gt;

&lt;p&gt;A remote scope can be created on &lt;a href="https://bit.dev"&gt;bit.dev&lt;/a&gt; for free, or &lt;a href="https://harmony-docs.bit.dev/reference/bit-oss-server/"&gt;by hosting on your own server&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To 'import' (clone)&lt;/strong&gt; a component into a Bit workspace, run:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bit import &amp;lt;component-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Shared components can be found on &lt;a href="https://bit.dev"&gt;bit.dev&lt;/a&gt; (or on your self-hosted Bit scope).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-suggest-a-new-component-release-version-with-bit-and-git"&gt;
  &lt;/a&gt;
  5. Suggest a new component release version with Bit and git
&lt;/h3&gt;

&lt;p&gt;Instead of locally tagging a component with a new release version (and exporting it from your local machine), we can run:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bit tag &lt;span class="nt"&gt;--soft&lt;/span&gt; &amp;lt;component-id&amp;gt; &amp;lt;new-version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will update the &lt;code&gt;.bitmap&lt;/code&gt; file with the suggested version (without actually tagging the component with a new release version). &lt;/p&gt;

&lt;p&gt;Once we push the workspace to Github (along with the .bitmap file) others can review the suggested changes, and your CI can ‚Äúhard tag‚Äù the suggested component versions. and export them. Learn more about this process here.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-am&lt;/span&gt; &lt;span class="s2"&gt;"change the button font. suggest new release version"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#6-push-the-bit-workspace-to-github-and-run-a-ci-to-tag-the-modified-component-with-a-new-release-version"&gt;
  &lt;/a&gt;
  6. Push the Bit workspace to Github and Run a CI to tag the modified component with a new release version
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Go to Github and create a new secret variable in your Github repository. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Name it &lt;code&gt;BIT_TOKEN&lt;/code&gt; and set the value of it to the &lt;code&gt;user.token&lt;/code&gt; value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a new &lt;code&gt;tag-and-export.yml&lt;/code&gt; file in your remote repository¬†&lt;code&gt;./.github/workflows&lt;/code&gt; directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create your script:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This workflow hard-tags and exports soft-tagged components&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Tag and Export Components&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;tag-and-export&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;!contains(github.event.head_commit.message,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;'--skip-ci')"&lt;/span&gt;
    &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;BIT_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.BIT_TOKEN }}&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Use Node.js &lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v1&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;12.x&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Bit Version Manager&lt;/span&gt; 
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm i -g @teambit/bvm&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install latest Bit version&lt;/span&gt; 
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bvm install&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;add bvm bin folder to path&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "$HOME/bin" &amp;gt;&amp;gt; $GITHUB_PATH&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up bit config&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;bit config set analytics_reporting false&lt;/span&gt;
          &lt;span class="s"&gt;bit config set anonymous_reporting false&lt;/span&gt;
          &lt;span class="s"&gt;bit config set user.token $BIT_TOKEN&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install packages using bit&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bit install&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Hard-tag pending components&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bit tag --persist&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Export components&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bit export&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Commit changes made to .bitmap&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;git config --global user.name '${{ github.actor }}'&lt;/span&gt;
        &lt;span class="s"&gt;git config --global user.email '${{ github.actor }}@users.noreply.github.com'&lt;/span&gt;
        &lt;span class="s"&gt;git add .bitmap&lt;/span&gt;
        &lt;span class="s"&gt;git commit -m "update .bitmap with new component versions (automated). --skip-ci"&lt;/span&gt;
        &lt;span class="s"&gt;git push&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above script installs Bit, hard tags the new release suggestions (found in the &lt;code&gt;.bitmap&lt;/code&gt; file), exports the newly tagged versions and commits the changes made to the &lt;code&gt;.bitmap&lt;/code&gt; file (the release suggestions have been replaced with new releases).&lt;/p&gt;

&lt;p&gt;See demo project on Github:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/teambit"&gt;
        teambit
      &lt;/a&gt; / &lt;a href="https://github.com/teambit/harmony-with-github-actions"&gt;
        harmony-with-github-actions
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A demo project
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>react</category>
      <category>javascript</category>
      <category>githunt</category>
      <category>git</category>
    </item>
    <item>
      <title>rapid development tips </title>
      <author>pawan deore</author>
      <pubDate>Fri, 02 Jul 2021 21:08:58 +0000</pubDate>
      <link>https://dev.to/pawandeore/rapid-development-tips-4dp3</link>
      <guid>https://dev.to/pawandeore/rapid-development-tips-4dp3</guid>
      <description>&lt;p&gt;Some of my time saving Shortcuts &lt;/p&gt;

&lt;p&gt;Alt + Tab. -&amp;gt; Shift Screens &lt;br&gt;
Windows + Arrowkey -&amp;gt; Screen Split&lt;br&gt;
Windows + E -&amp;gt; Open File Explorer&lt;br&gt;
Ctrl + Alt +T -&amp;gt; Open Terminal  ( linux only )&lt;br&gt;
In Command Prompt(Terminal)&lt;br&gt;
 mkdir 'folder_name' -&amp;gt; create folder&lt;br&gt;
 cd 'folder_name' -&amp;gt; go inside folder&lt;br&gt;
 cd .. -&amp;gt; go one level up &lt;br&gt;
 try to do things with COPY = cp and   MOVE   =  mv &lt;/p&gt;

&lt;p&gt;Fastest way to Start Project ( windows )&lt;/p&gt;

&lt;p&gt;Windows + E -&amp;gt; open file explorer&lt;br&gt;
In search bar type cmd -&amp;gt; this will open terminal in that directory &lt;/p&gt;

&lt;p&gt;Type code . -&amp;gt; this  will open visual studio code with that folder &lt;/p&gt;

&lt;p&gt;Visual Studio Code Tips&lt;/p&gt;

&lt;p&gt;Ctrl + `  to Shift OPEN OR CLOSE TERMINAL &lt;br&gt;
!   To Boiler plate html code &lt;br&gt;
(Favorite) Ctrl + d to select multiple cursor and can do anything at same time&lt;/p&gt;

&lt;p&gt;Install Emmet plugin and then&lt;/p&gt;

&lt;p&gt;Create div with class &lt;br&gt;
div.class_name   hit tab / enter it will create&lt;br&gt;
Create div with Id&lt;br&gt;
div#div_name hit tab / enter it will create &lt;br&gt;
Create multiple elements &lt;br&gt;
div*3 &lt;br&gt;
3 Div Tags &lt;/p&gt;

&lt;p&gt;And another thing type fast üòâ ~ 60WPM &lt;/p&gt;

&lt;p&gt;You can also do (what I do is ) (Advanced Stuff)&lt;/p&gt;

&lt;p&gt;git add .&lt;br&gt;
git commit -m " some message "&lt;br&gt;
git push &lt;/p&gt;

&lt;p&gt;Instead of typing these commands &lt;/p&gt;

&lt;p&gt;Bundle this up in Bash file replace "msg" with variable at the time of executing bash file pass as parameter . Note : ( don't forget to set origin )&lt;/p&gt;

&lt;p&gt;So you will end up running 3 commands in 1 !...&lt;/p&gt;

&lt;p&gt;and this is how you will do fast coding + navigation &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>vscode</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Static Variables and Methods (Java) </title>
      <author>Bola Adebesin</author>
      <pubDate>Fri, 02 Jul 2021 21:00:40 +0000</pubDate>
      <link>https://dev.to/mobolanleadebesin/static-variables-and-methods-java-1bcl</link>
      <guid>https://dev.to/mobolanleadebesin/static-variables-and-methods-java-1bcl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;Static variables are tied to the Class itself. Each object of a class shares the static variable. &lt;/p&gt;

&lt;p&gt;Non-static variable (instance variables) are tied to the object. In the example below, every object of the Cat class has its own name variable. However, every object &lt;em&gt;shares&lt;/em&gt; the catCount variable. &lt;/p&gt;

&lt;p&gt;When you see the static keyword in front of a variable name think of a &lt;em&gt;shared&lt;/em&gt; variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Class Cat 
{
String name; // Non-static variable (each object has it's own copy) 
static int catCount; //Static variable (each object of the class Cat shares this variable

Cat(String name){
this.name = name; // Non-static variables can be referenced with "this" keyword 
Cat.catCount++; // Static variables are referenced using the class name 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods
&lt;/h2&gt;

&lt;p&gt;Java methods are divided into two categories. &lt;em&gt;Instance methods&lt;/em&gt; and &lt;em&gt;Static methods&lt;/em&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instance-methods"&gt;
  &lt;/a&gt;
  Instance Methods
&lt;/h3&gt;

&lt;p&gt;These methods are called on an object and they have access to an objects data (non-static variables). This makes sense. Since an object is an &lt;em&gt;instance&lt;/em&gt; of a class, an instance method works on objects. &lt;/p&gt;

&lt;p&gt;The reason that instance methods are able to access an objects data is because they have a reference to the object. That reference is stored in the keyword "this". "this" holds a reference that tells us where the object we are referencing is. Without "this" we can't refer to the object. &lt;/p&gt;

&lt;p&gt;When you call an instance method, the object that you called the method on is actually passed along to that method as the first argument, we just don't see it. &lt;br&gt;
What we see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Cat sally = new Cat(); 
String name = sally.getName(); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What is actually happening:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Cat sally = new Cat(); 
String name = Cat.getName(sally); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The object sally is being passed into the getName method. Then inside the method, the object sally will be referred to as "this". &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#static-methods"&gt;
  &lt;/a&gt;
  Static Methods
&lt;/h3&gt;

&lt;p&gt;These methods do not have access to an objects data. Since they don't have an object reference. Static methods don't have "this". Instead a null value is passed to static methods. But, static methods can reference the static variables of the class and other static methods. &lt;/p&gt;

&lt;p&gt;Static methods allow us to call a method before we create any objects because they are tied to the class not the object. This is how the main() method works for example. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to circumvent importing Stimulus within every controller</title>
      <author>Ayush Newatia</author>
      <pubDate>Fri, 02 Jul 2021 20:59:59 +0000</pubDate>
      <link>https://dev.to/ayushn21/how-to-circumvent-importing-stimulus-within-every-controller-21dc</link>
      <guid>https://dev.to/ayushn21/how-to-circumvent-importing-stimulus-within-every-controller-21dc</guid>
      <description>&lt;p&gt;If you're familiar with &lt;a href="https://stimulus.hotwire.dev"&gt;Stimulus&lt;/a&gt; at all, the below bog standard controller should look very familiar. In fact I've nicked it from their homepage!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stimulus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;output&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="s2"&gt;`Hello, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nameTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm a Rubyist and unashamedly rather lazy; so having that &lt;code&gt;import&lt;/code&gt; statement at the top of every Stimulus controller always irked me. If you're using Webpack, there's a super simple way of circumventing this annoying &lt;code&gt;import&lt;/code&gt; statement.  &lt;/p&gt;

&lt;p&gt;First thing you need to do is create a file called &lt;code&gt;application_controller.js&lt;/code&gt; and place it in your &lt;code&gt;controllers&lt;/code&gt; directory. This is good practice nevertheless as you can put app specific utilities in there; such as getting some data out of &lt;code&gt;meta&lt;/code&gt; tags for example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// application_controller.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stimulus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then change your controllers to inherit from &lt;code&gt;ApplicationController&lt;/code&gt; and remove the &lt;code&gt;import&lt;/code&gt; statement. So the above controller would become:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ApplicationController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;output&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="s2"&gt;`Hello, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nameTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally we need to make a change to our Webpack configuration so the controllers know where to find &lt;code&gt;ApplicationController&lt;/code&gt; without the &lt;code&gt;import&lt;/code&gt; statement. We'll use the &lt;a href="https://webpack.js.org/plugins/provide-plugin/"&gt;Webpack Provide plugin&lt;/a&gt; to accomplish this.  &lt;/p&gt;

&lt;p&gt;Add the following lines to the &lt;code&gt;plugins&lt;/code&gt; array in your &lt;code&gt;webpack.config.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ProvidePlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;ApplicationController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./application_controller&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're using &lt;a href="https://github.com/rails/webpacker/"&gt;Webpacker&lt;/a&gt; 5 or older, add the following lines to your &lt;code&gt;config/webpack/environment.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webpack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Provide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ProvidePlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;ApplicationController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application_controller&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if you're using Webpacker 6, change your &lt;code&gt;config/webpack/base.js&lt;/code&gt; to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;webpackConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;merge&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@rails/webpacker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webpack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;customConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ProvidePlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;ApplicationController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./application_controller&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;webpackConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;customConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that should do the trick! You no longer need to import &lt;code&gt;Controller&lt;/code&gt; manually within every Stimulus controller!  &lt;/p&gt;

&lt;p&gt;Shout out to &lt;a href="https://twitter.com/RogersKonnor"&gt;Konnor Rogers&lt;/a&gt; for showing me how to do this :)&lt;/p&gt;

&lt;p&gt;This post was originally published on &lt;a href="https://binarysolo.chapter24.blog/how-to-circumvent-importing-stimulus-within-every-controller/"&gt;my blog&lt;/a&gt;&lt;/p&gt;

</description>
      <category>stimulus</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Insertion in AVL tree</title>
      <author>Aya Bouchiha</author>
      <pubDate>Fri, 02 Jul 2021 20:49:22 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/insertion-in-avl-tree-1hmk</link>
      <guid>https://dev.to/ayabouchiha/insertion-in-avl-tree-1hmk</guid>
      <description>&lt;p&gt;Hi, I'm Aya Bouchiha and today I'm going to talk about the insertion in AVL tree, but if you're not familiar with AVL trees, check these posts below :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/introduction-to-avl-tree-fbk"&gt;introduction to AVL trees&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/rotation-in-avl-tree-376o"&gt;rotation in AVL trees&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we get started, I want to mention that Balance Factor&lt;br&gt;
 of a balanced node should be always {-1,0,1} &lt;br&gt;&lt;br&gt;
&lt;code&gt;BalanceFactor=height(left sub-tree)-height(right sub-tree)&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#insertion-implementation-in-python-from-geeksforgeeks"&gt;
  &lt;/a&gt;
  Insertion implementation in python from &lt;a href="https://www.geeksforgeeks.org/avl-tree-set-1-insertion/"&gt;geeksforgeeks&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="s"&gt;"""
    this insertion implementation is from geeksforgeeks
    https://www.geeksforgeeks.org/avl-tree-set-1-insertion/
    (This code is contributed by Ajitesh Pathak)
"""&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# AVL tree class which supports the
# Insert operation
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AVL_Tree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# Recursive function to insert key in
&lt;/span&gt;    &lt;span class="c1"&gt;# subtree rooted with node and returns
&lt;/span&gt;    &lt;span class="c1"&gt;# new root of subtree.
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="c1"&gt;# Step 1 - Perform normal BST
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Step 2 - Update the height of the
&lt;/span&gt;        &lt;span class="c1"&gt;# ancestor node
&lt;/span&gt;        &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                           &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c1"&gt;# Step 3 - Get the balance factor
&lt;/span&gt;        &lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Step 4 - If the node is unbalanced,
&lt;/span&gt;        &lt;span class="c1"&gt;# then try out the 4 cases
&lt;/span&gt;        &lt;span class="c1"&gt;# Case 1 - Left Left
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rightRotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Case 2 - Right Right
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leftRotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Case 3 - Left Right
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leftRotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rightRotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Case 4 - Right Left
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rightRotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leftRotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;leftRotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
        &lt;span class="n"&gt;T2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;

        &lt;span class="c1"&gt;# Perform rotation
&lt;/span&gt;        &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;
        &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;T2&lt;/span&gt;

        &lt;span class="c1"&gt;# Update heights
&lt;/span&gt;        &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c1"&gt;# Return the new root
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rightRotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;
        &lt;span class="n"&gt;T3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;

        &lt;span class="c1"&gt;# Perform rotation
&lt;/span&gt;        &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;
        &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;T3&lt;/span&gt;

        &lt;span class="c1"&gt;# Update heights
&lt;/span&gt;        &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c1"&gt;# Return the new root
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;preOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;preOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;preOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;



&lt;span class="c1"&gt;# Driver program to test above function
&lt;/span&gt;&lt;span class="n"&gt;myTree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AVL_Tree&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;"""
     30
    /  &lt;/span&gt;&lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="s"&gt;  20   40
 /  \     &lt;/span&gt;&lt;span class="se"&gt;\
&lt;/span&gt;&lt;span class="s"&gt;10  25    50
"""&lt;/span&gt;
&lt;span class="c1"&gt;# Preorder Traversal
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Preorder traversal of the"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"constructed AVL tree is"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;myTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;preOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for more details check this &lt;a href="https://www.geeksforgeeks.org/avl-tree-set-1-insertion/"&gt;article&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.programiz.com/dsa/avl-tree"&gt;https://www.programiz.com/dsa/avl-tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/avl-tree-set-1-insertion/"&gt;https://www.geeksforgeeks.org/avl-tree-set-1-insertion/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/program-to-calculate-height-and-depth-of-a-node-in-a-binary-tree/"&gt;https://www.geeksforgeeks.org/program-to-calculate-height-and-depth-of-a-node-in-a-binary-tree/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=_8qqlVH5NC0"&gt;https://www.youtube.com/watch?v=_8qqlVH5NC0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;#day_20&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>python</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
  </channel>
</rss>
