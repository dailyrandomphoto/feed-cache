<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Must have tools for bloggers.</title>
      <author>Kedar.K</author>
      <pubDate>Sat, 14 Aug 2021 11:10:06 +0000</pubDate>
      <link>https://dev.to/kedark/must-have-tools-for-bloggers-1jd1</link>
      <guid>https://dev.to/kedark/must-have-tools-for-bloggers-1jd1</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;No promotions included; this is genuinely for helping dev bloggers like me. Some tools below are purely related to technical bloggers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#code-screenshot"&gt;
  &lt;/a&gt;
  Code Screenshot
&lt;/h2&gt;

&lt;p&gt;Sharing code on social media can be hectic, but it's an effective way to engage the audience. And most of the time, screenshots may not look pretty enough to gain attention. Here are the tools that can help you create beautiful screenshots of code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-codeimgio"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://codeimg.io/"&gt;codeimg.io&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is one of the best options which will give you the most granularity to create the screenshots, ex - choose macOS/Windows-style window, etc. And it will also give you the option to customize screenshots according to social media platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2jSZGlnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3bwvtbxz8u1fs8yol9j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2jSZGlnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3bwvtbxz8u1fs8yol9j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EqiKOjEU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0189k2kooj8xjh76sw15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EqiKOjEU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0189k2kooj8xjh76sw15.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-carbon"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://carbon.now.sh/"&gt;carbon&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you don't want granular level customization and find it overwhelming, no worries, we have &lt;em&gt;Carbon&lt;/em&gt;. Simple, easy to use, and different &lt;em&gt;solid&lt;/em&gt; color backgrounds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rOjyzPrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e811ggzavztf5zfcm6e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rOjyzPrW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e811ggzavztf5zfcm6e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-rayso"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://ray.so/"&gt;ray.so&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Well, if you are the one who absolutely loves gradient colors, then this will provide you with &lt;em&gt;gradient&lt;/em&gt; backgrounds. But keep in mind, it doesn't have a lot of customization options.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3DPfcRAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55zvj5i4p2wp22sylii4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3DPfcRAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55zvj5i4p2wp22sylii4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-codesnap-vs-code"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://marketplace.visualstudio.com/items?itemName=adpyke.codesnap"&gt;codesnap (VS Code)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Do copying and pasting code from the editor to this website feel like a lot of work to you? Check this out; you can take beautiful screenshots straight from VS Code (editor).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--my9uAqdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yod690cr3340i8ebt3c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--my9uAqdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yod690cr3340i8ebt3c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#diagrams"&gt;
  &lt;/a&gt;
  Diagrams
&lt;/h2&gt;

&lt;p&gt;Including Diagrams in your blog can be effective as they will allow the audience to grasp the concept visually and within little time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-lucidchart"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.lucidchart.com/pages/examples/diagram-maker"&gt;LucidChart&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is one of the best tools for diagrams/flowcharts out there. It also has the paid version, but free should be sufficient for creating small flows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jf_acqq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzs5ewzr9fdwjvefh52t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jf_acqq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzs5ewzr9fdwjvefh52t.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-diagramsnet"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://app.diagrams.net/"&gt;diagrams.net&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Here is another one. This is relatively simple from the previous one, and the good thing is it's free forever.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OseoRAWi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k7u2kui6us1j7yxxv30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OseoRAWi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k7u2kui6us1j7yxxv30.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#sharing-code-snippets"&gt;
  &lt;/a&gt;
  Sharing code snippets
&lt;/h2&gt;

&lt;p&gt;If you have some code to share that cannot be shared/fitted in screenshots, here is the list of things you can use. Also, this will provide additional functionality like inbuilt code execution, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-gists"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://gist.github.com/discover"&gt;Gists&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This gets my highest recommendation, the most straightforward way to share code right from your GitHub. If you write on dev, I recommend this as embed it in your dev articles. If you are wondering the difference between gist and GitHub, check out this &lt;a href="https://stackoverflow.com/questions/6767518/what-is-the-difference-between-github-and-gist"&gt;stackoverflow&lt;/a&gt; question.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qYfpvbGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmd65xj2m0t8njk49udz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qYfpvbGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmd65xj2m0t8njk49udz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-pastebin"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://pastebin.com/"&gt;pastebin&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It's the oldest one out there. It might get some advertisement on the webpage, but it's a perfect tool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z_0gr6J7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2w4rmgmon2wp3q9nlt1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z_0gr6J7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2w4rmgmon2wp3q9nlt1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-codepilenet"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.codepile.net/pile/"&gt;codepile.net&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is similar to the previous one but with fewer ads. And it's free as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Knm_FoTM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5hk0kfkjn7mibh87qtp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Knm_FoTM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5hk0kfkjn7mibh87qtp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#blog-media-cover-image-banner-etc"&gt;
  &lt;/a&gt;
  Blog media - cover Image, banner, etc.
&lt;/h2&gt;

&lt;p&gt;Cover image for the blog is essential because it can attract users to click on your blog. Here are the two best resources to create the same&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-canva"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.canva.com/"&gt;canva&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qf09GrbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmxcl1scdybmughoa50q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qf09GrbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmxcl1scdybmughoa50q.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
CANVA is the most popular online tool for creating headers, posters, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-crello"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://crello.com/"&gt;crello&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--in6EDk-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfkva0mdl1krgmi4b8pf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--in6EDk-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfkva0mdl1krgmi4b8pf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is similar to the above, but it has more templates to use from.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#writing-aids"&gt;
  &lt;/a&gt;
  Writing aids
&lt;/h2&gt;

&lt;p&gt;Are you worried about your grammar, punctuation, etc., in your writing? Well, don't worry, these tools will help you write with confidence.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-grammarly"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.grammarly.com/"&gt;Grammarly&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RmlKgwsD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eym8ulgtiyenfv1sfn6x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RmlKgwsD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eym8ulgtiyenfv1sfn6x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the most popular tool in the pool of writing aids. The free version should be sufficient for most of the time but paid is also worth it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-hemingwayapp"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://hemingwayapp.com/"&gt;hemingwayapp&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rBr-i4qp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ah0kw9f2ryao64f6u7eu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rBr-i4qp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ah0kw9f2ryao64f6u7eu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't want to spend money and go with a free tool, well, the search ends here. This is a free alternative for the resource mentioned above. Thanks to &lt;a href="https://dev.to/atapas"&gt;Tapas Adhikary&lt;/a&gt; for the suggestion.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#emojis"&gt;
  &lt;/a&gt;
  Emojis
&lt;/h2&gt;

&lt;p&gt;Well, this is no new. As we know, these are the best way to show expressions via text. We can use emoji codes, so our browser renders it. But wait, why write codes when you can just copy and paste them. I know you will excel at it since you might be a copy and paste expert 😉.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-emojihomepage"&gt;
  &lt;/a&gt;
  1. &lt;a href="http://emojihomepage.com/"&gt;emojihomepage&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yw-TFer1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jd16ynztyvvi8y6lm151.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yw-TFer1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jd16ynztyvvi8y6lm151.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the best and easy-to-use tool; just click to copy and paste.&lt;/p&gt;




&lt;p&gt;That's all for this post, guys,&lt;br&gt;
if you enjoyed it, don't forget to ❤ or 🔖.&lt;/p&gt;

&lt;p&gt;Happy Blogging 😀&lt;/p&gt;

</description>
      <category>writing</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Open VSCODE in browser from github cool trick</title>
      <author>CoderZ90</author>
      <pubDate>Sat, 14 Aug 2021 10:58:25 +0000</pubDate>
      <link>https://dev.to/official_fire/open-vscode-in-browser-from-github-cool-trick-5a89</link>
      <guid>https://dev.to/official_fire/open-vscode-in-browser-from-github-cool-trick-5a89</guid>
      <description>&lt;p&gt;There is a very cool trick to open vscode on browser with a simple shortcut key &lt;/p&gt;

&lt;p&gt;Step 01: Go to your github repository&lt;/p&gt;

&lt;p&gt;Step 02: Press "windows icon" + "." key on your keyboard&lt;/p&gt;

&lt;p&gt;Boom! You are done vs code is launching&lt;/p&gt;

&lt;p&gt;if you found this post useful subscribe to my channel for more videos and coding tutorials&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtube.com/c/codingfire?sub_confirmation=1"&gt;https://youtube.com/c/codingfire?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thankyou! Stay safe. Stay Happy :)&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Async VS Defer - Understand The JavaScript Execution</title>
      <author>Ranjeet Singh</author>
      <pubDate>Sat, 14 Aug 2021 09:32:03 +0000</pubDate>
      <link>https://dev.to/jeetsdev/async-vs-defer-understand-the-javascript-execution-228g</link>
      <guid>https://dev.to/jeetsdev/async-vs-defer-understand-the-javascript-execution-228g</guid>
      <description>&lt;p&gt;As a web developer, how many times you have written this line in your code?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Probably too many times to count, but do you really understand how the browser handles this simple line of code? We have always been advised to put our &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag at the end of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag, but again why is that so...? Is there any other place where we can put our &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag? What if we put the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag inside the &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt; tag of our HTML document like -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- inside the head tag --&amp;gt;
&amp;lt;head&amp;gt;
    ...
    &amp;lt;title&amp;gt; .... &amp;lt;/title&amp;gt;
    &amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/bN4Gf6GEs9OtW/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/bN4Gf6GEs9OtW/giphy.gif" alt="Gif here"&gt;&lt;/a&gt;&lt;br&gt;
Aahhh, enough of these questions. Now it's time to understand all of them.&lt;/p&gt;

&lt;p&gt;First and foremost, Yes we can put our &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag wherever we want, but remember one thing that it can affect your page performance. &lt;/p&gt;

&lt;p&gt;So now let's understand exactly how &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag loading works and most importantly how we can use &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; to speed up our Javascript loading and improve our page performance. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-browser-parse-html"&gt;
  &lt;/a&gt;
  How Browser Parse HTML
&lt;/h2&gt;

&lt;p&gt;Before understanding how &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; is loading, we first need to understand how the browser parses HTML. Luckily, it's pretty straightforward. The browser will parse HTML from the top of the document to the bottom, and when it hits a resource, like an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag it will send out a request for that resource and continue parsing. The important thing to note is that the browser does not stop parsing the HTML to get the &lt;code&gt;img src&lt;/code&gt;. This is why when you load a web page you may notice the page jumps around as the images pop in since they are loaded in the background and may finish downloading after the HTML is parsed.&lt;/p&gt;

&lt;p&gt;But that's not the case with the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag. When the browser comes across a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag when loading HTML, the browser is forced to download and parse the entire &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; and evaluate it first, before it can continue with reading the rest of the HTML to build the DOM. This is why we are advised to put our &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag at the bottom of our HTML body so they don't delay the parsing of the HTML.&lt;/p&gt;

&lt;p&gt;Now you can just think that putting the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag at the bottom of the HTML body is ideal, but what if the HTML is too large and it takes some time to get downloaded and parsed then the JavaScript will not start downloading until all of the HTML is parsed which could delay your &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; download and affect your page performance. This is why the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; attributes were created.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#async-and-defer"&gt;
  &lt;/a&gt;
  Async and Defer
&lt;/h2&gt;

&lt;p&gt;Both &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; attributes load the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; without blocking the DOM and make the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag work like as a &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag to the parser as described above. This means that the script will be fetched in the background and continue parsing as normal without waiting. Okay, that seems fair but what's the difference between them...? Here we go then.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#async-vs-defer"&gt;
  &lt;/a&gt;
  Async vs Defer
&lt;/h2&gt;

&lt;p&gt;Both &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; look like they do the same thing at the first glance, but that's not the case, there is a subtle difference between the two.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#defer-waits-for-the-dom-but-async-doesnt-"&gt;
  &lt;/a&gt;
  Defer waits for the DOM but Async doesn't -
&lt;/h3&gt;

&lt;p&gt;The first and most important difference Is &lt;code&gt;async&lt;/code&gt; doesn't care whether DOM is fully loaded or not, on the other side &lt;code&gt;defer&lt;/code&gt; waits for the DOM to get loaded first and after that, it starts execution of the scripts.&lt;/p&gt;

&lt;p&gt;For example, let's say you have 25000 buttons in your HTML document and now select every button of the DOM using both of the scripts and get the length of them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;head&amp;gt;
  &amp;lt;script src="defer.js" defer&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src="async.js" async&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div class="container"&amp;gt;
  &amp;lt;!-- 25000 buttons --&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here are our script codes...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//! Async script code here
let asyncButton = document.querySelectorAll('button');
console.log(`Async script button count: ${asyncButton.length}`);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Defer script code here
let deferButton = document.querySelectorAll('button');
console.log(`Defer script button count: ${deferButton.length}`);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is the console output...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i2jVAKBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628732144264/ogBB9E8iI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i2jVAKBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628732144264/ogBB9E8iI.png" alt="temp1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see now, &lt;code&gt;async&lt;/code&gt; is not waiting for the DOM to get loaded fully and selecting all the buttons loaded at the time of execution of the script and on the other hand, &lt;code&gt;defer&lt;/code&gt; is waiting for the DOM elements to get loaded first and that's why it's selecting every button presented at the DOM.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If your script is dependent on the DOM, then never ever use the &lt;code&gt;async&lt;/code&gt; attribute, there's the possibility that the element you need get undefined and this is a potential source of bugs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#defer-maintain-the-order-of-js-files-async-doesnt-"&gt;
  &lt;/a&gt;
  Defer maintain the order of JS files Async doesn't -
&lt;/h3&gt;

&lt;p&gt;What does it mean though, take another example to understand it? Let's say you will have four scripts. Each script logs the number of that script. Now if we gonna use the &lt;code&gt;async&lt;/code&gt; attribute in the scripts, the order of executing scripts become unpredictable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;script src="one.js" async&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="two.js" async&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="three.js" async&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="four.js" async&amp;gt;&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The console output will be something like this...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N3Qi0LwF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628733846390/0AUL0x1t4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N3Qi0LwF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628733846390/0AUL0x1t4.png" alt="temp2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But what if we use the &lt;code&gt;defer&lt;/code&gt; attribute in every script?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;script src="one.js" defer&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="two.js" defer&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="three.js" defer&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="four.js" defer&amp;gt;&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is the output...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2fNXD-KZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628736741526/pdhVcVeJS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2fNXD-KZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628736741526/pdhVcVeJS.png" alt="temp3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now you can see clearly that &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;defer&lt;/code&gt; always maintain the order of the script so if you have scripts that depend on each other then always consider using &lt;code&gt;defer&lt;/code&gt; rather than &lt;code&gt;async&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Adding the &lt;code&gt;defer&lt;/code&gt; attribute will make sure DOM gets loaded first and then the scripts get executes in the given order.&lt;/li&gt;
&lt;li&gt;Adding the &lt;code&gt;async&lt;/code&gt; attribute will execute the script as soon as it gets loaded and this will not follow any order. So avoid using it if your script is dependent on each other or DOM.&lt;/li&gt;
&lt;li&gt;So practically, &lt;code&gt;defer&lt;/code&gt; is more useful than &lt;code&gt;async&lt;/code&gt;, and most of the time you would want &lt;code&gt;defer&lt;/code&gt; instead of &lt;code&gt;async&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;async&lt;/code&gt; is great when you want to load the script in the middle.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's all about &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; and script loading in JavaScript. If you enjoyed this article, please tell a friend about it or share it on your social media handles and make sure you comment below and share your thoughts about it. Thank you.🙏&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/jeetsdev"&gt;Follow me on Twitter&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>DEV Protip: automatically format with keyboard shortcuts!</title>
      <author>Siddharth</author>
      <pubDate>Sat, 14 Aug 2021 09:18:49 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/dev-pro-tip-automatically-format-with-keyboard-shortcuts-k73</link>
      <guid>https://dev.to/siddharthshyniben/dev-pro-tip-automatically-format-with-keyboard-shortcuts-k73</guid>
      <description>&lt;p&gt;I just realized that you can add some basic formatting using keyboard shortcuts in comments:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p0mVLSlV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3wwwbqqkfkol85ku079.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p0mVLSlV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3wwwbqqkfkol85ku079.gif" alt="cft"&gt;&lt;/a&gt;&lt;/p&gt;
Sorry for the random popup in the middle, just my computer reminding me to take a break

 

&lt;p&gt;I only found ⌥⌘i for italic, ⌥⌘b for bold, and ⌥⌘k for links. And they only seem to work on comments. Maybe the DEV team might know more?&lt;/p&gt;

</description>
      <category>dev</category>
      <category>meta</category>
    </item>
    <item>
      <title>Form validation with react-hook-form</title>
      <author>M. Akbar Nugroho</author>
      <pubDate>Sat, 14 Aug 2021 08:46:10 +0000</pubDate>
      <link>https://dev.to/thexdev/form-validation-with-react-hook-form-94e</link>
      <guid>https://dev.to/thexdev/form-validation-with-react-hook-form-94e</guid>
      <description>&lt;p&gt;Form is one of core functionalities that must exist in any application. This functionality allows us interact with user data (input) and process it into a valuable data or resource (output).&lt;/p&gt;

&lt;p&gt;Even this functionality is powerful, it has one biggest obstacle. Yes, it's how to validate the user input. And that's the reason why I make this article.&lt;/p&gt;

&lt;p&gt;In this article I will share to you how we can handle form validation specifically in React application using a package called &lt;code&gt;react-hook-form&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's start it out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;React application (fresh or existing app)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE:&lt;br&gt;
I will use my previous project called &lt;code&gt;example-app&lt;/code&gt;. It has no features. Just a fresh React project installed using &lt;code&gt;CRA&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/thexdev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Th5Ke3v4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3zOPI-Wa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/308956/19d49eb4-2172-4978-991a-10fd36088243.jpg" alt="thexdev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thexdev/deploy-react-on-netlify-23a1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Deploy React on Netlify&lt;/h2&gt;
      &lt;h3&gt;M. Akbar Nugroho ・ Aug 12 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-add-reacthookform"&gt;
  &lt;/a&gt;
  1. Add react-hook-form
&lt;/h3&gt;

&lt;p&gt;I use Git inside &lt;code&gt;example-app&lt;/code&gt;. So, before adding the package I will create a new branch called &lt;code&gt;feat-signin&lt;/code&gt; then merge that feature into branch main whenever I finish that feature.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Create and checkout to branch feat-signin&lt;/span&gt;
git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; feat-signin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, it's time to add the package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add react-hook-form
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-create-the-form"&gt;
  &lt;/a&gt;
  2. Create the form
&lt;/h3&gt;

&lt;p&gt;Maybe you have a clue about what form that I want to build. Yes, it's a sign-in form. I will validate the user email and password before they can actually sign-in.&lt;/p&gt;

&lt;p&gt;I will not using any styling tools. Just HTML to make it simple and focus :).&lt;/p&gt;

&lt;p&gt;First, I wanna add a page called Signin inside my project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Here's my current project&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;
├── package.json
├── public
│   ├── favicon.ico
│   ├── index.html
│   ├── logo192.png
│   ├── logo512.png
│   ├── manifest.json
│   └── robots.txt
├── README.md
├── src
│   ├── App.css
│   ├── App.js
│   ├── App.test.js
│   ├── index.css
│   ├── index.js
│   ├── logo.svg
│   ├── pages
│   │   └── Signin.js
│   ├── reportWebVitals.js
│   └── setupTests.js
└── yarn.lock
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create the sign-in form and import it inside &lt;code&gt;App.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/Signin.js&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Signin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Email&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Signin&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Signin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Signin&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./pages/Signin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Signin&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-integrate-the-form-with-reacthookform"&gt;
  &lt;/a&gt;
  3. Integrate the form with react-hook-form
&lt;/h3&gt;

&lt;p&gt;Let's integrate the previous form so we can collect all user input inside that form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/Signin.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-hook-form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Signin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;formState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Email&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Signin&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Signin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the application, open the browser console and try to submit the form. You will see something like image below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NnAqk2P3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgzcx5jzac79dxaufmbn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NnAqk2P3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgzcx5jzac79dxaufmbn.png" alt="Submit form"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-add-input-validation"&gt;
  &lt;/a&gt;
  4. Add input validation
&lt;/h3&gt;

&lt;p&gt;If I submit the form with an empty password, I will not get any error message that indicate I forgot to input my password which is a bad UX.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--27YJcsI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn8cys9uaxitt7kmk0xc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--27YJcsI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn8cys9uaxitt7kmk0xc.png" alt="Forgot to input password"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To achieve that feature, we need to install two packages. &lt;code&gt;@hookform/resolvers/yup&lt;/code&gt; and &lt;code&gt;yup&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @hookform/resolvers yup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE:&lt;br&gt;
yup is one of JavaScript schema Objects. It allows us to define a shape (structure) and validate a JavaScript object. You can also use other schema object like Joi, Zod, etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, let's add input validation into the form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/Signin.js&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;yupResolver&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@hookform/resolvers/yup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Signin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;formState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yupResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if we submit the form with an empty password, we will not see any message in the browser console because the form is actually throw error messages and not submit the form.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CPyak7dJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jo7n7dx0pgt0jyviwf9j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CPyak7dJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jo7n7dx0pgt0jyviwf9j.png" alt="Form error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Look, even the cursor automatically focus to the input element that produce the error.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-displaying-the-error-messages"&gt;
  &lt;/a&gt;
  5. Displaying the error messages
&lt;/h3&gt;

&lt;p&gt;Now, the form can validates the input value, but it's not good enough. We need to display what's wrong with the form. So, the user can input the correct value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/Signin.js&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Email&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Submit the form and we can see the error messages.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ws-QMy4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xx1tgdm3ne4hajqsk7mr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ws-QMy4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xx1tgdm3ne4hajqsk7mr.png" alt="Form with error messages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hmm, I think the error messages not user friendly enough, right? So, let's improve it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#6-customize-the-error-messages"&gt;
  &lt;/a&gt;
  6. Customize the error messages
&lt;/h3&gt;

&lt;p&gt;This is the reason why I choose Yup for the schema validation. We can easily customize the error messages like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/Signin.js&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Please provide a valid email address&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Please provide your email address&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Please provide your password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Submit the form again and you will see the error messages has changed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tAxcIV-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xh7s6t08im8db47cbdo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tAxcIV-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xh7s6t08im8db47cbdo.png" alt="Improved error messages"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h2&gt;

&lt;p&gt;Validating the form on the client side is not enough. We also need to validate the form on the server side because attacker can bypass our validation on the client side.&lt;/p&gt;

&lt;p&gt;The problem comes when we want to display the error messages from the server into the form. Fortunately, we can easily done this feature using react-hook-form.&lt;/p&gt;

&lt;p&gt;We just need to use &lt;code&gt;setError&lt;/code&gt; API to display the error messages that comes from the server into the form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/Signin.js&lt;/span&gt;

&lt;span class="c1"&gt;// Response from the server&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   "message": "...",&lt;/span&gt;
&lt;span class="c1"&gt;//   "errors": {&lt;/span&gt;
&lt;span class="c1"&gt;//     email: ["The email must be a valid email address."]&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;formState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yupResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do sign-in process. Just example :)&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/** ... */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;422&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;manual&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/thexdev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3gHgh1Nj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520macbook%26emoji%3D%25F0%259F%2592%25BB%26slug%3Dthexdev%26button_colour%3DFFDD00%26font_colour%3D000000%26font_family%3DPoppins%26outline_colour%3D000000%26coffee_colour%3Dffffff"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>Create a Netflix clone from Scratch: JavaScript PHP + MySQL Day 19</title>
      <author>Christopher Glikpo</author>
      <pubDate>Sat, 14 Aug 2021 08:43:54 +0000</pubDate>
      <link>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-19-1n33</link>
      <guid>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-19-1n33</guid>
      <description>&lt;p&gt;Netflix provides streaming movies and TV shows to over 75 million subscribers across&lt;br&gt;
the globe. Customers can watch as many shows/ movies as they want as long as they are&lt;br&gt;
connected to the internet for a monthly subscription fee of about ten dollars. Netflix produces&lt;br&gt;
original content and also pays for the rights to stream feature films and shows.&lt;/p&gt;

&lt;p&gt;In this video,we will create the login functionalities&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/paMCmGfEJe4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you want to learn more about Web Development, feel free to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>There's always time for cheese</title>
      <author>Jordan Brennan</author>
      <pubDate>Sat, 14 Aug 2021 08:36:53 +0000</pubDate>
      <link>https://dev.to/jfbrennan/there-s-always-time-for-cheese-1p98</link>
      <guid>https://dev.to/jfbrennan/there-s-always-time-for-cheese-1p98</guid>
      <description>&lt;p&gt;New software features are usually designed, built, and shipped with limited resources, especially at startups, but that's not an excuse to skimp on basic features because &lt;em&gt;there's always time for cheese&lt;/em&gt;! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-analogy"&gt;
  &lt;/a&gt;
  The analogy
&lt;/h2&gt;

&lt;p&gt;When making a sandwich (a big software feature), the bulk of the time is actually spent gathering ingredients, getting a knife and plate, preparing the ingredients, and cleaning up afterwards. This is synonymous to discussing requirements, branching, getting a fresh env running, writing tests, and the code review. None of these activities are the sandwich and your product gains nothing from it. The &lt;em&gt;assembling&lt;/em&gt; stage of making a sandwich is the real work, and, compared to the whole process, the time it takes to add cheese costs almost nothing and yet makes the sandwich so much more delicious.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-cost-of-skipping-cheese"&gt;
  &lt;/a&gt;
  The cost of skipping cheese
&lt;/h2&gt;

&lt;p&gt;What happens when we don't add cheese? Well, we ship a new sandwich that is known to be lacking. The inevitable request for cheese will come and now the cost of adding cheese is much greater than what it would have been (e.g. go get cheese, disassemble the sandwich, possibly rework the layers, add a slice of cheese, and clean up again vs. add the cheese when you were adding meat). &lt;/p&gt;

&lt;p&gt;And that's just the engineering cost. Depending on a customer's need or market demand, delaying cheese can often cost much more than that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-skip-the-cheese"&gt;
  &lt;/a&gt;
  Why do we skip the cheese?
&lt;/h2&gt;

&lt;p&gt;I have found the reason for skipping cheese is most often a lack of familiarity with how cheap a piece of work really is.  Compared to stakeholders, developers have a much better perspective on what additional work is going to cost, and so they need to help stakeholders understand when something is cheese. &lt;strong&gt;Cheese is a valuable addition that easily fits into the work that's already planned&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A misunderstanding of scope creep is the other reason we skip cheese. Cheese is not scope creep, even if it comes into the discussion later. Drifting from a sandwich to a burger or adding a cookie on the side is scope creep. The easiest way to tell is if the addition requires starting up a new division of work (e.g. get other ingredients, set up more tools, follow a different process). &lt;/p&gt;

&lt;p&gt;Wise managers can spot cheese and they make time for it because they understand the cost-benefit favors it, even if they're short on time.&lt;/p&gt;

&lt;p&gt;Next time a big feature request comes to you, &lt;strong&gt;make time for cheese&lt;/strong&gt; 🧀&lt;/p&gt;

</description>
      <category>management</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>React Ecommerce Templates</title>
      <author>radhe</author>
      <pubDate>Sat, 14 Aug 2021 08:32:58 +0000</pubDate>
      <link>https://dev.to/shamkumar/react-ecommerce-templates-5f24</link>
      <guid>https://dev.to/shamkumar/react-ecommerce-templates-5f24</guid>
      <description>&lt;p&gt;React Ecommerce Templates&lt;br&gt;
 React is the most popular library for the development of e-commerce applications. React templates for building eCommerce apps are the combination of several components and elements. These small components are packed in containers and then they form the user interface of the React app. React templates for building eCommerce sites act as a blueprint for developers.&lt;br&gt;
React eCommerce templates are dynamic and versatile and they can be used for building an exclusive React app for eCommerce. These templates are completely customizable and can take any shape as you specify them. As the front end of your React app will indicate the quality of your services. It is essential that you should design a scalable system to emancipate your business.&lt;br&gt;
React eCommerce templates significantly improve your speed while React native app development services-&amp;gt;&lt;a href="https://bit.ly/2Tkttui"&gt;https://bit.ly/2Tkttui&lt;/a&gt;. You can find dedicated templates that are meant for providing value to your needs. Also, you do not need to make lots of changes to meet your requirements.&lt;br&gt;
Why React Ecommerce Templates?&lt;br&gt;
Ther React library has numerous templates for eCommerce development. While working in such templates you can modify each template according to your need independently. That means you are free to change any element on the UI without affecting other elements. This avoids the need for rendering the entire page every time you modify an element from the interface.&lt;br&gt;
Every template in the react library is comprehensive and can be copied to another template That gives flexibility to a developer. Sometimes creating an interface for eCommerce sites becomes very confusing. In such cases, these templates act as a starting point or inspiration for development.&lt;br&gt;
  Top React Ecommerce Templates&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Molla
Molla is a fully-featured library for the development of excellent user interfaces and UX. This template library is loaded with a vast set of tools and features from which you can create an interface for the eCommerce app. Also with the help of this template the app developed can have amazing features and performance. This template provides you 20 sample eCommerce sites from which you can take reference for your ideas.
Molla is very convenient for getting a response and has a basic design architecture. It has a simple interface that is quick to understand and operate. It also supports full width strips layouts for the app. Molla provides access to a varied number of icons that are used in the eCommerce business. You can make your react app to display the latest products and services in an interactive manner.
This template can be used in several browsers and can have several animations or transitions for making the app interesting.&lt;/li&gt;
&lt;li&gt;Novine
Novine is a simplified and interesting library that provides templates for eCommerce apps. Novine has enabled developers to use react.js, Next.js, React-Redux, ES6+, Sass as well as Bootstrap 4. This template library is used for the development of modern eCommerce sites that have excellent responsive capabilities. It has 4 demo react apps to understand the features.
Novine also has support in payment methods with the use of the latest strip methods. The documentation for this template is very detailed and includes everything that this template can do. Also, the components in this template provided by it are easy for modification. In addition to these features, there are a number of functionalities this template can provide you.
The source code of the template is simpler to handle and customize. It has support for a varied number of transitions and animations for every element you add to the app interface.&lt;/li&gt;
&lt;li&gt;Livani
Livani is a clean and interactive template that is used for making scalable and modern react apps for eCommerce. This template is developed with the utility of Firebase Firestore, Firebase Auth, Express js, etc. it also includes stripe, and express js. Livani template offers a developer all the tools that are required for the development of eCommerce apps. Such apps developed from this template are capable of competing in the growing competition of several industries.
It has more than 5 sample apps, integration to payment methods, and also it is Retina Ready. The most exclusive feature is that the code of the Livani template is SEO optimized. You can also involve multiple fonts through google, interesting animation, and sliders for many actions. This liberty supports sliders and interactive text boxes for providing a responsive layout.
You can get the license of this template with a minimal fee of $ 29.&lt;/li&gt;
&lt;li&gt;Lezada
With the use of Lezada, you can create extremely sleek and creative eCommerce sites. It is used for multipurpose website designs involving all the features at once in the app. This has all the high-quality features and functionalities that you may require for the Reactjs development services-&amp;gt;&lt;a href="https://bit.ly/3ylFw9J"&gt;https://bit.ly/3ylFw9J&lt;/a&gt; of a scalable eCommerce website. It supports more than 3 headers, 25+ sections ability, and more than 3 footer patterns.
Lezada is designed with the combination of HTML 5, Redux, react, WC3, and many more frameworks. It offers you to operate your website over multiple web browsers without a lack of performance. This is an excellent template for creating a website for product review and description because of the optimized functions of the temples. Lezada creates smart websites that are SEO optimized for the source code.
With all the features and capabilities Lezada is a feature-full template gallery for the development of eCommerce that can generate a majority of engagement.&lt;/li&gt;
&lt;li&gt;Rick
Rick is a reactJs template for developing eCommerce apps for mobile devices. This has excellent templates for the development of product selling apps for mobiles. You can use this template to create dynamic apps for selling accessories, digital products, and services. Along with this, the components in this template are made for customization. Hence you can modify the basic structure of the template according to your own requirements.
Rick has support for many google fonts and has cross-platform capabilities. You can create remarkable websites that can grow your business significantly. The structure of the template is very organized so you don’t get confused while making the changes. It too has SEO optimization and no cost updates on the templates. You can purchase the license for using the Rick template for just 24 USD.

&lt;ol&gt;
&lt;li&gt;Multikart
Multikar is a popular template for designing an eCommerce app with the help of react. It has renowned for its use of creations of online stores for selling various things. This template has special optimization for using the eCommerce app in mobile devices. Also, this template is suggested for new enterprises because the development with their templates is very fast.
The major capability of Multikart is to make payments through Paypal and with other payment methods. It offers an authentication service that protects your website against bots and unauthorized users. If you are developing a large eCommerce app with a number of products this template can be your choice. This has an infinite scroll that can display all your products at once. Multikart supports several currencies.
Final Verdict 
React templates for eCommerce apps make the job of development very straightforward. They provide the functionalities that can take hours for a developer to design. There is a wide range of tempters available for React that can be used for dedicated projects And the creation of noteworthy eCommerce apps. Mobile apps have become an important part of every business. Mobile apps have been affecting business for quite a while and help in expanding scalability. To develop an astonishing looking app with robust security and modern technology is a tough task. For this QuikieApps, the leading mobile app development company -&amp;gt;&lt;a href="https://bit.ly/3dLQQEf"&gt;https://bit.ly/3dLQQEf&lt;/a&gt; in Bangalore has the best expertise in mobile app development. To develop the finest applications with attractive interfaces and smooth operations, you can count on us.
The advancement of technology has positively influenced the growth of businesses all over the planet. With the help of modern technologies like websites and mobile applications, every firm can sell its products or services online without hassle. We, QuikieApps, have acquired recognition and reputation through the reliance of our respected clients as the top Web development company-&amp;gt;&lt;a href="https://bit.ly/3iCNsNm"&gt;https://bit.ly/3iCNsNm&lt;/a&gt; in Bangalore, India, USA, UK, Dubai. Adapting the dynamic technology of the web and mobile applications is the first step to success in this modish and competitive world.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Support for password authentication was removed on August 13, 2021. - Fixed</title>
      <author>Arjun Codes</author>
      <pubDate>Sat, 14 Aug 2021 08:09:11 +0000</pubDate>
      <link>https://dev.to/arjuncodes/support-for-password-authentication-was-removed-on-august-13-2021-fixed-k1e</link>
      <guid>https://dev.to/arjuncodes/support-for-password-authentication-was-removed-on-august-13-2021-fixed-k1e</guid>
      <description>&lt;p&gt;Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you are getting this error go through this video :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ytSoabxSQ6E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>arjuncodes</category>
      <category>passwordauthentication</category>
    </item>
    <item>
      <title>JS Keyboard events</title>
      <author>Nic</author>
      <pubDate>Sat, 14 Aug 2021 08:06:52 +0000</pubDate>
      <link>https://dev.to/nicm42/js-keyboard-events-3ggo</link>
      <guid>https://dev.to/nicm42/js-keyboard-events-3ggo</guid>
      <description>&lt;p&gt;Mouse events are relatively simple: you've either clicked or moused down, moved or upped etc or you haven't. And we know what it is you did it on because that's what the event listener is on.&lt;/p&gt;

&lt;p&gt;Keyboard events are harder.&lt;/p&gt;

&lt;p&gt;Let's say you have a calculator in JavaScript. You've got it all working when you click the buttons, but want it to work when you use the keyboard too.&lt;/p&gt;

&lt;p&gt;First, you don't put a keyboard event listener on a button, you put it on the document. Why? Because the listener needs to listen to what's in focus and when you use the keyboard, generally one of the calculator buttons won't be in focus. Maybe you require users to click on or tab to something on the calculator before they do anything else, in which case you can put your event listener on the calculator. But that would be a very strange design.&lt;/p&gt;

&lt;p&gt;And then you have to work out which button on the keyboard the user pressed. And there are a multitude of ways of doing this. Doing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(event);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will give you a whole load of information.&lt;/p&gt;

&lt;p&gt;If I press "1" I get the following information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;code: "Digit1"&lt;/li&gt;
&lt;li&gt;key: "1"&lt;/li&gt;
&lt;li&gt;keyCode: 49&lt;/li&gt;
&lt;li&gt;which: 49&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a lot of code you might see something like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (event.keyCode === 49) {
  //do something
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's because once upon a time, that was the only information we had. These days, this is much easier to read:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (event.key === '1') {
  //do something
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are other pitfalls. Some keys also do other things: for example the down arrow, page down and space keys will all scroll the page down. And therefore will scroll down as well as also doing whatever you've told them to do. event.preventDefault() is your friend here: but not if there's potential to scroll and your listener is on the document. Your user who wants to scroll with the keyboard will get very frustrated if it doesn't work.&lt;/p&gt;

&lt;p&gt;To check exactly how the keys are named, without having to console log every single one, I recommend &lt;a href="http://keycode.info/"&gt;JavaScript Event KeyCodes&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 8, Summary of the week and nested Modules</title>
      <author>Aatmaj</author>
      <pubDate>Sat, 14 Aug 2021 08:05:49 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-8-summary-of-the-week-and-nested-modules-j3d</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-8-summary-of-the-week-and-nested-modules-j3d</guid>
      <description>&lt;p&gt;Hello friends, today we will summarize the learning of the week.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary-of-the-week"&gt;
  &lt;/a&gt;
  Summary of the week
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-5-exploring-the-math-module-5alo"&gt;Day 5&lt;/a&gt; We learnt that modules are a way of packaging our code which enhances flexibility and code reusability. Modules are basically python files which contain various functions. One example of which is the built in module math. The math module in Python is a very useful module. We can perform various mathematical functions using the module.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-6-math-exercises-12ge"&gt;Day 6&lt;/a&gt; In this part we solved many questions related to the math module for example Armstrong numbers, use of recursion in solving power operations, etc.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-7-making-python-modules-kmf"&gt;Day 7&lt;/a&gt; We saw how to make our own Python modules and how to use them in our code. We can make Python module by saving a Python file (with the &lt;code&gt;.py&lt;/code&gt; extension in the Lib folder of Python source. Then we can use the modules by using the import statement. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#using-modules-in-modules"&gt;
  &lt;/a&gt;
  Using modules in modules
&lt;/h3&gt;

&lt;p&gt;We can use a module in another module.&lt;br&gt;
 Here is a sample question-&lt;/p&gt;

&lt;p&gt;Create a module named ModuleC to calcuate the combination of two numbers. This module must import ModuleB which contains the factorial function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ModuleB
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;ModuleC
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ModuleB&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;comb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ModuleB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModuleB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ModuleB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;main
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ModuleC&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModuleC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;10.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;What will happen if we try to call the function factorial from he main? We cannot do so as the main does not directly import ModuleB. Hence, we cannot use the factorial defined in B as ModuleC.factorial() or ModuleB.factorial()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ModuleC&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModuleC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModuleC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;10.0
Traceback (most recent call last):
  File "main.py", line 3, in &amp;lt;module&amp;gt;
    print(ModuleC.factorial(4))
AttributeError: 'module' object has no attribute 'factorial'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ModuleC&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModuleC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;moduleB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;10.0
Traceback (most recent call last):
  File "main.py", line 4, in &amp;lt;module&amp;gt;
    print(moduleB.factorial(4))
NameError: name 'moduleB' is not defined

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the above code to run, we need to import the module B.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ModuleC&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ModuleB&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModuleC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModuleB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;10.0
24
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;ul&gt;
&lt;li&gt;We all know that neither me nor you have ever seen each other. Learning in remote environment is a difficult, and teaching is perhaps even more difficult. Teaching is never a one-way process.
I request everyone to participate actively in this course, either through comments below or forking on Github &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning-Python repo&lt;/a&gt;
😃 😃 😃&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;For those who have not yet made account in Dev.to, you can have a free easy sign-up using your mail or GitHub accounts. I would suggest the budding developers to create your GitHub free account right away. You would require to register sooner or later anyways&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥&lt;br&gt;
Next day will begin from Tuesday📅&lt;/p&gt;

</description>
      <category>python</category>
      <category>learningpython</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Support for password authentication was removed </title>
      <author>Arjun Gautam</author>
      <pubDate>Sat, 14 Aug 2021 08:03:45 +0000</pubDate>
      <link>https://dev.to/arjungautam/support-for-password-authentication-was-removed-518o</link>
      <guid>https://dev.to/arjungautam/support-for-password-authentication-was-removed-518o</guid>
      <description>&lt;p&gt;Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.&lt;br&gt;
&lt;strong&gt;If you are getting this error go through this :&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ytSoabxSQ6E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>arjuncodes</category>
      <category>passwordauthentication</category>
    </item>
  </channel>
</rss>
