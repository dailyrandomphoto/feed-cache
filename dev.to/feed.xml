<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Leading developer relations at a Silicon Valley Startup</title>
      <author>Hassan El Mghari</author>
      <pubDate>Mon, 17 Jan 2022 01:19:51 +0000</pubDate>
      <link>https://dev.to/nutlope/leading-developer-relations-at-a-silicon-valley-startup-kbd</link>
      <guid>https://dev.to/nutlope/leading-developer-relations-at-a-silicon-valley-startup-kbd</guid>
      <description>&lt;p&gt;Moving to San Fransisco and working for a startup in Silicon Valley has been a dream of mine for a while. After all, it is the startup tech hub of the world. As a fresh college graduate last year, I got a chance to make it a reality.&lt;/p&gt;

&lt;p&gt;I want to tell the story of leading growth and developer relations at an early stage devtool startup called &lt;a href="https://fig.io/"&gt;Fig&lt;/a&gt;. It all started with a &lt;a href="https://drive.google.com/file/d/1omm8WyOaTWf3vFMIEGd0eJQGO1hSq1bN/view?usp=sharing"&gt;Twitter DM&lt;/a&gt;, that lead to an interview, that a few weeks later, led to me moving across the country to San Fransisco.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-work"&gt;
  &lt;/a&gt;
  The work
&lt;/h2&gt;

&lt;p&gt;To set the scene, we were a small and scrappy team of 6 having recently raised a seed round of a few million dollars. And we just needed to execute.&lt;/p&gt;

&lt;p&gt;The fast pace was no joke. In the first week, we spent about 12h a day at the office for onboarding, that then decreased to ~10.5h a day. The founders spent even more time working. We prioritized tasks on a week to week basis which led to me being able to work on a wide variety of things. In terms of the &lt;a href="https://twitter.com/Nutlope/status/1459765327047315460"&gt;3 pillars of developer advocacy&lt;/a&gt;, I was lucky to do work in every pillar.&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#what-i-did"&gt;
  &lt;/a&gt;
  What I did
&lt;/h1&gt;

&lt;p&gt;What I did while I was at Fig can be broken down into five primary areas:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-discord-community"&gt;
  &lt;/a&gt;
  1. Discord Community
&lt;/h2&gt;

&lt;p&gt;I helped grow the Fig Discord community by DMing new users and answering people's questions. At one point, I sent a personalized DM to every single user that joined until it become unscalable.&lt;/p&gt;

&lt;p&gt;I also livestreamed myself contributing to Fig's open source repo weekly on the Discord to encourage our users to contribute and did a livestream with &lt;a href="https://www.youtube.com/watch?v=Avsjqc2uWQc&amp;amp;t=1108s&amp;amp;ab_channel=NaderDabit"&gt;Nader + Fig's CEO&lt;/a&gt;. I ended up helping them scale their Discord community from 1k members to over 2k over the two months I was there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-twitter-account"&gt;
  &lt;/a&gt;
  2. Twitter Account
&lt;/h2&gt;

&lt;p&gt;I came up with our &lt;a href="https://elmghari.com/twitter-strategy"&gt;Twitter strategy&lt;/a&gt; and executed, posting a variety of tweets over an average of 5 times a week. Fig was a very visual product so I also recorded a lot of short videos and GIFs to show it off.&lt;/p&gt;

&lt;p&gt;We also ran promotions and giveaways on Twitter. Fig was invite-only at the time so we partnered with popular developer influencers to give away hundreds of Fig invites and increase our userbase. I ended up growing their Twitter from 2k to over 4.5k followers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-open-source-contributions"&gt;
  &lt;/a&gt;
  3. Open Source Contributions
&lt;/h2&gt;

&lt;p&gt;Another thing I did was manage our &lt;a href="https://github.com/withfig/autocomplete"&gt;open source repo&lt;/a&gt;. Along with a part-time team member, I reviewed dozens of PRs with some back and forth with our contributors to make sure we were pushing quality code and following best practices.&lt;/p&gt;

&lt;p&gt;I also submitted several PRs myself – a total of &lt;a href="https://github.com/withfig/autocomplete/graphs/contributors"&gt;63 commits and 19k lines of code&lt;/a&gt;. Some of this code was generated using CLI parsers and scripts that I wrote. You can look through my commits &lt;a href="https://github.com/withfig/autocomplete/commits?author=Nutlope"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-writing-code"&gt;
  &lt;/a&gt;
  4. Writing code
&lt;/h2&gt;

&lt;p&gt;Yet another thing I helped with was the frontend for our Fig settings app. I redesigned and reimplemented it, fixed some bugs, and added features to make it easier for users to customize their settings.&lt;/p&gt;

&lt;p&gt;I also helped with creating parsers for popular CLI tools like curl and GCC. I did this to programatically grab all the different options and arguments of a CLI tool and generate a completion spec so Fig could &lt;a href="https://twitter.com/fig/status/1424856260780847113"&gt;autocomplete&lt;/a&gt; for them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-developer-experience"&gt;
  &lt;/a&gt;
  5. Developer Experience
&lt;/h2&gt;

&lt;p&gt;The final thing I did was help improve the overall developer experience of the product. I collected feedback from users each week through Discord chats, Twitter DMs, zoom calls, and my livestreams and relayed it over to our engineering team.&lt;/p&gt;

&lt;p&gt;I also revamped our entire documentation to improve the UI, base it on the &lt;a href="https://documentation.divio.com/"&gt;Divio system&lt;/a&gt; and write a few extra guides. Naturally, our docs used Next.js and were hosted on Vercel :)&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons Learned
&lt;/h1&gt;

&lt;p&gt;Overall, my work contributed to us getting thousands of more members in our Discord and Twitter, which lead to more OSS contributors, more Github stars, and significantly more users. I'm proud of what I did at Fig.&lt;/p&gt;

&lt;p&gt;It was a hectic and rewarding couple months and even though it didn't work out in the end, I'm extremely thankful to Fig to giving me my start in the world of SF startups and for everything I learned.&lt;/p&gt;

&lt;p&gt;They taught me how to ruthlessly prioritize and focus on the biggest pain points first. They taught me that a plan means nothing without solid execution. And they taught me that unexpected events occur and you need to be ready to deal with them.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>javascript</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Rare &amp; useful Git commands summarized + solution to difficult scenarios while using Git</title>
      <author>Pranav</author>
      <pubDate>Mon, 17 Jan 2022 00:44:53 +0000</pubDate>
      <link>https://dev.to/pranav016/rare-useful-git-commands-summarized-solution-to-difficult-scenarios-while-using-git-3m4i</link>
      <guid>https://dev.to/pranav016/rare-useful-git-commands-summarized-solution-to-difficult-scenarios-while-using-git-3m4i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#git-commands"&gt;
  &lt;/a&gt;
  Git commands
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git restore .&lt;/code&gt; - restores the files to the previous commit/ undos all the local changes that haven't been commited.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git restore index.html&lt;/code&gt; - restores only that particular file to the recent commit/ undos all the local/uncommited changes for that file.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git reset --hard &amp;lt;hash code of the commit&amp;gt;&lt;/code&gt; - removes commits and goes back to the commit for that hash code&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git reset --source &amp;lt;hash code&amp;gt; index.html&amp;gt;&lt;/code&gt;- removes commits and goes back to the commit for that hash code only for that particular file.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git commit --amend -m 'Your message'&lt;/code&gt;- helps re-write messages&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git revert &amp;lt;hash code&amp;gt;&lt;/code&gt;- helps to roll back to a previous commit by creating a new commit for it. Doesn't removes those commits from the &lt;code&gt;log&lt;/code&gt; like &lt;code&gt;git reset&lt;/code&gt; does.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git reflog&lt;/code&gt;- this can be useful to bring back deleted commits/files/changes. Use &lt;code&gt;git reset &amp;lt;hash code of lost commit from reflog&amp;gt;&lt;/code&gt; to bring back rolled changes.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git reset HEAD~2&lt;/code&gt;- Helps roll back by 2 commits and unstage all the changes in those 2 removed commits.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git reset HEAD~2 --hard&lt;/code&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git rebase&lt;/code&gt; (most useful command)- Reapply commits on top of another base tip. ex. &lt;code&gt;git rebase master&lt;/code&gt; sets the branch at the tip of master branch&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#moving-commited-changes-to-a-new-branch-scenario-you-accidently-worked-on-master"&gt;
  &lt;/a&gt;
  Moving commited changes to a new branch: (scenario: you accidently worked on master)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  -   Use &lt;code&gt;git checkout -b new-feature&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  -   Then roll back commits on master using &lt;code&gt;git reset HEAD~1 --hard&lt;/code&gt;: (this command will roll back 1 commit)

&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#stashing"&gt;
  &lt;/a&gt;
  Stashing-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Use &lt;code&gt;git stash&lt;/code&gt; when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the HEAD commit.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The modifications stashed away by this command can be listed with &lt;code&gt;git stash list&lt;/code&gt;, inspected with &lt;code&gt;git stash show&lt;/code&gt;, and restored (potentially on top of a different commit) with &lt;code&gt;git stash apply&lt;/code&gt;. Calling &lt;code&gt;git stash&lt;/code&gt; without any arguments is equivalent to &lt;code&gt;git stash push&lt;/code&gt;.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git stash&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  stashes/ saves the changes in the back of the project/ another directory of the project and the control moves back to the last working copy of the last commit.&lt;/li&gt;
&lt;li&gt;  saves the changes as a draft and moves back to code of the last commit

&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git stash push -m "Message"&lt;/code&gt;- Adds a message for the stash to the stash list&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git stash list&lt;/code&gt; - lists all the draft changes in the back of the project&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Tip-&lt;/strong&gt; The stash list stores all the stashes and each stashed feature/code has a unique index number to it. The last added stash always appears at the top with index 0.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git stash apply&lt;/code&gt; - applies the last stashed draft to our current working directory&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git stash apply &amp;lt;index number&amp;gt;&lt;/code&gt; - applies the particular indexed stash to our current working directory&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git stash drop &amp;lt;index number&amp;gt;&lt;/code&gt; - drops the stash out of the stash list with the particular index&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git stash pop&lt;/code&gt;- pops the last draft changes back into the working directory/ on the working branch and that draft is then removed from the stash list&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git stash pop &amp;lt;index number&amp;gt;&lt;/code&gt;- pops the draft change with the particular index back into the working directory/ on the working branch and that draft is then removed from the stash list&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git stash clear&lt;/code&gt;- clears/ deletes all the draft changes stored&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#moving-commited-changes-to-an-already-existing-branch-using-cherrypick"&gt;
  &lt;/a&gt;
  Moving commited changes to an already existing branch using cherry-pick:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  -   &lt;code&gt;git checkout feature-branch&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  -   &lt;code&gt;git cherry-pick &amp;lt;hash code of that commit on master&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  -   &lt;code&gt;git checkout master&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  -   &lt;code&gt;git reset HEAD~1 --hard&lt;/code&gt; (rolls back 1 commit)

&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#squashing-commits"&gt;
  &lt;/a&gt;
  Squashing commits-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;git rebase -i &amp;lt;hash code of the commit above which all the commits need to be squashed&amp;gt;&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;  i stands for interactive squash&lt;/li&gt;
&lt;li&gt;  opens up squashing in vim editor where you can pick or squash and update commit messages&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>github</category>
      <category>devops</category>
      <category>git</category>
      <category>opensource</category>
    </item>
    <item>
      <title>I erroneously deletedy root partition.  Now what?</title>
      <author>Calin Baenen</author>
      <pubDate>Sun, 16 Jan 2022 23:25:09 +0000</pubDate>
      <link>https://dev.to/baenencalin/i-erroneously-deletedy-root-partition-now-what-2oi3</link>
      <guid>https://dev.to/baenencalin/i-erroneously-deletedy-root-partition-now-what-2oi3</guid>
      <description>&lt;p&gt;Posted on Reddit's &lt;code&gt;r/archlinux&lt;/code&gt; and &lt;code&gt;r/techsupport&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Is there a way I can reinstall Arch from the bootstick I still have?  &lt;/p&gt;

&lt;p&gt;I've been following &lt;a href="https://www.diskpart.com/articles/grub-rescue-unknown-file-system-0825.html#toc.0.40649366859536595"&gt;this&lt;/a&gt; tutorial, and how my system and it differs is that all of my partitions have "unknown filesystems".&lt;/p&gt;

&lt;p&gt;Here's a backlog:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    error: disk `lvmid/MMwt86-jYqe-hUn1 ... zo7KQw' not found.
    Entering rescue mode...
    grub rescue&amp;gt; ls
    (hd0) (hd1) (hd1,gpt2) (hd1,gpt1)
    grub rescue&amp;gt; ls (hd0)
    (hd0): File-system is unknown.
    grub rescue&amp;gt; set
    cmdpath=(hd1,gpt1)/EFI/grub_uefi
    prefix=(lvmid/MMwt86-jYqe ... zo7KQw)/boot/grub
    root=lvmid/MMwt86-jYqe-hUn1-x1eI-sqCk-RoXD-NihFx4/49zeY2-wEvE-jsN6-2EqG-5TW4-CeLE-zo7KQe
    grub rescue&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the same error I get for &lt;code&gt;(hd0)&lt;/code&gt; applies to the other three (&lt;code&gt;(hd1)&lt;/code&gt;, &lt;code&gt;(hd1,gpt2)&lt;/code&gt;, and &lt;code&gt;(hd1,gpt1)&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;IMPORTANT NOTE:&lt;br&gt;
&lt;code&gt;(hd1,)&lt;/code&gt; is my bootstick. Removing it beforehand results in &lt;code&gt;(hd0) (hd0,gpt2) (hd0,gpt1)&lt;/code&gt;.&lt;/p&gt;

</description>
      <category>archlinux</category>
      <category>linux</category>
      <category>grub</category>
      <category>help</category>
    </item>
    <item>
      <title>Firing on all cylinders(Part 1): Understanding object value lookup in JavaScript interpreters and the rise of hidden classes</title>
      <author>Austin Burger</author>
      <pubDate>Sun, 16 Jan 2022 23:23:07 +0000</pubDate>
      <link>https://dev.to/about14sheep/firing-on-all-cylinderspart-1-understanding-object-value-lookup-in-dynamic-languages-and-the-rise-of-hidden-classes-in-v8-5h62</link>
      <guid>https://dev.to/about14sheep/firing-on-all-cylinderspart-1-understanding-object-value-lookup-in-dynamic-languages-and-the-rise-of-hidden-classes-in-v8-5h62</guid>
      <description>&lt;p&gt;There is a lot of information around writing performant JavaScript and optimizing your code for the v8 engine. When you are reading through this information you will see a lot of phrases like &lt;em&gt;inline caching&lt;/em&gt;, &lt;em&gt;hidden classes&lt;/em&gt;, and &lt;em&gt;memory offset&lt;/em&gt;; but what does it all mean? You'll come across quick one-liners about "always instantiating your object properties in the same order" or, better yet, "assign all of the objects properties in the constructor". You try to dive into the documentation only to see branching charts with a million tiny words in it that look more like Harry Potter's family tree. At the end of all this, you end up just trying to commit those one liners to memory without fully understanding &lt;em&gt;why&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this series, I am going to attempt to explain these concepts in a way where we don't need pages of flow charts, and with approachable examples (not just look at this code).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-expect"&gt;
  &lt;/a&gt;
  What to expect
&lt;/h2&gt;

&lt;p&gt;We will start by going over the difference between dynamic and non-dynamic languages (mostly pertaining to how they store objects in memory). Then, in part 2, we will dive into the v8 engine and the methods it uses to efficiently handle the concepts we discuss in part 1. Also, in part 2, I will describe the common pitfalls and ways you can increase the performance of your code. However, you can't make the code better without first understanding the &lt;em&gt;why&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we begin
&lt;/h2&gt;

&lt;p&gt;Although I am going to try and explain these concepts in an approachable way, these are not easy concepts to grasp. Most developers can go their entire career without digging into the minute details of how a particular JavaScript engine accesses objects in memory. &lt;/p&gt;

&lt;p&gt;Modern JavaScript Interpreters, like v8, are amazing tech and mostly handle all of this for you. Furthermore, with TypeScript, you have a compiler that can help keep you from making a lot of the common mistakes that can lead to a decrease in performance. However, taking the time to try and understand what is happening under the hood can go a long way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-dynamic-language"&gt;
  &lt;/a&gt;
  The dynamic language
&lt;/h2&gt;

&lt;p&gt;JavaScript is a &lt;em&gt;dynamic&lt;/em&gt; programming language. This means that you can add, remove, and change (the type) property values of objects &lt;em&gt;after&lt;/em&gt; they are initialized. Let's look at the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Define a simple constructor function for an employee&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;salary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Instantiate a new employee&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newHire&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sales&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Dynamically add the employee's desired pay day&lt;/span&gt;
&lt;span class="nx"&gt;newHire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Saturday&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the employee object is created, their preferred &lt;code&gt;payDay&lt;/code&gt; is added &lt;em&gt;dynamically&lt;/em&gt;. This is all perfectly valid JavaScript. It will run just fine and the newly hired employee will get paid every Saturday.&lt;/p&gt;

&lt;p&gt;The difference between a non-dynamic programming language (meaning all of an objects properties are fixed before compilation) is that new properties &lt;strong&gt;cannot&lt;/strong&gt; be added or removed at runtime. The benefit to a language being non-dynamic is that the values of these properties (or pointers) can be stored in memory with a fixed offset (an integer indicating the displacement between the beginning of an object in memory and any given property). This offset can be easily determined based on the properties type.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Skrrtttt... offset?!?! &lt;strong&gt;displacement&lt;/strong&gt;?!?! You said this would be easy to follow and approachable!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You're right, this is why I decided to do this blog in two parts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#memory-storage-displacement-offset"&gt;
  &lt;/a&gt;
  Memory storage displacement (offset)
&lt;/h2&gt;

&lt;p&gt;The easiest way to explain this is with a simple data structure like an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We know we can access a value in that array using its index:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// this will get us the item at index 2 ('value3')&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the first value (&lt;code&gt;'value1'&lt;/code&gt;) is at memory position 0, moving two places to the right will give you (&lt;code&gt;'value3'&lt;/code&gt;). So &lt;code&gt;'value3'&lt;/code&gt; has an offset of 2 from the &lt;em&gt;start&lt;/em&gt; of where the array is stored in memory.&lt;/p&gt;

&lt;p&gt;This is simple enough for an array, however not all objects are stored in memory sequentially like an array is. With more complex objects, like the employee function above, you can't be sure where the object, and its properties, will be stored. Thus making it harder to determine the offset between the objects 'shell' (to keep it simple) and its properties. You could have the 'shell' of the object (&lt;code&gt;function employee() {}&lt;/code&gt;) at position 0, then its property &lt;code&gt;this.salary&lt;/code&gt; at position 6 with other objects in between.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#back-to-dynamic-vs-nondynamic"&gt;
  &lt;/a&gt;
  Back to dynamic vs. non-dynamic
&lt;/h2&gt;

&lt;p&gt;In order to keep up with these offset values, non-dynamic languages (i'll use Java in this case) create a fixed object layout. This layout (or mapping) cannot be changed (as in changing the type), added too, or removed from at runtime. The offset is written in stone, making it easy (usually one instruction) to grab any property value of a given object.&lt;/p&gt;

&lt;p&gt;Since you can add, remove, and even change a properties type in JavaScript at runtime, the interpreter has to allocate a new space in memory and then add a new mapping (offset value) back to the object for every change. It will then have to go back through and clean up the memory by a process called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management#garbage_collection"&gt;garbage collection&lt;/a&gt;. In order to keep up with these changes, JavaScript interpreters needed a data structure that can change at runtime. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hash-tables"&gt;
  &lt;/a&gt;
  Hash Tables
&lt;/h2&gt;

&lt;p&gt;Instead of using a fixed object layout, like in the non-dynamic Java, most JavaScript interpreters use a dictionary like structure (based on a hash function) to store the objects property values in memory. This is often referred to as a &lt;em&gt;hash table&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;A hash table, simply put, is a collection of key/value pairs. A over-simplified version of what the &lt;code&gt;employee&lt;/code&gt; object might look like in a hash table would be keys mapped to the values of where the &lt;code&gt;employee&lt;/code&gt; object starts in memory, along with the offset value of each of it properties. We can attempt to replicate this using a &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics"&gt;Plain Old JavaScript Object&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hashTable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;employeeInstance1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;memoryStart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;salary_offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;position_offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;employeeInstance2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;memoryStart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;salary_offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;position_offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you wanted to add a property to the table (after the value is added in memory), you can simply update that objects 'bucket' in the table.&lt;/p&gt;

&lt;p&gt;Adding &lt;code&gt;payDay&lt;/code&gt; to employee 1 would change the table to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hashTable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;employeeInstance1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;memoryStart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;payDay_offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// added property and offset&lt;/span&gt;
          &lt;span class="na"&gt;salary_offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;position_offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;employeeInstance2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;memoryStart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;salary_offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;position_offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By doing this, the interpreter is able to add properties to the object anywhere in memory, because it has a dictionary (the hash table) keeping track of where the properties are located and what object they belong too.&lt;/p&gt;

&lt;p&gt;The downside of this is that grabbing the properties value from a hash table is more computationally expensive (more instructions) than the fixed object layout of a non-dynamic language. Instead of having a direct one-to-one mapping of object/property to the offset of where the value is located, the interpreter must search through the hash table for the employee instance, grab the correct property, then use the offset value to &lt;em&gt;finally&lt;/em&gt; get the property's value from memory!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is an extremely over-simplified explanation of how object memory storage hash tables work, but I think it helps in understanding at a very low level (and we are trying to keep this approachable). If you wanted to learn more you can start &lt;a href="https://en.wikipedia.org/wiki/Hash_function"&gt;here&lt;/a&gt; and I have added a very nice blog at the bottom of this post. Just know it is extremely inefficient compared to what is coming next.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#firing-on-all-cylinders"&gt;
  &lt;/a&gt;
  Firing on all cylinders
&lt;/h2&gt;

&lt;p&gt;Since using hash tables to get property values is so inefficient, the JavaScript engine NodeJS uses, 'v8', takes a different approach. This approach is built around using Hidden Classes and made faster by Inline Caching.&lt;/p&gt;

&lt;p&gt;In part 2 of this series we will dive into hidden classes and inline caching. Once you better understand the concepts, we can get into techniques you can use to make sure your JavaScript as performant as it can be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://craftinginterpreters.com/hash-tables.html"&gt;Blog: Hash tables&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.programcreek.com/2011/11/what-do-java-objects-look-like-in-memory/"&gt;Blog: How Java stores objects in memory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://v8.dev/blog"&gt;The official v8 engine blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures"&gt;MDN JavaScript types and data structures&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Offset_%28computer_science%29"&gt;Wikipedia article on Offset&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>performance</category>
      <category>programming</category>
    </item>
    <item>
      <title>A Guide to writing to better comments</title>
      <author>Timilehin Bakare</author>
      <pubDate>Sun, 16 Jan 2022 23:22:24 +0000</pubDate>
      <link>https://dev.to/plainsight16/a-guide-to-writing-to-better-comments-3pol</link>
      <guid>https://dev.to/plainsight16/a-guide-to-writing-to-better-comments-3pol</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;You're probably thinking," &lt;em&gt;what's new with comments?&lt;/em&gt;" and you'll be right to think that.&lt;br&gt;
Often times, not much thought is put into writing a comment. They are mostly ignored and considered secondary(albeit as they should be) but this negligence has led many programmers into writing very awful comments.&lt;br&gt;
for example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--abUjYqfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u57obznnve450cconcvv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--abUjYqfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u57obznnve450cconcvv.png" alt="bad comment code snippet" width="880" height="230"&gt;&lt;/a&gt;&lt;br&gt;
In order to avoid writing comments like this, I have written this article to serve as a guide to writing better comments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-are-some-guides-to-writing-better-comments"&gt;
  &lt;/a&gt;
  Here are some guides to writing better comments
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Avoid writing redundant comments&lt;/li&gt;
&lt;li&gt;Comments should be updated&lt;/li&gt;
&lt;li&gt;Do not excuse bad code with commenting&lt;/li&gt;
&lt;li&gt;Comments should not reference other codes&lt;/li&gt;
&lt;li&gt;Comments should be informative&lt;/li&gt;
&lt;li&gt;Comments could be used to provide links to original source code&lt;/li&gt;
&lt;li&gt;Comments should not be used for attribution&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The rest of this article explains these guides and provides examples to them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-avoid-writing-redundant-comments"&gt;
  &lt;/a&gt;
  1. Avoid writing redundant comments
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_GgoW0X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umtn14gpsu3kd9yeg7ex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_GgoW0X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umtn14gpsu3kd9yeg7ex.png" alt="redundant comments" width="445" height="323"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above is common among early-beginners as they're introduced to code, While this could be very helpful with teaching beginners. Its considered redundant as it adds no information and merely causes visual clutter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-comments-should-be-updated"&gt;
  &lt;/a&gt;
  2. Comments should be updated.
&lt;/h3&gt;

&lt;p&gt;Overtime comments silently degrade. While code is continuously updated, the comments are forgotten. For a code cryptic in nature, readers turn to the comments to provide an explanation, and when that explanation is false it leaves the readers confused or worse mislead.&lt;br&gt;
for example: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w4x4lM_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yjyud10vmvepgnnwrk3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w4x4lM_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yjyud10vmvepgnnwrk3.png" alt="regex-pattern comment" width="666" height="323"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The asterisks in the regex pattern show that  it matches a whole lot more than it was stated by the comments which could be very misleading to the readers who do not bother to check the regex pattern.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-do-not-excuse-bad-code-with-commenting"&gt;
  &lt;/a&gt;
  3. Do not excuse bad code with commenting
&lt;/h3&gt;

&lt;p&gt;Commenting should be used as a last resort. Every comment serves as a failure to express yourself clearly in code. Always try to clean the code to express yourself better before resulting to commenting. &lt;br&gt;
for example the code snippet below could have been cleaned up rather than using a comment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yqIpx8Zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmqsphkf4zxz64lu771k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yqIpx8Zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmqsphkf4zxz64lu771k.png" alt="bad code" width="877" height="350"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After cleaning it up&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DXzCgUfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsz7950s8v6138x87e8k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DXzCgUfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsz7950s8v6138x87e8k.png" alt="good code" width="423" height="323"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-comments-should-not-reference-other-codes"&gt;
  &lt;/a&gt;
  4. Comments should not reference other codes
&lt;/h3&gt;

&lt;p&gt;A comment should not reference a code that is not present or local because the reference code could change but the comment wouldn't&lt;br&gt;
for example&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fs0bXQYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arhaaxo6hj9xwondb10a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fs0bXQYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arhaaxo6hj9xwondb10a.png" alt="poor reference comment" width="880" height="442"&gt;&lt;/a&gt;&lt;br&gt;
The comment above references a "default" that is not present in the code block, this confuses the reader as they don't know what default in the comment means.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-comments-should-be-informative"&gt;
  &lt;/a&gt;
  5. Comments should be informative
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j6sGQJtl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iomphuwjkwz2sf3ycgay.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j6sGQJtl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iomphuwjkwz2sf3ycgay.png" alt="Informative comment" width="788" height="378"&gt;&lt;/a&gt;&lt;br&gt;
The comment above informs the reader that SimpleDateFormat is not thread-safe, if the code is to be modified, the programmer would be well informed of its limitations. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-comments-could-be-used-to-provide-links-to-original-source-code"&gt;
  &lt;/a&gt;
  6. Comments could be used to provide links to original source code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kD8QWW6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amao4tevyuqdqqx96l49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kD8QWW6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amao4tevyuqdqqx96l49.png" alt="linked comment" width="880" height="301"&gt;&lt;/a&gt;&lt;br&gt;
Readers can follow the link provided in the comments to learn more&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-comments-should-not-be-used-for-attribution"&gt;
  &lt;/a&gt;
  7. Comments should not be used for attribution
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_GizK6pD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97u0u0j1wh138nx1wjjm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_GizK6pD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97u0u0j1wh138nx1wjjm.png" alt="Attribution comment" width="412" height="241"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Comments like these are unacceptable especially in production. The source code control systems can always tell who the author was.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this article has been helpful in highlighting the importance of writing  proper comments and the guides provided were well understood.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;References&lt;/em&gt;: Clean code(A handbook of Agile Software Craftsmanship)&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>java</category>
      <category>codequality</category>
    </item>
    <item>
      <title>WTF JavaScript: A Variable with Side Effects</title>
      <author>Lars Grammel</author>
      <pubDate>Sun, 16 Jan 2022 22:38:12 +0000</pubDate>
      <link>https://dev.to/p42/wtf-javascript-a-variable-with-side-effects-5e3h</link>
      <guid>https://dev.to/p42/wtf-javascript-a-variable-with-side-effects-5e3h</guid>
      <description>&lt;p&gt;JavaScript has many quirks and difficult-to-understand behaviors. There are hilarious talks such as &lt;a href="https://www.youtube.com/watch?v=et8xNAc2ic8"&gt;WTFJS&lt;/a&gt; and &lt;a href="https://www.destroyallsoftware.com/talks/wat"&gt;WAT&lt;/a&gt; that make fun of JavaScript for its strangeness.&lt;/p&gt;

&lt;p&gt;Since I work on refactorings, I have to consider many weird and sometimes funny sides of JavaScript. I will share some of the surprising behaviors that I encounter, so if you see them (which you hopefully never will), it might hint at what's going on.&lt;/p&gt;

&lt;p&gt;This blog post explores an innocent-looking statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ... some code&lt;/span&gt;

&lt;span class="nx"&gt;helloWorld&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might intuitively think that nothing should happen here - the statement seems to do nothing because there is no obvious function call here.&lt;/p&gt;

&lt;p&gt;However, it can do anything, for example, print "Hello World!" to the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ... some code&lt;/span&gt;

&lt;span class="nx"&gt;helloWorld&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="c1"&gt;// prints "Hello World!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;How can this even be possible?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It turns out that global variables (in this case, &lt;code&gt;helloWorld&lt;/code&gt;) are properties of the &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Global_object"&gt;global object&lt;/a&gt;. And properties in JavaScript do not have to be simple values. They can be implemented using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get"&gt;getters&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set"&gt;setters&lt;/a&gt;, which can execute code. Since the global object inherits from &lt;code&gt;Object.prototype&lt;/code&gt; in modern JavaScript engines, adding properties to &lt;code&gt;Object.prototype&lt;/code&gt; creates properties on the global object.&lt;/p&gt;

&lt;p&gt;Here, &lt;code&gt;helloWorld&lt;/code&gt; is defined as such a getter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helloWorld&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;helloWorld&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="c1"&gt;// prints "Hello World!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thankfully this can only happen with global variables, and not with parameters or local variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helloWorld&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;helloWorld&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// getter is evaluated, prints "Hello World!"&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                    &lt;span class="c1"&gt;// does nothing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I learned about this strange behavior in a &lt;a href="https://mathiasbynens.be/notes/globalthis"&gt;blog post about the &lt;code&gt;globalThis&lt;/code&gt; polyfill&lt;/a&gt;. In the polyfill, a global property getter is used to access the global &lt;code&gt;this&lt;/code&gt; object in different environments such as browsers, web workers, frames, Node.js, and ES modules. Have a look if you want to know more!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Peregrine Update - The Python-like programming language that's as fast as C++</title>
      <author>Ethan Olchik</author>
      <pubDate>Sun, 16 Jan 2022 22:31:09 +0000</pubDate>
      <link>https://dev.to/ethanolchik/peregrine-update-the-python-like-programming-language-thats-as-fast-as-c-2bf1</link>
      <guid>https://dev.to/ethanolchik/peregrine-update-the-python-like-programming-language-thats-as-fast-as-c-2bf1</guid>
      <description>&lt;p&gt;&lt;em&gt;"Blazing-Fast Language for the Blazing-Fast World" - Peregrine Motto&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hey guys, it's been a long time! If you don't already know me, my name is Ethan and I'm one of a few &lt;a href="https://github.com/Peregrine-lang/Peregrine"&gt;Peregrine Programming Language&lt;/a&gt; developers. Over the past few months, we've managed to surpass the progress in the 1st write (code for the 1st write has been deleted) and add new features. This post will be discussing the progress that has been made.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-peregrine"&gt;
  &lt;/a&gt;
  About Peregrine
&lt;/h2&gt;

&lt;p&gt;If you know Python, you know how easy it is. However, it also comes with a big downgrade. Python is slow, and I'm pretty sure every python developer knows this by now. This is kind of annoying. That's where Peregrine comes in. Me and 11 friends have been working on Peregrine for the past few months. Peregine's syntax is very similar to Python's, and it gets trans-compiled to C++, thus making it as fast as C++. Some of you may know Peregrine as the "Language that's as fast as C", however we've decided to trans-compile it to C++ instead of C.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-language-features"&gt;
  &lt;/a&gt;
  New Language Features
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#class"&gt;
  &lt;/a&gt;
  Class
&lt;/h3&gt;

&lt;p&gt;After a lot of work, &lt;a href="https://github.com/peregrine-lang/Peregrine/commit/d4de6e4ab15e866b044dab77009ce9b4b54fae23"&gt;classes have been added to Peregrine&lt;/a&gt;. They essentially act the same way you'd expect them to act in python. Here's a quick example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"x=%d, y=%d, z=%d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is pretty self-explanatory. If you put this code into python, you'd just have to change &lt;code&gt;printf&lt;/code&gt; to &lt;code&gt;print&lt;/code&gt; and change the string formatting and then it works like a charm.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enum"&gt;
  &lt;/a&gt;
  Enum
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/peregrine-lang/Peregrine/commit/b953ceba25a84c011068567d0befa7eae699eccc"&gt;Enums have also been added to Peregrine&lt;/a&gt;. They work like any other enum in any other language.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;RGB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;RED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;144&lt;/span&gt;
    &lt;span class="n"&gt;GREEN&lt;/span&gt;
    &lt;span class="n"&gt;BLUE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
    &lt;span class="n"&gt;OTHER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GREEN&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;RGB.GREEN&lt;/code&gt; = &lt;code&gt;155&lt;/code&gt;, because the value is defaulted to the previous value + 1. &lt;code&gt;RGB.OTHER&lt;/code&gt; = &lt;code&gt;164&lt;/code&gt;, because 155+9=164.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#union"&gt;
  &lt;/a&gt;
  Union
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/peregrine-lang/Peregrine/commit/599d12db39027a0d22f711a6bba69088cf7d5da3"&gt;Unions&lt;/a&gt;, like in C, C++ etc... are data types that allows the storage of different data types in the same memory location.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;union&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;_x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NOTE: you don't have to create a pointer to a variable of type &lt;code&gt;abc&lt;/code&gt; in order to assign and access it's fields.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-decorators"&gt;
  &lt;/a&gt;
  custom decorators
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/peregrine-lang/Peregrine/commit/52b6129c1d770b90ff6e6b6fb6113e3466b06f9c"&gt;Peregrine supports user-defined decorators&lt;/a&gt;, just like Python. Here's an example that's taken from &lt;a href="https://github.com/peregrine-lang/Peregrine/blob/main/can_comp.pe"&gt;can_comp.pe&lt;/a&gt;, but slightly modified to improve readability (that file is hardcoded):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;
&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Answer is %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dec_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;dec_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see here, you must define a type for the function being decorated and a type for the return type of the decorator (should return a function).&lt;/p&gt;

&lt;p&gt;The program would output &lt;code&gt;Answer is 100&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more"&gt;
  &lt;/a&gt;
  More
&lt;/h2&gt;

&lt;p&gt;You can find some more code examples in &lt;a href="https://github.com/peregrine-lang/Peregrine/blob/main/can_comp.pe"&gt;can_comp.pe&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#planned-features"&gt;
  &lt;/a&gt;
  Planned features
&lt;/h2&gt;

&lt;p&gt;Here are some features that are planned to be implemented into peregrine before the first release:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Structs&lt;/li&gt;
&lt;li&gt;Python ecosystem in Peregrine

&lt;ul&gt;
&lt;li&gt;You will be able to use any python module in Peregrine&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Imports&lt;/li&gt;
&lt;li&gt;Standard Library&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Peregrine is planned to release version 0.0.1 sometime between March and April, so make sure to show some support by starring the &lt;a href="https://github.com/peregrine-lang/peregrine"&gt;repo&lt;/a&gt; and make sure to press on the "Watch" button so you don't miss any updates.&lt;/p&gt;

&lt;p&gt;We would greatly appreciate any contributions, so if you find something that you can improve, open a pull-request! You can also check out our &lt;a href="https://github.com/peregrine-lang/peregrine/issues/"&gt;open issues&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks so much for reading!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>cpp</category>
      <category>python</category>
      <category>showdev</category>
    </item>
    <item>
      <title>New frameworks, old traditions</title>
      <author>Bruno Noriller</author>
      <pubDate>Sun, 16 Jan 2022 22:09:31 +0000</pubDate>
      <link>https://dev.to/noriller/new-frameworks-old-traditions-11nn</link>
      <guid>https://dev.to/noriller/new-frameworks-old-traditions-11nn</guid>
      <description>&lt;p&gt;Do you know of the &lt;a href="https://en.wikipedia.org/wiki/Frequency_illusion"&gt;red car syndrome&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;When we learn and start using a new language, or especially a framework, we tend to see how some people do something.&lt;/p&gt;

&lt;p&gt;But my point is not that after start learning something you start seeing everywhere and all the people using it... but that people will follow “tradition” blindly. In Python, the community has the saying of something being the “pythonic way”.&lt;/p&gt;

&lt;p&gt;Yes, you should embrace “tradition” and make things simpler for everyone... except when you don’t.&lt;/p&gt;

&lt;p&gt;Many React developers out there will start a project and add Redux (or MobX, or Recoil... ) without even thinking if the project will even need it.&lt;/p&gt;

&lt;p&gt;And after they do that, since it’s already there it’s easy to just “go with the motion” and just make things in a way to use Redux.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;There’s this story that you might have heard, it’s about someone trying to learn the family recipe of baking fish and that “you have to cut the tail to make it good” and then they would go from parent to grandparent to ask why you have to make the cut only to be told that it’s “how it’s always been done to make it good”, and finally the great grandparent will say that the oven was too small back in the day and they had to cut it to fit...&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;And as history repeats itself, if you found anything I’m saying eerie familiar, then yes, more than 10 years ago Uncle Bob wrote that developers would start a project with a database because “you always needed a database right?”.&lt;/p&gt;

&lt;p&gt;Redux is just one of the latest... moment.js, Lodash, jQuery... remember then?&lt;/p&gt;

&lt;p&gt;Remember that the problem is not if you are or not using then, but WHY are you using it.&lt;br&gt;
Just because? Or it’s the best tool for the job?&lt;/p&gt;




&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@mohittzomar?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Mohit Tomar&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/tradition?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Phoenix LiveView, but event-sourced</title>
      <author>Rosa Richter</author>
      <pubDate>Sun, 16 Jan 2022 21:15:05 +0000</pubDate>
      <link>https://dev.to/cantido/phoenix-liveview-but-event-sourced-7pe</link>
      <guid>https://dev.to/cantido/phoenix-liveview-but-event-sourced-7pe</guid>
      <description>&lt;p&gt;Event sourcing is a powerful way to structure an application, and I've discovered that it pairs beautifully with Phoenix LiveView.&lt;/p&gt;

&lt;p&gt;The context: I'm building a cryptocurrency exchange application. I don't have the business chops to run an actual exchange, so this is just for fun. The application is built in &lt;a href="https://elixir-lang.org/"&gt;Elixir&lt;/a&gt;, using the &lt;a href="https://github.com/commanded/commanded"&gt;Commanded&lt;/a&gt; framework for CQRS/ES goodness, and &lt;a href="https://github.com/phoenixframework/phoenix_live_view"&gt;Phoenix LiveView&lt;/a&gt; because it's the hot new thing that I wanted to learn.&lt;/p&gt;

&lt;p&gt;My goal is to use LiveView to update a price chart as trades are executed by the system. A LiveView process is a lot like a GenServer, with a bespoke process for each client, executing &lt;code&gt;handle_*&lt;/code&gt; functions as the client does things. The first step to real-time chart updates is to trigger one of these handler functions in my LiveView controller when a trade is executed. I'm using Commanded's own &lt;a href="https://github.com/commanded/eventstore"&gt;EventStore&lt;/a&gt; library to dispatch and store my events, so their documentation is the place to start.&lt;/p&gt;

&lt;p&gt;In the EventStore documentation, I found that subscribing to the event stream is really simple: it's a single function call. Here's the example from &lt;a href="https://github.com/commanded/eventstore/blob/master/guides/Subscriptions.md#transient-subscriptions"&gt;EventStore's documentation on transient subscriptions&lt;/a&gt; that we care about:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="no"&gt;EventStore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;RecordedEvent&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="no"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;EventStore&lt;/span&gt;

&lt;span class="no"&gt;EventStore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream_uuid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;selector:&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt;
  &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;RecordedEvent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;data:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# receive first batch of mapped event data&lt;/span&gt;
&lt;span class="k"&gt;receive&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:events&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;RecordedEvent&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event_data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Received non nil event data: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;All we need to do is call &lt;a href="https://hexdocs.pm/eventstore/EventStore.html#c:subscribe/2"&gt;&lt;code&gt;EventStore.subscribe/2&lt;/code&gt;&lt;/a&gt;, optionally with a selector function, and then the current process will start receiving events. We're going to call this in our LiveView's &lt;a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#c:mount/3"&gt;&lt;code&gt;mount/3&lt;/code&gt;&lt;/a&gt; callback. I'm also going to load the initial set of data here.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;ExchangeWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;DashboardLive&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;ExchangeWeb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:live_view&lt;/span&gt;
  &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="no"&gt;EventStore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;RecordedEvent&lt;/span&gt;
  &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="no"&gt;Exchange&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;EventStore&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="ss"&gt;:ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;EventStore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"$all"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;selector:&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;RecordedEvent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;event_type:&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;data:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Elixir.Exchange.Orderbook.TradeExecuted"&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
          &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"BTCUSDT"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;mapper:&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;RecordedEvent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;data:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;trades&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Exchange&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Orderbooks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trades&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;trades:&lt;/span&gt; &lt;span class="n"&gt;trades&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;


  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_info&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:events&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;trades&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="no"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;&amp;amp;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:price&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:noreply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;push_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"trades"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;trades:&lt;/span&gt; &lt;span class="n"&gt;trades&lt;/span&gt;&lt;span class="p"&gt;})}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, if you were using a server-side charting library like &lt;a href="https://contex-charts.org/"&gt;ContEx&lt;/a&gt;, then you would just append the new events to what you've already got assigned to the socket, and your normal rendering function would rebuild the chart. You're done! But I wanted to make it more complicated.&lt;/p&gt;

&lt;p&gt;I'm using &lt;a href="https://www.chartjs.org/"&gt;Chart.js&lt;/a&gt;, which is a popular graphing JavaScript library. It lives entirely on the client-side, which isn't very agreeable with Phoenix LiveView's server-side focus. Fortunately, LiveView allows you to set up JavaScript hooks, and then push events to them. We can make the client event-sourced, too! That's why I'm using &lt;a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#push_event/3"&gt;&lt;code&gt;push_event/3&lt;/code&gt;&lt;/a&gt; instead of &lt;a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#assign/3"&gt;&lt;code&gt;assign/3&lt;/code&gt;&lt;/a&gt; in the example above. I'm using LiveView's JavaScript hooks to respond to events that I push from the LiveView process. Read more about &lt;a href="https://hexdocs.pm/phoenix_live_view/js-interop.html"&gt;LiveView JavaScript interoperability&lt;/a&gt;, it's really interesting.&lt;/p&gt;

&lt;p&gt;A LiveView client hook is an object containing a couple of functions.&lt;br&gt;
We're going to create a &lt;code&gt;mounted()&lt;/code&gt; function to initialize the chart with the data we already have. After that, we're going to set up an event handler. The &lt;code&gt;mounted()&lt;/code&gt; function receives a &lt;code&gt;this&lt;/code&gt; object with a few utilities, with the &lt;code&gt;handleEvent&lt;/code&gt; function being the most important to us. We call &lt;code&gt;this.handleEvent&lt;/code&gt; to set up the function that will handle the event that we pushed in our LiveView module's &lt;code&gt;handle_info&lt;/code&gt; callback.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Chart&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chart.js/auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;Hooks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="nx"&gt;Hooks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TradesChart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;Configuration&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nothing&lt;/span&gt; &lt;span class="nx"&gt;interesting&lt;/span&gt; &lt;span class="nx"&gt;here&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trades&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trades&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;trade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;datasets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;trade&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;executed_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trade&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;executed_at&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;liveSocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;LiveSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/live&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Hooks&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will push new data into the chart without asking it to completely re-render.&lt;/p&gt;

&lt;p&gt;Lastly, we need to attach the hook to the element containing the chart. That's accomplished by adding a &lt;code&gt;phx-hook&lt;/code&gt; attribute to your markup element:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"trades-chart"&lt;/span&gt; &lt;span class="na"&gt;phx-hook=&lt;/span&gt;&lt;span class="s"&gt;"TradesChart"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"400"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;By adding that attribute, you've told Phoenix LiveView to call the &lt;code&gt;mounted()&lt;/code&gt; hook when the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element is mounted, which will then subscribe the update function to &lt;code&gt;"trade"&lt;/code&gt; events sent by the backend.&lt;/p&gt;

&lt;p&gt;All together, EventStore pushes events to our LiveView process, which pushes an event to our client hook, which puts the new data in the chart. Event sourcing is so cool!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m0UNjg0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k21oiaoov6w7cjk0z8k3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m0UNjg0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k21oiaoov6w7cjk0z8k3.gif" alt="Animation" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See the whole project here:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Cantido"&gt;
        Cantido
      &lt;/a&gt; / &lt;a href="https://github.com/Cantido/exchange"&gt;
        exchange
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A market application with a focus on cryptocurrencies
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>elixir</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The Sad Truth as to Why I Chose to Change Careers to Software Engineering</title>
      <author>KollerCode</author>
      <pubDate>Sun, 16 Jan 2022 20:56:32 +0000</pubDate>
      <link>https://dev.to/kollercode/the-sad-truth-as-to-why-i-chose-to-change-careers-to-software-engineering-nm0</link>
      <guid>https://dev.to/kollercode/the-sad-truth-as-to-why-i-chose-to-change-careers-to-software-engineering-nm0</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;When I am working on these codes, it's like I am solving problems in my own life and it reminds me that as long as I don't give up and I am persistent I can do anything.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'm going to date myself here, but I remember the first time my grandfather let me play on his computer. Back then, it had no mouse. We had to use the arrow keys and the enter button the navigate the files. Oh, and the internet? That didn't exist yet. But when it did, we needed a phone line and an awful screech to tell us when we were connected. &lt;/p&gt;

&lt;p&gt;I grew up alongside the biggest advances in technology. I know computers practically as well as I know how to drive a car. However, it wasn't until 2021 when life hit me hard that I even considered making a career out of anything computer related. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#warning-its-about-to-get-real-sad-and-honest-here"&gt;
  &lt;/a&gt;
  Warning, it's about to get REAL sad and honest here
&lt;/h2&gt;

&lt;p&gt;My year began with news that I was pregnant with my first child. I had not mentioned anything to my director at the time in fear of losing my job since I knew I was not the only pregnant woman on our team. Then, my cat broke his hip-bone and we discovered he has a rare degenerative bone disease that would require surgery. This added more unexpected costs. &lt;/p&gt;

&lt;p&gt;The worst happened when my husband fell ill and we found a large tumor in his lung. He served in Afghanistan and we think that may have caused it- but that's a story for another time! The tumor was cancerous, but once the surgeon removed it, the cancer was taken with it. Shortly after my husband was in and out of the hospital with a collapsed lung. 2 surgeries, one massive infection, 2 lobes removed and several chest tubes and hospitalizations later, a near-death experience, and 7 months later he is finally recovering well and able to lift our son and return to work.&lt;/p&gt;

&lt;p&gt;During that time, the baby's fluid levels were dangerously low and I had to be induced. After the baby was safe, I had to stay in the hospital for a few more days with post-partum Pre-eclampsia. &lt;strong&gt;Once I finally recovered, I had to be the bread-winner, the caretaker for both the baby and my husband, and the take care of the house.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I spoke with my director to return to work after just 2 weeks of &lt;strong&gt;unpaid&lt;/strong&gt; maternity leave (not really leave, more of a two week vacation) only to find out that another person had been hired in my place and given my laptop (which had been wiped). I gave so much to this institution, worked from the hospital, only to be replaced during my time of need.&lt;/p&gt;

&lt;p&gt;After nearly being evicted, my sister and her boyfriend who work for Microsoft mentioned to me that I should have worked in tech years ago. She felt I deserved better than the pay and the treatment I received. Also, my grandfather was an OG computer programmer. It literally RUNS IN MY BLOOD. &lt;/p&gt;

&lt;p&gt;The only beacon of hope that has kept me going through this arduous time is that I know this change of career feels right. &lt;em&gt;When I am working on these codes, it's like I am solving problems in my own life and it reminds me that as long as I don't give up and I am persistent I can do anything.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading ya'll! Be on the lookout for some technical blogs coming your way real soon! I've got one cooking right now about some JavaScript ES6 commands. &lt;/p&gt;

&lt;p&gt;Nothing but love,&lt;/p&gt;

&lt;p&gt;-Natasha&lt;/p&gt;

</description>
      <category>career</category>
      <category>motivation</category>
      <category>programming</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Advanced JavaScript Series - Part 5: IIFE &amp; 'this' keyword in JS(tricky Eg.), call(), apply(), bind(), Currying(Functional Prog)</title>
      <author>Pranav</author>
      <pubDate>Sun, 16 Jan 2022 20:47:07 +0000</pubDate>
      <link>https://dev.to/pranav016/advanced-javascript-series-part-5-iife-this-keyword-in-jstricky-eg-call-apply-bind-curryingfunctional-prog-98c</link>
      <guid>https://dev.to/pranav016/advanced-javascript-series-part-5-iife-this-keyword-in-jstricky-eg-call-apply-bind-curryingfunctional-prog-98c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#iife"&gt;
  &lt;/a&gt;
  IIFE
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;An IIFE (&lt;strong&gt;Immediately Invoked Function Expression&lt;/strong&gt;) is a JavaScript function that &lt;strong&gt;runs as soon as it is defined&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use cases-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#helps-avoid-polluting-the-global-namespace"&gt;
  &lt;/a&gt;
  Helps avoid polluting the global namespace-
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Since our application may incorporate a large number of functions and global variables from various source files, it's critical to keep the number of &lt;strong&gt;global variables&lt;/strong&gt; to a minimum.&lt;/li&gt;
&lt;li&gt;We could utilize the &lt;strong&gt;IIFE&lt;/strong&gt; pattern if we have some initiation code that we don't need to use again. Because &lt;strong&gt;we won't be reusing&lt;/strong&gt; the code, IIFE is preferable than a function declaration or a function expression &lt;strong&gt;in this scenario&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(function () {
  // some initiation code
  let firstVariable;
  let secondVariable;
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;code&gt;firstVariable&lt;/code&gt; and &lt;code&gt;secondVariable&lt;/code&gt; will be discarded after the function is executed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kzPV0cJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tldp18yttibgq6mxxjcs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kzPV0cJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tldp18yttibgq6mxxjcs.png" alt="IIFE" width="788" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-module-pattern"&gt;
  &lt;/a&gt;
  The module pattern-
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;We would also use IIFE &lt;strong&gt;to create private and public&lt;/strong&gt; variables and methods.&lt;/li&gt;
&lt;li&gt;These patterns &lt;strong&gt;were more useful before the introduction of ES6&lt;/strong&gt;, when we didn't have the &lt;code&gt;let&lt;/code&gt; and the &lt;code&gt;const&lt;/code&gt; keywords. Back then when we imported all the JavaScript files into one, then there were a lot of conflicts in variable names since all variables were global because of declaration using &lt;code&gt;var&lt;/code&gt;. Thus &lt;strong&gt;developers used IIFE module patterns&lt;/strong&gt; where the variables were made and only those required inside module were left in global scope and others &lt;strong&gt;were discarded because of property of Scope&lt;/strong&gt; using IIFEs. This also overlaps with the first use case of IIFEs mentioned above. Consider this example to understand better-&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;As you know that a function in JavaScript creates the local scope. So, you can define variables and function inside a function which &lt;strong&gt;cannot be access outside of that function&lt;/strong&gt;. However, sometime you accidently &lt;strong&gt;pollute the global variables&lt;/strong&gt; or functions by unknowingly giving same name to variables &amp;amp; functions as global variable &amp;amp; function names. &lt;/p&gt;

&lt;p&gt;For example, there are multiple &lt;code&gt;.js&lt;/code&gt; files in your application written by multiple developers over a period of time. Single JavaScript file includes many functions and so these multiple &lt;code&gt;.js&lt;/code&gt; files will result in large number of functions. There is a good chance of &lt;strong&gt;having same name of function&lt;/strong&gt; exists in different &lt;code&gt;.js&lt;/code&gt; files written by multiple developer and if these files included in a single web page then it &lt;strong&gt;will pollute the global scope&lt;/strong&gt; by having two or more function or variables with the same name.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Consider the following example of &lt;code&gt;MyScript1.js&lt;/code&gt; and &lt;code&gt;MyScript2.js&lt;/code&gt; with same variable &amp;amp; function name.&lt;/em&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#myscript1js"&gt;
  &lt;/a&gt;
  MyScript1.js
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var userName = "Bill";

function display(name)
{
    alert("MyScript1.js: " + name);
}

display(userName);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#myscript2js"&gt;
  &lt;/a&gt;
  MyScript2.js
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var userName = "Steve";

function display(name)
{
    alert("MyScript2.js: " + name);
}

display(userName);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#importing-both-files"&gt;
  &lt;/a&gt;
  Importing both files-
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width" /&amp;gt;
    &amp;lt;title&amp;gt;JavaScript Demo&amp;lt;/title&amp;gt;
    &amp;lt;script src="/MyScript1.js"&amp;gt;&amp;lt;/&amp;lt;script&amp;gt; 
    &amp;lt;script src="/MyScript2.js"&amp;gt;&amp;lt;/&amp;lt;script&amp;gt; 
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt; IIFE Demo&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you run above example, you will find that every time it call &lt;code&gt;display()&lt;/code&gt; function in &lt;code&gt;MyScript2.js&lt;/code&gt; because &lt;code&gt;MyScript2.js&lt;/code&gt; included after &lt;code&gt;MyScript1.js&lt;/code&gt; in a web page. So JavaScript considers last definition of a function if two functions have the same name.&lt;/p&gt;

&lt;p&gt;IEFE solves this problem by having its &lt;strong&gt;own scope and restricting functions and variables to become global&lt;/strong&gt;. The functions and variables declare inside IIFE will &lt;strong&gt;not pollute&lt;/strong&gt; global scope &lt;strong&gt;even they have same name as global&lt;/strong&gt; variables &amp;amp; functions. So let's see what is an IIFE is.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-iife"&gt;
  &lt;/a&gt;
  Advantages of IIFE:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Helps avoid creating unnecessary global variables and functions.&lt;/li&gt;
&lt;li&gt;Functions and variables defined in IIFE do not conflict with other functions &amp;amp; variables even if they have same name.&lt;/li&gt;
&lt;li&gt;Organize JavaScript code.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make JavaScript code maintainable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Even though the information above is more than enough and well explained to grasp the concept but you can still check out this &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE"&gt;documentation&lt;/a&gt; and this &lt;a href="https://benalman.com/news/2010/11/immediately-invoked-function-expression/"&gt;article&lt;/a&gt; to read more in-depth about IIFEs.*&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#-raw-this-endraw-keyword"&gt;
  &lt;/a&gt;
  &lt;code&gt;this&lt;/code&gt; keyword-
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; represents the &lt;strong&gt;object that the function is a property of&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;or simply&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; helps &lt;strong&gt;refer to the object it belongs to&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;In a method, &lt;code&gt;this&lt;/code&gt; refers to the owner object.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const person = {
  firstName: "Pranav",
  lastName : "Mendiratta",
  fullName : function() {
    // here `this` keyword refers to our object `person` 
    return this.firstName + " " + this.lastName;
  }
};
console.log(person.fullName())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"Pranav Mendiratta"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Alone, &lt;code&gt;this&lt;/code&gt; refers to the global object (called the window object in the browser).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(this)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In a function, &lt;code&gt;this&lt;/code&gt; refers to the global object.&lt;/li&gt;
&lt;li&gt;In a function, in strict mode, &lt;code&gt;this&lt;/code&gt; is undefined.&lt;/li&gt;
&lt;li&gt;In an event, &lt;code&gt;this&lt;/code&gt; refers to the element that received the event.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button onclick="this.style.display='none'"&amp;gt;
  Click to Remove Me!
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tricky-example-on-raw-this-endraw-keyword-1"&gt;
  &lt;/a&gt;
  Tricky example on &lt;code&gt;this&lt;/code&gt; keyword 1
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/rkjdpuez/2//embedded/js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window
window
c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are functions of the global/ window object, thus as per the definition, the &lt;code&gt;window&lt;/code&gt; object gets returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; represents the object that the function is a property of.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The third &lt;code&gt;console.log&lt;/code&gt; returns the &lt;code&gt;c&lt;/code&gt; object because that's what has called the &lt;code&gt;hi()&lt;/code&gt; function in &lt;code&gt;c.hi()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;One trick to solve these easily&lt;/strong&gt; is to check what is on the &lt;strong&gt;left side of the function call&lt;/strong&gt;. If there is nothing then it returns the &lt;strong&gt;window object&lt;/strong&gt;. If some object is calling it like &lt;code&gt;c.hi()&lt;/code&gt; then the &lt;code&gt;this&lt;/code&gt; keyword in the function points to the object &lt;code&gt;c&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tricky-example-on-raw-this-endraw-keyword-2"&gt;
  &lt;/a&gt;
  Tricky example on &lt;code&gt;this&lt;/code&gt; keyword 2
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/gfvjLo2b//embedded/js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;obj
window
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;On calling the &lt;code&gt;sing()&lt;/code&gt; function, the &lt;code&gt;console.log(this)&lt;/code&gt; on line 4 returns the &lt;code&gt;obj&lt;/code&gt; object since &lt;code&gt;obj&lt;/code&gt; is calling the function.&lt;/li&gt;
&lt;li&gt;Whereas the &lt;code&gt;console.log(this)&lt;/code&gt; on line 6 returns the &lt;code&gt;window&lt;/code&gt; object because its &lt;strong&gt;function call is not attached to any object&lt;/strong&gt;, and those not attached are always under the global/ window object.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tricky-example-on-raw-this-endraw-keyword-3"&gt;
  &lt;/a&gt;
  Tricky example on &lt;code&gt;this&lt;/code&gt; keyword 3
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/yut8g7La//embedded/js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;b
window
d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Using the trick we learned in tricky example 1, we see that &lt;code&gt;b.say()&lt;/code&gt; should return the &lt;code&gt;b&lt;/code&gt; object and it does exactly that.&lt;/li&gt;
&lt;li&gt;Arrow functions are lexically scoped where as regular anonymous functions are dynamically scoped.&lt;/li&gt;
&lt;li&gt;That is why when calling &lt;code&gt;c.say()()&lt;/code&gt;, it returns the window object because it uses anonymous functions that are lexically scoped (we've learned in earlier part of the series). 
&amp;gt; Lexical scope care where a function was declared, but dynamic scope cares where a function was called from.&lt;/li&gt;
&lt;li&gt;This statement will help in understanding the difference.&lt;/li&gt;
&lt;li&gt;The final output on calling &lt;code&gt;d.say()()&lt;/code&gt; returns the object &lt;code&gt;d&lt;/code&gt; that is the correct output because it used the arrow functions that are dynamically scoped and bind the &lt;code&gt;this&lt;/code&gt; keyword with the object calling the function.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tricky-example-on-raw-this-endraw-keyword-4"&gt;
  &lt;/a&gt;
  Tricky example on &lt;code&gt;this&lt;/code&gt; keyword 4
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const phone = function (model, brand){
  this.model = model,
  this.brand = brand
}

// regular anonymous  function used
phone.prototype.clickPicture = function(){
  console.log(`${this.brand} ${this.model} clicks picture!`)
}

// arrow function used here
phone.prototype.powerOn = () =&amp;gt; {
  console.log(`${this.brand} ${this.model} boots up!`)
}

const iphone = new phone("Iphone 12", "Apple")
console.log(iphone.clickPicture())
console.log(iphone.powerOn())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"Apple Iphone 12 clicks picture!"
"undefined undefined boots up!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Arrow functions are lexically scoped&lt;/strong&gt; where as &lt;strong&gt;regular anonymous functions are dynamically scoped&lt;/strong&gt; that is why the arrow functions that are dynamically scoped and bind the &lt;code&gt;this&lt;/code&gt; keyword with the object calling the function and the other function doesn't thus logging undefined on using &lt;code&gt;this.brand&lt;/code&gt; or &lt;code&gt;this.model&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A lot of the weird behavior of the &lt;code&gt;this&lt;/code&gt; keyword is mainly because it is &lt;strong&gt;dynamically scoped and not lexically scoped&lt;/strong&gt; like everything else in JavaScript meaning that it is not important where it is written but how it is called.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#solution-to-weird-behavior"&gt;
  &lt;/a&gt;
  Solution to weird behavior-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;One way to solve these issues is the use of &lt;strong&gt;arrow functions&lt;/strong&gt; that were introduced in ES6.&lt;/li&gt;
&lt;li&gt;If we use an arrow function in the &lt;strong&gt;previous example&lt;/strong&gt; then our function gives us the &lt;strong&gt;desired output&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Another way is to bind the &lt;code&gt;this&lt;/code&gt; keyword to the object. We will learn more about &lt;code&gt;bind&lt;/code&gt; keyword ahead.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WmR6JTPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzdepajp4aap56bugsww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WmR6JTPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzdepajp4aap56bugsww.png" alt="This" width="880" height="676"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Credits- &lt;a href="https://medium.com/@iqbal.ipel"&gt;Iqbal M Ipel&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aEvticnL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4i1abr1nmt4962robct.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aEvticnL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4i1abr1nmt4962robct.png" alt="Function" width="856" height="404"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Credits- &lt;a href="https://dev.to/thesanjeevsharma"&gt;Sanjeev Sharma&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#call"&gt;
  &lt;/a&gt;
  call()
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;With the &lt;code&gt;call()&lt;/code&gt; method, you can write a method that can be used on different objects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const wizard = {
  name: 'Pranav',
  health: 100,
  heal: function(num1, num2) {
    this.health += num1 + num2;
  }
}

const archer = {
  name: 'Robin',
  health: 50
}

wizard.heal.call(archer, 50, 60)
console.log(archer)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  health: 160,
  name: "Robin"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#apply"&gt;
  &lt;/a&gt;
  apply()
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;With the apply() method, you can write a method that can be used on different objects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;It is very similar to the &lt;code&gt;call&lt;/code&gt; keyword, only difference is that the arguments are passed as an array when we are using &lt;code&gt;apply&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const wizard = {
  name: 'Pranav',
  health: 100,
  heal: function(num1, num2) {
    this.health += num1 + num2;
  }
}

const archer = {
  name: 'Robin',
  health: 50
}

wizard.heal.apply(archer, [20, 30])
console.log(archer)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  health: 100,
  name: "Robin"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bind"&gt;
  &lt;/a&gt;
  bind()
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The bind() method creates a new function that, when called, has its this keyword set to the provided value. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It let’s us explicitly define the value of this when calling a function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It returns a new function that we can call.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const wizard = {
  name: 'Pranav',
  health: 100,
  heal: function(num1, num2) {
    this.health += num1 + num2;
  }
}

const archer = {
  name: 'Robin',
  health: 50
}

const healArcher = wizard.heal.bind(archer, 50, 60);
healArcher()
console.log(archer)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;The js engine is creating a new instance of the heal function and binding its &lt;code&gt;this&lt;/code&gt; object to archer.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  health: 160,
  name: "Robin"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HiAeIH7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87k9zcky6o4siop6jw5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HiAeIH7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87k9zcky6o4siop6jw5x.png" alt="CallApply" width="880" height="499"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Credits- &lt;a href="https://hdsatija.medium.com/"&gt;Himanshu Satija&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#currying"&gt;
  &lt;/a&gt;
  Currying-
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Currying is a technique of evaluating function with multiple arguments, into sequence of functions with single argument.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#example-1"&gt;
  &lt;/a&gt;
  Example 1-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function volume(length) {
      return function(width) {
         return function(height) {
            return height * width * length;
         }
      }
   }
console.log(volume(11)(2)(3))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;66
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example-2"&gt;
  &lt;/a&gt;
  Example 2-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function sum(a, b) {
    return a+b;
}

var sumWithThree = sum.bind(this, 3);
console.log(sumWithThree(4));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#partial-application"&gt;
  &lt;/a&gt;
  Partial Application-
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Partial application starts with a function. We take this function and create a new one with one or more of its arguments already “set” or &lt;strong&gt;partially applied&lt;/strong&gt;. It will help reduce the number of parameters needed for our functions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Both currying and partial application are patterns that &lt;strong&gt;allow us to call functions&lt;/strong&gt; with some of their parameters, and provide the rest later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They both are important concepts in &lt;strong&gt;Functional programming&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const multiply = (a, b, c) =&amp;gt; a * b * c
const partialMultiplyBy5 = multiply.bind(null, 5)
partialMultiplyBy5(10, 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#difference-bw-currying-and-partial-application"&gt;
  &lt;/a&gt;
  Difference b/w Currying and Partial Application-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Partial application is more or less a pattern of &lt;strong&gt;calling&lt;/strong&gt; a function. You can &lt;strong&gt;partially apply any function&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Currying is more &lt;strong&gt;about a form of the function&lt;/strong&gt;. To be able to use currying, you have to &lt;strong&gt;explicitly create a new function&lt;/strong&gt; that is a curried version of the original one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-using-currying-or-partial-application"&gt;
  &lt;/a&gt;
  Advantages of using Currying or Partial Application-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;They both help us &lt;strong&gt;create specialized versions of generic functions&lt;/strong&gt;, thus &lt;strong&gt;removing duplication&lt;/strong&gt; and making the code easier to compose.&lt;/li&gt;
&lt;li&gt;Another benefit of using partial application and currying is that they can help us create more &lt;strong&gt;readable code&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#appendix"&gt;
  &lt;/a&gt;
  Appendix-
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-1-behind-the-scenes-javascript-engine-ats-hidden-classes-garbage-collection-3ajj"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 1&lt;/strong&gt;: Behind the scenes (JavaScript Engine, ATS, Hidden Classes, Garbage Collection)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-1-execution-context-and-call-stack-l1o"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 2&lt;/strong&gt;: Execution Context and Call Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-3-weird-js-behavior-strict-mode-and-hoisting-26a3"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 3&lt;/strong&gt;: Weird JS behavior, Strict Mode and Hoisting, Temporal Dead Zone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-41-global-function-and-block-scope-lexical-vs-dynamic-scoping-20pg"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 4.1&lt;/strong&gt;: Global, Function and Block Scope, Lexical vs Dynamic Scoping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-42-scope-chains-and-their-working-lexical-and-variable-environments-19d5"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 4.2&lt;/strong&gt;: Scope Chains and their working, Lexical and Variable Environments&lt;/a&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References-
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE"&gt;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialsteacher.com/javascript/immediately-invoked-function-expression-iife"&gt;https://www.tutorialsteacher.com/javascript/immediately-invoked-function-expression-iife&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/js/js_this.asp"&gt;https://www.w3schools.com/js/js_this.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/js/js_function_call.asp"&gt;https://www.w3schools.com/js/js_function_call.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/js/js_function_apply.asp"&gt;https://www.w3schools.com/js/js_function_apply.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@omergoldberg/javascript-call-apply-and-bind-e5c27301f7bb"&gt;https://medium.com/@omergoldberg/javascript-call-apply-and-bind-e5c27301f7bb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialspoint.com/what-is-currying-in-javascript"&gt;https://www.tutorialspoint.com/what-is-currying-in-javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/how-to-use-partial-application-to-improve-your-javascript-code-5af9ad877833/"&gt;https://www.freecodecamp.org/news/how-to-use-partial-application-to-improve-your-javascript-code-5af9ad877833/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/dailyjs/functional-js-5-partial-application-currying-da30da4e0cc3"&gt;https://medium.com/dailyjs/functional-js-5-partial-application-currying-da30da4e0cc3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/@osmanakar_65575/javascript-lexical-and-dynamic-scoping-72c17e4476dd#:%7E:text=The%20Key%20Contrast%20Between%20Lexical,a%20function%20was%20called%20from"&gt;https://medium.com/@osmanakar_65575/javascript-lexical-and-dynamic-scoping-72c17e4476dd#:~:text=The%20Key%20Contrast%20Between%20Lexical,a%20function%20was%20called%20from&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>node</category>
    </item>
    <item>
      <title>Advanced JavaScript Series - Part 4.2: Scope Chains and their working, Lexical and Variable Environments</title>
      <author>Pranav</author>
      <pubDate>Sun, 16 Jan 2022 20:25:36 +0000</pubDate>
      <link>https://dev.to/pranav016/advanced-javascript-series-part-42-scope-chains-and-their-working-lexical-and-variable-environments-19d5</link>
      <guid>https://dev.to/pranav016/advanced-javascript-series-part-42-scope-chains-and-their-working-lexical-and-variable-environments-19d5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-scope-chain"&gt;
  &lt;/a&gt;
  What is a Scope Chain?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The Scope Chain is the hierarchy of scopes that will be searched in order to find a function or variable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cAgLjVDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kz8mt8i5eo0plhotv8j1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cAgLjVDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kz8mt8i5eo0plhotv8j1.png" alt="Scope Chain" width="829" height="660"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Credits- &lt;a href="https://hashnode.com/@anuradha"&gt;Anuradha Aggarwal&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When a variable is used in JavaScript, the &lt;strong&gt;JavaScript engine&lt;/strong&gt; will try to find the variable’s value in the current scope. If it could not find the variable, it will look into the outer scope and will continue to do so until it finds the variable or reaches &lt;strong&gt;global scope&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If it’s still could not find the variable, it will either &lt;strong&gt;implicitly declare the variable&lt;/strong&gt; in the global scope (if not in strict mode) or return an &lt;strong&gt;error&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The Scope Chain is used to &lt;strong&gt;resolve variables&lt;/strong&gt;. When asked to resolve a variable, JavaScript always starts at the &lt;strong&gt;innermost level&lt;/strong&gt; of the code nest and keeps jumping back to the parent scope until it finds the variable or any other resource it is looking for. &lt;/li&gt;
&lt;li&gt;The scope chain can simply be defined as an &lt;strong&gt;object&lt;/strong&gt; that contains a bunch of other objects. Each object has the &lt;strong&gt;variable-to-value mapping&lt;/strong&gt; for its particular execution context.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let c = 10
function a() {
  let b = 25;  
  console.log('Inside function a()');
}
a();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#sample-scope-chain-object-for-the-function-raw-a-endraw-"&gt;
  &lt;/a&gt;
  Sample Scope chain object for the function &lt;code&gt;a&lt;/code&gt;-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;functionLexicalEnvironment = {
  environmentRecord: {
      b    : 25,
  }
  outer: {
    c  : 10,
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lexical-environment"&gt;
  &lt;/a&gt;
  Lexical Environment-
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A lexical environment is a structure that holds &lt;strong&gt;identifier-variable mapping&lt;/strong&gt;. &lt;br&gt;
(here identifier refers to the name of variables/functions, and the variable is the reference to actual object [including function object and array object] or primitive value).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Simply put, a lexical environment is a place where &lt;strong&gt;variables and references to the objects&lt;/strong&gt; are stored.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A lexical environment conceptually looks like this:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lexicalEnvironment = {
  environmentRecord: {
    &amp;lt;identifier&amp;gt; : &amp;lt;value&amp;gt;,
    &amp;lt;identifier&amp;gt; : &amp;lt;value&amp;gt;
  }
  outer: &amp;lt; Reference to the parent lexical environment&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Let's understand this with the help of an example-
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let language = 'JS';
function a() {
  let b = 25;  
  console.log('Inside function a()');
}
a();
console.log('Inside global execution context');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The JavaScript engine creates a new &lt;strong&gt;lexical environment&lt;/strong&gt; to store the variables and functions defined in the global scope when it establishes a &lt;strong&gt;global execution context&lt;/strong&gt; to execute global code. As a result, the lexical environment for the global scope will be as follows:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;globalLexicalEnvironment = {
  environmentRecord: {
      language    : 'JS',
      a : &amp;lt; reference to function object &amp;gt;
  }
  outer: null
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Because there is no outer &lt;strong&gt;lexical environment&lt;/strong&gt; for the global scope, the outer lexical environment is set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the engine establishes an &lt;strong&gt;execution context&lt;/strong&gt; for the &lt;code&gt;a()&lt;/code&gt; function, it also creates a lexical environment in which variables defined in the function can be stored while the function is being executed. As a result, the function's &lt;strong&gt;lexical environment&lt;/strong&gt; will look like this:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;functionLexicalEnvironment = {
  environmentRecord: {
      b    : 25,
  }
  outer: &amp;lt;globalLexicalEnvironment&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Because the function is surrounded by the &lt;strong&gt;global scope&lt;/strong&gt; in the source code, the function's outer lexical environment is set to the global lexical environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When a function finishes executing, its execution context is removed from the stack, but its lexical environment &lt;strong&gt;may or may not be erased from memory&lt;/strong&gt;, depending on whether it is referenced by any other lexical environments in their &lt;strong&gt;outer lexical environment property&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#variable-environment"&gt;
  &lt;/a&gt;
  Variable Environment-
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;The variable environment is a representation of the &lt;strong&gt;lexical environment’s local memory&lt;/strong&gt;. In the environment record, the lexical environment stores variables as well as other information such as the infamous this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We've previously used one variable environment, the &lt;strong&gt;global environment's memory&lt;/strong&gt;, which holds variables that are universally available throughout the script. While the lexical environment refers to this global environment, the variable environment only refers &lt;strong&gt;to variables created within the scope&lt;/strong&gt; of the provided function within the lexical environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The variable environment &lt;strong&gt;maps the local scope&lt;/strong&gt; of a given environment. In other words, the variable environment stores those variables defined within the given working code block &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7MALeaCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olf5ymfxixmr88y5i2jf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7MALeaCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olf5ymfxixmr88y5i2jf.png" alt="Img" width="823" height="329"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Credits-  &lt;a href="https://stackoverflow.com/users/1348195/benjamin-gruenbaum"&gt;Benjamin Gruenbaum&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#appendix"&gt;
  &lt;/a&gt;
  Appendix-
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-1-behind-the-scenes-javascript-engine-ats-hidden-classes-garbage-collection-3ajj"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 1&lt;/strong&gt;: Behind the scenes (JavaScript Engine, ATS, Hidden Classes, Garbage Collection)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-1-execution-context-and-call-stack-l1o"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 2&lt;/strong&gt;: Execution Context and Call Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-3-weird-js-behavior-strict-mode-and-hoisting-26a3"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 3&lt;/strong&gt;: Weird JS behavior, Strict Mode and Hoisting, Temporal Dead Zone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-41-global-function-and-block-scope-lexical-vs-dynamic-scoping-20pg"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 4.1&lt;/strong&gt;: Global, Function and Block Scope, Lexical vs Dynamic Scoping&lt;/a&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References-
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://anuradha.hashnode.dev/scope-chain-and-lexical-environment-in-javascript"&gt;https://anuradha.hashnode.dev/scope-chain-and-lexical-environment-in-javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.bitsrc.io/understanding-scope-and-scope-chain-in-javascript-f6637978cf53"&gt;https://blog.bitsrc.io/understanding-scope-and-scope-chain-in-javascript-f6637978cf53&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@bdov_/javascript-typescript-execution-vs-lexical-vs-variable-environment-37ff3f264831"&gt;https://medium.com/@bdov_/javascript-typescript-execution-vs-lexical-vs-variable-environment-37ff3f264831&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/20721626/value-of-variable-and-lexical-environment-after-creating-execution-context"&gt;https://stackoverflow.com/questions/20721626/value-of-variable-and-lexical-environment-after-creating-execution-context&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>react</category>
    </item>
  </channel>
</rss>
