<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10% Discount for 15000+ Premium design resources for Life Time Access.</title>
      <author>Kamal Ahmed</author>
      <pubDate>Thu, 30 Sep 2021 17:19:20 +0000</pubDate>
      <link>https://dev.to/marketerkamal/10-discount-for-15000-premium-design-resources-for-life-time-access-36ag</link>
      <guid>https://dev.to/marketerkamal/10-discount-for-15000-premium-design-resources-for-life-time-access-36ag</guid>
      <description>&lt;p&gt;ü§∑üèª‚Äç‚ôÄÔ∏è 15000+ Premium design resources Web template, Illustrations, Mobile app, Free icon and Web app elements from the world‚Äôs best designers&lt;/p&gt;

&lt;p&gt;Lifetime Access Only 99$ üéâ&lt;br&gt;
Get 10% Discount üì¢ Use this coupon code: SPI10&lt;/p&gt;

&lt;p&gt;From : &lt;a href="https://www.uihut.com/"&gt;https://www.uihut.com/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>New Beginnings.</title>
      <author>Andrew Bonacci</author>
      <pubDate>Thu, 30 Sep 2021 16:26:44 +0000</pubDate>
      <link>https://dev.to/abonacci/new-beginnings-1e7</link>
      <guid>https://dev.to/abonacci/new-beginnings-1e7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#who-i-am"&gt;
  &lt;/a&gt;
  Who I am‚Ä¶
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M8JfdZnG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/us4nh0sllozrli5gcvxj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M8JfdZnG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/us4nh0sllozrli5gcvxj.png" alt="File not found."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My name is Andrew Bonacci. I'm 31 years old, happily married and have recently embarked on a web development journey. I had my first try at HTML back in the early 2000s on the blogging website called Xanga. 14-year-old me thought it was so cool that I could make text do different things by modifying the markups. As time went on, I had some practice with Lua in ROBLOX when I was a late teenager. I didn't get very far because I lacked proper guidance, but I was able to tinker with some of the code and bring my creations to life.&lt;/p&gt;

&lt;p&gt;However, as much as I enjoyed these things, they never became much more than a hobby. Rather, I pursued education because of my desire to make a difference in the lives of others. Even throughout my time as an educator, the one constant has always been software and technology. Other people I worked with would often ask me for help with their software or hardware issues. The more I did this, the more I felt a desire to pursue something I felt I should have done long ago.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-turning-point"&gt;
  &lt;/a&gt;
  The turning point.
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;
Knowing that I wanted to pursue web development and not knowing where to begin with self-study, I began researching possible classes and programs. The first thing I noticed was the number of &lt;em&gt;software boot camps‚Ä¶&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OaVBOj1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/z239mnu8goahcze8qi95.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OaVBOj1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/z239mnu8goahcze8qi95.png" alt="File not found."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some of these sounded promising in the beginning, but one thing that most had in common was that they were leading with potential income in various software and web development careers. Of course, a nice salary is always a plus, but I felt like those places were not focused on the &lt;em&gt;passion&lt;/em&gt; of it all. I wanted to be a part of a course that focused on the &lt;strong&gt;&lt;em&gt;love&lt;/em&gt;&lt;/strong&gt; of web development and programming; I‚Äôm inspired by those who want to consistently grow and learn more about it.&lt;/p&gt;

&lt;p&gt;In the summer of 2021, while continuing my search for ways to learn programming and development, I came across a Reddit post talking about a mentorship program through &lt;a href="//perpetual.education"&gt;Perpetual Education&lt;/a&gt;. I was fascinated by their website and by how precise their points about learning were, so I decided to schedule a video interview with Derek and Ivy. They were super friendly, welcoming and they gave me an overview of how the course works. I knew then that I wanted to be a part of it. What I love the most about Perpetual Education so far is the strong sense of community among students and staff. Students help each other with lesson content and Derek is highly flexible when it comes to working with students individually.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1lbsPCRL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/ezc5nn75rvfxgucge62z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1lbsPCRL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/ezc5nn75rvfxgucge62z.png" alt="File not found."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The course really breaks things down and starts from the very beginning; so far, we've learned about operating systems, the file system, visual design concepts, how certain things in software came to be the way they are, and more. The idea is to build a strong foundation and mold the way we think so that we don't just learn the code, we learn how to &lt;em&gt;think&lt;/em&gt; like web designers and programmers. There is a good deal of accountability (&lt;strong&gt;which is absolute must!&lt;/strong&gt;); it's crucial to keep up with the content and do your best to go above and beyond what is expected of you, but it's a wonderful experience so far. I've learned more in almost 3 weeks than I've learned in months trying things on my own. The students in my group are currently working on a collaborative project which brings us together even more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion‚Ä¶
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;
I feel happy to be a part of the Perpetual Education learning experience and I'm confident that this will help me on my web development journey. If anyone would like to know more, I welcome you to reach out! I'll be sharing more about my experiences as they unfold, so please feel free to subscribe. I‚Äôm always open to learning from others and sharing ideas!&lt;/p&gt;

&lt;p&gt;Regards,&lt;br&gt;
Andrew&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>devops</category>
      <category>devjournal</category>
      <category>development</category>
    </item>
    <item>
      <title>No time to learn a static site generator? Try this</title>
      <author>EDDYMENS</author>
      <pubDate>Thu, 30 Sep 2021 16:01:56 +0000</pubDate>
      <link>https://dev.to/eddymens/no-time-to-learn-a-static-site-generator-try-this-2355</link>
      <guid>https://dev.to/eddymens/no-time-to-learn-a-static-site-generator-try-this-2355</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-a-static-site-generatorssg"&gt;
  &lt;/a&gt;
  What is a Static Site Generator(SSG)?
&lt;/h3&gt;

&lt;p&gt;Traditionally we built sites supported by a backend that takes data and spreads it onto an HTML template.&lt;br&gt;
 Backends also took care of the differences between rendered pages.&lt;br&gt;
This setup is what we refer to as a dynamically rendered site.&lt;/p&gt;

&lt;p&gt;For many sites, this approach meant each time a user visited the website, the backend did the same thing repeatedly. &lt;br&gt;
So the idea of a static site generator is to mix the data/content with the HTML templates once and then keep a copy of the output to be served to users.&lt;/p&gt;

&lt;p&gt;With this approach, you have a faster website. You also remove the overhead of maintaining the backend code in production, leaving you with a basic server setup to manage. &lt;/p&gt;

&lt;p&gt;You may also give up the server setup altogether to use any of the numerous static site hosting solutions out there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#challenges-static-site-generators-present-to-developers"&gt;
  &lt;/a&gt;
  Challenges static site generators present to developers
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ArXiSINh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/randombyte/image/upload/v1633014848/business-man-pushing-large-stone-up-to-hill-business-heavy-tasks-and-picture-id825383494_gnphts.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ArXiSINh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/randombyte/image/upload/v1633014848/business-man-pushing-large-stone-up-to-hill-business-heavy-tasks-and-picture-id825383494_gnphts.jpg"&gt;&lt;/a&gt;&lt;br&gt;
&lt;small&gt;Credit: &lt;a href="https://www.istockphoto.com/photo/business-man-pushing-large-stone-up-to-hill-business-heavy-tasks-and-problems-concept-gm825383494-133865749"&gt;Unsplash&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Do note that there are general cons to having static sites. I am not going to talk about those.&lt;br&gt;
I am addressing the cons static site generators themselves present.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They come with a learning curve, and it‚Äôs made worse given there are too many static site generators out there. This means you are likely to hop on a project using one you are not familiar with.&lt;/li&gt;
&lt;li&gt;Limited functionalities, developers are limited to what a static site generator provides. Do you want a specific date format? Your best bet is a plugin, and pray it exists.&lt;/li&gt;
&lt;li&gt;The authoring process is a nightmare for non-developers, from dealing with markdown files to sometimes dealing with build pipelines. It‚Äôs even becoming a requirement for hiring content creators in some cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#whats-the-alternative"&gt;
  &lt;/a&gt;
  What‚Äôs the alternative?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5YGWzm6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/randombyte/image/upload/v1633015519/carbon_lfiffb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5YGWzm6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/randombyte/image/upload/v1633015519/carbon_lfiffb.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just build your site in whatever framework you are comfortable with, Laravel, Express, whatever. &lt;br&gt;
Then use a tool like &lt;a href="https://www.gnu.org/software/wget"&gt;&lt;code&gt;wget&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://www.httrack.com"&gt;HTTrack&lt;/a&gt; to generate the static files.&lt;/p&gt;

&lt;p&gt;You might benefit from using SSGs, but I think this approach remains a good starting point.&lt;/p&gt;

&lt;p&gt;With this approach, you can build a complete website with a backend admin that anyone can use.&lt;br&gt;
Also, it will be based on a web stack you are familiar with or that your team is already using. You can build out whatever feature set you will need as well.&lt;/p&gt;

&lt;p&gt;The image above shows the exact command I run to generate my site, you can find the explanation of each parameter &lt;a href="https://explainshell.com/explain?cmd=wget+-mpEk+-nH++-P+output_folder+http%3A%2F%2F%3Clocalhost%3A8080"&gt;here&lt;/a&gt;.&lt;br&gt;
For example, I am currently working on &lt;a href="https://codingterms.com/"&gt;https://codingterms.com/&lt;/a&gt;, and it‚Äôs running as a laravel app locally.  I run &lt;code&gt;wget&lt;/code&gt; when I am ready to publish.&lt;/p&gt;

&lt;p&gt;As far as feature sets go, I have many of them. One example is my ability to create hyperlinks pointing to other pages. The system checks if the page exists before making them visible as links on the other page. This way, I don‚Äôt have to go through older articles to change links. &lt;/p&gt;

&lt;p&gt;I am using &lt;code&gt;wget&lt;/code&gt; for my personal website &lt;a href="https://eddymens.com"&gt;https://eddymens.com&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;Another approach is using a CMS then generate the static files for production. When dealing with plugins, you need to be aware that this might not translate well to static site land, which is a general characteristic of static sites anyway.&lt;/p&gt;

&lt;p&gt;Also, this allows you to move away from static sites to dynamic sites in a snap because you already have a dynamic site on hand.&lt;/p&gt;

&lt;p&gt;I am still on the lookout for the gotchas of this approach and will share more as I progress. &lt;/p&gt;

&lt;p&gt;Originally posted on &lt;a href="https://www.eddymens.com/blog/no-time-to-learn-a-static-site-generator-try-this"&gt;Eddymens Personal Site&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ssg</category>
      <category>staticsitegenerator</category>
      <category>website</category>
      <category>staticsite</category>
    </item>
    <item>
      <title>How to Disable Copy Paste in Blogger Website </title>
      <author>Bhavyashah</author>
      <pubDate>Thu, 30 Sep 2021 15:56:51 +0000</pubDate>
      <link>https://dev.to/bhavyashah/how-to-disable-copy-paste-in-blogger-website-2h6d</link>
      <guid>https://dev.to/bhavyashah/how-to-disable-copy-paste-in-blogger-website-2h6d</guid>
      <description>&lt;p&gt;This tutorial explains the process to disable the Copy and Paste of Website, either of WordPress or Blogger. It is useful for those who log on their each each time they want to make a change to their website and they need to be able to make changes. A short tutorial of how you can &lt;a href="https://www.blogtriggers.com/2021/04/how-to-protect-your-content-in-blogger.html"&gt;disable copy and paste in blogger website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step1) First of all Visit Blogger.com&lt;/p&gt;

&lt;p&gt;Step2) Now In Blogger Dashboard go to the theme section &lt;/p&gt;

&lt;p&gt;Step3) Now Find &lt;code&gt;&amp;lt;/body&amp;gt; tag&lt;/code&gt; and paste this script code before the &lt;code&gt;&amp;lt;/body&amp;gt; tag&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
        // Code Developed by BlogTriggers Team members
        window.onload = function() {
            document.addEventListener("contextmenu", function(e) {
                e.preventDefault();
            }, false);

            function disabledEvent(e) {
                if (e.stopPropagation) {
                    e.stopPropagation();
                } else if (window.event) {
                    window.event.cancelBubble = true;
                }
                e.preventDefault();
                return false;
            }
        };
        document.onkeydown = function(e) {
            return false;
        }
        navigator.keyboard.lock();
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step4) Now Save the Template.&lt;/p&gt;

&lt;p&gt;Congratulation you have successfully protect your content in blogger website &lt;/p&gt;

</description>
      <category>website</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Anyone out there willing to Contribute to the Development of JavaScript Frontend Library</title>
      <author>Beingana Jim Junior</author>
      <pubDate>Thu, 30 Sep 2021 15:55:09 +0000</pubDate>
      <link>https://dev.to/jimjunior/anyone-out-there-willing-to-contribute-to-the-development-of-javascript-frontend-library-2a03</link>
      <guid>https://dev.to/jimjunior/anyone-out-there-willing-to-contribute-to-the-development-of-javascript-frontend-library-2a03</guid>
      <description>&lt;p&gt;In the past 3 months i have been developing a JavaScript library for creating frontend web applications. The library is called &lt;a href="https://github.com/jim-junior/pearl-js"&gt;&lt;strong&gt;Pearl.Js&lt;/strong&gt;&lt;/a&gt;. It is written in &lt;a href="https://www.typescriptlang.org/"&gt;Typescript&lt;/a&gt;. And is almost similar to React.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The library consumes a virtual dom.&lt;/li&gt;
&lt;li&gt;It uses &lt;a href="https://devdocs.io/react/introducing-jsx"&gt;JSX&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;It is a component based library&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As u can se the above are a few of its similarities with react.&lt;br&gt;
Its source code can be found on its &lt;a href="https://github.com/jim-junior/pearl-js/"&gt;GitHub Repository&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h3&gt;

&lt;p&gt;The library consists of two parts. The core library that creates the virtual dom and the render that renders the virtual dom to the real dom in the browser.&lt;/p&gt;

&lt;p&gt;When an element is created through the &lt;code&gt;Pearl.createElement()&lt;/code&gt; function. It is represented as an object in the virtual dom and every element or component that is nested through it is stores in that element.&lt;/p&gt;

&lt;p&gt;Even the children behave the same way and this prevents the risk of difference in objects that are in the virtual dom.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;

&lt;p&gt;You can code it in either plane JavaScript or using JSX. It is better to use JSX since it is easier and faster. I will show you how you can code in both syntaxes&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using plain Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Pearl&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pearl-js/pearl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Pearl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mybutton&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn btn-primary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;click&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Click Me&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;Pearl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button-cover&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mounted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Using JSX&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Pearl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pearl-js/pearl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mybutton"&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button-cover&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mounted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: when using JSX you need babel to compile it. In order to prevent babel from compiling it into React functions you need to install a given plugin that transforms JSX into Pearl Js functions.The plugin is called &lt;a href="https://www.npmjs.com/package/babel-plugin-jsx-to-pearl"&gt;babel-plugin-jsx-to-pearl&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#more-feature-of-the-library"&gt;
  &lt;/a&gt;
  More feature of the library
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;State:&lt;/strong&gt; This is for data management in components. Each time state updates the component rerender itself&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Components:&lt;/strong&gt; These are almost the same as react components the consists of state and can pass down props to child components.

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Props:&lt;/strong&gt; These are used to passed down data to Child components&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#contributing"&gt;
  &lt;/a&gt;
  Contributing
&lt;/h2&gt;

&lt;p&gt;The main reason why I am asking for contributers is because recently i found an issuse in the framework. When a component that has child components that are mapped through would rerender due to state update. It could encounter an error in rendering the children of the child component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The following code is from the &lt;code&gt;test&lt;/code&gt; folder in the GitHub repository&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//  tests/jsx/index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Pearl&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@pearl-js/pearl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Tasks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Tasks&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Pearl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;change&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000/tasks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"editor"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Task&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Tasks&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;



&lt;span class="nx"&gt;Pearl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App has mounted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Task.js file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tests/jsx/Tasks.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Pearl&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pearl-js/pearl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Pearl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"task"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      task
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the &lt;code&gt;change()&lt;/code&gt; function is called in the &lt;code&gt;Tasks&lt;/code&gt; component it rerenders the component and the its children. The &lt;code&gt;Task&lt;/code&gt; components are also rerendered with the props but their children are not rendered both in the virtual dom and in the real dom.&lt;/p&gt;

&lt;p&gt;That is the main error being faced now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#proposed-features-that-need-to-be-added"&gt;
  &lt;/a&gt;
  Proposed features that need to be added
&lt;/h3&gt;

&lt;p&gt;In order for the framework to reach a world class level we need to add more features to it and these are also one reason we need contributors. So of the features include.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Global State management:&lt;/strong&gt; This is to prevent passing down props to other through components.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Lifecycle methods:&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you also have a feature that you would like to add to this library you are free to add it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contributing-to-source-code"&gt;
  &lt;/a&gt;
  Contributing to Source Code
&lt;/h3&gt;

&lt;p&gt;The source code is on GitHub all you have to do is fork and clone the repository in order to contribute to it.&lt;/p&gt;

&lt;p&gt;Cloning&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/jim-junior/pearl-js.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The  cloned directory will look somethin like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oLi3R319--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9r99yuvf95tnwp2pxza.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oLi3R319--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9r99yuvf95tnwp2pxza.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In packages folder there are two folders.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;|
|--|- babel-plugin-jsx-to-pearl
   |
   |- pearl

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;pearl&lt;/strong&gt; folder is the one that contains the main package and the &lt;strong&gt;babel-plugin-jsx-to-pearl&lt;/strong&gt; contains the babel plugin that transforms jsx into pearljs functions.&lt;br&gt;
You can contribute to any of those and incase you want to add another package to the repository it should go in the packages folder.&lt;/p&gt;




&lt;p&gt;I would be thankful to any one that contributes.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Docker swarm nginx ingress controller</title>
      <author>Lorenzo Garuti</author>
      <pubDate>Thu, 30 Sep 2021 15:46:42 +0000</pubDate>
      <link>https://dev.to/garutilorenzo/docker-swarm-nginx-ingress-controller-2nig</link>
      <guid>https://dev.to/garutilorenzo/docker-swarm-nginx-ingress-controller-2nig</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f7pQBy87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlh5hetz0kqj4avouzkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f7pQBy87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlh5hetz0kqj4avouzkd.png" alt="Nginx ingress controller"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial we are going to see how to use Nginx as an ingress controller for our Docker swarm cluster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;For this tutorial we only need a running Docker swarm cluster. You can setup a docker swam cluster in a &lt;a href="https://docs.docker.com/engine/swarm/"&gt;few setp&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nginx-ingress-controller"&gt;
  &lt;/a&gt;
  Nginx ingress controller
&lt;/h2&gt;

&lt;p&gt;The image that we will use is based on the excellent work of &lt;a href="https://github.com/foxylion"&gt;foxylion&lt;/a&gt; then revisited on my &lt;a href="https://github.com/garutilorenzo/docker-swarm-ingress"&gt;docker swarm ingress&lt;/a&gt; image.&lt;/p&gt;

&lt;p&gt;The image it‚Äôs very simple, the magic part is the ingress.py file so let‚Äôs take a look on how the magic happens.&lt;/p&gt;

&lt;p&gt;The image needs to be deployed on a manager node, when the image starts the docker-entrypoint.sh is called:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 \      -subj "/C=IT/ST=Denial/L=Italy/O=IT/CN=dummy.cert.io" \      -keyout /etc/nginx/default.key  -out /etc/nginx/default.crtpython ingress.py &amp;amp;
echo $! &amp;gt; /ingress/ingress.pid
exec nginx -g "daemon off;"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet we see the main part of the docker-entrypoint.sh.&lt;/p&gt;

&lt;p&gt;In our container there are now two process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the ingress.py ‚Äúdaemon‚Äù&lt;/li&gt;
&lt;li&gt;and the nginx process&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first line of our snippet create a dummy ssl certificate for nginx, we will cover this in the ‚ÄúSSL mode in depth‚Äù.&lt;/p&gt;

&lt;p&gt;The ingress.py daemon then will check all the services on the docker swarm cluster. If a service has a label named ‚Äúingress.host‚Äù the nginx configuration will be regenerated based on the value of the labels.&lt;/p&gt;

&lt;p&gt;Here is a list of valid labels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ingress.host: the nginx server name (virtualhost). Example: my-service.company.tld&lt;/li&gt;
&lt;li&gt;ingress.port: the port which serves the service in the cluster.&lt;/li&gt;
&lt;li&gt;ingress.virtual_proto: the protocol used to connect to the backends&lt;/li&gt;
&lt;li&gt;ingress.ssl: specify enable to enable ssl-assthrough. More detail on ssl in the ‚ÄúSSL mode in depth‚Äù&lt;/li&gt;
&lt;li&gt;ingress.ssl_redirect: specify enable to enable http to https redirect&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also some environment variales that we can specify on our nginx ingress controller container. Here the list of accepted environment variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOCKER_HOST: the connect string where docker-py library tries to connect to the docker daemon&lt;/li&gt;
&lt;li&gt;UPDATE_INTERVAL: the time in seconds that ingress.py wait before checking for new services in the docker swarm cluster. Default 30 seconds.&lt;/li&gt;
&lt;li&gt;Debug: enable or disable debug mode&lt;/li&gt;
&lt;li&gt;USE_REQUEST_ID: enable or disable Request-Id header&lt;/li&gt;
&lt;li&gt;LOG_FORMAT: specify log format, valid values are json, custom or default&lt;/li&gt;
&lt;li&gt;LOG_CUSTOM: specify the nginx log format&lt;/li&gt;
&lt;li&gt;PROXY_MODE: define nginx SSL proxy mode. Valid values are ssl-passthrough (default) or an used defined value to enable SSL bridging or SSL termination mode. More detail on ssl in the ‚ÄúSSL mode in depth‚Äù&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#ssl-mode-in-depth"&gt;
  &lt;/a&gt;
  SSL mode in depth
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#ssl-passthrough-default"&gt;
  &lt;/a&gt;
  SSL Passthrough (default)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yUyiu-Dx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/ssl-passthrough.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUyiu-Dx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/ssl-passthrough.png" alt="ssl-passthrough"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SSL passthrough passes HTTPS traffic to a backend server without decrypting the traffic on the load balancer. The data passes through fully encrypted, which precludes any layer 7 actions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ssl-terminationoffloloading"&gt;
  &lt;/a&gt;
  SSL Termination/Offloloading
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VyXG-j-5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/ssl-termination.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VyXG-j-5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/ssl-termination.png" alt="ssl-offloading"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SSL termination (a.k.a. SSL Offloading) decrypts all HTTPS traffics when it arrives at the load balancer (our docker swarm ingress controller), and the data is sent to the destination server as plain HTTP traffic (our http backend deployment)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ssl-bridging"&gt;
  &lt;/a&gt;
  SSL Bridging
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--au5uM13R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/ssl-bridging.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--au5uM13R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/ssl-bridging.png" alt="ssl-bridging"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Opposed to SSL termination the traffic from the load balancer and the destination is not in plain HTTP traffic but the traffic is encrypted again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-the-stack"&gt;
  &lt;/a&gt;
  Setup the stack
&lt;/h2&gt;

&lt;p&gt;We are now ready to deploy our nginx ingress controller, in one docker swarm manager node download my docker swarm ingress repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/garutilorenzo/docker-swarm-ingress.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we need to create an overlay network first. This network will then be attached to our backends. Create the network with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker network create --driver overlay ingress-routing
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then deploy the stack:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd docker-swarm-ingress/
docker stack deploy -c examples/docker-ingress-stack.yml nginx-ingress
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we can check the status of our stack using docker stack ps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker stack ps nginx-ingress

ID             NAME                    IMAGE                                       NODE      DESIRED STATE   CURRENT STATE            ERROR     PORTS
x47oswdzbnlp   nginx-ingress_nginx.1   garutilorenzo/docker-swarm-ingress:latest   node-2    Running         Running 12 seconds ago
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we can also check if our nginx ingress controller is working correctly using curl or a web browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CpHy3aUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/swarm-ingress.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CpHy3aUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/swarm-ingress.png" alt="swarm-ingress"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are now ready to deploy our first backend service, to do this we can use an example service:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker stack deploy -c examples/example-service.yml example-http
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if we check the nginx ingress controller log we can see that the nginx server has restarted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker service logs -f --tail=100 nginx-ingress_nginx

nginx-ingress_nginx.1.njwey0rlfvdw@node-2    | 2021/09/30 14:05:12 [notice] 11#11: exiting
nginx-ingress_nginx.1.njwey0rlfvdw@node-2    | 2021/09/30 14:05:12 [notice] 11#11: exitnginx-ingress_nginx.1.njwey0rlfvdw@node-2    | 2021/09/30 14:05:42 [notice] 41#41: signal process started
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and now we can try to reach my-service.company.tld (update your DNS or your host file and set my-service.company.tld pointing to one of your docker swarm cluster ip‚Äôs)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LcjQqneK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/http-backend.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LcjQqneK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/http-backend.png" alt="swarm-http-backend"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#https-ssl-passthrough-mode"&gt;
  &lt;/a&gt;
  HTTPS, SSL passthrough mode
&lt;/h3&gt;

&lt;p&gt;We can now try to expose my-service.company.tld using https with SSL passthrough mode.&lt;/p&gt;

&lt;p&gt;First we need to delete our example-http stack:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker stack rm example-http
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we need to create our self-signed ssl certificates and we need also to create the nginx secrets:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir certs &amp;amp;&amp;amp; sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./certs/nginx.key -out ./certs/nginx.crtGenerating a RSA private key
...................................................................................................+++++
.....................+++++
writing new private key to './certs/nginx.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:IT
State or Province Name (full name) [Some-State]:Italy
Locality Name (eg, city) []:
Organization Name (eg, company) [Internet Widgits Pty Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:my-service.company.tld
Email Address []:me@company.tlddocker secret create nginx_cert certs/nginx.crt
docker secret create nginx_key certs/nginx.key
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now we can deploy our ssl backends:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker stack deploy -c examples/example-ssl-service.yml example-httpsCreating config example-https_nginx_config

Creating config example-https_nginx_options
Creating config example-https_nginx_dhparams
Creating service example-https_nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;check the nginx ingress controller logs and when the nginx daemon is restarted try to reach my-service.company.tld:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sczt7Yzt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/https-backend.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sczt7Yzt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://garutilorenzo.github.io/images/https-backend.png" alt="swarm-https-backend"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we are now exposing our example-https using SSL passthrough.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#https-ssl-terminationoffloloading"&gt;
  &lt;/a&gt;
  HTTPS, SSL Termination/Offloloading
&lt;/h3&gt;

&lt;p&gt;We can now test SSL Termination/Offloading mode, we need to delte both the stack:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker stack rm example-https

Removing service example-https_nginx
Removing config example-https_nginx_dhparams
Removing config example-https_nginx_options
Removing config example-https_nginx_config

docker stack rm nginx-ingress
Removing service nginx-ingress_nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to create the ssl certificates for our domain, exposed directly by the nginx ingress controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./certs/my-service.key -out ./certs/my-service.crt
Generating a RSA private key
......+++++
...............................................................+++++
writing new private key to './certs/my-service.key'
----------
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
----------
Country Name (2 letter code) [AU]:IT
State or Province Name (full name) [Some-State]:Italy
Locality Name (eg, city) []:
Organization Name (eg, company) [Internet Widgits Pty Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:my-service.company.tlddocker secret create my-service.company.tld.key certs/my-service.key
docker secret create my-service.company.tld.crt certs/my-service.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can deploy our nginx ingress controller in SSL Termination/Offloloading mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker stack deploy -c examples/docker-ingress-stack-ssl_term_bridg.yml nginx-ingress
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and we can also deploy our http example backend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker stack deploy -c examples/example-service-ssl-termination.yml example-https-termination
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;check the nginx ingress controller logs and when the nginx daemon is restarted try to reach my-service.company.tld. We are now reacing my-service.company.tld in https mode but unlike the SSL passthrough mode the ssl certificates are served directly by our nginx ingress controller.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#https-ssl-bridging"&gt;
  &lt;/a&gt;
  HTTPS, SSL Bridging
&lt;/h3&gt;

&lt;p&gt;For the SSL bridging test we need to delete only our backend service ‚Äúexample-https-termination‚Äù. The configuration of the nginx ingress controller for SSL bridging and SSL Termination/Offloloading are the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker stack rm example-https-terminationdocker stack deploy -c examples/example-service-ssl-bridging.yml example-htts-bridging
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;check the nginx ingress controller logs and when the nginx daemon is restarted try to reach my-service.company.tld. We are now reacing my-service.company.tld in https mode the ssl certificates are served directly by our nginx ingress controller and the communication between the nginx ingress controller and our backend service ‚Äúexample-htts-bridging‚Äù is encrypted too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nginx-tips"&gt;
  &lt;/a&gt;
  Nginx tips
&lt;/h3&gt;

&lt;p&gt;For the SSL mode nginx is acting as a layer 7 and layer 4 porxy, the nginx configurations to achieve this is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stream {
    map $ssl_preread_server_name $name {
        my-service.company.tld       backend-example-https_nginx;

    }

    # my-service.company.tld - ywy8bs1b6h8td118mkjrr70eq - HTTPS Passthrough
    upstream backend-example-https_nginx {
        server example-https_nginx:443;
    }

    proxy_protocol on;

    server {
        listen      443;
        proxy_pass  $name;
        ssl_preread on;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in the backend configuration we need to add this to the nginx config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;listen 443 ssl proxy_protocol;         
set_real_ip_from nginx-ingress_nginx; # &amp;lt;- name of our nginx ingress controller service
real_ip_header proxy_protocol;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>docker</category>
      <category>nginx</category>
      <category>ingresscontroller</category>
      <category>nginxingress</category>
    </item>
    <item>
      <title>Vue Academy #6: Async update queue</title>
      <author>CodeOz</author>
      <pubDate>Thu, 30 Sep 2021 15:38:06 +0000</pubDate>
      <link>https://dev.to/codeoz/vue-academy-6-async-update-queue-56k</link>
      <guid>https://dev.to/codeoz/vue-academy-6-async-update-queue-56k</guid>
      <description>&lt;p&gt;Vue performs DOM updates &lt;strong&gt;asynchronously&lt;/strong&gt;! But what does mean?&lt;/p&gt;

&lt;p&gt;I will begin by explain you what is going on if we don't use an async update queue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#normal-case"&gt;
  &lt;/a&gt;
  Normal case
&lt;/h3&gt;

&lt;p&gt;Imagine that we have an array and we show it into the DOM, each time we push a new item, we will render the DOM.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bZDREKME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xzl6z1dxdieaqcoptlvc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bZDREKME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xzl6z1dxdieaqcoptlvc.jpg" alt="Dessin sans titre"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's not really dramatic if we only add some items. But imagine if we decide to add 1000 items in this array at the same moment, we will render our DOM 1000 times! Your DOM will explode ü§Ø.&lt;/p&gt;

&lt;p&gt;We don't really need to update the DOM 1000 times, we only need one time, and we should only update it when we finish to add all items!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#async-update-queue"&gt;
  &lt;/a&gt;
  Async update queue
&lt;/h3&gt;

&lt;p&gt;Vue performs DOM updates &lt;strong&gt;asynchronously&lt;/strong&gt;. Whenever a data &lt;strong&gt;change&lt;/strong&gt; is observed (in our case, adding item into our array), it will &lt;strong&gt;NOT&lt;/strong&gt; directly update the DOM, it will add all change into a queue (buffer).&lt;/p&gt;

&lt;p&gt;It wait a few time (time needed to add all items to our array) and after this it will update the DOM. So we add 1000 items but we will update the DOM only &lt;strong&gt;ONE TIME!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZM9ARdJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgfi28fb6ol5h8ypdvkh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZM9ARdJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgfi28fb6ol5h8ypdvkh.jpg" alt="Dessin sans titre (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This buffered de-duplication is important in avoiding unnecessary calculations and DOM manipulations.&lt;/p&gt;

&lt;p&gt;The moment when the queue will update the DOM is called a &lt;code&gt;tick&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;In general we don't need to careful about this, except if we need to do some &lt;strong&gt;action depending&lt;/strong&gt; on the DOM State. But it's not really recommended to base your action on DOM state, we recommend you to &lt;strong&gt;use component state&lt;/strong&gt; instead of &lt;strong&gt;DOM state.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"example"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ message }}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;el&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// change data, but vue will not re-render immediately !&lt;/span&gt;

&lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// false since the update is in the Queue, and not updated for the moment in the DOM&lt;/span&gt;

&lt;span class="c1"&gt;// NextTick is the moment where the Queue update all changed !&lt;/span&gt;
&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextTick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The DOM is update with the new change!&lt;/span&gt;
  &lt;span class="nx"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also use &lt;code&gt;await this.$nextTick()&lt;/code&gt; instead of callback!&lt;/p&gt;

&lt;p&gt;In some &lt;code&gt;test case&lt;/code&gt; you should need to check if your value is updated in the DOM, in this case you will need to use &lt;code&gt;nextTick&lt;/code&gt; before checking this update!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion-or-tldr"&gt;
  &lt;/a&gt;
  Conclusion or TLDR
&lt;/h3&gt;

&lt;p&gt;Async render queue allow vue to update the DOM only after a moment called &lt;code&gt;tick&lt;/code&gt;, it permit to avoid unneeded updated to the DOM.&lt;/p&gt;

&lt;p&gt;When you need to &lt;strong&gt;check a value in the DOM&lt;/strong&gt; (not recommended), you need to wait the &lt;code&gt;nextTick&lt;/code&gt; before checking the value in the DOM, otherwise the value will &lt;strong&gt;be not updated&lt;/strong&gt; at this moment!&lt;/p&gt;




&lt;p&gt;I hope you like this reading!&lt;/p&gt;

&lt;p&gt;üéÅ You can get my new book &lt;code&gt;Underrated skills in javascript, make the difference&lt;/code&gt; for FREE if you follow me on &lt;a href="https://twitter.com/code__oz"&gt;Twitter&lt;/a&gt; and MP me üòÅ&lt;/p&gt;

&lt;p&gt;Or get it &lt;a href="https://codeoz.gumroad.com/l/RXLYp"&gt;HERE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üéÅ &lt;a href="https://www.getrevue.co/profile/code__oz"&gt;MY NEWSLETTER&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚òïÔ∏è You can &lt;a href="https://www.buymeacoffee.com/CodeoZ"&gt;SUPPORT MY WORKS&lt;/a&gt; üôè&lt;/p&gt;

&lt;p&gt;üèÉ‚Äç‚ôÇÔ∏è You can follow me on üëá&lt;/p&gt;

&lt;p&gt;üïä Twitter : &lt;a href="https://twitter.com/code__oz"&gt;https://twitter.com/code__oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üë®‚Äçüíª Github: &lt;a href="https://github.com/Code-Oz"&gt;https://github.com/Code-Oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can mark üîñ this article!&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Monitoring consumer lag in Azure Event Hub</title>
      <author>üá∑|üá∫|üáß|üá™|üá≥</author>
      <pubDate>Thu, 30 Sep 2021 15:25:37 +0000</pubDate>
      <link>https://dev.to/rubenoostinga/monitoring-consumer-lag-in-azure-event-hub-dp5</link>
      <guid>https://dev.to/rubenoostinga/monitoring-consumer-lag-in-azure-event-hub-dp5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h2&gt;

&lt;p&gt;Consumer lag is the most important metric to monitor when working with event streams. However, it is not available as a default metric in Azure Insights. Want to have this metric available as part of your monitoring solution? You can set it up with some custom code. In this blog we show you how. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What
&lt;/h2&gt;

&lt;p&gt;Consumer lag refers to the number of events that still need to be processed by the consumers of a stream. Consumer lag will be 0 most of the time, as every event is consumed immediately. However, there are a few events that can cause that number to rise.  When a consumer runs into errors, like a functional issue caused by an event or a technical issue like network connectivity, it'll stop consuming events, increasing the consumer lag. &lt;/p&gt;

&lt;p&gt;The lag will also increase if events are published faster than the consumer can process them. In that case, the problem will resolve itself when events are published at a lower rate, and the consumer catches up again. &lt;/p&gt;

&lt;p&gt;You can trigger an alert when the consumer lag exceeds 0 for an extended period, like 10 minutes. What the best alert trigger configuration is for you depends on your situation. Before we continue to the solution, let's clarify some terms: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definitions"&gt;
  &lt;/a&gt;
  Definitions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-features#consumer-groups"&gt;Consumer groups&lt;/a&gt; enable multiple consumers to subscribe to the same event stream. Typically, a consumer group consists of multiple instances of the same application, that can be used for high availability and horizontal scaling.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-features#partitions"&gt;Partitions&lt;/a&gt; enable events to be processed in parallel. All events within a partition have a fixed order. Events in different partitions can be received out of order because they are processed in parallel. A consuming application can have multiple instances that can each read from multiple partitions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-features#namespace"&gt;Namespace&lt;/a&gt; is a collection of event hubs/topics that can be managed together.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-features#checkpointing"&gt;Checkpoints&lt;/a&gt; records the sequence number of the last consumed event. This value is used to ensure that, in the event of a restart, only the events that have not been consumed yet are resent. Typically, checkpoints are stored as a file in BlobStorage. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h2&gt;

&lt;p&gt;The Azure SDK can &lt;a href="https://docs.microsoft.com/en-us/javascript/api/@azure/event-hubs/eventhubconsumerclient?view=azure-node-latest#getPartitionProperties_string__GetPartitionPropertiesOptions_"&gt;retrieve the sequence number of the last enqueued event of a partition&lt;/a&gt;. With the &lt;a href="https://docs.microsoft.com/en-us/javascript/api/@azure/event-hubs/checkpointstore?view=azure-node-latest"&gt;CheckpointStore&lt;/a&gt; you can &lt;a href="https://docs.microsoft.com/en-us/javascript/api/@azure/event-hubs/checkpointstore?view=azure-node-latest#listCheckpoints_string__string__string__OperationOptions_"&gt;retrieve the sequence number of the checkpoint&lt;/a&gt;. Since both are simple counters you can calculate the difference and &lt;a href="https://docs.microsoft.com/en-us/azure/azure-monitor/app/nodejs#telemetryclient-api"&gt;publish this as a custom metric in azure insights&lt;/a&gt;. In order to make it a metric you can monitor, you will have to collect the metric periodically, let‚Äôs say, every minute.&lt;/p&gt;

&lt;p&gt;There are two ways to collect the consumer lag metric:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using the consumer application provides you with the Event Hub credentials, namespace, and consumer group. However, if something goes wrong and the consuming application shuts down, you'll no longer see if consumer lag rises because this information is not collected anymore. Use a separate process for monitoring to prevent this from happening.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Alternatively, alert the application failing its health check or the consumer lag metric being missing. The code examples below are in Typescript for conciseness. But the same approach can be used with the other Event Hub SDKs, like for C#, Java, Python, Go. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#collecting-the-consumer-lag"&gt;
  &lt;/a&gt;
  Collecting the consumer lag
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// initialize checkpointStore and eventHubClient&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;consumerGroup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my consumer group&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkpointStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eventHubClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;// Send the consumer lag every minute&lt;/span&gt;
&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;measureConsumerLag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;consumerGroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;checkpointStore&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The Event Hub Consumer Lag could not be sent to Application Insights&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;60000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;measureConsumerLag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;consumerGroup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EventHubConsumerClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;checkpointStore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BlobCheckpointStore&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;partitionIds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPartitionIds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// Should return either 0 or 1 checkpoint per partition&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkpoints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;checkpointStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listCheckpoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullyQualifiedNamespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventHubName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;consumerGroup&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkpointSequenceNumberByPartitionId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromEntries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;checkpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;partitionId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sequenceNumber&lt;/span&gt; &lt;span class="p"&gt;}):&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;partitionId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sequenceNumber&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;partitionIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;partitionId&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastKnownSequenceNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;checkpointSequenceNumberByPartitionId&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;partitionId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;lastEnqueuedSequenceNumber&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPartitionProperties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;partitionId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;consumerLageMetric&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;eventHubName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventHubName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;consumerGroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;partitionId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;eventHubClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullyQualifiedNamespace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="c1"&gt;// The consumerLag calculation&lt;/span&gt;
        &lt;span class="na"&gt;consumerLag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lastEnqueuedSequenceNumber&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;lastKnownSequenceNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;trackEventHubConsumerLag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;consumerLageMetric&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sending-the-custom-metric"&gt;
  &lt;/a&gt;
  Sending the custom metric
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defaultClient&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;appInsightsClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;applicationinsights&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ConsumerLagMetric&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;eventHubName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;consumerGroup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;partitionId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;consumerLag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;trackEventHubConsumerLag&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;eventHubName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;consumerGroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;partitionId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;consumerLag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;ConsumerLagMetric&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;trackMetric&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Event Hub Consumer Lag&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;consumerLag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// Format property keys with a space, for readability in the Application Insights metrics dashboard&lt;/span&gt;
    &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Event Hub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;eventHubName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Partition Id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;partitionId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Consumer Group&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;consumerGroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;Namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#viewing-the-custom-metric"&gt;
  &lt;/a&gt;
  Viewing the custom metric
&lt;/h2&gt;

&lt;p&gt;In the Application Insights console, you‚Äôll find your custom metric, split the chart by "Consumer Group", which represents an application. Depending on the zoom level the chart will show multiple measurements per datapoint. Usethe aggregation "Max" to get the best line. &lt;/p&gt;

&lt;p&gt;This chart shows 3 microservices where 1 service is stuck processing an event. Whenever new events are published the consumer lag will increase. The events are published in bursts, so the consumer lag will increase in distinct increments. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IzQA9s_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkjx6cc8d2183vu11vmw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IzQA9s_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkjx6cc8d2183vu11vmw.png" alt="A chart with a climbing line"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When an issue is solved, the consumer lag will drop quickly. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MNnV0Uwb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxt55f0e8rddst9n7vrm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MNnV0Uwb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxt55f0e8rddst9n7vrm.png" alt="A chart with a line that quickly reaches a plateau and then drops"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Consumer lag will quickly show any functional or technical issue with your event stream. By using the code examples from this blogpost, you can avoid having to dive into the SDKs yourself. Of course, you can adopt the metric collection to send the metric to the logs or to another metrics system like &lt;a href="https://github.com/siimon/prom-client"&gt;prometheus&lt;/a&gt;, &lt;a href="https://docs.datadoghq.com/api/latest/metrics/#submit-metrics"&gt;datadog&lt;/a&gt;, or &lt;a href="https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-metrics-base"&gt;open telemetry&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;After collecting the metric, the next step is to create &lt;a href="https://docs.microsoft.com/en-us/azure/azure-monitor/alerts/alerts-metric"&gt;metric based alerts&lt;/a&gt; to ensure you detect the issues before your customer does! &lt;/p&gt;

</description>
    </item>
    <item>
      <title>AWS - NLP newsletter - 2021. Sep.</title>
      <author>Jo√£o Moura</author>
      <pubDate>Thu, 30 Sep 2021 15:24:09 +0000</pubDate>
      <link>https://dev.to/aws/aws-nlp-newsletter-2021-sep-34o2</link>
      <guid>https://dev.to/aws/aws-nlp-newsletter-2021-sep-34o2</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QlQ0hJCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zp6oesygzu431ar44wcb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QlQ0hJCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zp6oesygzu431ar44wcb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello world. This is the second monthly Natural Language Processing(NLP) newsletter, covering everything related to NLP at AWS, and more. Feel free to leave comments, or share on your social network. Let's dive in!  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#aws-nlp-services"&gt;
  &lt;/a&gt;
  AWS NLP Services
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#feature-releases"&gt;
  &lt;/a&gt;
  Feature Releases
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/aws/amazon-textract-updates-up-to-32-price-reduction-in-8-aws-regions-and-up-to-50-reduction-in-asynchronous-job-processing-times/"&gt;&lt;strong&gt;Amazon Textract announcements price reductions, reduction in processing time for asynchronous operations up to 50% worldwide, US FedRAMP authorization&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
The usage of the AnalyzeDocument and DetectDocumentText API‚Äôs in eight AWS regions will now be billed at the same rates as prices in the US East (N.Virginia) region (not inclusive of the recently launched &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/07/amazon-textract-announces-specialized-support-automated-processing-invoices-receipts/"&gt;AnalyzeExpense API&lt;/a&gt;), posing a price reduction of up to 32%. Based on costumer feedback, enhancements made to Textract‚Äôs asynchronous operations reduced latency by as much as 50 percent worldwide. Finally, Textract achieved US FedRAMP authorization and added IRAP compliance support. &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/08/amazon-textract-reduced-pricing-analyzedocument-detectdocumenttext-region-expansion/"&gt;What‚Äôs New&lt;/a&gt;, &lt;a href="https://aws.amazon.com/blogs/aws/amazon-textract-updates-up-to-32-price-reduction-in-8-aws-regions-and-up-to-50-reduction-in-asynchronous-job-processing-times/"&gt;AWS News Blog&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/what-is.html"&gt;Documentation&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/08/amazon-transcribe-speech-text-new-languages/"&gt;&lt;strong&gt;Amazon Transcribe adds support for 6 new languages&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/09/amazon-lex-launches-support-korean/"&gt;&lt;strong&gt;Amazon Lex adds support for Korean&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Amazon Transcribe now supports batch transcription in six new languages - Afrikaans, Danish, Mandarin Chinese (Taiwan), Thai, New Zealand English, and South African English. Additionally, Amazon Lex it has just added support for Korean. &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/08/amazon-transcribe-speech-text-new-languages/"&gt;What‚Äôs New (Transcribe)&lt;/a&gt;, &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/09/amazon-lex-launches-support-korean/"&gt;What‚Äôs New (Lex)&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/transcribe/latest/dg/transcribe-whatis.html"&gt;Transcribe Documentation&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/lexv2/latest/dg/what-is.html"&gt;Lex Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/transcribe/latest/dg/subtitles.html"&gt;&lt;strong&gt;Amazon Transcribe can now generate subtitles for your video files&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Amazon Transcribe now supports the generation of WebVTT (*.vtt) and SubRip (.srt) output for use as video subtitles during a batch transcription job. You can select one or both options when you submit the job, and the resultant subtitle files are generated in the same destination as the underlying transcription output file. Find more details in the title link above.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/09/amazon-transcribe-pii-streaming-transcriptions/"&gt;&lt;strong&gt;Amazon Transcribe now supports redaction of personal identifiable information (PII) for streaming transcriptions&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
You can now use Amazon Transcribe to automatically identify and redact PII - such as Social Security numbers, credit card/bank account information, and contact information (i.e. name, email address, phone number and mailing address) - from your streaming transcription results. In addition, granular PII categories are now provided, instead of the unique [PII] tag available when redacting PII in a batch transcription job. With this new feature, companies can provide their contact center agents with valuable transcripts for on-going conversation while maintaining privacy standards. &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/09/amazon-transcribe-pii-streaming-transcriptions/"&gt;What‚Äôs New&lt;/a&gt;, &lt;a href="https://aws.amazon.com/blogs/machine-learning/introducing-pii-identification-and-redaction-in-streaming-transcriptions-using-amazon-transcribe/"&gt;AWS ML Blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/09/amazon-comprehend-extract-entities-native-format/"&gt;&lt;strong&gt;Extract custom entities from documents in their native format with Amazon Comprehend&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Amazon Comprehend now allows you to extract custom entities from documents in a variety of formats (PDF, Word, plain text) and layouts (e.g., bullets ,lists). Prior to this announcement, you could only use Comprehend on plain text documents, which required you to flatten documents into machine-readable text; this feature combines the power of NLP and Optical Character Recognition (OCR) to extract custom entitities from your documents using the same API and with no preprocessing required. &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/09/amazon-comprehend-extract-entities-native-format/"&gt;What‚Äôs New&lt;/a&gt;, &lt;a href="https://aws.amazon.com/blogs/machine-learning/extract-custom-entities-from-documents-in-their-native-format-with-amazon-comprehend/"&gt;Getting Started (blog)&lt;/a&gt;, &lt;a href="https://aws.amazon.com/blogs/machine-learning/custom-document-annotation-for-extracting-named-entities-in-documents-using-amazon-comprehend/"&gt;Document Annotation for new feature (blog)&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blog-postsdemos"&gt;
  &lt;/a&gt;
  Blog posts/demos
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/machine-learning/transcribe-class-lectures-accurately-using-amazon-transcribe-with-custom-language-models/"&gt;&lt;strong&gt;Boost transcription accuracy of class lectures with custom language models for Amazon Transcribe&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Practical example of how training a custom language model in Amazon Transcribe can help improve transcription accuracy on difficult specialized topics, such as biology lectures.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HtvNMiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4g5873kyisq6cibxkrr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HtvNMiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4g5873kyisq6cibxkrr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read more about how to leverage custom language models in the &lt;a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-language-models.html"&gt;Transcribe documentation&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#nlp-on-amazon-sagemaker"&gt;
  &lt;/a&gt;
  NLP on Amazon SageMaker
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#feature-releases"&gt;
  &lt;/a&gt;
  Feature Releases
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/09/amazon-sagemaker-studio-inference-endpoint-testing/"&gt;&lt;strong&gt;Amazon SageMaker now supports inference endpoint testing from SageMaker Studio&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Once a model is deployed to Amazon SageMaker, customers can get predictions from their models deployed on SageMaker real-time endpoints. Previously, customers used third-party tooling such as curl or wrote code in Jupyter Notebooks to invoke the endpoints for inference. Now, customers can provide a JSON payload, send the inference request to the endpoint, and receive results directly from SageMaker Studio. The results are displayed directly in SageMaker Studio and can be downloaded for further analysis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/machine-learning/announcing-the-amazon-s3-plugin-for-pytorch/"&gt;&lt;strong&gt;Amazon S3 plugin for PyTorch&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
This is an open-source library, built to be used with the deep learning framework PyTorch for streaming data with Amazon S3. This feature is also available in PyTorch Deep Learning Containers, and with it you can take advantage of using data from S3 buckets directly with PyTorch dataset and dataloader API‚Äôs without needing to download it first on local storage. &lt;a href="https://aws.amazon.com/blogs/machine-learning/announcing-the-amazon-s3-plugin-for-pytorch/"&gt;AWS ML Blog&lt;/a&gt;, &lt;a href="https://github.com/aws/amazon-s3-plugin-for-pytorch"&gt;Plugin Github&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blog-postsdemos"&gt;
  &lt;/a&gt;
  Blog posts/demos
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/aws-samples/detecting-data-drift-in-nlp-using-amazon-sagemaker-custom-model-monitor"&gt;&lt;strong&gt;Detecting Data Drift in NLP using SageMaker Custom Model Monitor&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Detecting data drift in NLP is a challenging task. Model monitoring becomes an important aspect in MLOPS, because the change in data distribution from the training corpus to real-world data at inference time can cause model performance decay. This distribution shift is called data drift. This demo focuses on detecting that drift, making use of the custom monitoring capabilities of SageMaker Model Monitor.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#upcoming-events"&gt;
  &lt;/a&gt;
  Upcoming events
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.nlpsummit.org/nlp-2021/"&gt;&lt;strong&gt;NLP Summit 2021&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Oct 05-07, 2021 &lt;br&gt;
Join the NLP Summit: two weeks of immersive, industry-focused content. Week one will include over 30 unique sessions, with a special track on NLP in Healthcare. Week two will feature beginner to advanced training workshops with certifications. Attendees can also participate in coffee chats with speakers, committers, and industry experts. &lt;a href="https://www.nlpsummit.org/nlp-2021/"&gt;Registration&lt;/a&gt; is free.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-startuploft-emea.com/e/dcb4f/aws-startup-accelerate-start-your-nlp-journey-on-aws-level-200-300"&gt;&lt;strong&gt;AWS Startup Accelerate: Start your NLP journey on AWS&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Oct 11, 2021 &lt;br&gt;
AWS will be running a Technical talk on "Starting your NLP journey with AWS". Based on feedback from lead NLP ML Core startups, we see that developing NLP models is a complex and costly process, which is why we‚Äôd like to engage with Data Scientists and ML engineers to help them in their adoption journey. We would love to have you there! Register &lt;a href="https://aws-startuploft-emea.com/e/dcb4f/aws-startup-accelerate-start-your-nlp-journey-on-aws-level-200-300"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#miscellaneous"&gt;
  &lt;/a&gt;
  Miscellaneous
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ü§ó HuggingFace: Hardware Partner Program, Optimum, and Infinity&lt;/strong&gt;&lt;br&gt;
A trio of announcements for HuggingFace this month:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hugging Face has launched a &lt;a href="https://huggingface.co/blog/hardware-partners-program"&gt;Hardware Partner Program&lt;/a&gt;, partnering with AI Hardware accelerators to make state of the art production performance accessible with Transformers.&lt;/li&gt;
&lt;li&gt;In this context, HuggingFace has released &lt;a href="https://huggingface.co/hardware"&gt;Optimum&lt;/a&gt;, an ML optimization toolkit, which enables maximum efficiency to train and run models on specific hardware. As of today, you can use it to easily prune and/or quantize Transformer models for Intel Xeon CPU‚Äôs using Intel Low Precision Optimization Tool (LPOT), and later this year the first models &lt;a href="https://huggingface.co/blog/graphcore"&gt;optimized for GraphCore‚Äôs Intelligence Processing Unit (IPU)&lt;/a&gt; will be added.&lt;/li&gt;
&lt;li&gt;Finally, &lt;a href="https://huggingface.co/infinity"&gt;Infinity&lt;/a&gt; - HugginFace‚Äôs enterprise-scale inference solution - was officially announced on September 28th, comprised of a containerized solution which promises Transformers‚Äô accuracy at 1ms latency.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>nlp</category>
      <category>machinelearning</category>
      <category>ai</category>
    </item>
    <item>
      <title>Using Helm with GitOps</title>
      <author>Hannah</author>
      <pubDate>Thu, 30 Sep 2021 15:15:45 +0000</pubDate>
      <link>https://dev.to/codefreshio/using-helm-with-gitops-2had</link>
      <guid>https://dev.to/codefreshio/using-helm-with-gitops-2had</guid>
      <description>&lt;p&gt;&lt;span&gt;This is the first of many posts highlighting GitOps topics that we‚Äôll be exploring. Within this post, we will explore Helm, a tool used for Kubernetes package management, that also provides templating. Helm provides utilities that assist Kubernetes application deployment.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;In order to better understand how Helm charts are mapped to Kubernetes manifests, we‚Äôll explain more details below and how to use Helm with and without GitOps.&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;What is Kubernetes?&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/"&gt;&lt;span&gt;Kubernetes&lt;/span&gt;&lt;/a&gt;&lt;span&gt; is an orchestrator for containers that allows you to automate scheduling, deployments, networking, scaling, and health monitoring for the containers.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Kubernetes was needed because we increased the usage of the following:&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;span&gt;Microservices&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;&lt;span&gt;Containers&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span&gt;This was difficult to manage with scripts and self-made tools and caused the need for orchestration technology like Kubernetes. It provides features like scalability, disaster recovery, and less downtime.&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;What is Helm?&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://helm.sh/"&gt;&lt;span&gt;Helm&lt;/span&gt;&lt;/a&gt;&lt;span&gt; is a package manager for Kubernetes. It‚Äôs a convenient way for packaging collections of YAML files with a Helm chart for the Kubernetes application and allowing distribution with a Helm repository.¬†&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Maintaining Kubernetes manifests is time-consuming and tedious and this is why Helm is helpful!&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;Helm Charts&lt;/h4&gt;

&lt;p&gt;&lt;span&gt;Helm Charts are deployable units for Kubernetes applications. These charts are a collection of files inside a directory. This directory is the name of the Helm chart and consists of a self-descriptor file, YAML file, and one or more Kubernetes manifests. Helm charts are typically written in the &lt;/span&gt;&lt;a href="https://pkg.go.dev/text/template"&gt;&lt;span&gt;Go template language&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. Charts are created as such files, describing a related set of Kubernetes resources. Here‚Äôs an example of a Helm chart directory and it‚Äôs layout:&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codefresh.io/wp-content/uploads/2021/09/helm-chart-example.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7aUwuGjz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codefresh.io/wp-content/uploads/2021/09/helm-chart-example.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;This particular directory contains a &lt;/span&gt;&lt;span&gt;Chart.yaml&lt;/span&gt;&lt;span&gt; file and this is where the global variables, versions, and descriptions are stored. Then, the templates directory is what contains the YAML files for Kubernetes, otherwise known as the Kubernetes manifests.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Files such as the &lt;/span&gt;&lt;span&gt;deployment&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;service&lt;/span&gt;&lt;span&gt;, and &lt;/span&gt;&lt;span&gt;ingress&lt;/span&gt;&lt;span&gt; files contain variables from the &lt;/span&gt;&lt;span&gt;values.yaml&lt;/span&gt;&lt;span&gt; file when the chart is deployed. The &lt;/span&gt;&lt;span&gt;_helpers.tpl&lt;/span&gt;&lt;span&gt; incorporates helpful functions for variable calculations.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;You can then share the Helm chart to increase easy reusability for others to use. Sharing is done by storing the chart to a Helm repository. This repository can then be shared with others to deploy the application with the chart.&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;Helm Repositories&lt;/h4&gt;

&lt;p&gt;&lt;span&gt;Helm supports a chart repository service that can be used to store the Helm charts. You can use any web server host or source code host for the Helm repository.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;The repository has an &lt;/span&gt;&lt;span&gt;index.yaml&lt;/span&gt;&lt;span&gt; file that contains metadata about the package, including the &lt;/span&gt;&lt;span&gt;Chart.yaml&lt;/span&gt;&lt;span&gt; file. The index will contain information about each Helm chart in the chart repository. Then the server can serve your index and charts or the packages can be stored in the repository for shareable access.&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;Helm Release&lt;/h4&gt;

&lt;p&gt;&lt;span&gt;Each install or upgrade will create a Helm release. A Helm release is a running instance of your Helm chart running within a Kubernetes cluster or a namespace. It‚Äôs essentially an instance of a versioned, templated chart. &lt;/span&gt;&lt;span&gt;It‚Äôs also possible to have multiple releases of the same chart in a single cluster or namespace since the chart is self-contained. You can also roll back a Helm release to a previous version in case there are any failures.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codefresh.io/wp-content/uploads/2021/09/Helm-WF.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvmuQXL2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codefresh.io/wp-content/uploads/2021/09/Helm-WF-1024x632.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Assuming you‚Äôre a developer with an existing cluster, perhaps you‚Äôd like to share your Helm application with an external vendor. Let's recap the Helm workflow and release process:&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;
&lt;span&gt;To share an application with others, you need to create a Helm chart. The chart is a package that contains templates for a set of resources necessary for the application. The template uses variables applied to the &lt;/span&gt;&lt;span&gt;Values.yaml&lt;/span&gt;&lt;span&gt; file when the manifest is created and describes how to configure the resources.&lt;/span&gt;
&lt;/li&gt;
    &lt;li&gt;&lt;span&gt;The Helm charts are then hosted within a repository that can then be downloaded or accessed from a server. This chart will contain all the necessary resource definitions needed for the developer to run an application.&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;&lt;span&gt;Now that you have access to the cluster, you can add new features or bug fixes to the application and update the Helm chart. Helm offers useful tools to manage your releases. You can upgrade the chart and create a new deployment. In Helm a deployed instance of your application is referred to as the release.¬†&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;&lt;span&gt;You can now deploy your packaged application to the cluster.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span&gt;Within this workflow we identified how Helm packages files and deploys them to a cluster. So, how do you apply GitOps to the workflow above? Let‚Äôs explore this below...&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;What is GitOps?&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codefresh.io/gitops/"&gt;&lt;span&gt;GitOps&lt;/span&gt;&lt;/a&gt;&lt;span&gt; is a paradigm that incorporates best practices applied to the application development workflow all the way to the operating infrastructure of a system.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Some benefits of GitOps are:&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;span&gt;Deploying faster and more often&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;&lt;span&gt;Easier and quicker error handling and recovery&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;&lt;span&gt;Self documenting deployments&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;&lt;span&gt;Increased developer productivity and an enhanced experience for teams&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;&lt;span&gt;Greater visibility on the lifecycle of developed features&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span&gt;These benefits make it easier to handle the applications and allow teams to deliver quality software faster.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;GitOps relies on Git as the single source of truth for declarative configuration and active reconciliation. By adopting the GitOps methodology it provides transparency between the application configuration deployed in a cluster and the one residing in Git.¬†&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;A GitOps tool that follows this approach of a Git-based workflow is Argo CD. It‚Äôs a continuous delivery tool for Kubernetes that is essentially a GitOps controller that does two-way synchronization. Argo continuously monitors running applications and compares the live state against the desired state in Git and applies it to the cluster. In addition, it also monitors the container registry for new images and updates the workload definitions based on the deployment policies.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;We will mention Argo CD again in this post and can assume that it‚Äôs already been installed and implemented within our workflow!&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;GitOps works with all of your existing tools&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;Now that you have a good understanding of what Helm is and it‚Äôs capabilities, perhaps you‚Äôve considered applying GitOps to your existing or future applications.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Let‚Äôs explore the various approaches of how to use GitOps with or without Helm:&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;&lt;span&gt;Using only Helm (without GitOps)&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;&lt;span&gt;Using GitOps (without Helm)&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;&lt;span&gt;Using Helm with GitOps&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span&gt;If you‚Äôd like to explore these different approaches from a code-base perspective, here is an &lt;/span&gt;&lt;a href="https://github.com/codefresh-contrib/helm-gitops-example/blob/main/README.md"&gt;&lt;span&gt;example project&lt;/span&gt;&lt;/a&gt;&lt;span&gt; that you should check out on GitHub that digs deeper into how you can:&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;span&gt;Install an application with Helm and deploy locally&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;&lt;span&gt;Install an application with Argo CD and deploy locally both within the UI and command line&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span&gt;If not, then we‚Äôll be sure to highlight these approaches below!&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;Approach #1: Using only Helm without GitOps&lt;/h4&gt;

&lt;p&gt;&lt;span&gt;If you want to use Helm but your organization isn‚Äôt quite ready to implement the GitOps workflow, that‚Äôs perfectly fine. Helm was created before the GitOps methodology came to fruition, but can still work with GitOps (as we will see in the latter point).&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;The workflow allows you to search through Helm repositories for charts and install them to clusters, creating releases. This process enables execution of application deployments on a cluster. The maintenance of YAML manifests for Kubernetes objects is still the same as before. Helm releases are what keeps track of the version history of each chart installation and change and still allows rolling back to the previous cluster version. When installing a chart it creates a release of the new package and it‚Äôs the Helm release that deploys the Helm application.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;When using Helm there are some powerful commands you will find useful, please see below.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;To install a new package:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;helm install &amp;lt;release_name&amp;gt; &amp;lt;name_of_chart_you_want_to_install&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;To view currently deployed releases:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;helm list&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;helm ls&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;To view revision numbers for a particular release:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;helm history &amp;lt;release_name&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;span&gt;To learn more details about these commands and how to use them, reference the &lt;/span&gt;&lt;a href="https://github.com/codefresh-contrib/helm-gitops-example/blob/main/README.md"&gt;&lt;span&gt;example project&lt;/span&gt;&lt;/a&gt;&lt;span&gt; in GitHub.&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;Approach #2: Using GitOps without Helm&lt;/h4&gt;

&lt;p&gt;&lt;span&gt;If you‚Äôre sold on the idea of GitOps, there are alternative tools that can be used if you‚Äôre unable to use Helm or choose not to. &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;You can use ArgoCD on its own. It is pretty flexible and can work with other templating solutions or even plain manifests. &lt;/span&gt;&lt;span&gt;Another templating tool that can be used instead of Helm is &lt;/span&gt;&lt;a href="https://kustomize.io/"&gt;&lt;span&gt;Kustomize&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. This tool is built into &lt;/span&gt;&lt;span&gt;&lt;code&gt;kubectl&lt;/code&gt;&lt;/span&gt;&lt;span&gt; and is native to Kubernetes. It allows you to customize Kubernetes configurations using only the Kubernetes API resource files.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Now, let‚Äôs explore our third approach about how to implement GitOps using Helm and Argo CD...&lt;/span&gt;&lt;/p&gt;

&lt;h4&gt;Approach #3: Using Helm with GitOps&lt;/h4&gt;

&lt;p&gt;&lt;span&gt;Now that you‚Äôve seen how GitOps can be applied without Helm, let‚Äôs explore how you can use it with Helm.¬†&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;First, the Helm chart and any application changes must be committed in Git prior to being applied to the cluster. Meaning all of your workload definitions in a YAML format, the Helm charts, and any other Kubernetes custom resources that define the cluster‚Äôs desired state must be committed to the repo. This way rollbacks and logs are accessible and the state of production can be restored easily.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Within Argo CD you can connect the Git repository using HTTPS and add the URL directly. This then allows you to enable auto-synchronization to automatically synchronize the cluster to the desired state in the Git repository. Once synced successfully, the application status is recognized as Healthy. Otherwise, if the application is OutOfSync, you can rollback or view the release history to resolve the issue.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Here‚Äôs an example of a Healthy application in the Argo CD UI.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codefresh.io/wp-content/uploads/2021/09/HelmGitOpsArgoUI.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uAY8MWTI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codefresh.io/wp-content/uploads/2021/09/HelmGitOpsArgoUI-1024x455.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;When the application is running you can view its resource components, logs, events, and the health status.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;For good measure, here‚Äôs a visual of the Argo CD UI exemplifying an OutOfSync application when the live state deviates from the target state.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codefresh.io/wp-content/uploads/2021/09/OutOfSyncArgoUI.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LGPGBVoD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codefresh.io/wp-content/uploads/2021/09/OutOfSyncArgoUI.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;If your application had an error or was OutOfSync like the example above, you could execute the argo history command that allows you to view the application deployment history:&lt;/span&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;argocd app history &amp;lt;argocd_app_name&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Then, if you need to rollback the deployment you can do so by executing this command:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;argocd app rollback &amp;lt;argocd_app_name&amp;gt; &amp;lt;history_id&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Essentially, these commands leverage a faster and more secure deployment, by enabling the tracking from the Git repository. It also allows you to track the active Kubernetes resources and events.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Therefore, using source control like this is what classifies this application deployment as GitOps!&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Something important to note is that Argo CD provides native support for Helm, meaning you can directly connect a packaged Helm chart and Argo CD will monitor it for new versions. When this takes place the Helm chart will no longer function as a Helm chart and instead, is rendered with the Helm template when Argo is installed, using the Argo CD application manifest.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Argo CD then deploys and monitors the application components until both states are identical. The application is no longer a Helm application and is now recognized as an Argo app and can only operate by Argo CD. Hence if you execute the &lt;/span&gt;&lt;span&gt;helm list&lt;/span&gt;&lt;span&gt; command, you should no longer be able to view your &lt;/span&gt;&lt;span&gt;helm release&lt;/span&gt;&lt;span&gt; because the Helm metadata no longer exists.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Here‚Äôs an example of the command output. As you can see, the Argo CD application is NOT detected as a Helm application.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codefresh.io/wp-content/uploads/2021/09/Empty-Helm-List.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8BudeOnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codefresh.io/wp-content/uploads/2021/09/Empty-Helm-List.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;Helm is a powerful tool that is used often with Kubernetes deployments and provides tracking for each release. This helps ensure reliable and quick deployments for development teams.¬†&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;So, if you‚Äôre completely new to Helm, I suggest referring to our documentation to learn more about it, here:¬†&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href="https://codefresh.io/helm-tutorial/helm-deployment-environments/"&gt;&lt;span&gt;Helm Deployment Environments&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://codefresh.io/docs/docs/new-helm/helm-best-practices/"&gt;&lt;span&gt;Helm Best Practices&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://codefresh.io/helm-tutorial/simplify-kubernetes-helm-deployments/"&gt;&lt;span&gt;How to Simplify your Kubernetes Helm Deployments&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span&gt;We'll discuss additional tools in our next post that can help you and your team continue implementing a GitOps process to your development and infrastructure systems.&lt;/span&gt;&lt;/p&gt;

</description>
      <category>gitops</category>
      <category>helm</category>
      <category>argocd</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>A WebRTC server in your browser (virtual server; private audio)</title>
      <author>jzombie</author>
      <pubDate>Thu, 30 Sep 2021 15:10:07 +0000</pubDate>
      <link>https://dev.to/jzombie/a-webrtc-server-in-your-web-browser-for-group-communications-5c6l</link>
      <guid>https://dev.to/jzombie/a-webrtc-server-in-your-web-browser-for-group-communications-5c6l</guid>
      <description>&lt;p&gt;&lt;a href="https://twitter.com/intent/tweet?text=Private%20audio%20chat%20rooms%20using%20your%20browser%20as%20a%20virtual%20server&amp;amp;url=https://github.com/zenOSmosis/speaker.app&amp;amp;hashtags=webrtc,audio,screensharing,virtual-server,group-chat,communications,private"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LAld9Qo9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/twitter/url/http/shields.io.svg%3Fstyle%3Dsocial" alt="tweet-url"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#speakerapp-zenrtc-phantom-server"&gt;
  &lt;/a&gt;
  Speaker.app / zenRTC / Phantom Server
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/zenOSmosis/speaker.app"&gt;Source Code available on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://speaker.app"&gt;Speaker.app&lt;/a&gt; is a &lt;a href="#whats-in-the-box"&gt;batteries-included&lt;/a&gt;, quasi-decentralized, alternative free speech audio platform that is compatible on any device that supports a modern web browser.&lt;/p&gt;

&lt;p&gt;Rather than a centralized server providing proxying of streams from each participant to other participants (i.e. an MCU / SFU), one can choose to host a network (or "room") where others can connect to, either publicly or privately.  The network hosting participant's web browser acts as the "server" for the other participants to connect to on the given network, and all proxying is done, including message storage and relaying, through that browser.&lt;/p&gt;

&lt;p&gt;Public networks are visible in a "network discovery" view, which serves as the default homepage for the application.&lt;/p&gt;

&lt;p&gt;No user accounts or passwords are required to join a public network, and user identities are generated using Ethereum, with a randomized user profile, by default.  Users can change their user profile to their liking, while their profile information is stored locally via local storage.&lt;/p&gt;

&lt;p&gt;To see it live, navigate to &lt;a href="https://speaker.app"&gt;https://speaker.app&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#speakerapp--zenrtc--phantom-server"&gt;Speaker.app / zenRTC / Phantom Server&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#table-of-contents"&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#browser-support-matrix"&gt;Browser Support Matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#whats-in-the-box"&gt;What's in the Box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#architecture-overview"&gt;Architecture Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conventional-webrtc-network-topologies"&gt;Conventional WebRTC Network Topologies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#speakerapp-peer-based-network-topology"&gt;Speaker.app Peer-Based Network Topology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#inspiration-to-create-this-project"&gt;Inspiration to Create this Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-started"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dependencies--system-requirements"&gt;Dependencies / System Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#building-and-running"&gt;Building and Running&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#public-network-discovery--private-networks"&gt;Public Network Discovery / Private Networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing"&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contributing--forking"&gt;Contributing / Forking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#troubleshooting--miscellaneous"&gt;Troubleshooting / Miscellaneous&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#invalid-mongodb-permissions-or-some-other-missing-environment-variable"&gt;Invalid MongoDB Permissions (or some other missing environment variable)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#invalid-elf-header-farmhash"&gt;Invalid Elf header (farmhash)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#error-enospc-system-limit-for-number-of-file-watchers-reached"&gt;Error: ENOSPC: System limit for number of file watchers reached&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#linux-check-cpu-speed"&gt;Linux check CPU speed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#auto-generate-markdown-table-of-contents"&gt;Auto-Generate Markdown Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#motto"&gt;Motto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#help-us-continue-writing-free-software"&gt;Help Us Continue Writing Free Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#browser-support-matrix"&gt;
  &lt;/a&gt;
  Browser Support Matrix
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Chrome&lt;/th&gt;
&lt;th&gt;Edge (Chromium)&lt;/th&gt;
&lt;th&gt;Firefox&lt;/th&gt;
&lt;th&gt;Safari&lt;/th&gt;
&lt;th&gt;IE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Android&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;‚úì&lt;/td&gt;
&lt;td&gt;‚úì&lt;/td&gt;
&lt;td&gt;‚úì&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;iOS&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;[transcoder host only]&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;‚úì&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;‚úì&lt;/td&gt;
&lt;td&gt;‚úì&lt;/td&gt;
&lt;td&gt;‚úì&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;macOS&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;‚úì&lt;/td&gt;
&lt;td&gt;‚úì&lt;/td&gt;
&lt;td&gt;‚úì&lt;/td&gt;
&lt;td&gt;‚úì&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;‚úì&lt;/td&gt;
&lt;td&gt;‚úì&lt;/td&gt;
&lt;td&gt;‚úì&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Note, on every OS except iOS, Chrome is the recommended browser;  On iOS, Safari should be used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-the-box"&gt;
  &lt;/a&gt;
  What's in the Box
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Frontend&lt;/strong&gt;:  Built with &lt;a href="https://github.com/facebook/create-react-app"&gt;create-react-app&lt;/a&gt;; state is managed with multiple Providers and accessible via useContext hooks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Backend:&lt;/strong&gt; Node.js app, using &lt;a href="https://github.com/socketio/socket.io"&gt;Socket.io&lt;/a&gt; and &lt;a href="https://github.com/expressjs/express"&gt;Express&lt;/a&gt;.  Cluster module is utilized to utilize multiple CPUs and a Redis store is utilize to scale Socket.io across the CPUs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt;: Utilized with &lt;a href="https://socket.io/docs/v4/redis-adapter"&gt;Socket.io's Redis adapter&lt;/a&gt; to provide scalability of Socket.io across a cluster of Node.js running in different processes or servers, so they can all communicate, broadcast, and emit events to and from one another.  &lt;em&gt;This is mostly used in conjunction with the signaling layer to initiate WebRTC sessions &amp;amp; media, and most private communication happens over WebRTC data channels.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MongoDB&lt;/strong&gt;: Network details (name, host, number of participants) are stored in &lt;a href="https://github.com/mongodb/mongo"&gt;MongoDB&lt;/a&gt;.  When in development mode, &lt;a href="https://github.com/mongo-express/mongo-express"&gt;Mongo Express&lt;/a&gt; is available at &lt;a href="http://localhost:8081"&gt;http://localhost:8081&lt;/a&gt;, and provides a web-based administrative interface.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's Encrypt&lt;/strong&gt;: Free SSL certificates are managed via the &lt;a href="https://github.com/linuxserver/docker-swag"&gt;linuxserver.io/docker-swag Docker&lt;/a&gt; image.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dev-ssl-proxy&lt;/strong&gt;: In development, a &lt;a href="https://github.com/zenOSmosis/docker-dev-ssl-proxy"&gt;self-signed SSL proxy&lt;/a&gt; is utilized in replacement of Let's Encrypt, to enable local development with SSL turned on (cam / mic / other HTML5-related APIs which require SSL by default).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coturn&lt;/strong&gt;: A &lt;a href="https://github.com/zenOSmosis/docker-coturn"&gt;STUN / TURN server&lt;/a&gt; for WebRTC NAT traversal is included in the Docker Compose configuration, but is not enabled by default.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Included WebRTC Experiments&lt;/strong&gt;: Within the source code are some previous real-time, shared experience experiments  such as a drum looper, a sound sampler (play piano / electric guitar w/ keyboard), text-to-speech, TensorFlow-based skeletal tracker, and a game emulator.&lt;/p&gt;

&lt;p&gt;These experiments are mostly dormant and commented-out, but have made for some interesting demos in the past and may be re-enabled in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#architecture-overview"&gt;
  &lt;/a&gt;
  Architecture Overview
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#conventional-webrtc-network-topologies"&gt;
  &lt;/a&gt;
  Conventional WebRTC Network Topologies
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5nuKuiv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/zenOSmosis/speaker.app/main/frontend.web/public/assets/network/mesh.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5nuKuiv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/zenOSmosis/speaker.app/main/frontend.web/public/assets/network/mesh.svg" alt="Mesh Network"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mesh network example. (Illustration borrowed from &lt;a href="https://www.npmjs.com/package/simple-peer"&gt;simple-peer&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Most group-based WebRTC calls, which don't have a centralized MCU /  SFU rely on each peer to send out an extra stream to multiple peer.  This is not very efficient as for every participant added, every device connected must send out additional streams.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZqlLXQMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/zenOSmosis/speaker.app/main/frontend.web/public/assets/network/sfu.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZqlLXQMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/zenOSmosis/speaker.app/main/frontend.web/public/assets/network/sfu.svg" alt="SFU"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Centralized MCU / SFU example.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;More advanced calling platforms utilize a centralized MCU / SFU.  While this is more efficient in terms of the network, additional considerations, and money, are needed in order to scale out the backend infrastructure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#speakerapp-peerbased-network-topology"&gt;
  &lt;/a&gt;
  Speaker.app Peer-Based Network Topology
&lt;/h3&gt;

&lt;p&gt;Using a topology similar to the MCU / SFU example above, Speaker.app attempts to solve the scalability issue without throwing a lot of extra money into hosting fees, by enabling individual participants to host their own networks, on their own hardware, using their own bandwidth, while at the same time providing greater privacy and flexibility.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;zenRTC&lt;/strong&gt; (built with simple-peer) is based on WebRTC, adding additional functionality such as user-level network strength indication, events over data channels, and P2P-based shared state syncing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phantom Server&lt;/strong&gt; is a network host which runs in your web browser, and acts as the host, shared state manager, proxy, and transcoder for all connected participants within a WebRTC network.&lt;/p&gt;

&lt;p&gt;Every participant connects to the Phantom Server via a P2P connection and Phantom Server handles the stream negotiations / network programming with the other peers.&lt;/p&gt;

&lt;p&gt;Speaker.app is able to provide a quasi-decentralized MCU / SFU by enabling clients to run them in their own browsers, as a virtual machine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;At the time of writing the Chrome on the Apple M1 processor is by far the most efficient for doing browser-based streaming transcoding, compared to a variety of Intel processors which have been tested on, though development has mostly been done on Intel processors / Linux.  ARM is the future, it seems.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Network hosting has also been tested on non-optimal hardware (i.e. 2018 Samsung J2; Intel i3) with adequate results for streaming 4K video streams to 4 participants.  Good hardware such as the new Apple M1 processor allows much greater yields, and better scalability.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inspiration-to-create-this-project"&gt;
  &lt;/a&gt;
  Inspiration to Create this Project
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;TLDR; Experimentation.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I was faced with a task for building a WebRTC bridge between two third party services in the virtual healthcare industry and after trying some various approaches, discovered that using a headless Chrome instance on the server was the path of least effort and less bugs to squash, though not necessarily being greatly efficient on its own.&lt;/p&gt;

&lt;p&gt;Running a headless Chrome instance on the server is very versatile, in being that you've got a really solid WebRTC implementation baked in, with the ability to mix audio and video streams using JavaScript and the real DOM.&lt;/p&gt;

&lt;p&gt;Wanting to continue pursuing the effort of a script-able WebRTC bridge using a web browser, and thinking of ways to potentially scale such a system, I made the decision to allow client-side devices to host these sessions, now no longer utilizing the headless Chrome instances as the main method of hosting sessions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NOTE: If you wish to host your own network (or room) you DO NOT HAVE TO DO this, and can instead go &lt;a href="https://speaker.app/setup/network/create"&gt;https://speaker.app/setup/network/create&lt;/a&gt; and create your own network!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The following is ONLY if you wish to host the entire infrastructure yourself.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dependencies-system-requirements"&gt;
  &lt;/a&gt;
  Dependencies / System Requirements
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;All environments require&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bash (Unix shell) &lt;em&gt;If running the included Bash build scripts&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Docker Compose&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Development environments require&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node.js 12+&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Recommended system requirements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The following should get the system up and running, though additional resources may be required for higher traffic environments.  Presumably, these minimum requirements should host at least several dozen people concurrently before needing to add more RAM.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2048 MB RAM &lt;em&gt;(1048 MAY work if Coturn server is hosted separately)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Two CPU cores &lt;em&gt;(one should work just fine for low traffic environments)&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#building-and-running"&gt;
  &lt;/a&gt;
  Building and Running
&lt;/h3&gt;

&lt;p&gt;Some Bash scripts have been provided to help facilitate the starting and stopping of the respective environments. It is recommended to use these scripts instead of calling the Docker commands directly, as they will provide supplemental environment variables as well as any additional build instructions.&lt;/p&gt;

&lt;p&gt;In development environments, most of the container volumes have a mount directly to the host so that the source code can be updated in the containers without rebuilding.  See the respective docker.compose*.yml configurations and corresponding Dockerfile files for more details.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Set up the environment&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Copy the sample environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cp&lt;/span&gt; .env.sample .env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then populate .env with the configuration relevant to your environment.&lt;/p&gt;

&lt;p&gt;Note that other environment variables are set within the docker-compose*.yml files and are intended to be considered static.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To build the Docker containers&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Note that development environments may require additional &lt;a href="#dependencies--system-requirements"&gt;dependencies&lt;/a&gt; to be installed. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;IMPORTANT: If you are using a shell other than Bash, the following scripts should be proceeded with the "bash" command (i.e. "bash ./build.prod.sh").&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./build.prod.sh &lt;span class="c"&gt;# Or ./build.dev.sh, depending on environment&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;To start the containers&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./start.prod.sh &lt;span class="c"&gt;# Or ./start.dev.sh, depending on environment&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;To stop the containers&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This stops the containers and tears down their temporary storage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./stop.sh &lt;span class="c"&gt;# Stops any environment&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#public-network-discovery-private-networks"&gt;
  &lt;/a&gt;
  Public Network Discovery / Private Networks
&lt;/h2&gt;

&lt;p&gt;Public networks can be discovered on the default home page.  Private networks do not appear in the public network discovery but can be accessed via URL or QR code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;p&gt;Testing can be performed by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./test.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note, development packages will be automatically installed locally when testing.&lt;/p&gt;

&lt;p&gt;At this time, testing is not fully automated.  Several internal utilities are tested using Jest (via the above command), while device-specific testing is performed manually using &lt;a href="https://www.browserstack.com"&gt;BrowserStack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.browserstack.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--leMtm_sR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/zenOSmosis/js-shell/raw/master/assets/BrowserStack-logo.svg" alt="BrowserStack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contributing-forking"&gt;
  &lt;/a&gt;
  Contributing / Forking
&lt;/h2&gt;

&lt;p&gt;Source-code contributions and forks are welcome!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/zenOSmosis/speaker.app/issues"&gt;Open an issue&lt;/a&gt; if you find something that needs to be addressed that you aren't going to address yourself.&lt;/p&gt;

&lt;p&gt;For ideas of what to contribute, take a look at our &lt;a href="https://github.com/zenOSmosis/speaker.app/issues"&gt;open issues&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To contribute, fork the repository, create a new branch, add some code or documentation updates, then submit a PR.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motto"&gt;
  &lt;/a&gt;
  Motto
&lt;/h2&gt;

&lt;p&gt;To contribute, however slightly, to the commonwealth of all human innovation and experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#help-us-continue-writing-free-software"&gt;
  &lt;/a&gt;
  Help Us Continue Writing Free Software
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;PayPal&lt;/strong&gt;: &lt;a href="https://www.paypal.com/paypalme/zenOSmosis"&gt;https://www.paypal.com/paypalme/zenOSmosis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Buy Me a Coffee&lt;/strong&gt;:  &lt;a href="https://www.buymeacoffee.com/Kg8VCULYI"&gt;https://www.buymeacoffee.com/Kg8VCULYI&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;&lt;a href="//LICENSE.txt"&gt;GNU GENERAL PUBLIC LICENSE&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/zenOSmosis/speaker.app"&gt;Source Code available on GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>docker</category>
      <category>webrtc</category>
      <category>node</category>
    </item>
    <item>
      <title>Instantly set up a new dev environment using containers and VS Code</title>
      <author>Yohan Lasorsa</author>
      <pubDate>Thu, 30 Sep 2021 15:00:11 +0000</pubDate>
      <link>https://dev.to/itnext/instantly-set-up-a-new-dev-environment-using-containers-and-vs-code-51g8</link>
      <guid>https://dev.to/itnext/instantly-set-up-a-new-dev-environment-using-containers-and-vs-code-51g8</guid>
      <description>&lt;p&gt;There are 3 things that make me waste a lot of time as a developer, and that can become a big source of frustration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set up a new development machine&lt;/li&gt;
&lt;li&gt;Manage and update my development environment to work on a project&lt;/li&gt;
&lt;li&gt;Reinstall everything again, because after many times installing and updating my dev tools everything broke :(&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What if I told you that we can avoid these issues, and that it's possible to perfectly isolate each of your projects' environment? And to be able to share and update it easily, to have nothing to do when a newcomer joins your project?&lt;/p&gt;

&lt;p&gt;It's now possible thanks to the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack&amp;amp;WT.mc_id=javascript-14373-yolasors"&gt;Remote Development extension&lt;/a&gt; for VS Code and containers. In this post, I'll show you how to set up a complete dev environment inside a container and use it with your projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr-key-takeaways"&gt;
  &lt;/a&gt;
  TL;DR key takeaways
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can quickly onboard a new developer in a project using dev containers, share it with your teammates, and update it with no hassle.&lt;/li&gt;
&lt;li&gt;While nothing prevents you from using Docker and any IDE to do the same thing, the Remote Development extension provides seamless integration with VS Code to bootstrap and work with dev containers.&lt;/li&gt;
&lt;li&gt;Dev containers also allow you to take your dev environment everywhere with online dev tools like &lt;a href="https://github.com/features/codespaces"&gt;GitHub Codespaces&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-developing-inside-a-container"&gt;
  &lt;/a&gt;
  Why developing &lt;em&gt;inside&lt;/em&gt; a container
&lt;/h2&gt;

&lt;p&gt;In every software project, the developer story is (almost) always the same:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"Hey, welcome to the team! We're all excited to have you on board!" üéâ&lt;/li&gt;
&lt;li&gt;"Here's the doc to set up your environment for the project. Let me know when you're ready!" (&lt;em&gt;spoiler alert:&lt;/em&gt; sometimes there's &lt;strong&gt;no doc&lt;/strong&gt; at all, and you'll have to ask your teammates to know what to install)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most likely, a few hours/days later, the outcome is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"Please help, I can't figure out why it's still not building/running properly" üòû&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jLLK5RDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/vscode/container-dev-env/assets/help.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jLLK5RDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/vscode/container-dev-env/assets/help.gif" alt='Animation showing developer saying "oh my god, I need help"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've been that developer. A few times already.&lt;/p&gt;

&lt;p&gt;After a while of spending time reviewing everything you installed, you'll eventually discover common issues usually are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The environment setup doc is &lt;em&gt;outdated&lt;/em&gt; (I bet you didn't see that one coming, right? Isn't that the newcomer's job to update it anyway?).&lt;/li&gt;
&lt;li&gt;You installed the correct tools, but not the right &lt;em&gt;version&lt;/em&gt; ("Sorry, We forgot to tell you'll have to use this &lt;em&gt;specific version&lt;/em&gt;, as we have a few issues in our codebase").&lt;/li&gt;
&lt;li&gt;You have some &lt;em&gt;conflicts&lt;/em&gt; with the environment set up of other projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The thing is, we already know how to solve these problems, because that's the &lt;em&gt;exact same issues&lt;/em&gt; we had with production environments when we ship our applications.&lt;/p&gt;

&lt;p&gt;We solved all these problems by packaging the runtime environment of our applications into &lt;strong&gt;containers&lt;/strong&gt;. Then, why not also use containers for our &lt;em&gt;dev environment&lt;/em&gt;?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;You need to have these tools installed on your machine to get started:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com?WT.mc_id=javascript-14373-yolasors"&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.docker.com/products/docker-desktop"&gt;Docker&lt;/a&gt; (or any Docker-compatible client)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack&amp;amp;WT.mc_id=javascript-14373-yolasors"&gt;Remote Development Extension for VS Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;Open VS Code on a new or existing project, then click on the bottom left&lt;br&gt;
of the status bar, on the "opposing chevron" icon (let me know if you have a better name):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VbfD7ShC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/vscode/container-dev-env/assets/remote-ext-button.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VbfD7ShC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/vscode/container-dev-env/assets/remote-ext-button.png" alt="Screenshot showing remote extension button in VS Code status bar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you do that, select &lt;strong&gt;Add Development Container Configuration Files...&lt;/strong&gt;, and it will open a huge list of environments starters. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fMUkc7p3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/vscode/container-dev-env/assets/add-config.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fMUkc7p3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/vscode/container-dev-env/assets/add-config.png" alt="Screenshot showing remote extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll find pre-made configurations for Node.js, Java, .Net, Go, Python, and more, most likely there is one that you can use as a starting point. Once you've made your choice, you'll notice that a new &lt;code&gt;.devcontainer&lt;/code&gt; folder was created, containing 2 files:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UEgmP1si--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/vscode/container-dev-env/assets/config-files.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UEgmP1si--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/vscode/container-dev-env/assets/config-files.png" alt="Screenshot of the new folder in VS Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll dig into these files just after, for now, let's reload the project to work inside a container. &lt;/p&gt;

&lt;p&gt;Click again on that "opposing chevron" icon in the status bar, and select &lt;strong&gt;Reopen in container&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;VS Code will reload the project's window and start building the container. Depending on your internet connection speed, this may take a while but don't worry, it's only needed the first time.&lt;/p&gt;

&lt;p&gt;Once it's finished, you'll see that VS Code is connected to your dev container in the status bar. You can also open a terminal and play with your new dev environment (in my case, I've set up a new Node.js v14 environment).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ihws4zSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/vscode/container-dev-env/assets/dev-container.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ihws4zSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/vscode/container-dev-env/assets/dev-container.png" alt="Screenshot of VS Code connected to a dev container with a terminal open"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#customizing-the-dev-setup"&gt;
  &lt;/a&gt;
  Customizing the dev setup
&lt;/h2&gt;

&lt;p&gt;Now that you have a working environment, you'll probably want to customize it for your project's needs. If you unfold the &lt;code&gt;.devcontainer&lt;/code&gt; folder in the explorer, you'll see these 2 files that will allow you to do that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt;: this file defines your container configuration, and is used to build the container image that will be used for your environment. If you need to install additional tools or configure scripts and environment variables for your dev environment, this is where you should look at.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;devcontainer.json&lt;/code&gt;: this file allows to customize VS Code when the project is connected to a development container. In particular, you can specify VS Code settings, extensions, and port forwarding that will be enabled only in this project dev container.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take a deeper look at how you can fine-tune your VS Code dev environment by editing your &lt;code&gt;devcontainer.json&lt;/code&gt; file.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vs-code-settings-and-overrides"&gt;
  &lt;/a&gt;
  VS Code settings and overrides
&lt;/h3&gt;

&lt;p&gt;You'll see something like this under the &lt;code&gt;settings&lt;/code&gt; key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*default*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;container&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;specific&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;settings.json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;values&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;container&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;create.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"settings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="nl"&gt;"terminal.integrated.shell.linux"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/bin/bash"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This key allows you to override any VS Code settings when it's connected to this container environment. For example, if you work on Windows and your default terminal is PowerShell, by connecting to the dev container the setting above with switch your default terminal to Bash instead, which will be run inside the Linux system of the dev container. With these settings, you can set a common code formatter for your team, or force GPG signing for your commits for example.&lt;/p&gt;

&lt;p&gt;Another useful option is located under the &lt;code&gt;extensions&lt;/code&gt; key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;IDs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;extension&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;installed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;when&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;container&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;created.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"extensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"dbaeumeur.vscode-eslint"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This one allows specifying extensions that will be automatically installed &lt;em&gt;within&lt;/em&gt; your dev container when it's run for the first time. Yes, you've read that well: these extensions won't pollute your global VS Code configuration, as they'll be available only when your dev container is started and connected to your project. No need to toggle your extensions anymore depending on your active project, no more having a useless C# extension active on your Java project!&lt;/p&gt;

&lt;p&gt;One last essential option, &lt;code&gt;forwardPorts&lt;/code&gt;, allows you to expose ports available from within your dev container and make them accessible by default from your local machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'forwardPorts'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;make&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;ports&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;inside&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;container&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;available&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;locally&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"forwardPorts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4200&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, if you run a web server within your dev container, without port forwarding you won't be able to access it in your browser. Note that it's also possible to add ports to forward on the fly, by clicking on the antenna icon in the status bar, then selecting &lt;code&gt;Add Port&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B2kd8Sv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/vscode/container-dev-env/assets/port-forwarding.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B2kd8Sv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/vscode/container-dev-env/assets/port-forwarding.png" alt="Screenshot of port forwarding panel in VS Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sharing-and-updating-the-environment"&gt;
  &lt;/a&gt;
  Sharing and updating the environment
&lt;/h2&gt;

&lt;p&gt;Once your container and VS Code configuration is finished, you only have to push these two files in your repository to make them available for your team. And it's one of the big benefits of this approach! To welcome a new developer to your project, you now only have to clone the project, reload VS Code to use the container config and that's it. Take a coffee (or many) while the container is downloading and installing tools on its first run, and your new developer will have a dev environment ready for work, without any effort.&lt;/p&gt;

&lt;p&gt;Even better, if anyone updates the environment configuration, for example by upgrading a tool's version, everyone in the team will see this notification when pulling the changes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hBisnipV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/vscode/container-dev-env/assets/config-changed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hBisnipV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sinedied/articles/master/articles/vscode/container-dev-env/assets/config-changed.png" alt="Screen showing the configuration changed dialog in VS Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You then only have to select &lt;code&gt;Rebuild&lt;/code&gt; to update your environment to the latest version. No more difficulties building a project when coming back from vacation!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wheres-the-catch"&gt;
  &lt;/a&gt;
  Where's the catch?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;It almost seems too good to be true, so where's the catch?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I've been asking that to myself since I started using it from the first beta, and so far it's been a happy ride. If you wonder about the performance, yes doing everything inside a container is a bit slower than doing it on the host machine, but nothing to worry about. In some cases, you may face disk performance issues especially with lots of small files (looking at you, &lt;code&gt;npm install&lt;/code&gt;) but there are tips to &lt;a href="https://code.visualstudio.com/remote/advancedcontainers/improve-performance?WT.mc_id=javascript-14373-yolasors"&gt;improve your filesystem performance with Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The only issue I had at the beginning was with my git credentials as I'm using SSH keys, but once I've followed &lt;a href="https://code.visualstudio.com/docs/remote/containers?WT.mc_id=javascript-14373-yolasors#_sharing-git-credentials-with-your-container"&gt;the guide to set up an SSH agent&lt;/a&gt; everything went smoothly.&lt;/p&gt;

&lt;p&gt;You can have a look at the &lt;a href="https://code.visualstudio.com/docs/remote/containers?WT.mc_id=javascript-14373-yolasors#_known-limitations"&gt;known limitations&lt;/a&gt;, but so far I've yet to have any issue with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next
&lt;/h2&gt;

&lt;p&gt;This article is only a brief overview of what's possible with these tools, and of course, you can push it way further if needed, like creating a dev environment using multiple containers for example. You can have a look at &lt;a href="https://code.visualstudio.com/remote/advancedcontainers/overview?WT.mc_id=javascript-14373-yolasors"&gt;the documentation for more advanced scenarios&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Going further, you could still argue that you have to install VS Code with the remote extension and a Docker-compatible runtime to make this work. It's also possible to get rid of that, using for example &lt;a href="https://github.com/features/codespaces"&gt;GitHub Codespace&lt;/a&gt; which makes use of the exact same tools and configuration to provide a cloud-based dev environment, accessible from any browser, without having to install anything (but a browser) on your machine.&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/sinedied"&gt;Twitter&lt;/a&gt;, I would be happy to discuss and take your suggestions!&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>tips</category>
    </item>
  </channel>
</rss>
