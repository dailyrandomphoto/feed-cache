<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Loaded in 600 milliseconds</title>
      <author>Vedran Cindrić</author>
      <pubDate>Mon, 02 Aug 2021 15:47:44 +0000</pubDate>
      <link>https://dev.to/cindreta/loaded-in-600-milliseconds-5daf</link>
      <guid>https://dev.to/cindreta/loaded-in-600-milliseconds-5daf</guid>
      <description>&lt;p&gt;One of the first movies I ever saw in a cinema was in my tiny home town &lt;a href="https://goo.gl/maps/jwNFFPLRB8pbJiDx9"&gt;Nova Gradiška&lt;/a&gt; in Croatia. The movie playing that day was &lt;a href="https://www.imdb.com/title/tt0187078/"&gt;Gone in 60 seconds&lt;/a&gt;. As you can imagine I was blown away. My first movie on the big screen. And at the time there were a lot of popular actors in it like Nicolas Cage, Angelina Jolie, Vinnie Jones and others. Really an experience I remember to this day as you can see. In particular a scene from that movie seems like a great intro to this article. So, before you continue, play the video and &lt;strong&gt;get yourself into the performance groove&lt;/strong&gt;. Don't forget to do the finger thing that Cage does 😂&lt;br&gt;
ž&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/iKcYz6rDRVk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Before you think "Oh no, yet another guide i'll never actually be able to implement on my website" let me stop you there! &lt;strong&gt;More or less everything we will go through in this article is easily achievable.&lt;/strong&gt; In some cases some things might take 2 minutes and some might take longer but in general the goal is to bring your website performance up as fast as possible.&lt;/p&gt;

&lt;p&gt;Personally, I'm very passionate about website performance, loading times and optimizing everything in the stack to run as smoothly as possible. For the past 10 years I've spent a lot of my time chasing milliseconds in our software development company. Performance is something we included in every of our projects and the same is with our startup - &lt;a href="https://treblle.com"&gt;Treblle&lt;/a&gt;. To be honest my obsession with performance is probably the reason why we were able to build &lt;a href="https://treblle.com"&gt;Treblle&lt;/a&gt;. Besides that I’ve also spent a lot of time consulting for other companies on how to improve performance. Going after their developers and tidying things up.&lt;/p&gt;

&lt;p&gt;Based on my experience I came up with a list of things you can do almost day one on any projects that would improve the speed drastically and show a noticeable improvement. Some will take time but most are hassle free.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lazyload-everything"&gt;
  &lt;/a&gt;
  Lazyload (everything)
&lt;/h3&gt;

&lt;p&gt;When someone visits your website they probably don't see the entire website but only, what in the marketing world they call, "above the fold" content. In most cases that includes a hero element with either text, images/video and a call to action. Below that is everything else explaining why your product or startup is the next big thing (same as ours 😎). More often than not a user might only view that hero element, scroll a few times but won’t reach the end of the website. &lt;strong&gt;So why load all the images, videos, iframes and content that nobody will see?&lt;/strong&gt; That right there is the fundamental idea behind lazy loading. It’s probably the simplest and most effective thing you can do to improve your website load time. The reason why it has such a huge impact is because 90% of the time the content we are loading on the rest of the website are images and videos. So if you have 20 - 30 images on your website and the users can only see 3-4, why load the rest? Sounds logical - it is - but you would be surprised at how many websites don't do this. Especially considering that it’s super easy to add it to your website.&lt;/p&gt;

&lt;p&gt;The first way we can add lazy loading to our website is by using a really tiny Javascript library called: &lt;a href="https://github.com/aFarkas/lazysizes"&gt;lazysizes&lt;/a&gt;. I've used this puppy in every website we’ve developed for the past 5 years and it works like a charm. You can lazy load images, iframes, videos and even widgets. It works with the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element as well as picture elements which is great for responsive design.&lt;/p&gt;

&lt;p&gt;To use it simply replace your existing &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; elements with the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Note that the path to the real image is in the "data-src" attribute and to enable lazy loading you have to add a class of "lazyload". You also might be wondering what the mambo jumbo in the "src" attribute is. Well it’s basically a really tiny image with a light gray background. This is used to fill up the space and not cause jumps in layouts shift while the image is "replaced". In any case you are done. Nothing more or less to do. The plugin has more options which you can check out on their website.&lt;/p&gt;

&lt;p&gt;Another way you could start using lazy loading is by utilizing a new HTML standard attribute called &lt;code&gt;loading&lt;/code&gt;. Now it does have limited support but it is probably the future of lazy loading and it will be a default HTML attribute once everybody starts supporting it.&lt;/p&gt;

&lt;p&gt;You use it by adding &lt;code&gt;loading="lazy"&lt;/code&gt; to any image element like so:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Again, maybe wait a bit with this one because it’s lacking support for older browsers but definitely keep an eye for it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optimize-images"&gt;
  &lt;/a&gt;
  Optimize images
&lt;/h3&gt;

&lt;p&gt;I'm adding this because it has a huge impact and it’s dead simple to do. Yet - most people don’t do it. When you are using images as design elements, backgrounds and such simply run them through something like &lt;a href="https://imageoptim.com/mac"&gt;ImageOptim&lt;/a&gt; or &lt;a href="https://www.jpegmini.com/"&gt;JPEGMini&lt;/a&gt;. I've been using the FREE Mac app of &lt;a href="https://imageoptim.com/mac"&gt;ImageOptim&lt;/a&gt; for years and it works like a charm. In some cases it &lt;strong&gt;reduces images by like 80%&lt;/strong&gt; and I simply get shocked. You don't have to think about it, simply drag and drop the images and they are automatically saved as optimized images with as little as possible quality loss. They also have a webservice so you can connect your user generated images with their API and have them optimized as well.&lt;/p&gt;

&lt;p&gt;As far as SVG goes I use another free and awesome service called &lt;a href="https://vecta.io/nano"&gt;SVG Nano&lt;/a&gt;. It's just like &lt;a href="https://imageoptim.com/mac"&gt;ImageOptim&lt;/a&gt; but for SVGs and the results are astonishing. You can have a Full HD illustration cut down to like 10KB which is great.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#minify-and-compress"&gt;
  &lt;/a&gt;
  Minify and compress
&lt;/h3&gt;

&lt;p&gt;A must do when working with CSS and JS is to minimize them! Don't use a non minimized version of your code or other plugins/packages/dependencies in production. Simply don't. You can manually minimize the CSS/JS via tools like this: &lt;a href="https://minifycode.com/"&gt;https://minifycode.com/&lt;/a&gt; or &lt;a href="https://www.minifier.org/"&gt;https://www.minifier.org/&lt;/a&gt;. Ideally you should include minification in your build process either via &lt;a href="https://webpack.js.org/guides/production/#minification"&gt;Webpack&lt;/a&gt; or some other tool. If you don't know how to do any of those then you can maybe download already minified versions of various frameworks and JS plugins.&lt;/p&gt;

&lt;p&gt;Just consider this: a non minified and uncompressed version of Jquery is 290Kb whereas a minified and compressed version is 90KB. &lt;strong&gt;You just saved 200KB or 70% of the download size&lt;/strong&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preconnect"&gt;
  &lt;/a&gt;
  Preconnect
&lt;/h3&gt;

&lt;p&gt;Preconnect is a relatively modern type of link element that became popular with HTML5 and HTTP2. The idea behind it is super simple but very effective. By adding one or more preconnect tags to the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element of your website you tell browsers that, down the line, you will eventually download something from that domain. Browsers can initiate a connection and essentially prepare whatever they need to instantly download something from that domain. This as you can imagine can speed things up for you - especially if you are downloading fonts, images and JS. Using preconnect could not be simpler. Before you call on any CSS and JS in your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element add one of these:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link rel="preconnect" href="https://domain.com/" crossorigin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;And that's it. Later on if you're downloading something from domain.com like an image or JS or CSS it will be faster because the browser is already ready for it. To give you an idea here are top 3 most common preconnect scenarios:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin&amp;gt;
&amp;lt;link rel="preconnect" href="https://www.google-analytics.com/" crossorigin&amp;gt;
&amp;lt;link rel="dns-prefetch" href="https://yourid.cloudfront.net"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#use-a-cdn"&gt;
  &lt;/a&gt;
  Use a CDN
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pXMIbCMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2yzzcow4k19m2.cloudfront.net/835adbfb-d840-46e2-8758-ad949f91f861/images/blog/cdn-illustration%402x.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pXMIbCMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2yzzcow4k19m2.cloudfront.net/835adbfb-d840-46e2-8758-ad949f91f861/images/blog/cdn-illustration%402x.jpg" alt="use a cdn"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today with cloud providers like AWS, Azure and CloudFlare using a CDN couldn't be easier and it has a big performance impact! A CDN or a Content Distribution Network simply takes time files you upload (CSS/JS/images) and stores them across multiple different servers in various parts of the world. So let's say you have a visitor from India and your server is in the Us. If you are using a CDN for your assets then that CDN will serve those assets from a server in India rather than the US one. &lt;strong&gt;This will reduce latency and load times but also enable parallel resource downloading&lt;/strong&gt; since the files are downloaded from a different domain. Another great thing about CDNs is that they are already optimized for performance. Everything we had to do to tweak our server earlier is already done for us 🤟🏻 If you are worried about pricing - don't be. Using a CDN nowadays is super affordable especially for the impact it has on performance.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#go-back-to-basics"&gt;
  &lt;/a&gt;
  Go back to basics
&lt;/h3&gt;

&lt;p&gt;I've always been a fan of minimalism except when it comes to Apple devices 🥺 Guilty as charged. But when it comes to front-end development I love minimalism to a fault. What I mean by minimalism is simple: reduce the number of resources you are using in your pages. This time under resources I don't just mean images and JS but rather fonts, various CSS frameworks, JS frameworks and dependencies. &lt;strong&gt;When we are talking about fonts my rule is 1 custom font with a maximum of 2-3 weights&lt;/strong&gt;. If I really really have to, I will include a second font but then I will try to reduce the weights as much as possible. And yes I understand you should make your website look pretty but not at the cost of extreme performance.&lt;/p&gt;

&lt;p&gt;Another really trivial and stupid problem i repeatdy have seen happen is that developers include multiple versions of JQuery or Bootstrap or some other plugin. I’ve noticed this goes to extremes with Wordpress themes and plugins. It’s like a frenzy of repeat includes. Every plugin simply piles on it’s own Bootstrap version, Jquery version or something. Make sure you nip that because you really don’t wanna be loading multiple useless libraries.&lt;/p&gt;

&lt;p&gt;Finally, think about what you actually need. Do you need a 150KB animation library for CSS and animating that one section on the home page? Can that be done using native CSS or JS. Do you really need JQuery, an Ajax Form plugin and a Form validation plugin to make an HTTP request? Do you need a 200KB parallax plugin that requires another dependency or can you make a similar effect with CSS. Do you really need another library to tell time with JS?&lt;/p&gt;

&lt;p&gt;Consider the fact that an average modern F1 car has 5000 parts and weights around 750 KG whereas a regular car has around 30 000 parts and weights 1300 KG. Just let that sink in. &lt;strong&gt;Do you want your website to be like an F1 car or like your neighbors Toyota Camry?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DjfQBv9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2yzzcow4k19m2.cloudfront.net/835adbfb-d840-46e2-8758-ad949f91f861/images/blog/f1-redbull%402x.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DjfQBv9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2yzzcow4k19m2.cloudfront.net/835adbfb-d840-46e2-8758-ad949f91f861/images/blog/f1-redbull%402x.jpg" alt="F1 Redbull"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#optimize-your-server"&gt;
  &lt;/a&gt;
  Optimize your server
&lt;/h3&gt;

&lt;p&gt;Your infrastructure has a significant role in load times and performance. If you have a lousy server nothing you do will help you. Especially if the server is located in a different part of the world and most of your users are accessing it from across the pond. There are easy wins that you can do to make sure you get the best performance with as little as possible.&lt;/p&gt;

&lt;p&gt;The first thing is to make sure that you are running on HTTP2. It's not that complicated to install it in case your hosting provider isn't running on that by default. HTTP2 is much faster than HTTP1. It's also much newer so it has a lot more features that deal with a lot of performance issues that HTTP1 had. One of the biggest things that HTTP2 can do is download resources in parallel. Coupled with other features HTTP2 makes a huge difference and you should find a way to get your website on it.&lt;/p&gt;

&lt;p&gt;Next up if you are developing on top of the LAMP stack and you are using PHP then go check if you are running PHP 7+ at a minimum. PHP has been kicking ass in terms of performance in recent versions like PHP 7 and PHP 8. Just by upgrading from PHP 5 to 7 you will get 60% better performance and render times. PHP 8 also contains a lot of JIT improvements which again makes the jump from 7 to 8 worth it.&lt;/p&gt;

&lt;p&gt;Another thing you can easily do is adjust the server configuration to make it even faster. This includes making sure you are compressing resources like CSS/JS, sending the correct mime types, taking advantage of browser cache and others. To save you some time I'll share my custom Apache configuration I've been using for years.&lt;/p&gt;

&lt;p&gt;The first step would be to create a new Apache config with our performance settings. Open your terminal, SSH to your server and navigate to &lt;code&gt;/etc/apache2/conf-available/&lt;/code&gt; and type in:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo curl https://gist.githubusercontent.com/cindreta/e536faa5494d0a0be409d435757ff9a7/raw/0a24629059e243a44d2caf5d1e95ce1c8df4822f/performance.conf - o performance.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This will download the custom performance configuration from a gist on my Github and save it as a file called &lt;code&gt;performance.conf&lt;/code&gt; which we will include in our default Apache config.&lt;/p&gt;

&lt;p&gt;Now that we have the file navigate to &lt;code&gt;/etc/apache2/sites-available/&lt;/code&gt; where you should find all your Apache Vhosts. The default one should be called &lt;code&gt;000-default.conf&lt;/code&gt;. Simply do sudo nano 000-default.conf and before the end tag &lt;code&gt;&amp;lt;/VirutalHost&amp;gt;&lt;/code&gt; simply add our custom config like so:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Include /etc/apache2/conf-available/performance.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Save the changes and reload the Apache server by issuing a command: &lt;code&gt;sudo systemctl restart apache2&lt;/code&gt;.If apache starts normally then everything is ok, if we messed something up or you are missing some Apache modules like mod_deflate, mod_rewrite apache will throw an error and you can either try to debug what’s up or remove the config file from your vhost.&lt;/p&gt;

&lt;p&gt;An additional note I would like to mention: you could have used .htaccess to enable the configuration but I would suggest you don't. The reason is, you guessed it, performance. Adding complicated and long config options to &lt;code&gt;.htaccess&lt;/code&gt; actually slows down the Apache server because it has to do more work to compile that. I don’t like messing around with servers also but it’s worth doing it via config files like shown.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understand-html"&gt;
  &lt;/a&gt;
  Understand HTML
&lt;/h3&gt;

&lt;p&gt;HTML is the most forgiving language on planet Earth. If you make a mistake like forgetting to close a tag or mistype the tag name it will still do it’s best to render and show the content. A lot of this has to do with browser engines but the fact is you can get away with pretty much anything. And people tend to abuse that. There are around a 100 tags in HTML spanning from more common like &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; to weird ones like &lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;kbd&amp;gt;&lt;/code&gt; and others. Yet people mostly use 10 of them and probably the one that is used the most is the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element. I've seen this trend phenomenon 10x with these "new kids on the block" learning HTML via React or Angular...In short learn HTML and use appropriate tags. If you are building a list then use &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;. If you are displaying titles then use &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt;... And guess what - the numbers have a meaning 😊. &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; would imply it's the most important title in the page hence use it accordingly. Same goes for other elements on the page like &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Writing good, semantic, meaningful HTML &lt;strong&gt;helps the browser render faster&lt;/strong&gt; but also it saves time on paint events, style recalculations and similar. Another benefit of writing good structured HTML is the on site SEO aspect of it. Google and other engines love when you make their job easier and use tags that have meaning. It also helps anyone else reading your source to better understand what you tried to do, what is what and similar. So just use HTML as &lt;a href="https://en.wikipedia.org/wiki/Tim_Berners-Lee"&gt;sir Tim&lt;/a&gt; wanted you to.&lt;/p&gt;

&lt;p&gt;Another small but interesting tip is to minimize the amount of white space and empty lines also helps with performance. You can even do this automatically by using server side plugins mod_pagespeed for Apache and Ngix. Of course if you are using a back-end programming language which compiles your HTML into views, like Laravel, then there are packages for that like HTMLMin and others.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-first"&gt;
  &lt;/a&gt;
  CSS first
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s-Gqcwba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2yzzcow4k19m2.cloudfront.net/835adbfb-d840-46e2-8758-ad949f91f861/images/blog/css-first%402x.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-Gqcwba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2yzzcow4k19m2.cloudfront.net/835adbfb-d840-46e2-8758-ad949f91f861/images/blog/css-first%402x.jpg" alt="CSS first"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just like Donalds thing was "America first", I believe, for us front-end developers, it should be "CSS first". What I mean by that is that if you can make something using CSS rather than using an image or Javascript - then do it. When I see a design my first question is what can i do only with CSS. I evaluate everything from backgrounds, shapes, ornaments, structures and try to figure out if there is a way to do it only with CSS. &lt;strong&gt;You will be surprised how many things you can do in CSS once you master it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I've seen many, many instances where CSS was able to replace a shape or even a background image. So by writing maybe 10 lines of CSS you save 50-100KB in transfer data on those images. The main reason why most websites are slow is because they use too many images or pile on too many JS plugins to do basic things like hovering, animations and effects. CSS is good at all of those things - you just need to learn how to use it.&lt;/p&gt;

&lt;p&gt;Another important practice you can apply is writing better and more optimized CSS. Yes - that is a thing. You can also do your website an injustice if you write sloppy and bad CSS. So let's just name a few things you can do to write better CSS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the less lines of CSS you can write - the better&lt;/li&gt;
&lt;li&gt;the shorter your selectors are - the better&lt;/li&gt;
&lt;li&gt;run all the animations on the GPU vs the CPU&lt;/li&gt;
&lt;li&gt;stop supporting ancient browsers&lt;/li&gt;
&lt;li&gt;use shorthand properties when you can&lt;/li&gt;
&lt;li&gt;don't overwrite - learn browser defaults and framework resets&lt;/li&gt;
&lt;li&gt;separate media queries into its own files&lt;/li&gt;
&lt;li&gt;don't bloat your code with third party addons/plugins that you don't understand&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The sooner you start practicing these things the faster you will see results. The best thing about this is you can directly edit CSS rules in a browser and test in literary seconds. So get to it.&lt;/p&gt;

&lt;p&gt;---&lt;/p&gt;

&lt;p&gt;Hope some of these help you reduce your load times and improve your performance in one days work. Some will take longer but they will also make you a better developer in the long run. &lt;strong&gt;At the end of the day performance is a give and take between design, style and functionality.&lt;/strong&gt; You should be walking in the middle of that line for the best of both worlds.&lt;/p&gt;

&lt;p&gt;PS. If you like these articles say hello on my &lt;a href="https://twitter.com/cindreta"&gt;Twitter&lt;/a&gt; or if you are using APIs be a champ and give &lt;a href="https://treblle.com/"&gt;Treblle&lt;/a&gt; a try - you won't regret it.&lt;/p&gt;

</description>
      <category>performance</category>
      <category>webdev</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Improving UX of forms using only HTML</title>
      <author>Stas Melnikov</author>
      <pubDate>Mon, 02 Aug 2021 15:46:36 +0000</pubDate>
      <link>https://dev.to/melnik909/improving-ux-of-forms-using-only-html-21c0</link>
      <guid>https://dev.to/melnik909/improving-ux-of-forms-using-only-html-21c0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-showhide-password-pattern"&gt;
  &lt;/a&gt;
  The show/hide password pattern
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vTrkwlGS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/54375969/5654c4c7e7954c349c336abe5e7c3ef0/1.jpg%3Ftoken-time%3D1629158400%26token-hash%3Da55AdGf9N1gjMZc0hXK7gvhtu5NWeun1AnQG4xYqiLQ%253D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTrkwlGS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/54375969/5654c4c7e7954c349c336abe5e7c3ef0/1.jpg%3Ftoken-time%3D1629158400%26token-hash%3Da55AdGf9N1gjMZc0hXK7gvhtu5NWeun1AnQG4xYqiLQ%253D" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the last years, the hide/show button pattern became very popular. But a lot of people use it wrong. The mistake is in choosing the right HTML element. &lt;/p&gt;

&lt;p&gt;People think users will interact with an element only using a mouse. Just click one time, two, etc. But the value of this pattern is more important.&lt;/p&gt;

&lt;p&gt;Firstly, users use the keyboard quickly focusing from the field to the button using the tab key. Then they push the enter key for showing or hiding the password. &lt;/p&gt;

&lt;p&gt;Secondly, screen readers have to detect this element is interactive. Then users can use it.&lt;/p&gt;

&lt;p&gt;So only one element meets all these requirements — the button element. Use it and your users will be happy to use your interface.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#showing-the-correct-virtual-keyboard-when-you-ask-to-enter-a-code"&gt;
  &lt;/a&gt;
  Showing the correct virtual keyboard when you ask to enter a code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aQk_ZAAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/54375684/ffe486076c174da29946eb5b3fe99d1f/1.jpg%3Ftoken-time%3D1629158400%26token-hash%3DBsLdISRPEFuilBqpLQxPa0Cv62j1L50bKIM6KICYInA%253D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aQk_ZAAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/54375684/ffe486076c174da29946eb5b3fe99d1f/1.jpg%3Ftoken-time%3D1629158400%26token-hash%3DBsLdISRPEFuilBqpLQxPa0Cv62j1L50bKIM6KICYInA%253D" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to make UX of forms more simple and user-friendly you should right choose the type attribute. That's important because the attribute helps browsers show the most appropriate virtual keyboard. Thus users can more quickly fill forms. For example, if users fill in a phone number type="tel" shows the keyboard with digits and other special symbols.&lt;/p&gt;

&lt;p&gt;But there are cases when existing values can't be applied. For example, when you sign in you want to ask users to enter a numeric code. &lt;/p&gt;

&lt;p&gt;In these cases, you can use the special inputmode attribute that helps browsers display a correct keyboard as well. In the cases with a numeric code, you should use the numeric value. Then browsers will display the keyboard with digits only and users will fill the field quickly as well as with the type attribute.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br&gt;
😊 If you like this post, please, &lt;a href="https://twitter.com/intent/tweet?text=Stas%20Melnikov%20told%20about%20how%20we%20can%20improve%20UX%20of%20forms%20using%20only%20HTML%20on%20%40ThePracticalDev%20www.dev.to/melnik909/improving-ux-of-forms-using-only-html-21c0"&gt;share on Twitter&lt;/a&gt;&lt;br&gt;
🖐 I make free written accessibility review so that you don't make common mistakes. If you're interested in that chat me on &lt;a href="mailto:melnik909@ya.ru"&gt;melnik909@ya.ru&lt;/a&gt; or dev.to direct. Please, specify the subject of the email "Stas, need help" &lt;/p&gt;

&lt;p&gt;🥇 If you want to be first who take my tips get &lt;a href="https://www.patreon.com/melnik909"&gt;my paid subscription on Patreon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎁 Make a gift yourself or friends who like frontends: 👕 &lt;a href="https://www.redbubble.com/i/t-shirt/Front-End-developer-by-melnik909/79109127.FPE53"&gt;T-Shirt&lt;/a&gt;, 🎁 &lt;a href="https://www.redbubble.com/i/sticker/Front-End-developer-by-melnik909/79109127.EJUG5"&gt;Stickers&lt;/a&gt;, 🥽 &lt;a href="https://www.redbubble.com/i/mask/Front-End-developer-by-melnik909/79109127.6BSL1"&gt;Masks&lt;/a&gt;, 🧩 &lt;a href="https://www.redbubble.com/i/magnet/Front-End-developer-by-melnik909/79109127.TBCTK"&gt;Magnets&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.S.&lt;/strong&gt; This post was written with the support of my sponsors: Ben Rinehart, Sergio Kagiema, Jesse Willard, Tanya Ten.&lt;/p&gt;

</description>
      <category>ux</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Build a Google Meet Clone from Scratch: WebRTC &amp; Socket io</title>
      <author>Christopher Glikpo</author>
      <pubDate>Mon, 02 Aug 2021 15:40:23 +0000</pubDate>
      <link>https://dev.to/cglikpo/build-a-google-meet-clone-from-scratch-webrtc-socket-io-e80</link>
      <guid>https://dev.to/cglikpo/build-a-google-meet-clone-from-scratch-webrtc-socket-io-e80</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/h2D7IkMUC20"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hi and welcome to the course "Build a Google Meet clone from scratch: WebRTC, Socket io &amp;amp; Javascript"".&lt;/p&gt;

&lt;p&gt;webrtc and socket io is combination of powerfull technology where you will able to transfer data in real time with low letency. And thats why its been considering the best technology to build video conferencing app. So If you are webrtc enthusiastic, want to build webconferencing website also want to learn socket io where you are going to build group conferencing webapp in real time, low letency data transfer then you are in the right place.&lt;/p&gt;

&lt;p&gt;In this course we are going to learn how to create a landing page where users will able to host a new meeting or will be able join in a existing meeting by using meeting code. Then in the webconferencing page step by step we will create audio and video streaming for perticular meeting with related functinality. Where user not only can interect with audio video but also user will able to chat in a room. User will able share files and photo. There user can see total number user participant with details. Along with camera input we will also create system to share screen in a meeting. And also we will create recording system where user will able to record full meeting with audio. Not last but least we will create bunch of functionality to make the website more functional.&lt;/p&gt;

&lt;p&gt;So what you say? ready to dive in? Sign up today and get immediate access to the high quality video, downloadable complete project source code with one on one expert support. All backed by a 30 days 100% gaurenty. Got a lot to cover. So lets dive in.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>webrtc</category>
    </item>
    <item>
      <title>👾 Mutation testing on Go</title>
      <author>Guilherme Guitte</author>
      <pubDate>Mon, 02 Aug 2021 15:29:44 +0000</pubDate>
      <link>https://dev.to/guilhermeguitte/mutation-testing-on-go-1lbf</link>
      <guid>https://dev.to/guilhermeguitte/mutation-testing-on-go-1lbf</guid>
      <description>&lt;p&gt;One of the Developer's goals is to improve the healthiness of codebases. Fortunately, automated testing is a widely known practice to decrease production cycles and receive accelerated feedback. But, how we can check if our test suite are healthy? One of the techniques on automated testing to identify weak spots of dead/untested code is &lt;strong&gt;Mutation Testing&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-mutation-testing"&gt;
  &lt;/a&gt;
  What is Mutation Testing? 👾
&lt;/h2&gt;

&lt;p&gt;Mutation testing or known as Mutation Analysis, involves to modifies an application in small ways programmatically and running against your test suite looking for weak spots of your code that has not test for a specific mutation. &lt;/p&gt;

&lt;p&gt;Fundamental concepts involved over Mutation Testing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Mutants&lt;/strong&gt;: a modified version that will test against a testing suite.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Mutation Score&lt;/strong&gt;: percentage of &lt;strong&gt;passed mutation/total mutation created total&lt;/strong&gt;. 
0 means all mutations created are &lt;em&gt;alive&lt;/em&gt; 👾, so the tests are probably has not good coverage.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mutation operators/mutators&lt;/strong&gt;: A mutator is an operation applied to the original code. Many types of mutators can be applied. It is important to check which mutators are available for your mutation tool.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Equivalent Mutations&lt;/strong&gt;: Are false-positives mutants. Sometimes, it will found a mutated version that has no practical changes. Often, they can mean a dead/useless code in the application.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-mutation-testing"&gt;
  &lt;/a&gt;
  When to use Mutation Testing?
&lt;/h2&gt;

&lt;p&gt;It is an exciting alternative to the code coverage we see over different open source projects. One caveat about mutation testing that, for larger codebases, mutation testing can consume a significant amount of resources. So it can be decide to run it periodically through the codebase, not each push to your git remote repository.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#mutation-testing-in-go"&gt;
  &lt;/a&gt;
  Mutation Testing in Go
&lt;/h2&gt;

&lt;p&gt;In practice, how mutation testing works? Let's see the follow code sample that will be the production code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GreetingsByLocale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;localestring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="n"&gt;greetings&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;resolveGreetings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;greetings&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Sorry, we didn't identified you"&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;greetings&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;resolveGreetings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;localestring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;iflocale&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"en"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello"&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="n"&gt;iflocale&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"pt"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Olá"&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example above, implements a very straightforward &lt;code&gt;GreetingByLocale&lt;/code&gt; function, that returns the appropriated greetings by locale. Example: &lt;code&gt;en&lt;/code&gt; , &lt;code&gt;pt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To running a mutation testing in Go, we have to install a mutation testing tool. For this article I've choose &lt;a href="https://github.com/zimmski/go-mutesting"&gt;go-mutesting&lt;/a&gt; based what I was looking for at &lt;a href="https://github.com/avelino/awesome-go"&gt;awesome-go&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-install"&gt;
  &lt;/a&gt;
  How to install
&lt;/h2&gt;

&lt;p&gt;Running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go get &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; github.com/zimmski/go-mutesting/...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will be ready to run the follow command without problem normally. If you have any problems, check it out &lt;a href="https://github.com/zimmski/go-mutesting"&gt;documentation&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go-mutesting main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command above, will produce:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nt"&gt;--------&lt;/span&gt; main.go   2021-06-06 14:33:00.000000000 +0200
+++ /var/folders/y0/z16t6n116rxgq599drwq_z31r3w4v8/T/go-mutesting-406451808/basics-ut/main.go.0 2021-06-06 14:41:17.000000000 +0200
@@ &lt;span class="nt"&gt;-5&lt;/span&gt;,7 +5,7 @@
        greetings :&lt;span class="o"&gt;=&lt;/span&gt; resolveGreetings&lt;span class="o"&gt;(&lt;/span&gt;locale&lt;span class="o"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if &lt;/span&gt;greetings &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
-               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Sorry, we didn't identified you"&lt;/span&gt;
+
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return &lt;/span&gt;greetings
@@ &lt;span class="nt"&gt;-21&lt;/span&gt;,4 +21,4 @@
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
-&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="se"&gt;\ &lt;/span&gt;No newline at end of file
+&lt;span class="o"&gt;}&lt;/span&gt;

...

FAIL &lt;span class="s2"&gt;"/var/folders/y0/z16t6n116rxgq599drwq_z31r3w4v8/T/go-mutesting-406451808/basics-ut/main.go.2"&lt;/span&gt; with checksum 7543b5d5e97c3a66dec555fb1c908957
The mutation score is 0.000000 &lt;span class="o"&gt;(&lt;/span&gt;0 passed, 3 failed, 0 duplicated, 0 skipped, total is 3&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#what-information-you-should-take-care-of"&gt;
  &lt;/a&gt;
  What information you should take care of?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Mutation Score&lt;/strong&gt;: Percentage over &lt;strong&gt;passed mutation / mutation created total.&lt;/strong&gt;  0 means all mutation created are &lt;strong&gt;alive,&lt;/strong&gt; so the tests are probably not covering the whole usage of this package.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mutation&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;greetings&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Sorry, we didn't identified you"&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of mutation testing explains which it was modified that make the &lt;strong&gt;testing suite failed&lt;/strong&gt;. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#fixing-mutations"&gt;
  &lt;/a&gt;
  Fixing Mutations
&lt;/h2&gt;

&lt;p&gt;You need to created the appropriated tests that covers the mutation. For it, you can implement something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestGreetingsByLocaleByDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;greetings&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;GreetingsByLocale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;greetings&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;"Sorry, we didn't identified you"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"greeting() = %v; want 'Sorry, we didn't identified you'"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;greetings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running again &lt;code&gt;go-mutesting&lt;/code&gt;, you should see this output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go-mutesting main.go

PASS &lt;span class="s2"&gt;"/var/folders/y0/z16t6n116rxgq599drwq_z31r3w4v8/T/go-mutesting-610805264/basics-ut/main.go.0"&lt;/span&gt; with checksum 73ab3954dddfcf60d062bf280b49e996
PASS &lt;span class="s2"&gt;"/var/folders/y0/z16t6n116rxgq599drwq_z31r3w4v8/T/go-mutesting-610805264/basics-ut/main.go.1"&lt;/span&gt; with checksum 0a29bb0da18ff5c339c726f678c8f4b9
PASS &lt;span class="s2"&gt;"/var/folders/y0/z16t6n116rxgq599drwq_z31r3w4v8/T/go-mutesting-610805264/basics-ut/main.go.2"&lt;/span&gt; with checksum 7543b5d5e97c3a66dec555fb1c908957
The mutation score is 1.000000 &lt;span class="o"&gt;(&lt;/span&gt;3 passed, 0 failed, 0 duplicated, 0 skipped, total is 3&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perfect! We fix all mutations found.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#going-further"&gt;
  &lt;/a&gt;
  Going further
&lt;/h2&gt;

&lt;p&gt;Mutation testing is very powerful technique to spot weak coverage points of your test suite. Some links you can found useful:&lt;/p&gt;

&lt;p&gt;Explanation about mutation testing: &lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Mutation_testing"&gt;https://en.wikipedia.org/wiki/Mutation_testing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mutation testing tools by language:&lt;br&gt;
&lt;a href="https://github.com/theofidry/awesome-mutation-testing"&gt;https://github.com/theofidry/awesome-mutation-testing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mutation testing tool for Go:&lt;br&gt;
&lt;a href="https://github.com/zimmski/go-mutesting"&gt;https://github.com/zimmski/go-mutesting&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>testdev</category>
      <category>testing</category>
    </item>
    <item>
      <title>Burnout: The Price of Passion</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 02 Aug 2021 15:05:37 +0000</pubDate>
      <link>https://dev.to/codesphere/burnout-the-price-of-passion-2kok</link>
      <guid>https://dev.to/codesphere/burnout-the-price-of-passion-2kok</guid>
      <description>&lt;p&gt;Developer burnout is real and it's more common than you might think.&lt;/p&gt;

&lt;p&gt;We are all aware of imposter syndrome and the ever-present "I have no idea what I'm doing" voice that plagues new and experienced developers alike, but burning out can be a little more insidious. While you might have heard stories of overworked and unhappy employees being worked into an early retirement, what we don't prepare for is how much more likely you are to burn out when you are enjoying your work…&lt;/p&gt;

&lt;p&gt;That's right, even when you finally find that project you have been waiting for, that once in a lifetime dream job, you still have to know when enough is enough when to shut your laptop and take a break.&lt;/p&gt;

&lt;p&gt;Just ask the animators of one of your favorite childhood films about toys that come to life…they were so excited to build their vision, many of them were overworked, burned out, developed physical and mental stress related disorders that almost bought the whole show crashing down.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l2P6ozrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lodcz2v1h4la26d7yj7o.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l2P6ozrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lodcz2v1h4la26d7yj7o.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's take a step back and take a look at what developer burnout is.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-burnout"&gt;
  &lt;/a&gt;
  What is burnout?
&lt;/h3&gt;

&lt;p&gt;In short, it is a mental and physical collapse of a developer caused by stress or overworking. Unlike a bad day, which can happen fairly often, burnout can last for weeks at a time and steal a developer's passion for coding altogether.&lt;/p&gt;

&lt;p&gt;The world health organization officially recognizes the workplace phenomenon and defines it as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Burnout is a syndrome conceptualized as resulting from chronic workplace stress that has not been successfully managed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simple right? If you work too much you'll eventually break down..well, not exactly. Everyone suffers from and responds to stress differently and the cause of a burnout can differ from person to person. Some developers might indeed struggle with high workloads, while others may not be able to work with insufficient processes or unclear goals, so it is important to recognize the symptoms of a burnout and to know your limits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#symptoms-of%C2%A0burnout"&gt;
  &lt;/a&gt;
  Symptoms of burnout
&lt;/h3&gt;

&lt;p&gt;Knowing the symptoms of burnout can help you avoid the whole thing. You might also spot some of them in your co-workers, guide them into a healthier work process, save them from an intense workplace breakdown, develop a lifelong friendship and go on to build and deploy an app in Codesphere together that changes the lives of millions of people. You might…&lt;/p&gt;

&lt;p&gt;Look out for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lack of energy&lt;/li&gt;
&lt;li&gt;Physical exhaustion and fatigue&lt;/li&gt;
&lt;li&gt;A loss of interest or passion in your work&lt;/li&gt;
&lt;li&gt;Cynicism toward work-related topics&lt;/li&gt;
&lt;li&gt;No sense of accomplishment&lt;/li&gt;
&lt;li&gt;Sleeplessness&lt;/li&gt;
&lt;li&gt;Frequent headaches&lt;/li&gt;
&lt;li&gt;Feelings of isolations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They might seem obvious but in a fast-paced work environment with a product to build and ideas flowing, it takes an experienced eye to step back and take a look at how much of a price you're paying for your passion. You have to know how to pick yourself back up from the ground.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zmA3YjeG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5x5j3m0agb7ton1j65ag.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zmA3YjeG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5x5j3m0agb7ton1j65ag.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-avoid-a%C2%A0burnout"&gt;
  &lt;/a&gt;
  How to avoid a burnout
&lt;/h2&gt;

&lt;p&gt;Knowing what a burnout is and how to recognize it is a great start, but I hear you asking "how do I stop it from happening?". Well, there are a few tips you can follow if you want to stay on top of your game at both work and home.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-diet"&gt;
  &lt;/a&gt;
  1. Diet
&lt;/h3&gt;

&lt;p&gt;Some of you may be rolling your eyes at another healthy eating article that forces goji berries into your life but look, every civilization in human history has recognized a simple truth - You Are What You Eat!&lt;br&gt;
Now, I don't have a link to a pdf of a dietary plan for you to download and stick to your fridge, but eating smart is the way to go. Developing is a lot of sitting down. Snacks are a great way to get an energy boost, but make sure you're eating right where you can at work. Take-outs and beers might be best used to celebrate the launch of a new feature instead of to take your mind off that syntax error you find…&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-take%C2%A0breaks"&gt;
  &lt;/a&gt;
  2. Take breaks
&lt;/h3&gt;

&lt;p&gt;No brainer, if you sit in front of your work station for 9 hours you're going to pay for it sooner or later. Take breaks often to get up and walk around. Avoiding the obvious health risks of sitting down for a prolonged time, like deep vein thrombosis or heart disease, your brain needs space to process information. Five minutes outside can make a world of difference.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-socialize"&gt;
  &lt;/a&gt;
  3. Socialize
&lt;/h3&gt;

&lt;p&gt;The more perceptive of you would have read that isolation is a symptom to look out for when it comes to burnouts and what better way to combat being alone than not being alone. This doesn't just mean team events or getting smashed on a Friday after work. Time with your team talking about anything other than work can be a great way to strengthen the workflow. Time with family and friends, away from work, can help you build that all-important work/life balance and return to work ready to achieve the healthier, zen-like state of development that we here at Codesphere strive for.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-avoid-carpal-tunnel%C2%A0syndrome"&gt;
  &lt;/a&gt;
  4. Avoid Carpal Tunnel syndrome
&lt;/h3&gt;

&lt;p&gt;It is very common and it is very unpleasant. Make sure you sit in the correct position at your desk and minimize the risk; numb and tingly feelings in your hand can be the sign of the dreaded Carpal Tunnel affliction. It's exactly this kind of extra stress we are trying to avoid!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0yoHYe4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ec5adcopqn0onsw6kd0g.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0yoHYe4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ec5adcopqn0onsw6kd0g.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So there are a few ways you can keep yourself away from burning out. But let's say you didn't read our advice very well, maybe you didn't like the diet advice so you closed the tab and you've since been the victim of burnout and now you're back to find some sage advice on how to recover? Well, let's take a look at how one might get back into a healthy state of mind…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-recover-from%C2%A0burnout"&gt;
  &lt;/a&gt;
  How to recover from burnout
&lt;/h2&gt;

&lt;p&gt;Start slow. Don't make the same mistakes that got you into this state in the first place. If you were taking a 5-minute break every 45 minutes, take a break every 15 minutes now.&lt;/p&gt;

&lt;p&gt;Double down on your emotional detachment from work life, if you want to ease yourself back into developing then focus on the things you do when you're not developing. Be unreachable when you're not in the office or start hobbies that keep you busy. Too busy to get sucked back into solving that one last problem, and busy enough for your mind to relax without throwing it straight back into the deep end.&lt;/p&gt;

&lt;p&gt;Communicate with your team and people around you, let them know what's going on so people can hold you accountable when you start to slip back into that old familiar routine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z5UKeLyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3no8acv7bvqhmcmmmvo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z5UKeLyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3no8acv7bvqhmcmmmvo.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#work-smart"&gt;
  &lt;/a&gt;
  Work smart
&lt;/h3&gt;

&lt;p&gt;Developer Burnout can be an awful experience, leaving you with no desire to string two lines of code together and lose your love to code, but it doesn't have to be your fate. Listen to your body and look out for your colleagues. Building what we love is a blessing we all share in the developing world, but it comes at a price. Knowing that price and how best to pay it is the key to a happy and healthy work-life.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-tip"&gt;
  &lt;/a&gt;
  Bonus Tip!
&lt;/h3&gt;

&lt;p&gt;Another helpful way to avoid burnout is not to spend 5 hours attempting to deploy your next web app. By combining a Web IDE with the cloud, &lt;a href="https://link.codesphere.com/BZ"&gt;Codesphere&lt;/a&gt; streamlines the deployment process, so you can spend less time configuring, and more time doing what your body and mind need.&lt;/p&gt;




&lt;p&gt;Thanks for reading! What advice do you have when you feel burnout?&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Learing ruby - day 3</title>
      <author>aderayevans</author>
      <pubDate>Mon, 02 Aug 2021 14:53:44 +0000</pubDate>
      <link>https://dev.to/aderayevans/learing-ruby-day-3-30gk</link>
      <guid>https://dev.to/aderayevans/learing-ruby-day-3-30gk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#table-of-contents"&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#take-user-input"&gt;Take user input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#convert"&gt;Convert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pass-multiple-arguments"&gt;Pass multiple arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#default-arguments"&gt;Default arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keyword-arguments"&gt;Keyword arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#block"&gt;Block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#proc"&gt;Proc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hey guys, welcome to my blog recording my ruby self-taught process&lt;/p&gt;

&lt;p&gt;I decided to learn this amazing language while I was trying to solving some ruby challenges to get my tenth badge in HackerRank&lt;/p&gt;

&lt;p&gt;At the first two days, We have learned about some common collections such as array and hash in ruby. We have also gotten to know with string.&lt;/p&gt;

&lt;p&gt;Today, we will learn more about methods and arguments &lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#take-user-input"&gt;
  &lt;/a&gt;
  Take user input
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;

&lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="s2"&gt;"hi\n"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I typed &lt;code&gt;hi&lt;/code&gt; and hit Enter&lt;/p&gt;

&lt;p&gt;As you can see, it also gets the NEWLINE character, which we don't want to.&lt;/p&gt;

&lt;p&gt;So use the chomp method we have learned before to delete that last character at every &lt;code&gt;gets&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;One more problem here&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gets&lt;/code&gt; just gets input as raw type, we need to convert it to other type to use it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt;

&lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We converted the input to integer, if you type a non-digit character, &lt;code&gt;i&lt;/code&gt; will be &lt;code&gt;0&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#convert"&gt;
  &lt;/a&gt;
  Convert
&lt;/h2&gt;

&lt;p&gt;Convert variable types in Ruby is pretty simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# String to integer&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt;
&lt;span class="c1"&gt;# String to float&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_f&lt;/span&gt;
&lt;span class="c1"&gt;# Anything to string&lt;/span&gt;
&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_str&lt;/span&gt;

&lt;span class="c1"&gt;# or if you want to catch error unless user type digit&lt;/span&gt;
&lt;span class="c1"&gt;# String to integer&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# String to float&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pass-multiple-arguments"&gt;
  &lt;/a&gt;
  Pass multiple arguments
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
    &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;str&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"the"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"end"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;*rest&lt;/code&gt; is a array of all arguments passed&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#default-arguments"&gt;
  &lt;/a&gt;
  Default arguments
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;increase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;increase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;increase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#keyword-arguments"&gt;
  &lt;/a&gt;
  Keyword arguments
&lt;/h2&gt;

&lt;p&gt;Convert Temperature program using keyword arguments input_scale and output_scale as default arguments&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;celsius_kelvin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;273.15&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;kelvin_celsius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;273.15&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;celsius_fahrenheit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fahrenheit_celsius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;kelvin_fahrenheit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;273.15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fahrenheit_kelvin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;273.15&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;convert_temp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;input_scale: &lt;/span&gt;&lt;span class="s1"&gt;'celsius'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;output_scale: &lt;/span&gt;&lt;span class="s1"&gt;'celsius'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;input_scale&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;output_scale&lt;/span&gt;
    &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_scale&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"_"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;output_scale&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"(&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;convert_temp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;input_scale: &lt;/span&gt;&lt;span class="s1"&gt;'kelvin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;output_scale: &lt;/span&gt;&lt;span class="s1"&gt;'celsius'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;convert_temp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;393&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;input_scale: &lt;/span&gt;&lt;span class="s1"&gt;'kelvin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;output_scale: &lt;/span&gt;&lt;span class="s1"&gt;'celsius'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;convert_temp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;input_scale: &lt;/span&gt;&lt;span class="s1"&gt;'fahrenheit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;output_scale: &lt;/span&gt;&lt;span class="s1"&gt;'celsius'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;convert_temp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;333&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;input_scale: &lt;/span&gt;&lt;span class="s1"&gt;'fahrenheit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;output_scale: &lt;/span&gt;&lt;span class="s1"&gt;'kelvin'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="m"&gt;-273&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;
&lt;span class="m"&gt;119&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;85000000000002&lt;/span&gt;
&lt;span class="m"&gt;204&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;44444444444443&lt;/span&gt;
&lt;span class="m"&gt;440&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;3722222222222&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could also set a hash parameter &lt;code&gt;**&lt;/code&gt; that helps user pass a key argument&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;str: &lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;num: &lt;/span&gt;&lt;span class="mi"&gt;424242&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each_pair&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;key: &lt;/span&gt;&lt;span class="s2"&gt;"val"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;key2: &lt;/span&gt;&lt;span class="s2"&gt;"val2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="nb"&gt;key&lt;/span&gt;
val
key2
val2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#block"&gt;
  &lt;/a&gt;
  Block
&lt;/h2&gt;

&lt;p&gt;Blocks are nameless methods that can be passed to another method as a parameter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call_block&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Start"&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"End"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; 

&lt;span class="c1"&gt;# Pass a block {puts "I'm in"} to call_block method&lt;/span&gt;
&lt;span class="c1"&gt;# We can pass with do..end&lt;/span&gt;
&lt;span class="n"&gt;call_block&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; 
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"I'm in"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# or&lt;/span&gt;
&lt;span class="n"&gt;call_block&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"I'm in"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Start
I&lt;span class="s1"&gt;'m in
End
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also pass a block to a method that takes parameters&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Start"&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"End"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; 

&lt;span class="n"&gt;call_block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Start
&lt;span class="nt"&gt;-11&lt;/span&gt;
End
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#proc"&gt;
  &lt;/a&gt;
  Proc
&lt;/h2&gt;

&lt;p&gt;"&lt;em&gt;A Proc object is an encapsulation of a block of code, which can be stored in a local variable, passed to a method or another Proc, and can be called.&lt;/em&gt;"&lt;/p&gt;

&lt;p&gt;If Block is a nameless method that can be passed to another method right after the method name&lt;/p&gt;

&lt;p&gt;Proc is now the object that holding block, we can pass it as a normal variable to another method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square_of_sum&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proc_sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proc_square&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;proc_sum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;proc_square&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;proc_sum_arr&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;proc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;proc_square_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;proc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;square_of_sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;proc_sum_arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;proc_square_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If Block codes are called by &lt;code&gt;yield&lt;/code&gt; key word&lt;/p&gt;

&lt;p&gt;Proc codes are called by call() method&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Today we have learned how to take user input, convert variables in ruby&lt;/p&gt;

&lt;p&gt;We also have learned some advanced ways to create methods and pass arguments&lt;/p&gt;

&lt;p&gt;Knowledged a closure object called Proc, and a nameless method called Block&lt;/p&gt;




&lt;p&gt;I'd like to thank HackerRank for giving me a chance to acknowledge and be interesting in this cool language&lt;/p&gt;

&lt;p&gt;If guys found Ruby is fascinating, please come to the link below and solve some Ruby challenges with me &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.hackerrank.com/domains/ruby"&gt;https://www.hackerrank.com/domains/ruby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any question or suggestion, please let me know at the comment section below.&lt;/p&gt;

&lt;p&gt;OK I'm going to wrap this up here&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Thanks for reading my blog&lt;/code&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>JavaScript ES6 keyed collections</title>
      <author>Guilherme Gules</author>
      <pubDate>Mon, 02 Aug 2021 14:52:32 +0000</pubDate>
      <link>https://dev.to/guilhermegules/javascript-es6-keyed-collections-544n</link>
      <guid>https://dev.to/guilhermegules/javascript-es6-keyed-collections-544n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;With Data Structures we can store, organize, order and handle data. We need to understand how and when use determinate structures.&lt;/p&gt;

&lt;p&gt;JavaScript has some built-in structures introduced on es6 version, even though these data structures have some time of existence has many developers has doubt about how to use them, today I wanna try to clarify the information about these.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#map"&gt;
  &lt;/a&gt;
  Map
&lt;/h2&gt;

&lt;p&gt;Map is an object and works as a common object, the major difference between them is because map lets you work with internal functions to make the insertion, deletion or get one element with a more simplistic form.&lt;/p&gt;

&lt;p&gt;Also, Map only permit a unique key with diferents values. So if I create a map like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const map = new Map();

map.set('first', 1);

console.log(map.get('first')); // 1

map.set('first', 100);

console.log(map.get('first')); // 100

console.log(map.size); // 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can note the value is changed but only one key as stored on our Map.&lt;/p&gt;

&lt;p&gt;Map is iterable, so we can use a for..of or for each to iterate through our structure and make operations there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const map = new Map();

map.set('first', 1);
map.set('second', 2);

for(let item of map) {
  console.log(item);
}

for(let [key, value] of map.entries()) {
  console.log(key, value);
}

for(let key of map.keys()) {
  console.log(key);
}

for(let value of map.values()) {
  console.log(value);
}

map.forEach((item, key) =&amp;gt; {
  console.log(key, item);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With &lt;code&gt;for...of&lt;/code&gt; each iteration return an array like this &lt;code&gt;[key, value]&lt;/code&gt;, with &lt;code&gt;forEach&lt;/code&gt; on each we have three parameters, first the value, them the key and finally the map itself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whywhen-use-map"&gt;
  &lt;/a&gt;
  Why/When use Map?
&lt;/h3&gt;

&lt;p&gt;We wanna use Map structure when it's necessary to keep control of information about the object, and we need to keep keys unique, also Map has a simple usage, so it's simple to get used to using.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weakmap"&gt;
  &lt;/a&gt;
  WeakMap
&lt;/h2&gt;

&lt;p&gt;WeakMap is a collection of key/value in which keys are weakly referenced. &lt;/p&gt;

&lt;p&gt;Because keys are weakly referenced, they cannot be enumerated, so we can't iterate them like Map and cannot obtain the keys. &lt;/p&gt;

&lt;p&gt;We can use WeakMaps like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const weakMap = new WeakMap();

const value1 = {};
const value2 = function(){};
const value3 = "I'm the third value";
const value4 = { foo: 'foo' };
const value5 = { key: 'foo' };

weakMap.set(value1, value2);

console.log(weakMap.has(value3)); // false

console.log(weakMap.get(value1)); // Returns the value based on key, in this case function() {}

weakMap.delete(value1);

weakMap.set(value5, value4);

console.log(weakMap.get(value5)); // Using a object that already in memory, we can access the position

weakMap.set({ myKey: 'myKey' }, {value: 1});

console.log(weakMap.get({ myKey: 'myKey' })); // Will return undefined, because the object on function call is one and the object on the set function is another
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: We can't use primitives values like keys with WeakMaps&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whywhen-use-weakmap"&gt;
  &lt;/a&gt;
  Why/When use WeakMap?
&lt;/h3&gt;

&lt;p&gt;Some use cases for WeakMaps, &lt;a href="https://stackoverflow.com/questions/29413222/what-are-the-actual-uses-of-es6-weakmap"&gt;here&lt;/a&gt; have some discussion on the topic, here I will put some tests and my understandings about the data structure: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When we need to handle some private data and do not want to iterate that data, only getting the specific property, WeakMap can be a good choice.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#set"&gt;
  &lt;/a&gt;
  Set
&lt;/h2&gt;

&lt;p&gt;Sets are collections that permits the storage of any type of unique values. With sets we can avoid duplicate data, remembering that objects references can be added like a new value too.&lt;/p&gt;

&lt;p&gt;We can use Sets like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const set = new Set();
set.add(1); // set [1]
set.add(5); // set [1, 5]
set.add(5); // 5 already was been setted, so set [1, 5]

const object = { foo: 'foo', bar: 'bar' };
set.add(object); 
set.add({ foo: 'foo', bar: 'bar' }); // This object will be added because is another reference
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's possible check if a value was inserted in our Set:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const set = new Set();

set.add(1);

set.has(1); // true

set.has(5); // false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also we can check the size of Sets:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const set = new Set();

set.add(1);
set.add(5);
set.add(10);

console.log(set.size) // 3

set.delete(10); // Removes 10 from our set

console.log(set.size); // 2 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like Maps, Sets can also be iterated:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const set = new Set();

set.add(1);
set.add("text");
set.add({foo: 'bar', bar: 'foo'});

for(let item of set) {
  console.log(item); 
}

// Keys will have the inserted values
for (let item of set.keys()) {
  console.log(item)
}

/**
 * key and values are the same here
 */
for (let [key, value] of set.entries()) {
  console.log(key);
  console.log(value);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using spread operator we can create a copy of a Set and use as an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const set = new Set();

set.add(1);
set.add("text");
set.add({foo: 'bar', bar: 'foo'});

const setToArray = [...set];

setToArray.forEach(item =&amp;gt; {
  console.log(item);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#whywhen-use-set"&gt;
  &lt;/a&gt;
  Why/When use Set?
&lt;/h3&gt;

&lt;p&gt;We would like to use Sets when it's necessary to keep unique values without the need to use key/value on our structure. For that Sets are the best choice because they will keep the consistency of our data.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: it's valid to think about the objects references example because even though you pass the same object to the set, it will be saved because are different references.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weakset"&gt;
  &lt;/a&gt;
  WeakSet
&lt;/h2&gt;

&lt;p&gt;WeakSet objects permit you to store weakly held objects. Like as Set collection, WeakSet will permits each object occurrence only once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What the difference of WeakSet and Set?&lt;/strong&gt; WeakSet only accepts objects, so they cannot contain any values like Sets. Another difference is like the WeakMap, WeakSet has weak references of the objects they held, if no other references of an object store exist this object can be garbage collected. Last but not less important, the WeekMap collection cannot be enumerable.&lt;/p&gt;

&lt;p&gt;In the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet"&gt;documentation&lt;/a&gt; have some interesting example about the usage of that structure.&lt;/p&gt;

&lt;p&gt;Simple example of using WeakSet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const weakSet = new WeakSet();
const foo = {};
const bar = {};

weakSet.add(foo);
weakSet.add(bar);

console.log(weakSet.has(foo)); // true 
console.log(weakSet.has(bar)); // true

weakSet.delete(foo); 

console.log(weakSet.has(foo)); // false    
console.log(weakSet.has(bar)); // true
console.log(weakSet.has({})); // false because is another reference    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Key equality is based on the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality"&gt;sameValueZero&lt;/a&gt; algorithm&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections"&gt;Keyed collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects"&gt;Standard built-in objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Build a React App with Authorization and Authentication</title>
      <author>Ali Spittel</author>
      <pubDate>Mon, 02 Aug 2021 14:42:40 +0000</pubDate>
      <link>https://dev.to/aspittel/build-a-react-app-with-authorization-and-authentication-1mha</link>
      <guid>https://dev.to/aspittel/build-a-react-app-with-authorization-and-authentication-1mha</guid>
      <description>&lt;p&gt;In this tutorial, we'll be talking about authorization and how to implement it with AWS Amplify's DataStore. First, let's get on the same page with what authorization and authentication are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authorization&lt;/strong&gt; - Different users have different actions that they can perform. &lt;strong&gt;Authentication&lt;/strong&gt; - making sure someone is who they say they are, for example through making them enter a password.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/U5Ls-RspRv8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This tutorial will be bypassing teaching React and AWS Amplify - check out &lt;a href="https://welearncode.com/beginners-guide-react/"&gt;this React tutorial&lt;/a&gt; and &lt;a href="https://welearncode.com/intro-amplify-admin-ui/"&gt;this Amplify Admin UI tutorial&lt;/a&gt; if you're new to either. You'll also need to know &lt;a href="https://reactrouter.com/"&gt;React Router&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I created a repo with some &lt;a href="https://github.com/aspittel/react-authorization"&gt;starter code&lt;/a&gt; in order to get to the relevant pieces of the tutorial. Go ahead and clone it down if you want to follow along. Run &lt;code&gt;npm i&lt;/code&gt; within the cloned directory to get all the needed packages installed.&lt;/p&gt;

&lt;p&gt;We'll be building a blogging platform with a frontend and backend authentication system with admin roles and certain actions restricted to content's creators. We'll first have blogs -- similar to Medium publications or Blogger blogs. Only admin users will be able to create new blogs, though anybody can view a list of the blogs. Blogs will have posts within them that anyone can view, but only the person who created the blog will be able to update or delete blogs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-blog-using-the-admin-ui"&gt;
  &lt;/a&gt;
  Create a Blog using the Admin UI
&lt;/h2&gt;

&lt;p&gt;First, we'll need to create the data models for our app. You can go to &lt;a href="https://sandbox.amplifyapp.com/getting-started"&gt;the Amplify Sandbox&lt;/a&gt; in order to get started. We'll create two models, a Blog and a Post. The Blog will be a publication that has a collection of Posts attached to it. The Blog will just have a name, and then Blog will have a title, content, and owner. All fields will be strings, I also made name and title required fields. There will also be a 1:n relationship between the two models.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7uOYq3h8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/auth-react/medium-models.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7uOYq3h8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/auth-react/medium-models.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, go ahead and deploy your data models by following the guided process the Admin UI offers. Once it deploys, go into the Admin UI and create a few blogs and a few posts.&lt;/p&gt;

&lt;p&gt;Then, we'll add authentication. In the Admin UI, click on "Authentication" tab and then configure auth. I deployed with the default options.&lt;/p&gt;

&lt;p&gt;Once your authentication is deployed, add in authorization rules. First, click on the Blog model and on the right-hand panel, configure authorization. Uncheck create, update, and delete from under "Anyone authenticated with API Key can..." -- we'll allow anyone to view a blog but only admins to mutate them. Then, click the add an authorization rule dropdown. From here click "Create new" under "Specific Group", and name your group "admin". Allow admin users to perform all actions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9X0o8UB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/auth-react/blog-auth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9X0o8UB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/auth-react/blog-auth.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we'll configure authorization for posts. Select that model, and again change the permissions for "Anyone authenticated with API Key" to "Read" a post. Then toggle the "Enable owner authorization" to the on state. Under "Deny other authenticated users to perform these operations on an owner’s record:" select "Update" and "Delete" -- we want anyone to be able to read a post, but only the post's owner should be able to mutate existing posts. We also need to allow someone to be able to create posts! Under "add authorization rule" and then "Any signed-in users authenticated using" and then choose "Cognito".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EXOOi75i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/auth-react/post-auth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EXOOi75i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/auth-react/post-auth.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, go to the "User management" page and create a user. Make sure to use the same email that you used for the "owner" field when you created posts before! Also, add a few to an "admin" page.&lt;/p&gt;

&lt;p&gt;Back in your code's directory, run Amplify pull with your app id -- you can find this command under "local setup instructions" in the Admin UI. If you're not using the cloned repository from above, install the Amplify JavaScript and React libraries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm i aws-amplify @aws-amplify/ui-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll also need to configure Amplify in your &lt;code&gt;index.js&lt;/code&gt; file so that your frontend is linked to your Amplify configuration. You'll also need to configure multi-auth within this step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Amplify, { AuthModeStrategyType } from 'aws-amplify'
import awsconfig from './aws-exports'

Amplify.configure({
  ...awsconfig,
  DataStore: {
    authModeStrategyType: AuthModeStrategyType.MULTI_AUTH
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implement-authentication"&gt;
  &lt;/a&gt;
  Implement Authentication
&lt;/h2&gt;

&lt;p&gt;First, we'll need to implement authentication for our site so that users can log in and different accounts can perform different actions. I created a &lt;code&gt;&amp;lt;SignIn&amp;gt;&lt;/code&gt; component with a route to it. Then, add the &lt;code&gt;withAuthenticator&lt;/code&gt; higher order component to implement a user authentication flow!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// SignIn.js

import { withAuthenticator } from '@aws-amplify/ui-react'
import React from 'react'

import { Link } from 'react-router-dom'

function SignIn () {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;
      &amp;lt;Link to='/'&amp;gt;home&amp;lt;/Link&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

+ export default withAuthenticator(SignIn)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'll load all the blogs on to the home page of the app. I'm starting with the following code that will implement different routes for my app. If you're using the cloned boilerplate, you'll already have this in your code. You'll also want to create React components for &lt;code&gt;BlogPage&lt;/code&gt;, &lt;code&gt;PostPage&lt;/code&gt;, and &lt;code&gt;BlogCreate&lt;/code&gt; -- these can just be empty components for now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import './App.css'

import { Auth } from 'aws-amplify'
import { DataStore } from '@aws-amplify/datastore'
import { useEffect, useState } from 'react'
import { Switch, Route, Link } from 'react-router-dom'

import BlogPage from './BlogPage'
import PostPage from './PostPage'
import BlogCreate from './BlogCreate'
import SignIn from './SignIn'

import { Blog } from './models'

function App () {
  const [blogs, setBlogs] = useState([])

  return (
    &amp;lt;div className='App'&amp;gt;
      &amp;lt;Switch&amp;gt;
        &amp;lt;Route path='/sign-in'&amp;gt;
          &amp;lt;SignIn /&amp;gt;
        &amp;lt;/Route&amp;gt;
        &amp;lt;Route path='/blog/create'&amp;gt;
          &amp;lt;BlogCreate isAdmin={isAdmin} /&amp;gt;
        &amp;lt;/Route&amp;gt;
        &amp;lt;Route path='/blog/:name'&amp;gt;
          &amp;lt;BlogPage user={user} /&amp;gt;
        &amp;lt;/Route&amp;gt;
        &amp;lt;Route path='/post/:name'&amp;gt;
          &amp;lt;PostPage user={user} /&amp;gt;
        &amp;lt;/Route&amp;gt;
        &amp;lt;Route path='/' exact&amp;gt;
          &amp;lt;h1&amp;gt;Blogs&amp;lt;/h1&amp;gt;
          {blogs.map(blog =&amp;gt; (
            &amp;lt;Link to={`/blog/${blog.name}`} key={blog.id}&amp;gt;
              &amp;lt;h2&amp;gt;{blog.name}&amp;lt;/h2&amp;gt;
            &amp;lt;/Link&amp;gt;
          ))}
        &amp;lt;/Route&amp;gt;
      &amp;lt;/Switch&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

export default App
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;&amp;lt;App&amp;gt;&lt;/code&gt; component, first import the &lt;code&gt;Blog&lt;/code&gt; model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Blog } from './models'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, create a &lt;code&gt;useEffect&lt;/code&gt; which will be used to pull data to that component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// create a state variable for the blogs to be stored in
const [blogs, setBlogs] = useState([])

useEffect(() =&amp;gt; {
  const getData = async () =&amp;gt; {
    try {
      // query for all blog posts, then store them in state
      const blogData = await DataStore.query(Blog)
      setBlogs(blogData)
    } catch (err) {
      console.error(err)
    }
  }
  getData()
}, [])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'll want to fetch the current user if there is one. We'll also want to check and see if that user is an admin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [blogs, setBlogs] = useState([])
+ const [isAdmin, setIsAdmin] = useState(false)
+ const [user, setUser] = useState({})

useEffect(() =&amp;gt; {
  const getData = async () =&amp;gt; {
    try {
      const blogData = await DataStore.query(Blog)
      setBlogs(blogData)
      // fetch the current signed in user
+ const user = await Auth.currentAuthenticatedUser()
      // check to see if they're a member of the admin user group
+ setIsAdmin(user.signInUserSession.accessToken.payload['cognito:groups'].includes('admin'))
+ setUser(user)
    } catch (err) {
      console.error(err)
    }
  }
  getData()
}, [])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we'll want to render different information depending if the user is signed in or not. First, if the user is signed in, we'll want to show a sign out button. If they're logged out, we'll want to give them a link to the sign in form. We can do this with the following ternary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{user.attributes 
  ? &amp;lt;button onClick={async () =&amp;gt; await Auth.signOut()}&amp;gt;Sign Out&amp;lt;/button&amp;gt; 
  : &amp;lt;Link to='/sign-in'&amp;gt;Sign In&amp;lt;/Link&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also add this snippet to make it so that admin users have a link to create a new blog.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{isAdmin &amp;amp;&amp;amp; &amp;lt;Link to='/blog/create'&amp;gt;Create a Blog&amp;lt;/Link&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I added both lines to the home route for my site.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;Route path='/' exact&amp;gt;
    &amp;lt;h1&amp;gt;Blogs&amp;lt;/h1&amp;gt;
+ {user.attributes 
+ ? &amp;lt;button onClick={async () =&amp;gt; await Auth.signOut()}&amp;gt;Sign Out&amp;lt;/button&amp;gt; 
+ : &amp;lt;Link to='/sign-in'&amp;gt;Sign In&amp;lt;/Link&amp;gt;}
+ {isAdmin &amp;amp;&amp;amp; &amp;lt;Link to='/blog/create'&amp;gt;Create a Blog&amp;lt;/Link&amp;gt;}
    {blogs.map(blog =&amp;gt; (
      &amp;lt;Link to={`/blog/${blog.name}`} key={blog.id}&amp;gt;
        &amp;lt;h2&amp;gt;{blog.name}&amp;lt;/h2&amp;gt;
      &amp;lt;/Link&amp;gt;
    ))}
  &amp;lt;/Route&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the &lt;a href="https://github.com/aspittel/react-authorization/blob/finished/src/App.js"&gt;completed code&lt;/a&gt; for the App component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blog-page"&gt;
  &lt;/a&gt;
  Blog Page
&lt;/h2&gt;

&lt;p&gt;Now, we'll implement the component that shows one blog. We'll first query to get the blog's information, then get the posts attached to it. In my app, I used React Router to create blog detail pages for each blog that follow the url pattern &lt;code&gt;/blog/:blogName&lt;/code&gt;. I'll then use the &lt;code&gt;:blogName&lt;/code&gt; to get all of that blog's information.&lt;/p&gt;

&lt;p&gt;I'll start with a page that renders each post:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { DataStore } from 'aws-amplify'
import { useEffect, useState } from 'react'
import { useParams, Link } from 'react-router-dom'

import { Post, Blog } from './models'

export default function BlogPage ({ user }) {
  const { name } = useParams()

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;
      {
        posts.map(post =&amp;gt; (
          &amp;lt;h2 key={post.id}&amp;gt;
            &amp;lt;Link to={`/post/${post.title}`}&amp;gt;
              {post.title}
            &amp;lt;/Link&amp;gt;
          &amp;lt;/h2&amp;gt;)
        )
    }
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I'll add this &lt;code&gt;useEffect&lt;/code&gt; in order to load all the posts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// body of BlogPage component inside BlogPage.js

  const [posts, setPosts] = useState([])
  useEffect(() =&amp;gt; {
    const getData = async () =&amp;gt; {
      // find the blog whose name equals the one in the url
      const data = await DataStore.query(Blog, p =&amp;gt; p.name('eq', name))
      // find all the posts whose blogID matches the above post's id
      const posts = await DataStore.query(Post, p =&amp;gt; p.blogID('eq', data[0].id))
      setPosts(posts)
    }
    getData()
  }, [])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/aspittel/react-authorization/blob/finished/src/BlogPage.js"&gt;Final code&lt;/a&gt; for the BlogPage component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blog-create"&gt;
  &lt;/a&gt;
  Blog Create
&lt;/h2&gt;

&lt;p&gt;Let's also make it so that people can create a new blog. Inside of the &lt;code&gt;&amp;lt;BlogCreate&amp;gt;&lt;/code&gt; component. First, create a standard React form that will allow a user to create a new blog.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { DataStore } from 'aws-amplify'
import { useState } from 'react'

import { Blog } from './models'

export default function BlogCreate ({ isAdmin }) {
  const [name, setName] = useState('')

  const createBlog = async e =&amp;gt; {
    e.preventDefault()
  }

    return (
      &amp;lt;form onSubmit={createBlog}&amp;gt;
        &amp;lt;h2&amp;gt;Create a Blog&amp;lt;/h2&amp;gt;
        &amp;lt;label htmlFor='name'&amp;gt;Name&amp;lt;/label&amp;gt;
        &amp;lt;input type='text' id='name' onChange={e =&amp;gt; setName(e.target.value)} /&amp;gt;
        &amp;lt;input type='submit' value='create' /&amp;gt;
      &amp;lt;/form&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, implement the &lt;code&gt;createBlog&lt;/code&gt; function by adding the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const createBlog = async e =&amp;gt; {
  e.preventDefault()
  // create a new blog instance and save it to DataStore
  const newBlog = await DataStore.save(new Blog({
    name
  }))
  console.log(newBlog)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, add a conditional around the form - we only want to render it if the user is an admin!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  if (!isAdmin) {
    return &amp;lt;h2&amp;gt;You aren't allowed on this page!&amp;lt;/h2&amp;gt;
  } else {
    return (
      &amp;lt;form&amp;gt;
       ...
      &amp;lt;/form&amp;gt;
    )
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's &lt;a href="https://github.com/aspittel/react-authorization/blob/finished/src/PostPage.js"&gt;this component&lt;/a&gt; all together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#post-page"&gt;
  &lt;/a&gt;
  Post Page
&lt;/h2&gt;

&lt;p&gt;Last component to implement! This one's the post detail page. We'll implement an edit form so that content owners can edit their posts. First, create a React form for the post. We'll again use React Router to send the name of the post to the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { DataStore } from 'aws-amplify'
import { useEffect, useState } from 'react'
import { useParams, Link } from 'react-router-dom'

import { Post } from './models'

export default function BlogPage ({ user }) {
  const { name } = useParams()

  const [post, setPost] = useState([])
  const [title, setTitle] = useState('')
  const [content, setContent] = useState('')

  const handleSubmit = async e =&amp;gt; {
    e.preventDefault()
  }
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;
      &amp;lt;form onSubmit={handleSubmit}&amp;gt;
        &amp;lt;label&amp;gt;Title&amp;lt;/label&amp;gt;
        &amp;lt;input type='text' value={title} onChange={e =&amp;gt; setTitle(e.target.value)} /&amp;gt;
        &amp;lt;label&amp;gt;Content&amp;lt;/label&amp;gt;
        &amp;lt;input type='text' value={content} onChange={e =&amp;gt; setContent(e.target.value)} /&amp;gt;
        &amp;lt;input type='submit' value='update' /&amp;gt;
      &amp;lt;/form&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we'll create a &lt;code&gt;useEffect&lt;/code&gt; that will get the information about the post from DataStore and render it in the form. Note that this won't work well if you have two posts with the same name! In a larger-scale app you'd want to have some differentiator in the urls for each post.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;useEffect(() =&amp;gt; {
  const getData = async () =&amp;gt; {
    const posts = await DataStore.query(Post, p =&amp;gt; p.title('eq', name))
    setPost(posts[0])
    setTitle(posts[0].title)
    setContent(posts[0].content)
  }
  getData()
}, [])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'll need to implement the handleSubmit. We'll want to copy the original post, update the needed attributes and save them to DataStore.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const handleSubmit = async e =&amp;gt; {
  e.preventDefault()
  await DataStore.save(Post.copyOf(post, updated =&amp;gt; {
    updated.title = title
    updated.content = content
  }))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, within the &lt;code&gt;return&lt;/code&gt;, we'll only want to render the form if the user owns the post. Outside the form, add the following conditional to only render it if the post owner is that user!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; {user.attributes &amp;amp;&amp;amp; (post.owner === user.attributes.email) &amp;amp;&amp;amp; (
   &amp;lt;form onSubmit={handleSubmit}&amp;gt;
   ...
   &amp;lt;/form&amp;gt;
 )}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the component's &lt;a href="https://github.com/aspittel/react-authorization/blob/finished/src/PostPage.js"&gt;final code&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this post, we use Amplify's DataStore multi-auth to implement different permissions based on the user's role and ownership of content. You could keep extending this with more forms, styling, and data rendering. I'd love to hear your thoughts on this app and this new Amplify feature!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>aws</category>
    </item>
    <item>
      <title>The Next Evolution of GraphQL Front Ends</title>
      <author>Benny Powers 🇮🇱🇨🇦</author>
      <pubDate>Mon, 02 Aug 2021 14:32:20 +0000</pubDate>
      <link>https://dev.to/bennypowers/the-next-evolution-of-graphql-front-ends-egf</link>
      <guid>https://dev.to/bennypowers/the-next-evolution-of-graphql-front-ends-egf</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally posted on the &lt;a href="https://apolloelements.dev/blog/next-evolution/"&gt;Apollo Elements blog&lt;/a&gt;. Read there to enjoy interactive demos.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Apollo Elements has come a long way since its first release as &lt;code&gt;lit-apollo&lt;/code&gt; in 2017. What started as a way to build GraphQL-querying LitElements has blossomed into a &lt;a href="https://apolloelements.dev/api/libraries/"&gt;multi-library&lt;/a&gt;, multi-paradigm project with &lt;a href="https://apolloelements.dev/api/"&gt;extensive docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today we're releasing the next version of Apollo Elements' packages, including a major change: introducing GraphQL Controllers, and GraphQL HTML Elements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reactive-graphql-controllers"&gt;
  &lt;/a&gt;
  Reactive GraphQL Controllers
&lt;/h2&gt;

&lt;p&gt;The latest version of &lt;a href="https://lit.dev"&gt;Lit&lt;/a&gt; introduced a concept called "reactive controllers". They're a way to pack up reusable functionality in JavaScript classes that you can share between elements. If you've use JavaScript class mixins before (&lt;em&gt;not&lt;/em&gt; the same as React mixins), they you're familiar with sharing code between elements. Controllers go one-better by being sharable and composable without requiring you to apply a mixin to the host element, as long as it implements the &lt;a href="https://lit.dev/docs/composition/controllers/#controller-host-api"&gt;&lt;code&gt;ReactiveControllerHost&lt;/code&gt;&lt;/a&gt; interface.&lt;/p&gt;

&lt;p&gt;You can even have multiple copies of the same controller active on a given host. In the words of the Lit team, controllers represent a "has a _" relationship to the host element, where mixins represent an "is a _" relationship.&lt;/p&gt;

&lt;p&gt;For Apollo Elements, it means now you can add many GraphQL operations to one component, like multiple queries or a query and a mutation. Here's an interactive example of the latter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TextField&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@material/mwc-textfield&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApolloQueryController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ApolloMutationController&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@apollo-elements/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;customElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lit/decorators.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UsersQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AddUserMutation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./graphql.documents.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Users.css.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;customElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users-view&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UsersView&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mwc-textfield&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;nameField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApolloQueryController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UsersQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;addUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApolloMutationController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AddUserMutation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;awaitRefetchQueries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;refetchQueries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UsersQuery&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nameField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`
      &amp;lt;form&amp;gt;
        &amp;lt;h2&amp;gt;Add a New User&amp;lt;/h2&amp;gt;
        &amp;lt;mwc-textfield label="Name" ?disabled="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&amp;lt;/mwc-textfield&amp;gt;
        &amp;lt;mwc-linear-progress indeterminate ?closed="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&amp;lt;/mwc-linear-progress&amp;gt;
        &amp;lt;mwc-button label="Submit" ?disabled="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" @click="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&amp;lt;/mwc-button&amp;gt;
      &amp;lt;/form&amp;gt;
      &amp;lt;h2&amp;gt;All Users&amp;lt;/h2&amp;gt;
      &amp;lt;mwc-list&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`
        &amp;lt;mwc-list-item noninteractive graphic="avatar"&amp;gt;
          &amp;lt;img slot="graphic" ?hidden="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" .src="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" role="presentation"/&amp;gt;
          &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
        &amp;lt;/mwc-list-item&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;
      &amp;lt;/mwc-list&amp;gt;
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://apolloelements.dev/blog/next-evolution/#multiple-controllers"&gt;&lt;em&gt;View a Live Demo of this snippet&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Controllers are great for lots of reasons. One reason we've found while developing and testing Apollo Elements is that unlike the class-based API of e.g. &lt;code&gt;@apollo-elements/lit-apollo&lt;/code&gt; or &lt;code&gt;@apollo-elements/mixins&lt;/code&gt;, when using controllers there's no need to pass in type parameters to the host class. By passing a &lt;a href="https://github.com/dotansimha/graphql-typed-document-node"&gt;TypedDocumentNode&lt;/a&gt; object as the argument to the controller, you'll get that typechecking and autocomplete you know and love in your class template and methods, without awkward &lt;code&gt;&amp;lt;DataType, VarsType&amp;gt;&lt;/code&gt; class generics.&lt;/p&gt;

&lt;p&gt;If you're working on an existing app that uses Apollo Elements' base classes, not to worry, you can still &lt;code&gt;import { ApolloQuery } from '@apollo-elements/lit-apollo'&lt;/code&gt;, We worked hard to keep the breaking changes to a minimum. Those base classes now use the controllers at their heart, so go ahead: mix-and-match query components with controller-host components in your app, it won't bloat your bundles.&lt;/p&gt;

&lt;p&gt;We hope you have as much fun using Apollo Elements controllers as we've had writing them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dynamic-graphql-templates-in-html"&gt;
  &lt;/a&gt;
  Dynamic GraphQL Templates in HTML
&lt;/h2&gt;

&lt;p&gt;The previous major version of &lt;code&gt;@apollo-elements/components&lt;/code&gt; included &lt;code&gt;&amp;lt;apollo-client&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;apollo-mutation&amp;gt;&lt;/code&gt;. Those are still here and they're better than ever, but now they're part of a set with &lt;code&gt;&amp;lt;apollo-query&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;apollo-subscription&amp;gt;&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;With these new elements, and their older sibling &lt;code&gt;&amp;lt;apollo-mutation&amp;gt;&lt;/code&gt;, you can write entire GraphQL apps in nothing but HTML. You read that right, declarative, data-driven GraphQL apps in HTML. You still have access to the Apollo Client API, so feel free to sprinkle in a little JS here and there for added spice.&lt;/p&gt;

&lt;p&gt;This is all made possible by a pair of libraries from the Lit team's Justin Fagnani called &lt;a href="https://github.com/justinfagnani/stampino/"&gt;Stampino&lt;/a&gt; and &lt;a href="https://github.com/justinfagnani/jexpr/"&gt;jexpr&lt;/a&gt;. Together, they let you define dynamic parts in HTML &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; elements, filling them with JavaScript expressions based on your GraphQL data.&lt;/p&gt;

&lt;p&gt;Here's the demo app from above, but written in HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;apollo-client&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;apollo-query&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"application/graphql"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"Users.query.graphql"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Add a New User&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;apollo-mutation&lt;/span&gt; &lt;span class="na"&gt;refetch-queries=&lt;/span&gt;&lt;span class="s"&gt;"Users"&lt;/span&gt; &lt;span class="na"&gt;await-refetch-queries&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"application/graphql"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"AddUser.mutation.graphql"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;mwc-textfield&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"Name"&lt;/span&gt;
                       &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;
                       &lt;span class="na"&gt;data-variable=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;
                       &lt;span class="na"&gt;.disabled=&lt;/span&gt;&lt;span class="s"&gt;"{{ loading }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/mwc-textfield&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;mwc-button&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"Submit"&lt;/span&gt;
                    &lt;span class="na"&gt;trigger&lt;/span&gt;
                    &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;
                    &lt;span class="na"&gt;.disabled=&lt;/span&gt;&lt;span class="s"&gt;"{{ loading }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/mwc-button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;mwc-linear-progress&lt;/span&gt; &lt;span class="na"&gt;indeterminate&lt;/span&gt; &lt;span class="na"&gt;.closed=&lt;/span&gt;&lt;span class="s"&gt;"{{ !loading }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/mwc-linear-progress&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/apollo-mutation&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;All Users&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;mwc-list&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"repeat"&lt;/span&gt; &lt;span class="na"&gt;repeat=&lt;/span&gt;&lt;span class="s"&gt;"{{ data.users ?? [] }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;mwc-list-item&lt;/span&gt; &lt;span class="na"&gt;noninteractive&lt;/span&gt; &lt;span class="na"&gt;graphic=&lt;/span&gt;&lt;span class="s"&gt;"avatar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;.src=&lt;/span&gt;&lt;span class="s"&gt;"{{ item.picture }}"&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"graphic"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            {{ item.name }}
          &lt;span class="nt"&gt;&amp;lt;/mwc-list-item&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/mwc-list&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/apollo-query&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/apollo-client&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"components.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://apolloelements.dev/blog/next-evolution/#html-components"&gt;&lt;em&gt;View a Live Demo of this snippet&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's a tonne of potential here and we're very keen to see what you come up with using these new components. Bear in mind that the stampino API isn't stable yet: there may be changes coming down the pipe in the future, but we'll do our best to keep those changes private.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-flexible-html-mutations"&gt;
  &lt;/a&gt;
  More Flexible HTML Mutations
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;apollo-mutation&amp;gt;&lt;/code&gt; component lets you declare GraphQL mutations in HTML. Now, the latest version gives you more options to layout your pages. Add a stampino template to render the mutation result into the light or shadow DOM. Use the &lt;code&gt;variable-for="&amp;lt;id&amp;gt;"&lt;/code&gt; and &lt;code&gt;trigger-for="&amp;lt;id&amp;gt;"&lt;/code&gt; attributes on sibling elements to better integrate with 3rd-party components, and specify the event which triggers the mutation by specifying a value to the &lt;code&gt;trigger&lt;/code&gt; attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/@shoelace-style/shoelace@2.0.0-beta.47/dist/themes/base.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/@shoelace-style/shoelace@2.0.0-beta.47/dist/shoelace.js?module"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;sl-button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"toggle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Add a User&lt;span class="nt"&gt;&amp;lt;/sl-button&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;sl-dialog&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"Add User"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;sl-input&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"What is your name?"&lt;/span&gt;
            &lt;span class="na"&gt;variable-for=&lt;/span&gt;&lt;span class="s"&gt;"add-user-mutation"&lt;/span&gt;
            &lt;span class="na"&gt;data-variable=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/sl-input&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;sl-button&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;
             &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;
             &lt;span class="na"&gt;trigger-for=&lt;/span&gt;&lt;span class="s"&gt;"add-user-mutation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Add&lt;span class="nt"&gt;&amp;lt;/sl-button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/sl-dialog&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;apollo-mutation&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"add-user-mutation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"application/graphql"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"AddUser.mutation.graphql"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;sl-alert&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt; &lt;span class="na"&gt;duration=&lt;/span&gt;&lt;span class="s"&gt;"3000"&lt;/span&gt; &lt;span class="na"&gt;closable&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="na"&gt;open=&lt;/span&gt;&lt;span class="s"&gt;"{{ data }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;sl-icon&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"info-circle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/sl-icon&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Added {{ data.addUser.name }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/sl-alert&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/apollo-mutation&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"imports.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sl-dialog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add-user-mutation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="nx"&gt;mutation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mutation-completed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Demonstrating how to use &lt;code&gt;&amp;lt;apollo-mutation&amp;gt;&lt;/code&gt; with &lt;a href="https://shoelace.style"&gt;Shoelace&lt;/a&gt; web components. &lt;a href="https://apolloelements.dev/blog/next-evolution/#shoelace"&gt;&lt;em&gt;View a Live Demo of this snippet&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#atomico-support"&gt;
  &lt;/a&gt;
  Atomico support
&lt;/h2&gt;

&lt;p&gt;On the heels of the controllers release, we're happy to add a new package to the roster. Apollo Elements now has first-class support for &lt;a href="https://atomico.gitbook.io"&gt;Atomico&lt;/a&gt;, a new hooks-based web components library with JSX or template-string templating.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@apollo-elements/atomico&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LaunchesQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Launches.query.graphql.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Launches&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LaunchesQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;launches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;launchesPast&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;host&lt;/span&gt; &lt;span class="na"&gt;shadowDom&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"launches.css"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;launches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mission_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mission_patch_small&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Badge"&lt;/span&gt; &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"presentation"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spacex-launches&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Launches&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fast-behaviors"&gt;
  &lt;/a&gt;
  FAST Behaviors
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://fast.design"&gt;FAST&lt;/a&gt; is an innovative web component library and design system from Microsoft. Apollo Elements added support for FAST in 2020, in the form of &lt;code&gt;Apollo*&lt;/code&gt; base classes. The latest release transitions to FAST &lt;a href="https://www.fast.design/docs/api/fast-element.controller.addbehaviors"&gt;Behaviors&lt;/a&gt;, which are analogous to Lit &lt;code&gt;ReactiveControllers&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;customElement&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserProfile&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;FASTElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApolloQueryBehavior&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MyProfileQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;updateProfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApolloMutationBehavior&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UpdateProfileMutation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeQuery&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MyProfileQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateProfile&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The FAST team were instrumental in getting this feature over the line, so many thanks to them.&lt;/p&gt;

&lt;p&gt;If you're already using &lt;code&gt;@apollo-elements/fast&lt;/code&gt;, we recommend migrating your code to behaviors as soon as you're able, but you can continue to use the element base classes, just change your import paths to &lt;code&gt;/bases&lt;/code&gt;. These may be removed in the &lt;em&gt;next&lt;/em&gt; major release, though.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;-  import { ApolloQuery } from '@apollo-elements/fast/apollo-query';
&lt;/span&gt;&lt;span class="gi"&gt;+  import { ApolloQuery } from '@apollo-elements/fast/bases/apollo-query';
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#new-and-improved-docs"&gt;
  &lt;/a&gt;
  New and Improved Docs
&lt;/h2&gt;

&lt;p&gt;It wouldn't be an Apollo Elements release without some docs goodies. This time, in addition to new and updated docs and guides for components and controllers, we've replaced our webcomponents.dev iframes with &lt;code&gt;&amp;lt;playground-ide&amp;gt;&lt;/code&gt; elements. All the "Edit Live" demos on this site, including the ones in this blog post, are running locally in your browser via a service worker. Talk about serverless, &lt;em&gt;amirite&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;The docs also got a major upgrade care of Pascal Schilp's untiring work in the &lt;a href="https://www.w3.org/community/webcomponents/"&gt;Webcomponents Community Group&lt;/a&gt; to get the custom elements manifest v1 published. This latest iteration of the API docs generates package manifests directly from source code, and converts them to API docs via &lt;a href="https://rocket.modern-web.dev"&gt;Rocket&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ssr"&gt;
  &lt;/a&gt;
  SSR
&lt;/h2&gt;

&lt;p&gt;As part of the release, we updated our demo apps &lt;a href="https://leeway.apolloelements.dev"&gt;leeway&lt;/a&gt; and &lt;a href="https://launchctl.apolloelements.dev"&gt;LaunchCTL&lt;/a&gt;. In the case of leeway, we took the opportunity to implement extensive SSR with the help of a new browser standard called &lt;a href="https://web.dev/declarative-shadow-dom/"&gt;Declarative Shadow DOM&lt;/a&gt;. It's early days for this technique but it's already looking very promising. You can try it out in any chromium browser (Chrome, Brave, Edge, Opera) by disabling JavaScript and visiting &lt;a href="https://leeway.apolloelements.dev"&gt;https://leeway.apolloelements.dev&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#behind-the-scenes"&gt;
  &lt;/a&gt;
  Behind the Scenes
&lt;/h2&gt;

&lt;p&gt;Bringing this release into the light involved more than just refactoring and updating the &lt;code&gt;apollo-elements/apollo-elements&lt;/code&gt; repo. It represents work across many projects, including PRs to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/justinfagnani/stampino/pulls?q=is%3Apr+is%3Aclosed+merged%3A%3C2021-06-01+merged%3A%3E2021-01+"&gt;Stampino&lt;/a&gt; and &lt;a href="https://github.com/justinfagnani/jexpr/pulls?q=is%3Apr+is%3Aclosed+merged%3A%3E2021-01"&gt;jexpr&lt;/a&gt;, to iron out bugs, decrease bundle size, and add features&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hybridsjs/hybrids/pull/167"&gt;Hybrids&lt;/a&gt;, to add support for reactive controllers&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/atomicojs/hooks/pull/7"&gt;Atomico&lt;/a&gt; and &lt;a href="https://github.com/matthewp/haunted/pull/239"&gt;Haunted&lt;/a&gt;, to add the &lt;code&gt;useController&lt;/code&gt; hook which underlies &lt;code&gt;useQuery&lt;/code&gt; and co.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, here in apollo-elements, we added the &lt;a href="https://dev.to/api/libraries/mixins/controller-host-mixin/"&gt;&lt;code&gt;ControllerHostMixin&lt;/code&gt;&lt;/a&gt; as a way to maintain the previous element-per-graphql-document API without breaking backwards (too much). You can use this generic mixin to add controller support to any web component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fixes-and-enhancements"&gt;
  &lt;/a&gt;
  Fixes and Enhancements
&lt;/h2&gt;

&lt;p&gt;The last release included support for the web components hooks library &lt;a href="https://github.com/matthewp/haunted"&gt;haunted&lt;/a&gt;, but that support hid a dirty little secret within. Any time you called a hook inside a Haunted function component, apollo elements would sneakily mix the GraphQL interface onto the custom element's prototype. It was a good hack as long as you only call one hook per component, but would break down as soon as you compose multiple operations.&lt;/p&gt;

&lt;p&gt;With controllers at the core, and the &lt;a href="https://github.com/matthewp/haunted#usecontroller"&gt;&lt;code&gt;useController&lt;/code&gt;&lt;/a&gt; hook, you can use as many Apollo hooks as you want in your elements without clobbering each other or polluting the element interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@apollo-elements/haunted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./client.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FruitsQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Fruits.query.graphql.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;VeggiesQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Veggies.query.graphql.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;healthy-snack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;HealthySnack&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;FruitsQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;veggies&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;VeggiesQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;snack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;veggies&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;veggies&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`
    &amp;lt;link rel="stylesheet" href="healthy-snack.css"/&amp;gt;
    &amp;lt;ul&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;snack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/li&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/ul&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Demonstrating how to use multiple GraphQL hooks in a &lt;a href="https://hauntedhooks.netlify.app/"&gt;haunted&lt;/a&gt; component. &lt;a href="https://apolloelements.dev/blog/next-evolution/#haunted-multiple-hooks"&gt;&lt;em&gt;View a Live Demo of this snippet&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same is true of the &lt;a href="https://hybrids.js.org"&gt;hybrids&lt;/a&gt; support, it now uses the controllers underneath the hood, letting you mix multiple operations in a single hybrid.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;define&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@apollo-elements/hybrids&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./client.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FruitsQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Fruits.query.graphql.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;VeggiesQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Veggies.query.graphql.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;healthy-snack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;FruitsQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="na"&gt;veggies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;VeggiesQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;snack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;veggies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;veggies&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`
      &amp;lt;link rel="stylesheet" href="healthy-snack.css"/&amp;gt;
      &amp;lt;ul&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;snack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/li&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/ul&amp;gt;
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Demonstrating how to use multiple GraphQL hooks in an &lt;a href="https://atomico.gitbook.io/"&gt;atomico&lt;/a&gt; component. &lt;a href="https://apolloelements.dev/blog/next-evolution/#haunted-multiple-hooks"&gt;&lt;em&gt;View a Live Demo of this snippet&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#try-it-out"&gt;
  &lt;/a&gt;
  Try it Out
&lt;/h2&gt;

&lt;p&gt;Apollo Elements next is available in prerelease on &lt;a href="https://npm.im/@apollo-elements/core"&gt;npm&lt;/a&gt;. We hope you enjoy using it and look forward to seeing what you come up with.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Are you using Apollo Elements at work? Consider &lt;a href="https://opencollective.com/apollo-elements"&gt;sponsoring the project via Open Collective&lt;/a&gt; to receive perks like priority support.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>graphql</category>
      <category>webcomponents</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Humans of Microsoft S02E01: Abel Wang</title>
      <author>Laurent Bugnion</author>
      <pubDate>Mon, 02 Aug 2021 14:24:22 +0000</pubDate>
      <link>https://dev.to/azure/humans-of-microsoft-s02e01-abel-wang-263a</link>
      <guid>https://dev.to/azure/humans-of-microsoft-s02e01-abel-wang-263a</guid>
      <description>&lt;p&gt;A few weeks before Abel Wang's passing, he accepted my invitation to talk about his relocation from the Midwest to Redmond, his favorite software project ever, and his attitude towards life and his health issues.&lt;/p&gt;

&lt;p&gt;Because of the circumstances, and after talking to Abel's family, we decided to publish this video now to remind everyone of Abel's amazing energy and positivity. We miss you Abel.&lt;/p&gt;

&lt;p&gt;This is part of a series titled Humans of Microsoft, which is part of the Hello World show on LearnTV and on Channel9.&lt;br&gt;
More details here&lt;br&gt;
&lt;a href="https://dev.to/t/humansofmicrosoft"&gt;https://dev.to/t/humansofmicrosoft&lt;/a&gt;&lt;br&gt;
and here&lt;br&gt;
&lt;a href="https://channel9.msdn.com/Shows/Hello-World"&gt;https://channel9.msdn.com/Shows/Hello-World&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xCkcKMRrp7s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transcript"&gt;
  &lt;/a&gt;
  Transcript
&lt;/h2&gt;

&lt;p&gt;Laurent: Welcome back to Humans of Microsoft. This is a segment where we talk to people just like you and me, but they all happen to work for Microsoft and today I have a guest who is not really just like you and me because it's a, it's an actual rock star and I'm so happy to welcome my good friend Abel Wang to the show. Hello Abel, how are you?&lt;/p&gt;

&lt;p&gt;Abel: I'm doing really good. Thank you so much for having me.&lt;/p&gt;

&lt;p&gt;Laurent: Oh absolutely, such a pleasure to have you. And as a first guest of Season 2, Abel, you are a Principal Program Manager and you work for Azure Incubations, right?&lt;/p&gt;

&lt;p&gt;Abel: Yes, that is correct. I'm officially the technical advisor to the CTO of Azure, so to Mark Russinovich.&lt;/p&gt;

&lt;p&gt;Laurent: So Abel I know that a few years ago you were living in Houston and you moved to the Pacific Northwest So in the region of Seattle, which is, you know, the headquarters of Microsoft. Why did you decide to move and how do you feel that it impacted your career?&lt;/p&gt;

&lt;p&gt;Abel: That's a great question. I actually, I've always wanted to make it to the West Coast. Well I grew up in the Midwest in the United States, but I wanted to be in California, 'cause clearly that's where I belong. Or somewhere on the West Coast. I definitely didn't belong in the Midwest, but when I graduated from college, I already had my son then. So money was really tight. And you know, I got, I got a CS degree, And I got job offers on the East Coast, West Coast, everywhere, but they all paid the same amount of money. But living in Houston, TX, that was, the cost of living is so cheap, it was kind of a no brainer. So my plan was, move to Houston and then in a couple years I'll find a job somehow and get to the West Coast. But what I didn't realize is once you have children, you're kind of stuck in a place, right? So as soon as my son graduated from high school, I looked at my wife. She looked at me and we said, now is the time right? And I knew I wanted to spend a little bit of time in Redmond, at least just because that's the corporate headquarters for Microsoft and I wanted to be where the action was. I wanted to see what it was like. You know, I knew that I could compete in Microsoft everywhere else, right around the world, doing services, doing sales. But I was like, can I compete with those Redmond people, but then, can I join, like, a product group? Can I? Am I at that level? Can I do this? It was like a challenge. And it was a strategic move on my part in terms of what I wanted for my career. So I actually got a job in product marketing. And I moved over to Seattle and it was amazing coming into work, going into campus every single day, it was, it was freaking amazing. The amount of connections that I built was invaluable, right, the face-to-face time. I think it was a huge positive influence on my career and I'm not saying that it's the only way to do things, but for me, I'm I'm glad I made the move.&lt;/p&gt;

&lt;p&gt;Laurent: What production software that you wrote are you the proudest of?&lt;/p&gt;

&lt;p&gt;Abel:  That's another great question. I think I need to go all the way back in time to, this was my third year out of college. I somehow fooled Chase Bank into thinking that I was actually like a software architect of some sort, and at that time, this was during the dotcom boom. So everybody was getting jobs, but I was, we were trying to get bank information except they stored all their bank information on mainframes, right? So in order to have web servers that could serve a webpage that would pull that live information from the mainframe. Well, that was really tough. They didn't have a way to do that, so if you remember back, I guess this would be the early 90s, or mid 90s there, there really was very few ways that you could remote and do things right, so I ended up having to write a bridge using CORBA. That would talk to both the mainframe and to, like, the web servers to pull data from the main frames. And it's still being used by Chase today. So it was one of my first big projects and one of the funnest things I've done.&lt;/p&gt;

&lt;p&gt;Laurent: Wow, CORBA, it's like a horror show for me.&lt;/p&gt;

&lt;p&gt;Abel: Oh it was horrible. But I didn't know better back then.&lt;/p&gt;

&lt;p&gt;Laurent: Well yeah, I mean back then it was the way, right? So quickly to finish and we could talk, you know, for many more hours probably, but how do you stay positive throughout everything that you're going through?&lt;/p&gt;

&lt;p&gt;Abel: Very good question. So for those that don't know, I was diagnosed with cancer about three years ago and then I beat it. And then in March I was diagnosed with stage four cancer and it spread everywhere, right? So people often ask me, how do you stay positive? But the truth is, life is hard for all of us. All of us, it's hard, right? in in in some certain ways, and you can't wait until life isn't hard enough to decide to be happy. So I decide to be happy every day that I can.&lt;/p&gt;

&lt;p&gt;Laurent:  Wow. This is fantastic. Positivity as a decision, as a conscious decision. I love that. Well, this was fantastic. Thank you so much for coming on the show today, Abel, it was amazing. Thank you so much to all the viewers for watching and we'll see you next time on Humans of Microsoft.&lt;/p&gt;

</description>
      <category>microsoft</category>
      <category>humansofmicrosoft</category>
      <category>helloworld</category>
    </item>
    <item>
      <title>This is How [JavaScript] Promises Really Work</title>
      <author>Clean Code Studio</author>
      <pubDate>Mon, 02 Aug 2021 14:20:33 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/this-is-how-javascript-promises-really-work-a-promising-guide-dlg</link>
      <guid>https://dev.to/cleancodestudio/this-is-how-javascript-promises-really-work-a-promising-guide-dlg</guid>
      <description>&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Promises are one technique to handle asynchronous code, otherwise known as your first class ticket out of callback hell.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5l83yp3D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wit653vmh8e2a7wwteum.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5l83yp3D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wit653vmh8e2a7wwteum.png" alt="JS promise state "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-states-of-a-promise"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3 State's of a Promise&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Pending State&lt;/li&gt;
&lt;li&gt;Resolved State&lt;/li&gt;
&lt;li&gt;Rejected State&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#understanding-javascript-promises"&gt;
  &lt;/a&gt;
  Understanding JavaScript Promises
&lt;/h3&gt;




&lt;p&gt;What is a promise? &lt;/p&gt;

&lt;p&gt;Commonly, a promise is defined as a proxy for a value that will eventually become available. &lt;/p&gt;

&lt;p&gt;Promises have been a part of JavaScript for years (standardized and introduced in ES2015). More recently, the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords (introduced in ES2017) have more deeply integrated and cleaned up the syntax for promises within JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Async functions&lt;/strong&gt; use promises behind the scenes, thus - especially with todays distributed cloud architectures becoming more common - understanding what promises are and how they work is more important than ever!&lt;/p&gt;

&lt;p&gt;Now that we know promises are important, let's dive in.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-promises-work-brief-explanation"&gt;
  &lt;/a&gt;
  How Promises Work (Brief Explanation)
&lt;/h3&gt;




&lt;p&gt;Your code calls a promise. This promise will start in what is known as its &lt;strong&gt;pending state&lt;/strong&gt;. What's this mean?&lt;/p&gt;

&lt;p&gt;This means that the calling function will continue executing while the promise is pending. Once the promise is &lt;strong&gt;resolved&lt;/strong&gt; the calling function will get the data that was being requested by the promise. &lt;/p&gt;

&lt;p&gt;A promise starts in a &lt;strong&gt;pending state&lt;/strong&gt; and eventually ends in a &lt;strong&gt;resolved state&lt;/strong&gt; or a &lt;strong&gt;rejected state&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Whether the final outcome be a promise in its &lt;strong&gt;resolved state&lt;/strong&gt; or a promise in its &lt;strong&gt;rejected state&lt;/strong&gt;, a callback will be called.&lt;/p&gt;

&lt;p&gt;We define two separate callbacks. &lt;/p&gt;

&lt;p&gt;One callback handles the data returned from a promise when it ends in a &lt;strong&gt;resolved state&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The other callback handles the data returned from a promise when it ends in a &lt;strong&gt;rejected state&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We define the callback function that handles the promise data that ends in a &lt;strong&gt;resolved state&lt;/strong&gt; by passing our callback function to &lt;strong&gt;then&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We define the callback function that handles the promise data  that ends in a &lt;strong&gt;rejected state&lt;/strong&gt; by passing our callback function to &lt;strong&gt;catch&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example using axios npm library&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolvedPromiseCallbackFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;rejectedPromiseCallbackFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#which-javascript-apis-use-promises"&gt;
  &lt;/a&gt;
  Which JavaScript APIs use promises?
&lt;/h3&gt;



&lt;p&gt;Your own code and libraries will most likely use promises throughout. That being noted, promises are actually used by standard modern web APIS. Here's a couple web APIs that also use promises.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API"&gt;Service Workers API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;Fetch API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In modern JavaScript, it's pretty unlikely you'll find yourself in a situation where you're not using promises - so let's dive deep and start understanding them. &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#creating-promises"&gt;
  &lt;/a&gt;
  Creating promises
&lt;/h3&gt;



&lt;p&gt;JavaScript has a Promise API. The Promise API exposes a promise constructor, which you initialize using &lt;code&gt;new Promise()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;complete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasItCompleted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;completed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Here is the thing I built&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;withReason&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Still doing something else&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
     &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;withReason&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As shown, we check the &lt;code&gt;complete&lt;/code&gt; global constant. If &lt;code&gt;complete&lt;/code&gt; is true, the promise switched to the &lt;strong&gt;resolved&lt;/strong&gt; state (aka we call the resolve callback which switches the promise to its &lt;strong&gt;resolved&lt;/strong&gt; state). Otherwise, if &lt;code&gt;complete&lt;/code&gt; is false, the &lt;code&gt;reject&lt;/code&gt; callback is executed, putting the promise into a &lt;strong&gt;rejected&lt;/strong&gt; state. &lt;/p&gt;

&lt;p&gt;Okay - easy enough, if we call the &lt;code&gt;resolve&lt;/code&gt; callback then our promise switches to the &lt;strong&gt;resolved&lt;/strong&gt; state where as if we use the &lt;code&gt;reject&lt;/code&gt; callback our promise switches to its &lt;strong&gt;rejected&lt;/strong&gt; state. That leaves us with a question though.&lt;/p&gt;

&lt;p&gt;What if we call neither the &lt;code&gt;resolve&lt;/code&gt; nor the &lt;code&gt;reject&lt;/code&gt; callback? Well, as you might be putting together, then the promise remains in its &lt;strong&gt;pending&lt;/strong&gt; state. &lt;/p&gt;

&lt;p&gt;Simple enough, three states - two callback functions to switch to &lt;strong&gt;Resolved State&lt;/strong&gt; or &lt;strong&gt;Rejected State&lt;/strong&gt;, if we call neither callback then we simply remain in the &lt;strong&gt;Pending State&lt;/strong&gt;.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#promisifying"&gt;
  &lt;/a&gt;
  Promisifying
&lt;/h3&gt;



&lt;p&gt;A more common example that may cross your path is a technique known as &lt;strong&gt;Promisifying&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Promisifying&lt;/strong&gt; is a way to be able to use a classic JavaScript function that takes a callback, and have it return a promise:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileSystem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fileSystem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
               &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; 
           &lt;span class="p"&gt;}&lt;/span&gt;  

           &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/etc/passwd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;getFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;In recent versions of Node.js, you won't have to do this&lt;/em&gt; &lt;br&gt;
&lt;em&gt;manual conversion for a lot of the API. There is a&lt;/em&gt;&lt;br&gt;
&lt;em&gt;promisifying function available in the util module that will&lt;/em&gt; &amp;gt; &lt;em&gt;do this for you, given that the function you're&lt;/em&gt;&lt;br&gt;
&lt;em&gt;promisifying has the correct signature.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#consuming-a-promise"&gt;
  &lt;/a&gt;
  Consuming A Promise
&lt;/h3&gt;



&lt;p&gt;Now that understand how a promise can be created using &lt;code&gt;new Promise()&lt;/code&gt; as well as the &lt;strong&gt;Promisifying&lt;/strong&gt; technique, let's talk about &lt;em&gt;consuming&lt;/em&gt; a promise. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;How do we use a promise (aka how do we consume a promise)&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isItDoneYet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... as above ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkIfItsDone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;isItDoneYet&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Running &lt;code&gt;checkIfItsDone()&lt;/code&gt; will specify functions to execute when the &lt;code&gt;isItDoneYet&lt;/code&gt; promise resolves (in the &lt;code&gt;then&lt;/code&gt; call) or rejects (in the &lt;code&gt;catch&lt;/code&gt; call).&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#fluently-chaining-promises"&gt;
  &lt;/a&gt;
  Fluently Chaining Promises
&lt;/h3&gt;



&lt;p&gt;What if we want to call another promise directly after a previous promise is returned. We can do this, and it's simply called creating a chain of promises.&lt;/p&gt;

&lt;p&gt;An example of chaining promises can be found within the Fetch API, which may be used to get a resource and queue (First in First out line) a chain of promises to execute when the resource is fetched.&lt;/p&gt;

&lt;p&gt;For starters, let's first point out that the &lt;strong&gt;Fetch API&lt;/strong&gt; is a promise-based mechanism. Calling the &lt;code&gt;fetch()&lt;/code&gt; method is equivalent to defining our own promise using &lt;code&gt;new Promise()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here's an example of chaining promises fluently together:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
     &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;
          &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/items.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Request success (with json): &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Request failed: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"&lt;a href="https://www.npmjs.com/package/node-fetch"&gt;node-fetch&lt;/a&gt; is minimal code for window.fetch compatible API on Node.js runtime."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, what'd we just do?&lt;/p&gt;

&lt;p&gt;Well, in the example above we call &lt;code&gt;fetch()&lt;/code&gt; to get a list of items from the &lt;code&gt;items.json&lt;/code&gt; file found in the domain root.&lt;/p&gt;

&lt;p&gt;Then we create a chaing of promises.&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;fetch()&lt;/code&gt; returns a &lt;a href="https://fetch.spec.whatwg.org/#concept-response"&gt;response&lt;/a&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Response contains &lt;code&gt;status&lt;/code&gt; (numeric HTTP status code)&lt;/li&gt;
&lt;li&gt;Response contains &lt;code&gt;statusText&lt;/code&gt; (string message, which is &lt;code&gt;OK&lt;/code&gt; if everything is successful)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;response&lt;/code&gt; also contains a method callable as &lt;code&gt;json()&lt;/code&gt;. Responses json method returns a promise that will resolve with the content of the body data processed and transformed into &lt;code&gt;JSON&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we have a final promise in our chain passed in as a anonymous callback function.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Request success (with json): &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This function simply logs that we were successful and console logs the successful requests json data.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;_"What if the first promise was rejected though?"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the first promise would have been rejected, or the second promise, or the third - then, no matter the step, we're automatically going to default to the &lt;code&gt;catch&lt;/code&gt; callback method that is visually shown at the end of our fluent promise chain. &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#handling-errors"&gt;
  &lt;/a&gt;
  Handling Errors
&lt;/h3&gt;



&lt;p&gt;We have a promise chain, something fails, uh oh - so what happens?&lt;/p&gt;

&lt;p&gt;If anything in the chain of promises fails and raises an error or ultimately sets the promise's state to a &lt;strong&gt;Rejected Promise State&lt;/strong&gt;, the control goes directly to the nearest &lt;code&gt;catch()&lt;/code&gt; statement down our promise chain.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// or&lt;/span&gt;

&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cascading-errors"&gt;
  &lt;/a&gt;
  Cascading errors
&lt;/h3&gt;



&lt;p&gt;What if we raise an error &lt;strong&gt;inside&lt;/strong&gt; a &lt;code&gt;catch()&lt;/code&gt;? Well, check it - we can simply append a second &lt;code&gt;catch()&lt;/code&gt;. The second &lt;code&gt;catch()&lt;/code&gt; will handle the error (or more specifically error message) and so on.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#promises-orchestration"&gt;
  &lt;/a&gt;
  Promises Orchestration
&lt;/h3&gt;



&lt;p&gt;Okay, so now we're solid when it comes to a single promise and our foundational understanding of promises in general.&lt;/p&gt;

&lt;p&gt;Getting more advanced, let's ask another question. If you need to synchronize different promises - say pull data from multiple endpoints and handle the resolved promise data from all of the promises created and used to retrieve results from these differing endpoints - how would we do it?&lt;/p&gt;

&lt;p&gt;How would we synchronize different promises and execute something when they are all resolved?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;Promise.all()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Promise.all()&lt;/code&gt; helps us define a list of promises and execute something when they are all resolved - it allows us to synchronize promises.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Promise.all()&lt;/code&gt; &lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/one.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/two.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Array of results: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With destructuring, we can simplify this example to:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/one.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/two.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;resA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resB&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;results: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resB&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#promiserace"&gt;
  &lt;/a&gt;
  Promise.race()
&lt;/h3&gt;



&lt;p&gt;What if we want to get all of the data from these multiple APIs, but we really only need enough data returned from one endpoint to show on our page?&lt;/p&gt;

&lt;p&gt;That is we need to resolve all of our promises no matter what, however we want to do something with the data from the first resolved promise and we don't care which promise is resolved first. &lt;/p&gt;

&lt;p&gt;To handle the data from the first resolved promise we can use &lt;code&gt;Promise.race()&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Promise.race()&lt;/code&gt; runs when the first of the promises you pass to it resolves, and it runs the attached callback just once, with the result of the first promise resolved.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;second&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;race&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// second&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#useful-packages-using-andor-simplifying-promises"&gt;
  &lt;/a&gt;
  Useful Packages Using and/or Simplifying Promises
&lt;/h3&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package//axios"&gt;Axios (wrapper for fetching data via promises)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.promisejs.org/"&gt;Promise (extends promises)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/fs-extra"&gt;FS-Extra (uses promises)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://cleancode.studio/clean-code"&gt;Clean Code&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cleancode.studio"&gt;Clean Code Studio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clean Code Studio - Clean Code Clean Life - Simplify!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>coding</category>
      <category>programming</category>
      <category>node</category>
    </item>
    <item>
      <title>Must-Know CSS Flexbox Responsive Multi-Column Layout Explained</title>
      <author>Raja Tamil</author>
      <pubDate>Mon, 02 Aug 2021 14:04:38 +0000</pubDate>
      <link>https://dev.to/hirajatamil/must-know-css-flexbox-responsive-multi-column-layout-explained-1lkd</link>
      <guid>https://dev.to/hirajatamil/must-know-css-flexbox-responsive-multi-column-layout-explained-1lkd</guid>
      <description>&lt;p&gt;In this article, I’ll be showing you how to easily create responsive multi-column mobile friendly layouts using CSS Flexbox.&lt;/p&gt;

&lt;p&gt;If you have a Shopify store, this article will help you design your product description page so that you don’t have to pay a monthly subscription fee for an app that does this.&lt;/p&gt;

&lt;p&gt;What are we building?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BfCOdTGz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flexbox-Mobile-First-Multi-Column-Layout-Explaind.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BfCOdTGz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flexbox-Mobile-First-Multi-Column-Layout-Explaind.gif" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A lot to cover, so let’s get started!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single Column Layout&lt;/li&gt;
&lt;li&gt;Two Column Flexbox Layout&lt;/li&gt;
&lt;li&gt;Two Column Reverse Flexbox Layout&lt;/li&gt;
&lt;li&gt;Two Column Mobile Layout&lt;/li&gt;
&lt;li&gt;Three Column Flexbox Layout&lt;/li&gt;
&lt;li&gt;Three Column Mobile Layout&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#single-column-layout"&gt;
  &lt;/a&gt;
  Single Column Layout
&lt;/h3&gt;

&lt;p&gt;The HTML code for the single column is pretty straight forward.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;!-- SINGLE COLUMN --&amp;gt;
&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"one-column"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;This beautiful 3-piece comforter set takes the guesswork out of coordinating colors and textures.&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.shopify.com/s/files/1/0506/3127/8767/files/301500x1500.jpg?v=1611944972"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The section is the top-level element that has three children elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;section&lt;/strong&gt; → is a block-level element that spans horizontally across the width of its parent in this case &lt;strong&gt;&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;h2&lt;/strong&gt; → is also a block level element and has a title content.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;img&lt;/strong&gt; → is an element where I pulled an image from the URL and set its src attribute (sometimes images comes with fixed width and height which may go beyond its parent width).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make the image fit to its parent width, add these couple of properties to the img CSS selector:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;width:100% → will fit the image to its parent width.&lt;/li&gt;
&lt;li&gt;height:auto → will adjust the image height proportionate to its width.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* ONE COLUMN */&lt;/span&gt;
&lt;span class="nc"&gt;.one-column&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the single column layout works right off the bat like the image below, even in the mobile view without using Flexbox. 🙂&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tx2DaId0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flexbox-Mobile-First-Multi-Column-Layout-Explained-Single-column.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tx2DaId0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flexbox-Mobile-First-Multi-Column-Layout-Explained-Single-column.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s nice!&lt;/p&gt;

&lt;p&gt;Now let’s take a look at how to create a two column layout using Flexbox.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Recommended&lt;/em&gt;&lt;br&gt;
&lt;a href="https://softauthor.com/css-make-a-div-height-full-screen/"&gt;&lt;em&gt;3 Ways To Make A Div Full Screen Using CSS&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#two-column-flexbox-layout"&gt;
  &lt;/a&gt;
  Two Column Flexbox Layout
&lt;/h3&gt;

&lt;p&gt;The two column HTML markup has a top-level section element with the class name two-column and of course two divs inside representing left and right columns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"two-column"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you know, div is a block-level element so the output with the above code looks like the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NLG_CI38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-without-flexbox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NLG_CI38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-without-flexbox.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make the two column layout, make both divs appear beside each other instead of below the other. &lt;/p&gt;

&lt;p&gt;Traditionally, we use inline-block or float to achieve this.&lt;/p&gt;

&lt;p&gt;With Flexbox, we can do it with a couple of CSS Flexbox properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;display:flex&lt;/li&gt;
&lt;li&gt;flex-direction:row → is a default behaviour that you often don’t need. It lays its children beside each other, which is exactly what we want to make the two columns.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* TWO COLUMN FLEXBOX */&lt;/span&gt;
&lt;span class="nc"&gt;.two-column&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aibWwEv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-with-flexbox-.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aibWwEv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-with-flexbox-.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This works.&lt;/p&gt;

&lt;p&gt;Now, let’s spread these two divs evenly to fill its parent width horizontally.&lt;/p&gt;

&lt;p&gt;To do that, add flex:1 css rule to the inner divs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* TWO COLUMN FLEXBOX */&lt;/span&gt;
&lt;span class="nc"&gt;.two-column&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I’ve also added the border to them just for viewing purposes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d9Oxoq8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-equal-width-column.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d9Oxoq8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-equal-width-column.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s add some content on the left column and an image on the right.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"two-column"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Comfy &lt;span class="ni"&gt;&amp;amp;amp;&lt;/span&gt; Cozy&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The ultra-soft &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;300 GSM &lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;hypoallergenic microfiber filling will keep you warm 🔥 for a better sleep during 🥶 cold nights.
      &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt; 
     &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.shopify.com/s/files/1/0506/3127/8767/files/2-1.jpg?v=1611450960"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The layout will look like this right away!&lt;/p&gt;

&lt;p&gt;And its not bad…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KS8Q58-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-left-content-right-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS8Q58-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-left-content-right-image.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s &lt;a href="https://softauthor.com/css-how-to-center-a-div-horizontally-vertically/"&gt;center the content horizontally and vertically&lt;/a&gt; using Flexbox.&lt;/p&gt;

&lt;p&gt;To do that, we need to add these three Flexbox CSS rules to the inner div:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Display:flex;&lt;/li&gt;
&lt;li&gt;Justify-content: center;&lt;/li&gt;
&lt;li&gt;Align-items: center;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* TWO COLUMN FLEXBOX */&lt;/span&gt;
&lt;span class="nc"&gt;.two-column&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;As you can see, I use nested 🕸 Flexbox which is more common when using Flexbox.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xEmIX_1Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-content-aligment-issue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xEmIX_1Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-content-aligment-issue.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wait…&lt;/p&gt;

&lt;p&gt;Something is messed up.&lt;/p&gt;

&lt;p&gt;Both the heading and paragraph are trying to be in the middle of the div horizontally and vertically.&lt;/p&gt;

&lt;p&gt;However, what we want is to keep them one below the other, probably the title at the top and the paragraph at the bottom. Let’s do this first before centering them.&lt;/p&gt;

&lt;p&gt;To do that, wrap both elements with a span element.&lt;/p&gt;

&lt;p&gt;This way, Flexbox properties will be applied to the span element instead of the heading and paragraph inside.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"two-column"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Comfy &lt;span class="ni"&gt;&amp;amp;amp;&lt;/span&gt; Cozy&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The ultra-soft &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;300 GSM &lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;hypoallergenic microfiber filling will keep you warm 🔥 for a better sleep during 🥶 cold nights.
      &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt; 
     &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.shopify.com/s/files/1/0506/3127/8767/files/2-1.jpg?v=1611450960"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, center the heading and paragraph text as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* TWO COLUMN FLEXBOX */&lt;/span&gt;
&lt;span class="nt"&gt;two-column&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;...&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tsVxOl0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-with-proper-alignment.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tsVxOl0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2021/02/CSS-Flex-box-Mobile-First-Multi-Column-Layout-Explained-two-column-with-proper-alignment.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This looks good!&lt;/p&gt;

&lt;p&gt;If you look at any landing page layouts, the second two column layout will have an image on the left and content on the right and so on.&lt;/p&gt;

&lt;p&gt;Let’s see how to do exactly that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://softauthor.com/css-flexbox-responsive-multi-column-layout/"&gt;Continue Reading...&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
