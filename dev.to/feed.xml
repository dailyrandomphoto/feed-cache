<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What Does "Right To Repair" Mean to You?</title>
      <author>Max Ong Zong Bao</author>
      <pubDate>Fri, 06 Aug 2021 20:56:42 +0000</pubDate>
      <link>https://dev.to/steelwolf180/what-does-right-to-repair-mean-to-you-5dgb</link>
      <guid>https://dev.to/steelwolf180/what-does-right-to-repair-mean-to-you-5dgb</guid>
      <description>&lt;p&gt;For me, &lt;strong&gt;Right to Repair&lt;/strong&gt; has always been the build quality of items that I use on a daily basis. Which given the right knowledge &amp;amp; access to the right parts. You can continue to use that product for a longer time. Thereby the product becomes cheaper to own in the long term basis despite they can be expensive to buy.&lt;/p&gt;

&lt;p&gt;Heck, I can even have the option to don't do it myself. Which I can find skilled craftsman or company to do the repairs for me. &lt;/p&gt;

&lt;p&gt;This spawned a cottage industry surrounding the product or a brand displaying their care for the customers. Bringing them tons of good will and brand loyalty like some of these great examples are &lt;a href="https://www.allenedmonds.com/discover/our-story/recrafting.html"&gt;Allen Edmonds Recrafting Services&lt;/a&gt; or &lt;a href="https://www.redwingshoes.com/customer-service-contact-us/repairs.html"&gt;Red Wings Repair&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This was precisely why I personally own 2 Allen Edmonds dress shoes for that specific reason. Because I could repair these shoes in my own country (Singapore) or ship them back to the US even when Allen Edmonds doesn't sell their shoes in my country.&lt;/p&gt;

&lt;p&gt;So what does &lt;strong&gt;Right to Repair&lt;/strong&gt; mean to you?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>hardware</category>
      <category>news</category>
    </item>
    <item>
      <title>Set Yourself Up For an Easier Development Project...</title>
      <author>Fannie E Gunton</author>
      <pubDate>Fri, 06 Aug 2021 20:33:38 +0000</pubDate>
      <link>https://dev.to/fanniegunton/set-yourself-up-for-an-easier-development-project-1j61</link>
      <guid>https://dev.to/fanniegunton/set-yourself-up-for-an-easier-development-project-1j61</guid>
      <description>&lt;h1&gt;
  &lt;a href="#-and-give-this-guide-to-your-next-client"&gt;
  &lt;/a&gt;
  ... And Give This Guide To Your Next Client
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;These are a series of client-directed notes that I put together following a really poorly-planned project with the intent of communicating how to do better next time. Will each of these items seem obvious to us as developers? Certainly. How about to our clients and designers that are directing the work? Too often, not at all. Read on --&amp;gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tl;dr -&lt;/strong&gt; Put together a clear design that is complete before the development work gets started. Give all of those details to your developer up front. If they ask questions before or during, give a complete answer. They should not have to make any assumptions or guesses unless you have hired them to do that planning and/or design work in addition to development. Treat them well, and have a clear idea about your budget going in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-more-with-the-design-doc"&gt;
  &lt;/a&gt;
  Do More With The Design Doc:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Lay out page designs in such a way that the user flow is clear, and the developer does not have to wonder about how the pages function.&lt;/li&gt;
&lt;li&gt;Add all element states to the design (e.g., provide an image of a mobile nav menu both when opened and when closed).&lt;/li&gt;
&lt;li&gt;Add a Typography key to the design docs with size, weight, color, and style changes for each type of text used on page&lt;/li&gt;
&lt;li&gt;Provide a color palette in the design doc and verify that the hex/rgb codes displayed are correct. &lt;/li&gt;
&lt;li&gt;Think about your overall styles globally, and design the mocks to match. Note those details in your design. This will enable your developer to style the site globally and only restyle smaller changes per component or page rather than having to write out styles over and over again throughout the site. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#make-a-cohesive-project-plan"&gt;
  &lt;/a&gt;
  Make A Cohesive Project Plan:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use consistent naming across the design, written documentation, and in communications for site-specific elements. And if those names change, post an update to your developer ASAP.&lt;/li&gt;
&lt;li&gt;Outline the data structure for the site. You may know exactly how the data for a series of pages nests together (e.g. albums, songs, lyrics, &amp;amp; videos), but someone you’ve hired for a short window of time does not. The more they have to look up, ask about, figure out, or do on their own all costs time &amp;amp; money.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-big-little-things"&gt;
  &lt;/a&gt;
  The Big Little Things:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Provide all assets up front. For any that are still pending, alert your dev to what is missing and what the ETA is.&lt;/li&gt;
&lt;li&gt;Give pertinent information directly to your developer up front and upon request. The more your developer has to look up, ask about, figure out, or do on their own all costs money &lt;em&gt;in addition to&lt;/em&gt; the actual costs of writing the code. This includes asking them to search through old threads or readme’s rather than grabbing the info yourself and sending it over.&lt;/li&gt;
&lt;li&gt;Establish the channels for communication up front, and stick to them. Keep it professional. If your project chat is all in Slack, don't text their personal number (especially if they never gave you their number!).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#hiring-developers-from-a-dev-community"&gt;
  &lt;/a&gt;
  Hiring Developers From A Dev Community?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Developers hired from a particular community are there for jobs using that software/framework/approach. For instance, if you hire a developer from a modern CMS software community, that means they are ready to build reusable components that pull data from the CMS to flesh out the pages. If you decide instead to hardcode the data and build bulkier pages &amp;amp; components, you are not getting the best out of your dev. In fact, you might be forcing them to do more &amp;amp; longer work for a lesser reward. &lt;/li&gt;
&lt;li&gt;That community is probably more closely-knit than you think! Keep that in mind before underpaying, bad-mouthing, or setting completely incorrect expectations up front about the project requirements. Your reputation matters, too.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#keeping-the-budget-low"&gt;
  &lt;/a&gt;
  Keeping The Budget Low?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Simplify the design as much as you can. Every little bit extra adds up! Examples: 

&lt;ul&gt;
&lt;li&gt;When re-sizing, keep your elements in the same order, the same colors, etc.&lt;/li&gt;
&lt;li&gt;Conditional formatting of elements that you might be building into the design. &lt;/li&gt;
&lt;li&gt;Consistency keeps it simple *&lt;em&gt;and&lt;/em&gt; leads to a better design. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Put copy in the data, not in the code. Dealing with copy in the code is nitpicky and adds time.
&lt;/li&gt;
&lt;li&gt;And if your budget is so low that you cannot reasonably pay a developer or are inclined to negotiate them down far below their rate, consider the "no-code" options and hire a developer to build your custom site later once you can afford it. There's no shame in going this route.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Feel free to share this link or copy/paste the items that line up closest with your own project needs in your own communications.&lt;/p&gt;

&lt;p&gt;Otherwise, I'd love to know your thoughts! Have you run into these issues with your clients? Have other suggestions to add to the list? Let me know in the comments.&lt;/p&gt;




&lt;p&gt;Still here? Great! I'm trying to connect with more developers on &lt;a href="https://twitter.com/fanniegunton"&gt;Twitter&lt;/a&gt; so I can ask the questions and share quick insights and aha's as I find them. See y'all there!&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@micheile?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Visual Stories || Micheile&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/easy?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>career</category>
      <category>contracting</category>
    </item>
    <item>
      <title>📚 Git Branching Explained With A Story 📚</title>
      <author>Adam Gordon Bell</author>
      <pubDate>Fri, 06 Aug 2021 19:54:21 +0000</pubDate>
      <link>https://dev.to/adamgordonbell/story-time-git-branching-strategies-explained-42d1</link>
      <guid>https://dev.to/adamgordonbell/story-time-git-branching-strategies-explained-42d1</guid>
      <description>&lt;p&gt;👋 Hello 👋&lt;br&gt;
I've been a professional software developer for 15 years now and I've had this realization.&lt;/p&gt;

&lt;p&gt;Some modern development practices are easiest to understand from a historical perspective. &lt;/p&gt;

&lt;p&gt;Things started a certain way, and then steps were added or removed as conditions changed. If you don't know the backstory, then the current state of the world can seem arbitrary and confusing. &lt;strong&gt;Git branching is like that&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-plan"&gt;
  &lt;/a&gt;
  The Plan
&lt;/h2&gt;

&lt;p&gt;I'm going to explain various git branching strategies with a story. We will start with something straightforward and add complexity as we go. Eventually, we will end up back simple again.&lt;/p&gt;

&lt;p&gt;I hope that explaining things this way will give you a deeper understanding of when to use specific branching and merging strategies. So instead of telling you how to cherry-pick a bug fix into a hotfix branch using GitFlow work, I can describe the conditions that would lead to adopting that process. Once you understand the whys, the hows will be easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ashelysoft-2006"&gt;
  &lt;/a&gt;
  AshelySoft 2006
&lt;/h2&gt;

&lt;p&gt;The year is 2006, and Ashley Protagonist starts a software business. She builds and sells an eCommerce solution she wrote in PHP. It's just her building and selling it, but she uses a new source control solution called git to store her software. She starts with trunk-based development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trunk-based-development"&gt;
  &lt;/a&gt;
  Trunk Based Development
&lt;/h2&gt;

&lt;p&gt;Trunk-based development is working on the main, or trunk branch. Ashley commits her code right into the main branch on her local machine and, when she has complete a feature, she pushes her code to the source control server.  &lt;/p&gt;

&lt;p&gt;Customers pay for her software, and she emails them a link to the current version as an archive file using &lt;a href="https://git-scm.com/docs/git-archive"&gt;git archive&lt;/a&gt;. She is a PHP developer, so she whips up a simple PHP script that returns the git archive for the branch requested.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y048DMbm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/git-branching/email2-800-c3cecc459.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y048DMbm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/generated/assets/images/git-branching/email2-800-c3cecc459.webp" alt="grab your copy of AshelySoft"&gt;&lt;/a&gt;&lt;/p&gt;
Simple Release Distribution



&lt;p&gt;Her customers then install her software on their web servers, where they use it to run their eCommerce businesses.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mainline-development"&gt;
  &lt;/a&gt;
  MainLine Development
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#fun-fact-trunk-vs-main"&gt;
  &lt;/a&gt;
  ℹ️ Fun Fact: Trunk VS. Main
&lt;/h3&gt;

&lt;p&gt;If Ashley had chosen subversion or CVS, which were more prevalent in 2006, she would have called her branch &lt;code&gt;trunk&lt;/code&gt; because every branch is branched off the trunk like a real-world tree. This is where the term trunk-based development comes from. However, Ashley uses &lt;code&gt;main&lt;/code&gt;, so she may prefer the term mainline development. It's the same thing, just a different name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#release-branches"&gt;
  &lt;/a&gt;
  Release Branches
&lt;/h2&gt;

&lt;p&gt;Ashley's business succeeds. She acquires many more customers and hires more developers and a customer-support person. Support becomes problematic, though, as some customers are very slow to upgrade, and it's unclear what version any given customer is on. Additionally, customers can't keep up with the latest version when every commit is a new version, and there are no version numbers.&lt;/p&gt;

&lt;p&gt;So she decides to batch up the changes into monthly releases and create a new release branch for each revision. Of course, she could use tags for these releases, but branches and tags are pretty similar, and she already has her release script in place.  &lt;/p&gt;

&lt;p&gt;Now her support people can ask customers what version they are on. If it's more than two releases back, they ask them to upgrade. That is, AshelySoft only supports the current release and the two previous versions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cutting-a-release"&gt;
  &lt;/a&gt;
  Cutting a Release
&lt;/h2&gt;

&lt;p&gt;There was a time before modern source control when creating a release branch was an expensive process that had to be planned. "Cutting a Release" was the name for this process, which involved locking down the source and starting the lengthy process of 'cutting a release branch off the trunk'. People still use the phrase today.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Well, the performance was so bad that when they wanted to cut a branch, they would announce it ahead of time. They would schedule the branching because you didn't want anybody else committing while you were branching, because that would totally screw things up. Right? And I said, "Okay, Friday at 2:00 pm., we're going to cut the branch." Then all activity would stop, access to the server would be cut off."&lt;/p&gt;

&lt;p&gt;And it would take 45 minutes to cut this branch. And then you'd say, "Okay, we've opened up the branch. Everybody can start working again."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://corecursive.com/software-that-doesnt-suck-with-jim-blandy/"&gt;Jim Blandy&lt;/a&gt; creator of Subversion&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#hot-fixes-and-the-multiverse"&gt;
  &lt;/a&gt;
  Hot Fixes and the Multiverse
&lt;/h2&gt;

&lt;p&gt;This is all working great. Ashley starts scaling the development team, and they start shipping more features. Unfortunately, while each monthly release now contains more cool new features, more regressions and bugs start slipping into the releases as well.&lt;/p&gt;

&lt;p&gt;Some customers respond to this by not upgrading right away. If they are well-served by the current product, they can stay two releases back and get active support while giving the latest release time to stabilize. Bugs do show up in the old versions, though, and this is where things get interesting.&lt;/p&gt;

&lt;p&gt;Up until now, time, as viewed by AshelySoft's source control, moves forward in a single line. There is one &lt;code&gt;main&lt;/code&gt; branch that represents one linear release timeline. But now, when bugs are found, they need to be addressed in multiple versions of the product. And you can't simply ask people to upgrade because they are still on a supported version, and they are correctly worried about the quality of the latest release. They want the version they have plus the bug fixes, with no new development.&lt;/p&gt;

&lt;p&gt;You are now in the hot fixing multiverse. AshelySoft has to fix bugs in the latest version and all other active versions. Each release is a separate timeline where active development ceased at the release date, but bugs continued to be fixed.&lt;/p&gt;

&lt;p&gt;If you've seen any time travel movies, you probably realize that this can get complex. What if a bug fix to back release introduces a bug of its own? Thankfully AshelySoft is only supporting two active versions back and only supporting them for a couple of months. Suppose they were supporting back versions for several years. In that case, they might find themselves spending more and more time maintaining all these versions, and the various versions would slowly drift away from each other.&lt;/p&gt;

&lt;p&gt;Nevertheless, release branches are an enormous help for AshelySoft. They help customers stay on a version that works for them, while AshelySoft can still push new features. However, it does increase the amount of effort that fixing bugs requires, and dealing with that will lead to AshelySoft's next innovation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-develop-endraw-branch"&gt;
  &lt;/a&gt;
  The &lt;code&gt;develop&lt;/code&gt; Branch
&lt;/h2&gt;

&lt;p&gt;The cost of shipping bugs has now increased for AshelySoft. In the worse case, a bug isn't discovered until it's in all active versions of the software and the code between versions has changed enough that the fix is slightly different in each version, tripling the bug fix cost.&lt;/p&gt;

&lt;p&gt;Fortunately, a solution for this does exist: Continuing with our time travel/multiverse analogy, we need to travel back in time and stop the bug before our releases branches off the main timeline. Unfortunately, AshelySoft does not have access to literal time travel machines, but Ashley has a more straightforward idea: Catch the bugs before they are released.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gitflow-to-the-rescue"&gt;
  &lt;/a&gt;
  GitFlow to the Rescue
&lt;/h2&gt;

&lt;p&gt;A popular branching method called &lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;GitFlow&lt;/a&gt; has excellent suggestions for achieving this: you create a &lt;code&gt;develop&lt;/code&gt; branch. So now all new work goes into &lt;code&gt;develop,&lt;/code&gt; and instead of 4 weeks of development in each release, you spend the last week stabilizing &lt;code&gt;develop&lt;/code&gt;. You make sure &lt;code&gt;develop&lt;/code&gt; has no bugs as best you can, and when it seems stable, you merge it into main and then cut a release branch off main.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"We consider origin/develop to be the main branch where the source code of HEAD always reflects a state with the latest delivered development changes for the next release. Some would call this the "integration branch". This is where any automatic nightly builds are built from."&lt;/p&gt;

&lt;p&gt;"When the source code in the develop branch reaches a stable point and is ready to be released, all of the changes should be merged back into master somehow and then tagged with a release number."&lt;/p&gt;

&lt;p&gt;GitFlow Explanation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This whole process adds more overhead to the branching and release process, but it's a fixed cost overhead, and it saves a lot of HotFixing bugs on release branches. AshelySoft, following the git-flow model, also adds a &lt;a href="https://dev.to/blog/continuous-integration"&gt;continuous integration&lt;/a&gt; service. When new code shows up in &lt;code&gt;develop&lt;/code&gt;, &lt;a href="https://dev.to/blog/unit-vs-integration"&gt;automated tests&lt;/a&gt; are run.&lt;/p&gt;

&lt;p&gt;This setup, git-flow and CI on develop branch, with release branches and hot fixing serves AshelySoft for several years. However, it is a complicated process. Thankfully, from here on out, AshelySoft's process will only get simpler. The first thing that helps to simplify things is &lt;code&gt;The Cloud&lt;/code&gt;™️.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-cloud"&gt;
  &lt;/a&gt;
  The Cloud
&lt;/h2&gt;

&lt;p&gt;AshelySoft customers want to run an eCommerce store. However, they don't want to run a web server. After repeatedly getting this feedback, Ashley shifts the company to be a Software-As-A-Service (SAAS) company. It takes some extensive work, but AshelySoft eCommerce becomes a multi-tenant eCommerce platform. No more &lt;code&gt;git archive&lt;/code&gt; releases. Now the release process is deploying the latest version of the main branch onto the production server.&lt;/p&gt;

&lt;p&gt;There are downsides to this SAAS model. AshelySoft now owns the uptime of all their customers, and this is eCommerce, so real money is lost when things go down. But, the customers are willing to pay more for AshelySoft to worry about these problems. They no longer have to support multi releases at a time - no more hot fixing bugs back into old versions, no more multiverse of drifting branches to update, and no more release branches. To make this work, AshelySoft works off a simple rule: &lt;code&gt;main&lt;/code&gt; must be releasable. Before anyone can merge &lt;code&gt;develop&lt;/code&gt; into &lt;code&gt;main&lt;/code&gt; they must make sure the continuous integration build is passing, and if they find problems that the CI process missed, they do their best to make sure CI will catch it in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-flow"&gt;
  &lt;/a&gt;
  GitHub Flow
&lt;/h2&gt;

&lt;p&gt;Around this time, GitHub private repositories appear, and AshelySoft moves from their own git hosting to GitHub and starts following a Pull Request process. Instead of pushing code straight into &lt;code&gt;develop&lt;/code&gt; and then ensuring they didn't break the build, developers now create pull-requests. Other team members review the pull-requests, and the continuous integration service runs its suite of tests right on the PR. As a result, the speed of getting code into &lt;code&gt;develop&lt;/code&gt; has decreased, but with each PR being manually reviewed and automatically tested, the quality of code that makes it into the &lt;code&gt;develop&lt;/code&gt; branch is way up.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#death-to-raw-develop-endraw-"&gt;
  &lt;/a&gt;
  Death to &lt;code&gt;develop&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;With the quality of &lt;code&gt;develop&lt;/code&gt; now increased, AshelySoft can increase its release velocity. They even adopt a continuous deployment model where a merge into &lt;code&gt;main&lt;/code&gt; causes the software to be automatically deployed. From there, they move to a &lt;a href="https://dev.to/blog/deployment-strategies/#canary-deployment"&gt;Canary deployment model&lt;/a&gt; where a new release is tested on a small portion of web traffic before it's fully deployed. Once a PR is merged, Ashley just has to merge &lt;code&gt;develop&lt;/code&gt; into &lt;code&gt;main&lt;/code&gt; to perform a release.&lt;/p&gt;

&lt;p&gt;But what is the point of having &lt;code&gt;develop&lt;/code&gt; and merging it into &lt;code&gt;main&lt;/code&gt;? It was introduced to prevent the release of bugs by giving the software time to 'integrate', but AshelySoft is doing all the integration as part of the PR process. So they drop the &lt;code&gt;develop&lt;/code&gt; branch.  &lt;/p&gt;

&lt;p&gt;Ashley has come a long way but sometimes what is old is new again. She is now back to doing trunk-based or mainline development. Just like when she built the first version: features go into &lt;code&gt;main&lt;/code&gt;, and the HEAD of &lt;code&gt;main&lt;/code&gt; is constantly released.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons Learned
&lt;/h2&gt;

&lt;p&gt;There is a lot about git merging strategies, continuous integration, and deployment that doesn't seem to make sense without going through a long journey like Ashely's.  &lt;/p&gt;

&lt;p&gt;For instance, calling software that builds and tests code a continuous integration process only makes sense when you understand what non-continuous integration was. It was spending time manually testing the upcoming release for days or even weeks before feeling confident enough to release it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hopefully this historical perspective helps you understand why &lt;code&gt;main&lt;/code&gt; branches, and feature branches, and &lt;code&gt;develop&lt;/code&gt; branches exist.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And with this background you'll can tell when a complicated branching and release processes is useful and when it serves no purpose.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ashely's story is fictional, and history didn't necessarily unfold this way for all or even most software shops, but I think it's helpful to understand where we are coming from and how cloud and SAAS workflows influence branching models.&lt;/p&gt;

&lt;p&gt;Some software always had an extensive review process, and much software will never be cloud-based and will continue to deal with release branches and backporting fixes. But some software has moved to the cloud and yet hasn't embraced the simplified workflows that cloud deployment can enable.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this story / lesson. Follow me on dev.to and like the story to encourage more writing in the future. &lt;/p&gt;

&lt;p&gt;A longer version of this article is found on earthly called &lt;a href="https://earthly.dev/blog/git-branching/"&gt;Git Branching Strategies and The Greek Revival&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>github</category>
    </item>
    <item>
      <title>K-means for Beginners: How to Build from Scratch in Python</title>
      <author>Avi Arora</author>
      <pubDate>Fri, 06 Aug 2021 19:53:18 +0000</pubDate>
      <link>https://dev.to/aarora4/k-means-for-beginners-how-to-build-from-scratch-in-python-f43</link>
      <guid>https://dev.to/aarora4/k-means-for-beginners-how-to-build-from-scratch-in-python-f43</guid>
      <description>&lt;p&gt;Read the full article: &lt;a href="https://analyticsarora.com/k-means-for-beginners-how-to-build-from-scratch-in-python/"&gt;https://analyticsarora.com/k-means-for-beginners-how-to-build-from-scratch-in-python/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The K-means algorithm is a method for dividing a set of data points into distinct clusters, or groups, based on similar attributes. It is an unsupervised learning algorithm which means it does not require labeled data in order to find patterns in the dataset. &lt;/p&gt;

&lt;p&gt;K-means is an approachable introduction to clustering for developers and data scientists interested in machine learning. &lt;strong&gt;In this article, you will learning how to implement k-means entirely from scratch and gain a strong understanding of the k-means algorithm&lt;/strong&gt;.   &lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Article Overview&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What is Clustering?&lt;ul&gt;
&lt;li&gt;How to Define Similarity in a Cluster?&lt;/li&gt;
&lt;li&gt;Characteristics of a Good Similarity Function&lt;/li&gt;
&lt;li&gt;Overview of Common Clustering Methods&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;How does K-means Clustering work visually?&lt;/li&gt;
&lt;li&gt;What is the K-means Pseudocode?&lt;/li&gt;
&lt;li&gt;How to write K-means from Scratch in Python?&lt;/li&gt;
&lt;li&gt;Image Segmentation with K-means algorithm&lt;/li&gt;
&lt;li&gt;Choosing the Proper Number of Clusters&lt;/li&gt;
&lt;li&gt;Test Your Understanding&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>machinelearning</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Git for beginners</title>
      <author>angelayoon</author>
      <pubDate>Fri, 06 Aug 2021 19:51:26 +0000</pubDate>
      <link>https://dev.to/angelayoon/git-for-beginners-1a4h</link>
      <guid>https://dev.to/angelayoon/git-for-beginners-1a4h</guid>
      <description>&lt;p&gt;The content is from this youtube tutorial where it covers how to use SourceTree, Github, and terminal from VScode to manage the project.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#before-creating-repository-on-github"&gt;
  &lt;/a&gt;
  Before creating repository on Github
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;&lt;br&gt;
Then register your username and email. &lt;br&gt;
&lt;code&gt;git config --global user.name "(your name)"&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git config --global user.email "(your email address)"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Git is basically putting the current version of your project in a time capsule. &lt;br&gt;
&lt;code&gt;git status&lt;/code&gt; command shows the files that are untracked, meaning the files just created by you.&lt;br&gt;
You can put the current state of files in the time capsule using the command, &lt;code&gt;git add -A&lt;/code&gt;.&lt;br&gt;
The changes to be committed will be shown when you type &lt;code&gt;git status&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;You bury the time capsule using &lt;code&gt;git commit -m "First Commit"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In order to push your commit the changes to the online repository, use &lt;code&gt;git remote add origin https://github.com/angelayoon/PETase-igemcolab-database.git&lt;/code&gt; Origin is the default name of the master branch and you can change its name. Then &lt;code&gt;git push -u origin master&lt;/code&gt; push the changes to the cloud repository(origin) on master branch. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#when-you-created-repository-and-want-to-commit-the-progress-on-the-existing-github"&gt;
  &lt;/a&gt;
  When you created repository and want to commit the progress on the existing github
&lt;/h1&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Chainlink Keepers - An alarm clock for your Smart Contracts</title>
      <author>Cibrax</author>
      <pubDate>Fri, 06 Aug 2021 19:48:50 +0000</pubDate>
      <link>https://dev.to/cibrax/chainlink-keepers-an-alarm-clock-for-your-smart-contracts-m0e</link>
      <guid>https://dev.to/cibrax/chainlink-keepers-an-alarm-clock-for-your-smart-contracts-m0e</guid>
      <description>&lt;p&gt;Smart Contracts work in reactive mode. Once deployed in the Blockchain, they go to a hibernation state until some work needs to be done. When the work is completed, they go to bed again. They basically react to transactions by executing code.&lt;/p&gt;

&lt;p&gt;On the contrary, Smart Contracts in proactive mode, which don't really exist in reality but can be emulated, watch for different conditions to wake up themselves and do their job without intervention. For example, a contract that runs automatically when it detects a price fluctuation or when a given date or time is reached.&lt;/p&gt;

&lt;p&gt;These contracts require the intervention of an external agent or worker that is constantly pinging the contract to verify whether one of the conditions to run was met. Those conditions should be checked in one or more view methods to avoid paying gas to the network. That means they can be resolved locally without submitting transactions.&lt;/p&gt;

&lt;p&gt;Running an agent or worker now means you require additional off-chain infrastructure, which is centralized. &lt;/p&gt;

&lt;p&gt;What if you can also leverage some of the existing decentralized network of oracles (DONs) from Chainlink to run those agents. Enter in the scene the Chainlink Keepers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chainlink-keepers"&gt;
  &lt;/a&gt;
  Chainlink Keepers
&lt;/h2&gt;

&lt;p&gt;Keepers is a feature recently added in Chainlink for hosting jobs that allow running Smart Contracts proactively. It uses DONs to run the jobs in a decentralized manner. &lt;br&gt;
Jobs are called Upkeeps, and the Smart Contracts must implement an interface with the following methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function checkUpkeep(
    bytes calldata checkData
  )
    external
    returns (
        bool upkeepNeeded,
        bytes memory performData
);

function performUpkeep(
    bytes calldata performData
) external;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;checkUpKeep&lt;/code&gt; is the method called periodically by the jobs to check if some works need to be done. &lt;em&gt;It's the alarm clock for your contract&lt;/em&gt;. It receives a parameter checkData, which could be helpful to check for the conditions in the method implementation. That data is a fixed value that you configure as part of the job. It must be implemented as a view to avoiding paying gas on each call. &lt;br&gt;
It returns two values, upKeepNeeded, which specifies if an action must be performed, and data to be passed to execute that action.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;performUpKeep&lt;/code&gt; is the method where the Smart Contract does the work. It's called if upKeepNeeded returned a value equal to true.&lt;/p&gt;

&lt;p&gt;Chainlink also offers an application where you can configure the jobs. As part of the configuration of the job, you must provide the following data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An email address&lt;/li&gt;
&lt;li&gt;Name of the job (unkeep)&lt;/li&gt;
&lt;li&gt;Address of the deployed contract&lt;/li&gt;
&lt;li&gt;Admin Address. This is the address of an owner that can withdraw funds associated to the contract.&lt;/li&gt;
&lt;li&gt;Gas Limit. This gas limit is for executing the performUnKeep method.&lt;/li&gt;
&lt;li&gt;Check Data, which is passed to the checkUpkeep method. This is an array of bytes (hex), which could result from using abi.encode.
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;This feature is still in beta and the registration must be done manually in the &lt;a href="https://keepers.chain.link/"&gt;Keepers app&lt;/a&gt;. Not support for automation APIs for the moment&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#anatomy-of-a-keeper-contract"&gt;
  &lt;/a&gt;
  Anatomy of a Keeper contract
&lt;/h2&gt;

&lt;p&gt;Let's say that you want to implement a Betting contract for a game with two participants. You would like to select a winner and distribute the gains after the game finishes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

interface KeeperCompatibleInterface {
    function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);
    function performUpkeep(bytes calldata performData) external;
}

contract Betting is KeeperCompatibleInterface{

   uint public matchTimestamp;

    constructor(uint _matchTimestamp) {
      matchTimestamp = _matchTimestamp;
    }

    function checkUpkeep(bytes calldata checkData)  external view override returns (bool upkeepNeeded, bytes memory performData) {
         upkeepNeeded = (block.timestamp &amp;gt; matchTimestamp);
    }

    function performUpkeep(bytes calldata performData) external override {
        //calls an oracle to retrieve the result of the match

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The contract is set with a time lock through a timestamp received in the constructor. We can assume this represents the date and time after the game finishes, and we know who the winner is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; uint public matchTimestamp;

    constructor(uint _matchTimestamp) {
      matchTimestamp = _matchTimestamp;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;checkUpkeep&lt;/code&gt; method compares the current block timestamp with the timestamp assigned to the contract and returns a value indicating if the condition is satisfied or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function checkUpkeep(bytes calldata checkData)  external view override returns (bool upkeepNeeded, bytes memory performData) {
         upkeepNeeded = (block.timestamp &amp;gt; matchTimestamp);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, the performUpkeep emulates a call to an Oracle in Chainlink that might hit an API to return the game's result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function performUpkeep(bytes calldata performData) external override {
        //calls an oracle to retrieve the result of the match

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>ethereum</category>
      <category>smartcontracts</category>
      <category>chainlink</category>
      <category>keepers</category>
    </item>
    <item>
      <title>Create Prado Museum UI/UX + Demo 🍿 (React ⚛️)</title>
      <author>Roden</author>
      <pubDate>Fri, 06 Aug 2021 19:15:51 +0000</pubDate>
      <link>https://dev.to/kerthin/create-prado-museum-ui-ux-demo-react-1pg2</link>
      <guid>https://dev.to/kerthin/create-prado-museum-ui-ux-demo-react-1pg2</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://kerthin.github.io/pradoMuseum-templateSait/#"&gt;&lt;h1&gt;Full Prado Museum Demo&lt;/h1&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kerthin"&gt;
        Kerthin
      &lt;/a&gt; / &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait"&gt;
        pradoMuseum-templateSait
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Site of the Prado Museum, for viewing paintings.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait#"&gt;&lt;img width="100" src="https://res.cloudinary.com/practicaldev/image/fetch/s--XB84-geH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Kerthin/pradoMuseum-templateSaitREADMEimage/squirrelAppIcon.png" alt="Kerthin logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait#"&gt;&lt;img src="https://camo.githubusercontent.com/3aaee52aea7e26ea020e0c2bac3ea70c011c1cc0507999c2c8b91c121b7fe9ba/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6275696c642d70617373696e672d627269676874677265656e2e737667" alt="Build Status"&gt;&lt;/a&gt;
  &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait#"&gt;&lt;img src="https://camo.githubusercontent.com/0ef94bb3d6bdf5fec0c3f5452111c9dd1b2d4c82518f871f6da0dd27fce5910d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76362e31342e342d626c75652e737667" alt="Version"&gt;&lt;/a&gt;
  &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait#"&gt;&lt;img src="https://camo.githubusercontent.com/e2c7bcf456840ac212cd09701b26b6d86ed89b7780dde7ef35aa3d5c2312af9b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6f64652d7631302e31362e302d626c75652e737667" alt="Version"&gt;&lt;/a&gt; &lt;br&gt;
  &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait#"&gt;&lt;img src="https://camo.githubusercontent.com/48f77fe8664a8ec9de43e0c8270fea0200eefc7e1776ad651eb83237fa93d64d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7265706f25323073697a652d3734322e352532304d422d677265656e2e737667" alt="Size"&gt;&lt;/a&gt;
  &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait#"&gt;&lt;img src="https://camo.githubusercontent.com/4dd77986971920e34ba97e1e158d20878f1cd18c7a581903ef4bca2e730e1e0d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f6a65637425323076657273696f6e2d76302e382d626c75652e737667" alt="Version"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
Description&lt;/h2&gt;
&lt;p&gt;The template is a site for viewing the works of great artists represented in the famous Prado Museum. You can also find out information about the painting and the artist himself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To launch the app
&lt;ul&gt;
&lt;li&gt;download the repository;&lt;/li&gt;
&lt;li&gt;log in to the downloaded repository using the command line or terminal;&lt;/li&gt;
&lt;li&gt;enter the command line 'npm run start' or 'serve-s build' and go to the address specified in the terminal.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Note that the project was made using the CREATE REACT APP.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kerthin.github.io/pradoMuseum-templateSait/" rel="nofollow"&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
Use technology.&lt;/h4&gt;
&lt;p&gt;The following technologies were used to create this project:&lt;/p&gt;
&lt;h3&gt;
Software platform&lt;/h3&gt;
&lt;p&gt;
  &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait#"&gt;
    &lt;img width="260px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--gtGFTBEX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Kerthin/pradoMuseum-templateSaitREADMEimage/technology/nodejs-1.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;h3&gt;
Libraries&lt;/h3&gt;
&lt;p&gt;
  &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait#"&gt;
    &lt;img width="260px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vNAXIytz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Kerthin/pradoMuseum-templateSaitREADMEimage/technology/react.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;h3&gt;
Package manager&lt;/h3&gt;

&lt;p&gt;
  &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait#"&gt;
    &lt;img width="144px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--A76ceuua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Kerthin/pradoMuseum-templateSaitREADMEimage/technology/npm.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;h4&gt;
The repository of this project is divided into several sections:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;src&lt;/code&gt; - this repository is intended for files with the help of which the project is being developed. It is from this repository that all project files are compiled;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;docs&lt;/code&gt; - a repository that stores all compiled code with all media…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Kerthin/pradoMuseum-templateSait"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;2 years ago, wandering through the expanses of Behance, I saw an interesting work, which was a redesign for the website of the Spanish Prado Museum. The work was called &lt;a href="https://www.behance.net/gallery/73878699/Prado-Museum-Website-with-Virtual-Reality-Experience"&gt;Prado Museum Website with Virtual Reality Experience&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course, I didn't want to implement the entire project, because I didn't understand the UI and UX logic very well in the work that I saw on Behance.&lt;/p&gt;

&lt;p&gt;Moreover, I just wanted to create a small one-page project. Considering that this was supposed to be my first project on React. Therefore, I want to immediately note that the code here is very lousy, and this post is not a tutorial of any kind. And I was too lazy to break the code into components, so it is written entirely in one file. I'm not going to teach anyone anything, but I just want to tell you about how I implemented this project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/LweK4Ma6Chp8k/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/LweK4Ma6Chp8k/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Concept&lt;/h1&gt;

&lt;p&gt;The idea was simple, I want to implement a one-page website where I can use the menu to select the artist I am interested in and view his works, as well as information about him, which will be displayed on the main page and in a specially side menu.&lt;/p&gt;

&lt;p&gt;All information is stored in a special object, which you can see at &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait/blob/master/src/App.js"&gt;this link&lt;/a&gt;. The object itself consists of three stages.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt; The Country 👉 The Artist 👉 His Paintings&lt;/strong&gt;&lt;br&gt;
There are &lt;code&gt;7&lt;/code&gt; countries in our array, and the total number of artists is &lt;code&gt;27&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are &lt;code&gt;2 menus&lt;/code&gt; on the website. &lt;code&gt;One menu&lt;/code&gt; is the main one, it presents artists who are in sections with countries. The &lt;code&gt;second menu&lt;/code&gt; is auxiliary, it displays information about the selected artist (the menu is located on the side, you can open it by &lt;code&gt;clicking on the portrait&lt;/code&gt; of the artist that is located on the main screen).&lt;/p&gt;

&lt;h1&gt;Realization&lt;/h1&gt;

&lt;h3&gt;01. Main Page&lt;/h3&gt;

&lt;p&gt;To begin with, I decided to create a main page that will display brief information about the artist.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DYxLK54u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fia1fufy8ndq1rlukszv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DYxLK54u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fia1fufy8ndq1rlukszv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; At the very top I have a button to open the menu.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GvKF_LXb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3jipf6zsquke18dewts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GvKF_LXb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3jipf6zsquke18dewts.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; In the center there is a very brief information about the artist (&lt;code&gt;years of life&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;country of birth&lt;/code&gt;).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qNueURp9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jczfaysdj0cxdviqmvq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qNueURp9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jczfaysdj0cxdviqmvq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Just below is a portrait of the selected artist, which is located in a round block. When you &lt;code&gt;click&lt;/code&gt; on it, a side menu should &lt;code&gt;open&lt;/code&gt;, where the artist's paintings will be presented, as well as broader information about the artist (&lt;code&gt;early life&lt;/code&gt;, &lt;code&gt;synopsis&lt;/code&gt;).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cS8Wtb7f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5n0evr1qz5uqvmoaaqns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cS8Wtb7f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5n0evr1qz5uqvmoaaqns.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; At the very bottom there is information about the picture, which is displayed on the main screen (&lt;code&gt;name&lt;/code&gt;, &lt;code&gt;year of creation&lt;/code&gt;, &lt;code&gt;artist's name&lt;/code&gt;).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ckr6GKVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0z44l4sawez7z42lbv2k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ckr6GKVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0z44l4sawez7z42lbv2k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;02. Artists Menu&lt;/h3&gt;

&lt;p&gt;The menu was planned to be made full-screen. Therefore, before I output information to it, I need to work out the animation of opening this menu.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Animation&lt;/strong&gt;&lt;br&gt;
The animation of opening the menu should look as if it shifts the main page down when opening it. This was implemented as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/mx4XGr7XKInZMaURbm/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/mx4XGr7XKInZMaURbm/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The burger menu itself was made in the form of two closing lines that form a cross.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/cACoiAP0PTSMqdvZBJ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/cACoiAP0PTSMqdvZBJ/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Artists&lt;/strong&gt;&lt;br&gt;
Now it's time to draw lists of artists. To do this, we need to break the information about artists into components and display them in the form of columns, which are divided by country categories.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ----- Picture Components&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PictureInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;picture__textWrap&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;picture__text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;picture__date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dateWritten&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;picture__name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PictureImg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;picture__imgWrap&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;picture__img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`picture__imgBg &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;imgBook&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Picture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;picture&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;picture__info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PictureInfo&lt;/span&gt; &lt;span class="nx"&gt;dateWritten&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dateWritten&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PictureImg&lt;/span&gt; &lt;span class="nx"&gt;imgBook&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;imgBook&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Pictures&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fragment&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pictures&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{}).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Picture&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/React.Fragment&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ----- END Picture Components&lt;/span&gt;


&lt;span class="c1"&gt;// ----- Painter Components&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PainterInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;painter__textWrap&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;painter__text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;painter__name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;painter__years&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;born&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;died&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PainterImg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;painter__imgWrap&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;painter__img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`painter__imgBg &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Painter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onClickLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`painter &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;painter__info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PainterInfo&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;born&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;born&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;died&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;died&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PainterImg&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ----- END Painter Components&lt;/span&gt;


&lt;span class="c1"&gt;// ----- Сountries Components&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CountryTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;countryTitle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;countryTitle__name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Сountries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;swiper-slide&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CountryTitle&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;painters&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Painter&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClickLink&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onSelectLink&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onSelectWriter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ----- END Сountries Components&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And now we need to bring it all to our menu.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KReoudvI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxqlv6s9kq3rm7o8llf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KReoudvI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxqlv6s9kq3rm7o8llf7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But here we have a problem. The fact is that we have 7 countries in our array, and a maximum of 4 fall into our field of view in the menu. To do this, we need to implement the slider function in our menu so that we can scroll through our list of countries.&lt;/p&gt;

&lt;p&gt;To do this, I decided to use the &lt;a href="https://swiperjs.com/"&gt;Swiper.js&lt;/a&gt;. It was possible to simply implement this using &lt;code&gt;CSS&lt;/code&gt; and &lt;code&gt;FLEX&lt;/code&gt;, but I wanted the slider to be scrollable with gestures.&lt;/p&gt;

&lt;p&gt;And here's what happened:&lt;br&gt;
&lt;a href="https://i.giphy.com/media/Tc65wdG9L9WkQDFewb/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Tc65wdG9L9WkQDFewb/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Choosing a artist&lt;/strong&gt;&lt;br&gt;
The last thing left for us is to implement the artist selection function. To do this, we need that when we &lt;code&gt;click&lt;/code&gt; on the artist we need, the information stored in the &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait/blob/master/src/App.js"&gt;object&lt;/a&gt; about the artist is transferred to our side menu, where paintings and more detailed information about the artist are displayed. It is important that the number of paintings is the same as it is prescribed in the &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait/blob/master/src/App.js"&gt;object&lt;/a&gt;. It is also necessary that the &lt;code&gt;menu closes&lt;/code&gt; independently when choosing the artist we need.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/sVFwRufEGSe3lcQnwW/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/sVFwRufEGSe3lcQnwW/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;03. Side Menu&lt;/h3&gt;

&lt;p&gt;It remains to implement the side menu. It will be executed in the form of three columns. The &lt;code&gt;first&lt;/code&gt; column will display brief information about the artist, the &lt;code&gt;second&lt;/code&gt; will display paintings, and the &lt;code&gt;third&lt;/code&gt; column will display more detailed information from the artist's life.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l0qy4T9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nl0kya4agmf1r842dief.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l0qy4T9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nl0kya4agmf1r842dief.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you need to display information about the artist who was selected in the top menu in these columns.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/0tI1AF0JgbQma1IBoH/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/0tI1AF0JgbQma1IBoH/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;THE END&lt;/h1&gt;

&lt;p&gt;Well, that's it. I apologize in advance for the fact that the information was submitted very crumpled. But on the other hand, as I wrote earlier, I was not going to teach anyone anything in this article. In this post, I just wanted to demonstrate my old work and nothing more special.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://kerthin.github.io/pradoMuseum-templateSait/#"&gt;&lt;h1&gt;Full Prado Museum Demo&lt;/h1&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kerthin"&gt;
        Kerthin
      &lt;/a&gt; / &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait"&gt;
        pradoMuseum-templateSait
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Site of the Prado Museum, for viewing paintings.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait#"&gt;&lt;img width="100" src="https://res.cloudinary.com/practicaldev/image/fetch/s--XB84-geH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Kerthin/pradoMuseum-templateSaitREADMEimage/squirrelAppIcon.png" alt="Kerthin logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait#"&gt;&lt;img src="https://camo.githubusercontent.com/3aaee52aea7e26ea020e0c2bac3ea70c011c1cc0507999c2c8b91c121b7fe9ba/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6275696c642d70617373696e672d627269676874677265656e2e737667" alt="Build Status"&gt;&lt;/a&gt;
  &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait#"&gt;&lt;img src="https://camo.githubusercontent.com/0ef94bb3d6bdf5fec0c3f5452111c9dd1b2d4c82518f871f6da0dd27fce5910d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e706d2d76362e31342e342d626c75652e737667" alt="Version"&gt;&lt;/a&gt;
  &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait#"&gt;&lt;img src="https://camo.githubusercontent.com/e2c7bcf456840ac212cd09701b26b6d86ed89b7780dde7ef35aa3d5c2312af9b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6f64652d7631302e31362e302d626c75652e737667" alt="Version"&gt;&lt;/a&gt; &lt;br&gt;
  &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait#"&gt;&lt;img src="https://camo.githubusercontent.com/48f77fe8664a8ec9de43e0c8270fea0200eefc7e1776ad651eb83237fa93d64d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7265706f25323073697a652d3734322e352532304d422d677265656e2e737667" alt="Size"&gt;&lt;/a&gt;
  &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait#"&gt;&lt;img src="https://camo.githubusercontent.com/4dd77986971920e34ba97e1e158d20878f1cd18c7a581903ef4bca2e730e1e0d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f6a65637425323076657273696f6e2d76302e382d626c75652e737667" alt="Version"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
Description&lt;/h2&gt;
&lt;p&gt;The template is a site for viewing the works of great artists represented in the famous Prado Museum. You can also find out information about the painting and the artist himself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To launch the app
&lt;ul&gt;
&lt;li&gt;download the repository;&lt;/li&gt;
&lt;li&gt;log in to the downloaded repository using the command line or terminal;&lt;/li&gt;
&lt;li&gt;enter the command line 'npm run start' or 'serve-s build' and go to the address specified in the terminal.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Note that the project was made using the CREATE REACT APP.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kerthin.github.io/pradoMuseum-templateSait/" rel="nofollow"&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
Use technology.&lt;/h4&gt;
&lt;p&gt;The following technologies were used to create this project:&lt;/p&gt;
&lt;h3&gt;
Software platform&lt;/h3&gt;
&lt;p&gt;
  &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait#"&gt;
    &lt;img width="260px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--gtGFTBEX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Kerthin/pradoMuseum-templateSaitREADMEimage/technology/nodejs-1.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;h3&gt;
Libraries&lt;/h3&gt;
&lt;p&gt;
  &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait#"&gt;
    &lt;img width="260px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vNAXIytz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Kerthin/pradoMuseum-templateSaitREADMEimage/technology/react.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;h3&gt;
Package manager&lt;/h3&gt;

&lt;p&gt;
  &lt;a href="https://github.com/Kerthin/pradoMuseum-templateSait#"&gt;
    &lt;img width="144px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--A76ceuua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Kerthin/pradoMuseum-templateSaitREADMEimage/technology/npm.svg"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;h4&gt;
The repository of this project is divided into several sections:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;src&lt;/code&gt; - this repository is intended for files with the help of which the project is being developed. It is from this repository that all project files are compiled;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;docs&lt;/code&gt; - a repository that stores all compiled code with all media…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Kerthin/pradoMuseum-templateSait"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thank you for your attention. I hope that each of you has your favorite artist, whose works you can endlessly admire.&lt;/p&gt;

&lt;p&gt;See you all later.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/HAhv0X86V7nzi/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/HAhv0X86V7nzi/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>css</category>
    </item>
    <item>
      <title>Navigation made easy with Flutter</title>
      <author>Dhruvil Patel</author>
      <pubDate>Fri, 06 Aug 2021 18:48:11 +0000</pubDate>
      <link>https://dev.to/dhruvilp/navigation-made-easy-with-flutter-4d9</link>
      <guid>https://dev.to/dhruvilp/navigation-made-easy-with-flutter-4d9</guid>
      <description>&lt;p&gt;Flutter is a framework for the dart programming language used for building cross-platform mobile apps and even web pages. Flutter converts code into the native language (Kotlin/Java, Swift for apps and HTML, CSS JS for web). &lt;/p&gt;

&lt;p&gt;Although, which app or website is better without navigation amongst screens or pages respectively unless you have single-page applications. &lt;/p&gt;

&lt;p&gt;Let's understand how Flutter provides such ease in navigation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concept"&gt;
  &lt;/a&gt;
  Concept:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Flutter implements the concept of &lt;strong&gt;Stack&lt;/strong&gt; datatype in making navigation possible.&lt;/li&gt;
&lt;li&gt;In normal terms, Stack is a pile of objects referring to the concept of LIFO(Last In First Out). For example, the stack of books, the stack of money, etc. &lt;/li&gt;
&lt;li&gt;In Flutter's case, there is a stack of screens. Scaffolds or any custom widget which represents a screen.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Stack widget and stack referred here are two different cases. &lt;br&gt;
Here, a stack is referred to as datatype not &lt;a href="https://api.flutter.dev/flutter/widgets/Stack-class.html"&gt;Stack&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#methods-of-navigating"&gt;
  &lt;/a&gt;
  Methods of navigating:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#push"&gt;
  &lt;/a&gt;
  Push()
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NHka_ffi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6ansdtvbn6oh9u3sfq8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NHka_ffi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6ansdtvbn6oh9u3sfq8.png" alt="Push"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the above code snippet, &lt;strong&gt;Navigator&lt;/strong&gt; class provides method &lt;strong&gt;push&lt;/strong&gt; which does the same function as in datatype. It pushes the screen on the top of the screen which is currently been rendered.&lt;/li&gt;
&lt;li&gt;Navigator accepts context to locate the position of the current Scaffold(Screen) in the widget tree.&lt;/li&gt;
&lt;li&gt;Then after, We pass another so-called method in push(). Moreover, &lt;strong&gt;MaterialPageRoute&lt;/strong&gt; is not mandatory. You can also provide &lt;strong&gt;CupertinoPageRoute&lt;/strong&gt; which will differ in transition effect only.&lt;/li&gt;
&lt;li&gt;To check out more about them: &lt;a href="https://api.flutter.dev/flutter/cupertino/CupertinoPageRoute-class.html"&gt;CupertinoPageRoute&lt;/a&gt;
&lt;a href="https://api.flutter.dev/flutter/material/MaterialPageRoute-class.html"&gt;MaterialPageRoute&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;It accepts builder argument to build the screen to which you will navigate.&lt;/li&gt;
&lt;li&gt;The following screen can be provided by arrow function or normal function as shown in snippet.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pushnamed"&gt;
  &lt;/a&gt;
  PushNamed()
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SO-FCIQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6oc6qrcic7nqhh85ovb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SO-FCIQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6oc6qrcic7nqhh85ovb.png" alt="PushNamed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It has the same functionality as &lt;strong&gt;push()&lt;/strong&gt; do but rather than navigating dynamically, it accepts routes provided and accordingly proceeds.&lt;/li&gt;
&lt;li&gt;Similarly, it starts with

&lt;code&gt;Navigator.of(context)&lt;/code&gt;

, and then we implement &lt;strong&gt;pushNamed&lt;/strong&gt; method. It accepts the route name as its argument which will tell Flutter where to navigate.
&amp;gt; Important points to note:
* It is good to set a static route name so that it can be used not only in that particular file but also in the file where you set functions of navigation according to these route names.
* For example:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w5KIWGxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtxre0vj8l9t5jgkoyyh.png" alt="Routes"&gt;
* In the above snippet, routes argument is passed which is available in &lt;strong&gt;MaterialApp&lt;/strong&gt; which is the entry widget of your app. It consists of all the routes available or mentioned in your widgets.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To add the route we need to provide the route name by the way mentioned in the snippet. The class enum in which your route is and calling it like it's property&lt;br&gt;
&lt;br&gt;
&lt;code&gt;For e.g, Alignment.center&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then we provide value to route name in the form of arrow function of context, and the screen or rather the class constructor which should be rendered after navigation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Other than route name, we can also see the arguments parameter. It is simply the arguments you want to pass to the page we will be going to. For e.g, there is a shopping app and you want to navigate to the details of a product by clicking on it then you can pass the id of it and it will render all the details of the product of id passed as an argument.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To accept the argument, the following method can be used:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--26wBVYTt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdlyw6tqv84ezis811la.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--26wBVYTt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdlyw6tqv84ezis811la.png" alt="ModalRoute"&gt;&lt;/a&gt;&lt;br&gt;
Note that you need to provide the data type in which your arguments will be passed on. Then you can simply access it by&lt;br&gt;
&lt;br&gt;
&lt;code&gt;routeArgs['id']&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pop"&gt;
  &lt;/a&gt;
  Pop()
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lE7ZdErN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tms0ix3b9z10xzgbgcma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lE7ZdErN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tms0ix3b9z10xzgbgcma.png" alt="Pop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From above snippet, it clearly tells that pop process is simple.
However, we can see that an Id argument is passed in it. What is it?&lt;/li&gt;
&lt;li&gt;It is the parameter that is passed back reverse to the page it goes to. &lt;/li&gt;
&lt;li&gt;For e.g, if SecondPage pops and Flutter renders FirstPage back then the Id argument will be passed to FirstPage and we can perform various methods with it.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XMreCcgB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0y5tjxixtkg92ixa3hb2.png" alt="then"&gt;
&lt;/li&gt;
&lt;li&gt;Where we pushed the page we came from, we can add then method following push and receive the data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#other-pushpop-methods"&gt;
  &lt;/a&gt;
  Other push/pop methods:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;pushReplacement() / pushNamedReplacement: It is also an important. What Flutter did till now was keep adding screens on top of each other every time we navigate. It would lead to memory leaks in the future. The above method just replaces the screen with a new one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pushAndRemoveUntil() / pushNamedAndRemoveUntil(): It will push the page and remove all other routes as soon as the condition provided it met.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;popAndPushNamed(): It will dispose of the current page and push another page according to the route provided.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;popUntil(): It will repeatedly pop pages until the condition is met.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;canPop(): It will check if the page can be popped. For e.g, if there isn't any page to go back to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;restorablePopAndPushNamed(): It will pop the current route of the navigator and push a named route in its place.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;maybePop(): It checks for the willPop() method and return result accordingly. Head here to find out more =&amp;gt; &lt;a href="https://api.flutter.dev/flutter/widgets/Navigator/maybePop.html"&gt;maybePop&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus, there can be many ways to navigate between pages and optimization.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>beginners</category>
      <category>dart</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Rails application boilerplate for fast MVP development</title>
      <author>Alexey Poimtsev (lord/emperor)</author>
      <pubDate>Fri, 06 Aug 2021 18:47:42 +0000</pubDate>
      <link>https://dev.to/alec/rails-application-boilerplate-for-fast-mvp-development-1ccb</link>
      <guid>https://dev.to/alec/rails-application-boilerplate-for-fast-mvp-development-1ccb</guid>
      <description>&lt;p&gt;Hey, Everyone!&lt;br&gt;
I'd like to share with you my ruby on rails templates, which i've created to speedup MVP development for &lt;a href="https://progress-engine.com/en"&gt;my company&lt;/a&gt; clients. I've tried to create a template with most useful features and best app development practices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-inside"&gt;
  &lt;/a&gt;
  What's inside
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ruby on rails application template &lt;/li&gt;
&lt;li&gt;bootstrap or tailwind.css frontend frameworks with scaffold templates &lt;/li&gt;
&lt;li&gt;.gitignore file&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt; configuration files&lt;/li&gt;
&lt;li&gt;postgresql database connector&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://purgecss.com/"&gt;purge.css&lt;/a&gt; to cleanup stylesheets&lt;/li&gt;
&lt;li&gt;timezone detection with &lt;a href="https://github.com/iansinnott/jstz"&gt;jstz&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;typescript for frontend&lt;/li&gt;
&lt;li&gt;Procfile to run app, webpacker and sidekiq&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mperham/sidekiq"&gt;Sidekiq&lt;/a&gt; for background jobs&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ankane/strong_migrations"&gt;strong_migrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;authentication with &lt;a href="https://github.com/heartcombo/devise"&gt;devise&lt;/a&gt; and &lt;a href="https://github.com/michaelbanfield/devise-pwned_password"&gt;devise-pwned_password&lt;/a&gt; + google auth&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ankane/pretender"&gt;pretender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;authorization with &lt;a href="https://github.com/varvet/pundit"&gt;pundit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;role management with &lt;a href="https://github.com/RolifyCommunity/rolify"&gt;rolify&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;ability to ban user account&lt;/li&gt;
&lt;li&gt;pre-configured generators&lt;/li&gt;
&lt;li&gt;SEO tools - &lt;a href="https://github.com/kpumuk/meta-tags"&gt;meta-tags&lt;/a&gt;, &lt;a href="http://github.com/kjvarga/sitemap_generator"&gt;sitemap_generator&lt;/a&gt; and &lt;a href="https://github.com/norman/friendly_id"&gt;friendly_id&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;I18n tools - &lt;a href="http://github.com/svenfuchs/rails-i18n"&gt;rails-i18n&lt;/a&gt; and &lt;a href="https://github.com/glebm/i18n-tasks"&gt;i18n-tasks&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;rspec and cucumber for testing&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mailgun.com"&gt;Mailgun&lt;/a&gt; integration for email notifications&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rubocop/rubocop/"&gt;rubocop&lt;/a&gt; for code style validations&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Shopify/better-html"&gt;better_html&lt;/a&gt; and &lt;a href="https://github.com/Shopify/erb-lint"&gt;erb-lint&lt;/a&gt; for erb linting&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/flyerhzm/bullet"&gt;bullet&lt;/a&gt; to prevent N+1 problems&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/presidentbeef/brakeman"&gt;brakeman&lt;/a&gt; and &lt;a href="https://github.com/postmodern/bundler-audit"&gt;bundler-audit&lt;/a&gt; as security scanners&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/DamirSvrtan/fasterer"&gt;fasterer&lt;/a&gt; for performance optimization&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rweng/pry-rails"&gt;pry-rails&lt;/a&gt; and &lt;a href="https://github.com/amazing-print/amazing_print"&gt;amazing_print&lt;/a&gt; for better rails console&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/AaronLasseigne/active_interaction"&gt;active_interaction&lt;/a&gt; to make controllers thin&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://viewcomponent.org/"&gt;view_component&lt;/a&gt; as a replacement for partials&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jnunemaker/flipper"&gt;flipper&lt;/a&gt; with Flipper UI to enable &lt;a href="https://boringrails.com/articles/feature-flags-simplest-thing-that-could-work/"&gt;flag management&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ankane/ahoy"&gt;ahoy&lt;/a&gt;, &lt;a href="https://github.com/ankane/ahoy_email"&gt;ahoy_email&lt;/a&gt; and &lt;a href="https://github.com/ankane/blazer"&gt;blazer&lt;/a&gt; for business intelligence&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/excid3/noticed"&gt;noticed&lt;/a&gt; for notifications&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ctran/annotate_models"&gt;annotate&lt;/a&gt; for annotations&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/plentz/lol_dba"&gt;lol_dba&lt;/a&gt; for indexing&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ankane/lockbox"&gt;lockbox&lt;/a&gt; and &lt;a href="https://github.com/ankane/blind_index"&gt;blind_index&lt;/a&gt; for email fields encryption&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rack/rack-attack"&gt;rack-attack&lt;/a&gt; to prevent bruteforce and DDoS attacks &lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.capistranorb.com"&gt;capistrano&lt;/a&gt; with plugins for deployment&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ankane/authtrail"&gt;authrail&lt;/a&gt; to track login attempts&lt;/li&gt;
&lt;li&gt;announcements (new/fix/update) for all users&lt;/li&gt;
&lt;li&gt;flash helper&lt;/li&gt;
&lt;li&gt;referral system&lt;/li&gt;
&lt;li&gt;landing page&lt;/li&gt;
&lt;li&gt;custom error pages&lt;/li&gt;
&lt;li&gt;profiles controller&lt;/li&gt;
&lt;li&gt;admin and customer dashboards&lt;/li&gt;
&lt;li&gt;users administration with search&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-possible-will-be-added-later"&gt;
  &lt;/a&gt;
  What (possible) will be added later
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;add API-only template&lt;/li&gt;
&lt;li&gt;update with rails &lt;a href="https://github.com/ankane/production_rails"&gt;production best practices&lt;/a&gt;, &lt;a href="https://github.com/ankane/secure_rails"&gt;security best practices&lt;/a&gt; and &lt;a href="https://github.com/eliotsykes/rails-security-checklist"&gt;rails-security-checklist&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add tools from &lt;a href="https://github.com/evilmartians/terraforming-rails"&gt;evil martians tollbox&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;test and add &lt;a href="https://github.com/thesp0nge/dawnscanner"&gt;dawnscanner&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/flyerhzm/rails_best_practices"&gt;rails_best_practices&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/github/secure_headers"&gt;secure_headers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/arkadiyt/ssrf_filter"&gt;ssrf_filter&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/devise-security/devise-security"&gt;devise-security&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://hotwire.dev/"&gt;hotwire&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/ankane/mailkick"&gt;mailkick&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/jhawthorn/discard"&gt;discard&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/markets/invisible_captcha"&gt;invisible_captcha&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/roidrage/lograge"&gt;lograge&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/ankane/hypershield"&gt;hypershield&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/jenseng/hair_trigger"&gt;hairtrigger&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/brianhempel/active_record_union"&gt;active_record_union&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/scenic-views/scenic"&gt;scenic&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/Shopify/identity_cache"&gt;identity_cache&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;move to &lt;a href="https://github.com/huacnlee/rails-settings-cached"&gt;rails-settings-cached&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;move to &lt;a href="https://github.com/jnicklas/turnip"&gt;turnip&lt;/a&gt; from cucumber&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/ankane/searchjoy"&gt;searchjoy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/djezzzl/database_consistency"&gt;database_consistency&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/toptal/database_validations"&gt;database_validations&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/amatsuda/traceroute"&gt;traceroute&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/palkan/isolator"&gt;isolator&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/evilmartians/lefthook"&gt;lefthook&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add &lt;a href="https://github.com/prontolabs/pronto"&gt;pronto&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;add clicks and registrations stats to referral system&lt;/li&gt;
&lt;li&gt;add feedback feature&lt;/li&gt;
&lt;li&gt;add monitoring and analytics tools&lt;/li&gt;
&lt;li&gt;add A11y&lt;/li&gt;
&lt;li&gt;add deployments tools&lt;/li&gt;
&lt;li&gt;add documentation (howto's, best practices, curated list of libraries)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check it here - &lt;a href="https://github.com/alec-c4/kickstart"&gt;https://github.com/alec-c4/kickstart&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And i'll be happy for your feedback and PR's.&lt;/p&gt;

</description>
      <category>rails</category>
      <category>tailwindcss</category>
      <category>bootstrap</category>
      <category>template</category>
    </item>
    <item>
      <title>JavaScript Fundamentals</title>
      <author>Dani Schuhman</author>
      <pubDate>Fri, 06 Aug 2021 18:06:55 +0000</pubDate>
      <link>https://dev.to/dani8439/javascript-fundamentals-1875</link>
      <guid>https://dev.to/dani8439/javascript-fundamentals-1875</guid>
      <description>&lt;p&gt;Learning to code is hard. But it can also be incredibly rewarding. Creating access to that learning is something that I am incredibly passionate about. Everyone should learn to code, even just a little, in order to have a basic understanding of how the web works. Although, I should point out that I am convinced that the internet is probably held together by three gorilla's in a trench coat, who use only a roll of duct tape, having a basic understanding of the fundamentals of a language like JavaScript is incredibly important. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-javascript"&gt;
  &lt;/a&gt;
  What is JavaScript?
&lt;/h2&gt;

&lt;p&gt;MDN defines JavaScript as a &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript"&gt;"a scripting language that enables you to create dynamically updating content, control multimedia, animate images, and pretty much everything else. (Okay, not everything, but it is amazing what you can achieve with a few lines of JavaScript code.)"&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, but what does that mean? And how can we use it? Well, in order to dive right into the world of JavaScript, you don't need to have a code editor running on your computer. The easiest way is to open up the JavaScript console in your chrome browser. You can do that by pressing Command + Option + J on a Mac, or Ctrl + Shift + J on a Windows/Linux system. &lt;/p&gt;

&lt;p&gt;JavaScript allows us to store values inside of variables, perform operations, run code that responds to events on a web page (such as clicking or scrolling, etc), and so much more! &lt;/p&gt;

&lt;p&gt;As we go through the definitions, try playing around in the console, entering the information as we go along. One of the first things to learn about learning to code, is how important repetition is. You will learn so much more by coding along with this, rather than reading it alone. Your fingers and your brain will develop muscle memory and know what to type before you type it as it becomes more familiar, and very soon you'll turn into a coding genius! Okay, maybe not a genius, but certainly someone who isn't as initially baffled by what the heck all this stuff means then you were initially. Trust me. &lt;/p&gt;

&lt;p&gt;I'm certainly not going to cover everything, I hope to write multiple articles on this, but think of this as the first foray of many into the world of JavaScript. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-value"&gt;
  &lt;/a&gt;
  What is a Value?
&lt;/h2&gt;

&lt;p&gt;A value is one of the most basic and important units of information in programming. A value is a piece of data. One reason why it's important, is because we can store data/a value inside of a variable, and then access it later. &lt;/p&gt;

&lt;p&gt;Think of a variable like the old school card catalogues at the library. Long before the days of computers, the easiest way to go and find a book, was to research in a card catalogue a reference number, which would then go and allow us to find the book wherever it lived within the vast library shelves. So long as we know the reference number of the book, we can always find it. If we always know the name of a variable, we can always find its value.&lt;/p&gt;

&lt;p&gt;Conventions in JavaScript mean when naming a variable, we use something called camelCase. Rather than write out a value as &lt;code&gt;this_is_my_very_long_and_non_descriptive_value_name&lt;/code&gt;, we would write it out as &lt;code&gt;myHopefullyDescriptiveName&lt;/code&gt;. camelCase is written without spaces, and looks like the humps of a camel.&lt;/p&gt;

&lt;p&gt;Variables are so important, because rather than go through and manually change wherever our variable exists, we can just change it once, where it's declared, and with the magic of programming, every other place a variable is referenced in our code will then update the variable's value. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data Types
&lt;/h2&gt;

&lt;p&gt;Everything in JavaScript is either an object, or a primitive. &lt;/p&gt;

&lt;p&gt;And there are seven different primitive Data types which include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Number - floating point numbers. Every number has decimal points, even if we write it as &lt;code&gt;23&lt;/code&gt; it's actually &lt;code&gt;23.00&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Strings - a sequence of characters, used for text, always put between quotations. &lt;code&gt;"this is a string!"&lt;/code&gt; &lt;code&gt;'this is also a string!'&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Boolean - Logical type, that can only be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Undefined - value taken by a variable that has not yet been assigned, is empty, therefore is &lt;code&gt;undefined&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;Null - Also means an empty value. &lt;/li&gt;
&lt;li&gt;Symbol - value that is unique and cannot be changed. &lt;/li&gt;
&lt;li&gt;BigInt - Larger integers than numbers can hold.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because JavaScript has dynamic typing, when we declare a variable using either &lt;code&gt;const&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt;, JavaScript will identify the data type for you. Now that certainly comes in handy, doesn't it? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#declaring-variables-with-raw-const-endraw-and-raw-let-endraw-"&gt;
  &lt;/a&gt;
  Declaring Variables with &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; were introduced in ES6. If you look at code written before 2015, you will see variables declared with &lt;code&gt;var&lt;/code&gt;. That's now considered bad practice, so don't do it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-let-endraw-keyword"&gt;
  &lt;/a&gt;
  &lt;code&gt;let&lt;/code&gt; keyword
&lt;/h3&gt;

&lt;p&gt;We use the &lt;code&gt;let&lt;/code&gt; keyword to define variables, whose value will change later. &lt;/p&gt;

&lt;p&gt;There's nothing wrong with declaring a variable with &lt;code&gt;let&lt;/code&gt;, and to reassign its value later on. Things change, data changes, like people. Your favorite band might've been Pink Floyd or Led Zeppelin when you were in elementary school and going through a serious stage, but now that you are an adult and much more serious, it's obviously BTS. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;let myFavoriteBand = "BTS"&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-const-endraw-keyword"&gt;
  &lt;/a&gt;
  &lt;code&gt;const&lt;/code&gt; keyword
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;const&lt;/code&gt; or constant, is a variable whose value we do not wish to change, or mutate. It is why &lt;code&gt;const&lt;/code&gt; is referred to as immutable. Once it is defined, that's it. Because &lt;code&gt;const&lt;/code&gt; is immutable, we cannot define it with an empty value. It has to have something. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;const myEyeColor = "Brown"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Try declaring &lt;code&gt;const myEyeColor&lt;/code&gt; in the console, but without a value. You will get back an error, &lt;code&gt;Uncaught SyntaxError: Missing initializer in const declaration&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-operators"&gt;
  &lt;/a&gt;
  Basic Operators
&lt;/h2&gt;

&lt;p&gt;Operators allow us to transform values, or combine multiple values. &lt;/p&gt;

&lt;p&gt;There are a lot of categories of operators: mathematical, comparison, logical etc... &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mathematical-operators"&gt;
  &lt;/a&gt;
  Mathematical Operators
&lt;/h3&gt;

&lt;p&gt;We have the addition, subtraction, division, remainder and multiplication. &lt;br&gt;
&lt;code&gt;+ - / % *&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typeof-operator"&gt;
  &lt;/a&gt;
  Typeof Operator
&lt;/h3&gt;

&lt;p&gt;The Typeof Operator is pretty self explanatory, in that it tells you what type of information your variable is. &lt;/p&gt;

&lt;p&gt;Let's try it out. Try declaring a variable in the console. Let's say &lt;code&gt;number = 2&lt;/code&gt;. Then type, &lt;code&gt;typeof(number)&lt;/code&gt; into the console and see what happens. With the magic of JavaScript, you'll see that 2 is a &lt;code&gt;"number"&lt;/code&gt;. It will even change the color when it inputs that information back. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#assignment-operators"&gt;
  &lt;/a&gt;
  Assignment Operators
&lt;/h3&gt;

&lt;p&gt;We have equals, plus equals, minus equals, multiply equals, increment, and decrement. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;=, +=, -=, *=, ++, --&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;+=&lt;/code&gt; operand, if you see something declared as &lt;code&gt;x += y&lt;/code&gt; it's shorthand for &lt;code&gt;x = x + y&lt;/code&gt;. This is applicable to all the &lt;code&gt;-= *=&lt;/code&gt; operators too. &lt;/p&gt;

&lt;p&gt;The increment and decrement operators either increase, or decrease our value. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comparison-operators"&gt;
  &lt;/a&gt;
  Comparison Operators
&lt;/h3&gt;

&lt;p&gt;We use these to produce boolean values of &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Or as you'll hear in reference to JavaScript truthy or falsy values. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;=&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Comparison operators see if something is less than &lt;code&gt;&amp;lt;&lt;/code&gt;, greater than &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt; less than or equals, or greater than or equals &lt;code&gt;&amp;gt;=&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;And even though I am an adult, I still see those signs as an alligator eating the numbers. You're never too old not to. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#template-literals"&gt;
  &lt;/a&gt;
  Template Literals
&lt;/h2&gt;

&lt;p&gt;What is a template literal? If you've looked at JavaScript code, and felt a little confused, undoubtedly you've run into something that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;My favorite color is ${color}.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A template literal, or template string allows us to use a string, and something referred to as an embedded expression. &lt;/p&gt;

&lt;p&gt;You write template literals using the backtick key on your computer, &lt;code&gt;and anything that is found within the dollar sign and curly braces&lt;/code&gt;${}` is a variable that is being interpolated. &lt;/p&gt;

&lt;p&gt;So if we went into our console, and defined goingOn, say as: &lt;br&gt;
&lt;code&gt;const color = "Blue"&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;And then input our sentence, we get back: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;"My favorite color is Blue."&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;JavaScript is interpolating what we've already defined our variable as, and inserting it into the string for us. Isn't that amazing? &lt;/p&gt;

&lt;p&gt;You can also use backticks to write multiple lines of code as well. Just hit enter to write on multiple lines: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;This is &lt;br&gt;
${someCode}&lt;br&gt;
I wish to write.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ifelse-statements"&gt;
  &lt;/a&gt;
  If/Else Statements
&lt;/h2&gt;

&lt;p&gt;An if/else statement is called a control structure, and allows us to have control over what code is being executed. &lt;/p&gt;

&lt;p&gt;As you'll learn as you dive deeper into the world of JavaScript, is that it doesn't execute linearly. In fact, it can do some pretty interesting stuff in terms of asynchronous and synchronous coding. But that's a little bit too complicated for a beginner. &lt;/p&gt;

&lt;p&gt;For now now that we can determine what runs, and when. &lt;/p&gt;

&lt;p&gt;The basic structure of an if/else statement is as follows: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;if (conditionWeAreChecking) {&lt;br&gt;
    if conditionWeAreChecking evaluates to true, then we run the block of code inside of the curly braces. &lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You don't need to have an else statement attached to an if statement. Although, it is typical that you will see if else statements like below: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;if (conditionWeAreChecking) {&lt;br&gt;
    some code we want to run if true&lt;br&gt;
} else {&lt;br&gt;
    run this code if the the condition evaluates to false. &lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Another important thing to remember, is that anything we define within the block, or curly braces, is not available outside of the block. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;const hour = 18 &lt;br&gt;
let greeting;&lt;br&gt;
if (hour &amp;gt; 12) {&lt;br&gt;
greeting = "Good evening!"&lt;br&gt;
} else {&lt;br&gt;
greeting = "Good morning!" &lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
If we input that into the console, we'll see `"Good evening!" outputted. Try playing around with and changing the hour, and see what happens. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is only the tip of the iceberg in terms of JavaScript's capabilities. There is a lot more when it comes to learning the fundamentals. I hope for those who may have stumbled upon this article, it's helped to explain some of the very basic principles that has built such a powerful language as JavaScript. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Simple Multi-Vendor Website with Django [Download]</title>
      <author>Vijay Thapa</author>
      <pubDate>Fri, 06 Aug 2021 17:35:37 +0000</pubDate>
      <link>https://dev.to/vijaythapa/simple-multi-vendor-website-with-django-download-l67</link>
      <guid>https://dev.to/vijaythapa/simple-multi-vendor-website-with-django-download-l67</guid>
      <description>&lt;p&gt;This is a simple MultiVendor e-commerce website built with Django (Python) and Stripe is added as payment processor.&lt;/p&gt;

&lt;p&gt;In this website, Vendors (Stores) can register and add their products.&lt;/p&gt;

&lt;p&gt;And Users can visit the product and order by paying with Debit/Credit Card (Stripe is Used).&lt;/p&gt;

&lt;p&gt;Then Vendor gets the email notification about the order and should deliver the product to the customer based on the address details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/vijaythapa"&gt;Free Software Development Courses&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-this-project"&gt;
  &lt;/a&gt;
  Features of this Project
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#a-admin-users-can"&gt;
  &lt;/a&gt;
  A. Admin Users Can
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Manage Category (Add, Update, Filter and Delete)&lt;/li&gt;
&lt;li&gt;Manage Products (Add, Update, Filter and Delete)&lt;/li&gt;
&lt;li&gt;Manage Users (Update, Filter and Delete)&lt;/li&gt;
&lt;li&gt;Manage Orders (View and Process)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#b-vendors-can"&gt;
  &lt;/a&gt;
  B. Vendors Can
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Add Products&lt;/li&gt;
&lt;li&gt;Update Profile&lt;/li&gt;
&lt;li&gt;Gets Notification When an Order is made by Users&lt;/li&gt;
&lt;li&gt;Get Orders and Manage Them&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#c-users-can-can"&gt;
  &lt;/a&gt;
  C.  Users Can Can
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Add to Cart&lt;/li&gt;
&lt;li&gt;Pay with Debit/Credit Card and Order&lt;/li&gt;
&lt;li&gt;While Checkout, User should give the address to deliver&lt;/li&gt;
&lt;li&gt;Get Email Notification about the confirmation of the order&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#donate"&gt;
  &lt;/a&gt;
  Donate
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://bit.ly/support-vijay-thapa"&gt;PayPal&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.buymeacoffee.com/vijaythapa"&gt;Buy me a Coffee  ☕️&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Donate by wire transfer:&lt;/strong&gt; E-Mail at &lt;em&gt;&lt;a href="mailto:donate@vijaythapa.com"&gt;donate@vijaythapa.com&lt;/a&gt;&lt;/em&gt; for wire transfer details. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-install-and-run-this-project"&gt;
  &lt;/a&gt;
  How to Install and Run this project?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-Requisites:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install Git Version Control&lt;br&gt;
[ &lt;a href="https://git-scm.com/"&gt;https://git-scm.com/&lt;/a&gt; ]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install Python Latest Version&lt;br&gt;
[ &lt;a href="https://www.python.org/downloads/"&gt;https://www.python.org/downloads/&lt;/a&gt; ]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install Pip (Package Manager)&lt;br&gt;
[ &lt;a href="https://pip.pypa.io/en/stable/installing/"&gt;https://pip.pypa.io/en/stable/installing/&lt;/a&gt; ]&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Alternative to Pip is Homebrew&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Create a Folder where you want to save the project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Create a Virtual Environment and Activate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Install Virtual Environment First&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$  pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Create Virtual Environment&lt;/p&gt;

&lt;p&gt;For Windows&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$  python -m venv venv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For Mac&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$  python3 -m venv venv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Activate Virtual Environment&lt;/p&gt;

&lt;p&gt;For Windows&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$  source venv/scripts/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For Mac&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$  source venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;3. Clone this project&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$  git clone https://github.com/vijaythapa333/simple-multivendor-site.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, Enter the project&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$  cd simple-multivendor-site
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;4. Install Requirements from 'requirements.txt'&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt;  &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;5. Add the hosts&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Got to settings.py file &lt;/li&gt;
&lt;li&gt;Then, On allowed hosts, Add [‘*’].
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;No need to change on Mac.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Now Run Server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Command for PC:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;runserver&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Command for Mac:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;runserver&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;7. Login Credentials&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create Super User (Admin)&lt;/p&gt;

&lt;p&gt;Command for PC:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$  python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Command for MAC:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$  python3 manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then Add Email, Username and Password&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#for-sponsor-or-projects-enquiry"&gt;
  &lt;/a&gt;
  For Sponsor or Projects Enquiry
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Email - &lt;a href="mailto:hi@vijaythapa.com"&gt;hi@vijaythapa.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;LinkedIn - &lt;a href="https://www.linkedin.com/in/vijaythapa"&gt;vijaythapa&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#download-from-here"&gt;
  &lt;/a&gt;
  Download from Here
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vijaythapa333"&gt;
        vijaythapa333
      &lt;/a&gt; / &lt;a href="https://github.com/vijaythapa333/simple-multivendor-site"&gt;
        simple-multivendor-site
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Simple Multi Vendor E-Commerce Website using Python Django.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Also if you want "E-Commerce Project with Payment Integration", follow the article below&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/vijaythapa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CoW4EAif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6WgiwKdk--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/294578/85d82f47-8baa-4903-bcf3-ecb2d1b9e878.jpeg" alt="vijaythapa"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/vijaythapa/django-ecommerce-website-jewelry-shop-download-3117" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Django eCommerce Website, Jewelry Shop (Download)&lt;/h2&gt;
      &lt;h3&gt;Vijay Thapa ・ Jun 19 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#django&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>django</category>
      <category>python</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>July: Forem Twitch Events Roundup 👾</title>
      <author>Christina Gorton</author>
      <pubDate>Fri, 06 Aug 2021 17:26:51 +0000</pubDate>
      <link>https://dev.to/devteam/july-forem-twitch-events-roundup-e5j</link>
      <guid>https://dev.to/devteam/july-forem-twitch-events-roundup-e5j</guid>
      <description>&lt;p&gt;In July, Nick Taylor and I were joined by 8 awesome guests! This is a round up of all the wonderful guests who joined us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-with-ben-hong"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday with Ben Hong
&lt;/h2&gt;

&lt;p&gt;Ben, staff developer experience engineer at Netlfiy, joined us to talk about knowledge management systems and note taking with apps like Obsidian.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/omTggcS7k-g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Places to follow Ben:&lt;br&gt;
&lt;a href="https://twitter.com/bencodezen"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.twitch.tv/bencodezen"&gt;Twitch&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-with-james-q-quick"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday with James Q. Quick
&lt;/h2&gt;

&lt;p&gt;James Quick joined Nick Taylor to discuss DevRel, authentication in the Jamstack, content creation and more!&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Cgp-5eWjO_8"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;p&gt;Places to follow James:&lt;br&gt;&lt;br&gt;
&lt;a href="https://www.jamesqquick.com"&gt;James' Website&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/jamesqquick"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/c/jamesqquick"&gt;YouTube&lt;/a&gt; channel&lt;br&gt;
&lt;a href="https://learnbuildteach.com"&gt;learnbuildteach Discord channel&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#devcode-school-mash-up"&gt;
  &lt;/a&gt;
  DEV/Code School Mash up
&lt;/h2&gt;

&lt;p&gt;We were joined by the Code School crew for a special DEV/Code School mash up on thePracticalDev Twitch stream with our guests Jonan Scheffler, Carmen Kolodziej, Randel Moore, and Danielle Thomspon. We answered questions on entering tech, navigating mentorships, being a junior on the team, connecting with folks in tech, and more. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ha691P-bA58"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;How to find Randel:&lt;br&gt;
&lt;a href="https://twitter.com/CodingMoore"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/randelmoore/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
Twitch: CodingMoore&lt;br&gt;
Github: CodingMoore&lt;/p&gt;

&lt;p&gt;How to Find Danielle: &lt;br&gt;
Twitter/Twitch:/GitHub:  &lt;a class="mentioned-user" href="https://dev.to/danitcodes"&gt;@danitcodes&lt;/a&gt;
&lt;br&gt;
&lt;a href="//www.linkedin.com/in/danielle-thompson74"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to Find Carmen:&lt;br&gt;
&lt;a href="https://twitter.com/carmenkolohe"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/carmenkolohe"&gt;Github&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.twitch.tv/carmenkolohe"&gt;Twitch&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.polywork.com/carmenkolohe"&gt;Polywork&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/carmenkolohe/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to Find Jonan:&lt;br&gt;
&lt;a href="https://twitter.com/thejonanshow"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.twitch.tv/thejonanshow"&gt;Twitch&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-with-fernando-valverde-and-josh-puetz"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday with Fernando Valverde and Josh Puetz
&lt;/h2&gt;

&lt;p&gt;Our coworkers Fernando Valverde and Josh Puetz joined us to discuss the Forem iOS app. We talked about why we have an app, the work that went into creating it, what features to expect in the future and more.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Q0LVviE5gB4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Places to follow Fernando:&lt;br&gt;
&lt;a href="https://dev.to/fdoxyz"&gt;DEV&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/fdoxyz"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Places to follow Josh:&lt;br&gt;
&lt;a href="https://dev.to/joshpuetz"&gt;DEV&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/joshpuetz"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to all our viewers who joined the streams and chatted with us this month! &lt;/p&gt;

&lt;p&gt;Be sure to follow the &lt;a href="https://www.twitch.tv/thepracticaldev"&gt;ThePracticalDev Twitch&lt;/a&gt; channel to be notified when future streams begin and check out all the great guests we have joining us every Wednesday this month. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our August guests are:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/CerchieLucia"&gt;Lucia Cerchie&lt;/a&gt;, Software Engineer at StepZen. We will talk about GraphQL and the challenges of creating a GraphQL API from aggregated data.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/khattakdev"&gt;Arsalan Khattak&lt;/a&gt;, Team Lead at &lt;a href="https://twitter.com/MLHacks"&gt;MLH Fellowship&lt;/a&gt;. We will talk about creating a back end with Fastify.io.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/laurieontech"&gt;Laurie Barth&lt;/a&gt;, Senior Software engineer at Netflix. We will talk about tech interviews from the perspective of those hiring and those looking for a new role. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>opensource</category>
      <category>meta</category>
    </item>
  </channel>
</rss>
