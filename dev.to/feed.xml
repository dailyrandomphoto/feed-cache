<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The Hitchhiker's Guide to Laravel Vapor</title>
      <author>Vedran Cindrić</author>
      <pubDate>Mon, 26 Jul 2021 15:34:21 +0000</pubDate>
      <link>https://dev.to/cindreta/the-hitchhiker-s-guide-to-laravel-vapor-elh</link>
      <guid>https://dev.to/cindreta/the-hitchhiker-s-guide-to-laravel-vapor-elh</guid>
      <description>&lt;p&gt;Before we dive deeper into Laravel Vapor allow me to set the stage for you. I've been working in the PHP ecosystem since I was 15 years old. Given that I'm 33 now it means &lt;strong&gt;I have a solid 18 years of PHP/MYSQL development behind me&lt;/strong&gt;. I love PHP. From the moment I created my own makeshift CMS I fell in love with it. It felt like magic to me.&lt;/p&gt;

&lt;p&gt;As time moved on I learned HTML/CSS/JS, Linux server management, AWS, fancy new tools, overly complicated and "modern" ways of developing things... I've also lived through many many frameworks and boilerplates that make your job as a developer easier. The only ones that caught my eye were Bootstrap and Laravel. I discovered Bootstrap on the brink of the responsive design revolution and loved it ever since because it wasn't trying to do much. You get the basics but you can still do whatever you want without much hassle. Laravel felt the same to me. I watched people use Laravel for at least a year before developing with it in version 5. What attracted me the most were migrations. It felt revolutionary that I could write the entire SQL schema in PHP and be able to track table changes in GIT. The second thing that I was obsessed with were Queues. All in all probably the best career choice I could have made was learning Laravel. It's just a joy to work with. Understandable syntax. Great features. Customizable. Hats off to &lt;a href="https://twitter.com/taylorotwell"&gt;Taylor&lt;/a&gt; 🙌!&lt;/p&gt;

&lt;p&gt;As my love for Laravel grew I got the chance to battle test Laravel on many real life projects. Platforms that handle 10 TB of image data, a couple of million API requests per day, a database of a few GB in size with millions of records...In light of that I've decided to build our entire platform, Treblle, on top of Laravel. Everything from the website, API to complex processing flows that actually handle all incoming logged requests. I started with a split between Lumen and Laravel but quickly decided to make it all run off one single code base. A beautiful layered monolith.&lt;/p&gt;

&lt;p&gt;The only thing that always worried me about PHP was scaling it. Not because it was impossible but rather complicated and time consuming. Everything from deploying code, configuring load balances, connecting to database servers, VPCs, scaling rules...I always found that part boring and overwhelming. As the rest of the world moved into severless with AWS Lambda we (PHP developers) were stuck with defining thresholds to launch EC2 instances using load balancers. Not a pretty process if you ever tried it. So naturally when Laravel Vapor came out I was stoked. Just like with everything else I watched it from a distance, read articles about it, watched videos and then I decided to move Treblle to Vapor.&lt;/p&gt;

&lt;p&gt;Here are a couple of things that I wish I knew before starting my Laravel Vapor journey.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prepare-to-lose-some-control"&gt;
  &lt;/a&gt;
  Prepare to lose some control
&lt;/h3&gt;

&lt;p&gt;As an "old school guy" being able to FTP or SSH into a server and quickly debug or fix a problem was the part that bothered me most. This has nothing to do with Vapor of course but rather the notion of running on Serverless. When an error happens it's not as easy to debug it and it's not as easy to fix it. Be prepared for that. Yes there are Cloudwatch logs, Vapor deployment logs but anyone who ever opened the Cloudwatch dashboard knows how scary that is. So just like me you have to get used to it. If you are however developing APIs or are working with webhooks you are in for a treat - &lt;strong&gt;Treblle will make debugging and logging those a breeze.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-get-scared-by-the-amount-of-resources-needed"&gt;
  &lt;/a&gt;
  Don't get scared by the amount of resources needed
&lt;/h3&gt;

&lt;p&gt;Initially when you create a project on the Vapor dashboard you need to spin up quite a few resources: a VPC network, a NAT gateway, an RDS database, a cache instance and a jumpbox. You could remove the NAT gateway and the jumpbox but that would mean your database would be public. I wouldn't recommend that though. Especially considering that a "jumpbox" is actually a "t3.nano" EC2 instance which costs next to nothing and that a NAT gateway costs about 30 USD per month. In my opinion the only two tough decisions you have to make are about the RDS database and the cache instance.&lt;/p&gt;

&lt;p&gt;With RDS you can choose a "serverless database" or a fixed size database. The serverless database runs only MYSQL 5.7, is slower and costs more but it scales automatically. Fixed size databases that can run on MYSQL 8.0 are somewhat faster but they don't scale automatically. So with them you have to choose a size and then change it later on if it becomes a problem. Luckily you can do that via the Vapor dashboard. I would strongly recommend using a smaller fixed sized database, something like t3.small, and then scaling up. As far as cache instances go I would recommend using a Redis cluster and also smaller in size - something like t3.small.&lt;/p&gt;

&lt;p&gt;The reason why I recommend smaller instances is that people often over provision and then complain how Vapor or AWS is expensive. It's not. You don't need crazy big sizes of resources to launch and get started. The good thing about Vapor is that it gives you insights about the MYSQL and Cache performance. It can also email you or slack you if it gets over a certain threshold so you can simply pause the instance and resize it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#migrate-your-domain-to-route-53"&gt;
  &lt;/a&gt;
  Migrate your domain to Route 53
&lt;/h3&gt;

&lt;p&gt;In case your domain isn't registered on AWS Route 53 i would recommend you transfer the domain there. I did it, it's not complicated, it takes like a day and there is like a small cost to it. If you do that you will be able to control DNS records directly from the Vapor dashboard and your life will be easier in the AWS ecosystem. When you attach a domain to your API gateway or wish to activate SES Amazon will simply create the records it needs directly in Route 53 so you don't have to do a thing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understand-vaporyml"&gt;
  &lt;/a&gt;
  Understand vapor.yml
&lt;/h3&gt;

&lt;p&gt;This part was super confusing to me. I had to reach out to Vapor support many many times. &lt;a href="https://twitter.com/themsaid"&gt;Mohamed&lt;/a&gt; was great at providing answers - fast. With his help and bits of code online I was able to do what I needed. The initial problem I had was where to place commands like: &lt;code&gt;php artisan route:cache&lt;/code&gt;, &lt;code&gt;php artisan queue:restart&lt;/code&gt; and similar. In case you didn't know, you configure your environments in a file called "vapor.yml" which you will see after you install vapor.&lt;/p&gt;

&lt;p&gt;Here is how my configuration looks like at the end:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;id: 00000
name: treblle
environments:
    production:
        memory: 1024
        cli-memory: 512
        warm: 5
        gateway-version: 2
        runtime: 'php-8.0:al2'
        domain: treblle.com
        database: prod-db
        cache: prod-cache
        queues:
            - 'ProdLogs.fifo'
        build:
            - 'COMPOSER_MIRROR_PATH_REPOS=1 composer install --no-dev'
            - 'npm ci &amp;amp;&amp;amp; npm run production &amp;amp;&amp;amp; rm -rf node_modules'
            - 'php artisan route:cache'
            - 'php artisan view:cache'
        deploy:
            - 'php artisan migrate --force'
            - 'php artisan queue:restart'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I used default values for things like "memory" and "cli-memory". The interesting thing about those two is that I am not using most of the memory defined here but apparently, and this is coming from AWS support, if you use higher memory settings for AWS Lambda you get better processors. So I could lower that settings to something like 256MB but it could mean it would take longer to execute because I will get slower processors. So this is a delicate dance between saving money and making sure you execute your code as fast as possible. I would suggest you experiment with this, simply change the settings, visit your website or API and go see in CloudWatch logs how long does it take to execute that.&lt;/p&gt;

&lt;p&gt;Values for domain, database, and cache are literary resource names I've created in the Vapor dashboard. So simply copy/paste the names and you are good to go. The "queues" value is actually an AWS SQS queue I manually created. This is something you can always do. If you don't wanna go through the Vapor interface you can always create or change things in AWS.&lt;/p&gt;

&lt;p&gt;Next, you see I also have "gateway-version" set to 2. This means I am telling Vapor to create an API Gateway using Version 2. We will talk about this in depth a tad bit later.&lt;/p&gt;

&lt;p&gt;Now onto the fun part. When you type in &lt;code&gt;vapor deploy production&lt;/code&gt; what happens in the background is magic. Vapor first compiles the entire code on your computer, everything from node and composer packages to building CSS and JS assets. After that it will create (or update) all the resources you defined under database, cache, domain using a bunch of AWS APIs. Finally it will upload a ZIP file with all of the code to AWS S3 which will then get deployed to AWS Lambda. Sounds complicated. And it is. But imagine having to do this without Vapor! Now there are two ways you can affect this process and that is by using "build" or "deploy" hooks which are defined in the YAML file. Laravel will call those at given stages of the deployment. It's also very important to place them at the correct stage otherwise they won't work.&lt;/p&gt;

&lt;p&gt;Under the "&lt;strong&gt;build&lt;/strong&gt;" hook you need to install composer dependencies, NPM dependencies. Optionally you can cache your routes and events.&lt;/p&gt;

&lt;p&gt;Under the "&lt;strong&gt;deploy&lt;/strong&gt;" hook you can execute migrations and restart the queue. Unlike the build commands these will actually execute on the "server".&lt;/p&gt;

&lt;p&gt;One thing that you might notice is that &lt;code&gt;php artisan config:cache&lt;/code&gt; isn't included in any of the stages. That is because it's done for you automatically by Vapor. So your config is cached so you don't have to worry about it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#choose-the-right-gateway-version"&gt;
  &lt;/a&gt;
  Choose the right gateway version
&lt;/h3&gt;

&lt;p&gt;In case you didn't know Vapor uses AWS API Gateway to essentially route traffic to your application running in a Lambda function. AWS has two Gateway versions: 1 and 2. By default Vapor will deploy using version 1 which allows you to have a Vapor managed firewall and is deployed using, what Amazon calls, "Edge optimized" deployments. This just means that your application will be closer to your user and their region. In case you are deploying to "us-east-1" and you have a visitor from Europe he isn't going to connect to "us-east-1" but rather Amazon will bring the connection point closer to him, something like "eu-central-1", which will in return reduce latency.&lt;/p&gt;

&lt;p&gt;Gateway version 2 is literally 70% cheaper than version 1 and there is a significant performance increase. The one important thing with version 2 is that you lose the ability to deploy your application as "Edge optimized" and you can only do "Regional" deployments. Meaning if you deploy to "us-east-1" all your users have to connect to that region no matter their location. This might cause latency issues with users outside your region.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I first deployed and tested with version 1 and to be honest I was not happy with the performance.&lt;/strong&gt; I first thought that I messed something up during deployment and configuration but &lt;a href="https://twitter.com/themsaid"&gt;Mohamed&lt;/a&gt; said I should get in touch with AWS about performance issues. I spent a lot of time optimizing both the back-end code and front-end to be blazing fast. I had scores of 100% on Google Lighthouse when running on a regular EC2 instance yet on Vapor I was seeing server response times of like 1.2 seconds. After a few calls with AWS they actually said that the results are worrying and that something might be wrong on their end. To this day they are still "investigating" that.&lt;/p&gt;

&lt;p&gt;I didn't wanna sit idle until AWS fixes whatever their problems were so I decided to give Gateway Version 2. &lt;strong&gt;After redeploying with Version 2 I did see a significant performance improvement.&lt;/strong&gt; The response time was down to 200ms which is much better. In my mind that still isn't great but given the fact that i am connecting to us-east-1 it was okish.&lt;/p&gt;

&lt;p&gt;There is one interesting fact I learned about Gateway deployments. In case you are deploying to API Gateway Version 1 and you plan to have a custom domain or subdomain attached to it then you should deploy it with the Endpoint type of "Regional". Sounds crazy but AWS support told me that when you attach a domain to your API gateway you essentially create a managed CloudFront domain which is in fact "Edge optimized". This means that the API will actually be "Edge optimized". In case you deployed the API as "Edge optimized" and attached a custom domain to it it would do a" double hoop" because the added domain is also "Edge optimized". Remember this one as I've spent quite some time "doing it wrong".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cleanup-your-env"&gt;
  &lt;/a&gt;
  Cleanup your ENV
&lt;/h3&gt;

&lt;p&gt;Laravel Vapor injects a lot of variables for you. They can do that because you store the AWS credentials in the Vapor dashboard and Vapor can create all the resources for you. Hence they know the connection details for the database, cache instances and similar. From your .ENV you should remove the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Database related variables: DB_CONNECTION,DB_HOST,DB_PORT,DB_DATABASE,DB_USERNAME,DB_PASSWORD&lt;/li&gt;
&lt;li&gt;  AWS related variables: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY and AWS_REGION&lt;/li&gt;
&lt;li&gt;  Redis related variables: REDIS_HOST, REDIS_PASSWORD, REDIS_PORT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of those and more are simply added for you. One of the first questions I had was about the AWS S3 Bucket. Given that Vapor creates multiple of it's own buckets I was afraid to define my own. But it's totally fine even if you define your own custom created bucket Vapor will still run and be able to upload assets and code to the correct buckets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adjust-some-of-your-code"&gt;
  &lt;/a&gt;
  Adjust some of your code
&lt;/h3&gt;

&lt;p&gt;On Treblle we use the AWS SDK to, among other things, create API keys for users on our API Gateway. This requires us to create our own AWS client connections like so:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$gateway = new ApiGatewayClient([
    'version' =&amp;gt; 'latest',
    'region' =&amp;gt; config('services.aws.region),
    'credentials' =&amp;gt; new Credentials(
        config('services.aws.key'),
        config('services.aws.secret')
    )
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Out of the box this did not work because the underlying configuration references ENV values AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY and AWS_REGION. Those are not present, as explained in the section above, and get appended by Vapor directly to the Lambda function. Hence the code didn't work. We had to update our connections to this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$gateway = new ApiGatewayClient([
    'version' =&amp;gt; 'latest',
    'region' =&amp;gt; config('services.aws.region'),
    'credentials' =&amp;gt; CredentialProvider::env()
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This will instruct AWS to load the credentials from the ENV variables, but not "our ENV", rather the one that Vapor creates on the Lambda function.&lt;/p&gt;

&lt;p&gt;We had to do updates for Firebase as well. Because the Firebase PHP package loads the configuration from a JSON file we had to upload that to S3 (since you don't have a local file system) and update that as well.&lt;/p&gt;

&lt;p&gt;If you have file uploading on your platform you will have to make sure that the files get uploaded directly to S3 from the front-end. They can't touch the Laravel app because there is no local filesystem to handle file uploads.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#give-up-on-a-subdomain-for-assets"&gt;
  &lt;/a&gt;
  Give up on a subdomain for assets
&lt;/h3&gt;

&lt;p&gt;In case you didn't know Laravel Vapor will upload all your assets (images, css, js) to AWS S3 and will then create a CloudFront distribution for those assets. That makes the loading time very fast and ensures that users are always downloading assets from locations closer to them. This is great. But by default URLs to your assets look like this: &lt;code&gt;d2yzzcow4k19m2.cloudfront.net/c3fb4469-ddda-416d-ad41-5bc4116f5462/css/app.min.css?id=5733d15ea60112431152&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I wanted to have something cool like &lt;code&gt;assets.treblle.com/css/app.min.css&lt;/code&gt; but it turns out &lt;strong&gt;it's a big no no&lt;/strong&gt;. The reason for that, as &lt;a href="https://twitter.com/themsaid"&gt;Mohamed&lt;/a&gt; said, is the dynamic UUID part in that URL that gets appended during the deployment process. Only Vapor knows what that UUID is and there is no option to define a custom subdomain. This is something I would like to see added at one point in time.&lt;/p&gt;




&lt;p&gt;These are some of the things I wish I knew before starting the move process. My life would be easier and I would have done some of the things much faster. I hope some of these notes help you when starting your Laravel Vapor path.&lt;/p&gt;

&lt;p&gt;To conclude, even though I am still chasing the performance I want, Vapor has made the process of going serverless as easy as it can get. I would recommend it to anyone looking to scale their Laravel app without having to hire a DevOps person and glue together multiple various systems. If you have any questions feel free to shoot them to me on my &lt;a href="https://twitter.com/cindreta"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>serverless</category>
      <category>aws</category>
    </item>
    <item>
      <title>How to Build REST API Using Node Js Feathers Framework</title>
      <author>DevPool</author>
      <pubDate>Mon, 26 Jul 2021 15:31:15 +0000</pubDate>
      <link>https://dev.to/devpool3000/how-to-build-rest-api-using-node-js-feathers-framework-4pli</link>
      <guid>https://dev.to/devpool3000/how-to-build-rest-api-using-node-js-feathers-framework-4pli</guid>
      <description>&lt;p&gt;This article will create a simple REST API vehicle system with full authentication and CRUD (create, read, update, delete) capabilities.&lt;/p&gt;

&lt;p&gt;We will be creating a simple vehicle API support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our Use Cases:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As a user, I should be able to register.&lt;/li&gt;
&lt;li&gt;As a user, I should be able to login.&lt;/li&gt;
&lt;li&gt;As a user, I should be able to perform any CRUD operations on the vehicle data.

&lt;ul&gt;
&lt;li&gt;create&lt;/li&gt;
&lt;li&gt;read&lt;/li&gt;
&lt;li&gt;update&lt;/li&gt;
&lt;li&gt;delete&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Project Setup&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight livescript"&gt;&lt;code&gt;&lt;span class="nv"&gt;mkdir&lt;/span&gt; &lt;span class="nv"&gt;vehicle-api&lt;/span&gt;
&lt;span class="nv"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;vehicle-api&lt;/span&gt;
&lt;span class="nv"&gt;feathers&lt;/span&gt; &lt;span class="nv"&gt;g&lt;/span&gt; &lt;span class="nv"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RUHROX0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqc5o04kyyhchei30oy1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RUHROX0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqc5o04kyyhchei30oy1.PNG" alt="running command"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you're answering the above questions, you'll notice that you can create your application using TypeScript and not JavaScript, or we can select any other database type.&lt;/p&gt;

&lt;p&gt;For simplicity, I went with yarn, JavaScript, and NeDB, but if you're planning to use npm, TypeScript, or Postgres/MongoDB, you can do so. &lt;/p&gt;

&lt;p&gt;Next, open your project with an editor of your choosing (I'm personally going with VS Code)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VUquqibM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0c9t6mllwzx30ipmx2d.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUquqibM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0c9t6mllwzx30ipmx2d.PNG" alt="openProject"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To run the application, run the appropriate package manager command that you've selected. In this case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight livescript"&gt;&lt;code&gt;&lt;span class="nv"&gt;yarn&lt;/span&gt; &lt;span class="nv"&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you should be able to see this page in your browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kxCoEcki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eca8h3l4c4s5hzr9dteg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kxCoEcki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eca8h3l4c4s5hzr9dteg.PNG" alt="running"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations!&lt;/strong&gt; &lt;br&gt;
You've set up your first Feathers application, and here is the tree structure of our project:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QWi3bjOK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvpabq9uqf8qt45qzvhi.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QWi3bjOK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvpabq9uqf8qt45qzvhi.PNG" alt="tree"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find more information how what do this files do in here: &lt;a href="https://docs.feathersjs.com/guides/basics/generator.html#the-generated-files"&gt;https://docs.feathersjs.com/guides/basics/generator.html#the-generated-files&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice how under 1 minute, we've generated an application with a full authentication implementation and our first user service has full CRUD capabilities.&lt;/p&gt;

&lt;p&gt;So how do we communicate with our backend if we don't have a frontend?&lt;/p&gt;

&lt;p&gt;Whenever we work on the API, engineers would use a tool called Insomnia or Postgres (in this example, I'll be using insomnia). Overall it will enable us to send and get a response from our API without running the frontend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P-6pZkD5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54s1xag9itjo6086fwki.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P-6pZkD5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54s1xag9itjo6086fwki.PNG" alt="insomnia-0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What we want to do next is to create "register" and "login" requests in our insomnia workspace.&lt;/p&gt;

&lt;p&gt;In my workspace, I'll be creating a new folder, "Authentication," that will contain "register" and "login" requests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Register&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ytAJz2Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phkyv7w8m1os13r5o6c3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ytAJz2Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phkyv7w8m1os13r5o6c3.PNG" alt="register"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After sending the request, we should see the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jGHs1dm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yng5om0vzpnb75x429m.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jGHs1dm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yng5om0vzpnb75x429m.PNG" alt="register-complite"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Login&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MntYVf7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbwzd2m99gp8tp7hn87w.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MntYVf7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbwzd2m99gp8tp7hn87w.PNG" alt="login"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After sending the request, we should see the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AxZvt8Ee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7wbs4dw23ovhj51ntnd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AxZvt8Ee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7wbs4dw23ovhj51ntnd.PNG" alt="login-final"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you see the same thing, then your authentication is set up correctly!&lt;/p&gt;

&lt;p&gt;Since the basics of our applications are set up and running, it's time to create our vehicle service.&lt;/p&gt;

&lt;p&gt;To do that, run the following command and answer all of the questions in the same way as we did it right from the beginning:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight livescript"&gt;&lt;code&gt;&lt;span class="nv"&gt;feathers&lt;/span&gt; &lt;span class="nv"&gt;g&lt;/span&gt; &lt;span class="nv"&gt;service&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--symhawDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e3fg81njh8ui2rocsq2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--symhawDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e3fg81njh8ui2rocsq2.PNG" alt="vehicles-setup"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And if you look under the services/model folder, we now have a vehicle implementation that we can perform entire CRUD operations on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CYzgnTlS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jt81hehqecb2121plj2g.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CYzgnTlS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jt81hehqecb2121plj2g.PNG" alt="vehivle-service"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;At this point, our REST API is fully ready to take in some data and perform the entire CRUD operation on our new vehicle service!&lt;/p&gt;

&lt;p&gt;Let's create a few records to demonstrate that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VHlIWIZa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbv6gwch73dmc9n884kd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VHlIWIZa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbv6gwch73dmc9n884kd.PNG" alt="create"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Oh no, what happened here!? We're getting an error message "Not authenticated."&lt;/p&gt;

&lt;p&gt;That's the expected behavior because our system is saying that "you're trying to access an endpoint when you are not authenticated." Translation, not logged in.&lt;/p&gt;

&lt;p&gt;So let's send the request with the generated token from before and try to resent the request &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--08rvcyUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ksre4sv9ki6rln2zkjqn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--08rvcyUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ksre4sv9ki6rln2zkjqn.PNG" alt="token"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qkNTkH8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3c4sm8kadbv85k70bs2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qkNTkH8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3c4sm8kadbv85k70bs2.PNG" alt="create-success"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;At this point, we can now save a record into our DB. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vt3gNY6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oe9qnp6s9sn02x6eo74c.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vt3gNY6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oe9qnp6s9sn02x6eo74c.PNG" alt="data"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Let's create few more records and get all vehicles:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zACcSYa9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wlz338c1eg90f4etqly.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zACcSYa9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wlz338c1eg90f4etqly.PNG" alt="all"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;At this point, our Update and Delete will look very similar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Additional Recourses:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If this was your first RESTful API build, unfortunately, I didn't explain models, why we named our folders "Authentication" or "vehicles" in our insomnia, and what some of the things are. Thankfully, I do have a video where I give more information for beginners as I'm building out the API:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/H0KhcB3D8aQ"&gt;https://youtu.be/H0KhcB3D8aQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feathers Documentation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.feathersjs.com/guides/basics/generator.html"&gt;https://docs.feathersjs.com/guides/basics/generator.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;We just created our first RESTfull API using FeatherJs framework WooHoo! I hope this tutorial was helpful for some of you. We did many things, and it could be a lot at first and could be confusing at the beginning. But to be honest, once you master this, you will realize that we have created an amazing backend with many complex pieces, and we can create all of it unless 2 minutes. So big congrats to you on getting to the end of this tutorial!  &lt;/p&gt;

&lt;p&gt;If you have any questions, feel free to leave a comment or you can find me on my YouTube channel DevPool&lt;/p&gt;

&lt;p&gt;&lt;a href="//youtube.com/channel/UC03vw5F2isFkbJhyEZU5bvg?sub_confirmation=1"&gt;YouTube - DevPool&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>Deploying podman images using  running container in centos -8</title>
      <author>anirudha ingole</author>
      <pubDate>Mon, 26 Jul 2021 14:55:20 +0000</pubDate>
      <link>https://dev.to/ingoleanirudha/deploying-podman-images-using-running-container-in-centos-8-1i60</link>
      <guid>https://dev.to/ingoleanirudha/deploying-podman-images-using-running-container-in-centos-8-1i60</guid>
      <description>&lt;p&gt;What is podman .&lt;br&gt;
What is Podman? Podman is a daemonless container engine for developing, managing, and running OCI Containers on your Linux System. Containers can either be run as root or in rootless mode.&lt;/p&gt;

&lt;p&gt;People associate running pods with Kubernetes. And when they run containers in their development runtimes, they do not even think about the role pods could play—even in a localized runtime.  Most people coming from the Docker world of running single containers do not envision the concept of running pods. There are several good reasons to consider using pods locally, other than using pods to naturally group your containers.&lt;/p&gt;

&lt;p&gt;Podman installation process in centos 8..&lt;br&gt;
sudo dnf -y module disable container-tools&lt;br&gt;
sudo dnf -y install 'dnf-command(copr)'&lt;br&gt;
sudo dnf -y copr enable rhcontainerbot/container-selinux&lt;br&gt;
sudo curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:testing.repo &lt;a href="https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/testing/CentOS_8/devel:kubic:libcontainers:testing.repo"&gt;https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/testing/CentOS_8/devel:kubic:libcontainers:testing.repo&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#optional-for-runc-users-crun-will-be-installed-by-default-install-runc-first-if-you-prefer-runc"&gt;
  &lt;/a&gt;
  OPTIONAL FOR RUNC USERS: crun will be installed by default. Install runc first if you prefer runc
&lt;/h1&gt;

&lt;p&gt;sudo dnf -y --refresh install runc&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#install-podman"&gt;
  &lt;/a&gt;
  Install Podman
&lt;/h1&gt;

&lt;p&gt;sudo dnf -y --refresh install podman&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How To Make WebSites Load Faster</title>
      <author>Nukala Suraj</author>
      <pubDate>Mon, 26 Jul 2021 14:49:27 +0000</pubDate>
      <link>https://dev.to/lucidmach/how-to-make-websites-load-faster-524i</link>
      <guid>https://dev.to/lucidmach/how-to-make-websites-load-faster-524i</guid>
      <description>&lt;p&gt;In today's ultra fast paced world,&lt;br&gt;
3 Seconds of a not-yet-loaded-website is more than enough for the user to click that close button&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HswnvVvm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7q0dmfz7u6tl0o6xu7i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HswnvVvm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7q0dmfz7u6tl0o6xu7i.png" alt="3 secs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is especially important if you're trying to build a web based startup.&lt;br&gt;
Having an optimized website could lead to significantly more revenue&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#components-of-a-website"&gt;
  &lt;/a&gt;
  Components of a WebSite
&lt;/h2&gt;

&lt;p&gt;Anything on the Web has 3 main components&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;FrontEnd&lt;/li&gt;
&lt;li&gt;BackEnd&lt;/li&gt;
&lt;li&gt;Network&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CxmiSGhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcatsygvaziwho6m4gd0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CxmiSGhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcatsygvaziwho6m4gd0.png" alt="Components"&gt;&lt;/a&gt;&lt;br&gt;
No Matter How Optimized the backend is (a common huge mistake kinda 😅)&lt;/p&gt;

&lt;p&gt;End of the day it is the network that impacts 80% of a website's performance&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wCw31bhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a969makrhacau9thdhb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wCw31bhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a969makrhacau9thdhb.png" alt="pareto"&gt;&lt;/a&gt;&lt;br&gt;
So by Pareto's Rule,&lt;br&gt;
We focus on the &lt;strong&gt;NETWORK&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7a2VILxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyb34cd0yiqn3imds01m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7a2VILxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyb34cd0yiqn3imds01m.png" alt="network"&gt;&lt;/a&gt; The network is what connects the &lt;em&gt;frontend&lt;/em&gt; to the &lt;em&gt;backend&lt;/em&gt;.&lt;br&gt;
Most sites make &lt;em&gt;&lt;strong&gt;100s of requests&lt;/strong&gt; in the background&lt;/em&gt; as the site loads.&lt;/p&gt;

&lt;p&gt;If each response carries a lot of data&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The time for the data to reach the client increases&lt;/li&gt;
&lt;li&gt;The time for each resource to render increases&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;basically the website take forever to load&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ru160FIz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55d4nokjryu5t1be2tls.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ru160FIz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55d4nokjryu5t1be2tls.png" alt="Network"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reduce the size of files by

&lt;ol&gt;
&lt;li&gt;Sending only what the user (and not the website needs) aka code splitting&lt;/li&gt;
&lt;li&gt;Removing &lt;code&gt;whitespaces&lt;/code&gt; or &lt;code&gt;uglifying&lt;/code&gt; the file&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;If you use webpack, this is automatically done for you&lt;br&gt;
&lt;strong&gt;BONUS&lt;/strong&gt;: You could PWA and cache data on the client [But That Topic Is For Another Blog]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Reducing the size of images by optimizing them&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#reducing-the-size-of-images-by-optimizing-them"&gt;
  &lt;/a&gt;
  Reducing the size of images by optimizing them
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#what-does-this-mean"&gt;
  &lt;/a&gt;
  What does this mean?
&lt;/h3&gt;

&lt;p&gt;We don't reduce the size by reducing resolution,&lt;br&gt;
We reduce the size by reducing the scale of colors.&lt;/p&gt;

&lt;p&gt;Let me explain,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UdLaAA2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5xqp4n2sbkwz24r5rca.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UdLaAA2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5xqp4n2sbkwz24r5rca.png" alt="demo"&gt;&lt;/a&gt;&lt;br&gt;
The human eye can't distinguish between #000000 and #010101.&lt;br&gt;
So when we optimize images we're reducing the bits used to store color data of pixels&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-do-we-do-that"&gt;
  &lt;/a&gt;
  How do we do that?
&lt;/h3&gt;

&lt;p&gt;There are libraries that take care of this for us. &lt;/p&gt;

&lt;p&gt;However we can't create a program to do this every time for every image so, I created a CLI Tool [My First CLI Application] called &lt;code&gt;Shirmkage&lt;/code&gt; which stands for &lt;code&gt;shrink&lt;/code&gt; + &lt;code&gt;image&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can check out/play around with the &lt;a href="https://github.com/LucidMach/Shrimkage"&gt;source code&lt;/a&gt; on my github.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g shrimkage 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Shrimkage makes optimizing images in bulk easy&lt;/p&gt;

&lt;p&gt;You can use it directly in the terminal [that's what a CLI is tho 😅]&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shrimkage folder
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The default level of reduction is 50 (/100). so if you want more optimization you can &lt;code&gt;shrimkage folder --level=10&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Shimkage also give you the option to apply optimizations to individual images&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shrimkage file --path=./test.png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And That is The 20% Effort to gain an 80% increase in web performance&lt;br&gt;
✌ &lt;/p&gt;

&lt;p&gt;If You ❤️ This,&lt;/p&gt;

&lt;p&gt;Follow Me on &lt;a href="https://twitter.com/LucidMach"&gt;Twitter&lt;/a&gt;, &lt;/p&gt;

&lt;p&gt;Where you can see updates on all my work [including blogs]&lt;/p&gt;

&lt;p&gt;Also, Don't forget to DM Me&lt;br&gt;
Let's have small dev talk&lt;br&gt;
😁✌&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>performance</category>
      <category>todayilearned</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The Death of Browser Games</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 26 Jul 2021 14:47:37 +0000</pubDate>
      <link>https://dev.to/codesphere/the-death-of-browser-games-25af</link>
      <guid>https://dev.to/codesphere/the-death-of-browser-games-25af</guid>
      <description>&lt;p&gt;Those of us that grew up in the late 90s to mid-2000s likely spent a good chunk of our time playing browser games. While most prior gaming required a console and disc, the internet opened up the opportunity to try out thousands of online games, often for free, with minimal setup time.&lt;/p&gt;

&lt;p&gt;On the dev side, tools like Adobe Flash allowed developers with minimal resources to create and publish their own games for users.&lt;/p&gt;

&lt;p&gt;By the end of the 2000s, however, this viral sensation had largely died down, and today, with the exception of online gambling, the browser game market is nearly completely gone.&lt;br&gt;
So what exactly caused this? The apparent death of browser games is an interesting story of weak technologies, Silicon Valley feuds, and shifting consumer trends.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problems-with%C2%A0flash"&gt;
  &lt;/a&gt;
  The Problems with Flash
&lt;/h2&gt;

&lt;p&gt;While many of us probably think back at Adobe Flash with a lot of nostalgia, we might not remember that the technology had a good amount of issues.&lt;/p&gt;

&lt;p&gt;For starters, having to manage different versions of Adobe Flash created a difficult hurdle for new internet users. In addition, the need to update your Adobe Flash Player created an opportunity for malicious developers to trick users into downloading malware.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j_Afcn7n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vfip71ztw95kctscvpd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j_Afcn7n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vfip71ztw95kctscvpd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, throughout its lifespan, Flash was riddled with security vulnerabilities, especially on Android devices. In 2009, Symantec's Internet Security Threat Report stated that remote code execution in Flash Player was the second most attacked vulnerability by hackers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-poison%C2%A0apple"&gt;
  &lt;/a&gt;
  The Poison Apple
&lt;/h2&gt;

&lt;p&gt;In April of 2010, Steve Jobs, while CEO of Apple, published an open letter criticizing Adobe Flash and explaining why it would not be allowed on Apple's increasingly popular iOS products. While it's speculated that the decision to open the letter may have had some anti-competitive and/or egotistic reasons behind it, Jobs listed the following six reasons behind his decision:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's a proprietary product, and Apple prefers open web standards&lt;/li&gt;
&lt;li&gt;Websites are switching to better video formats&lt;/li&gt;
&lt;li&gt;Flash has bad security, reliability, and performance&lt;/li&gt;
&lt;li&gt;Flash unnecessarily drains battery&lt;/li&gt;
&lt;li&gt;Flash was not designed for a mobile format&lt;/li&gt;
&lt;li&gt;It's an unnecessary layer that holds back innovation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This letter and the corresponding ban on Flash essentially stopped any chance of Flash cornering the new mobile market, which we'll talk about next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-mediums"&gt;
  &lt;/a&gt;
  New Mediums
&lt;/h2&gt;

&lt;p&gt;Perhaps the greatest nail in browser gaming's coffin was the rise of the mobile gaming market, kicked off by the release of the iPhone in 2007.&lt;/p&gt;

&lt;p&gt;More specifically mobile gaming offered the same sort of simplicity as browser games, with increased safety. Not to mention that you could play anywhere on the go.&lt;/p&gt;

&lt;p&gt;By the early 2010s, mobile gaming completely dominated the casual gaming market and arguably has ever since.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-death-of%C2%A0flash"&gt;
  &lt;/a&gt;
  The Death of Flash
&lt;/h2&gt;

&lt;p&gt;Though we're told things on the internet last forever, on December 12th, 2020, Adobe officially stopped support for Adobe Flash. As a result, most remnants of the browser game era are no longer accessible.&lt;/p&gt;

&lt;p&gt;While shifting markets removed the need for Flash on the consumer side, the improvement of HTML5 deprecated the need for Flash on the development side. Animations and games could now be made with some pretty boilerplate HTML, CSS, and Javascript, not to mention the plethora of game development libraries that now exist without any need for third-party software like Flash.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-the-future%C2%A0hold"&gt;
  &lt;/a&gt;
  What Does the Future Hold?
&lt;/h2&gt;

&lt;p&gt;Nostalgia aside, the story of browser games can give us an important insight into building successful software. The technology landscape is always evolving, so don't bet on what tech looks like now, bet on what you think tech is going to look like.&lt;/p&gt;




&lt;p&gt;So what do you think? Are browser games going to make a comeback? What do you think the future of casual gaming looks like?&lt;/p&gt;

&lt;p&gt;Thanks for reading. If you're trying to build your own game on the web and want a simple and powerful way to deploy it, checkout &lt;a href="https://link.codesphere.com/BS"&gt;Codesphere&lt;/a&gt;, the next-generation cloud provider.&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>webdev</category>
      <category>softwaredevelopment</category>
      <category>programming</category>
    </item>
    <item>
      <title>Amazing CSS Tips &amp; Tricks</title>
      <author>Tarandeep Singh</author>
      <pubDate>Mon, 26 Jul 2021 14:32:14 +0000</pubDate>
      <link>https://dev.to/tarandeep_singh/amazing-css-tips-tricks-1jl0</link>
      <guid>https://dev.to/tarandeep_singh/amazing-css-tips-tricks-1jl0</guid>
      <description>&lt;p&gt;Wanna know how to use modern CSS features to write clean code by using some stunning CSS tricks? You have just landed at the right place!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-tip-for-beginners"&gt;
  &lt;/a&gt;
  A Tip For Beginners
&lt;/h3&gt;

&lt;p&gt;Here's a quick tip for those who have just started to learn CSS - DON'T use Bootstrap or Tailwind! No doubt they are great tools to get a nice-looking UI quickly but using these will mean that you'll be missing on CSS fundamentals. I have personally done this mistake &amp;amp; oh boy did I regret it. &lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grid-is-great"&gt;
  &lt;/a&gt;
  Grid is Great
&lt;/h3&gt;

&lt;p&gt;Unlike flexbox which only deals with individual columns &amp;amp; rows, Grid allows you to think about the big picture. When you set an element to &lt;code&gt;display: grid;&lt;/code&gt; you can then define its children as a bunch of columns &amp;amp; rows. Have a look at the amount of code we have eliminated by using grid instead of flexbox in the image below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u6WnwqZc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uey8kgmk3ybat10wby6j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u6WnwqZc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uey8kgmk3ybat10wby6j.jpg" alt="Grid vs flexbox image"&gt;&lt;/a&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout"&gt;Click here to read more about CSS Grid Layout&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#css-debugging"&gt;
  &lt;/a&gt;
  CSS Debugging
&lt;/h3&gt;

&lt;p&gt;We often use Chrome developer tools for debugging our code (including CSS) but you'll be surprised to know that Firefox developer tools are much superior especially when it comes to CSS. On inspecting an element in Firefox, you'll have a break-down of the box-model like you have in Chrome but you can also edit properties on it directly, for instance changing the padding or margin and it will also give you a breakdown of all the properties that are influencing the box-model. Not only this, Firefox also provides really nice graphics for flex &amp;amp; grid layouts.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IqLwvXVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a39m463qcewxi2vbey2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IqLwvXVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a39m463qcewxi2vbey2.jpg" alt="Firefox dev-tool image"&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#image-filters"&gt;
  &lt;/a&gt;
  Image Filters
&lt;/h3&gt;

&lt;p&gt;It's fun to play around with images in CSS, but did you know that we can apply amazing effects to those images. In fact CSS allows using lots of filters on the images to help developers play with the graphics without changing it in Photoshop. Let’s have a look at some of the filters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.image img {
  max-width: 300px;
}

.blur {
  filter: blur(5px);
}

.grayscale {
  filter: grayscale(100%);
}

.brightness {
  filter: brightness(150%);
}

.saturate {
  filter: saturate(200%);
}

.invert {
  filter: invert(100%);
}

.huerotate {
  filter: hue-rotate(180deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
I have much more to write and share with you guys but it's getting a little long, so comment below if you want part 2 of &lt;strong&gt;Amazing CSS Tips &amp;amp; Tricks&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/Tarandeep_s1ngh"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/tarandeep-s1ngh/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>PrimeNG I18N API Usage with ngx-translate</title>
      <author>Yiğit FINDIKLI</author>
      <pubDate>Mon, 26 Jul 2021 14:29:33 +0000</pubDate>
      <link>https://dev.to/yigitfindikli/primeng-i18n-api-usage-with-ngx-translate-3bh2</link>
      <guid>https://dev.to/yigitfindikli/primeng-i18n-api-usage-with-ngx-translate-3bh2</guid>
      <description>&lt;p&gt;How can we use PrimeNG I18N with ngx-translate? Let's start!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project Setup
&lt;/h3&gt;

&lt;p&gt;Let's create a brand new angular application using angular-cli.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng new primeng-i18n-with-ngx
cd primeng-i18n-with-ngx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's add PrimeNG, PrimeFlex, PrimeIcons, and ngx-translate.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install primeng primeicons primeflex@2.0.0 @ngx-translate/core @ngx-translate/http-loader @angular/localize
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We need to import &lt;a href="https://primefaces.org/primeng/showcase/#/setup"&gt;PrimeNG's&lt;/a&gt; CSS dependencies to Angular.json.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules/primeicons/primeicons.css 
node_modules/primeng/resources/themes/vela-blue/theme.css 
node_modules/primeng/resources/primeng.min.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we need a couple of PrimeNG components and ngx-translate setup.&lt;/p&gt;

&lt;p&gt;Note: Detailed ngx-translate setup can be found in &lt;a href="https://github.com/ngx-translate/core#installation"&gt;official docs&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;I want to use English to French translation because ngx-translation uses in their example.&lt;/p&gt;

&lt;p&gt;Let's create our translation JSON files. The path should be like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DPYLIUMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1iz4b8lx0y5427m1ak79.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DPYLIUMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1iz4b8lx0y5427m1ak79.png" alt="structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;en.json:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;fr.json:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Let's create our translation logic! We gonna use TranslateService and translate pipe for the general translation functionality for the translation.&lt;/p&gt;

&lt;p&gt;app.component.html:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;app.component.ts:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Alright, let's try it!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rmlwWTT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvk0fdhglfyoq50gfyo7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rmlwWTT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvk0fdhglfyoq50gfyo7.png" alt="English"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ijB2YEaT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gb3lloomc6g9c3sl9jqb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ijB2YEaT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gb3lloomc6g9c3sl9jqb.png" alt="French"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's cool, right?&lt;/p&gt;

&lt;p&gt;We need to use PrimeNGConfig for the translationing the PrimeNG components. Usage is quite simple.&lt;/p&gt;

&lt;p&gt;Usage from the &lt;a href="https://primefaces.org/primeng/showcase/#/i18n"&gt;Documentation&lt;/a&gt;:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;But we want use in the our I18N JSON.&lt;/p&gt;

&lt;p&gt;Let's create a calendar and change the month and day names!&lt;/p&gt;

&lt;p&gt;Firstly we need to add month and day names to translation files.&lt;/p&gt;

&lt;p&gt;PrimeNGConfig uses;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Month names for: monthNames&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Min day names for: dayNamesMin.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our files should be like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;em&gt;Note: "primeng" usage just an example.&lt;/em&gt;

&lt;p&gt;Let's create our Calendar.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now we want to change PrimeNG I18N API when ngx-translate trigger. We can use ngx-translate's "stream" observable for the detection.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Stream is giving to us primeng section(According to the which translation option used). Coming data is:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We just binding our translation data to PrimeNGConfig with setTranslation function. And Voilà! Our calendar translated!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D8yxzXs0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bs1wahbg8799yijxupq7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D8yxzXs0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bs1wahbg8799yijxupq7.png" alt="date"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MYtnxxdM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2z2qc9hfq0ur8gbxw4qf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MYtnxxdM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2z2qc9hfq0ur8gbxw4qf.png" alt="la-datte"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's use this logic for Dropdown, ColumnFilter, ConfirmPopup and FileUpload too!&lt;/p&gt;

&lt;p&gt;PrimeNG I18N API keys are on available at the &lt;a href="https://primefaces.org/primeng/showcase/#/i18n"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now we're gonna update our translation JSONs again.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now we're just gonna create our components. Because our translation logic is already present. We don't need any logical change. We already did update the translation JSONs!&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Here we go!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PmRcbFEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxtu0ttuxn8svwa38wi0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PmRcbFEY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxtu0ttuxn8svwa38wi0.png" alt="en-full"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XlXGsO6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy00n5155fwtwcp30vfp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XlXGsO6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy00n5155fwtwcp30vfp.png" alt="fr-full"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Voilà!&lt;/p&gt;

&lt;p&gt;Thanks for the reading!&lt;/p&gt;

&lt;p&gt;Repos:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/yigitfindikli"&gt;
        yigitfindikli
      &lt;/a&gt; / &lt;a href="https://github.com/yigitfindikli/primeng-i18n"&gt;
        primeng-i18n
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/primeng-i18n-api-with-ngx-translate?embed=1&amp;amp;view=preview&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>angular</category>
      <category>typescript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Let's talk about python</title>
      <author>Mohammad Ali Chraghi</author>
      <pubDate>Mon, 26 Jul 2021 14:16:50 +0000</pubDate>
      <link>https://dev.to/alichraghi/let-s-talk-about-python-2im3</link>
      <guid>https://dev.to/alichraghi/let-s-talk-about-python-2im3</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MEvccc0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sso6gv7hd7t0sss8x4ui.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEvccc0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sso6gv7hd7t0sss8x4ui.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
If I did not make some people angry in the previous post, I am sure they now report me to be banned&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;python now is very popular, As far as I can say the most popular in history because JS is coercion to web developers, but python is widely used. idk python. i just tried it and i can't understand why programmers love it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keep-your-python-version"&gt;
  &lt;/a&gt;
  Keep Your Python Version
&lt;/h2&gt;

&lt;p&gt;you should keep python with your project with &lt;code&gt;venv&lt;/code&gt;. because your project may not be compatible with later versions of Python :| at least rust keeps the functions and syntax and just make it a warning. but your python project is risky. i had lot of problems with python based tools and packages for that&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#memory-leaks"&gt;
  &lt;/a&gt;
  Memory Leaks
&lt;/h2&gt;

&lt;p&gt;python memory leaks are amazing! just in a fibonacci app (omg thre's no variable) python have more than &lt;a href="https://github.com/AliChraghi/LanguagesBenchmark/tree/main/fibonacci"&gt;300Kb memory leak&lt;/a&gt;! just imagine python for a web framework like Django :( just checkout lua. it's safe&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#error-detection"&gt;
  &lt;/a&gt;
  Error Detection
&lt;/h2&gt;

&lt;p&gt;error handling is a important part of development, but python as the most popular language can't detect errors during the interpretion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#huge-source-code"&gt;
  &lt;/a&gt;
  Huge Source Code
&lt;/h2&gt;

&lt;p&gt;yes, i think this is a problem. python source code have 2.9M lines of code and cause of the most problems. huge source code makes more mistakes and bugs. just checkout lua! it's &lt;br&gt;
 very same to python, a interpreter language without, but without any thirdparty library, lua is safe, minimal, have't &lt;br&gt;
 memory leak in a fibonacci app and just have 54K lines!!&lt;/p&gt;

&lt;p&gt;// pls don't comment &lt;code&gt;delete this post&lt;/code&gt; or &lt;code&gt;this is most shi_t post i ever seen&lt;/code&gt; they are my reasons. so pls just say your reasons&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>Mutation is life / Boring Technology</title>
      <author>borislav nikolov</author>
      <pubDate>Mon, 26 Jul 2021 14:12:11 +0000</pubDate>
      <link>https://dev.to/rekki/mutation-is-life-boring-technology-11h0</link>
      <guid>https://dev.to/rekki/mutation-is-life-boring-technology-11h0</guid>
      <description>&lt;p&gt;TLDR:&lt;br&gt;
We had horrible outage where rabbitmq node ran out of memory because I&lt;br&gt;
forgot to unbind a queue (one of 50s or so), and we lost a whole bunch&lt;br&gt;
of in-producer-memory state, this made our whole infrastructure&lt;br&gt;
completely probabilistic and it took us 2 hours of blood sweat and&lt;br&gt;
tears to recover the lost data. We should've just used postgres as a&lt;br&gt;
queue.&lt;/p&gt;

&lt;p&gt;In almost any system being built today we have users that perform&lt;br&gt;
actions to mutate state. This is life, to create side effects, yes,&lt;br&gt;
mutation is life.&lt;/p&gt;

&lt;p&gt;I will illustrate it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ user(U) ]&amp;lt;------+
    |             |
    | action(A)   |
    v             |
[ receiver (R)]   ^ world
    |             | change
    |             |
    v             |
[ state (S) ] ----+

receiver:
   this is usually a backend endpoint

user:
   in our case is a chef

state:
   in our case: creating an order
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can move those pieces in any way, for example the action can be a&lt;br&gt;
function of the state mutation, instead of the other way around, or&lt;br&gt;
the receiver of the action can be the user itself and the user&lt;br&gt;
directly mutates the state, etc. This however is what technical&lt;br&gt;
implementation means, looks the same to the outside, but has very&lt;br&gt;
different emergent properties.This is what this post is about,&lt;br&gt;
emergent behavior and chaos.&lt;/p&gt;

&lt;p&gt;Lets a possible technical implementation of 'user' creating an 'order'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;user sends action to an endpoint /create-order&lt;/li&gt;
&lt;li&gt;backend code pushes to 'order.new'&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a) consumer of 'order.new'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;order is picked up transformed a bit and written to a database&lt;/li&gt;
&lt;li&gt;another message is sent to 'order.created' queue&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;a) consumer of 'order.created'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create audit log of who/when/what&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;b) consumer 'order.created'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;send email to the interested parties&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;c) consumer 'order.created'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;builds an email and sends it to 'email.created'&lt;/li&gt;
&lt;li&gt;logs the email for archiving purposes&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;d) consumer 'order.created'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create chat message with the order&lt;/li&gt;
&lt;li&gt;push to 'message.created'&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;e) consumer 'order.created'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;extract features for DS&lt;/li&gt;
&lt;li&gt;copy to salesforce etc&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;a) consumer of 'message.created'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;send push notification&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;a) consumer of 'email.created'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sends the email and then pushes to a queue
email.sent&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;a) consumer of 'email.sent'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;marks the email as sent&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is pretty much what we have now (maybe a bit more complicated but&lt;br&gt;
not much), you can trivially add more reactive components listening to&lt;br&gt;
specific topics, and you can fanout and etc just with rabbitmq.&lt;/p&gt;

&lt;p&gt;It is super flexible and extendible, re-triable etc.&lt;/p&gt;

&lt;p&gt;Of course it was not designed like that, but it grew over the years,&lt;br&gt;
adding bits and pieces here and there, it is very easy to&lt;br&gt;
unconsciously complicate it.&lt;/p&gt;

&lt;p&gt;Everything was really good until I did some refactor and stopped&lt;br&gt;
consuming one of the topics that was a clone of 'order.created', and I&lt;br&gt;
forgot to unbind the queue, so it kept getting messages but nobody was&lt;br&gt;
draining it, and a the RMQ node ran out of memory. Only 1 out of 3,&lt;br&gt;
because we still use elixir for that process, we were relaying on&lt;br&gt;
elixir's in-memory stability to keep a buffer of messages to resend if&lt;br&gt;
need, which of course I killed when I restarted the cluster because I&lt;br&gt;
wasn't sure what the fuck is going on.&lt;/p&gt;

&lt;p&gt;That meant that 30% of all requests went to the abyss, the true abyss.&lt;br&gt;
We had to stay to 5am to glue bits and pieces and to connect the state.&lt;/p&gt;

&lt;p&gt;Caused the worse outage I have ever been firefighting, and once I was&lt;br&gt;
involved in solving an outage that we were selling hotels for 1/100th&lt;br&gt;
of the price, losing millions of euros.&lt;/p&gt;

&lt;p&gt;Now lets discuss another implementation of the same thing:&lt;br&gt;
'user' creating an 'order':&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;user sends action to an endpoint /create-order&lt;/li&gt;
&lt;li&gt;backend code:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  begin
  insert the order
  insert the message (push_notification_sent_at = null)
  insert the email (sent_at = null, delivered_at = null)
  insert log
  commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;a) secondly cronjob
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  select (for update) messages where push_notification_sent_at is null
  send the push notification
  update the message
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;b) secondly cronjob
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  select (for update) email where sent_at is null
  send the email
  update the email table
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use the database as a queue, works totally fine, we can scale&lt;br&gt;
postgress vertically &lt;em&gt;forever&lt;/em&gt;. Why forever you ask? Because there are&lt;br&gt;
~30000 restaurants in London, and we can geo-shard it, and there is&lt;br&gt;
physical upper bound on amount of data in a region.&lt;/p&gt;

&lt;p&gt;Fucking queues, it is so easy to overuse them, without knowing it&lt;br&gt;
creeps up on you, and in the end you have infrastructure spaghetti.&lt;/p&gt;

&lt;p&gt;Anyway We are migrating from queues to transactions and fuck it, I cant keep&lt;br&gt;
it in my head, ultimately it all ends up in postgres anyway, just with&lt;br&gt;
extra steps.&lt;/p&gt;

&lt;p&gt;Fuck.&lt;/p&gt;

&lt;p&gt;The morale of the story is:&lt;br&gt;
If shit ends up in postgres anyway, and you can afford to directly&lt;br&gt;
write to it (which is not always the case), just write to it.&lt;/p&gt;

&lt;p&gt;Do boring technologoy, the way we wrote php3 shit 20 years ago, get&lt;br&gt;
the state and write it in the database, even though mysql didn't have&lt;br&gt;
transactions (it was helpfully accepting to BEGIN/COMMIT though haha),&lt;br&gt;
it was ok.&lt;/p&gt;

&lt;p&gt;PS:&lt;br&gt;
There were 2 missed deliveries, but CS handled them like a&lt;br&gt;
king. Sending uber to pick up the things form the supplier and sending&lt;br&gt;
it to the chef and etc. It is much easier to firefight when you know&lt;br&gt;
CustomerSuccess has your back.&lt;/p&gt;

&lt;p&gt;PPS: I think outages are the best, everyone groups up and we solve the&lt;br&gt;
problem, some panic, some adrenalin, some pressure, but in the end the&lt;br&gt;
whole company becomes more of a team.&lt;/p&gt;

</description>
      <category>boring</category>
    </item>
    <item>
      <title>First steps with Rust declarative macros!</title>
      <author>Roger Torres Paes (he/him/ele)</author>
      <pubDate>Mon, 26 Jul 2021 14:09:13 +0000</pubDate>
      <link>https://dev.to/rogertorres/first-steps-with-rust-declarative-macros-1f8m</link>
      <guid>https://dev.to/rogertorres/first-steps-with-rust-declarative-macros-1f8m</guid>
      <description>&lt;p&gt;Macros are one of the ways to extend Rust syntax. As &lt;a href="https://doc.rust-lang.org/book/ch19-06-macros.html"&gt;&lt;em&gt;The Book&lt;/em&gt;&lt;/a&gt; calls it, “a way of writing code that writes other code”. Here, I will talk about &lt;em&gt;declarative macros&lt;/em&gt;, or as it is also called, &lt;em&gt;macros by example&lt;/em&gt;. Examples of declarative macros are &lt;code&gt;vec!&lt;/code&gt;, &lt;code&gt;println!&lt;/code&gt; and &lt;code&gt;format!&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The macros I will &lt;strong&gt;not&lt;/strong&gt; talk about are the &lt;em&gt;procedural macros&lt;/em&gt;, but you can read about them &lt;a href="https://doc.rust-lang.org/reference/procedural-macros.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As usual, &lt;strong&gt;I am writing for beginners&lt;/strong&gt;. If you want to jump to the next level, check:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;The Book's&lt;/em&gt; &lt;a href="https://doc.rust-lang.org/book/ch19-06-macros.html"&gt;section on macros&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The chapter about macros in &lt;a href="https://doc.rust-lang.org/reference/macros.html"&gt;&lt;em&gt;Rust by Example&lt;/em&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://danielkeep.github.io/tlborm/book/README.html"&gt;&lt;em&gt;The Little Book of Rust Macros&lt;/em&gt;&lt;/a&gt;, which is the most complete material I found about the topic (the second chapter is specially amusing).&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#why-do-i-need-macros"&gt;
  &lt;/a&gt;
  Why do I need macros?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The actual coding start in the &lt;a href="#coding"&gt;next section&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Declarative macros (from now on, just “macros”) are not functions, but it would be silly to deny the resemblance. Like functions, we use them to perform actions that would otherwise require too many lines of code or quirky commands (I am thinking about &lt;code&gt;vec!&lt;/code&gt; and &lt;code&gt;println!&lt;/code&gt;, respectively). These are (two of) the reasons to &lt;em&gt;use&lt;/em&gt; macros, but what about the reasons to &lt;em&gt;create&lt;/em&gt; them? &lt;/p&gt;

&lt;p&gt;Well, maybe you are developing a crate and want to offer this feature to the users, like warp did with &lt;a href="https://docs.rs/warp/0.1.20/warp/macro.path.html"&gt;&lt;code&gt;path!&lt;/code&gt;&lt;/a&gt;. Or maybe you want to use a macro as a boilerplate, so you don't have to create several similar functions, as I did &lt;a href="https://github.com/rogertorres/mtgsdk/blob/main/src/cards.rs#L197"&gt;here&lt;/a&gt;. It might be also the case that you need something that cannot be delivered by usual Rust syntax, like a function with initial values or structurally different parameters (such as &lt;code&gt;vec!&lt;/code&gt;, that allows calls like &lt;code&gt;vec![2,2,2]&lt;/code&gt; or &lt;code&gt;vec![2;3]&lt;/code&gt;—more on this later).&lt;/p&gt;

&lt;p&gt;That being said, I believe that the best approach is to learn how to use them, try them a few times, and when the time comes when they might be useful, you will remember this alternative.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#declaring-macros"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Declaring macros
&lt;/h2&gt;

&lt;p&gt;This is how you declare a macro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;etwas&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could call this macro with the commands &lt;code&gt;etwas!()&lt;/code&gt;, &lt;code&gt;etwas![]&lt;/code&gt; or &lt;code&gt;etwas!{}&lt;/code&gt;. There's no way to force one of those. When we call a macro always using one or the other—like parenthesis in &lt;code&gt;println!("text")&lt;/code&gt; or square-brackets in &lt;code&gt;vec![]&lt;/code&gt;—it is just a convention of usage (a convention that we should keep).&lt;/p&gt;

&lt;p&gt;But what is happening in this macro? Nothing. Let's add something to make it easier to visualize its structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value:expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nd"&gt;double!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The left side of &lt;code&gt;=&amp;gt;&lt;/code&gt; is the &lt;strong&gt;matcher&lt;/strong&gt;, the rules that define what the macro can receive as input. The right side is the &lt;strong&gt;transcriber&lt;/strong&gt;, the output processing. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Not very important, but both matcher and transcriber could be writen using either &lt;code&gt;()&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt; or &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#the-matching"&gt;
  &lt;/a&gt;
  The matching
&lt;/h2&gt;

&lt;p&gt;This will become clear later, but let me tell you right the way: the matching resembles &lt;a href="https://en.wikipedia.org/wiki/Regular_expression"&gt;regex&lt;/a&gt;. You may ask for specific arguments, fixed values, define acceptable repetition, etc. If you are familiar with it, you should have no problems picking this up.&lt;/p&gt;

&lt;p&gt;Let's go through the most important things you should know about the matching.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#variable-argument"&gt;
  &lt;/a&gt;
  Variable argument
&lt;/h3&gt;

&lt;p&gt;Variable arguments begin with &lt;code&gt;$&lt;/code&gt; (e.g., &lt;code&gt;$value:expr&lt;/code&gt;). Their structure is: &lt;code&gt;$&lt;/code&gt; &lt;code&gt;name&lt;/code&gt; &lt;code&gt;:&lt;/code&gt; &lt;code&gt;designator&lt;/code&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Both &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;:&lt;/code&gt; are fixed.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;name&lt;/code&gt; follows Rust variables convention. When used in the transcriber (see below), they will be called &lt;em&gt;metavariables&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Designators are &lt;strong&gt;not&lt;/strong&gt; variable types. You may think of them as “syntax categories”. Here, I will stick with &lt;a href="https://doc.rust-lang.org/reference/expressions.html"&gt;expressions&lt;/a&gt; (&lt;code&gt;expr&lt;/code&gt;), since Rust is &lt;a href="https://doc.rust-lang.org/reference/statements-and-expressions.html"&gt;“primarily an expression language”&lt;/a&gt;. A list of possible designators can be found &lt;a href="https://doc.rust-lang.org/reference/macros-by-example.html#metavariables"&gt;here&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There seems to be no consensus on the name "designator". &lt;a href="https://danielkeep.github.io/tlborm/book/mbe-min-captures-and-expansion-redux.html"&gt;The little book&lt;/a&gt; calls it "capture"; &lt;a href="https://doc.rust-lang.org/reference/macros-by-example.html"&gt;The Rust reference&lt;/a&gt; calls it "fragment-specifier"; and you will also find people referring them as "types". Just be aware of that when jumping from source to source. Here, I will stick with designator, as proposed in &lt;a href="https://doc.rust-lang.org/rust-by-example/macros/designators.html"&gt;Rust by example&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#fixed-arguments"&gt;
  &lt;/a&gt;
  Fixed arguments
&lt;/h3&gt;

&lt;p&gt;No mystery here. Just add them without &lt;code&gt;$&lt;/code&gt;. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value:expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;squared&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="nf"&gt;.pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nd"&gt;power!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3_i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;squared&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I know there are things here that I have not explained yet. I will talk about them now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#separator"&gt;
  &lt;/a&gt;
  Separator
&lt;/h3&gt;

&lt;p&gt;Some designators require some specific follow up. Expressions require one of these:  &lt;code&gt;=&amp;gt;&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt; or &lt;code&gt;;&lt;/code&gt;. That is why I had to add a comma between &lt;code&gt;$value:expr&lt;/code&gt; and the fixed-value &lt;code&gt;squared&lt;/code&gt;. You will find a complete list of follow-ups &lt;a href="https://danielkeep.github.io/tlborm/book/mbe-min-captures-and-expansion-redux.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-matching"&gt;
  &lt;/a&gt;
  Multiple matching
&lt;/h3&gt;

&lt;p&gt;What if we want our macro to not only calculate a number squared, but also a number cubed? We do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value:expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;squared&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="nf"&gt;.pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2_i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value:expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cubed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="nf"&gt;.pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3_i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Multiple matching can be used to capture different levels of specificity. Usually, you will want to write the matching rules from the most-specific to the least-specific, so your call doesn't fall in the wrong matching. A more technical explanation can be found &lt;a href="https://danielkeep.github.io/tlborm/book/mbe-min-captures-and-expansion-redux.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#repetition"&gt;
  &lt;/a&gt;
  Repetition
&lt;/h3&gt;

&lt;p&gt;Most macros that we use allow for a flexible number of inputs. For example, we may call &lt;code&gt;vec![2]&lt;/code&gt; or &lt;code&gt;vec![1, 2, 3]&lt;/code&gt;. This is where the matching resembles Regex the most. Basically, we wrap the variable inside &lt;code&gt;$()&lt;/code&gt; and follow up with a repetition operator:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;*&lt;/code&gt; — indicates any number of repetitions.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;+&lt;/code&gt; — indicates any number, but at least one.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;?&lt;/code&gt; — indicates an optional, with zero or one occurrence.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's say we want to add &lt;code&gt;n&lt;/code&gt; numbers. We need at least two addends, so we will have a single first value, and one or more (&lt;code&gt;+&lt;/code&gt;) second value. This is what such a matching would look like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;adder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$left:expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$right:expr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;adder!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will work on the transcriber latter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#repetition-separator"&gt;
  &lt;/a&gt;
  Repetition separator
&lt;/h3&gt;

&lt;p&gt;As you can see in the example above, I added a comma before the repetition operator &lt;code&gt;+&lt;/code&gt;.  That's how we add a separator for each repetition without a trailing separator. But what if we want a trailing separator? Or maybe we want it to be flexible, allowing the user to have a trailing separator or not? You may have any of the three possibilities like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;no_trailing&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$e:expr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;with_trailing&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$e:expr&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;either&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$e:expr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(,)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;no_trailing!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;with_trailing!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,);&lt;/span&gt;
    &lt;span class="nd"&gt;either!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;either!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#versatility"&gt;
  &lt;/a&gt;
  Versatility
&lt;/h3&gt;

&lt;p&gt;Unlike functions, you may pass rather different arguments to macros. Let's consider the &lt;code&gt;vec!&lt;/code&gt; macro example. For that, I will omit the transcriber.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$elem:expr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$n:expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x:expr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(,)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It deals with three kinds of calls:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;vec![]&lt;/code&gt;, which creates an empty Vector.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;vec!["text"; 10]&lt;/code&gt;, which repeats the first value ("text") &lt;code&gt;n&lt;/code&gt; times, where &lt;code&gt;n&lt;/code&gt; is the second value (10).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;vec![1,2,3]&lt;/code&gt;, which creates a vector with all the listed elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to see the implementation of the &lt;code&gt;vec!&lt;/code&gt; macro, check &lt;a href="https://www.youtube.com/watch?v=q6paRBbLgNw"&gt;Jon's stream about macros&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#the-transcriber"&gt;
  &lt;/a&gt;
  The transcriber
&lt;/h2&gt;

&lt;p&gt;The magic happens after the &lt;code&gt;=&amp;gt;&lt;/code&gt;. Most of what you are going to do here is regular Rust, but I would like to bring your attention to some specificities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type"&gt;
  &lt;/a&gt;
  Type
&lt;/h3&gt;

&lt;p&gt;When I called the exponentiation macro &lt;code&gt;power!&lt;/code&gt;, I did this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;power!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3_i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;squared&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I had to specify the type &lt;code&gt;i32&lt;/code&gt; because I used the &lt;code&gt;pow()&lt;/code&gt; function, which cannot be called on ambiguous numeric type; and as we do not define types in macros, I had to let the compiler know this information somehow. This is something to be aware when dealing with macros. Of course, I could have forced it by declaring a variable and passing the metavariable value to it and thus fixing the variable type. However, to do such a thing, we need multiple statements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-statements"&gt;
  &lt;/a&gt;
  Multiple statements
&lt;/h3&gt;

&lt;p&gt;To have more than one line in your transcriber, you have to use double curly brackets:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;etwas&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                             &lt;span class="c"&gt;//v --- this one&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value:expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;squared&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt; 
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="nf"&gt;.pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt;
   &lt;span class="c"&gt;//^ --- and this one&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-repetition"&gt;
  &lt;/a&gt;
  Using repetition
&lt;/h3&gt;

&lt;p&gt;Let us finish our &lt;code&gt;adder!&lt;/code&gt; macro.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;adder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$right:expr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; 
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="n"&gt;total&lt;/span&gt;
    &lt;span class="p"&gt;}};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;adder!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To handle repetition, all we have to do is to place the statement we want to repeat within &lt;code&gt;$()+&lt;/code&gt; (the repetition operator should match, that is why I am using &lt;code&gt;+&lt;/code&gt; here as well). &lt;/p&gt;

&lt;p&gt;But what if we have multiple repetitions? Consider the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$addend:expr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;mult&lt;/span&gt; &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$multiplier:expr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$addend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;

         &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="nv"&gt;$multiplier&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;

          &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sum: {} | Product: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;operations!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;mult&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How does Rust know that it must repeat &lt;em&gt;four times&lt;/em&gt; during the first repetition block and only &lt;em&gt;three times&lt;/em&gt; in the second one? By context. It checks the variable that is being use and figure out what to do. Clever, huh?&lt;/p&gt;

&lt;p&gt;Sure, you can make things harder to Rust. In fact, you may turn them indecipherable, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$addend:expr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;mult&lt;/span&gt; &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$multiplier:expr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$addend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="nv"&gt;$multiplier&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;

          &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sum: {} | Product: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What does “clever Rust” do with something like this? Well, one of the things it does best: it gives you a clear compile error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;error: meta-variable &lt;span class="s1"&gt;'addend'&lt;/span&gt; repeats 4 &lt;span class="nb"&gt;times&lt;/span&gt;, but &lt;span class="s1"&gt;'multiplier'&lt;/span&gt; repeats 3 &lt;span class="nb"&gt;times&lt;/span&gt;
  &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; src/main.rs:43:10
   |
43 |           &lt;span class="si"&gt;$(&lt;/span&gt;
   |  __________^
44 | |             &lt;span class="nb"&gt;sum&lt;/span&gt; +&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$addend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
45 | |             product &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$multiplier&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
46 | |         &lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;
   | |_________^
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Neat! 🦀&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#expand"&gt;
  &lt;/a&gt;
  Expand
&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, macros are syntax extensions, which means that Rust will turn them into regular Rust code. Sometimes, to understand what is going &lt;del&gt;wrong&lt;/del&gt; on, it is very helpful to see how rust pull that transformation off. To do so, use the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cargo&lt;/span&gt; &lt;span class="n"&gt;rustc&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Zunstable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;expanded&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command, however, is not only verbose, but it will also call for the nightly compiler. To avoid this and get the same result, you may install &lt;a href="https://github.com/dtolnay/cargo-expand"&gt;&lt;code&gt;cargo-expand&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cargo &lt;span class="nb"&gt;install &lt;/span&gt;cargo-expand
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once it is installed, you just have to run the command &lt;code&gt;cargo expand&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Although you don't have to be using the nightly compiler, I guess (and you may call me on this) you got to have it installed. To do so, run the command &lt;code&gt;rustup instal nightly&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Look at how the macro &lt;code&gt;operations!&lt;/code&gt; is expanded.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(::&lt;/span&gt;&lt;span class="nn"&gt;core&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Arguments&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new_v1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Sum: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;" | Product: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;core&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;ArgumentV1&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;core&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;core&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;ArgumentV1&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;core&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, even &lt;code&gt;println!&lt;/code&gt; was expanded.&lt;/p&gt;




&lt;p&gt;And that's all for today. There is certainly more to cover, but I will leave you with the readings I recommended earlier.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Cover image by &lt;a href="https://unsplash.com/photos/FTNGfpYCpGM"&gt;Thom Milkovic&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
      <category>rust</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Integrating with the Erste Banking API</title>
      <author>Robert Radošić</author>
      <pubDate>Mon, 26 Jul 2021 13:40:49 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/integrating-with-the-erste-banking-api-4gbe</link>
      <guid>https://dev.to/bornfightcompany/integrating-with-the-erste-banking-api-4gbe</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;As a part of a larger project, we had to integrate with the Erste PSD2 API. Although it's mostly your standard OAuth flow, there are a few "gotchas" along the way. This post will guide you to getting authenticated and pulling transactions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-portal"&gt;
  &lt;/a&gt;
  Developer Portal
&lt;/h2&gt;

&lt;p&gt;Before you can start writing any code, you will need an Erste developer account. You can open one on the &lt;a href="https://developers.erstegroup.com/"&gt;Erste developers portal&lt;/a&gt; where you will be able to choose the branch of the bank you will be integrating with and which of the APIs you will be using. &lt;strong&gt;Take note that the only API you can use without certification is the Corporate API&lt;/strong&gt;. Luckily this was exactly the one we needed and didn't have to go through the certification process.&lt;/p&gt;

&lt;p&gt;Among many options that are available on the portal dashboard, the only three that you are going to need to get started are OAuth settings, credentials, and the certificates section. &lt;/p&gt;

&lt;p&gt;In the OAuth settings, you are going to set the callback URI, this is the URI to which the authorization code is going to be sent. If you don't have a local server that can accept HTTP requests, you can use something like &lt;a href="https://requestbin.com"&gt;RequestBin&lt;/a&gt; to output the request and get the authorization code.&lt;/p&gt;

&lt;p&gt;In the certificates section, you will find the public and private keys which you can download and install to your devices' CA store.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#calling-api-endpoints"&gt;
  &lt;/a&gt;
  Calling API endpoints
&lt;/h2&gt;

&lt;p&gt;So, once we have the certificates installed and the callback URI setup, we can start calling the Erste API. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consent-id"&gt;
  &lt;/a&gt;
  Consent ID
&lt;/h3&gt;

&lt;p&gt;The first endpoint that we are going to call is the /consents API which is going to return our consent ID:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-X&lt;/span&gt; POST &lt;span class="se"&gt;\&lt;/span&gt;
 https://webapi.developers.erstegroup.com/api/ebc/sandbox/v1/netapi/consents &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s1"&gt;'X-Request-ID: 4774477a-0508-4293-be86-6fca6f67adda'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s1"&gt;'psu-ip-address: 127.0.0.1'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s1"&gt;'web-api-key: WEB_API_KEY'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'{
  "access": {
    "accounts": [],
    "balances": [],
    "transactions": []
  },
  "recurringIndicator": false,
  "validUntil": "2019-06-30",
  "frequencyPerDay": 4,
  "combinedServiceIndicator": false
}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where the WEB_API_KEY is the API key in your developer dashboard.&lt;br&gt;
The response will return the consent ID, save it somewhere as it's going to be needed in other requests.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#oauth-url"&gt;
  &lt;/a&gt;
  OAuth URL
&lt;/h3&gt;

&lt;p&gt;After we have obtained the consent token, we have to visit the URL with the following structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://webapi.developers.erstegroup.com/api/ebc/sandbox/v1netapi/auth
    ?redirect_uri=REDIRECT_URI
    &amp;amp;client_id=CLIENT_ID
    &amp;amp;response_type=code
    &amp;amp;access_type=offline
    &amp;amp;state=loremipsum
    &amp;amp;code_challenge=loremipsum
    &amp;amp;code_challenge_method=S256
    &amp;amp;scope=AIS:CONSENT_ID%20openid%20offline_access
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where the variables are following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;REDIRECT_URI - the URI you put as the callback in the OAuth setting&lt;/li&gt;
&lt;li&gt;CLIENT_ID - client ID from your dashboard&lt;/li&gt;
&lt;li&gt;CONSENT_ID - consent ID from the previous request
If you put the right details in the URL you will be greeted with an OAuth mocking tool where you can choose what type of user you want to mock, and what access you are going to give for their accounts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#authorization-code"&gt;
  &lt;/a&gt;
  Authorization code
&lt;/h3&gt;

&lt;p&gt;Once you select all the options in the OAuth mocking tool you will be redirected to the URI you put in the OAuth setting. If you are using RequestBin you can now go through the request and get the authorization code from the request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bearer-token"&gt;
  &lt;/a&gt;
  Bearer token
&lt;/h3&gt;

&lt;p&gt;At this point, once we have obtained the authorization code and the consent token, we can finally call the /token endpoint and receive the Bearer token which will be used to get transactions, accounts, etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-X&lt;/span&gt; POST &lt;span class="se"&gt;\&lt;/span&gt;
  https://webapi.developers.erstegroup.com/api/ebc/sandbox/v1/netapi/token &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s1"&gt;'Content-Type: application/x-www-form-urlencoded'&lt;/span&gt;
  &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'redirect_uri=REDIRECT_URI&amp;amp;client_id=CLIENT_ID&amp;amp;client_secret=CLIENT_SECRET&amp;amp;grant_type=authorization_code&amp;amp;code_verifier=loremipsum&amp;amp;code=AUTHORIZATION_CODE'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where the variables are following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;REDIRECT_URI - the URI you put as the callback in the OAuth setting&lt;/li&gt;
&lt;li&gt;CLIENT_ID - client ID from your dashboard&lt;/li&gt;
&lt;li&gt;CLIENT_SECRET - client secret from your dashboard&lt;/li&gt;
&lt;li&gt;AUTHORIZATION_CODE - authorization code from the previous request&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#calling-other-endpoints"&gt;
  &lt;/a&gt;
  Calling other endpoints
&lt;/h2&gt;

&lt;p&gt;Once you have the Bearer token you can use standard Bearer auth in the header of your requests. With this token, you can pull transactions and accounts from the sandbox. To go to production, the requirements will vary from country to country. The most common procedure will involve giving your VAT number and the SSL cert for the domain your app will be using.&lt;/p&gt;

&lt;p&gt;If you are going to be integrating with the Croatian branch of the Erste bank using PHP take a look at our &lt;a href="https://github.com/bornfight/erste-bank-client-php"&gt;in-house library&lt;/a&gt; to help you get started.&lt;/p&gt;

</description>
      <category>php</category>
      <category>api</category>
      <category>webdev</category>
      <category>engineeringmonday</category>
    </item>
    <item>
      <title>What Things To Remember When Developing A Taxi Service App for Business?</title>
      <author>JackKhan</author>
      <pubDate>Mon, 26 Jul 2021 13:04:53 +0000</pubDate>
      <link>https://dev.to/jackkhan/what-things-to-remember-when-developing-a-taxi-service-app-for-business-43eg</link>
      <guid>https://dev.to/jackkhan/what-things-to-remember-when-developing-a-taxi-service-app-for-business-43eg</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bY7nC6dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnfhqr30gm9hmi71vkot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bY7nC6dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnfhqr30gm9hmi71vkot.png" alt="Taxi App Development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The on-demand taxi service business is the leading one among all other app-based online service sectors. As it is the first on-demand booking service process online in the market, it still holds its huge growth value in the business area.&lt;/p&gt;

&lt;p&gt;With the convenient options to book taxis through smartphones, customers also find it is very easy to request taxi services. Its smart progress replaces the traditional way of taxi booking offline with a powerful digitized solution.&lt;/p&gt;

&lt;p&gt;In such a gainful market platform, your business becomes a famous brand between users by developing your new business app as per the following.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#existing-market-growth-of-taxi-industry-in-realtime"&gt;
  &lt;/a&gt;
  Existing Market Growth of Taxi Industry in Real-time
&lt;/h2&gt;

&lt;p&gt;Before starting any kind of business online it is significant to analyze your selected business market growth in contemporary. It is not an exception to the online taxi-hailing startup too. It ensures the gainful evolution of your chosen business career online in the future.&lt;/p&gt;

&lt;p&gt;According to the report by Businesswire, from the recovery of the post-covid scenario, the global taxi service business market value is estimated to reach USD 41.22 bn in 2025, at a growth rate of CAGR 9.5% in the future.&lt;/p&gt;

&lt;p&gt;By analyzing its before new normal impact, the market value of the taxi business online would be projected to rise from USD 23.42 bn to 28.65 billion between the years 2020-2021. Its growth rate is estimated at a CAGR of 22.3%.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analyze-current-taxi-service-app-user-demands-in-marketplace"&gt;
  &lt;/a&gt;
  Analyze Current Taxi Service App User Demands in Marketplace
&lt;/h2&gt;

&lt;p&gt;Taxi service business startup online definitely will be the best of your business career choice as per the statistics. Due to the core business tool being your new taxi app for your taxi service startup, it is mandated to create it powerful to the existing on-demand marketplace. &lt;/p&gt;

&lt;p&gt;So, analyzing the current demands of the existing taxi app users assists you to develop your app accordingly. That would make your app effective to the users’ experiences on the taxi service on-demand taxi service marketplace online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ride-hailing Service Requirements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The number of users increasing in the taxi service business in real-time creates a huge demand for different platforms to access services in needed time. Many existing taxi-hailing service providers are yet to update their taxi apps concerning their business player requirements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enhanced Traits Regarding Trends&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As per the evaluations in the growing taxi service industry in real-time, the customers are expecting frequent enhancements. But today, most of the new entrepreneurs fail to fulfill the need while they develop their app for launching their taxi service businesses online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easy On-boarding&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After the taxi-hailing platform came in a digitized service booking manner to the market, a lot of professional drivers benefited from the respective source. In many cases, the onboarding processes for new drivers seek to be smooth in verifications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Strong Security&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The players involved in the taxi service business have produced their information such as name, phone numbers, and email ID. Also, the end-users input their sensitive details like payment card numbers, social media credentials, e-wallet integrations, etc. So, the users are highly looking for a secured platform in the taxi service online.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#points-to-consider-while-developing-taxi-app-for-startup"&gt;
  &lt;/a&gt;
  Points to Consider While Developing Taxi App for Startup
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mVu1z-Ee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4oihhuj83ptfzpv0f99.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mVu1z-Ee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4oihhuj83ptfzpv0f99.png" alt="Points to remember while developing uber clone app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concentrate-on-modern-features-in-ondemand-taxi-service-business-today"&gt;
  &lt;/a&gt;
  Concentrate on Modern Features in On-demand Taxi Service Business Today
&lt;/h2&gt;

&lt;p&gt;As mentioned, the latest enhancements that occur in the contemporary taxi service industry online need to be included in your own business app too. Several successful options captivate today’s taxi app users a lot in the market area. In which, the top stuff to mention here is as follows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smart Login&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The passengers can smartly log in to the taxi app using their social media credentials. Though, they can get rapid access to use the respective taxi service app online whenever they want. It allows them to book taxis at their needed time quickly even as new users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Swifty Service&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Push notifications facilities inbuilt with taxi apps alerts concerned driver players immediately while customers are requesting taxis. It assists them to instantly respond to the customer. Also, they can complete the trippings swiftly utilizing the GPS navigation mapping system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multi Payment Mode&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The major advantage the end-users get in the app-based taxi service booking platform is multi-payment gateways. Through this, the passengers can pay their fares online or offline. They can pay smartly online using their payment card, e-wallet, or net/mobile banking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real-time Details&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The customers can actively track their booked taxis’ arrivals for ensuring. Thus, they could be ready with their packed things for their preferred trip plan. It avoids unnecessary waiting time for customers on board after the taxi arrival.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;History Tracking&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All the business players in the on-demand taxi service online can simply track their permitted history details from their respective business apps, whenever they want to review. As well, the admin can track all his business workflow details following history or live.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choose-minimum-viable-product-for-your-taxi-service-startup"&gt;
  &lt;/a&gt;
  Choose Minimum Viable Product for Your Taxi Service Startup
&lt;/h2&gt;

&lt;p&gt;Developing your new taxi business app from the readymade taxi dispatch software app script offers you the greatest advantages for your new online taxi business initiation. The minimum viable product (MVP) for your startup assists you in many angels as follows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smooth Access on Complete Process&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The already premade taxi dispatch software app/web panel is possessed with all the latest technology traits. Right from the quick login to fast taxi service completions, all make it easy for you (admin), and your business players to progressively involve in and use your service online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick App Launching&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because your new business app from the taxi dispatch software would be ready within 15 days (approximately), you can launch your new app soon to the on-demand market area. So, you could start gaining visibility very shortly after your complete business plan.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No Need Frequent Trials&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The build-in features of the taxi dispatch software for your new business app creation are entirely tested many times before being included in the app model. So, you don’t need to wait for trials to confirm your app design for business launching.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fully Custom Solution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While you choose taxi dispatch software for your on-demand taxi app development process, you could receive a fully custom solution. It allows you to make complete changes in its default design as per your own business idea.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handshake-with-right-app-developer-partner"&gt;
  &lt;/a&gt;
  Handshake with Right App Developer Partner
&lt;/h2&gt;

&lt;p&gt;Approaching the best app development company in the market is always a plus point to all the new entrepreneurs starting a business in the on-demand taxi service online. It would be beneficial for them with the following stuff on taxi app development processes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Experienced Development Completions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your approach with the development company should be intelligent. Select professional app creation service providers available in the global market. Prefer at least your selected app development company should have a decade of service experience in the development field.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Standardize Progress&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By verifying the mention, you could expect reliable app development progress for your business app development. So they are already experts, your new taxi app gets chances to be completed within your expected time period for app launching online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Highly Concerned Client Approach&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From such a standardized company, you get tied up with, you could receive concerns regarding your app development modulations and requirements. That would make it simple to implement your own ideas on the final app creation output.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Loyal Handshake&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Following these reminders before visiting any app development company to create your new taxi app, increases the loyalty between you and your selective company for longtime app development updates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stand-out-from-your-business-competitors-with-additional-modulations"&gt;
  &lt;/a&gt;
  Stand Out from Your Business Competitors with Additional Modulations
&lt;/h2&gt;

&lt;p&gt;Your app from the taxi service app developed through the taxi dispatch software app could receive the below-mentioned options. By the use of those hallmarks, you could create your new taxi service app too progressive that stands out from other competitors in the on-demand taxi business marketplace.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sketch Your Own Business Plan&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Get ready with your own business plan sketched from your personal taxi service business analysis. Review your competitors’ taxi app user feedback. Find their demands on the existing on-demand taxi service industry online. Add them with your new taxi app for service to fulfill those demands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interact with Experts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use expert guidance on your new &lt;a href="https://www.spotnrides.com/"&gt;taxi app development&lt;/a&gt;. Use your selected app development company’s full support and guidance. Get clear with your own business plan regarding app development with professionals for extra clarity to technically include new features or remove any default. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use Custom Modulation Solution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Make custom changes to your new taxi app. Initiate your modulations/corrections on the default settings, options, UI, and UX for unique app design output. It makes your taxi business app launch to be inaugurated as per your complete business plan analytics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be Engaged With Users&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After your business launches successfully online, always be concerned with your business players. Update your app frequently in reference to the customers’ app service feedback. Be active in social media presence. Post your official information such as app enhancements, services added on, discount details, etc. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h3&gt;

&lt;p&gt;On-demand taxi-hailing service online is gaining a huge market value in its online marketplace. By remembering the mentioned key things, you could develop your new taxi service app most powerful for business launching. As a result, your new startup has much more visibility among people to progressively increase user value in real-time.&lt;/p&gt;

</description>
      <category>uberclone</category>
      <category>development</category>
      <category>taxibookingapp</category>
      <category>taxibusiness</category>
    </item>
  </channel>
</rss>
