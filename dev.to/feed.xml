<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>“Accidentally Into Code” with Daphnie Ozioma of Flexisaf | Educative Sessions</title>
      <author>Lee Ngo</author>
      <pubDate>Tue, 03 Aug 2021 20:11:48 +0000</pubDate>
      <link>https://dev.to/leepngo/accidentally-into-code-with-daphnie-ozioma-of-flexisaf-educative-sessions-5g2i</link>
      <guid>https://dev.to/leepngo/accidentally-into-code-with-daphnie-ozioma-of-flexisaf-educative-sessions-5g2i</guid>
      <description>&lt;p&gt;Daphnie Ozioma graduated from university in Nigeria with a focus on microbiology in 2018, but after graduation, she decided to attend a coding bootcamp instead and become a program manager. When she got there, Daphnie discovered there was no PM tutor, so she opted for web development where she learned the basics of HTML and CSS. For her mandatory National Youth Service Corps in November 2019. Daphnie applied as a developer to Flexisaf (an EduTech company) for her service year and she got retained as a junior developer afterwards.&lt;/p&gt;

&lt;p&gt;Watch the full interview: &lt;a href="https://youtu.be/HwwbvtniogI"&gt;https://youtu.be/HwwbvtniogI&lt;/a&gt;&lt;br&gt;
Listen to the podcast: &lt;a href="https://www.podbean.com/ew/pb-yyjx8-10984e2"&gt;https://www.podbean.com/ew/pb-yyjx8-10984e2&lt;/a&gt;&lt;/p&gt;

</description>
      <category>learntocode</category>
      <category>projectmanagement</category>
      <category>nigeria</category>
      <category>africa</category>
    </item>
    <item>
      <title>The basics of JWT (JSON Web Tokens) for Dummies</title>
      <author>Carsten Behrens</author>
      <pubDate>Tue, 03 Aug 2021 19:45:38 +0000</pubDate>
      <link>https://dev.to/carstenbehrens/the-basics-of-jwt-json-web-tokens-for-dummies-2iin</link>
      <guid>https://dev.to/carstenbehrens/the-basics-of-jwt-json-web-tokens-for-dummies-2iin</guid>
      <description>&lt;p&gt;JSON Web Tokens are a proposed internet standard that allows for stateless authentication.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use"&gt;
  &lt;/a&gt;
  Use
&lt;/h2&gt;

&lt;p&gt;JWT are mostly used to authenticate users in the context of websites / web application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Before going into the nitty-gritty here is a simple example of its usage:&lt;/p&gt;

&lt;p&gt;Let's say we have a Web Application called Tweeter, this Web Application can do a bunch of fancy stuff but let's focus&lt;br&gt;
on the user profile. Now obviously each user should only be able to access their own user profile settings.&lt;/p&gt;

&lt;p&gt;So very simply User with ID 123 should only be able to access profile settings of User ID 123.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is how the authentication flow could look like:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bfUOVdNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hdyj9ouvckhslxzxwep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bfUOVdNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hdyj9ouvckhslxzxwep.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking at this diagram you'll notice two things:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Once the User/Browser has the Token, the DB is no longer needed to authenticate the user.&lt;br&gt;
&lt;strong&gt;This is why it's called stateless authentication.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
With the Token, we can send information about the user, in this example the ID.&lt;br&gt;&lt;br&gt;
This information can then be verified using the Secret Key.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-jwt"&gt;
  &lt;/a&gt;
  The JWT
&lt;/h2&gt;

&lt;p&gt;The Token itself is either send via Cookie or via &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization"&gt;Authorization Header&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;E.g.:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Authorization:
Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2Mjc5MjgyMzksInVzZXJSb2xlcyI6WyJBRE1JTiIsIkRCX1JFQUQiLCJEQl9XUklURSJdLCJ1c2VySWQiOjEyMzQ1LCJpYXQiOjE2Mjc5MjgxMTl9.8vTwsBOp8LSa0sdc0nWAUnmWAAgOnS0ElB3bfaiSRfQ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The mangled mess of letters and numbers is nothing more than &lt;strong&gt;encoded&lt;/strong&gt; JSON. Notice that it is &lt;strong&gt;encoded&lt;/strong&gt; not &lt;strong&gt;encrypted&lt;/strong&gt; that means we can easily decode it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;atob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// This will return: {alg: "HS256", typ: "JWT"}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the &lt;a href="//jwt.io"&gt;jwt.io&lt;/a&gt; website we can make it really easy for ourselves. Just paste the JWT and get the decoded JSON data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---NQvNBt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7mm6362vxw1nv8tq4a1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---NQvNBt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7mm6362vxw1nv8tq4a1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The JWT is made up of three parts:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Header:&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Contains information on the signing algorithm that was used.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Payload:&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Contains the claims. Like UserId and any other information you want to use, but also a bunch of reserved Claims that you can see &lt;a href="https://auth0.com/docs/tokens/json-web-tokens/json-web-token-claims#reserved-claims"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Footer:&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Contains the signature of the token that can be verified with the Secret Key. If the Token gets changed in any way, it won't be valid anymore.&lt;/p&gt;

&lt;p&gt;If you need more input on this topic I highly suggest you watch this &lt;a href="https://www.youtube.com/watch?v=67mezK3NzpU"&gt;presentation&lt;/a&gt;, it's great.&lt;/p&gt;

</description>
      <category>jwt</category>
      <category>auth</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>You don't need to ask someone to be your mentor</title>
      <author>Simon Barker</author>
      <pubDate>Tue, 03 Aug 2021 19:38:18 +0000</pubDate>
      <link>https://dev.to/allthecode/you-don-t-need-to-ask-someone-to-be-your-mentor-4g9h</link>
      <guid>https://dev.to/allthecode/you-don-t-need-to-ask-someone-to-be-your-mentor-4g9h</guid>
      <description>&lt;p&gt;How to find a coding mentor is one of the most common questions I see asked by early stage developers and career switchers. It's not surprising, getting a mentor is a common piece of advice given to people in all careers: "finding a mentor will really help you progress to the next stage"&lt;/p&gt;

&lt;p&gt;We even hear successful people talk about their mentors and the amazing influence they had on them.&lt;/p&gt;

&lt;p&gt;If only you could find a mentor, right? You'd be set!&lt;/p&gt;

&lt;p&gt;So, back to the question:&lt;/p&gt;

&lt;p&gt;"How to find a coding mentor to help my career?"&lt;/p&gt;

&lt;p&gt;It sounds like a big ask doesn't in? Saying to someone:&lt;/p&gt;

&lt;p&gt;"Hey, would you mind helping me progress in my career while I have nothing to offer in return?"&lt;/p&gt;

&lt;p&gt;Well I have a secret to tell you.&lt;/p&gt;

&lt;p&gt;You don't have to ask someone to be your mentor, you can just decide to be their mentee and start being mentored. It really is that simple.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-a-mentor-do"&gt;
  &lt;/a&gt;
  What does a mentor do?
&lt;/h2&gt;

&lt;p&gt;You see, a mentor is just someone you can ask questions to and get answers that will hopefully help you on your journey. Which, if you think about it, sounds an awful lot like a conversation where one person is a bit more experienced in one area than the other.&lt;/p&gt;

&lt;p&gt;In fact, because of this one simple fact finding a mentor is so easy and simple I can sum it up with a Tweet:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--JoWVGiSu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1380875229434630148/5BZ_XkeZ_normal.jpg" alt="Simon Barker profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Simon Barker
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @allthecode_
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Life hack? &lt;br&gt;&lt;br&gt;You don’t need to ask someone to be your mentor&lt;br&gt;&lt;br&gt;Just-&lt;br&gt;Ask them questions&lt;br&gt;Act on their answers&lt;br&gt;Study their career&lt;br&gt;Buy then a coffee&lt;br&gt;&lt;br&gt;You could already be someone else’s mentor and not realise it 🤔
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:15 PM - 19 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1417231663466258432" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1417231663466258432" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1417231663466258432" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;The most important bit for this to work is that last bit, don't treat them like your personal problem solver and make sure you give back in some way: buy them a coffee, buy their book, send them flowers ... whatever, just something to show you appreciate them.&lt;/p&gt;

&lt;p&gt;We have built up such an aura around this idea of a mentor that we forget that "getting a mentor" isn't a silver bullet for success anyway, they don't do the work for you, they don't magic away your obstacles, the simply offer informal guidance when asked.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-i-ask-someone-to-be-my-mentor"&gt;
  &lt;/a&gt;
  How can I ask someone to be my mentor?
&lt;/h2&gt;

&lt;p&gt;Is there someone in your life you have being trying to ask to be your mentor and you're stressing about how to ask them?&lt;/p&gt;

&lt;p&gt;Well, don't ask them! You don't need to!&lt;/p&gt;

&lt;p&gt;Pretend you did and they they said yes, and skip to the questions you really want answered and start having a conversation from that point.&lt;/p&gt;

&lt;p&gt;Heck, you could already have a mentor and not realise it!&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
    </item>
    <item>
      <title>4 Ways to Validate an Email with JavaScript 📮</title>
      <author>Gaël Thomas</author>
      <pubDate>Tue, 03 Aug 2021 19:31:01 +0000</pubDate>
      <link>https://dev.to/gaelgthomas/how-to-validate-an-email-with-javascript-25k3</link>
      <guid>https://dev.to/gaelgthomas/how-to-validate-an-email-with-javascript-25k3</guid>
      <description>&lt;p&gt;In this article, you will discover three ways to do an email validation with JavaScript!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"An old myth says that you are a web development wizard once you create a contact form! 🧙😄" - Unknown&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#email-validation-using-regular-expressions"&gt;
  &lt;/a&gt;
  Email validation using Regular Expressions
&lt;/h2&gt;

&lt;p&gt;The most common way to validate an email with JavaScript is to use a regular expression (RegEx). &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"&gt;Regular expressions&lt;/a&gt; will help you to define rules to validate a string.&lt;/p&gt;

&lt;p&gt;If we summarize, an email is a string following this format:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. First part of an email&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;uppercase and lowercase letters: a-z and A-Z&lt;/li&gt;
&lt;li&gt;digits: 0-9&lt;/li&gt;
&lt;li&gt;hyphens: - (not the last or first character)&lt;/li&gt;
&lt;li&gt;dots: . (not the last or first character)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Some email providers allows email adresses with these character: &lt;code&gt;! # $ % &amp;amp; ‘ \* + / = ? ^ \ _ \ { | } ~ " ( ) , : ; &amp;lt; &amp;gt; @ [ \ ]&lt;/code&gt;. It will depends if you want to accept these mails, but most website rejects them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2. Second part of an email&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;uppercase and lowercase letters: a-z and A-Z&lt;/li&gt;
&lt;li&gt;digits: 0-9&lt;/li&gt;
&lt;li&gt;hyphens: - (not the last or first character)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. Third part of an email&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;uppercase and lowercase letters: a-z and A-Z&lt;/li&gt;
&lt;li&gt;digits: 0-9&lt;/li&gt;
&lt;li&gt;dots: . (not the last or first character)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an email regex expression:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/^[a-zA-Z0-9][\-_\.\+\!\#\$\%\&amp;amp;\'\*\/\=\?\^\`\{\|]{0,1}([a-zA-Z0-9][\-_\.\+\!\#\$\%\&amp;amp;\'\*\/\=\?\^\`\{\|]{0,1})*[a-zA-Z0-9]@[a-zA-Z0-9][-\.]{0,1}([a-zA-Z][-\.]{0,1})*[a-zA-Z0-9]\.[a-zA-Z0-9]{1,}([\.\-]{0,1}[a-zA-Z]){0,}[a-zA-Z0-9]{0,}$/i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In JavaScript, you can use this function for your email validation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isEmailValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emailRegexp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z0-9&lt;/span&gt;&lt;span class="se"&gt;][\-&lt;/span&gt;&lt;span class="sr"&gt;_&lt;/span&gt;&lt;span class="se"&gt;\.\+\!\#\$\%\&amp;amp;\'\*\/\=\?\^\`\{\|]{0,1}([&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z0-9&lt;/span&gt;&lt;span class="se"&gt;][\-&lt;/span&gt;&lt;span class="sr"&gt;_&lt;/span&gt;&lt;span class="se"&gt;\.\+\!\#\$\%\&amp;amp;\'\*\/\=\?\^\`\{\|]{0,1})&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z0-9&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;@&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z0-9&lt;/span&gt;&lt;span class="se"&gt;][&lt;/span&gt;&lt;span class="sr"&gt;-&lt;/span&gt;&lt;span class="se"&gt;\.]{0,1}([&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z&lt;/span&gt;&lt;span class="se"&gt;][&lt;/span&gt;&lt;span class="sr"&gt;-&lt;/span&gt;&lt;span class="se"&gt;\.]{0,1})&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z0-9&lt;/span&gt;&lt;span class="se"&gt;]\.[&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z0-9&lt;/span&gt;&lt;span class="se"&gt;]{1,}([\.\-]{0,1}[&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z&lt;/span&gt;&lt;span class="se"&gt;]){0,}[&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z0-9&lt;/span&gt;&lt;span class="se"&gt;]{0,}&lt;/span&gt;&lt;span class="sr"&gt;$/i&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;emailRegexp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEmailValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helloitsme@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEmailValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello-its-me@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEmailValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello.its.me@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEmailValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helloitsme+test@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEmailValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.helloitsme@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEmailValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helloitsme.@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEmailValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEmailValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helloitsmeherewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEmailValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helloitsme@herewecode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEmailValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d@d.o&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As you can imagine, this Regex isn't homemade. I found it on Stack Overflow; then, I updated it to match the email string format explained above.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#email-validation-using-an-email-validator"&gt;
  &lt;/a&gt;
  Email validation using an Email Validator
&lt;/h2&gt;

&lt;p&gt;If you don't want to create a custom function to validate emails, you can use libraries.&lt;br&gt;
When we type: "email validation library javascript" on Google, the first result is the &lt;a href="https://www.npmjs.com/package/email-validator"&gt;"email validator" library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example of how to use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email-validator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helloitsme@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello-its-me@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello.its.me@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helloitsme+test@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.helloitsme@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helloitsme.@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@herewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helloitsmeherewecode.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helloitsme@herewecode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d@d.o&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Email validator is one library among others. You can find a lot of them with different features online.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#email-validation-using-html5-input-validation"&gt;
  &lt;/a&gt;
  Email validation using HTML5 input validation
&lt;/h2&gt;

&lt;p&gt;The last way to validate an email is to use an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email"&gt;HTML5 email input&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is an example of an email validation using a simple form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;JavaScript Validate Email&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Write your email and we will validate it:&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Email"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Submit"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AO4UEUYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5vp5xjkctvm5fmwvwcp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AO4UEUYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5vp5xjkctvm5fmwvwcp.png" alt="Email validation using a form with an HTML5 email input"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, HTML triggers an error when the email address isn't correct. However, if we type, for example: "helloitsme@herewecode" or "-herewecode.io", the form is valid.&lt;br&gt;
This option is a good feature that you should use when you implement a form on your website. It's suitable for a first validation, but don't forget to validate yourself to avoid issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#email-validation-using-an-api"&gt;
  &lt;/a&gt;
  Email validation using an API
&lt;/h2&gt;

&lt;p&gt;As a bonus, you can validate emails using APIs. Here are some companies proposing email validation APIs: SendGrid, MailBoxLayer, Abstract API, etc.&lt;br&gt;
Most of these APIs are not free, but they will provide you some advanced features (ex: check if an email exists).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hey, you did it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading until the end! I hope you learned from it! 🎉&lt;/p&gt;

&lt;p&gt;I'm starting to tweet more consistently! If you want to get more tips and resources about web programming -&amp;gt;  &lt;a href="https://twitter.com/gaelgthomas"&gt;Find me on my Twitter 🐦&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Understanding concurrency in go</title>
      <author>Nikhil Taneja</author>
      <pubDate>Tue, 03 Aug 2021 19:17:21 +0000</pubDate>
      <link>https://dev.to/itsnikhil/understanding-concurrency-in-go-2b98</link>
      <guid>https://dev.to/itsnikhil/understanding-concurrency-in-go-2b98</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once - Rob Pike&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go language itself provides some features to handle concurrency out of the box, hiding all the complexities so that developers write better, faster, more efficient code. These features include :-&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Goroutines&lt;/strong&gt;: A &lt;em&gt;goroutine&lt;/em&gt; is a lightweight thread managed by the Go runtime.&lt;/p&gt;

&lt;p&gt;Just add &lt;code&gt;go&lt;/code&gt; in front of your function call to convert it into goroutine and you can take advantage of concurrency.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;say&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// concurrently executes func say&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// you might also see the following pattern&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="c"&gt;// concurrently executes anonymous func and &lt;/span&gt;
        &lt;span class="n"&gt;say&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// call our function inside it&lt;/span&gt;
    &lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Channels&lt;/strong&gt;: Channels are a typed conduit through which you can send and receive values with the channel operator, &lt;code&gt;&amp;lt;-&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// unbuffered channel&lt;/span&gt;
&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// buffered channel&lt;/span&gt;
&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// Receive only channel&lt;/span&gt;
&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// Send only channel&lt;/span&gt;

&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="c"&gt;// sends value to channel&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="c"&gt;// assign value from channel to x&lt;/span&gt;

&lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// close channel and clean memory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;WaitGroups&lt;/strong&gt;: A WaitGroup waits for a collection of goroutines to finish.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;wg&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WaitGroup&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// Add to set the number of goroutines to wait for&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncFuncParam&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// each of the goroutines runs and calls Done when finished&lt;/span&gt;
        &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;// executed after functions returns&lt;/span&gt;
        &lt;span class="n"&gt;asyncFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncFuncParam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="s"&gt;"USING WAIT GROUP"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;// block until all goroutines have finished&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#concurrency-in-go"&gt;
  &lt;/a&gt;
  Concurrency in go
&lt;/h2&gt;

&lt;p&gt;If you are not taking advantage of goroutines then ask yourself why not? I mean why don't you want your code to go faaassstttt? While there are a lot of cases where sequential execution of code is important, here we really cannot do anything but there are some situations where we could take advantage of concurrency but uncontrolled concurrency is harmful. For example: Making multiple concurrent API requests might get you in trouble of getting rate limited HTTP 429 - Too Many Requests. Luck you, even in such cases we can take advantage of language features like channels and use it's properties to limit concurrency.&lt;/p&gt;

&lt;p&gt;In this post, I have shared 2 different ways of handling concurrency&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uncontrolled-concurrency"&gt;
  &lt;/a&gt;
  Uncontrolled concurrency
&lt;/h3&gt;

&lt;p&gt;This will queue as many goroutines to execute in concurrent mode as your system can handle. &lt;strong&gt;Use this&lt;/strong&gt; &lt;strong&gt;when your program has many autonomous pieces independent of each other (non-atomic)&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;wg&lt;/span&gt; &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WaitGroup&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncFuncParam&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;asyncFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncFuncParam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="s"&gt;"USING WAIT GROUP"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;wg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#controlled-concurrency"&gt;
  &lt;/a&gt;
  Controlled concurrency
&lt;/h3&gt;

&lt;p&gt;The will create a bounded queue and limit goroutines  according to a set limit per seconds while execute in concurrent mode following bucketing/ short bursts pattern. &lt;strong&gt;Use this&lt;/strong&gt; &lt;strong&gt;when your program has many autonomous pieces independent of each other (non-atomic) but you are rate limited due to some bottleneck.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;CONCURRENCY_LIMIT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt; &lt;span class="c"&gt;// max 30 items in a channel per second &lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;guard&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="n"&gt;CONCURRENCY_LIMIT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;guard&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;{}{}&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncFuncParam&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;guard&lt;/span&gt; &lt;span class="p"&gt;}()&lt;/span&gt;
        &lt;span class="n"&gt;asyncFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncFuncParam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="s"&gt;"USING CHANNELS FOR CONTROLLED CONCURRENCY"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#benchmarks"&gt;
  &lt;/a&gt;
  Benchmarks
&lt;/h2&gt;

&lt;p&gt;200+ API requests&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mode&lt;/th&gt;
&lt;th&gt;Time of Execution&lt;/th&gt;
&lt;th&gt;Outcome&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Synchronous&lt;/td&gt;
&lt;td&gt;~1 min 20 sec&lt;/td&gt;
&lt;td&gt;All API succeeded&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Uncontrolled concurrency&lt;/td&gt;
&lt;td&gt;~5 sec&lt;/td&gt;
&lt;td&gt;Many API failed with error&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Controlled concurrency&lt;/td&gt;
&lt;td&gt;~10 sec&lt;/td&gt;
&lt;td&gt;All API succeeded&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;No doubt uncontrolled concurrency will be the fastest to complete the job but in the end it failed to get all the response successfully. With controlled concurrency, I can manually tweak performance and find right balance between rate limits and execution time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learning-resources"&gt;
  &lt;/a&gt;
  Learning resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Concurrency section of A Tour of Go - One of the best official resource &lt;a href="https://tour.golang.org/concurrency/1"&gt;&lt;em&gt;https://tour.golang.org/concurrency/1&lt;/em&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;If you want know internal workings of goroutines, i would highly recommend you read the following article &lt;a href="https://medium.com/the-polyglot-programmer/what-are-goroutines-and-how-do-they-actually-work-f2a734f6f991"&gt;&lt;em&gt;https://medium.com/the-polyglot-programmer/what-are-goroutines-and-how-do-they-actually-work-f2a734f6f991&lt;/em&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
      <category>programming</category>
      <category>performance</category>
      <category>concurrency</category>
    </item>
    <item>
      <title>Would anyone care for some Javascript curry? (Tutorial)</title>
      <author>Mike Talbot</author>
      <pubDate>Tue, 03 Aug 2021 19:07:55 +0000</pubDate>
      <link>https://dev.to/miketalbot/javascript-curry-anyone-3l34</link>
      <guid>https://dev.to/miketalbot/javascript-curry-anyone-3l34</guid>
      <description>&lt;p&gt;Functional programming and currying are topics that have some of us staring at the wall and saying something like "there is no spoon", whilst sadly shaking our heads.  Yet we know that there is a powerful tool sitting there, so we struggle on in a bid for mastery of the dark arts.&lt;/p&gt;

&lt;p&gt;I started life as a C/C++ programmer and over the years I've made money in a whole bunch of languages, but functional programming proved to be a very different path.  I've come some way down this track, so I thought I'd share my understanding and one of the utilities I've made along the way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h2&gt;

&lt;p&gt;Let's start with the basics.&lt;/p&gt;

&lt;p&gt;If you have a function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could rewrite it as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;calculate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'd call the first one like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you'd call the second one like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second implementation is a function, which creates a function, which creates a function to calculate the answer (this is moving from The Matrix into Inception huh?)&lt;/p&gt;

&lt;p&gt;We converted the original using Javascript arrow functions and basically replacing &lt;code&gt;a,&lt;/code&gt; with &lt;code&gt;a =&amp;gt;&lt;/code&gt;.  The first function returns takes the parameter &lt;code&gt;a&lt;/code&gt; and returns a function for the parameter &lt;code&gt;b&lt;/code&gt;. Thanks to closures the final function has access to all of the previous parameters and so can complete its work.  &lt;/p&gt;

&lt;p&gt;The benefit of this is code reuse.  Until the last function we are basically running a factory to create functions that have the already supplied parameters baked in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;calculateTheAnswer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;calculateTheAnswer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in this case you might be saying "oh nice, seems ok, can't see the point though".  The strength comes when you start making more complicated things by passing functions around as parameters and "composing" solutions out of multiple functions.  Lets take a look.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#currying"&gt;
  &lt;/a&gt;
  Currying
&lt;/h2&gt;

&lt;p&gt;For the sake of this article I want an example that is simple, yet not only "multiplying two numbers together".  So I've come up with one that involves multiplying and taking away ;) Seriously though, I hope the that it proves to give a practical perspective.&lt;/p&gt;

&lt;p&gt;Ok, so imagine we are building a website for a manufacturing company and we've been tasked with displaying the weights of the companies "UberStorage" containers when made in a variety of sizes and materials. &lt;/p&gt;

&lt;p&gt;Some smart bloke has provided us with access to a library function to calculate the weight of a unit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;weightOfHollowBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;edgeThickness&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;heightInM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;widthInM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;depthInM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;densityInCm3&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;heightInM&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;widthInM&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;depthInM&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;densityInCm3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heightInM&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;edgeThickness&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;widthInM&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;edgeThickness&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;depthInM&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;edgeThickness&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;densityInCm3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(See multiplying and taking away).  We don't want to mess with this as it isn't our code and might change, but we can rely on the "contract" of the parameters being passed.&lt;/p&gt;

&lt;p&gt;Our website is going to need to display lots of different output like this:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/br1yq"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So we are going to have to iterate over dimensions and materials and produce some output.&lt;/p&gt;

&lt;p&gt;We want to write the minimum code possible, so we think of functional programming and curry!&lt;/p&gt;

&lt;p&gt;Firstly we could make up a wrapper to that function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getHollowBoxWeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;edgeThickness&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heightInM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;widthInM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;depthInM&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;densityInCm3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;weightOfHollowBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;edgeThickness&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;heightInM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;widthInM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;depthInM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;densityInCm3&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But immediately we start to see some problems, we have to call the functions in the right order, and given our problem we need to think hard to see if we can make up a perfect order that maximises reuse. Should we put density first? That's a property of the material.  edgeThickness is standard for most of our products so we could put that first. Etc etc.  What about the last parameter, we probably want that to be the thing we iterate over, but we are iterating both material and dimensions. Hmmmm.&lt;/p&gt;

&lt;p&gt;You might be fine writing a few versions of the wrapper function, you might be fine throwing the towel in saying "I'll just call weightOfHollowBox" but there is another option.  Use a &lt;em&gt;curry&lt;/em&gt; maker to convert the &lt;code&gt;weightOfHollowBox&lt;/code&gt; to a curried function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simple-curry-not-too-many-ingredients"&gt;
  &lt;/a&gt;
  Simple curry, not too many ingredients
&lt;/h3&gt;

&lt;p&gt;Ok so a simple curry function would take &lt;code&gt;weightOfHollowBox&lt;/code&gt; as a parameter and return a function that can be called with a number of the arguments.  If we have completed all of them, calculate the weight, otherwise return a function that needs the remaining parameters.  Such a wrapper would look a bit like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currySimple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;provided&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// fn.length is the number of parameters before&lt;/span&gt;
    &lt;span class="c1"&gt;// the first one with a default value&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
    &lt;span class="c1"&gt;// Return a function that takes parameters&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Combine any parameters we had before with the&lt;/span&gt;
        &lt;span class="c1"&gt;// new ones&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;provided&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="c1"&gt;// If we have enough parameters, call the fn&lt;/span&gt;
        &lt;span class="c1"&gt;// otherwise return a new function that knows&lt;/span&gt;
        &lt;span class="c1"&gt;// about the already passed params&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we call this on weightOfHollowBox we end up with a function that is a little more flexible than the hand written one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getWeightOfBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currySimple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;weightOfHollowBox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="c1"&gt;// All of these combinations work&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getWeightOfBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)(.&lt;/span&gt;&lt;span class="mi"&gt;124&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getWeightOfBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)(.&lt;/span&gt;&lt;span class="mi"&gt;124&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can pass all of the parameters or any subset and it works in those cases.  This &lt;strong&gt;does not&lt;/strong&gt; solve our parameter ordering issue.  We would dearly love a version of this that allowed us to miss out interim parameters and have a function for just those.&lt;/p&gt;

&lt;p&gt;e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getWeightOfBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;weightOfHollowBox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;varyByWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getWeightOfBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MISSING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;124&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;varyByWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#jalfrezi"&gt;
  &lt;/a&gt;
  Jalfrezi
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; there follows some much more advanced code to create this new &lt;code&gt;curry&lt;/code&gt; function - you don't need to understand it if you don't want to.  You could use this implementation or one of the many others out there without needing to get the inner workings.  If you want to see how this is done read on, otherwise skip to the next section.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok lets cook up some proper curry.  First we need something that uniquely identifies a missing parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MISSING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Missing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that in our toolbox, we can go ahead and write our new curry function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;curry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;missingParameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Keeps a track of the values we haven't supplied yet&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;missing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;missingParameters&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="c1"&gt;// Keeps a track of the values we have supplied&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="c1"&gt;// Loop through the new parameters&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;scan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;parameter&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// If it is missing move on&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parameter&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;MISSING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="c1"&gt;// Update the value and the missing list&lt;/span&gt;
            &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;missing&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parameter&lt;/span&gt;
            &lt;span class="nx"&gt;missing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// Call the function when we have enough params&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;missing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Curry again? Yes please&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;missing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right, let's start with those parameters. The &lt;code&gt;fn&lt;/code&gt; is the function to be curried, the next two we use when recursing through in the case that we need to make another intermediate function rather than call &lt;code&gt;fn&lt;/code&gt;.  &lt;code&gt;missingParameters&lt;/code&gt; defaults to the numbers 0..n where &lt;code&gt;n&lt;/code&gt; is the number of parameters required by &lt;code&gt;fn&lt;/code&gt; - 1.  In other words, when we first call it, it is the indices of all of the parameters required for &lt;code&gt;fn&lt;/code&gt;. The next parameter is an empty array that we will populate and pass down should we need to.&lt;/p&gt;

&lt;p&gt;The function we return takes any number of parameters.  We take a copy of the missing indices and the existing parameters and then we iterate over the new parameters.  If the parameter value is &lt;code&gt;MISSING&lt;/code&gt; we move on to the next missing index.  When it isn't &lt;code&gt;MISSING&lt;/code&gt; we populate the correct index in the values array (which we allow to take more parameters than the function, as that's how you deal with any that might have be defaulted).  Having populated the array we remove the missing index.&lt;/p&gt;

&lt;p&gt;Once that's all done, if the missing list is empty then we call the function, passing it the values, otherwise we recurse.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: we never set the length of the array, Javascript arrays automatically set their length to the maximum value if you write to an index in them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's it, this function allows us to create a range of templates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-web-site"&gt;
  &lt;/a&gt;
  Example Web Site
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/br1yq"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now we have a way of wrapping &lt;code&gt;weightOfHollowBox&lt;/code&gt; we can start to put together the elements of our web page.&lt;/p&gt;

&lt;p&gt;Firstly lets code up the thing that shows the weight of an item and its material.  We can see that the inner item is something based on iterating over the material.  We have this definition of materials:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;materials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Aluminium&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;density&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.71&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Steel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;density&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;7.7&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oak&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;density&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.73&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we write a curried function to render the item that takes a way to calculate the weight (a function we will create from our curried &lt;code&gt;weightOfHollowBox&lt;/code&gt;) and a material:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;weightInKg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ListItem&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ListItemText&lt;/span&gt;
            &lt;span class="nx"&gt;primary&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;secondary&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;weightInKg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;density&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="nx"&gt;tons&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ListItem&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will display any material so long as we can give it a function to calculate the weight that requires the density.&lt;/p&gt;

&lt;p&gt;Let me show you a simple way this could now be used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Simple&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;weightInKg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curriedWeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;List&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;materials&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;weightInKg&lt;/span&gt;&lt;span class="p"&gt;))}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/List&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a weight calculator looking for &lt;code&gt;density&lt;/code&gt; and then we call our material function, passing that, which returns a function that needs a &lt;code&gt;material&lt;/code&gt;, this will be passed by the &lt;code&gt;materials.map()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We are going to do something fancier for the site though.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-block-for-all-materials"&gt;
  &lt;/a&gt;
  A block for all materials
&lt;/h3&gt;

&lt;p&gt;We want to output a list of materials so let's write a function for that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;materialBlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;weightCalculator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;materials&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Fragment&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;materials&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;material&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;weightCalculator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;)))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Fragment&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This curried function allows us to supply something that will write a header, then given a weight calculator, a list of materials and a dimension it will output all of the materials for that group.&lt;/p&gt;

&lt;p&gt;That's a bit trickier, let's see how we might use that in an isolated way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ShowByHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;weightCalculator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curriedWeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MISSING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;outputter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;materialBlock&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ListSubheader&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="nx"&gt;wide&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="nx"&gt;tall&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ListSubheader&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;))(&lt;/span&gt;&lt;span class="nx"&gt;weightCalculator&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;materials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;List&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;heights&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;outputter&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/List&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have a React component that knows the standard heights of our units.  It creates a weight calculator that still requires &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;density&lt;/code&gt; and then provides &lt;code&gt;materialBlock&lt;/code&gt; with a header to put over it.&lt;/p&gt;

&lt;p&gt;For the site we can get better code reuse though!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ShowBy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;weightCalculator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;List&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;materialBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;weightCalculator&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;materials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/List&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a reusable ShowBy function, which we can then use to create versions for our standard widths and heights.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;widths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heights&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ByWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;ShowBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curriedWeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MISSING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))((&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ListSubheader&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="nx"&gt;tall&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="nx"&gt;wide&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ListSubheader&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;))(&lt;/span&gt;&lt;span class="nx"&gt;widths&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ByHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;ShowBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curriedWeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MISSING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))((&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ListSubheader&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="nx"&gt;wide&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="nx"&gt;tall&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ListSubheader&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;))(&lt;/span&gt;&lt;span class="nx"&gt;heights&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#pulling-it-together"&gt;
  &lt;/a&gt;
  Pulling it together
&lt;/h3&gt;

&lt;p&gt;Our final function is used to put the parts together:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Advanced&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;mb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CardHeader&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;By Width&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CardContent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ByWidth&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/CardContent&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Card&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;mb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CardHeader&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;By Height&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CardContent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ByHeight&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/CardContent&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Card&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the whole thing:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/br1yq?view=editor"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this has been an interesting look at currying in Javascript.  The area of functional programming is very deep and we've only scratched the surface, but there exist here some techniques that are practical to use in many scenarios.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;(All code MIT licensed)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Is It Time For Kubernetes Yet?</title>
      <author>Nočnica Fee</author>
      <pubDate>Tue, 03 Aug 2021 18:58:17 +0000</pubDate>
      <link>https://dev.to/run-x/is-it-time-for-kubernetes-yet-55h7</link>
      <guid>https://dev.to/run-x/is-it-time-for-kubernetes-yet-55h7</guid>
      <description>&lt;p&gt;&lt;em&gt;Image by Khtan66, available via a &lt;a href="https://creativecommons.org/licenses/by-sa/4.0/legalcode"&gt;CC Attribution-ShareAlike 4.0 International License&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As anyone who’s ever been in a hardware store knows, it can be easy to look at a powerful tool and think “I need that.” For a developer, Kubernetes might seem like one such tool. It’s developed by Google to meet their astronomical deployment needs! It offers a high level of automation of several functions that are a hassle to maintain manually! It’s open source! However, if you’re working on a young application that does not yet have a large user base demanding constant access to complex functions, Kubernetes might be the equivalent of buying a bandsaw instead of a handsaw: a lot of cost, and some real risks, for relatively few use-cases. So: when is it worth it to add Kubernetes? And if it’s not time for Kubernetes, what should you be doing instead?&lt;/p&gt;

&lt;p&gt;First, it’s worth keeping in mind that cloud computing, containerization, and container orchestration can sometimes be treated as a bundle, when really, these are three distinct tactics, not all of which are right for all dev teams. Cloud computing (moving some of your machines to the Cloud rather than maintaining your own servers) is hardly the same as container orchestration (automating the deployment, maintenance, scaling, and networking of multiple containers, which might not even be in the Cloud.) If your team isn’t doing any of those yet, but you want to start moving in that direction, it makes sense to start simple, by just asking: could we save time and heartache in the long-term if we moved some of our machines to the Cloud? Or do we want to start experimenting with containerization?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.container-solutions.com/when-is-the-wrong-time-to-use-kubernetes"&gt;Pini Reznik&lt;/a&gt; has a fantastic step-by-step guide to everything that you need to do before you consider using Kubernetes to manage your application. He notes that at each stage of this process, you’ll encounter new costs and culture changes, and says that it doesn’t necessarily make sense to add multiple layers of complexity to your operation at a time. Pushing your team to learn several new tools at once is likely to slow actual development to a halt. Evolution is more stable than revolution in most cases. &lt;/p&gt;

&lt;p&gt;It might seem self-evident, but it also doesn’t make sense to think about container orchestration if you’re not yet doing containerization. If you haven’t yet started using something like Docker, it’s probably not yet time for Kubernetes. It can be tempting to skip ahead to the greatest level of complexity available, but there are real downsides. I’ve written at length &lt;a href="https://increment.com/containers/primer-on-containerization/"&gt;here&lt;/a&gt; about the cost-benefit analysis of container orchestration for smaller projects.&lt;/p&gt;

&lt;p&gt;Finally, when deciding to use any complex tool, you need to think about who’s going to be operating it. Kubernetes might be able to automate a number of sophisticated processes, but &lt;a href="https://thenewstack.io/do-i-really-need-kubernetes/"&gt;Ron Powell&lt;/a&gt; argues that it’s not worth it to have Kubernetes if you’re not going to have people specifically tasked with configuring and maintaining it. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here'd I'd make a pitch for &lt;a href="https://github.com/run-x/opta"&gt;Opta&lt;/a&gt;, RunX's open source tool to &lt;a href="https://github.com/run-x/opta"&gt;make this exact task quite a bit easier&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the problems that Kubernetes would solve are currently being handled competently by one human, and you don’t anticipate that changing any time soon, it’s probably not worth it to pivot to a brand-new tool. He also makes it clear that there are several tools that handle specific aspects of what Kubernetes can do, such as configuration management or cloud services that allow for autoscaling, and that these may be better fits for a small team with a monolithic application.&lt;/p&gt;

&lt;p&gt;If you’re still not sure, it’s worth looking at the &lt;a href="https://kubernetes.io/case-studies/"&gt;case studies&lt;/a&gt; on the Kubernetes website. Do any of these sound like issues that your product is currently facing? If you’re thinking “oh jeez, we do not have that level of complexity in our ops right now”, it’s probably too soon. You’ll know when it’s time to add Kubernetes to your toolkit because you’ll be at a stage of development where containers are either getting out of hand or are about to be. Don’t be seduced by the bandsaw if you’re still in the handsaw stage--and certainly consider whether it’s likely to cut you off at the knees.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>docker</category>
      <category>cloud</category>
    </item>
    <item>
      <title>How I Think About React (A Mental Model For Beginners) | Part 2: Component Hierarchy</title>
      <author>Michael Mangialardi</author>
      <pubDate>Tue, 03 Aug 2021 18:50:27 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/how-i-think-about-react-a-mental-model-for-beginners-part-2-component-hierarchy-1g4p</link>
      <guid>https://dev.to/michaelmangial1/how-i-think-about-react-a-mental-model-for-beginners-part-2-component-hierarchy-1g4p</guid>
      <description>&lt;p&gt;In a &lt;a href="https://dev.to/michaelmangial1/how-i-think-about-react-a-mental-model-for-beginners-part-1-1pji"&gt;previous article&lt;/a&gt;, I summarized that React, as a framework, offers a shorthand way to 1) add visually-sophisticated sections composed of elements to a web "document," 2) populate those elements with data, and 3) handle a user's interactions and inputs.&lt;/p&gt;

&lt;p&gt;Now, it's time to dive deeper into the core concepts to accomplish what React offers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#elements"&gt;
  &lt;/a&gt;
  Elements
&lt;/h2&gt;

&lt;p&gt;Every web application consists of different &lt;em&gt;pages&lt;/em&gt; that start off as a blank document/canvas.&lt;/p&gt;

&lt;p&gt;Every subpath (i.e. &lt;a href="http://example.com/i/am/a/subpath/for/example-com"&gt;http://example.com/i/am/a/subpath/for/example-com&lt;/a&gt;) offers a blank canvas (or "document") where we can add various sections composed of elements to build our application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#element-hierarchy"&gt;
  &lt;/a&gt;
  Element Hierarchy
&lt;/h3&gt;

&lt;p&gt;So, what are the various sections that make up a "page"?&lt;/p&gt;

&lt;p&gt;Well, that varies based on 1) what your application does and 2) what page of the application you are viewing.&lt;/p&gt;

&lt;p&gt;However, let's go through an example.&lt;/p&gt;

&lt;p&gt;Suppose we wanted a landing page for our product:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BxutoDbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A75PjYgE67oSf2g9ADFhyKg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BxutoDbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A75PjYgE67oSf2g9ADFhyKg.png" alt="airtable"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So far, I've been speaking of a web page as being composed of various sections which are composed of elements.&lt;/p&gt;

&lt;p&gt;I spoke this way to keep things simple, however, to really grasp the concepts we'll need a more comprehensive mental model.&lt;/p&gt;

&lt;p&gt;Technically, an element is anything that is rendered/displayed/drawn on a web page.&lt;/p&gt;

&lt;p&gt;However, not all elements have the same function.&lt;/p&gt;

&lt;p&gt;Some elements are "containers" used to contain/organize other elements. Some elements are used for displaying text or media (pictures and videos); other elements are used for encouraging a user's interactions (forms and buttons).&lt;/p&gt;

&lt;p&gt;If you're curious, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element"&gt;here's a full list&lt;/a&gt; of elements that can be rendered on a web page, grouped by their functions.&lt;/p&gt;

&lt;p&gt;In a word, there are some elements that "contain" other elements, forming a section. And, there may be a section that "contains" another section. Hence, a web page is an organized hierarchy of elements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-city-model"&gt;
  &lt;/a&gt;
  The City Model
&lt;/h3&gt;

&lt;p&gt;My mental model for thinking about this hierarchy of elements is what I call the "City Model."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FsWFGh3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1473951574080-01fe45ec8643%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1379%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FsWFGh3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1473951574080-01fe45ec8643%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1379%26q%3D80" alt="city"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A city also has a hierarchical organization of elements.&lt;/p&gt;

&lt;p&gt;A city is composed of neighborhoods.&lt;/p&gt;

&lt;p&gt;Neighborhoods are composed of blocks.&lt;/p&gt;

&lt;p&gt;Blocks are composed of houses.&lt;/p&gt;

&lt;p&gt;So, a city is composed of neighborhoods, blocks, and houses.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#houses"&gt;
  &lt;/a&gt;
  Houses
&lt;/h4&gt;

&lt;p&gt;Starting at the bottom, &lt;em&gt;houses&lt;/em&gt; are the building blocks of cities.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CUsvqjn_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1585773690161-7b1cd0accfcf%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1350%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CUsvqjn_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1585773690161-7b1cd0accfcf%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1350%26q%3D80" alt="house"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like science, you can think of them as the atoms. If you like Legos, you can think of it has the Lego blocks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SYRhyt7l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1587654780291-39c9404d746b%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1350%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SYRhyt7l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1587654780291-39c9404d746b%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1350%26q%3D80" alt="legos"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As far as a city is concerned, a house is the lowest/essential "element" of the hierarchy. It cannot be broken down any further.&lt;/p&gt;

&lt;p&gt;Every web page is composed of "houses," that is elements that cannot be broken down any further. Elements that do not contain other elements.&lt;/p&gt;

&lt;p&gt;Looking again at the landing page example, the title, paragraph, sign up button, etc. are all individual "houses" that make up the page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BxutoDbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A75PjYgE67oSf2g9ADFhyKg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BxutoDbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A75PjYgE67oSf2g9ADFhyKg.png" alt="airtable"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#blocks"&gt;
  &lt;/a&gt;
  Blocks
&lt;/h4&gt;

&lt;p&gt;Moving a step up in the hierarchy are &lt;em&gt;blocks&lt;/em&gt;. Blocks are a collection of houses.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zgMpvjHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1517736996303-4eec4a66bb17%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D634%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zgMpvjHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1517736996303-4eec4a66bb17%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D634%26q%3D80" alt="blocks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On a web page, blocks are a collections of houses that work together to form a section with a specific functionality/purpose.&lt;/p&gt;

&lt;p&gt;For example, the houses (title, paragraph, input form, and button) on the landing page example are working together to form an sign-up form, attracting the user to sign up:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xX93LuBh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/561/1%2A_ebNdqkwDi5iFsXnUvjcNA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xX93LuBh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/561/1%2A_ebNdqkwDi5iFsXnUvjcNA.png" alt="sign-up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although the sign-up form constitutes an organized section, it can be broken down further (so it is not a house); it cannot stand on its own to constitute an entire web page (so it is not a city).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#neighborhoods"&gt;
  &lt;/a&gt;
  Neighborhoods
&lt;/h4&gt;

&lt;p&gt;The sign-up "block" constituted its own "section" with its own function, however, we can tell that is part of a larger "section":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ujgnjV5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ADOxEX_XlcteSlTbqSKDKag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ujgnjV5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ADOxEX_XlcteSlTbqSKDKag.png" alt="neighborhood"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adjacent to the sign-up form, there is a video. We know this video is associated with the sign-up form because 1) it is right next to it on the same "row" and 2) it works with the sign-up form to encourage the user to sign up.&lt;/p&gt;

&lt;p&gt;For these reasons, the combination of the video and the sign-up form constitutes a &lt;em&gt;neighborhood&lt;/em&gt; as it is a collection of at blocks (the video and the pattern graphic around it; the sign-up form).&lt;/p&gt;

&lt;p&gt;A neighborhood, therefore, is a collection of at least one block and another house/block.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kz2Sf6vy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1503917988258-f87a78e3c995%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D634%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kz2Sf6vy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1503917988258-f87a78e3c995%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D634%26q%3D80" alt="neighborhood"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visually, it forms the highest level of organization without constituting the city (the top/first/highest "container" element of a page).&lt;/p&gt;

&lt;p&gt;Conceptually, it organizes blocks and houses by their shared function/purpose.&lt;/p&gt;

&lt;p&gt;It is not a house because it can be broken down further; it is not a block because it is more than a block, as it contains at least one block and another house/block; it is not a city because it doesn't constitute a page on its own, rather, a "top-level" section of a page.&lt;/p&gt;

&lt;p&gt;In our landing page example, we have at least two neighborhoods:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BxutoDbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A75PjYgE67oSf2g9ADFhyKg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BxutoDbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A75PjYgE67oSf2g9ADFhyKg.png" alt="airtable"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have the video and sign-up form which we can group together as the "sign-up neighborhood." But, we also have other sections composed of blocks, such as the footer:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WaaQbAnp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ADjeL7uInMOsns2mZyst7jg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WaaQbAnp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ADjeL7uInMOsns2mZyst7jg.png" alt="footer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cities"&gt;
  &lt;/a&gt;
  Cities
&lt;/h4&gt;

&lt;p&gt;Cities, therefore, are a collection of neighborhoods, and hence, blocks and houses.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tWuNHfX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1477959858617-67f85cf4f1df%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1413%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tWuNHfX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1477959858617-67f85cf4f1df%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1413%26q%3D80" alt="city"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In terms of elements, a city is the first/top/highest "container" element that "contains" all the other elements, which can be organized into neighborhoods, blocks, and houses.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h2&gt;

&lt;p&gt;Now that we've developed a mental model around how elements are organized to build a web page, we need to talk about how React, as a framework, aids us in building web pages. Specifically, how does React help us to render/display/draw elements, as well organizing them?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-component-is-a-function"&gt;
  &lt;/a&gt;
  A Component is a Function
&lt;/h3&gt;

&lt;p&gt;The basic way to think of a React component is a &lt;em&gt;function&lt;/em&gt; that renders/displays/draws (the official React lingo is to say "render") an element.&lt;/p&gt;

&lt;p&gt;A component is one conceptual layer "above" an element. &lt;/p&gt;

&lt;p&gt;Since elements on a web page have a hierarchical organization (which we can label as cities, neighborhoods, blocks, or houses according to our mental model), components also can be organized in a hierarchy using our City Model.&lt;/p&gt;

&lt;p&gt;Meaning, you could have a component for the city, a component for the neighborhoods, a component for the blocks, and a component for the houses since a component, again, is a function that renders an element into a web page.&lt;/p&gt;

&lt;p&gt;Given that components are functions that render elements, they are used as an alternative to typing out elements in an HTML file.&lt;/p&gt;

&lt;p&gt;Basically, React has you define a "root" in an HTML file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you write functions (components) that will be fired by React when an application runs in the browser, "injecting" the elements rendered by each component into the web page.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ReactDOM&lt;/code&gt; is used in your "city" component to do the initial connection between your React components and the web page.&lt;/p&gt;

&lt;p&gt;Now, this all begs a question. What is the advantage of using React's functions (components) to render elements instead of just typing them out in HTML?&lt;/p&gt;

&lt;p&gt;Plain HTML with typed elements is purely static. Functions that render elements is dynamic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetching-data"&gt;
  &lt;/a&gt;
  Fetching Data
&lt;/h3&gt;

&lt;p&gt;Meaning, functions allow for you to render elements as part of a workflow of &lt;em&gt;fetching/collecting&lt;/em&gt; data from an external source and rendering different things based on that data.&lt;/p&gt;

&lt;p&gt;So, if you were making a clone of Twitter and had broken down the home page into organized components, some of those components don't need data (tweets, profile information, etc); some of those components depend on that data (i.e. the tweet feed).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MPSSqPCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1566241477600-ac026ad43874%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1330%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MPSSqPCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1566241477600-ac026ad43874%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1330%26q%3D80" alt="feed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By using a function, a React component can fetch the data, render a loading element as it waits (i.e. a spinner), and then render the element with the populated data (i.e. the tweet feed).&lt;/p&gt;

&lt;p&gt;Without getting into the weeds, we can broadly say that a React component can fetch data and dynamically render different things based on that data.&lt;/p&gt;

&lt;p&gt;You can hide/show elements based on data, show media and text dynamically, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keeping-track-of-user-interaction"&gt;
  &lt;/a&gt;
  Keeping Track of User Interaction
&lt;/h3&gt;

&lt;p&gt;React can not only fetch data and render different things based on that, but it can also keep track of what the user does. Based on what the user does, it can render different things, fetch new data, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#passing-down-data"&gt;
  &lt;/a&gt;
  Passing Down Data
&lt;/h3&gt;

&lt;p&gt;React's components in addition to keeping track of user's interaction and fetching data from somewhere can &lt;em&gt;receive&lt;/em&gt; data from other component's higher up in the hierarchy.&lt;/p&gt;

&lt;p&gt;A house component, for example, can receive data from the block component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#refreshing-based-on-data"&gt;
  &lt;/a&gt;
  Refreshing Based On Data
&lt;/h3&gt;

&lt;p&gt;When a React component receives new data, whether from an external source, a user's interaction, or from a higher/"parent" component in the hierarchy, it will "refresh" or "re-render" the elements.&lt;/p&gt;

&lt;p&gt;In conclusion, React components can dynamically render elements based on a flow of data.&lt;/p&gt;

&lt;p&gt;In the next article, we'll dive more into the mental model for the specifics on how React components render data.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 03 Aug 2021 18:49:25 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-4571</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-4571</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interview-analysis"&gt;
  &lt;/a&gt;
  Interview analysis
&lt;/h2&gt;

&lt;p&gt;It's always inspiring when a developer is able to look back on the interviews they've done, scan for lessonns learned, and share them with the world. That's exactly what &lt;a class="mentioned-user" href="https://dev.to/manvityagi9"&gt;@manvityagi9&lt;/a&gt;
 has done here. You have been &lt;em&gt;busy&lt;/em&gt; Manvi! Great work &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/manvityagi9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ewveaW80--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uLdJxVB---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/188644/4703152c-867c-4751-8929-d3baff665caa.PNG" alt="manvityagi9"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/manvityagi9/my-placements-journey-4m0g" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My Placements Journey&lt;/h2&gt;
      &lt;h3&gt;Manvi Tyagi ・ Jul 27 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#interview&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#softwaredeveloper&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#faang&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-sleeper-hit-of-javascript"&gt;
  &lt;/a&gt;
  The sleeper hit of JavaScript
&lt;/h2&gt;

&lt;p&gt;This post is a must-read! A humorous and engaging look at &lt;code&gt;with&lt;/code&gt; in JavaScript by &lt;a class="mentioned-user" href="https://dev.to/mistval"&gt;@mistval&lt;/a&gt;
 — who aims to explain why it is "relegated to the dustbin of history". &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mistval" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SMGlCR9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--QfmzS_gY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/413348/81e25d08-d557-4f4f-bc83-d704b110b128.jpeg" alt="mistval"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mistval/javascript-s-forgotten-keyword-with-48id" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;JavaScript's Forgotten Keyword (with)&lt;/h2&gt;
      &lt;h3&gt;Randall ・ Jul 29 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#who-can-contribute-you"&gt;
  &lt;/a&gt;
  Who can contribute? You!
&lt;/h2&gt;

&lt;p&gt;If you've been wondering if you're the right person to contribute to open source, &lt;a class="mentioned-user" href="https://dev.to/roligautam"&gt;@roligautam&lt;/a&gt;
 can give you a hint ;) &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/roligautam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VqJFfeyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Q_4h0tf1--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/673278/676eb15a-e234-45b6-94a6-66ad886479c8.jpeg" alt="roligautam"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/roligautam/how-to-make-your-first-contribution-to-open-source-a-beginner-s-guide-2cni" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to make your first contribution to Open Source? A Beginner's Guide
&lt;/h2&gt;
      &lt;h3&gt;Roli Gautam ・ Jul 28 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#git&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#firstpost&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#ruby-realness"&gt;
  &lt;/a&gt;
  Ruby realness
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/st0012"&gt;@st0012&lt;/a&gt;
 wrote up this intro to &lt;code&gt;debug&lt;/code&gt;: Ruby's new debugger to be included in Ruby 3.1. If you're as Ruby-obsessed as all of us are here at DEV, this is a great peek inside an exciting new feature. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/st0012" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ejdm9Kv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--aFWaIfE7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/238727/9cabf22f-2f6a-44d5-b823-6c8319c288d4.jpg" alt="st0012"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/st0012/a-sneak-peek-of-ruby-s-new-debugger-5caa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A Sneak Peek of Ruby's New Debugger!&lt;/h2&gt;
      &lt;h3&gt;Stan Lo ・ Jul 29 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#ruby&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#debug&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#rails&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#authorization-and-aws-amplifys-datastore"&gt;
  &lt;/a&gt;
  Authorization and AWS Amplify's DataStore
&lt;/h2&gt;

&lt;p&gt;... with &lt;a class="mentioned-user" href="https://dev.to/aspittel"&gt;@aspittel&lt;/a&gt;
! Alliteration is the &lt;em&gt;least&lt;/em&gt; of the value you'll find in this React API tutorial.  &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aspittel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lsknEIX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--stJcpewb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/38627/77a2a5e7-603e-41b4-afcc-f7aff468ae2f.jpg" alt="aspittel"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aspittel/build-a-react-app-with-authorization-and-authentication-1mha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build a React App with Authorization and Authentication&lt;/h2&gt;
      &lt;h3&gt;Ali Spittel ・ Aug 2 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#a-list-with-lasting-power"&gt;
  &lt;/a&gt;
  A List with Lasting Power
&lt;/h2&gt;

&lt;p&gt;Great work on your digital accessibility list, &lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
. This reference is so thorough and filled with accessibility knowledge/pointers that it was a natural fit this week! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/101-digital-accessibility-tips-and-tricks-4728" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;101 Digital Accessibility tips and tricks&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ Jul 30 ・ 68 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#two-birds-one-stone"&gt;
  &lt;/a&gt;
  Two birds, one stone
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/dhaiwat10"&gt;@dhaiwat10&lt;/a&gt;
 explains how writing and software developing are two skills and habits that feed one another — with the right mindset. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dhaiwat10" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xeVnQevl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--V60gjbl6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/575046/0d9e4711-677a-4db5-a35d-5c377a8430dd.jpeg" alt="dhaiwat10"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dhaiwat10/become-a-better-writer-as-a-developer-46oc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Become a better writer as a developer&lt;/h2&gt;
      &lt;h3&gt;Dhaiwat Pandya ・ Jul 27 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>TIL: Wildcard SSL certificate does not support nested subdomains</title>
      <author>Nitish Jadia</author>
      <pubDate>Tue, 03 Aug 2021 18:48:52 +0000</pubDate>
      <link>https://dev.to/jadia/til-wildcard-ssl-certificate-does-not-support-nested-subdomains-47bf</link>
      <guid>https://dev.to/jadia/til-wildcard-ssl-certificate-does-not-support-nested-subdomains-47bf</guid>
      <description>&lt;p&gt;A wildcard SSL certificate for &lt;code&gt;*.example.net&lt;/code&gt; will match sub.example.net but not &lt;code&gt;sub.sub.example.net&lt;/code&gt;. You need to generate a separate certificate for &lt;code&gt;*.sub.example.net&lt;/code&gt;.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/2115611/wildcard-ssl-on-sub-subdomain"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Free Cloudflare account does not support creating a wildcard SSL certificate for &lt;code&gt;sub.sub.example.net&lt;/code&gt;, &lt;a href="https://community.cloudflare.com/t/argo-tunnel-nested-subdomain/273061/2"&gt;you need $10/m subscription for Advanced Certificate Manager from Cloudflare&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>todayilearned</category>
      <category>web</category>
    </item>
    <item>
      <title>How To Brainstorm Coding Project Ideas</title>
      <author>SalarC123</author>
      <pubDate>Tue, 03 Aug 2021 18:20:30 +0000</pubDate>
      <link>https://dev.to/salarc123/how-to-brainstorm-coding-project-ideas-1pfi</link>
      <guid>https://dev.to/salarc123/how-to-brainstorm-coding-project-ideas-1pfi</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction 🌅
&lt;/h1&gt;

&lt;p&gt;I think we can all agree that making projects is extremely valuable for aspiring developers without formal work experience. Personal projects can directly demonstrate the skills you claim to have and can boost your resume. However, making your resume stand out from others is another challenge. No one wants to make the same old todo list or weather tracker anymore, so we need new ways to find unique and impressive project ideas.&lt;/p&gt;

&lt;p&gt;But how do you brainstorm ideas? How do you think in a way that is conducive to producing good ideas? And where can you get inspiration? Well, throughout this article, I will try to answer these questions.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#journaling"&gt;
  &lt;/a&gt;
  Journaling ✍️
&lt;/h1&gt;

&lt;p&gt;I think that the first thing you should do is try to find a problem in your own life which needs solving or an activity throughout your day which you can make more efficient. You probably can't think of any right now, so I would advise journaling about everything you do each day and analyzing each activity to see if you can make software that can improve that. &lt;/p&gt;

&lt;p&gt;For example, if you have problems with time management, you could make a program that takes in what events you want and need to do in a day and spits out an organized schedule. &lt;/p&gt;

&lt;p&gt;However, if you journal for a few weeks and can't find any good ideas, you can start to analyze the problems of everybody else through online communities...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZCHSdtdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjfmpevwydqcrru41skc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZCHSdtdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjfmpevwydqcrru41skc.jpg" alt="journaling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#browse-online-communities"&gt;
  &lt;/a&gt;
  Browse Online Communities 🛗
&lt;/h1&gt;

&lt;p&gt;Communities, such as Reddit or Twitter, have people that are frequently sharing personal problems. And since Reddit has subreddits for just about anything, you can look for problems among people with similar interests and try to solve those. &lt;/p&gt;

&lt;p&gt;This strategy actually helped me come up with &lt;a href="https://classius.netlify.app"&gt;Classius&lt;/a&gt; which is an online course reviewing website that lets users find the best online courses for whatever subject they want to learn. This idea came to me after constantly seeing people on different programming subreddits asking questions like "what course should I take to learn X?" or "which course is better: X or Y?".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fYFhtOLV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tqoyjt6913xpe9czcnn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fYFhtOLV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3tqoyjt6913xpe9czcnn.png" alt="Social Network"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#api-lists"&gt;
  &lt;/a&gt;
  API Lists 📋
&lt;/h1&gt;

&lt;p&gt;Another project brainstorming strategy I love to use is taking advantage of &lt;a href="https://github.com/public-apis/public-apis"&gt;public API lists&lt;/a&gt; because they give tons of datasets that you can choose from for your project. With the amount of APIs on some of these lists, you're bound to find at least one topic that interests you and that you can base a project around. &lt;/p&gt;

&lt;p&gt;For example, many people used COVID-19 data from the APIs on this list to make dashboards for COVID-19 spread and vaccine distribution. There are also categories for music, health, jobs, cryptocurrencies, and more.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/public-apis"&gt;
        public-apis
      &lt;/a&gt; / &lt;a href="https://github.com/public-apis/public-apis"&gt;
        public-apis
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A collective list of free APIs
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#visualization"&gt;
  &lt;/a&gt;
  Visualization 👀
&lt;/h1&gt;

&lt;p&gt;Any type of visualization project is always a good idea because they are easy to show off and always look impressive, especially if you make an algorithm visualizer. There are already a lot of algorithm visualizers out there, but you can make a visualizer which compares different algorithms for solving a similar problem and see which is the fastest. &lt;/p&gt;

&lt;p&gt;For example, you can make a shortest-path visualizer which compares Djikstra's algorithm with Floyd-Warshall and Bellman-Ford. This will add extra functionality to your visualizer and can make it stand out&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xBiMN41c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxq3ogics4rrqf2b87ai.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xBiMN41c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxq3ogics4rrqf2b87ai.png" alt="Pathfinding Visualizer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#resumes"&gt;
  &lt;/a&gt;
  Resumes 📝
&lt;/h1&gt;

&lt;p&gt;Everyone wants to distinguish themselves on their resumes, so you should look at resumes from computer science students or graduates to find unique projects. I'm not saying you should copy these projects, but instead you should read their descriptions and try to make the same project yourself, preferably with improvements that add upon the functionality of the original project. A good place to find some of these resumes is &lt;a href="https://www.reddit.com/r/csMajors/"&gt;r/csmajors&lt;/a&gt; on Reddit which has a periodic &lt;a href="https://www.reddit.com/r/csMajors/comments/ongdk8/resume_roast_july_2021/"&gt;resume roast&lt;/a&gt; you can look through for inspiration. I found that this strategy provides some of the best project ideas very quickly (as compared to journaling). &lt;/p&gt;

&lt;p&gt;Most of the ideas you find will be unique and can really help make your own resume stand out as well. For example, I've seen a project which utilizes satellite data to locate pollution in local communities, a fraudulent job posting detector, and a machine learning model which analyzes a politician's speeches to determine their political party to name a few.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VntL5BNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umpibhwos0nel49294qw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VntL5BNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umpibhwos0nel49294qw.png" alt="Resume Graphic"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion 👋
&lt;/h1&gt;

&lt;p&gt;Thanks for reading! Please share any other strategies that you come up with in the comments and I'll try to add it to my list.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>beginners</category>
      <category>resume</category>
    </item>
    <item>
      <title>Web Performance Optimization- II</title>
      <author>Bipul Sharma</author>
      <pubDate>Tue, 03 Aug 2021 18:18:13 +0000</pubDate>
      <link>https://dev.to/bipul/web-performance-optimization-ii-2799</link>
      <guid>https://dev.to/bipul/web-performance-optimization-ii-2799</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/bipul/web-performance-optimization-i-5d39"&gt;Part-I&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Glossary&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shallow depth of feild- very small zones of focus.&lt;/li&gt;
&lt;li&gt;Lossy and Lossless images- lossy has loss in quality and file size on compression while lossless has no loss in quality and results in bigger file size on compression. &lt;/li&gt;
&lt;li&gt;transparency/opacity-  images that is clear and can take the effect of any images behind it&lt;/li&gt;
&lt;li&gt;Render blocking- JS stopping the DOM rendering.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#image-optimization"&gt;
  &lt;/a&gt;
  Image Optimization
&lt;/h2&gt;

&lt;p&gt;Images are the leading cause of the slow web. We have two conflicting needs here: we want to post high quality images online, but also want our websites and apps to be performant, and images are the main reason they are not. So how do we solve this conundrum? The answer is with a multi-pronged approach, ranging from &lt;strong&gt;compression&lt;/strong&gt; to careful &lt;strong&gt;selection of image formats&lt;/strong&gt;, to how we &lt;strong&gt;mark up&lt;/strong&gt; and &lt;strong&gt;load&lt;/strong&gt; images in our applications.&lt;/p&gt;

&lt;p&gt;Image performance is all about how much data is contained within an image and how easy it is to compress that data. The more complex the image, the larger the data set necessary to display it and the more difficult it is to compress. &lt;strong&gt;Shallow depth of field means better performance&lt;/strong&gt;. For photography including products, headshots, documentary, and others, a shallower depth of field is preferred. &lt;/p&gt;

&lt;p&gt;If you want to squeeze as much performance as possible out of your images, &lt;strong&gt;reducing the size of each image by 87% percent, and then upscaling it by 115%&lt;/strong&gt;, will actually impact the performance of the image as well. It turns out downscaling a photo by 87% percent, Photoshop will take away pixels and simplify the image to scale it down and reduce the complexity of the image and by upscaling it by 115% percent it preserves image quality well enough that humans can't tell the difference. So we get a image of same size but has significantly less complexity.&lt;/p&gt;

&lt;p&gt;The image format or file type you choose for your images will have a direct impact on performance. On the web we generally use one of five formats JPEG, PNG, GIF, SVG, and webP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JPG/JPEG&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Meant for Photos&lt;/li&gt;
&lt;li&gt;Lossy image with adjustable compression&lt;/li&gt;
&lt;li&gt;High compression means large artifacts(distortion)&lt;/li&gt;
&lt;li&gt;Use for Photos when WebP is not an Option&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;PNG&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Meant for Graphics&lt;/li&gt;
&lt;li&gt;Lossless image format&lt;/li&gt;
&lt;li&gt;Optional transparent alpha layer&lt;/li&gt;
&lt;li&gt;Use for computer generated graphics and transparency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;GIF&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Meant for simple lofi gaphics&lt;/li&gt;
&lt;li&gt;Lossy image format&lt;/li&gt;
&lt;li&gt;256 colors&lt;/li&gt;
&lt;li&gt;Can be animated (but dont use them)&lt;/li&gt;
&lt;li&gt;SVG/Video is always a better option&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;SVG&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Meant for advance scalable graphics&lt;/li&gt;
&lt;li&gt;Written in Markup, can be included in HTML, CSS&lt;/li&gt;
&lt;li&gt;Very small when optimized&lt;/li&gt;
&lt;li&gt;Use for vector-based computer generated graphics and icons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;webP&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Meant for web-based photos&lt;/li&gt;
&lt;li&gt;Upto 34% smaller than JPGs&lt;/li&gt;
&lt;li&gt;Not supported in older browsers(fallback required)&lt;/li&gt;
&lt;li&gt;Used for photos and complex detail images (with fallback)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How to choose what to use?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For photos, use webP (with JPG fallback)&lt;/li&gt;
&lt;li&gt;For too complex computer graphics use PNG or JPG (whichever is smaller)&lt;/li&gt;
&lt;li&gt;For graphics with transparency use PNG or webP&lt;/li&gt;
&lt;li&gt;For scalable computer graphics, icons and graphs use SVGs&lt;/li&gt;
&lt;li&gt;Aviod animated GIFs at all cost, use videos instead&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Mannual Optimizations&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Decide on the maximum visible size the image will have in the layout. No image should ever be displayed wider than a full HD monitor, 1920 pixels. Make sure you also restrict the display width of that image to 1920 pixels, and then center align it. Once you've settled on a width for an image, scale your image to fit that size.&lt;/li&gt;
&lt;li&gt;Experiment with compression in webP, JPG &lt;/li&gt;
&lt;li&gt;Simplify SVGs by removing unnecessary points and lines&lt;/li&gt;
&lt;li&gt;Compare file sizes for JPG, webP and PNG for computer graphics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Automated Optimization&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/imagemin"&gt;Imagemin&lt;/a&gt; is a good choice. You can use it to build a custom optimization function in Node.js. Or add automated image optimization into your preferred build process. Imagemin CLI provides lossless compression for JPEG, PNGs, and GIFs.&lt;/li&gt;
&lt;li&gt;You can add dedicated lossy compression for each of them using plug-ins: &lt;a href="https://www.npmjs.com/package/imagemin-mozjpeg"&gt;Imagemin-mozjpeg&lt;/a&gt; for JPEGs. &lt;a href="https://www.npmjs.com/package/imagemin-pngquant"&gt;Imagemin-pngquant&lt;/a&gt; for PNGs and &lt;a href="https://www.npmjs.com/package/imagemin-webp"&gt;Imagemin-webp&lt;/a&gt; for webPs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://squoosh.app/"&gt;Squoosh&lt;/a&gt; uses various compression algorithms to optimize images. And it has an &lt;a href="https://www.npmjs.com/package/@squoosh/cli"&gt;experimental CLI&lt;/a&gt; you can use to automate that process.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/sharp"&gt;Sharp&lt;/a&gt; is also available for use.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even a fully optimized image can slow down the performance of your site if it's delivered to the wrong browser at the wrong time. This is the problem &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images"&gt;Responsive Images Markup&lt;/a&gt; is meant to solve. &lt;/p&gt;

&lt;p&gt;We have responsive images attributes: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-srcset"&gt;srcset&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-sizes"&gt;sizes&lt;/a&gt;.&lt;br&gt;
Source sets allows you to provide a list of image sources for the browser to choose from and sizes defines a set of media conditions (e.g. screen widths) and indicates what image size would be best to choose, when certain media conditions are true. W indicates total pixel width of each of these images.&lt;br&gt;
For example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dnknRYpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a5bo4jq42z2wu9d4vlm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dnknRYpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a5bo4jq42z2wu9d4vlm.png" alt="Screenshot (200)"&gt;&lt;/a&gt;&lt;br&gt;
If the viewport of the browser is 800 pixels wide. The browser will pick the 1200 pixel wide image because it is the closest size upwards. If you then choose to scale up the viewport by just scaling up the browser window. The browser will automatically pull down larger versions of the image to fill in the space if it's necessary. But the important thing now is, by carefully planning your image sizes you can now deliver appropriately sized image files to all browsers and all devices. &lt;/p&gt;

&lt;p&gt;But, for most of your images, the actual displayed width of the image is determined using CSS and media queries. And you rarely display all your images as full width in the browser. To address this, we have the sizes attribute. Sizes holds a list of media queries and corresponding width to save.&lt;/p&gt;

&lt;p&gt;For this image, if the viewport is 1200 pixels or wider, the actual width this image will be displayed at will always be 1200 pixels. The reason why I'm still providing the 1920 pixel image here is to provide a higher resolution image to higher resolution displays. The 100 VW at the end of the size of the attribute says, for all other conditions, meaning screen widths under 1200 pixels, the image is always full width because this is a responsive layout.&lt;/p&gt;

&lt;p&gt;This is especially important when you have a design where an image has a max size smaller than the viewport width. Which is almost every single image on the web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lazy Loading Images&lt;/strong&gt;&lt;br&gt;
Loading images, videos, and iframes the user never scrolls to has always been a major performance issue on the web. We're simply wasting data that we shouldn't be wasting. To deal with this issue, developers started adding lazy loading JavaScript libraries that would wait for the user to scroll close to an element before the image was loaded by the browser so that instead of loading all the images on a page, only the images the user would actually get to see inside the viewport were loaded by the browser.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pbtp88PR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0yahgqo4wwo0u3uj84rz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pbtp88PR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0yahgqo4wwo0u3uj84rz.png" alt="Screenshot (204)"&gt;&lt;/a&gt; &lt;br&gt;
Native lazy loading is activated using the loading attribute on the element in question. Lazy, meaning the asset is loaded only when it's close to the viewport, and eager, meaning the asset is loaded immediately, even if it's nowhere near the viewport. There's also a fallback here called auto, but it's not yet in the specification.  Now, this loading attribute is also non-destructive, meaning older browsers who do not understand this attribute will simply ignore it and load all the assets as it would normally do. If you want lazy loading support in older browsers as well, you can use a JavaScript solution like &lt;a href="https://www.npmjs.com/package/lazysizes"&gt;lazysizes&lt;/a&gt;, which has an extension plugin called native loading, which serves up the JavaScript solution only to browsers that do not support the loading attribute and the new built in lazy loading feature.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#javascript-optimization"&gt;
  &lt;/a&gt;
  JavaScript Optimization
&lt;/h2&gt;

&lt;p&gt;The code we write is optimized for humans, but if we want the code to be as fast as possible and to be performant, it needs to be rewritten for size and effectiveness, and that makes it unreadable for us humans. We now have tools to do this job for us in the form of code minimizers, packagers, bundlers, and more. At minimum, you'll need a development track where the human readable code is stored and a production track where the highly optimized and compressed machine-readable code is stored.&lt;/p&gt;

&lt;p&gt;How and when we compress, bundle, load, modularize, and execute JavaScript is becoming more and more important to improving performance. The same can be said for CSS. Modular and inline CSS, progressive loading, and other performance techniques are now essential to ensure the style of a site or application doesn't slow down its delivery. &lt;/p&gt;

&lt;p&gt;The modern web platform supports JavaScript modules, separate JavaScript files that export and import objects functions, and other primitives from each other so bundling all JavaScript into one big file, makes no sense on the modern web.&lt;br&gt;
So from a performance perspective heres what should happpen. On initial, load any critical JavaScript necessary to get the app framework up and running and displaying something above the fold should be loaded. Once that's done and the user has something to look at, any necessary JavaScript modules for functionality should be loaded. And from here on out, the browsers should progressively load JavaScript modules only when they become relevant. &lt;br&gt;
JavaScript functionality should be modularized as much as possible and split into dedicated files.&lt;/p&gt;

&lt;p&gt;Several immediate benefits to this approach are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React, uses components. JavaScript modules are the exact same thing. Except they run on the web platform itself and you don't need a bundler to make them work.&lt;/li&gt;
&lt;li&gt;Modularization makes ongoing development easier because it provides clear separation of concerns.&lt;/li&gt;
&lt;li&gt;Modularizing, JavaScript and loading modules only when they are needed, brings significant performance benefits on initial load.&lt;/li&gt;
&lt;li&gt;Modularization means updating some feature in a JavaScript app does not require the browser to download the entire app bundle again. It just needs to download the updated module file with its features, which is way smaller. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When and how the browser loads each JavaScript file it encounters has a significant impact on both performance and functionality. &lt;/p&gt;

&lt;p&gt;If we add JavaScript to the head of an HTML document, it will always load and execute as soon as the browser encounters it, which is always before the body is rendered out. This will always cause render blocking. &lt;/p&gt;

&lt;p&gt;To prevent this blocking JavaScript has been added to the very bottom of the body element, but this too causes render blocking because as soon as the browser encounters a reference to JavaScript, it'll stop doing anything, download the entire script, then execute the script, and then go back to rendering. So basically, entire page will be loaded before the JavaScript is even loaded which just adds to the performance problems.&lt;/p&gt;

&lt;p&gt;We have the &lt;strong&gt;async&lt;/strong&gt; and &lt;strong&gt;defer&lt;/strong&gt; keywords which instruct the browser to either load JavaScript files asynchronously while DOM rendering takes place, and then execute them as soon as they're available, or to load the files asynchronously and defer execution until the DOM rendering is done. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MEMMn94S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wb1v1lvi522drhwo1jol.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEMMn94S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wb1v1lvi522drhwo1jol.png" alt="Screenshot (209)"&gt;&lt;/a&gt; &lt;br&gt;
When we add the async tag, the browser will load the JavaScript asynchronously meaning it loads alongside the HTML parsing process. When the script is fully loaded the browser stops the rendering of the HTML until the script is executed and then it continues. Already we're seeing a significant performance enhancement because the parsing isn't paused while the script is being downloaded. &lt;/p&gt;

&lt;p&gt;In JavaScript and other programming languages, a synchronous event means one event happens after another, in a chain. Asynchronous means the events happen independently of one another and one event doesn't have to wait for another to complete before it takes place. &lt;/p&gt;

&lt;p&gt;In the case of async JavaScript loading the loading is asynchronous, while the execution is synchronous.&lt;/p&gt;

&lt;p&gt;Use async anytime you're loading JavaScript and you don't need to wait for the whole DOM to be created first.&lt;/p&gt;

&lt;p&gt;Defer is slightly different. We're still loading the script asynchronously when the browser encounters it without render blocking. And then we literally defer the execution of the JavaScript until the HTML parsing is complete.&lt;/p&gt;

&lt;p&gt;This is effectively the same as placing the script tag at the end of the body element, except the script is loaded asynchronously, and is therefore much better for performance because we don't render out the entire HTML and then go download the JavaScript. The JavaScript is already downloaded. &lt;/p&gt;

&lt;p&gt;Use defer if you need to wait for the whole DOM to be loaded before executing the JavaScript or if the JavaScript can wait. &lt;/p&gt;

&lt;p&gt;So here is your performance focused JavaScript loading best practices.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Call JavaScript by placing the script tag in the head&lt;/li&gt;
&lt;li&gt;Anytime you load JavaScript in the head, always put async on there unless you have a reason to use defer.&lt;/li&gt;
&lt;li&gt;Defer any scripts that need the DOM to be fully built or scripts that you can defer because they don't need to execute right away.&lt;/li&gt;
&lt;li&gt; If and only if, you need to support older browsers and you can't allow the browser to wait for things, load your script in the footer the old way and take the performance hit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lazy load JavaScript modules and their associated assets only when they're interacted with and needed using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"&gt;import&lt;/a&gt; statements.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
import("/path/to/import-module.js")&lt;br&gt;
  .then((module) =&amp;gt; {&lt;br&gt;
    // do something with the module&lt;br&gt;
  });&lt;br&gt;
With this you'll not be chaining the events and getting everything to work conditionally on the user's behavior. So you're saving the user a ton of data and only pushing content to the browser when it's needed.&lt;br&gt;
This whole concept can be used with any JavaScript module including external &lt;a href="https://nodejs.org/api/esm.html#esm_introduction"&gt;ESM module&lt;/a&gt;. &lt;br&gt;
To rewrite everything and turn it into highly optimized human unreadable code we can use minifiers and uglifiers. All major bundlers, including webpack, rollup, parcel, etc ship with minifiers built in. The two most popular minifiers are &lt;a href="https://www.npmjs.com/package/@types/uglify-js"&gt;uglify-js&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/terser"&gt;terser&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#css-optimization"&gt;
  &lt;/a&gt;
  CSS Optimization
&lt;/h2&gt;

&lt;p&gt;The number one measure of perceived performance is how fast something loads in the view port of the browser. For a page to render, all the CSS has to be fully loaded because CSS is a cascade and the rule sets at the bottom of a style sheet may well impact the rules that's higher up. If we serve the browser with a huge style sheet with all the styles for the page, it takes a long time to load that style sheet on this content and the performance suffers. To get around this problem, developers have come up with a clever hack called &lt;strong&gt;critical CSS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First, inline any styles impacting the content above the fold(in the viewport) in the HTML document itself as a style tag in the head. Then lazy load and defer the rest of the CSS, using a clever JavaScript trick, so it only loads when the page is fully loaded. &lt;br&gt;
&lt;a href="https://www.npmjs.com/package/critical"&gt;Critical&lt;/a&gt; helps us automate this process so that so you don't have to manually copy and paste code every time you update something.&lt;/p&gt;

&lt;p&gt;Critical reads the HTML and CSS figures out what rule sets should be inlined automatically inlines that CSS into the HTML document, separates out the non-critical CSS into a step separate style sheet and then lazy loads on the first and non-critical CSS. &lt;br&gt;
Because this tool is built into the tool chain, it can be set up to take place at every build, so you don't have to keep tabs on what styles are critical. This tool also has a ton of options, so you can fully customize exactly what happens within the critical CSS, index file or the HTML file, the CSS, the view port you're targeting, all this stuff can be configured.&lt;br&gt;
For example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LBFnq44D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm2e24nfsfbpznibe67e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LBFnq44D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm2e24nfsfbpznibe67e.png" alt="Screenshot (212)"&gt;&lt;/a&gt; &lt;br&gt;
Critical actually spin up a browser and then display the contents in the browser in a defined view port size that we've defined. And then look at what CSS is affecting the content inside that view port and split that out into this critical CSS file. The view port in the example is 320 width, 480 height. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MgYX5D8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bo7l55v50erj7twdfxpc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MgYX5D8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bo7l55v50erj7twdfxpc.png" alt="Screenshot (213)"&gt;&lt;/a&gt;&lt;br&gt;
The critical inline CSS that will run before the dom's even built. So this will then define the content that's above the fold.&lt;br&gt;
Then below we have our link elements, but the link element now points at uncritical CSS. And you'll notice the media property is set to print. This is the JavaScript trick.&lt;br&gt;
So what happens now is a regular browser will identify itself as screen. For that reason, this style sheet will not be loaded because it's set to only load for print. Meaning when you're actually printing something. Then, on load, which is an event that is triggered when the page is fully loaded, would change this media to all instead. And at that point, once everything else is done, this extra style sheet will be loaded.&lt;/p&gt;

&lt;p&gt;To see how much of your JavaScript and CSS and other code is loaded unnecessarily into the browser, you can use the coverage view in the browser dev tools. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ycS1uf_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev2qij6fh254i09ayrg7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ycS1uf_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev2qij6fh254i09ayrg7.png" alt="Screenshot (220)"&gt;&lt;/a&gt; &lt;br&gt;
If you see anything marked in red, here, it's a rule that is not currently being used on the page. This is what Critical does, it runs this type of process and then identifies which rules are being used and which rules are not being used, but in the view port, and then it picks and chooses. &lt;br&gt;
If you have one giant style sheet, you need to compare all of these pages and do a bunch of work.&lt;br&gt;
A better solution would be if we could modularize our CSS and split the CSS into smaller components and then load them only if they are needed. And one way we can do that is by deferring loading of CSS until something happens. Now, you already saw an example of that in Critical. You'll remember when we used Critical, the Critical CSS was in lined and then the rest of the styles were put in this uncritical CSS file and deferred. &lt;/p&gt;

&lt;p&gt;So, here's a different way of doing the same thing.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QBbY0XHu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20a9yruwitjp1i4bb1kq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QBbY0XHu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20a9yruwitjp1i4bb1kq.png" alt="Screenshot (221)"&gt;&lt;/a&gt;&lt;br&gt;
Here we set the rel preload and as style attributes into the link element, to tell the browser to preload this style sheet when there's processing available, meaning the loading is delayed to avoid render blocking. Then the on load attribute fires when the CSS is fully loaded and sets the rel attributes to stylesheet so the browser recognizes it and renders it. But this non script element at the bottom is a fall back for browsers that don't have JavaScript, and in that case, they will just immediately load the style sheet.&lt;br&gt;&lt;br&gt;
We could also:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urAzsvxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p7088njjqzt6pns10i6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urAzsvxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p7088njjqzt6pns10i6.png" alt="Screenshot (222)"&gt;&lt;/a&gt;&lt;br&gt;
This style sheet will not be loaded by the browser at all until the disabled attribute is removed or set defaults. You can then set up a JavaScript function to change the disabled attribute if, and only if, some event occurs like activating a gallery or triggering a JavaScript or triggering some external function and only then will the browser go to the internet pull down the style sheet, and mount it in the browser.   &lt;/p&gt;

&lt;p&gt;Lastly,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wdgWBS88--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xauyg8563wb2z8gyjs19.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wdgWBS88--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xauyg8563wb2z8gyjs19.png" alt="Screenshot (224)"&gt;&lt;/a&gt;&lt;br&gt;
Loading style sheets in body means you can have each component load its own style sheets on the fly. That way the component brings its own styles to the table and you don't have to load any styles you don't need. This makes for much cleaner and more manageable code and it falls in line with modern component-based development practices. &lt;/p&gt;

</description>
      <category>performance</category>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
