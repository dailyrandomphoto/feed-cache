<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Hello World My Name Is Mert</title>
      <author>Mert Kadir</author>
      <pubDate>Wed, 29 Dec 2021 20:18:11 +0000</pubDate>
      <link>https://dev.to/9mertkadirr/hello-world-my-name-is-mert-4og4</link>
      <guid>https://dev.to/9mertkadirr/hello-world-my-name-is-mert-4og4</guid>
      <description>&lt;p&gt;Freelance developer who likes to use Java, Kotlin software languages in his applications that create modern, minimalist interfaces interested in mobile software development.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Deploy .NET Core worker Service on Linux</title>
      <author>Uthman Rahimi</author>
      <pubDate>Wed, 29 Dec 2021 20:00:09 +0000</pubDate>
      <link>https://dev.to/uthmanrahimi/deploy-net-core-worker-service-on-linux-1mjc</link>
      <guid>https://dev.to/uthmanrahimi/deploy-net-core-worker-service-on-linux-1mjc</guid>
      <description>&lt;p&gt;In the &lt;a href="https://dev.to/uthmanrahimi/deploy-aspnet-core-applications-on-centos-8-43n2"&gt;previous post&lt;/a&gt;, we learned how to deploy an &lt;code&gt;ASP.NET Core&lt;/code&gt; Application on &lt;code&gt;Linux&lt;/code&gt; and configure it, in this post we are going to learn about deploying a &lt;code&gt;Worker Service&lt;/code&gt; on a &lt;code&gt;Linux&lt;/code&gt; machine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-worker-service"&gt;
  &lt;/a&gt;
  What is Worker Service?
&lt;/h2&gt;

&lt;p&gt;Before talking about our main topic, for those of you who do not know what is a &lt;code&gt;worker service&lt;/code&gt;, let's learn about what is &lt;code&gt;worker service&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;Worker Service&lt;/code&gt; is a built-in feature in .NET Core for creating background services. One example of using &lt;code&gt;Worker Service&lt;/code&gt; is running periodical schedules like sending &lt;code&gt;newsletter&lt;/code&gt; emails for clients every morning. To learn more about &lt;code&gt;worker service&lt;/code&gt;, refer to this &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/extensions/workers"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We assume that you have created a &lt;code&gt;Worker Service&lt;/code&gt; and now you want to deploy it on a Linux machine. First of all, as you learned in the previous article, we need to create a new service file, so use the below command to create a service file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo nano /etc/systemd/system/appbackground.service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and edit its content with the following content to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Unit]
Description=Your description 

[Service]
Type=notify
WorkingDirectory=/home/centos/Desktop/services/

ExecStart=/usr/bin/dotnet /home/centos/Desktop/services/myapp.WorkerServic$


Environment=ASPNETCORE_ENVIRONMENT=Production
[Install]
WantedBy=multi-user.target

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then  press &lt;code&gt;ctrl+x&lt;/code&gt; to save its content and run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl daemon-reload
sudo systemctl start appbackground.service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you get an error after running &lt;code&gt;sudo systemctl start appbackground.service&lt;/code&gt; you will need to add a small change to your &lt;code&gt;worker service&lt;/code&gt; project.&lt;/p&gt;

&lt;p&gt;Install &lt;code&gt;Microsoft.Extensions.Hosting.Systemd&lt;/code&gt; by &lt;code&gt;nuget&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet add package Microsoft.Extensions.Hosting.Systemd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then change &lt;code&gt;CreateHostBuilder&lt;/code&gt; in &lt;code&gt;program.cs&lt;/code&gt; like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; public static IHostBuilder CreateHostBuilder(string[] args) =&amp;gt;
            Host.CreateDefaultBuilder(args)
                .UseSystemd() // this method must be added
                .ConfigureServices((hostContext, services) =&amp;gt;
                {
                    services.AddHostedService&amp;lt;appWorker&amp;gt;();
                });
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After applying this change, get a new publish of your project and put it in the path on the &lt;code&gt;Linux&lt;/code&gt; then run start its service.&lt;/p&gt;

</description>
      <category>aspnetcore</category>
      <category>linux</category>
      <category>csharp</category>
    </item>
    <item>
      <title>Building a Timetable Generator</title>
      <author>Richard</author>
      <pubDate>Wed, 29 Dec 2021 19:51:03 +0000</pubDate>
      <link>https://dev.to/merichard123/building-a-timetable-generator-31o7</link>
      <guid>https://dev.to/merichard123/building-a-timetable-generator-31o7</guid>
      <description>&lt;p&gt;About a year ago, I began planning my final project for school. The main goal was to solve a real-world problem while learning to work on a large project independently. It is no secret that this wasn't my first large project; however, It wasn't a smooth process. This post is a reflection on the process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem-statement"&gt;
  &lt;/a&gt;
  The problem statement
&lt;/h2&gt;

&lt;p&gt;The current system for making timetables involves a conditional excel sheet in which you would drag boxes around until they fit. My goal was to make that process easier for the client. They needed an app that would allow them to make timetables with zero chance of overlap or double-booking.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluating-the-technical-feasibility"&gt;
  &lt;/a&gt;
  Evaluating the Technical Feasibility
&lt;/h2&gt;

&lt;p&gt;The problem of programmatically creating timeslots that fit into a timetable as a whole is NP-Complete. I would have to evaluate all possible combinations to find a semi optimal solution. &lt;/p&gt;

&lt;p&gt;A similar problem which is also NP-Complete is the Knapsack problem. For those who are unfamiliar; with the Knapsack problem, you start with a Knapsack that can hold a finite amount of items let's say 40lbs. From a selection of items in a shop all with differing weights, what arrangement of items would you steal to obtain the highest possible value which fit in the 40lbs limit.&lt;/p&gt;

&lt;p&gt;One way to solve such a problem is by use of greedy algorithms; which pick an optimal move at each step to achieve a "good enough solution". (Note that there are other possibilities such as &lt;a href="https://en.wikipedia.org/wiki/Genetic_algorithm"&gt;Genetic Algorithms&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;However, this is a timetable that relies on a lot of different variables. For instance "do specific classes need a specific professor due to experience level?" or "would specific classes be better off having the same professor as they did previously?". Thus neither of the stated "automated" solutions are feasible for my problem.&lt;/p&gt;

&lt;p&gt;Instead, I took a step back. Away from all this maths and algorithms which are edging dangerously close to machine learning. I decided the best description for my solution is "smart suggestive filtering". In order to make timetable generation easier for my client, I would display all the data in such as way that overlap is impossible, the system would suggest which classes should be on what timeslot while maintaining the freedom for a human to make decisions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-stage"&gt;
  &lt;/a&gt;
  Design Stage
&lt;/h2&gt;

&lt;p&gt;I find the best way to start any project is to set your requirements straight and build on top of them. The requirements I set for this project were as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define database relationships and be able to store the data needed for the app.&lt;/li&gt;
&lt;li&gt;Be able to authenticate the user and secure API endpoints.&lt;/li&gt;
&lt;li&gt;Create endpoints for retrieving data for specific year groups.&lt;/li&gt;
&lt;li&gt;Be able to assign a timestamp to specific lessons for a class.&lt;/li&gt;
&lt;li&gt;View all the classes which have timestamps and those which do not.&lt;/li&gt;
&lt;li&gt;Run reports on the data.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#database-design"&gt;
  &lt;/a&gt;
  Database Design
&lt;/h3&gt;

&lt;p&gt;Starting with the data; I made a list of all the entities and attributes I would need. From this, it was just a case of putting it all in an ER diagram and determining the relationships.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kVhUNgZn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbljusi63n95xq5a2dfc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kVhUNgZn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbljusi63n95xq5a2dfc.png" alt="ER Diagram showing the relationships" width="880" height="649"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that this isn't normalised in any way, for me it was better to have a structured database that makes sense rather than lots of tables which would have just made the queries more complicated than they already are. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ui-design"&gt;
  &lt;/a&gt;
  UI Design
&lt;/h2&gt;

&lt;p&gt;A useful way to see how your data will flow is to create mockups of UIs. This will allow you to map out what is going to happen to the data, how it will be presented before you start coding. I find this makes the whole process easier down the line. I made my mockups in Figma which allowed me to plan user interactions as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JI4mrqUl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxtwylfb365hqfgvq99t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JI4mrqUl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxtwylfb365hqfgvq99t.png" alt="Figma UI Mockups" width="880" height="565"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-solution-and-its-problems"&gt;
  &lt;/a&gt;
  Technical solution and its problems
&lt;/h2&gt;

&lt;p&gt;I decided to use Django Rest Framework on the backend, because that is what I am most familiar with and React on the Frontend. I chose React because I was still learning Vue at the time and didn't quite have the confidence to undertake such a large project in Vue. &lt;/p&gt;

&lt;p&gt;The first roadblock I came across is that Foreign Keys return Ids when serialized. To help me with this I made an abstract base class which converts the objects of ids into an object of data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SharedMethods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ExtractValuesById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataCollection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;TeacherVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DataCollection&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Teacher'&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="n"&gt;RoomVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Room&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DataCollection&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Room'&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="n"&gt;RoomNumber&lt;/span&gt;
        &lt;span class="n"&gt;SubjectVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DataCollection&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Subject'&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="n"&gt;ClassGroupVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ClassGroup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DataCollection&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ClassGroup'&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="n"&gt;classCode&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DataCollection&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;'Day'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DataCollection&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Day'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;'Unit'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DataCollection&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Unit'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;'Teacher'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TeacherVal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;'Room'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RoomVal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;'Subject'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SubjectVal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;'ClassGroup'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ClassGroupVal&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By doing I could reuse this code wherever I needed it by inheriting it into other viewset classes.&lt;/p&gt;

&lt;p&gt;While filtering the data I needed a way to get all the free teachers, because teachers teach more than one lesson a week I couldn't have a field for "isFree" on the teacher model.&lt;/p&gt;

&lt;p&gt;To work around this finding set differences between all teachers and all teachers who are teaching on a specific day.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;currentOccupiedTeachers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Timeslot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Day&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Unit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Unit&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;currentTeacherData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TimeslotSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentOccupiedTeachers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;span class="n"&gt;occupiedTeacherIds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;timeslot&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Teacher'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;timeslot&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;currentTeacherData&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# Get Ids of all teachers
&lt;/span&gt;&lt;span class="n"&gt;allTeachers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;allTeacherData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TeacherSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allTeachers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;span class="n"&gt;allTeacherIds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;teacher&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;teacher&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;allTeacherData&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;freeTeachers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;allTeacherIds&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;occupiedTeacherIds&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I used two sets to make sure they are unique and subtracted one from the other to get all the teachers who do not have timeslots on a specified day. From there it is easily converted to a queryset like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;FreeTeacher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id__in&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;freeTeachers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also found that I needed more specific queries. I needed to determine if a field has one value or another. Django has a neat function Q which allows you to form composite queries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;
&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'ICT'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Computing'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Room&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id__in&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;outPutFilteredRooms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the filter will match if the Description is "ICT" or "Computing".&lt;/p&gt;

&lt;p&gt;One way in which I suggested options for the timetable is by making sure the recommended option is first. Each yeargroup has a set amount of each lesson which they need on their timetable for instance 6 maths lessons per week. So I make sure the subject they have the least of is on top. However using &lt;code&gt;Model.objects.filter()&lt;/code&gt; doesn't preserve order. Hence we can use this handy trick:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;When&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Case&lt;/span&gt;
&lt;span class="n"&gt;currentAmounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__getCurrentSubjectTotals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allSubjects&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;subjectMissingIds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__getMissingSubjectAmounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentAmounts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;preserveOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Case&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;When&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subjectMissingIds&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;


&lt;span class="n"&gt;subjectFrequencyQueryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;yearGroup__name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Yr&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;id__in&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subjectMissingIds&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preserveOrder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;serializedSubjects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SubjectSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subjectFrequencyQueryset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializedSubjects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using Case Where Enumerate will make sure the order of the array you pass in is preserved in the query.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#app-demo"&gt;
  &lt;/a&gt;
  App Demo
&lt;/h2&gt;

&lt;p&gt;(Coming Soon)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-learned"&gt;
  &lt;/a&gt;
  What I learned?
&lt;/h2&gt;

&lt;p&gt;The whole year in which this app has been in the making has taught me the importance of planning. If I didn't plan so much of the app beforehand, writing the code would have been unnecessarily difficult. &lt;/p&gt;

&lt;p&gt;I also learned how vital a good client-dev communication is for maintaining the stabilty of a project.&lt;/p&gt;

&lt;p&gt;Finally I explored the ways of &lt;a href="https://www.agilealliance.org/agile101/12-principles-behind-the-agile-manifesto/"&gt;Agile Development&lt;/a&gt;. Agile is a project management methodology in the SDLC and focuses on involving the customer in every step of the development process, it was developed to overcome the drawbacks of the standard waterfall model.&lt;/p&gt;

&lt;p&gt;It does this by breaking down the entire project into smaller development lifecycles called iterations or sprints. In Agile for every sprint, you develop a version of the working software called the increment.&lt;/p&gt;

&lt;p&gt;I found this very useful for the project as the clients view on how the app worked was my top most priority, for the best possible UX. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-i-could-do-it-again"&gt;
  &lt;/a&gt;
  If I could do it again?
&lt;/h2&gt;

&lt;p&gt;Overall I am pretty happy with the product. If I could do it again I would swap out Zustand for Redux Toolkit, because I got to the point where small state slices began to look really messy.&lt;/p&gt;

&lt;p&gt;I would also handle error messages a lot better. A custom component which showed errors would have been more user friendly. &lt;/p&gt;

</description>
      <category>typescript</category>
      <category>python</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Memorization in Recursion (JS)</title>
      <author>Umashankar S</author>
      <pubDate>Wed, 29 Dec 2021 19:15:36 +0000</pubDate>
      <link>https://dev.to/umashankar_s/memorization-in-recursion-281b</link>
      <guid>https://dev.to/umashankar_s/memorization-in-recursion-281b</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;What is Memorization ?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;&lt;strong&gt;In a non technical words&lt;/strong&gt;&lt;/em&gt;: Assume, you want to watch one movie, and you downloaded that movie (2TB) and you watched.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mn2_Egm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5u0k8xblotmuqxoh0ofi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mn2_Egm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5u0k8xblotmuqxoh0ofi.gif" alt="Image description" width="356" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After one day, again you want to watch that same movie because its quite interesting. so what you will do now?&lt;br&gt;
Again you will download (2TB) ? or you will watch from your already downloaded file?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o1E8ecqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmxg3h89a5sua2wgkabo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o1E8ecqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmxg3h89a5sua2wgkabo.gif" alt="Image description" width="220" height="220"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;In a Technical Words&lt;/em&gt;&lt;/strong&gt;:- It is an optimization technique that speeds up applications by storing the results of expensive function calls and returning the cached result when the same inputs occur again.&lt;/p&gt;



&lt;p&gt;Before get into the &lt;strong&gt;memorization&lt;/strong&gt; deeply, lets understood the &lt;strong&gt;recursion&lt;/strong&gt; first.so we will have a better understanding, where we can use our memorization.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Recursion&lt;/em&gt;&lt;/strong&gt;: Recursion is a technique to iterate over the function repeatedly. untill we get a result or untill the condition satisfied.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;fibonacci program with recursion:&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we are using recursion concept to calculate fibonacci. so fib(n) will be repeated most of the times. &lt;br&gt;
&lt;strong&gt;eg:-&lt;/strong&gt; fib(40) = fib(40-1)+fib(40-2)&lt;br&gt;
               fib(39)+fib(38)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;And this tree will go further. and lot of fib(4),fib(5), fib(6), fib(n),etc..... series need to calculate. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Assume fib(4), we calculate and &lt;strong&gt;we stored it in cache&lt;/strong&gt; and again if fib(4) came in that tree. we &lt;strong&gt;don't need to calculate again&lt;/strong&gt;. Just we need to return it from the cache. So this will improve the response time as well.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;fibonacci program with recursion and memorization:&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;previousValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;previousValue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;////memorization&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;previousValue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;previousValue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;  &lt;span class="c1"&gt;//memorization&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you guys can take both the programs and you guys can check that, which one is having a &lt;strong&gt;better response time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for your time!!&lt;br&gt;
Cheers!!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>react</category>
      <category>html</category>
    </item>
    <item>
      <title>🧠 💻 The Programmer's Brain: 3 types of confusion when you're learning a new tech</title>
      <author>Kauress</author>
      <pubDate>Wed, 29 Dec 2021 18:58:13 +0000</pubDate>
      <link>https://dev.to/kauresss/the-programmers-brain-3-types-of-confusion-when-youre-learning-a-new-tech-2o5</link>
      <guid>https://dev.to/kauresss/the-programmers-brain-3-types-of-confusion-when-youre-learning-a-new-tech-2o5</guid>
      <description>&lt;p&gt;Hi everyone!, &lt;/p&gt;

&lt;p&gt;Been a while since I posted on here. Want to share a great resource/book that I've been reading. The book is called &lt;strong&gt;The Programmer's Brain&lt;/strong&gt; and it can be found here &lt;a href="https://www.manning.com/books/the-programmers-brain"&gt;here&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;highly recommended&lt;/strong&gt;. If you have a background in &lt;strong&gt;neuroscience&lt;/strong&gt;, you will enjoy it a lot! The author &lt;strong&gt;Felienne Hermans&lt;/strong&gt;  does a great job of explaining the cognitive processes involved in learning to code and what happens in your brain as you actively code. &lt;/p&gt;

&lt;p&gt;I made a small video explaining more &lt;a href="https://youtu.be/ohMAwevxeZc"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm huge into &lt;strong&gt;learning, meta-learning so&lt;/strong&gt; just sharing some of my notes from this book as well!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-confusion"&gt;
  &lt;/a&gt;
  Types of confusion
&lt;/h3&gt;

&lt;p&gt;When learning try to recognize the type of confusion you're facing. Knowing what type of confusion you are facing can help you to overcome it. Confusion can be classified into 3 types&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#confusion-1-lack-of-knowledge"&gt;
  &lt;/a&gt;
  Confusion #1: Lack of knowledge
&lt;/h3&gt;

&lt;p&gt;This is caused by alack of domain knowledge in your LTM/Long term memory. So you're a complete newbie and are encountering a concept for the first time and have no idea what &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt; or&lt;code&gt;function&lt;/code&gt; mean.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#confusion-2-lack-of-information"&gt;
  &lt;/a&gt;
  Confusion #2: Lack of information
&lt;/h3&gt;

&lt;p&gt;This is caused due to lack of information while solving/reading over a problem, for example about a certain method. So you know what methods are and how to use them but you might be lacking information on a certain method appropriate a code snippet for example&lt;code&gt;toString()&lt;/code&gt;. Code nowadays uses packages, modules etc therefore, confusion due to lack of information is common. And this type of confusion is associated with your STM/Short term memory which can only store about 2-6 items at one time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#confusion-3lack-of-processing-power"&gt;
  &lt;/a&gt;
  Confusion #3:Lack of processing power
&lt;/h3&gt;

&lt;p&gt;This is caused by an issue in your working memory. Working memory is used in the execution of cognitive tasks such as coding/programming. It holds new information in your current attention so that the brain can work with it. The working memory will try and connect this with other information stored in your LTM/Long term memory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ltm-long-term-memory"&gt;
  &lt;/a&gt;
  LTM: Long Term Memory
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;First cognitive process that you rely on when coding &lt;/li&gt;
&lt;li&gt;Holds facts and info for a long time &lt;/li&gt;
&lt;li&gt;For example knowledge about what a variable is or what a certain keyword means is stored here &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#stm-short-term-memory"&gt;
  &lt;/a&gt;
  STM: Short Term Memory
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Second cognitive process that you rely on when coding &lt;/li&gt;
&lt;li&gt;It holds information briefly as it comes into your brain this is the memory that is first activated when you read code &lt;/li&gt;
&lt;li&gt;For example someone telling you their phone number is held briefly in your STM and unless you actively memorize it and put it into your LTM the information is forgotten because the STM has a very limited size and can only hold. 2-6 things &lt;/li&gt;
&lt;li&gt;For example public static void main (int n) here your STM holds the fact that n refers to an integer and you continue working &lt;/li&gt;
&lt;li&gt;The STM holds info like what the name of a certain method is or a variable name &lt;/li&gt;
&lt;li&gt;LTM and STM work together &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#working-memory"&gt;
  &lt;/a&gt;
  Working memory
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Third cognitive process that you use when coding &lt;/li&gt;
&lt;li&gt;This is where the actual thinking happens &lt;/li&gt;
&lt;li&gt;So this is where you come up with solutions, thoughts and ideas &lt;/li&gt;
&lt;li&gt;When you’re reading code you’re trying to figure out what’s happening and you’re mentally trying to execute the code this is called tracing &lt;/li&gt;
&lt;li&gt;Tracing is the mental compiling and execution of code&lt;/li&gt;
&lt;li&gt;For example when writing some code you might be figuring out how to filter names of customers starting with the letter “a” or deciding an index is too low
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-3-types-of-memories-interact-with-each-other-and-work-together"&gt;
  &lt;/a&gt;
  The 3 types of memories interact with each other and work together
&lt;/h3&gt;

&lt;p&gt;All 3 cognitive processes are involved when you are thinking or doing any task. So if you read that a variable name or parameter is &lt;code&gt;i&lt;/code&gt;your brain searches it’s LTM for knowledge,  and if you don’t know what it means, then your working memory will try and figure it out. If you know what it means you will store this letter &lt;code&gt;i&lt;/code&gt; in your STM while you work through the code&lt;/p&gt;

</description>
      <category>programming</category>
      <category>tutorial</category>
      <category>discuss</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Hyperscript - the hidden language of React</title>
      <author>Nikita Grechino</author>
      <pubDate>Wed, 29 Dec 2021 18:38:31 +0000</pubDate>
      <link>https://dev.to/fromaline/hyperscript-the-hidden-language-of-react-3d1f</link>
      <guid>https://dev.to/fromaline/hyperscript-the-hidden-language-of-react-3d1f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#jsx-is-the-starting-point"&gt;
  &lt;/a&gt;
  JSX is the starting point
&lt;/h2&gt;

&lt;p&gt;React uses JSX to make things easier for the developers. So when you write something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  Hello!
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Babel with a react preset transforms it to this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check out this example in &lt;a href="https://babeljs.io/repl#?browsers=defaults%2C%20ie%206&amp;amp;build=&amp;amp;builtIns=false&amp;amp;corejs=3.6&amp;amp;spec=false&amp;amp;loose=false&amp;amp;code_lz=MYewdgzgLgBAJgSwG4wLwwDyJQuqBEAZiCPgHwASApgDY0gCEGA9NmUA&amp;amp;debug=false&amp;amp;forceAllTransforms=true&amp;amp;shippedProposals=false&amp;amp;circleciRepo=&amp;amp;evaluate=false&amp;amp;fileSize=true&amp;amp;timeTravel=false&amp;amp;sourceType=module&amp;amp;lineWrap=true&amp;amp;presets=env%2Creact&amp;amp;prettier=false&amp;amp;targets=&amp;amp;version=7.16.6&amp;amp;externalPlugins=&amp;amp;assumptions=%7B%7D"&gt;Babel REPL&lt;/a&gt;.&lt;br&gt;
&lt;code&gt;React.createElement&lt;/code&gt; is a function that creates a virtual node.&lt;br&gt;
It's a well-known fact, and you probably already know it. So what's the point?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#preact-way"&gt;
  &lt;/a&gt;
  Preact way
&lt;/h2&gt;

&lt;p&gt;If you've used Preact before, you may notice it has &lt;a href="https://github.com/preactjs/preact/blob/master/src/index.js#L4"&gt;an unobvious export&lt;/a&gt; in its source code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;createElement&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./create-element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make things clear, the &lt;code&gt;createElement&lt;/code&gt; function from Preact serves the same needs as &lt;code&gt;React.createElement&lt;/code&gt;. So the question is, why is it exported as &lt;code&gt;h&lt;/code&gt; as well?&lt;/p&gt;

&lt;p&gt;The reason is dead simple. It's exported as &lt;code&gt;h&lt;/code&gt; because it's &lt;a href="https://github.com/hyperhype/hyperscript/tree/9237f590f3bc82b841ba6e7c4df946f21dff0045"&gt;a hypescript function&lt;/a&gt;. &lt;br&gt;
So what exactly is hypescript?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#hyperscript-is-the-key"&gt;
  &lt;/a&gt;
  Hyperscript is the key
&lt;/h2&gt;

&lt;p&gt;Hypescript is a kind of language to create HyperText with JavaScript and was started by Dominic Tarr in 2012. He was inspired by &lt;a href="https://github.com/markaby/markaby"&gt;markaby&lt;/a&gt;, the "short bit of code" to write HTML in pure Ruby.&lt;br&gt;
Markaby allows doing things like that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'markaby'&lt;/span&gt;

&lt;span class="n"&gt;mab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Markaby&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;mab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="s2"&gt;"Boats.com"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;h1&lt;/span&gt; &lt;span class="s2"&gt;"Boats.com has great deals"&lt;/span&gt;
    &lt;span class="n"&gt;ul&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="s2"&gt;"$49 for a canoe"&lt;/span&gt;
      &lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="s2"&gt;"$39 for a raft"&lt;/span&gt;
      &lt;span class="n"&gt;li&lt;/span&gt; &lt;span class="s2"&gt;"$29 for a huge boot that floats and can fit 5 people"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;mab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the &lt;code&gt;h&lt;/code&gt; function allows doing essentially the same thing, but with different syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hyperscript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div#foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It also supports nesting and CSS properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hyperscript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div#foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello from H1!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;coral&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check out &lt;a href="https://hyperhype.github.io/hyperscript/"&gt;an interactive demo&lt;/a&gt; to see how it works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-your-hands-dirty"&gt;
  &lt;/a&gt;
  Get your hands dirty
&lt;/h2&gt;

&lt;p&gt;Now when we know what the &lt;code&gt;h&lt;/code&gt; function does and why we need it, let's write our own version of it. Complete example can be found on &lt;a href="https://codesandbox.io/s/h-edxqp"&gt;codesanbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, let's make up a &lt;code&gt;render&lt;/code&gt; function, that creates real DOM elements from our virtual nodes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Than, let's create the &lt;code&gt;h&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;handledType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;handledType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;children&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, let's create an actual content with our &lt;code&gt;h&lt;/code&gt; function, render it with our &lt;code&gt;render&lt;/code&gt; function and mount the result to the DOM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; 
      &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;World!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to check commit message and branch name with git hooks without any new installation</title>
      <author>Anibal</author>
      <pubDate>Wed, 29 Dec 2021 18:25:40 +0000</pubDate>
      <link>https://dev.to/anibalardid/how-to-check-commit-message-and-branch-name-with-git-hooks-without-any-new-installation-n34</link>
      <guid>https://dev.to/anibalardid/how-to-check-commit-message-and-branch-name-with-git-hooks-without-any-new-installation-n34</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hi All ! &lt;br&gt;
I'm a tech lead, and I'm on charge to check Pull Request/Merge Request on my team. And also to create release notes (CHANGELOG.md) on each release.&lt;br&gt;
So, my first problem was to resolve the commits of the developers, that they always have some mistake, or have errors into the commit message (without correct format), or errors in the branch name.&lt;br&gt;
I searched and I found different solutions. A lot of them need to use an external software, like node (npm library), or php composer library, etc. And the projects are in different technologies, like Android, PHP, .NET, etc.&lt;/p&gt;

&lt;p&gt;After checking all that I found, I created a solution that works in all environments without external dependencies.&lt;/p&gt;

&lt;p&gt;The solution is really easy.&lt;br&gt;
You need to follow these easy steps&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;create &lt;strong&gt;.git-hooks&lt;/strong&gt; folder into your project root directory, at the same level you already have .git folder&lt;/li&gt;
&lt;li&gt;create 2 files into this folder: &lt;strong&gt;pre-commit&lt;/strong&gt; and &lt;strong&gt;prepare-commit-msg&lt;/strong&gt; (these two files don't have an extension)&lt;/li&gt;
&lt;li&gt;put the correct code into each file (I will add them below these steps)&lt;/li&gt;
&lt;li&gt;run this command in your command line, into your main folder of your project (one level up from .git-hooks): &lt;strong&gt;git config core.hooksPath .git-hooks&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;READY ! &lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;pre-commit&lt;/strong&gt; file code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;BRANCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;git rev-parse &lt;span class="nt"&gt;--abbrev-ref&lt;/span&gt; HEAD&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;REGEX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"^(dev|release)-([0-9]+)-q([0-9]+)&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="s2"&gt;([0-9]+)&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="s2"&gt;(.+)$"&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$BRANCH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="nv"&gt;$REGEX&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Your commit was rejected due to branching name"&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Please rename your branch with '(dev|release)-YYYY-qX.X.X' syntax"&lt;/span&gt;
  &lt;span class="nb"&gt;exit &lt;/span&gt;1
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;prepare-commit-msg&lt;/strong&gt; file code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;MESSAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt; 
&lt;span class="nv"&gt;COMMITFORMAT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"^(feat|fix|docs|style|refactor|test|chore|perf|other)(&lt;/span&gt;&lt;span class="se"&gt;\(&lt;/span&gt;&lt;span class="s2"&gt;(.*)&lt;/span&gt;&lt;span class="se"&gt;\)&lt;/span&gt;&lt;span class="s2"&gt;)?: #([0-9]+) (.*)$"&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$MESSAGE&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="nv"&gt;$COMMITFORMAT&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Your commit was rejected due to the commit message. Skipping..."&lt;/span&gt; 
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Please use the following format:"&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"feat: #1234 feature example comment"&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"fix(ui): #4321 bugfix example comment"&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"More details on COMMITS.md"&lt;/span&gt;
  &lt;span class="nb"&gt;exit &lt;/span&gt;1
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can edit it according to your needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;

&lt;p&gt;File &lt;strong&gt;pre-commit&lt;/strong&gt;: check branch names.&lt;br&gt;
In my case I filter to use only format like that:&lt;br&gt;
dev-YYYY-qX.X.X&lt;br&gt;
release-YYYY-qX.X.X&lt;br&gt;
Where YYYY is the year, and X.X.X are the version, in our case we use the Quarter number.&lt;br&gt;
You could change that using regex and put what you want ;)&lt;/p&gt;

&lt;p&gt;File &lt;strong&gt;prepare-commit-msg&lt;/strong&gt;: check commit message.&lt;br&gt;
In our case, we use the following format:&lt;br&gt;
&lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;https://www.conventionalcommits.org/en/v1.0.0/&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="http://karma-runner.github.io/1.0/dev/git-commit-msg.html"&gt;http://karma-runner.github.io/1.0/dev/git-commit-msg.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Off course, you could change it as your needs.&lt;/p&gt;

&lt;p&gt;And finally, the command &lt;strong&gt;git config core.hooksPath .git-hooks&lt;/strong&gt; change your local git hooks configuration to use the new path .&lt;/p&gt;

</description>
      <category>git</category>
      <category>hooks</category>
      <category>devops</category>
      <category>programming</category>
    </item>
    <item>
      <title>Exceptions vs error values</title>
      <author>Spyros Argalias</author>
      <pubDate>Wed, 29 Dec 2021 18:11:08 +0000</pubDate>
      <link>https://dev.to/sargalias/exceptions-vs-error-values-2hp9</link>
      <guid>https://dev.to/sargalias/exceptions-vs-error-values-2hp9</guid>
      <description>&lt;p&gt;Exceptions vs error values has been a debate in &lt;a href="https://programmingduck.com/articles/errors"&gt;error handling&lt;/a&gt; for ages. Some people have firm stances on them. For example, in the book &lt;a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"&gt;Clean Code&lt;/a&gt;, Uncle Bob recommends exceptions. In his post on &lt;a href="https://www.joelonsoftware.com/2003/10/13/13/"&gt;Exceptions&lt;/a&gt;, Joel mentions that he prefers error values.&lt;/p&gt;

&lt;p&gt;Programming languages have also taken stances. Popular languages such as C# and Java traditionally use exceptions. Languages like Rust use error values.&lt;/p&gt;

&lt;p&gt;In this article we'll examine some of their similarities and differences. We'll also provide suggestions about when to use which.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wrz409nQ4hc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-examples-of-exceptions-and-error-values"&gt;
  &lt;/a&gt;
  Basic examples of exceptions and error values
&lt;/h2&gt;

&lt;p&gt;Just for a quick introduction, here are some examples of exceptions and error values.&lt;/p&gt;

&lt;p&gt;If you're already familiar with them, then please skip to the next section.&lt;/p&gt;

&lt;p&gt;Here's an example of throwing and catching an exception in C#:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Example&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IndexOutOfRangeException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// handle error&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt; &lt;span class="cm"&gt;/* some condition to check if something went wrong */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;IndexOutOfRangeException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Some error message"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// normal program execution&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, &lt;code&gt;Bar&lt;/code&gt; throws an exception. The exception is caught and handled in &lt;code&gt;Foo&lt;/code&gt;, in the &lt;code&gt;catch&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;Here's the same thing in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// handle error&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="cm"&gt;/* some condition */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// normal program execution&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Error values can be implemented in different ways. One way is for a function to return either an error or a normal value.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// handle error&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// normal program execution&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="cm"&gt;/* some condition */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, &lt;code&gt;bar&lt;/code&gt; can return either an error or a normal value. &lt;code&gt;foo&lt;/code&gt; checks the return value. If it was an error, it handles it. Otherwise, it continues normal program execution.&lt;/p&gt;

&lt;p&gt;You can also use error values by returning a single object. The object should have fields for both the error and the normal return value. For example, you could use a tuple, or an object with properties. If there was an error, the &lt;code&gt;value&lt;/code&gt; should be empty. For example &lt;code&gt;{error: new Error('Message'), value: null}&lt;/code&gt;. If there wasn't an error, the &lt;code&gt;error&lt;/code&gt; value should be empty. For example &lt;code&gt;{error: null, value: 42}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here's a code example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// handle error&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// normal program execution&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="cm"&gt;/* some condition */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error message.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, &lt;code&gt;bar&lt;/code&gt; always returns an object. If something goes wrong, the object will have a value in the &lt;code&gt;error&lt;/code&gt; field. Otherwise, the &lt;code&gt;error&lt;/code&gt; field will be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cNYU2r57--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0vxpx5e7jsqjxqyz2un.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cNYU2r57--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0vxpx5e7jsqjxqyz2un.jpg" alt="" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#similarities-between-exceptions-and-error-values"&gt;
  &lt;/a&gt;
  Similarities between exceptions and error values
&lt;/h2&gt;

&lt;p&gt;Exceptions and error values are fairly similar. In fact, some newer programming languages such as Rust and Swift eliminate most of the differences between them.&lt;/p&gt;

&lt;p&gt;The most important thing about both of them is that they act as different return values from a function / method. The different return values should lead to different code execution paths.&lt;/p&gt;

&lt;p&gt;They also share a big downside. It's easy to mess up with both of them.&lt;/p&gt;

&lt;p&gt;With an exception, you may:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;forget to catch it&lt;/li&gt;
&lt;li&gt;wrongly assume that some code higher in the call stack will catch it&lt;/li&gt;
&lt;li&gt;accidentally catch it higher in the call stack in a place that's not prepared to handle it properly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, you can completely avoid checking error values.&lt;/p&gt;

&lt;p&gt;It's very easy to forget or mess up. Even if you don't, someone else might. So, you have to be very diligent.&lt;/p&gt;

&lt;p&gt;Or, you can use a programming language that forces you to check all errors. (More on that later.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#differences-between-exceptions-and-error-values"&gt;
  &lt;/a&gt;
  Differences between exceptions and error values
&lt;/h2&gt;

&lt;p&gt;Exceptions and error values have some differences:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;p&gt;Throwing and catching exceptions are commonly considered slow. Returning error values is fast.&lt;/p&gt;

&lt;p&gt;However, exceptions are supposed to be "exceptional" (thrown very rarely). In practice, this means that the performance of your application shouldn't be negatively affected by using them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crashing-the-program-vs-silent-bugs"&gt;
  &lt;/a&gt;
  Crashing the program vs silent bugs
&lt;/h3&gt;

&lt;p&gt;Uncaught exceptions crash the program. More rarely, exceptions can also result in silent bugs (if you catch them higher in the call stack without intending to).&lt;/p&gt;

&lt;p&gt;Unchecked error values result in silent bugs.&lt;/p&gt;

&lt;p&gt;Exceptions are better in this case. As explained in &lt;a href="https://programmingduck.com/articles/error-responses"&gt;how to respond to errors&lt;/a&gt;, crashing the program is a better default option than silent bugs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bubbling"&gt;
  &lt;/a&gt;
  Bubbling
&lt;/h3&gt;

&lt;p&gt;Exceptions can "bubble" up the call stack. An exception that's not caught in a &lt;code&gt;catch&lt;/code&gt; block will be thrown in the caller (the previous code in the call stack). If it's not caught there, the process will repeat. If it reaches the end of the call stack, the program will crash.&lt;/p&gt;

&lt;p&gt;Bubbling is both good and bad.&lt;/p&gt;

&lt;p&gt;The benefit is that it's very convenient. You can have a single try / catch block in some parent function. The exception will propagate to it and will be caught there.&lt;/p&gt;

&lt;p&gt;The downside is that the flow of execution is not explicit. You have to keep track of it yourself. You also have to remember which exceptions are caught where in the call stack.&lt;/p&gt;

&lt;p&gt;This can put you into a bad situation. Sometimes you might not remember or know if an exception will be caught or not, or where it will be caught, or by what.&lt;/p&gt;

&lt;p&gt;In comparison, error values are standard return values. If you want them to propagate, you have to propagate them manually. You have to manually return them across different functions / methods, all the way up the stack.&lt;/p&gt;

&lt;p&gt;The benefit of this is that it's very explicit. It's very easy to track and reason about. The downside is that it's very verbose. You need many return statements across many different function / method calls.&lt;/p&gt;

&lt;p&gt;Note that you can technically manually propagate exceptions if you want to. However, that's not common practice. For more details on this please see "checked exceptions" in a later section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#suitability-in-functional-programming"&gt;
  &lt;/a&gt;
  Suitability in functional programming
&lt;/h3&gt;

&lt;p&gt;Generally, exceptions are less common in functional programming.&lt;/p&gt;

&lt;p&gt;That's because functional programming promotes immutability and pure functions.&lt;/p&gt;

&lt;p&gt;With exceptions, sometimes you need to break immutability. For example, often, you need to declare variables outside of try / catch blocks and then mutate them in try / catch.&lt;/p&gt;

&lt;p&gt;Here's a code example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Something&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// do stuff with `a`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// handle error&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, thrown exceptions are not standard return values. This messes up the "pure function" point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exceptions-and-error-values-in-some-newer-languages"&gt;
  &lt;/a&gt;
  Exceptions and error values in some newer languages
&lt;/h2&gt;

&lt;p&gt;Some newer languages, like Rust and Swift, change things up a bit.&lt;/p&gt;

&lt;p&gt;Most importantly, they force you to check all error values and thrown exceptions. This means that you can never forget to check for errors or to handle exceptions.&lt;/p&gt;

&lt;p&gt;In the case of Swift, it also makes exception bubbling more explicit. It still allows exceptions to propagate automatically. However, it requires intermediate functions (that an exception will propagate through), to be marked with the keyword "throws".&lt;/p&gt;

&lt;p&gt;This additional explicitness makes exceptions easier to track throughout your code.&lt;/p&gt;

&lt;p&gt;The downside is that it makes things more verbose.&lt;/p&gt;

&lt;p&gt;(Rust uses error values, which you have to propagate explicitly anyway.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YClfKdj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/habp1qd5gha5bc3yntlc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YClfKdj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/habp1qd5gha5bc3yntlc.jpg" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-should-you-use"&gt;
  &lt;/a&gt;
  Which should you use?
&lt;/h2&gt;

&lt;p&gt;Overall, it seems like this is a question of robustness and amount of safety measures vs verbosity.&lt;/p&gt;

&lt;p&gt;Enforcing error checking and having explicit error propagation have obvious benefits. It makes it much harder to forget to do your error handling. You'll have to intentionally ignore it to avoid it.&lt;/p&gt;

&lt;p&gt;However, verbosity has downsides too. It can can make code less readable. It can also make it harder to make large changes to code. This can be especially prominent if you're propagating everything manually.&lt;/p&gt;

&lt;p&gt;For example, imagine that you change a low-level function (or add a new one) to sometimes return an error value. That error may need to be handled at a higher-level function. This means that you'll need to add code to every intermediary function to keep propagating the error.&lt;/p&gt;

&lt;p&gt;That's a large change. In comparison, if you added an exception that bubbled automatically, you would just add a try / catch block at the high-level function and you'd be done.&lt;/p&gt;

&lt;p&gt;So it's up to you to decide where you stand on the safety measures vs verbosity scale.&lt;/p&gt;

&lt;p&gt;For maximum safety measures, you should probably use a language that forces you to check all errors and forces explicit propagation of them. The downside is that the error handling will be more verbose.&lt;/p&gt;

&lt;p&gt;One level lower in safety is to use error values. I regard these as more robust than throwing exceptions. That's because propagating error values is more explicit than bubbling exceptions. The downside is that there's more verbosity. Also, note that you need to be very diligent with these. If you forget to check an error, you'll get silent bugs. Unchecked error values are worse than uncaught exceptions.&lt;/p&gt;

&lt;p&gt;Otherwise, go for throwing "normal" exceptions (such as the ones in Java, C# and JavaScript). They're the least verbose. This doesn't mean that you can't create robust programs with them. It just means that it's up to you to be diligent with errors and to track everything.&lt;/p&gt;

&lt;p&gt;It's probably also a good idea to consider the convention in your programming language. Some programming languages prefer exceptions. Some others prefer error values.&lt;/p&gt;

&lt;p&gt;My personal preference is to lean towards higher safety for larger scoped and more critical projects. For smaller scoped projects, I lean towards less verbosity and more convenience (exceptions).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final notes
&lt;/h2&gt;

&lt;p&gt;So that's it for this article. I hope that you found it useful.&lt;/p&gt;

&lt;p&gt;As always, if any points were missed, or if you disagree with anything, or have any comments or feedback then please leave a comment below.&lt;/p&gt;

&lt;p&gt;For the next steps, I recommend looking at the other articles in the &lt;a href="https://programmingduck.com/articles/errors"&gt;error handling series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Alright, thanks and see you next time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;Images:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Duelling Legos - Photo by Stillness InMotion on Unsplash&lt;/li&gt;
&lt;li&gt;Typewriter and laptop - Photo by Glenn Carstens-Peters on Unsplash&lt;/li&gt;
&lt;li&gt;Post-it notes - Photo by Will H McMahan on Unsplash&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>coding</category>
    </item>
    <item>
      <title>Release ScrcpyHub v1.3.0</title>
      <author>katz</author>
      <pubDate>Wed, 29 Dec 2021 17:56:21 +0000</pubDate>
      <link>https://dev.to/kaleidot725/release-scrcpyhub-v130-1ho5</link>
      <guid>https://dev.to/kaleidot725/release-scrcpyhub-v130-1ho5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;ScrcpyHub is a GUI application to use scrcpy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/kaleidot725/ScrcpyHub"&gt;https://github.com/kaleidot725/ScrcpyHub&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;scrcpy is an Android device screen mirroring command tool.　scrcpy is a useful command tool, but multiple device mirroring is so difficult and bother.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get android device using adb command.&lt;/li&gt;
&lt;li&gt;Execute scrcpy command using -s option.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JLE8rTV7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.craft.do/user/full/3a21bd0e-fe7a-39aa-73ad-b52ef24b655b/doc/6995FDF2-2CF0-43F5-B9D3-C35F739FF92F/BB45EAD5-A33A-4C88-8243-24E6F425A2F6_2/2021-11-27%252011-10-40.2021-11-27%252011_11_40.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JLE8rTV7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.craft.do/user/full/3a21bd0e-fe7a-39aa-73ad-b52ef24b655b/doc/6995FDF2-2CF0-43F5-B9D3-C35F739FF92F/BB45EAD5-A33A-4C88-8243-24E6F425A2F6_2/2021-11-27%252011-10-40.2021-11-27%252011_11_40.gif" alt="2021-11-27 11-10-40.2021-11-27 11_11_40.gif" width="582" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;ScrcpyHub assists in multiple device mirroring. ScrcpyHub makes it easy to do multiple device mirroring.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support Windows10 / 11 or macOS.&lt;/li&gt;
&lt;li&gt;Detect android device.&lt;/li&gt;
&lt;li&gt;Control mirroing (Start / Stop).&lt;/li&gt;
&lt;li&gt;Save Screenshot.&lt;/li&gt;
&lt;li&gt;Support Tary Menu.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;v1.3.0 NEW Feature : Record Movie.&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_EHBRB_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.craft.do/user/full/3a21bd0e-fe7a-39aa-73ad-b52ef24b655b/doc/6995FDF2-2CF0-43F5-B9D3-C35F739FF92F/E0E18CA8-8A5C-4633-B72F-FBA8315D34BD_2/2021-11-27%252018-10-59.2021-11-27%252018_12_53.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_EHBRB_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.craft.do/user/full/3a21bd0e-fe7a-39aa-73ad-b52ef24b655b/doc/6995FDF2-2CF0-43F5-B9D3-C35F739FF92F/E0E18CA8-8A5C-4633-B72F-FBA8315D34BD_2/2021-11-27%252018-10-59.2021-11-27%252018_12_53.gif" alt="2021-11-27 18-10-59.2021-11-27 18_12_53.gif" width="880" height="514"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-feature-record-movie"&gt;
  &lt;/a&gt;
  New Feature : Record Movie
&lt;/h2&gt;

&lt;p&gt;v1.3.0 support recording movie. You record easily movie with your Android Device. Try it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mxhcGGwd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6bopuihx808fq38sdte.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mxhcGGwd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6bopuihx808fq38sdte.gif" alt="Image description" width="500" height="266"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to Use
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h3&gt;

&lt;p&gt;Install adb and scrcpy, ScrcpyHub.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mac-os"&gt;
  &lt;/a&gt;
  💻 Mac OS
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Install android-platform-tools and scrcpy.&lt;/li&gt;
&lt;li&gt;Download &lt;a href="https://github.com/kaleidot725/scrcpy-hub/releases/tag/v1.3.0"&gt;here&lt;/a&gt; and launch ScrcpyHub.&lt;/li&gt;
&lt;li&gt;Open ScrcpyHub Preferences.&lt;/li&gt;
&lt;li&gt;Input adb and scrcpy location, save settings.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install android-platform-tools
brew install scrcpy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#windows-10-11"&gt;
  &lt;/a&gt;
  💻 Windows 10 / 11
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Download &lt;a href="https://github.com/Genymobile/scrcpy#windows"&gt;here&lt;/a&gt; and install scrcpy somewhere.&lt;/li&gt;
&lt;li&gt;Download &lt;a href="https://github.com/kaleidot725/scrcpy-hub/releases/tag/v1.3.0"&gt;here&lt;/a&gt; and launch ScrcpyHub.&lt;/li&gt;
&lt;li&gt;Open ScrcpyHub Preferences.&lt;/li&gt;
&lt;li&gt;Input adb and scrcpy location, save settings.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b0AhZpV6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.craft.do/user/full/3a21bd0e-fe7a-39aa-73ad-b52ef24b655b/doc/137C802C-F06D-460A-BA71-9B94DAF64B71/83AAA09B-F6B5-425C-9CF7-FEA002375072_2/Image" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b0AhZpV6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.craft.do/user/full/3a21bd0e-fe7a-39aa-73ad-b52ef24b655b/doc/137C802C-F06D-460A-BA71-9B94DAF64B71/83AAA09B-F6B5-425C-9CF7-FEA002375072_2/Image" alt="Image" width="350" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contact"&gt;
  &lt;/a&gt;
  🔥Contact
&lt;/h2&gt;

&lt;p&gt;We are working on the development &lt;a href="https://github.com/kaleidot725/ScrcpyHub"&gt;here&lt;/a&gt;. If you have any suggestions for improvement, please contact us.&lt;/p&gt;

</description>
      <category>android</category>
      <category>kotlin</category>
      <category>scrcpy</category>
      <category>tooling</category>
    </item>
    <item>
      <title>What is Staking ? | Earning Passive Income with Crypto in 2022</title>
      <author>Course Probe</author>
      <pubDate>Wed, 29 Dec 2021 17:45:18 +0000</pubDate>
      <link>https://dev.to/courseprobe/what-is-staking-earning-passive-income-with-crypto-in-2022-1ke7</link>
      <guid>https://dev.to/courseprobe/what-is-staking-earning-passive-income-with-crypto-in-2022-1ke7</guid>
      <description>&lt;p&gt;A lot of people that come to me for advise think the only way to make money in crypto is through trading, and because this seems so complex most of them end up looking elsewhere. &lt;/p&gt;

&lt;p&gt;Earning money with Crypto, is super simple and Trading is not the only way. That's why I decided to offer another view into Crypto Earning through Staking.&lt;/p&gt;




&lt;p&gt;I consider Staking as a less risky investment for beginners and something really simple to set up !! &lt;/p&gt;

&lt;p&gt;This is probably very good news for you in 2022 since you will be able to get some Passive Incomre through your Crypto Investments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-staking-"&gt;
  &lt;/a&gt;
  What is Staking ?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Short answer:&lt;/strong&gt; a way to earn rewards (more coins) by freezing and holding certain cryptocurrencies.&lt;/p&gt;

&lt;p&gt;Staking is one of the best ways of earning Crypto Passive Income, it means freezing your coins in the blockchain so you can get an interest rate, an Annual Percentage Rate APR or an Annual Percentage Yield APY. &lt;/p&gt;

&lt;p&gt;Is a process more complex than that, it involves nodes which are validating the blocks on the blockchain and many other factors which I'll leave out in this guide to make it as simple as possible.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-much-can-i-earn-with-staking-"&gt;
  &lt;/a&gt;
  How much can I earn with Staking ?
&lt;/h2&gt;

&lt;p&gt;Running a simple calculation Today (market conditions change with time).&lt;/p&gt;

&lt;p&gt;Let's say you decide to stake 10000 TRX that would be a value around 800$, leaving the coins staked over a 3 year period will get you 11440 TRX. &lt;/p&gt;

&lt;p&gt;11440 TRX , if the price reaches 0.80 after those 3 years, means you would have: 9152$. &lt;strong&gt;Going from 800 to 9000 USD not bad for Crypto Passive Income.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is not financial advise, just letting you know some scenarios and how staking could work. I encourage you to research more about the coin and this option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--77Tomvq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsz5noxbu95i7xale6z9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--77Tomvq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsz5noxbu95i7xale6z9.png" alt="Tron TRX Staking Calculator" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;I wanna do this right Now , I said Now&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are many ways you can start staking TRX and many other coins, you would need a couple of Apps for doing that:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Guarda Wallet:&lt;/strong&gt; &lt;a href="https://grd.to/ref/GcgX"&gt;https://grd.to/ref/GcgX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Binance:&lt;/strong&gt; &lt;a href="https://accounts.binance.com/en/register?ref=K5XIYGD8"&gt;https://accounts.binance.com/en/register?ref=K5XIYGD8&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The links are friend referral links, they give you some perks like 10% discount on all coins bought in Binance for example.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another way of Staking is by going the DEFI way, in this case I would recommend you to take a look at Pancakeswap.finance&lt;/p&gt;

&lt;p&gt;You can easily stake some coins and tokens in Pancakeswap using Metamask as a wallet. (Questions on this contact me via telegram, link below)&lt;/p&gt;

&lt;p&gt;There are many other platforms for DEFI trading and staking, some of them offer awesome APR% but they run on the Ethereum network and transaction fees are so high that I don't consider them as viable options.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-simple-steps-to-stake-crypto-in-2022-for-passive-income"&gt;
  &lt;/a&gt;
  3 Simple Steps to stake crypto in 2022 for passive income:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Get a Wallet or Trading Platform capable of Staking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Buy the Crypto you are looking to stake.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Click on Earn, select the Crypto, click Stake.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Some of the highest Annual Percentage Rates APR% in Guarda are:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c9i5u5td--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7ap3hqrnr2y7ffp0l2f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c9i5u5td--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7ap3hqrnr2y7ffp0l2f.png" alt="Guarda APR rates" width="880" height="596"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These rates change from platform to platform and you might find better conditions on one trading app over the other, I encourage you to compare Guarda vs Binance for example when taking your decision.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#help-and-support"&gt;
  &lt;/a&gt;
  Help and Support:
&lt;/h3&gt;

&lt;p&gt;I'm available to help you out with any questions you might have through Discord and Telegram:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Discord:&lt;/strong&gt; &lt;a href="https://discord.gg/kTQpdTMArN"&gt;https://discord.gg/kTQpdTMArN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Telegram:&lt;/strong&gt; &lt;a href="https://t.me/cryptominingadvisor"&gt;https://t.me/cryptominingadvisor&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#is-staking-risky-in-any-way-"&gt;
  &lt;/a&gt;
  Is Staking Risky in any way ?
&lt;/h2&gt;

&lt;p&gt;Yes, as everything in Crypto there are some things you should know prior to staking.&lt;/p&gt;

&lt;p&gt;One of the main drawbacks of staking is that your coins might be locked up for a period of time, in some cases the platform might lock your coins up for 30 days.&lt;/p&gt;

&lt;p&gt;This means you are not able to trade your coins, you might get your coins back with certain penalties like loosing the APR earned so far if you decide to withdraw before the agreed period.&lt;/p&gt;

&lt;p&gt;In the case of Staking TRX on Guarda, you will have your coins locked only for the first 3 days. After that you can get your coins and your full rewards at any given time.&lt;/p&gt;

&lt;p&gt;Annother risk to consider are changes in prices of the coins, staking is great for long term holders who are staking a coin witha good future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-main-advantages-of-staking-in-2022-"&gt;
  &lt;/a&gt;
  What are the main advantages of staking in 2022 ?
&lt;/h2&gt;

&lt;p&gt;One of the two advantages of staking in 2022 for the traders and stakers, is the fact you will be able to generate more coins and rewards instead of leaving your coins sitting in your wallet.&lt;/p&gt;

&lt;p&gt;The second advantage of staking is for the blockchain, it helps contributing to the security and efficiency of the blockchain this is done via voting for certain validator nodes which are going to be securing the blocks on the chain.&lt;/p&gt;




&lt;p&gt;If you want to get some Crypto Passive Income in 2022, Staking is a very good way of doing so, I invite you to join staking and in case you have any doubts feel free to reach out so I can answer your questions !!&lt;/p&gt;

&lt;p&gt;If you are also looking to learn more about trading and staking I tried to prepare a very basic mini course for beginners which you can find below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=cjXWot3wA74&amp;amp;list=PLPsvPYOyfNwQcumrO05zAicj-LN-WAAzp"&gt;https://www.youtube.com/watch?v=cjXWot3wA74&amp;amp;list=PLPsvPYOyfNwQcumrO05zAicj-LN-WAAzp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cjXWot3wA74"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>crypto</category>
      <category>money</category>
      <category>staking</category>
    </item>
    <item>
      <title>Ethereum smart contract development using Solidity</title>
      <author>Chiranjeevi Tirunagari</author>
      <pubDate>Wed, 29 Dec 2021 17:42:32 +0000</pubDate>
      <link>https://dev.to/vchiranjeeviak/ethereum-smart-contract-development-using-solidity-4pj0</link>
      <guid>https://dev.to/vchiranjeeviak/ethereum-smart-contract-development-using-solidity-4pj0</guid>
      <description>&lt;p&gt;Today, I randomly came across a website called crypto zombies. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3gRdwlp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mh1rna7folzsu6pnz69a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3gRdwlp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mh1rna7folzsu6pnz69a.png" alt="Image of Crypto Zombie website" width="880" height="490"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cryptozombies.io/"&gt;crypto zombies&lt;/a&gt;&lt;br&gt;
It's a nice platform to learn solidity and smart contract dev. I completed a starting course (pretty easy if we know programming basics) which consists 15 chapters. Here r few learnings of today:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In every solidity program, we need to specify the version of language we are using in it using "pragma solidity ".&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A smart contract or simply contract is a building block of an Ethereum app. It contains the variables, functions etc. just like a class in java/c++.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This contract is deployed on blockchain which acts as the backend of our decentralized app (dapp).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A contract once deployed on blockchain can't be modified. So, we need to be very careful when writing them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are many data types in solidity just like other programming languages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Integers are broadly 2 types, signed (int) and unsigned (uint), there are different sizes as well (8, 16, .., 256 bits).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Strings are used to store from letters to sentences.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arrays are also 2 types. Static and Dynamic. When we know we make changes to an array in runtime, we should dynamic arrays as they provide push and pop functionality.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"function  ()   returns (){}".&lt;br&gt;
Above is the syntax to write a function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Public functions can be called from external contracts also and Private functions are restricted from doing it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A pure type function can only access data which is passed to it as parameters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A view type function can access data which is not passed to but present in that contract.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Struct is another data type which is user-defined which contains other variables in it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Parameters can be passed in 2 ways to a function. Pass by value and Pass by reference.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To pass a parameter with reference, we need to give keyword "memory" before the name of argument.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can create events, so that when that event occurs, we can perform certain things in our frontend.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"event  (arguments)". We can catch these events using web3JS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To fire that event in a function, we use "emit ".&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Push method of dynamic array returns the size of array after pushing.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;20.All this info in 20 mins read. Try it if u want to get started.&lt;/p&gt;

&lt;p&gt;My twitter: &lt;a href="https://twitter.com/VChiranjeeviAK"&gt;twitter&lt;/a&gt;&lt;br&gt;
My LinkedIn: &lt;a href="https://www.linkedin.com/in/chiranjeevi-tirunagari-685459191/"&gt;linkedin&lt;/a&gt;&lt;br&gt;
My showwcase: &lt;a href="https://www.showwcase.com/vchiranjeeviak"&gt;showwcase&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>web3</category>
    </item>
    <item>
      <title>My Year 2021: From Broke to Time, Location, and Financial Freedom</title>
      <author>Bonnie</author>
      <pubDate>Wed, 29 Dec 2021 17:42:20 +0000</pubDate>
      <link>https://dev.to/the_greatbonnie/my-year-2021-from-broke-to-time-location-and-financial-freedom-3am8</link>
      <guid>https://dev.to/the_greatbonnie/my-year-2021-from-broke-to-time-location-and-financial-freedom-3am8</guid>
      <description>&lt;p&gt;The year 2021 has been a roller coaster for me.&lt;/p&gt;

&lt;p&gt;It started with being broke and disappointed to end it by making close to $1000 in a few months.&lt;/p&gt;

&lt;p&gt;It led me to gain Time, Location, and Financial Freedom.&lt;/p&gt;

&lt;p&gt;Below is how things unfolded for me this year.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#january-broke-and-disappointed"&gt;
  &lt;/a&gt;
  January: Broke and disappointed
&lt;/h2&gt;

&lt;p&gt;I spent the whole of 2020 at home due to the pandemic. At the start of 2021, I wanted to leave home so badly to start my life afresh.&lt;/p&gt;

&lt;p&gt;The problem was that I was broke. I had tried to put my web development skills into good use by building people's websites. I could not land any clients, which made me disappointed.&lt;/p&gt;

&lt;p&gt;I decided to get a manual job that paid $6 per day. It would enable me to afford data to continue learning to improve my web development skills.&lt;/p&gt;

&lt;p&gt;I continued doing client outreach for my freelance business, but I could not convert potential clients to paying customers.&lt;/p&gt;

&lt;p&gt;That is when I realized I was doing everything wrong.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#may-a-fresh-start"&gt;
  &lt;/a&gt;
  May: A fresh start
&lt;/h2&gt;

&lt;p&gt;I started to learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build converting websites.&lt;/li&gt;
&lt;li&gt;Sell my services.&lt;/li&gt;
&lt;li&gt;Build an audience.&lt;/li&gt;
&lt;li&gt;Build a personal brand.&lt;/li&gt;
&lt;li&gt;Write.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I left home on 28th May (I count this as my second birthday) and moved to another town. It was after a relative told me they were starting a new business, and if I wanted, I could be a business partner. My task was to run the business.&lt;/p&gt;

&lt;p&gt;In June, I joined Tech Twitter Community, and it was the best decision I have ever made on Twitter. It helped me to make international friends and meaningful connections.&lt;/p&gt;

&lt;p&gt;After three months, the business I was running failed so terribly. I had no option but to get a 9 to 5 job to help me pay the bills.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#november-gaining-time-location-and-financial-freedom"&gt;
  &lt;/a&gt;
  November: Gaining Time, Location, and Financial Freedom
&lt;/h2&gt;

&lt;p&gt;One and half months into my 9 to 5 job, I received a Twitter DM. Someone asked me if I could be interested in writing Technical Articles for their blog (&lt;a href="https://arctype.com/blog/"&gt;Arctype Blog&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;They told me they pay between $200 to $300 per article. I did not think twice, and I accepted. I had wanted to give technical writing a shot, and this opportunity couldn't have come at a better time.&lt;/p&gt;

&lt;p&gt;I was paid $300 after working on my first technical article. I quit my 9 to 5 job and relocated to the city(Nairobi, Kenya).&lt;/p&gt;

&lt;p&gt;Within two and half months, I had made $600 from technical writing. The technical writing earnings brought my earnings close to $1000 in three months for the year.&lt;/p&gt;

&lt;p&gt;After moving to the city, I had gained something that I had always wanted... FREEDOM!!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Time Freedom.&lt;/li&gt;
&lt;li&gt;Location Freedom.&lt;/li&gt;
&lt;li&gt;Financial Freedom.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#plans-for-2022"&gt;
  &lt;/a&gt;
  Plans for 2022
&lt;/h2&gt;

&lt;p&gt;My plan for 2022 is to crush my goals and become the best version of myself.&lt;/p&gt;

&lt;p&gt;Some of the goals I want to achieve by the end of the year are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make $1000 per month.&lt;/li&gt;
&lt;li&gt;Hit 20K followers on Twitter.&lt;/li&gt;
&lt;li&gt;Get 1000 visitors to my blog every month.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will make $1000 per month by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Building websites.&lt;/li&gt;
&lt;li&gt;Writing technical articles.&lt;/li&gt;
&lt;li&gt;Creating HTML and CSS templates.&lt;/li&gt;
&lt;li&gt;Selling ebooks.&lt;/li&gt;
&lt;li&gt;Affiliate marketing.&lt;/li&gt;
&lt;li&gt;Sponsored posts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will hit 20K followers on Twitter by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating valuable content on Personal Development.&lt;/li&gt;
&lt;li&gt;Creating valuable content on Web Development.&lt;/li&gt;
&lt;li&gt;Creating valuable content on writing.&lt;/li&gt;
&lt;li&gt;Sharing my story and my wins.&lt;/li&gt;
&lt;li&gt;Engaging with content from other accounts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will get 1000 visitors to my blog every month by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Publishing valuable blog posts in my blog.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;My 2021 was about gaining Freedom.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Time Freedom.&lt;/li&gt;
&lt;li&gt;Location Freedom.&lt;/li&gt;
&lt;li&gt;Financial Freedom.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My 2022 will be about crushing my goals and becoming the best version of myself.&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>productivity</category>
      <category>writing</category>
      <category>devjournal</category>
    </item>
  </channel>
</rss>
