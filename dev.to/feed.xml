<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Running rspec tests with keyboard shortcuts in VS Code</title>
      <author>Emily Giurleo</author>
      <pubDate>Wed, 09 Dec 2020 03:26:53 +0000</pubDate>
      <link>https://dev.to/emilygiurleo/running-rspec-tests-with-keyboard-shortcuts-in-vs-code-375o</link>
      <guid>https://dev.to/emilygiurleo/running-rspec-tests-with-keyboard-shortcuts-in-vs-code-375o</guid>
      <description>&lt;p&gt;Running tests is an important part of the code-writing process, but typing the same commands over and over again can slow down your workflow.&lt;/p&gt;

&lt;p&gt;Earlier this year, I was pair-programming with a new friend at the virtual &lt;a href="https://rubyforgood.org"&gt;Ruby For Good&lt;/a&gt; conference, and he showed me a trick that blew my mind -- he used keyboard shortcuts for running rspec tests! He even had a shortcut that only ran the test he was currently working on.&lt;/p&gt;

&lt;p&gt;I can't believe this hadn't occurred to me sooner.&lt;/p&gt;

&lt;p&gt;I recently started a new job, so I decided to set up similar keyboard shortcuts in VS Code. Here's how I did it:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-user-tasks" class="anchor"&gt;
  &lt;/a&gt;
  Create User Tasks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/docs/editor/tasks"&gt;Tasks&lt;/a&gt; are a feature in VS Code that allow you to automate common workflows, like linting, building, or even testing! As with most features in VS Code, it is possible to build and customize your own tasks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-the-user-tasks-settings" class="anchor"&gt;
  &lt;/a&gt;
  Open the "User Tasks" settings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Open the "all commands" menu by pressing &lt;code&gt;Cmd + Shift + P&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Type "Open User Tasks," and select the menu item that comes up&lt;/li&gt;
&lt;li&gt;This should open a file called &lt;code&gt;tasks.json&lt;/code&gt;, which should have the following format:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "version": "2.0.0",
  "tasks": [ ... ] // &amp;lt;-- There'll be some stuff in this array
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-a-new-task-to-your-user-tasks" class="anchor"&gt;
  &lt;/a&gt;
  Add a new task to your User Tasks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Copy and paste the following code into the tasks array in your &lt;code&gt;tasks.json&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "(ruby) run all tests",
      "type": "shell",
      "command": "bundle exec rspec",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
      }
    },
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This task has the following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;label&lt;/code&gt;: The name of the task&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;type&lt;/code&gt;: Telling VS Code to run this task as a shell command&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;command&lt;/code&gt;: The command to run in the shell (in this case, run all the rspec tests in this project)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;presentation&lt;/code&gt;: This is a list of options determining how the output of the task is displayed. Read more about those in the &lt;a href="https://code.visualstudio.com/docs/editor/tasks"&gt;VS Code Tasks Documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#add-the-rest-of-your-tasks-to-your-user-tasks" class="anchor"&gt;
  &lt;/a&gt;
  Add the rest of your tasks to your User Tasks
&lt;/h3&gt;

&lt;p&gt;In the previous step, you added one task, but you can add as many as you want! I have three tasks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;bundle exec rspec&lt;/code&gt;: Run all the rspec tests in the project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bundle exec rspec &amp;lt;filename&amp;gt;&lt;/code&gt;: Run all the tests in a file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bundle exec rspec &amp;lt;filename&amp;gt;:&amp;lt;line number&amp;gt;&lt;/code&gt;: Run the test at a specific line number&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's what my &lt;code&gt;tasks.json&lt;/code&gt; file looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "(ruby) run all tests",
      "type": "shell",
      "command": "bundle exec rspec",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
      }
    },
    {
      "label": "(ruby) run tests",
      "type": "shell",
      "command": "bundle exec rspec ${relativeFile}",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
      }
    },
    {
      "label": "(ruby) run current test",
      "type": "shell",
      "command": "bundle exec rspec ${relativeFile}:${lineNumber}",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
      }
    },
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You'll notice that these two new commands use the variables &lt;code&gt;relativeFile&lt;/code&gt; and &lt;code&gt;lineNumber&lt;/code&gt;. These will be replaced with the relative path to the current open file and the line number where your cursor is located. &lt;/p&gt;

&lt;p&gt;Using these variables allows you to run all the tests in the file you currently have open, or even the specific test that you currently have your cursor on!&lt;/p&gt;

&lt;p&gt;You can read more about these variables in &lt;a href="https://code.visualstudio.com/docs/editor/variables-reference"&gt;VS Code's Variable Reference&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-keyboard-shortcuts" class="anchor"&gt;
  &lt;/a&gt;
  Add keyboard shortcuts
&lt;/h2&gt;

&lt;p&gt;Once you've added new User Tasks, you can create custom shortcuts to run them whenever you want.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-the-keyboard-shortcuts-settings" class="anchor"&gt;
  &lt;/a&gt;
  Open the Keyboard Shortcuts settings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Open the "all commands" menu by pressing &lt;code&gt;Cmd + Shift + P&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Type "Open Keyboard Shortcuts (JSON)," and select the menu item that comes up&lt;/li&gt;
&lt;li&gt;This should open a file called &lt;code&gt;keybindings.json&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-new-shortcuts" class="anchor"&gt;
  &lt;/a&gt;
  Create new shortcuts
&lt;/h3&gt;

&lt;p&gt;Here's what my &lt;code&gt;keybindings.json&lt;/code&gt; file looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
  {
    "key": "cmd+shift+0",
    "command": "workbench.action.tasks.runTask",
    "args": "(ruby) run all tests"
  },
  {
    "key": "cmd+shift+9",
    "command": "workbench.action.tasks.runTask",
    "args": "(ruby) run tests"
  },
  {
    "key": "cmd+shift+8",
    "command": "workbench.action.tasks.runTask",
    "args": "(ruby) run current test"
  }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For each keyboard shortcut, the &lt;code&gt;key&lt;/code&gt; option determines which keys you have to press to activate the shortcut. I've opted for &lt;code&gt;Cmd + Shift + 0&lt;/code&gt;, &lt;code&gt;Cmd + Shift + 9&lt;/code&gt;, and &lt;code&gt;Cmd + Shift + 8&lt;/code&gt;, but you should pick key combinations that feel comfortable to you and don't interfere with any existing keyboard shortcuts you like to use.&lt;/p&gt;

&lt;p&gt;Use the &lt;code&gt;args&lt;/code&gt; option to specify which task gets run with each shortcut. Make sure this value matches the &lt;code&gt;label&lt;/code&gt; you used when you created the User Tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#profit" class="anchor"&gt;
  &lt;/a&gt;
  Profit
&lt;/h2&gt;

&lt;p&gt;Now, when you use one of your custom shortcuts, VS Code will open a new terminal tab and run your tests for you! No more typing out a long command or remembering exactly which line number your test is on.&lt;/p&gt;

&lt;p&gt;This has saved me so much time in the past couple weeks, and I hope it saves you time, too!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2WP2j15w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mkl6v3z6y7qqzus7be72.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2WP2j15w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mkl6v3z6y7qqzus7be72.gif" alt="Kapture 2020-12-08 at 22.36.30"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>testing</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Git hook is the new Husky</title>
      <author>Krzysztof Kaczyński</author>
      <pubDate>Tue, 08 Dec 2020 20:17:02 +0000</pubDate>
      <link>https://dev.to/krzysztofkaczy9/do-you-really-need-husky-247b</link>
      <guid>https://dev.to/krzysztofkaczy9/do-you-really-need-husky-247b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#backstory" class="anchor"&gt;
  &lt;/a&gt;
  Backstory
&lt;/h2&gt;

&lt;p&gt;Some time ago I was asked to introduce an automatization which would check if committed files fit linter rules responsible for uniform code formatting and code quality (e.g.: &lt;code&gt;eslint&lt;/code&gt;, &lt;code&gt;prettier&lt;/code&gt;, &lt;code&gt;stylelint&lt;/code&gt; e.t.c.)  &lt;/p&gt;

&lt;p&gt;After I did some research it came out that the most common way to do that is to use &lt;a href="https://github.com/typicode/husky"&gt;&lt;code&gt;husky&lt;/code&gt;&lt;/a&gt; with &lt;a href="https://github.com/okonet/lint-staged"&gt;&lt;code&gt;lint-staged&lt;/code&gt;&lt;/a&gt;. I installed and configured those tools. Everything worked as expected. If the file contained any errors which couldn't be auto-fixed by linter, committing process was interrupted and the error message was shown in the terminal. Unfortunately, this solution has one problem. Running &lt;code&gt;husky&lt;/code&gt; and &lt;code&gt;lint-staged&lt;/code&gt; takes much more time than I expected. Sometimes it even took more time than the committing process itself (including checking the files for any errors).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#githooks" class="anchor"&gt;
  &lt;/a&gt;
  Git-hooks
&lt;/h2&gt;

&lt;p&gt;As I had some time left after I completed this task I decided that I will look for another solution. I searched a little more and I found &lt;a href="https://git-scm.com/docs/githooks"&gt;&lt;code&gt;git-hooks&lt;/code&gt;&lt;/a&gt;. I read a bit more about &lt;code&gt;git-hooks&lt;/code&gt; and it came out that &lt;code&gt;git&lt;/code&gt; offer native solution to do some custom actions at certain points in &lt;code&gt;git&lt;/code&gt; execution for example committing changes. &lt;a href="https://git-scm.com/docs/githooks#_pre_commit"&gt;&lt;code&gt;pre-commit&lt;/code&gt;&lt;/a&gt; caught my attention, which is briefly described like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"This hook is invoked by &lt;a href="https://git-scm.com/docs/git-commit"&gt;git-commit[1]&lt;/a&gt;, and can be bypassed with the &lt;code&gt;--no-verify&lt;/code&gt; option. It takes no parameters, and is invoked before obtaining the proposed commit log message and making a commit. ..."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From the above text it follows, that before commit becomes submitted we have some time to execute custom operations like linting and auto-fixing staged files. All files changed in this phase can be added and included in the same commit (it means that we do not have to create a separated commit to apply changes from linters auto-fixes). After I read some about &lt;code&gt;shell&lt;/code&gt; scripting I was ready to create my first &lt;code&gt;git-hook&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pre-commit&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="nv"&gt;RED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s2"&gt;33[1;31m"&lt;/span&gt;
&lt;span class="nv"&gt;GREEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s2"&gt;33[1;32m"&lt;/span&gt;
&lt;span class="nv"&gt;NC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s2"&gt;33[0m"&lt;/span&gt;
&lt;span class="nv"&gt;linter_exit_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="nv"&gt;all_ts_files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;git diff &lt;span class="nt"&gt;--cached&lt;/span&gt; &lt;span class="nt"&gt;--diff-filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;d &lt;span class="nt"&gt;--name-only&lt;/span&gt; | &lt;span class="nb"&gt;grep &lt;/span&gt;ts&lt;span class="nv"&gt;$)&lt;/span&gt;
&lt;span class="nv"&gt;all_scss_files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;git diff &lt;span class="nt"&gt;--cached&lt;/span&gt; &lt;span class="nt"&gt;--diff-filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;d &lt;span class="nt"&gt;--name-only&lt;/span&gt; | &lt;span class="nb"&gt;grep &lt;/span&gt;scss&lt;span class="nv"&gt;$)&lt;/span&gt;
./node_modules/.bin/eslint &lt;span class="nv"&gt;$all_ts_files&lt;/span&gt; &lt;span class="nt"&gt;--quiet&lt;/span&gt; &lt;span class="nt"&gt;--fix&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./node_modules/.bin/stylelint &lt;span class="nv"&gt;$all_scss_files&lt;/span&gt; &lt;span class="nt"&gt;--stdin&lt;/span&gt; &lt;span class="nt"&gt;--quiet&lt;/span&gt; &lt;span class="nt"&gt;--fix&lt;/span&gt;
&lt;span class="nv"&gt;linter_exit_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
git add &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="nv"&gt;$all_ts_files&lt;/span&gt; &lt;span class="nv"&gt;$all_scss_files&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$linter_exit_code&lt;/span&gt; &lt;span class="nt"&gt;-ne&lt;/span&gt; 0 &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RED&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ❌ Linter errors have occurred ( ͡ಥ ͜ʖ ͡ಥ)&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NC&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;exit &lt;/span&gt;1
&lt;span class="k"&gt;else
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GREEN&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ✔ Eslint and Stylelint did not find any errors [̲̅&lt;/span&gt;&lt;span class="nv"&gt;$̲&lt;/span&gt;&lt;span class="s2"&gt;̅(̲̅ ͡° ͜ʖ ͡°̲̅)̲̅&lt;/span&gt;&lt;span class="nv"&gt;$̲&lt;/span&gt;&lt;span class="s2"&gt;̅]&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NC&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;exit &lt;/span&gt;0
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What is going on in above code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;git diff --cached --diff-filter=d --name-only | grep ts$&lt;/code&gt;&lt;/strong&gt; → we are collecting all staged files, then we are filtering out deleted ones (if you do not do that your linter will throw an error for those files because this linter won't be able to resolve paths for deleted files) then I am using &lt;code&gt;grep&lt;/code&gt; to take only files which I am interested in. In my case, I am collecting &lt;code&gt;.ts&lt;/code&gt; files for &lt;code&gt;eslint&lt;/code&gt; and &lt;code&gt;.scss&lt;/code&gt; for stylelint,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;linter_exit_code=$?&lt;/code&gt;&lt;/strong&gt; → save &lt;em&gt;exit code&lt;/em&gt; of last executed action(&lt;code&gt;0&lt;/code&gt; in case no errors or errors that can be auto-fixed by linter or &lt;code&gt;1&lt;/code&gt; in case of errors not fixable by linters)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;git add -f $all_ts_files $all_scss_files&lt;/code&gt;&lt;/strong&gt; → add files auto-fixed by linters. We need to use &lt;code&gt;-f&lt;/code&gt; flag to force &lt;code&gt;git add&lt;/code&gt; in case of &lt;code&gt;$all_ts_files&lt;/code&gt; and &lt;code&gt;$all_scss_files&lt;/code&gt; are empty&lt;/li&gt;
&lt;li&gt;At the end of this script I am displaying proper information basing on &lt;em&gt;exit code&lt;/em&gt; value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After we create a &lt;code&gt;git-hook&lt;/code&gt; we have to remember to update &lt;code&gt;git&lt;/code&gt; configuration or create a symlink between &lt;code&gt;git&lt;/code&gt; configuration and created &lt;code&gt;git-hook&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git&lt;/code&gt; command (should work for every operating system)&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config core.hooksPath ./git-hooks
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;symlink (Linux)&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ln -s -f ../../git-hooks/pre-commit .git/hooks/pre-commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is worth to add above scripts to &lt;code&gt;npm postinstall&lt;/code&gt;, because of that every developer which will clone our repository and run &lt;code&gt;npm install&lt;/code&gt; script will also configure &lt;code&gt;git-hooks&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Using &lt;code&gt;git-hooks&lt;/code&gt; instead of &lt;code&gt;husky&lt;/code&gt; and &lt;code&gt;lint-staged&lt;/code&gt; came out to be an excellent idea because committing time was sped up about twice. In addition, I got rid of two additional dependencies in the project, what can become very useful especially in case of &lt;code&gt;husky&lt;/code&gt; because from &lt;code&gt;Husky 5&lt;/code&gt; documentation we can find out that &lt;code&gt;Husky 5&lt;/code&gt; will be &lt;a href="https://typicode.github.io/husky/#/"&gt;&lt;strong&gt;free only for open-source projects&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seven-steps-to-set-up-raw-githooks-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Seven steps to set up &lt;code&gt;git-hooks&lt;/code&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;In project directory create &lt;em&gt;&lt;code&gt;git-hooks&lt;/code&gt;&lt;/em&gt; directory&lt;/li&gt;
&lt;li&gt;Go to &lt;em&gt;&lt;code&gt;.git/hooks&lt;/code&gt;&lt;/em&gt; directory&lt;/li&gt;
&lt;li&gt;From the name of hook which you want to use remove &lt;code&gt;.sample&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Move this hook into created &lt;em&gt;&lt;code&gt;git-hooks&lt;/code&gt;&lt;/em&gt; directory&lt;/li&gt;
&lt;li&gt;Create your &lt;code&gt;git-hook&lt;/code&gt; body&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;git&lt;/code&gt; configuration or create a symlink from &lt;em&gt;&lt;code&gt;git-hooks&lt;/code&gt;&lt;/em&gt; to &lt;em&gt;&lt;code&gt;.git/hooks&lt;/code&gt;&lt;/em&gt; directory&lt;/li&gt;
&lt;li&gt;Add the appropriate script to &lt;code&gt;npm postinstall&lt;/code&gt; command &lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>git</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Here Are 8 Questions You Should Ask Your Employer Before Taking the Job</title>
      <author>Indrek Lasn</author>
      <pubDate>Tue, 08 Dec 2020 19:48:20 +0000</pubDate>
      <link>https://dev.to/indreklasn/here-are-8-questions-you-should-ask-your-employer-before-taking-the-job-5c9o</link>
      <guid>https://dev.to/indreklasn/here-are-8-questions-you-should-ask-your-employer-before-taking-the-job-5c9o</guid>
      <description>&lt;p&gt;This article was originally published at &lt;a href="https://thewholesome.dev/p/here-are-8-questions-you-should-ask"&gt;https://thewholesome.dev/p/here-are-8-questions-you-should-ask&lt;/a&gt; &lt;/p&gt;




&lt;p&gt;Working as a developer is a lot of fun — you get to solve challenging and complex tasks every day. Oh, and the pay is okay too.&lt;/p&gt;

&lt;p&gt;Often, your team consists of smart developers who are eager to solve the tasks as a team. Great teammates are crucial when working on larger projects, and so is the environment you work in. &lt;/p&gt;

&lt;p&gt;You don’t want to burn out in two weeks — ideally, you want to work there for years to fully see the project flourish.&lt;/p&gt;

&lt;p&gt;Finding the right developer job can be tricky since there are a lot of crappy jobs out there. A crappy developer job will you make unhappy, depressed, and unfilled — It’s a rough road you would want to avoid.&lt;/p&gt;

&lt;p&gt;Thus, I put together a list of questions you should ask your employer before taking on the job. These questions will give you a rough estimation of how much you’ll be appreciated by the company.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-how-often-do-you-work-evenings-and-weekends" class="anchor"&gt;
  &lt;/a&gt;
  1. How Often Do You Work Evenings and Weekends?
&lt;/h2&gt;

&lt;p&gt;A simple yet important question — this tells you if they respect work-life balance or not. You might have a life outside of work, or you might have a dog, wife, and kids that you’re looking forward to being with.&lt;/p&gt;

&lt;p&gt;If your employer doesn’t respect your work-life balance, you have hot potatoes in your lap.&lt;/p&gt;

&lt;p&gt;If you’re in your 20s, this might not be as big of a red flag, but the older you get, the more you’re going to appreciate this. &lt;/p&gt;

&lt;p&gt;Remember, no company is loyal to its employees — it’s a hoax. The company is there to make money. That’s their ultimate goal, and they’ll do whatever it takes, including working you to death. You have to fight for your freedom.&lt;/p&gt;

&lt;p&gt;If you have the chance, ask another developer on the team this question. The more they beat around the bush, the more overworked they are. If you’re not getting honest and forthright answers, assume they’re not telling you the truth.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-whats-the-average-turnover-rate" class="anchor"&gt;
  &lt;/a&gt;
  2. What’s the Average Turnover Rate?
&lt;/h2&gt;

&lt;p&gt;The turnover rate refers to the percentage of employees leaving a company within a certain period of time. Companies keep track of their average tenure —it’s a measurement for them to understand their workforce better.&lt;/p&gt;

&lt;p&gt;Firing people is expensive — it’s the last thing a company wants to do. Let’s say you’re about to work on a massive project, and if there are only two core developers left out of 25, that’s a huge red flag.&lt;/p&gt;

&lt;p&gt;With limited information, you have to figure out why so many developers left the project. &lt;/p&gt;

&lt;p&gt;Does the interviewer provide you with a reasonable explanation of why so many people left in a flurry? If they tell you they don’t know the answer, assume they're not being honest, unless it’s a startup at a really early-stage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-whats-a-typical-day-like-in-this-position" class="anchor"&gt;
  &lt;/a&gt;
  3. What’s a Typical Day Like in This Position?
&lt;/h2&gt;

&lt;p&gt;This question gives the interviewer the opportunity to talk about the best bits of the job — and if they don’t open up and start talking out of delight, something might be off.&lt;/p&gt;

&lt;p&gt;Really, there are no right or wrongs here. I worked for a company where we all watched “South Park” during lunch breaks. At a different startup, we went swimming near the lake during lunch.&lt;/p&gt;

&lt;p&gt;Each company has a different culture, and this question gives you the chance to clear things up and see if you’re potentially a good match for the company and vice versa.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-how-have-you-supported-developer-professional-development-in-the-past" class="anchor"&gt;
  &lt;/a&gt;
  4. How Have You Supported Developer Professional Development in the Past?
&lt;/h2&gt;

&lt;p&gt;If you’re just starting out, you really want a team that will allow time for a senior dev to mentor you as you’re completing your work. This is expected of more experienced developers, and you should try to find a place that values this type of mentorship. &lt;/p&gt;

&lt;p&gt;If they’re a company that will just throw you to the wolves for your tasks, it’s probably best to skip them, unless you thrive in those types of environments.&lt;/p&gt;

&lt;p&gt;Every decent company that wants to retain its talent should work very hard on educating its junior ranks while letting the more experienced developers explore different paths. &lt;/p&gt;

&lt;p&gt;Traveling for developer conferences, coding courses, guest speakers, and in-house conferences are great ways for developers to share their knowledge and learn new things. A great company will keep its developers by providing new and more challenging tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-ask-for-a-tour-around-the-office-at-the-end" class="anchor"&gt;
  &lt;/a&gt;
  5. Ask for a Tour Around the Office at the End
&lt;/h2&gt;

&lt;p&gt;Tours are important — they show initiative and that you’re interested and actually want the gig.&lt;/p&gt;

&lt;p&gt;Asking for a tour also gives you an exact image of what your future working environment looks like. If you get off the elevator and see everyone working shoulder to shoulder on pairs of tiny 19" monitors with barely enough room to move their mouse without hitting someone else’s keyboard — you’ve got a problematic employer.&lt;/p&gt;

&lt;p&gt;During the tour, and even when you first walk into the place, pay attention to the people. Are they happy? Smiling? Conversing? Or are they all miserable and have bags under their eyes? This is really telling of the workplace.&lt;/p&gt;

&lt;p&gt;If you’re not leaving the office with a big grin on your face the first day, chances are high you might never leave the building with a smile on your face.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-whats-the-best-and-worst-thing-about-working-here" class="anchor"&gt;
  &lt;/a&gt;
  6. What’s the Best and Worst Thing About Working Here?
&lt;/h2&gt;

&lt;p&gt;This is my favorite question to ask in any sort of interview since it really turns the tables. It seems obvious, but I’ve had multiple recruiters have to stop and think about this one before giving me an answer.&lt;/p&gt;

&lt;p&gt;A perfect job doesn’t exist — every job has its ups and downs. It’s your task to find out the good and bad parts and decide for yourself.&lt;/p&gt;

&lt;p&gt;I remember asking this question from a chief operating officer (COO) in a medium-sized company, and the answer I got was very, very vague. It almost seemed like he was annoyed with the question, or he was just scared to say anything bad about the company.&lt;/p&gt;

&lt;p&gt;You guessed it — I didn’t take the job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-ask-them-to-describe-their-software-development-lifecycle-how-often-do-they-release-code" class="anchor"&gt;
  &lt;/a&gt;
  7. Ask Them to Describe Their Software Development Lifecycle (How Often Do They Release Code?)
&lt;/h2&gt;

&lt;p&gt;If they’re constantly trying to hit deadlines, have limited testing environments, don’t have automated tests, don’t have multi-tenancy, and have a horrific deployment process, then walk away.&lt;/p&gt;

&lt;p&gt;It sucks to work your butt off for six months only to be told, “Hey, scratch that, we’re not going to release the product.”&lt;/p&gt;

&lt;p&gt;Anger, disappointment, and resentment will follow, and you’ll start to reject ideas from the management team. After all, you worked nights and days only to be tossed aside. This is a downward spiral into unhappiness, unfulfillment, and probably switching companies.&lt;/p&gt;

&lt;p&gt;I’ve learned to ask what days they release their software on — if the answer is Fridays before the afternoon, you have a problem. &lt;/p&gt;

&lt;p&gt;Why would any company that makes money online make such critical changes during the hours when everyone has gone home and forgotten about their jobs?&lt;/p&gt;

&lt;p&gt;Most people have left the office already, and if things were to go wrong, there’s only a small fleet ready to handle the issue. A sensible company will push a newer version of their software when the people are in or near the office, not when they’re spending time with their families.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-ask-about-the-companys-long-term-vision-what-are-your-plans-for-the-next-five-years" class="anchor"&gt;
  &lt;/a&gt;
  8. Ask About the Company’s Long Term Vision (What Are Your Plans for the Next Five Years?)
&lt;/h2&gt;

&lt;p&gt;This question gives the interviewer a chance to give you a clear view of the company's vision. Is the vision exciting and clear? Do you agree and align with that vision?&lt;/p&gt;

&lt;p&gt;You can usually tell when a company has a great vision. Even if it’s a startup. Usually, vision is what feeds people. A place with no vision often has a horrible culture and high turnover.&lt;/p&gt;

&lt;p&gt;You’re going to spend most of your life in that workplace and environment, and so it’s critical to be on board and agree as a collective about what you want to achieve.&lt;/p&gt;

&lt;p&gt;It’s very hard to hide the fact that you’re not passionate about the project and vision. So, save yourself the trouble and hassle if you’re just not feeling like that’s something you would want to do for the longterm. &lt;/p&gt;

&lt;p&gt;There are hundreds of thousands of developer jobs — pick the one that suits you the most. I would pick the job where I believe in the company’s vision over any other job, even one that pays double. Of course, don’t let the company take advantage of you. They should still offer competitive pay even if the vision is exciting.&lt;/p&gt;

&lt;p&gt;Conclusion&lt;br&gt;
Thanks for reading, I hoped you learned something new. After reading this article, you should be equipped with knowledge on how to find that exciting new job the next time you’re in the job market.&lt;/p&gt;

&lt;p&gt;Feel free to sign up to get future articles in your email inbox. &lt;a href="https://thewholesome.dev/"&gt;https://thewholesome.dev/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to View Your Live Localhost From Your Laptop on Your Mobile Device</title>
      <author>Brenda Michelle</author>
      <pubDate>Tue, 08 Dec 2020 19:34:29 +0000</pubDate>
      <link>https://dev.to/brendamichellle/how-to-view-your-localhost-from-your-laptop-on-your-mobile-device-516c</link>
      <guid>https://dev.to/brendamichellle/how-to-view-your-localhost-from-your-laptop-on-your-mobile-device-516c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#make-sure-your-project-is-responsive-by-viewing-it-live-on-your-mobile-device" class="anchor"&gt;
  &lt;/a&gt;
  Make sure your project is responsive by viewing it live on your mobile device.
&lt;/h2&gt;




&lt;p&gt;Before you get started with this tutorial you should have VSCode installed as well as the live server extension. There are tutorials online just ask google or check out &lt;a href="https://www.instagram.com/p/CIgls16Aihg/"&gt;@sasha.codes&lt;/a&gt; Instagram post with a mini-tutorial on how to install and use it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-first-start-your-live-server-through-vscode" class="anchor"&gt;
  &lt;/a&gt;
  1. First, start your live server through VSCode
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3gP-tSsV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fiujvtqwalie50kbm0my.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3gP-tSsV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fiujvtqwalie50kbm0my.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-then-look-up-your-ip-address" class="anchor"&gt;
  &lt;/a&gt;
  2. Then look up your IP address.
&lt;/h3&gt;

&lt;p&gt;If you are on a mac. You can go to your 'system preferences' and then 'network' and there you will find your IP address. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6q7LsS4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qkl98qic7dhscxea7uvc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6q7LsS4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qkl98qic7dhscxea7uvc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D7_0AMUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2sw4hcz7v3webe46gpyq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D7_0AMUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2sw4hcz7v3webe46gpyq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nXmdHoaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/amcnqu7n3kmrc2bxenjx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nXmdHoaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/amcnqu7n3kmrc2bxenjx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are on a Windows go to your taskbar open the wi-fi network you are connected to and there you should find the IP address (If this doesn't work try a google search since every computer is a bit different your IP address might be located somewhere else)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-make-sure-your-laptop-and-mobile-device-are-connected-to-the-same-wifi-and-that-your-mobile-data-is-turned-off" class="anchor"&gt;
  &lt;/a&gt;
  3. Make sure your laptop and mobile device are connected to the same wifi and that your mobile data is turned off.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#4-input-url-into-your-phones-browser" class="anchor"&gt;
  &lt;/a&gt;
  4. Input URL into your phone's browser
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://YOUR"&gt;http://YOUR&lt;/a&gt; IP ADDRESS:YOUR PORT NUMBER/YOUR FILE NAME&lt;/p&gt;

&lt;p&gt;for example, mine would be: &lt;br&gt;
&lt;a href="http://196.168.0.166:5500/index.html"&gt;http://196.168.0.166:5500/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tz2OZh2P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h3wjofebl022c9mhxtws.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tz2OZh2P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h3wjofebl022c9mhxtws.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-enjoy" class="anchor"&gt;
  &lt;/a&gt;
  5. Enjoy
&lt;/h3&gt;

&lt;p&gt;You should be all set. Every time you make a change to the HTML file and save it you should be able to see the live version on your laptop and mobile device. If it does not show try reloading the page. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OV1NoDKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8d56hufiyqz7yioh17qe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OV1NoDKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8d56hufiyqz7yioh17qe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
                             &lt;em&gt;On my laptop&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5OGD4iqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/teleimzs0hjw448bc5ny.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5OGD4iqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/teleimzs0hjw448bc5ny.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
                             &lt;em&gt;On my mobile device&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you are even a bit intrigued and are interested in learning to code &lt;a href="https://www.instagram.com/brendamichellle/"&gt;lets connect&lt;/a&gt;! I would love to help in any way I can.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Photo by &lt;a href="https://unsplash.com/@tvick?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Taylor Vick&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/server?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>android</category>
      <category>mobile</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Build your Backend with Netlify Functions in 20 Minutes</title>
      <author>Kyle</author>
      <pubDate>Tue, 08 Dec 2020 16:38:16 +0000</pubDate>
      <link>https://dev.to/thisdotmedia/build-your-backend-with-netlify-functions-in-20-minutes-2gc4</link>
      <guid>https://dev.to/thisdotmedia/build-your-backend-with-netlify-functions-in-20-minutes-2gc4</guid>
      <description>&lt;p&gt;Netlify makes deploying your front end quick and easy, and Netlify functions makes running a serverless backend just as easy.&lt;/p&gt;

&lt;p&gt;In this guide, we'll get setup on how to use Netlify functions.  As an indie developer, you should embrace serverless offerings because of their low barrier to entry and generous free tiers.  And as an enterprise shop, you should seriously consider them for an extremely cheap, fast, and scalable way to build out your backend infrastructure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-cases-what-can-you-build" class="anchor"&gt;
  &lt;/a&gt;
  Use Cases - What can you build?
&lt;/h2&gt;

&lt;p&gt;Modern JavaScript frameworks allow us to build large and complex applications on the client, but they can occasionally run into limitations.  For everything else, there's the "backend" which excels at handling some of these use cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Protecting Secrets &amp;amp; Credentials&lt;/li&gt;
&lt;li&gt;Server Side Rendering&lt;/li&gt;
&lt;li&gt;Sending Emails&lt;/li&gt;
&lt;li&gt;Handling File IO&lt;/li&gt;
&lt;li&gt;Running centralized logic&lt;/li&gt;
&lt;li&gt;Executing tasks off the main thread&lt;/li&gt;
&lt;li&gt;Bypassing CORS issues for locked down APIs&lt;/li&gt;
&lt;li&gt;Providing Progressive Enhancement / NoScript Fallback&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#composition-of-a-function" class="anchor"&gt;
  &lt;/a&gt;
  Composition of a Function
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.netlify.com/products/functions/"&gt;Netlify Functions&lt;/a&gt; provides a wrapper around &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambdas&lt;/a&gt;.  While the Netlify documentation should be sufficient, it's good to know that there's an escape hatch if you ever want to run on your own AWS subscription.  However, Netlify handles some of the deployment magic for you, so let's start there.&lt;/p&gt;

&lt;p&gt;Here's the bare bones of a Netlify function in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you're familiar with running JavaScript on Node, this should look somewhat familiar.  Each function should live in its own file, and will execute whatever is assigned to &lt;code&gt;exports.handler&lt;/code&gt;. We have access to &lt;code&gt;event&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt;.  We can run whatever code we need on Node, and return whatever response type we'd like.&lt;/p&gt;

&lt;p&gt;To set this up, lets create an empty repository on GitHub.  We need to add functions to a folder.  While we can use any name, a common pattern is to create a folder name &lt;code&gt;functions&lt;/code&gt;. Let's add a file in there called &lt;code&gt;hello.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//functions/hello.js&lt;/span&gt;
&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Anonymous&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryStringParameters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Hello, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In our function, we can grab information from the query string parameters passed in.  We'll destructure those (&lt;a href="https://wesbos.com/destructuring-default-values"&gt;with a default value&lt;/a&gt;) and look for a &lt;code&gt;name&lt;/code&gt; param.&lt;/p&gt;

&lt;p&gt;To actually wire up our functions folder, we'll need to add a &lt;a href="https://docs.netlify.com/configure-builds/file-based-configuration/#functions"&gt;&lt;code&gt;netlify.toml&lt;/code&gt;&lt;/a&gt; config file at the root of our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="c"&gt;# netlify.toml
&lt;/span&gt;&lt;span class="nn"&gt;[build]&lt;/span&gt;
  &lt;span class="py"&gt;functions&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"functions/"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#walk-before-you-run-locally" class="anchor"&gt;
  &lt;/a&gt;
  Walk Before You Run (Locally)
&lt;/h2&gt;

&lt;p&gt;Our "repo" should look like this at this point:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;my-app
├── functions
│   └── hello.js
└── netlify.toml
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The best way to run your Netlify site locally, with all the bells and whistles attached, is to use &lt;a href="https://www.netlify.com/products/dev/"&gt;Netlify Dev&lt;/a&gt; which you can install via npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;netlify-cli &lt;span class="nt"&gt;-g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And then kick off your dev server like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;netlify dev
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NGbM8lQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/zojzzdop0fzx/3TH4jBOh9rpMHtaMbggESp/015afef380a9d9e8bd7f6bf8468eb3ac/netlify-dev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NGbM8lQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/zojzzdop0fzx/3TH4jBOh9rpMHtaMbggESp/015afef380a9d9e8bd7f6bf8468eb3ac/netlify-dev.png" alt="Netlify Dev"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your "site" should now be live at &lt;code&gt;http://localhost:8888&lt;/code&gt;. By default, Netlify hosts functions under the subpath &lt;code&gt;/.netlify/functions/&amp;lt;fn-name&amp;gt;&lt;/code&gt; so you can invoke your function here:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://localhost:8888/.netlify/functions/hello?name=Beth"&gt;http://localhost:8888/.netlify/functions/hello?name=Beth&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's make our function's address a little cleaner by also taking advantage of another free Netlify feature using &lt;a href="https://docs.netlify.com/configure-builds/file-based-configuration/#redirects"&gt;redirects&lt;/a&gt;.  This allows us to expose the same functions at a terser url by replacing &lt;code&gt;/.netlify/functions&lt;/code&gt; with &lt;code&gt;/api&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FROM&lt;/strong&gt;: &lt;code&gt;&amp;lt;site&amp;gt;/.netlify/functions/hello&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;TO&lt;/strong&gt;: &lt;code&gt;&amp;lt;site&amp;gt;/api/hello&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To do so, append the following info to your &lt;code&gt;netlify.toml&lt;/code&gt; config, and restart Netlify dev:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[[redirects]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;
  &lt;span class="py"&gt;from&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'/api/*'&lt;/span&gt;
  &lt;span class="py"&gt;to&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'/.netlify/functions/:splat'&lt;/span&gt;
  &lt;span class="py"&gt;status&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will route all traffic at &lt;code&gt;/api/*&lt;/code&gt; internally to the appropriate functions directory, and the wildcard will capture all additional path info, and move to &lt;code&gt;:splat&lt;/code&gt;.  By setting the &lt;a href="https://docs.netlify.com/routing/redirects/redirect-options/#http-status-codes"&gt;HTTP Status Code = &lt;code&gt;200&lt;/code&gt;&lt;/a&gt;, Netlify will preform a "rewrite" (as opposed to a "redirect") which will change the server response without changing the URL in the browser address bar.&lt;/p&gt;

&lt;p&gt;So let's try again with our new url:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://localhost:8888/api/hello?name=Beth"&gt;http://localhost:8888/api/hello?name=Beth&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8BQV5Amb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/zojzzdop0fzx/LgezyZNZ9J2IJ6xqHLiUH/6636d093beff3dd4381c2f0f59ad64a6/hello-world.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8BQV5Amb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/zojzzdop0fzx/LgezyZNZ9J2IJ6xqHLiUH/6636d093beff3dd4381c2f0f59ad64a6/hello-world.png" alt="hello world"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👏 Awesome, you just created a function! (you're following along live, right?)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-the-crud-out-amp-submitting-data" class="anchor"&gt;
  &lt;/a&gt;
  Getting the CRUD Out &amp;amp; Submitting Data
&lt;/h2&gt;

&lt;p&gt;Now that we can build functions, let's create our own API with some basic CRUD functions (Create, Read, Update, &amp;amp; Delete) for a simple todos app.&lt;/p&gt;

&lt;p&gt;One of the central tenants of serverless computing is that it's also stateless.  If you need to store any state across function invocations, it should be persisted to another, layer like a database.  For this article, let's use the free tier of DynamoDb, but feel free to BYODB (Bring Your Own DB), especially if it has a Node SDK.&lt;/p&gt;

&lt;p&gt;In the next steps, we'll:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup a table on DynamoDB in AWS&lt;/li&gt;
&lt;li&gt;Install npm packages into our project&lt;/li&gt;
&lt;li&gt;Setup secret keys in AWS, and add to our environment variables&lt;/li&gt;
&lt;li&gt;Initialize the aws-sdk package for NodeJs&lt;/li&gt;
&lt;li&gt;And then finally add a Netlify function route to create a record on our database&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#aws-amazon-web-services" class="anchor"&gt;
  &lt;/a&gt;
  AWS - Amazon Web Services
&lt;/h3&gt;

&lt;p&gt;This guide will assume some degree of familiarity with AWS &amp;amp; DynamoDB, but if you're new to DynamoDB, you can start with this guide on &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GettingStarted.NodeJs.html"&gt;Getting Started with Node.js and DynamoDB&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On AWS, &lt;a href="https://console.aws.amazon.com/dynamodb/home?region=us-east-1#create-table"&gt;create a table&lt;/a&gt; with the name &lt;code&gt;NetlifyTodos&lt;/code&gt;, and string partition key called &lt;code&gt;key&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#npm-node-package-manager" class="anchor"&gt;
  &lt;/a&gt;
  NPM - Node Package Manager
&lt;/h3&gt;

&lt;p&gt;Now, let's setup npm and install &lt;a href="https://www.npmjs.com/package/aws-sdk"&gt;&lt;code&gt;aws-sdk&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/nanoid"&gt;&lt;code&gt;nanoid&lt;/code&gt;&lt;/a&gt;, &amp;amp; &lt;a href="https://www.npmjs.com/package/dotenv"&gt;&lt;code&gt;dotenv&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a terminal at the root of your project, run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
npm &lt;span class="nb"&gt;install &lt;/span&gt;aws-sdk nanoid dotenv &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#env-environment-variables" class="anchor"&gt;
  &lt;/a&gt;
  ENV - Environment Variables
&lt;/h3&gt;

&lt;p&gt;You'll  need to provision an &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-services-iam-create-creds.html"&gt;access key / secret for an IAM user&lt;/a&gt; that we'll use to authenticate our API calls.  One of the benefits of running these calls on the server is you're able to protect your application secret through environment variables, instead of having to ship them to the client, which is not recommended.&lt;/p&gt;

&lt;p&gt;There are quite a few ways to log into AWS on your local machine, but just to keep everything inside of our project, let's create a &lt;code&gt;.env&lt;/code&gt; file at the root of our project, and fill in the following keys with your own values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="c"&gt;# .env
&lt;/span&gt;&lt;span class="py"&gt;MY_AWS_ACCESS_KEY_ID&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;***&lt;/span&gt;
&lt;span class="py"&gt;MY_AWS_SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;***&lt;/span&gt;
&lt;span class="py"&gt;MY_AWS_REGION&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;us-east-1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: One little gotcha here is that the more common &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; is a reserved environment keyword used by the Netlify process.  So if we want to pass around env variables, we'll have to use our own key, in this case prefixed with &lt;code&gt;MY_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once they're added to the process, we can destructure them and use in setting up our AWS SDK.  We'll need to setup AWS for every CRUD function, so let's assemble all this logic in a separate file called &lt;code&gt;dyno-client.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// dyno-client.js&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MY_AWS_ACCESS_KEY_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MY_AWS_SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MY_AWS_REGION&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The following is required.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sdk-software-developer-kit" class="anchor"&gt;
  &lt;/a&gt;
  SDK - Software Developer Kit
&lt;/h3&gt;

&lt;p&gt;Using the aws-sdk makes our life a lot easier for connecting to DynamoDB from our codebase.  We can create an instance of the Dynamo client that we'll use for the remaining examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// dyno-client.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AWS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aws-sdk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;AWS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;accessKeyId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MY_AWS_ACCESS_KEY_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;secretAccessKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MY_AWS_SECRET_ACCESS_KEY&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MY_AWS_REGION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dynamoDb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AWS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DynamoDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DocumentClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To make this available to all our functions, add the DynamoDB instance to your exports, and we'll grab it when we need it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;dynamoDb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TABLE_NAME&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-todo-due-by-eod-" class="anchor"&gt;
  &lt;/a&gt;
  Create Todo (Due by EOD 😂)
&lt;/h3&gt;

&lt;p&gt;⚡ We're finally ready to create our API function!&lt;/p&gt;

&lt;p&gt;In the following example, we'll post back form data containing the &lt;code&gt;text&lt;/code&gt; for our todo item.  We can parse the form data into JSON, and transform it into an item to insert into our table.  If it succeeds, we'll return the result with a status code of &lt;code&gt;200&lt;/code&gt;, and if it fails, we'll return the the error message along with the status code from the error itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// functions/create.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;nanoid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nanoid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;dynamoDb&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../dyno-client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// parse form data&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// create item to insert&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;TableName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TABLE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;nanoid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;createDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;dynamoDb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// return success&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This should give you the gist of how to expose your API routes and logic to perform various operations.  I'll hold off on more examples because most of the code here is actually just specific to DynamoDB, and we'll save that for a separate article.  But the takeaway is that we're able to return something meaningful with very minimal plumbing.  And that's the whole point!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;With Functions, you &lt;em&gt;only&lt;/em&gt; have to write your own business logic!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#debugging-for-frictionless-feedback-loops" class="anchor"&gt;
  &lt;/a&gt;
  Debugging - For Frictionless Feedback Loops
&lt;/h2&gt;

&lt;p&gt;There are two critical debugging tools in Visual Studio Code I like to use when working with node and API routes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Script Debugger &amp;amp;&lt;/li&gt;
&lt;li&gt;Rest Client Plugin&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;✨ &lt;strong&gt;Did you know&lt;/strong&gt;, instead of configuring a custom &lt;a href="https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes"&gt;&lt;code&gt;launch.json&lt;/code&gt;&lt;/a&gt; file, you can run and attach debuggers directly onto npm scripts in the &lt;code&gt;package.json&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j00vA7Sz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/zojzzdop0fzx/4VpMPC1mLnzbEgmKIXkJSG/d7329a551088f26c647b7bfec9c1b8c0/npm-debug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j00vA7Sz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/zojzzdop0fzx/4VpMPC1mLnzbEgmKIXkJSG/d7329a551088f26c647b7bfec9c1b8c0/npm-debug.png" alt="npm debug"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And while tools like &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; are a valuable part of comprehensive test suite, you can add the &lt;a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client"&gt;REST Client Extension&lt;/a&gt; to invoke API commands directly within VS Code.  We can easily use the browser to mock GET endpoints, but this makes it really easy to invoke other HTTP verbs, and post back form data.&lt;/p&gt;

&lt;p&gt;Just add a file like &lt;code&gt;test.http&lt;/code&gt; to your project.  &lt;em&gt;REST Client&lt;/em&gt; supports expansion of variable environment, and custom variables.  If you stub out multiple calls, you can separate multiple different calls by delimiting with &lt;code&gt;###&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add the following to your sample file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;baseUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//localhost:8888&lt;/span&gt;

&lt;span class="c1"&gt;// create todo item&lt;/span&gt;
&lt;span class="nx"&gt;POST&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;baseUrl&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="sr"&gt;/api/&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;
&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Feed the cats&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3VkkKzNr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/zojzzdop0fzx/5gpNvzYCy2gAEulbefRLyq/0f2c65a170ca23ddf7d51a1fca799aeb/send-request.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3VkkKzNr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/zojzzdop0fzx/5gpNvzYCy2gAEulbefRLyq/0f2c65a170ca23ddf7d51a1fca799aeb/send-request.png" alt="send request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now run the above by clicking "Send Request".  This should hit our Netlify dev server, and allow us to step through our function logic locally!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h9fGpJ9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/zojzzdop0fzx/rObvoyuZYuGpmk4FCQTWW/ca72b014f162dcc726f40918898295dd/breakpoint.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h9fGpJ9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/zojzzdop0fzx/rObvoyuZYuGpmk4FCQTWW/ca72b014f162dcc726f40918898295dd/breakpoint.png" alt="debugger breakpoint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#publishing" class="anchor"&gt;
  &lt;/a&gt;
  Publishing
&lt;/h2&gt;

&lt;p&gt;Publishing to Netlify is easy as well.  Make sure your project is committed, and pushed up to a git repository on GitHub, GitLab or BitBucket.&lt;/p&gt;

&lt;p&gt;Login to &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;, and click the option to Create "New Site From Git" and select your repo.&lt;/p&gt;

&lt;p&gt;Netlify will prompt for a &lt;strong&gt;Build command&lt;/strong&gt;, and a &lt;strong&gt;Publish directory&lt;/strong&gt;.  Believe it or not, we don't actually have either of those things yet, and it's probably a project for another day to set up our front end.  Those commands refer to the static site build part of the deployment.  Everything we need to build serverless functions is inside our functions directory and our &lt;code&gt;netlify.toml&lt;/code&gt; config.&lt;/p&gt;

&lt;p&gt;Once we deploy the site, the last thing we'll need to do is add our environment variables to Netlify under Build &amp;gt; Environment&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lbVq3uqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/zojzzdop0fzx/3CDrDHUXxfDZP5fonYdwlj/51ac23dc7614b96476c1c959a0454327/netlify-environment-variables.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lbVq3uqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/zojzzdop0fzx/3CDrDHUXxfDZP5fonYdwlj/51ac23dc7614b96476c1c959a0454327/netlify-environment-variables.png" alt="netlify environment variables"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps-this-is-only-the-beginning" class="anchor"&gt;
  &lt;/a&gt;
  Next Steps - This is only the beginning
&lt;/h2&gt;

&lt;p&gt;Hopefully some ideas are spinning as to how you can use these technologies on your own sites and projects.  The focus of this article is on building and debugging Netlify functions, but an important exercise left to the reader is to take advantage of that on your front end.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt;: If you want to add Create React App to your current directory (without creating a new folder), add a &lt;code&gt;.&lt;/code&gt; when scaffolding out a new app like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;create-react-app &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Try it out - build a front end, and let me know how it goes at &lt;a href="https://twitter.com/KyleMitBTV"&gt;KyleMitBTV&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;For more context, you can browse the full source code for the article on GitHub at &lt;a href="https://github.com/KyleMit/netlify-functions-demo"&gt;KyleMit/&lt;strong&gt;netlify-functions-demo&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For even more practical examples with actual code, checkout the following resources as well!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/DavidWells/netlify-functions-workshop"&gt;David Wells - Netlify Serverless Functions Workshop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/netlify/functions#community-function-examples"&gt;netlify/functions - Community Functions Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good luck, and go build things!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;This Dot Labs is a modern web consultancy focused on helping companies realize their digital transformation efforts. For expert architectural guidance, training, or consulting in React, Angular, Vue, Web Components, GraphQL, Node, Bazel, or Polymer, visit &lt;a href="https://www.thisdotlabs.com"&gt;thisdotlabs.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This Dot Media is focused on creating an inclusive and educational web for all.  We keep you up to date with advancements in the modern web through events, podcasts, and free content. To learn, visit &lt;a href="https://www.thisdot.co"&gt;thisdot.co&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>netlify</category>
    </item>
    <item>
      <title>Resources to learn Python</title>
      <author>Magda Rosłaniec</author>
      <pubDate>Tue, 08 Dec 2020 16:29:46 +0000</pubDate>
      <link>https://dev.to/makneta/resources-to-learn-python-13fc</link>
      <guid>https://dev.to/makneta/resources-to-learn-python-13fc</guid>
      <description>&lt;p&gt;Python is my first and favourite programming language (not that I've been learning lots of them). It's friendly for new coders, almost like writing in English. There are also lots of resources for learners.&lt;br&gt;
But when you are starting, the number of resources can be intimidating and you can suffer from the paradox of choice. Instead of wasting time, you can follow my steps. &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#disclaimer-im-not-a-fan-of-video-tutorials-i-cant-say-i-havent-been-using-any-video-courses-but-they-arent-my-favourite%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  Disclaimer: I'm not a fan of video tutorials. I can't say I haven't been using any video courses, but they aren't my favourite. 
&lt;/h6&gt;

&lt;p&gt;&lt;em&gt;If you're starting and have never before written a line of code and really don't know if it is something for you, try&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-an-interactive-course" class="anchor"&gt;
  &lt;/a&gt;
  1. an interactive course.
&lt;/h2&gt;

&lt;p&gt;You will avoid installing Python or upgrading Python's version, installing the code editor and working from the command line. All those things are important, but they can wait a bit. &lt;/p&gt;

&lt;p&gt;My favourite platform with interactive courses is &lt;a href="https://www.codecademy.com/"&gt;Codecademy&lt;/a&gt;. Unfortunately, their free Python course is about Python 2, which is no longer supported, and although the differences aren't so significant (at least for beginners), I don't recommend using it. They have all their pro courses for free during the trial seven days period so that you can try the course out and Python as well. &lt;/p&gt;

&lt;p&gt;I like it because they have snippets of code with explanations, and then you have to write your own code on the screen. And you know if you pass or not. If you are stuck, they give you hints. They lead the learner slowly, step by step. If you are doing the pro version, you have even small projects after each lesson. &lt;/p&gt;

&lt;p&gt;If you like the platform and you are willing to pay the subscription, they have more than one Python course. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dePm6M4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6htjqqx68u3xa7vh1jyf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dePm6M4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6htjqqx68u3xa7vh1jyf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Another resource is an excellent book written by Al Sweigart&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-automate-the-boring-stuff-with-python" class="anchor"&gt;
  &lt;/a&gt;
  2. Automate the Boring Stuff with Python.
&lt;/h2&gt;

&lt;p&gt;You can access this book for free online: &lt;a href="https://automatetheboringstuff.com/"&gt;https://automatetheboringstuff.com/&lt;/a&gt;. There is also an Udemy course, and the author published the first 15 parts of the course on &lt;a href="https://www.youtube.com/watch?v=1F_OgqRuSdI&amp;amp;list=PL0-84-yl1fUnRuXGFe_F7qSH1LEnn9LkW"&gt;Youtube&lt;/a&gt; for free.&lt;/p&gt;

&lt;p&gt;In the book, you can find instructions on how to install Python or a code editor. But in the beginning, you can easily use an interactive online platform for writing code: &lt;a href="https://repl.it/"&gt;Repl.it&lt;/a&gt;. ~You don't even have to sign up to use it~. Create an account to have access to all scripts you would write. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_oO_Fx8G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8xog4lbcpzs4392w8ayl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_oO_Fx8G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8xog4lbcpzs4392w8ayl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You only need to click: Start coding, then choose the language: Python and you have a place to write and run your code. &lt;/p&gt;

&lt;p&gt;Now while reading the book, you can type all the snippets of code in the Repl and press the green run button to see the output. If you want to start a new repl (script, file), it's enough to click + sign. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;The other book I like and recommend is&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-python-crash-course-by-eric-matthes" class="anchor"&gt;
  &lt;/a&gt;
  3. Python Crash Course by Eric Matthes.
&lt;/h2&gt;

&lt;p&gt;This one isn't free, but it's really great. It's divided into 2 parts: Basics and Projects and Projects part has got 3 projects - a game, a data visualization project and a web application with an introduction to Django. You can go through the basic part in the same way - using Repl. But I think that at one point you will install Python, a code editor and will start learning to use the command line because you become hooked with programming. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do I like both books?&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Not only because they are great for people who don't have a tech background and don't use complicated jargon, but also because they have a lot of examples and practice questions and projects. And the level of the practice exercises is only just a bit above the level of presented examples. They help to make the stuff that is presented in the book &lt;strong&gt;stick&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;The next resource is surprise surprise the video course. But Colt Steele's&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-the-modern-python-3-bootcamp" class="anchor"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://www.udemy.com/course/the-modern-python3-bootcamp/"&gt;The Modern Python 3 Bootcamp&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;is excellent.&lt;/p&gt;

&lt;p&gt;It is almost 30 hours of lectures, 123 articles and the enormous amount of coding exercises. There is even a whole part with exercises at the end of the course. But yes, it's paid. &lt;/p&gt;

&lt;p&gt;I've gone through all four resources and many more, but things stick in my mind only when I use something. &lt;br&gt;
That's why there isn't something like &lt;em&gt;too many exercises&lt;/em&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-w3resource" class="anchor"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://www.w3resource.com/python-exercises/"&gt;w3resource&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This website contains hundreds of Python (and other programming languages) exercises divided into categories.&lt;br&gt;
You can solve them in the interactive editor, and they also have solutions. &lt;br&gt;
My other favourite platforms with coding puzzles are &lt;a href="https://www.codewars.com/"&gt;Codewars&lt;/a&gt; and &lt;a href="https://edabit.com/challenges/python3"&gt;Edabit&lt;/a&gt;. Edabit has got more puzzles for beginners. These exercises are a bit more random, but when you solve a task, you can check other people's solutions and learn new ways of writing code. And they also have a gaming aspect. &lt;/p&gt;

&lt;p&gt;As you can see, all my favourite resources are favourite because they are friendly for people without the tech background but also because the best way to learn is to practice and practice through writing code, solving tasks. Watching videos, reading books, and even typing code with the instructor is not enough to learn. &lt;/p&gt;

&lt;p&gt;Originally I wrote this article for my &lt;a href="http://makneta.herokuapp.com/post/how-i-was-learning-python-and-you-can-too/"&gt;Coding Journal&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>resources</category>
    </item>
    <item>
      <title>Lambda Containers with Rails; A Perfect Match!</title>
      <author>Ken Collins</author>
      <pubDate>Tue, 08 Dec 2020 15:26:20 +0000</pubDate>
      <link>https://dev.to/aws-heroes/lambda-containers-with-rails-a-perfect-match-4lgb</link>
      <guid>https://dev.to/aws-heroes/lambda-containers-with-rails-a-perfect-match-4lgb</guid>
      <description>&lt;p&gt;A few weeks ago when I started this serverless &amp;amp; container series we talked about how to use Docker in your AWS Lambda projects with SAM. Who could have known that today I get to share in the recent &lt;a href="https://aws.amazon.com/blogs/aws/new-for-aws-lambda-container-image-support/"&gt;AWS Lambda Container Image Support&lt;/a&gt; news by announcing that &lt;a href="https://lamby.custominktech.com/"&gt;Lamby&lt;/a&gt; works out of the box with both ZIP and Container deployment packages! 🎉🎉🎉 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-amp-why" class="anchor"&gt;
  &lt;/a&gt;
  How &amp;amp; Why?
&lt;/h2&gt;

&lt;p&gt;From a Rails perspective with Lamby, nothing really changes. Lamby is a simple Rack adapter to mount your Rails application within any chosen Lambda integration point, most commonly, API Gateway. However, we did rewrite our &lt;a href="https://lamby.custominktech.com/docs/quick_start"&gt;quick start guide&lt;/a&gt; to use containers by default. &lt;strong&gt;Take it for a test drive to see your own Rails application on AWS Lambda!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H88eqcnc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qe3j2jz85u1rw6yp6ij2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H88eqcnc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qe3j2jz85u1rw6yp6ij2.png" alt="Yay! You're on Rails with AWS Lambda Containers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From a Lambda perspective, using containers is a "simple" deployment strategy option. All the same guarantees for the ZIP strategy apply. But this news also brought a huge buff for Lambda as well. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Memory: 128 MB to 10,240 MB, in 1-MB increments.&lt;/li&gt;
&lt;li&gt;vCPU: Up to 6 cores using memory setting.&lt;/li&gt;
&lt;li&gt;Container: 10 GB code package size.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rather than duplicate work on the basics of Lambda functions as container images, I highly recommend these two posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://hichaelmart.medium.com/using-container-images-with-aws-lambda-7ffbd23697f1"&gt;Using container images with AWS Lambda&lt;/a&gt; - Michael Hart breaks things down to their smallest components using a simple Go PDF converter microservice.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://acloudguru.com/blog/engineering/packaging-aws-lambda-functions-as-container-images"&gt;Packaging AWS Lambda functions as container images&lt;/a&gt; - A guest post by &lt;a href="https://dev.to/jbesw"&gt;James Beswick&lt;/a&gt; on A Cloud Guru. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#much-more-coming" class="anchor"&gt;
  &lt;/a&gt;
  Much More Coming!
&lt;/h2&gt;

&lt;p&gt;So re:Invent &lt;a href="https://reinvent.awsevents.com/"&gt;is not over&lt;/a&gt; and I'm sure AWS has a lot more cool things coming. From me, expect to see some very exciting new tools over the next few weeks. &lt;/p&gt;

&lt;p&gt;Up next, Lambdakiq! A 100% drop in replacement for &lt;a href="https://sidekiq.org/"&gt;Sidekiq&lt;/a&gt; that leverages AWS managed services like SQS. Never again worry about side car containers, worker instances, process management for polling, or threading &amp;amp; concurrency. All these tools and worries evaporate when you integrate Rails with AWS! 😎 Stay tuned.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rough-edges" class="anchor"&gt;
  &lt;/a&gt;
  Rough Edges
&lt;/h2&gt;

&lt;p&gt;First, I'd like to congratulate all the AWS teams that have been working their butts off to bring us these awesome features. I can only imagine the quality &amp;amp; technical scale those teams operate under. Much respect. ❤️ &lt;/p&gt;

&lt;p&gt;While working with AWS SAM for the Lamby quick start I did encounter a few issues. Some of which may be me. Documenting them here just in case.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aws/aws-sam-cli/issues/2453"&gt;Using ImageConfig in SAM can cause a SUPERNOVA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aws/aws-sam-cli/issues/2254"&gt;Can SAM &amp;amp; Lambda teams both leverage ECR/Docker repositories?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aws/aws-sam-cli/issues/2459"&gt;Can SAM's Makefile be used with Containers?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aws/aws-sam-cli/issues/2450"&gt;Does SAM require an S3 Bucket for Containers?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aws/aws-sam-cli/issues/2447"&gt;Can SAM's also create your ECR repository?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>docker</category>
      <category>serverless</category>
      <category>lambda</category>
      <category>containers</category>
    </item>
    <item>
      <title>Chipping Away at Technical Debt</title>
      <author>Kim Arnett </author>
      <pubDate>Tue, 08 Dec 2020 14:49:34 +0000</pubDate>
      <link>https://dev.to/kaydacode/chipping-away-at-technical-debt-335a</link>
      <guid>https://dev.to/kaydacode/chipping-away-at-technical-debt-335a</guid>
      <description>&lt;p&gt;Technical debt is a natural part of software development. New frameworks come out, better ways to do things are found, SDK and languages updates are a thing, plus a hundred other external influences in your project. All of these things lead to old code that needs to be updated to keep on par with the new code your team is writing.  If there's not a process to incorporate some of these updates and maintenance, it leads to an outstanding technical debt.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-technical-debt" class="anchor"&gt;
  &lt;/a&gt;
  What is Technical Debt?
&lt;/h2&gt;

&lt;p&gt;Technical debt is a backlog of tasks, code, documentation, frameworks or other "things" that need attention, and the level of effort it would take to clear out those to-do items. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-you-care-about-technical-debt" class="anchor"&gt;
  &lt;/a&gt;
  Why Should You Care About Technical Debt?
&lt;/h2&gt;

&lt;p&gt;As software developers, we all enjoy consistency within the project and cleanliness in our code. We don't enjoy referencing things we'll never get to, //TODO: marks, or //HACK: marks, or outdated comments.  There's n number of things that could be applied here, but these are some examples of the most common I see.  Anyway - if you're not addressing debt as apart of your process, it grows. It grows quickly, and before you know it - it's a large effort to make a simple change.  Addressing technical debt keeps your project clean, team mates happier, and maintains the most updated information you have at that time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ok-where-do-i-go-from-here" class="anchor"&gt;
  &lt;/a&gt;
  Ok, Where Do I Go From Here?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The first step in tackling anything is &lt;strong&gt;defining scope&lt;/strong&gt;. Talk to your team about what bothers them in the project. There are tools like Sonar that can get you started as well, identifying areas with low test coverage or duplicated functions. This step will vary team to team. I personally like identifying unused files, duplicated functions or functionality, and areas with messy logic where a bug is likely hiding.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once scope is defined, the next step is &lt;strong&gt;plan of attack&lt;/strong&gt;. This will vary from team to team. If you need buy-in from the requirement side of your job, have those conversations early and often. Pulling 1-2 stories in your sprint to start should be an easy goal without &lt;em&gt;much&lt;/em&gt; implications to the requirement goals. Remember, this isn't just a nice to have, cleaner, consistent code is more likely to be bug free, tested, and easier to maintain in the long run. A few hours now will save hundred of hours in the future.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Attack!&lt;/strong&gt; As you're knocking out stories, whether outside of the sprint as you can or apart of the sprint, document any other problem areas you find that could use a touch up. Add tests to anything you do if they don't exist, and if they do, yay! With existing tests, you'll have confidence that your refactor update didn't break anything. Which is why it's important to add them if they don't exist!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Maintenance&lt;/strong&gt; - going forward follow the above steps to ensure you and your team are staying on top of any technical debt that arises. The beautiful thing about end of the year slow downs around holiday time is that there's often lack of features being built due to code freezes and everyone being on vacation. This is the perfect opportunity to make sure your code is in good shape for the new year!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it! Go on and make your projects beautiful and less stressful for future you. Report back on how it's going. :)&lt;/p&gt;

</description>
      <category>architecture</category>
    </item>
    <item>
      <title>How to Abort a Fetch Request in JavaScript using AbortController</title>
      <author>Nick Scialli (he/him)</author>
      <pubDate>Tue, 08 Dec 2020 13:45:08 +0000</pubDate>
      <link>https://dev.to/nas5w/how-to-abort-a-fetch-request-in-javascript-using-abortcontroller-3jc3</link>
      <guid>https://dev.to/nas5w/how-to-abort-a-fetch-request-in-javascript-using-abortcontroller-3jc3</guid>
      <description>&lt;p&gt;Sometimes it's necessary to abort a fetch request. In this post, we explore how to quickly do so using AbortController!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#if-you-enjoy-this-tutorial-please-give-it-a-or-and-consider" class="anchor"&gt;
  &lt;/a&gt;
  If you enjoy this tutorial, please give it a 💓, 🦄, or 🔖 and consider:
&lt;/h3&gt;

&lt;p&gt;📬 signing up for &lt;a href="https://buttondown.email/devtuts"&gt;my free weekly dev newsletter&lt;/a&gt;&lt;br&gt;
🎥 subscribing to &lt;a href="https://www.youtube.com/c/devtutsco?sub_confirmation=1"&gt;my free YouTube dev channel&lt;/a&gt;&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#a-simple-fetch-request" class="anchor"&gt;
  &lt;/a&gt;
  A Simple Fetch Request
&lt;/h1&gt;

&lt;p&gt;Let's start out with a simple fetch request. We'll grab some metadata about my Github account and log it to the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.github.com/users/nas5w&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we check our console, we see a json object describing my account has been logged. Here's a bit of that data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{"login":"nas5w","id":7538045,"node_id":"MDQ6VXNlcjc1MzgwNDU=","avatar_url":"https://avatars2.githubusercontent.com/u/7538045?v=4","gravatar_id":"","url":"https://api.github.com/users/nas5w","html_url":"https://github.com/nas5w"...}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#using-abortcontroller" class="anchor"&gt;
  &lt;/a&gt;
  Using AbortController
&lt;/h1&gt;

&lt;p&gt;In this same scenario, we can create a new instance of the &lt;code&gt;AbortController&lt;/code&gt; object and pass &lt;code&gt;fetch&lt;/code&gt; a reference to the &lt;code&gt;AbortController&lt;/code&gt; instance's &lt;code&gt;signal&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;Here's what I mean:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AbortController&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.github.com/users/nas5w&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So now, &lt;code&gt;fetch&lt;/code&gt; has a reference to the &lt;code&gt;signal&lt;/code&gt; object on our controller instance. We can abort our fetch by calling &lt;code&gt;abort&lt;/code&gt; on our controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AbortController&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.github.com/users/nas5w&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we run this, we no longer log the returned data because we have immediately aborted our &lt;code&gt;fetch&lt;/code&gt; request!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#handling-the-cancellation" class="anchor"&gt;
  &lt;/a&gt;
  Handling the Cancellation
&lt;/h1&gt;

&lt;p&gt;You may have noticed in our last code snippet that our &lt;code&gt;fetch&lt;/code&gt; request isn't gracefully aborted, we actually see an error in our console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Uncaught (in promise) DOMException: The user aborted a request.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In order to handle this cancellation error, we simply need to &lt;code&gt;catch&lt;/code&gt; our error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AbortController&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.github.com/users/nas5w&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;signal&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now if we run our code we see that we gracefully log our error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DOMException: The user aborted a request.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So now we have successfully aborted our fetch request and caught the associated error.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-note-on-browser-compatibility" class="anchor"&gt;
  &lt;/a&gt;
  A Note on Browser Compatibility
&lt;/h1&gt;

&lt;p&gt;Most modern browsers have full support for &lt;code&gt;AbortController&lt;/code&gt; but (of course) if you have to support IE you're out of luck! Be sure to check out the associated &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController#Browser_compatibility"&gt;MDN docs&lt;/a&gt; for full compatibility info.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#if-you-enjoy-this-tutorial-please-give-it-a-or-and-consider" class="anchor"&gt;
  &lt;/a&gt;
  If you enjoy this tutorial, please give it a 💓, 🦄, or 🔖 and consider:
&lt;/h3&gt;

&lt;p&gt;📬 signing up for &lt;a href="https://buttondown.email/devtuts"&gt;my free weekly dev newsletter&lt;/a&gt;&lt;br&gt;
🎥 subscribing to &lt;a href="https://www.youtube.com/c/devtutsco?sub_confirmation=1"&gt;my free YouTube dev channel&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Add WhatsApp Chat To Your Website - React and HTML</title>
      <author>NJOKU SAMSON EBERE</author>
      <pubDate>Tue, 08 Dec 2020 12:24:19 +0000</pubDate>
      <link>https://dev.to/ebereplenty/add-whatsapp-chat-to-your-website-react-and-html-3a5g</link>
      <guid>https://dev.to/ebereplenty/add-whatsapp-chat-to-your-website-react-and-html-3a5g</guid>
      <description>&lt;p&gt;WhatsApp is now one of the world most used social media platform for communication. The fact that all you need is a mobile number, makes it so suitable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jump-to" class="anchor"&gt;
  &lt;/a&gt;
  Jump to:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#1"&gt;React Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;HTML Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since it has become so acceptable, many people desire to have the chat on their website. In this tutorial, I will be showing you how to simply add WhatsApp Chat to your website. We will use a REACT website and an HTML website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-website" class="anchor"&gt;
  &lt;/a&gt;
  REACT Website.
&lt;/h2&gt;

&lt;p&gt;We will be using the website we created in a &lt;a href="https://dev.to/ebereplenty/css-animation-without-css-aos-in-plain-js-and-react-4jfj"&gt;previous tutorial&lt;/a&gt;. Please clone the project from &lt;a href="https://github.com/EBEREGIT/React-AOS-Tutorial/tree/react-aos-tut"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install the dependences with &lt;code&gt;npm install&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm start&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adding the WhatsApp chat will take just three (3) steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, Add the following font awesome link to the &lt;code&gt;head&lt;/code&gt; in the &lt;code&gt;index.html&lt;/code&gt; file
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nx"&gt;font&lt;/span&gt; &lt;span class="nx"&gt;awesome&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stylesheet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Secondly, Add the following code to the &lt;code&gt;App.js&lt;/code&gt; file just before the closing tag where we want it to be display&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* WhatsApp icon */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;
        &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://wa.me/2348100000000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;whatsapp_float&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_blank&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;noopener noreferrer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fa fa-whatsapp whatsapp-icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/i&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Ensure to replace the mobile number &lt;em&gt;(2348100000000)&lt;/em&gt; with yours or any number that is to be contacted from your website&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;You should have a WhatsApp Icon at the bottom of the website&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finally, add the following CSS code to &lt;code&gt;App.css&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
      &lt;span class="cm"&gt;/* for desktop */&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;whatsapp_float&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="nx"&gt;d366&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;FFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;box&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;whatsapp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="cm"&gt;/* for mobile */&lt;/span&gt;
      &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;media&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;767&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;whatsapp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;whatsapp_float&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;This makes the icon look really like a WhatsApp icon for real. It will also make it sticky and visible at any point on that page&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All Codes &lt;a href="https://github.com/EBEREGIT/React-AOS-Tutorial/tree/whatsapp-icon"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations!!! Your visitors can now reach you from your REACT website. See More info in the &lt;a href="#3"&gt;Conclusion&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-website" class="anchor"&gt;
  &lt;/a&gt;
  HTML Website
&lt;/h2&gt;

&lt;p&gt;We will be using the website we created in a &lt;a href="https://dev.to/ebereplenty/css-animation-without-css-aos-in-plain-js-and-react-4jfj"&gt;previous tutorial&lt;/a&gt;. Please clone the project from &lt;a href="https://github.com/EBEREGIT/JS-AOS-Tutorial/tree/js-aos-tut"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Adding the WhatsApp chat here will also take just three (3) steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, Add the following font awesome link to the &lt;code&gt;head&lt;/code&gt; in the &lt;code&gt;index.html&lt;/code&gt; file
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nx"&gt;font&lt;/span&gt; &lt;span class="nx"&gt;awesome&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stylesheet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Secondly, Add the following code to the &lt;code&gt;Index.html&lt;/code&gt; file just after the footer tag where we want it to be display&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* WhatsApp icon */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;
        &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://wa.me/2348100000000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;whatsapp_float&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_blank&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;noopener noreferrer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fa fa-whatsapp whatsapp-icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/i&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Ensure to replace the mobile number &lt;em&gt;(2348100000000)&lt;/em&gt; with yours or any number that is to be contacted from your website&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;You should have a WhatsApp Icon at the bottom of the website&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finally, add the following CSS code to &lt;code&gt;styles.css&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
      &lt;span class="cm"&gt;/* for desktop */&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;whatsapp_float&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="nx"&gt;d366&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;FFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;box&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;whatsapp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="cm"&gt;/* for mobile */&lt;/span&gt;
      &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;media&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;767&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;whatsapp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;whatsapp_float&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;This makes the icon look really like a WhatsApp icon for real. It will also make it sticky and visible at any point on that page&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All Codes are &lt;a href="https://github.com/EBEREGIT/JS-AOS-Tutorial/tree/whatsapp-chat"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live Website &lt;a href="https://eberegit.github.io/JS-AOS-Tutorial/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The website now looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--np7gSZiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nr1is4m9k5j9ik96lr4p.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--np7gSZiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nr1is4m9k5j9ik96lr4p.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is it!!! You just improved the experience on your website...&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We have seen how to add WhatsApp Chat to a website in just 3 simple steps. First, we add the link to font awesome, second, we add the WhatsApp icon linked to WhatsApp chat and finally, style it to look appealing and stay sticky on the website no matter where the user is.&lt;/p&gt;

&lt;p&gt;The experience is better on mobile device because on mobile device, your users will be redirected to their WhatsApp application and the chat will be initiated. On desktop however, will be redirected to download the WhatsApp application.&lt;/p&gt;

&lt;p&gt;Keep making your website experience awesome. &lt;/p&gt;

&lt;p&gt;Thank you for reading!!!&lt;/p&gt;

</description>
      <category>react</category>
      <category>whatsapp</category>
      <category>chat</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A Detailed Breakdown of HTML Form Event Attributes</title>
      <author>deji adesoga</author>
      <pubDate>Tue, 08 Dec 2020 11:46:28 +0000</pubDate>
      <link>https://dev.to/desoga/a-detailed-breakdown-of-html-form-event-attributes-5g59</link>
      <guid>https://dev.to/desoga/a-detailed-breakdown-of-html-form-event-attributes-5g59</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Don’t aspire to make a living, aspire to make a difference.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- Denzel Washington&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="#Introduction"&gt;Introduction&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#html-form-events"&gt;HTML Form Events&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="#onblur"&gt;onblur&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#onchange"&gt;onchange&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#oncontextmenu"&gt;oncontextmenu&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#onfocus"&gt;onfocus&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#oninput"&gt;oninput&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#oninvalid"&gt;oninvalid&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#onreset"&gt;onreset&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#onsearch"&gt;onsearch&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#onselect"&gt;onselect&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#onsubmit"&gt;onsubmit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  &lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt; forms allow users on a web page to enter data that will be sent to a server for processing. &lt;strong&gt;HTML &lt;/strong&gt;forms are a powerful way of interacting with a web application. They include various elements called controls like (Text Input, Checkboxes, Radio Box, Select Box, e.t.c).&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;HTML &lt;/strong&gt;forms are enclosed inside a &lt;code&gt;&amp;lt;form&amp;gt;&amp;lt;/form&amp;gt;&lt;/code&gt; element. The &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element has various attributes, some of which includes the &lt;strong&gt;&lt;em&gt;action attribute, the target attribute&lt;/em&gt;&lt;/strong&gt; and the &lt;strong&gt;&lt;em&gt;method attribute&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#the-action-attribute" class="anchor"&gt;
  &lt;/a&gt;
  The Action Attribute
&lt;/h5&gt;

&lt;p&gt;The &lt;strong&gt;action &lt;/strong&gt;attribute helps to determine the type of form data that will be sent to the server after the submission of a form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/testpage.php"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;name:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Jane"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Email:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Doe"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;From the above code, the form data is sent to a file called "testpage.php" with the help of the action attribute.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#the-target-attribute" class="anchor"&gt;
  &lt;/a&gt;
  The Target Attribute
&lt;/h5&gt;

&lt;p&gt;This attribute specifies to the browser the particular page to display the response that is received once the form has been submitted.&lt;/p&gt;

&lt;p&gt;Also, The &lt;strong&gt;Target &lt;/strong&gt;attribute can have the values below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/testpage.php"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"\_blank"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;  The response is displayed in a new browser window or tab.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/testpage.php"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"\_self"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;  The response is displayed in the current window. This is the default value of the &lt;strong&gt;Target&lt;/strong&gt; attribute.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/testpage.php"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"\_parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;  The response is displayed in the parent frame
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/testpage.php"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"\_top"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;  The response is displayed in the full body of the window&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;
  &lt;a href="#the-method-attribute" class="anchor"&gt;
  &lt;/a&gt;
  The Method Attribute
&lt;/h5&gt;

&lt;p&gt;The &lt;strong&gt;Method &lt;/strong&gt;attribute specifies the particular Hypertext Transfer Protocol (&lt;strong&gt;HTTP&lt;/strong&gt;) method to be used when submitting form data.&lt;/p&gt;

&lt;p&gt;There are two types of &lt;strong&gt;HTTP&lt;/strong&gt; method attribute that can be used with the &lt;strong&gt;&lt;/strong&gt; element. They include the  &lt;strong&gt;GET&lt;/strong&gt; and &lt;strong&gt;POST.&lt;/strong&gt;&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#the-get-attribute" class="anchor"&gt;
  &lt;/a&gt;
  The &lt;strong&gt;GET&lt;/strong&gt; Attribute
&lt;/h6&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/testpage.php"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"get"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;  The example above uses the &lt;strong&gt;GET&lt;/strong&gt; method when submitting the form data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#the-post-attribute" class="anchor"&gt;
  &lt;/a&gt;
  The POST Attribute
&lt;/h6&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/testpage.php"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;  The example above uses the &lt;strong&gt;POST&lt;/strong&gt; method when submitting the form data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, one of the most used elements in an &lt;strong&gt;HTML&lt;/strong&gt; form is the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tag. The &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tag can be displayed in so many ways within the &lt;strong&gt;HTML&lt;/strong&gt; form. Some of which includes:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Displays a single-line text input field. It is the default type of the input element.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Shows a radio button (for selecting one of many choices).&lt;/em&gt;&lt;/strong&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Displays a checkbox (for selecting zero or more of many choices).&lt;/em&gt;&lt;/strong&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Shows a submit button (for submitting the form).&lt;/em&gt;&lt;/strong&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Displays a clickable button.&lt;/em&gt;&lt;/strong&gt;

&lt;p&gt;Now that we've covered the basics of the &lt;strong&gt;HTML&lt;/strong&gt; form, let us dive into the various form events.  &lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-form-events" class="anchor"&gt;
  &lt;/a&gt;
  HTML Form Events
&lt;/h2&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1%C2%A0onblur%C2%A0event" class="anchor"&gt;
  &lt;/a&gt;
  1). onblur Event
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;onblur&lt;/strong&gt; event renders when an object loses its focus. The &lt;strong&gt;onblur&lt;/strong&gt; event is mostly used with form validation, that is, when a user leaves a form field.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#syntax-in-html" class="anchor"&gt;
  &lt;/a&gt;
  SYNTAX in HTML
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;onblur=&lt;/span&gt;&lt;span class="s"&gt;"myFunction"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Here, we will create an input field that displays an alert box once the input field loses focus,&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#indexhtml" class="anchor"&gt;
  &lt;/a&gt;
  index.html
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;HTML Form Events&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;HTML Form Events&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"myInput"&lt;/span&gt; &lt;span class="na"&gt;onblur=&lt;/span&gt;&lt;span class="s"&gt;"blurFunction()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Above we have a function called &lt;strong&gt;&lt;em&gt;blurFunction() &lt;/em&gt;&lt;/strong&gt;which is declared inside an &lt;strong&gt;&lt;em&gt;onblur&lt;/em&gt;&lt;/strong&gt; attribute. Then we have our script tag linked top our JavaScript page, where we will perform the alert operation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  app.js
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myInput&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;blurFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myInput&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blurry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blurry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;blurry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My Eyes Are Getting Blurry.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the JavaScript file, we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;     Accessed the input field by its &lt;strong&gt;&lt;em&gt;id&lt;/em&gt;&lt;/strong&gt; called &lt;strong&gt;&lt;em&gt;myInput &lt;/em&gt;&lt;/strong&gt;inside the &lt;strong&gt;&lt;em&gt;blurFunction &lt;/em&gt;&lt;/strong&gt;function.&lt;/li&gt;
&lt;li&gt;  Declared a variable called &lt;strong&gt;&lt;em&gt;blurry&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  Then we created a condition that if the value typed in the form is called &lt;strong&gt;&lt;em&gt;blurry&lt;/em&gt;&lt;/strong&gt;, then an alert box should pop up once the input field loses focus.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  RESULT
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/5mqpB4efIqEVW6ohug/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5mqpB4efIqEVW6ohug/giphy.gif" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-onchange-event" class="anchor"&gt;
  &lt;/a&gt;
  2). onchange Event
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;onchange&lt;/strong&gt; event occurs when the value of an element is changed. It is used in &lt;strong&gt;&lt;em&gt;HTML&lt;/em&gt;&lt;/strong&gt; elements such as &lt;em&gt; &lt;/em&gt; and &lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#syntax-in-html" class="anchor"&gt;
  &lt;/a&gt;
  SYNTAX in HTML
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;onchange=&lt;/span&gt;&lt;span class="s"&gt;"myFunction"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Here, we will create a select element that returns different values on the DOM, based on the change event.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#indexhtml" class="anchor"&gt;
  &lt;/a&gt;
  index.html
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;HTML Form Events&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Choose your favorite Football Club:
    &lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"club"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"club"&lt;/span&gt; &lt;span class="na"&gt;onchange=&lt;/span&gt;&lt;span class="s"&gt;"clubSelect()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Select One …&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Newcastle United"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Newcastle United&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Liverpool"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Liverpool&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Barcelona"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Barcelona&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"result"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the &lt;strong&gt;&lt;em&gt;HTML&lt;/em&gt;&lt;/strong&gt; page, we have a select element that shows various options with their values. The two important things to take note of here is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The &lt;strong&gt;&lt;em&gt;clubSelect()&lt;/em&gt;&lt;/strong&gt; function in the &lt;strong&gt;&lt;em&gt;onchange&lt;/em&gt;&lt;/strong&gt; event attribute.&lt;/li&gt;
&lt;li&gt;  The &lt;strong&gt;&lt;em&gt;div&lt;/em&gt;&lt;/strong&gt; that contains the &lt;strong&gt;&lt;em&gt;result&lt;/em&gt;&lt;/strong&gt; class. This is where we will display the value of our event.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  app.js
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;clubSelect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.result&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;`I Support &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;;
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here what we simply did was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Declare the &lt;strong&gt;&lt;em&gt;clubSelect()&lt;/em&gt;&lt;/strong&gt; function created in the &lt;strong&gt;HTML&lt;/strong&gt; page. This gives us access to the change event.&lt;/li&gt;
&lt;li&gt;  Create a &lt;strong&gt;&lt;em&gt;result&lt;/em&gt;&lt;/strong&gt; variable that accessed the &lt;strong&gt;&lt;em&gt;.result&lt;/em&gt;&lt;/strong&gt; class.&lt;/li&gt;
&lt;li&gt;  Assigned the result variable to the &lt;strong&gt;&lt;em&gt;textContent&lt;/em&gt;&lt;/strong&gt; method, which helps us to set a given text to the node like so.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  RESULT
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/h5mNWD28m7qpLQIzuJ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/h5mNWD28m7qpLQIzuJ/giphy.gif" alt="Alt text of image"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-oncontextmenu-event" class="anchor"&gt;
  &lt;/a&gt;
  3). oncontextmenu Event
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;oncontextmenu&lt;/em&gt;&lt;/strong&gt; event performs its action when the user right-clicks the mouse on an object on the window. The &lt;strong&gt;&lt;em&gt;oncontextmenu&lt;/em&gt;&lt;/strong&gt; event is supported in all browsers.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#syntax-in-html" class="anchor"&gt;
  &lt;/a&gt;
  SYNTAX in HTML
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;oncontextmenu=&lt;/span&gt;&lt;span class="s"&gt;"event"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;In this example, we will be displaying an alert box within a &lt;strong&gt;div &lt;/strong&gt;when we right-click, instead of the context menu options.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#indexhtml" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;index.html&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;HTML Form Events&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;oncontextmenu=&lt;/span&gt;&lt;span class="s"&gt;"myAlert()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Right click to see the alert box&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;  
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the &lt;strong&gt;&lt;em&gt;HTML&lt;/em&gt;&lt;/strong&gt; file, we have a &lt;strong&gt;&lt;em&gt;div&lt;/em&gt;&lt;/strong&gt; that contains the &lt;strong&gt;&lt;em&gt;oncontextmenu &lt;/em&gt;&lt;/strong&gt;event attribute. The attribute contains the function called &lt;strong&gt;&lt;em&gt;myAlert()&lt;/em&gt;&lt;/strong&gt;, which will be used in the JavaScript file to create the alert box.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  app.js
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myAlert&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Here is your Alert Box&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the &lt;strong&gt;&lt;em&gt;app.js&lt;/em&gt;&lt;/strong&gt; file, we called the &lt;strong&gt;&lt;em&gt;myAlert()&lt;/em&gt;&lt;/strong&gt; function and declared an alert box within it when the &lt;strong&gt;&lt;em&gt;oncontextmenu &lt;/em&gt;&lt;/strong&gt;is fired within the &lt;strong&gt;&lt;em&gt;div&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#stylecss" class="anchor"&gt;
  &lt;/a&gt;
  style.css
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;chartreuse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  RESULT
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/MwTel3VNPHrYvnKpEp/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/MwTel3VNPHrYvnKpEp/giphy.gif" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-onfocus-event" class="anchor"&gt;
  &lt;/a&gt;
  4). onfocus Event
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;onfocus&lt;/em&gt;&lt;/strong&gt; event fires when a user sets the focus of the mouse on a particular element on the web page. It is the opposite of the onblur event.&lt;/p&gt;

&lt;p&gt;It is mostly used with the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; HTML elements.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#syntax-in-html" class="anchor"&gt;
  &lt;/a&gt;
  SYNTAX in HTML
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="na"&gt;onfocus=&lt;/span&gt;&lt;span class="s"&gt;"myFunction"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Here we will display an alert box when the input field is in focus.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#indexhtml" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;index.html&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;HTML Form Events&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;HTML Form Events&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"focus"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"myInput"&lt;/span&gt; &lt;span class="na"&gt;onfocus=&lt;/span&gt;&lt;span class="s"&gt;"focusFunction()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the file above, we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  declared the &lt;strong&gt;&lt;em&gt;onfocus&lt;/em&gt;&lt;/strong&gt; event inside an input element.&lt;/li&gt;
&lt;li&gt;  created a &lt;em&gt;value&lt;/em&gt; attribute with the word focus&lt;/li&gt;
&lt;li&gt;  Then we linked the file to out JavaScript file, where the magic happens.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  app.js
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;focusFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myInput&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;focus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;focus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Focus is Set.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the &lt;strong&gt;&lt;em&gt;app.js&lt;/em&gt;&lt;/strong&gt; file we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Called the &lt;strong&gt;&lt;em&gt;focusFunction()&lt;/em&gt;&lt;/strong&gt; function.&lt;/li&gt;
&lt;li&gt;  Created the &lt;strong&gt;&lt;em&gt;val&lt;/em&gt;&lt;/strong&gt; and focus variables. The &lt;strong&gt;&lt;em&gt;val&lt;/em&gt;&lt;/strong&gt; variable accessing the input field, while the focus variable holds the word focus.&lt;/li&gt;
&lt;li&gt;  Then finally, we created a condition that says if the value of the form contains the word "&lt;em&gt;focus&lt;/em&gt;" and the input field is in an &lt;strong&gt;&lt;em&gt;onfocus&lt;/em&gt;&lt;/strong&gt; event state, an alert box should be displayed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  RESULT
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/uuqGHLb2c8flayqfov/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/uuqGHLb2c8flayqfov/giphy.gif" alt="Alt text of image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-oninput-event" class="anchor"&gt;
  &lt;/a&gt;
  5). oninput Event
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;oniput&lt;/em&gt;&lt;/strong&gt; event fires when the value of a text element like the &lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt; is changed. Similar to the &lt;strong&gt;&lt;em&gt;onchange&lt;/em&gt;&lt;/strong&gt; event, the main difference is that the input event gets triggered immediately when there is a change, whereas the &lt;strong&gt;&lt;em&gt;onchange&lt;/em&gt;&lt;/strong&gt; event occurs only when the element has lost focus.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#syntax-in-html" class="anchor"&gt;
  &lt;/a&gt;
  SYNTAX in HTML
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;oninput=&lt;/span&gt;&lt;span class="s"&gt;"myFunction"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Here, we will display the value of the input field on the page as the value gets changed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#indexhtml" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;index.html&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;HTML Form Events&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;HTML Form Events&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"myInput"&lt;/span&gt; &lt;span class="na"&gt;oninput=&lt;/span&gt;&lt;span class="s"&gt;"myFunction()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"demo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Above we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;     Created an input tag. Inside which we have an &lt;strong&gt;&lt;em&gt;id&lt;/em&gt;&lt;/strong&gt; called "&lt;strong&gt;&lt;em&gt;myInput&lt;/em&gt;&lt;/strong&gt;", which we will refer to in the JavaScript file.&lt;/li&gt;
&lt;li&gt;  We also have the &lt;strong&gt;&lt;em&gt;oniput&lt;/em&gt;&lt;/strong&gt; event attribute declared.&lt;/li&gt;
&lt;li&gt;  As well as a &lt;strong&gt;&lt;em&gt;div&lt;/em&gt;&lt;/strong&gt; containing the &lt;strong&gt;&lt;em&gt;id&lt;/em&gt;&lt;/strong&gt; called "demo".&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  app.js
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myInput&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;demo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;`You wrote: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, which contains &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; character(s) &lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;;
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The app.js file is straight forward. All we did was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Refer to our &lt;strong&gt;&lt;em&gt;myFuction()&lt;/em&gt;&lt;/strong&gt; function from the &lt;strong&gt;&lt;em&gt;HTML&lt;/em&gt;&lt;/strong&gt; page.&lt;/li&gt;
&lt;li&gt;  Declared a variable called &lt;em&gt;values&lt;/em&gt;, that accesses the input element.&lt;/li&gt;
&lt;li&gt;  Then we accessed the &lt;strong&gt;div&lt;/strong&gt; with the &lt;strong&gt;&lt;em&gt;id&lt;/em&gt;&lt;/strong&gt; of &lt;strong&gt;&lt;em&gt;demo&lt;/em&gt;&lt;/strong&gt;, which is where we will display the text from the input field.&lt;/li&gt;
&lt;li&gt;  With the help of the &lt;strong&gt;&lt;em&gt;textContent&lt;/em&gt;&lt;/strong&gt; method, we can assign the texts to the &lt;strong&gt;div&lt;/strong&gt; tag.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  RESULT
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/woKkh9dDJwcT3CUtmn/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/woKkh9dDJwcT3CUtmn/giphy.gif" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;br&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-oninvalid-event" class="anchor"&gt;
  &lt;/a&gt;
  6). oninvalid Event
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;oninvalid&lt;/em&gt;&lt;/strong&gt; event occurs when a submittable input element is invalid and does not meet certain conditions. In most case, an error message is shown stating why the input submission is not valid.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#syntax-in-html" class="anchor"&gt;
  &lt;/a&gt;
  SYNTAX in HTML
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;oninvalid=&lt;/span&gt;&lt;span class="s"&gt;"myFunction"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Here we display an alert box that shows a message when an empty is submitted in the input field.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#indexhtml" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;index.html&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;HTML Form Events&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
    Username: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;oninvalid=&lt;/span&gt;&lt;span class="s"&gt;"testValidity()"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;  

  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;From the HTML file above, we created an input field that is expected to take in a username. Inside the input field, we have a function called &lt;strong&gt;&lt;em&gt;testValidity(). &lt;/em&gt;&lt;/strong&gt;This function will be used to display our alert box in the JavaScript file.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  app.js
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;testValidity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Field Cannot Be Empty&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we simply reference the function called &lt;strong&gt;&lt;em&gt;testValidity()&lt;/em&gt;&lt;/strong&gt; set inside the &lt;strong&gt;&lt;em&gt;oninvalid&lt;/em&gt;&lt;/strong&gt; event attribute in the &lt;strong&gt;&lt;em&gt;HTML&lt;/em&gt;&lt;/strong&gt; file. Anytime the form is submitted with an input empty filed, the alert box will display the message "Field Cannot Be Empty".&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  RESULT
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/nEtskUGpZcECQ5qBHI/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/nEtskUGpZcECQ5qBHI/giphy.gif" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;br&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-onreset-event" class="anchor"&gt;
  &lt;/a&gt;
  7). onreset Event
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;onreset&lt;/em&gt;&lt;/strong&gt; event occurs when a user clicks on a reset button within a form. This set the form back to the predefined state.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#syntax-in-html" class="anchor"&gt;
  &lt;/a&gt;
  SYNTAX in HTML
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;onreset=&lt;/span&gt;&lt;span class="s"&gt;"myFunction"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;In this example, we will create an input field that gets cleared once the reset button is clicked. Once this event fires, we will log the time in which the form was clicked on the browser page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#indexhtml" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;index.html&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;HTML Form Events&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt; &lt;span class="na"&gt;onreset=&lt;/span&gt;&lt;span class="s"&gt;"resetForm()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Enter Text: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"reset"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Reset form&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"display"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Created a form tag that takes in an &lt;strong&gt;&lt;em&gt;id&lt;/em&gt;&lt;/strong&gt; and an &lt;strong&gt;&lt;em&gt;onreset&lt;/em&gt;&lt;/strong&gt; event attribute.&lt;/li&gt;
&lt;li&gt;  Created an input field that takes in some text.&lt;/li&gt;
&lt;li&gt;  A reset button that sets the state of the form to empty.&lt;/li&gt;
&lt;li&gt;  Lastly, we create a &lt;strong&gt;&lt;em&gt;p&lt;/em&gt;&lt;/strong&gt; tag that carries an &lt;strong&gt;&lt;em&gt;id&lt;/em&gt;&lt;/strong&gt; called* &lt;strong&gt;&lt;em&gt;display&lt;/em&gt;&lt;/strong&gt; to show the time the form was reset.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  app.js
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;resetForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;display&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;`Form Got Reset on: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;())}&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;;

}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the JavaScript file we simply:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Made reference to our &lt;strong&gt;&lt;em&gt;resetForm()&lt;/em&gt;&lt;/strong&gt; function.&lt;/li&gt;
&lt;li&gt;  Accessed the display &lt;strong&gt;&lt;em&gt;id&lt;/em&gt;&lt;/strong&gt; from the &lt;strong&gt;&lt;em&gt;HTML&lt;/em&gt;&lt;/strong&gt; page.&lt;/li&gt;
&lt;li&gt;  Next, we append the &lt;strong&gt;&lt;em&gt;textContent&lt;/em&gt;&lt;/strong&gt; method to display the current date as at when the rest button is clicked.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  RESULT
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/C2ZXxVeckPJBzqw3pC/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/C2ZXxVeckPJBzqw3pC/giphy.gif" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;br&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-onsearch-event" class="anchor"&gt;
  &lt;/a&gt;
  8). onsearch Event
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;onsearch&lt;/em&gt;&lt;/strong&gt; event occurs when a user initiates a search inside an &lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt; element. The &lt;strong&gt;&lt;em&gt; &lt;/em&gt;&lt;/strong&gt;will have a type of "search" for this to get fired.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#syntax-in-html" class="anchor"&gt;
  &lt;/a&gt;
  SYNTAX in HTML
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;onsearch=&lt;/span&gt;&lt;span class="s"&gt;"myFunction"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;We will create an input field that allows users to search once the enter button is pressed. The searched value will be shown on the page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#indexhtml" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;index.html&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;HTML Form Events&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Write in the Input Field and Press Enter To Search&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt;&lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Search"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"searching"&lt;/span&gt; &lt;span class="na"&gt;onsearch=&lt;/span&gt;&lt;span class="s"&gt;"searchInput()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 

    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"display"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt; 

  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the &lt;strong&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;/strong&gt; file, we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Created an input element that has an &lt;strong&gt;id&lt;/strong&gt; called &lt;strong&gt;&lt;em&gt;searching&lt;/em&gt;&lt;/strong&gt;. We also declared the &lt;strong&gt;&lt;em&gt;onsearch&lt;/em&gt;&lt;/strong&gt; event attribute that takes in a function&lt;/li&gt;
&lt;li&gt;  Lastly, we created a &lt;strong&gt;p&lt;/strong&gt; element that has an &lt;strong&gt;id&lt;/strong&gt; called to display to help show the value of the input field on the page.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  app.js
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;searchInput&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;searching&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;display&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
   &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;`Searching: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt; 
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the &lt;strong&gt;&lt;em&gt;app.js file&lt;/em&gt;&lt;/strong&gt;, we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Made reference to the function called &lt;strong&gt;&lt;em&gt;searchInput()&lt;/em&gt;&lt;/strong&gt; declared in the &lt;strong&gt;HTML&lt;/strong&gt; file.&lt;/li&gt;
&lt;li&gt;  Accessed the &lt;strong&gt;id's&lt;/strong&gt; in the &lt;strong&gt;HTML&lt;/strong&gt; file.&lt;/li&gt;
&lt;li&gt;  Lastly, we displayed the value of the input field on the page once the ENTER key is pressed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  RESULT
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/E5X2JBf2fm0KyflMXQ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/E5X2JBf2fm0KyflMXQ/giphy.gif" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-onselect-event" class="anchor"&gt;
  &lt;/a&gt;
  9). onselect Event
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;onselect&lt;/em&gt;&lt;/strong&gt; event only occurs when a particular text has been selected on either the &lt;em&gt;&lt;/em&gt; or &lt;em&gt;&lt;/em&gt; elements.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#syntax-in-html" class="anchor"&gt;
  &lt;/a&gt;
  SYNTAX in HTML
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;onselect=&lt;/span&gt;&lt;span class="s"&gt;"myFunction"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;In this example, we will create an input field. The goal is to display the number of text selected in the input field inside an alert pop box.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#indexhtml" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;index.html&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;HTML Form Events&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Select Some Text in The Input Field:&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Happiness is Free"&lt;/span&gt; &lt;span class="na"&gt;onselect=&lt;/span&gt;&lt;span class="s"&gt;"selected()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the &lt;strong&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;/strong&gt; file above, we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Created an input field which contains the value "Happiness is Free".&lt;/li&gt;
&lt;li&gt;  Also, we have our &lt;strong&gt;&lt;em&gt;onselect&lt;/em&gt;&lt;/strong&gt; attribute with a function called &lt;strong&gt;&lt;em&gt;selected()&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  app.js
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;highlighted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionStart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectionEnd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;`You Selected &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;highlighted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; Words&lt;/span&gt;&lt;span class="se"&gt;\`&lt;/span&gt;&lt;span class="s2"&gt;);
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Referenced the &lt;strong&gt;&lt;em&gt;selected() &lt;/em&gt;&lt;/strong&gt;function from the &lt;strong&gt;HTML&lt;/strong&gt; page.&lt;/li&gt;
&lt;li&gt;  Created a variable called &lt;strong&gt;highlighted.&lt;/strong&gt; Inside this variable, we get the value of text inside the input field, while getting the index at the beginning and the end of the input field.&lt;/li&gt;
&lt;li&gt;  Lastly, when the text gets selected, we display an alert box showing the number of words that were selected in the input field.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  RESULT
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/TCNZ9k1GRtautcokOL/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/TCNZ9k1GRtautcokOL/giphy.gif" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;br&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-onsubmit-event" class="anchor"&gt;
  &lt;/a&gt;
  10). onsubmit Event
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;onsubmit&lt;/em&gt;&lt;/strong&gt; event gets triggered when a form is submitted on a page, by a user.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#syntax-in-html" class="anchor"&gt;
  &lt;/a&gt;
  SYNTAX in HTML
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;element&lt;/span&gt; &lt;span class="na"&gt;onsubmit=&lt;/span&gt;&lt;span class="s"&gt;"myFunction"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;In this example, we will be submitting the values inside a form. We will get a confirmation message from another page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#indexhtml" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;index.html&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;HTML Form Events&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"./submit.html"&lt;/span&gt; &lt;span class="na"&gt;onsubmit=&lt;/span&gt;&lt;span class="s"&gt;"myFunction()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Enter name: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"app.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the &lt;strong&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;/strong&gt; page, we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Have a form element with an action that routes to a &lt;strong&gt;&lt;em&gt;submit.html&lt;/em&gt;&lt;/strong&gt; page when the form is submitted.&lt;/li&gt;
&lt;li&gt;  Inside the form, we also have the &lt;strong&gt;&lt;em&gt;onsubmit&lt;/em&gt;&lt;/strong&gt; event attribute, which takes in the function called &lt;strong&gt;&lt;em&gt;myFunction()&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  Also, have two input elements. One takes in the name input, while the other is a button that helps us submit the form.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  app.js
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your Name is about to be Submitted, Click OK to continue.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the JavaScript file, we simply called the &lt;strong&gt;&lt;em&gt;myFunction()&lt;/em&gt;&lt;/strong&gt; declared in the &lt;strong&gt;HTML&lt;/strong&gt; page, then we created an alert box that displays a message when the form is submitted.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#submithtml" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;submit.html&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Submit Page&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Congratulations. Your Name Has Been Submitted To The Database!&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;&lt;em&gt;submit.html&lt;/em&gt;&lt;/strong&gt; file is the page that gets displayed when the form is submitted.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  RESULT
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/GNeHZUuoOuxaqaqKLj/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/GNeHZUuoOuxaqaqKLj/giphy.gif" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;This article aims to cover the basics of how the &lt;strong&gt;HTML &lt;/strong&gt;form event attribute work.&lt;/p&gt;

&lt;p&gt;Also, &lt;a href="https://github.com/desoga10/HTML-form-event-attributes"&gt;here&lt;/a&gt; is the GitHub link to the code examples used in the article.&lt;/p&gt;

&lt;p&gt;Subscribe for more tutorials &lt;a href="http://eepurl.com/gZ-jJH"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How I use Notion as a developer</title>
      <author>Rui Sousa</author>
      <pubDate>Tue, 08 Dec 2020 09:57:22 +0000</pubDate>
      <link>https://dev.to/itzami/how-i-use-notion-as-a-developer-36lc</link>
      <guid>https://dev.to/itzami/how-i-use-notion-as-a-developer-36lc</guid>
      <description>&lt;p&gt;&lt;a href="https://www.notion.so/"&gt;Notion&lt;/a&gt; is an amazing tool that helps you organize your work and you can pretty much adjust to all of your needs. Also, there are &lt;a href="https://www.notion.so/Notion-Template-Gallery-181e961aeb5c4ee6915307c0dfd5156d"&gt;a lot of templates&lt;/a&gt; to choose from made by incredibly creative people.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-overall-setup" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;My Overall Setup&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gEalzn_I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oxhg33965373j0r3rh7w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gEalzn_I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oxhg33965373j0r3rh7w.png" alt="My Overall Setup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I use Notion for a lot of stuff (activity tracker, money manager, diary) but it all started when I realized that I had way too many development blog posts saved in my browser's bookmarks. Once I took a clear look at them I said to myself&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There's no way I would ever find here, even if I wanted&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, something had to be done about it and that's when I started using Notion! My first database was &lt;strong&gt;Reading List&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reading-list" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Reading List&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ioakLrd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t8ty1hflruynr0njev1y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ioakLrd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t8ty1hflruynr0njev1y.png" alt="Reading List"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Reading List&lt;/strong&gt; serves as my organized collection where I put the articles or tutorials that I find interesting for stuff that will surely be useful for my career. More than being a collection of stuff that I haven't read before, it's a collection of stuff that I know will always be useful for me and that I should always take into consideration.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yes, a Google search might serve the same purpose but here I'm capable to organize the info as I want&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that's what I do. Since Notion allows you to add tags and filters, it's the perfect way to only what you actually want to see, which facilitates search. I also ended up using Gallery mode because, for me, having a list of links isn't particularly interesting and I want something that is eye-popping and I can find easily. I would say that the images do the trick!&lt;/p&gt;

&lt;p&gt;However, I ended up realizing that not everything belongs to the Reading List and they are just stuff that I find around the internet that seems interesting but I don't really have time to read them right when I find them so that's where &lt;strong&gt;Quick Links&lt;/strong&gt; appear!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-links" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Links&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hMBPwmUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/39r3t9f31wq8i7aib44d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hMBPwmUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/39r3t9f31wq8i7aib44d.png" alt="Quick Links"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick Links&lt;/strong&gt; pretty much represents what I don't want my &lt;strong&gt;Reading List&lt;/strong&gt; to look like but when you're on your phone you don't have time to make an incredible-looking database. Instead, you just copy &amp;amp; paste the link and title and you're all set for when you actually have time to study whatever you've found.&lt;br&gt;
It basically serves as a triage for whatever comes into my Notion. The material does the check-in here and then they are properly dropped in their own place! I try to have this page as clean as possible since I don't want to repeat my mistake with the bookmarks!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#task-list" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Task List&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ow2TLLHL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/18w3mgaa05kem00722ti.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ow2TLLHL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/18w3mgaa05kem00722ti.png" alt="Task List"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I don't like to program my day or even week but, sometimes, when you actually want to have side-projects, you need to organize your life! If you don't, you'll never find the time to work on them so that's why this Task List exists. I mostly use pen and paper for work but for my side projects, considering that I only have the weekends to work on them, it's a great tool and helps me assess the project's progression.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blog" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Blog&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U4n18orW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a0nfemzhgg2nbowwwj39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U4n18orW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a0nfemzhgg2nbowwwj39.png" alt="Blog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think this one is self-descriptive but I write all my content on Notion before assessing if it's good enough to be published. It's also where I take note of topics that I might want to cover or links to other blog posts that I may want to expand upon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#note-taking" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Note Taking&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ELRkVOSp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3laizhf0xco0kv967bny.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ELRkVOSp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3laizhf0xco0kv967bny.png" alt="Note Taking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here stands the important notes that I take (well, duh!) from my &lt;strong&gt;Reading List&lt;/strong&gt; or books. Some things aren't worth taking notes on and some others deserve a special place to which I can quickly refer to. For example, &lt;strong&gt;&lt;em&gt;Rework&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;The Opinionated Guide to React&lt;/em&gt;&lt;/strong&gt; are two books that I read, enjoyed, and took some notes along the way and I want to preserve them without having to get to the original material again!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#app-ideas" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;App Ideas&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---idqUs0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2w1ojcx88nryly8geby3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---idqUs0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2w1ojcx88nryly8geby3.png" alt="App Ideas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I guess that we all have this section on a paper, note app on the phone, or a word document but here stands my quirky ideas for apps, including with technologies that I have no idea on how to work with. Some are supposed to be personal projects, others might turn into actual products. The important part for me here is that I classify these projects on their type (personal or product) and degree of execution (&lt;em&gt;"As of now, how easily can I build it and how motivated am I to do so?"&lt;/em&gt;). For me, the degree of execution plays a huge part in it because while all ideas are great, I may just not feel incline to elaborate on them... but I don't want to lose them as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learning-x" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Learning X&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6HY5L6cQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/znnrdvduylyydez291ff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6HY5L6cQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/znnrdvduylyydez291ff.png" alt="Learning X"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is basically a sub-division of &lt;strong&gt;Note Taking&lt;/strong&gt; but I also insert here resources for these specific technologies. I'm still starting to build a system for this section but at least I have a visible section for something that I'm currently learning and that's the important part!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-pretty-much-it" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;That's pretty much it!&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;If you read this far, thank you so much for it! Hopefully, this post ends up helping something that might need some organization in their life!&lt;br&gt;
I usually ramble a lot on &lt;a href="https://twitter.com/HeyItzaMi"&gt;Twitter&lt;/a&gt; so you can find me there!&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>tutorial</category>
      <category>writing</category>
    </item>
  </channel>
</rss>
