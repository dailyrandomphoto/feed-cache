<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learnings from Accessibility Workshop from Enterprise NG 2020</title>
      <author>Alfredo Perez</author>
      <pubDate>Mon, 23 Nov 2020 15:57:15 +0000</pubDate>
      <link>https://dev.to/alfredoperez/learnings-from-accessibility-workshop-from-enterprise-ng-2020-2k57</link>
      <guid>https://dev.to/alfredoperez/learnings-from-accessibility-workshop-from-enterprise-ng-2020-2k57</guid>
      <description>&lt;p&gt;Here are some of the interesting points from the &lt;a href="https://www.ng-conf.org/2020/sessions/build-for-accessibility-with-angular/"&gt;Build for Accessibility with Angular&lt;/a&gt;  workshop by &lt;a href="https://twitter.com/Martine_Dowden"&gt;Martine Dowden&lt;/a&gt; and &lt;a href="https://twitter.com/mrdowden"&gt;Michael Dowden&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Labels are only for form fields. Do not use labels anywhere else&lt;/li&gt;
&lt;li&gt;Wave can be used to see the page structure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Vx8LStV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/be6dm8wuaj2qkozid1ot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Vx8LStV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/be6dm8wuaj2qkozid1ot.png" alt="2020-11-23_9-17-59"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AXE provides detailed information and links about the problem and possible resolutions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4MMQrHCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9eoel9z7rrufem0o175r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4MMQrHCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9eoel9z7rrufem0o175r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use unit tests that test for accessibility-related attributes like roles and aria labels
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;icon butttons should have aria labels&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;iconButtons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debugElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAlK&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button[mat-icon-button]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;missingLabels&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;iconButtons&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;¡&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-label&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
 &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;missingLabels&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeFalsy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mat list should have a role of list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debugElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mat-list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
 &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;role*)).toEqual(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;);
});
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Prefer the use of the attribute &lt;code&gt;type="submit"&lt;/code&gt; for the buttons in the form instead of calling the method to submit from the &lt;code&gt;click&lt;/code&gt; handler&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KPMiCt_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sliw8ffvvqrgchn01xhf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KPMiCt_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sliw8ffvvqrgchn01xhf.png" alt="image (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Prefer to enable/disable instead of showing/hiding when it is needed to show data depending on a condition. This helps to avoid confusing the user and having UI jumping around.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Links are links. Buttons are buttons. Div and spans are not buttons nor links.  Divs and spans miss some accessibility features for example they are not focusable and cannot be disabled.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When having a link that is only an icon, use the &lt;code&gt;aria-hidden="true"&lt;/code&gt; and add a label&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"profile"&lt;/span&gt; 
   &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Profile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
    &lt;span class="na"&gt;classss=&lt;/span&gt;&lt;span class="s"&gt;"material-icons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   Face
 &lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You should always have the &lt;code&gt;alt&lt;/code&gt; attribute on images, however, it can be blank. The &lt;code&gt;alt&lt;/code&gt; should describe what the image is trying to convey. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Decorative images can have an empty &lt;code&gt;alt&lt;/code&gt; attribute or have a &lt;code&gt;role="presentation"&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In alerts or notifications use &lt;code&gt;role="alert"&lt;/code&gt;, also use  &lt;code&gt;aria-live="polite"&lt;/code&gt; for status notifcaions and &lt;code&gt;aria-live="assertive"&lt;/code&gt; for something that requires attention &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#chrome-developer-tools" class="anchor"&gt;
  &lt;/a&gt;
  Chrome Developer Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There is an option for accessibility in the "&lt;a href="https://developers.google.com/web/tools/chrome-devtools/accessibility/reference#audits"&gt;Audits&lt;/a&gt;" tab&lt;/li&gt;
&lt;li&gt;There is an accessibility tab in Chrome that contains the &lt;a href="https://developers.google.com/web/tools/chrome-devtools/accessibility/reference"&gt;accessibility tree&lt;/a&gt;, the &lt;a href="https://developers.google.com/web/tools/chrome-devtools/accessibility/reference#aria"&gt;ARIA attributes&lt;/a&gt;, and the accessibility-related computed attributes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#angular-material" class="anchor"&gt;
  &lt;/a&gt;
  Angular Material
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Make sure that the custom color pass the contrast&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OH1-RP_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k1np8ptdz564kvnxib4x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OH1-RP_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k1np8ptdz564kvnxib4x.png" alt="2020-11-23_9-17-23"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links" class="anchor"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.deque.com/axe/"&gt;AXE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wave.webaim.org/"&gt;WAVE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://accessibilityinsights.io/en/"&gt;Accessibility Insight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://material.angular.io/guide/theming"&gt;Angular theming guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://material.angular.io/guide/typography"&gt;Angular typography guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/"&gt;Google Fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://webaim.org/resources/contrastchecker/"&gt;Webaim contrast checker&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="http://mcg.mbitson.com"&gt;Color palette builder&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://materialtheme.arcsine.dev/"&gt;Theme builder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>a11y</category>
    </item>
    <item>
      <title>Recreating Breakout for the Web</title>
      <author>Bijan Boustani</author>
      <pubDate>Mon, 23 Nov 2020 14:46:23 +0000</pubDate>
      <link>https://dev.to/bijanbwb/recreating-breakout-for-the-web-4c7f</link>
      <guid>https://dev.to/bijanbwb/recreating-breakout-for-the-web-4c7f</guid>
      <description>&lt;p&gt;Last time, we took a look at &lt;a href="https://dev.to/bijanbwb/recreating-pong-for-the-web-with-elm-2bi8"&gt;creating a web version of &lt;em&gt;Pong&lt;/em&gt;&lt;/a&gt;, the classic Atari game. Here is an animation of what we ended up with:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S2rYOepw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mkl885jk6nq7w04qcw4g.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S2rYOepw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mkl885jk6nq7w04qcw4g.gif" alt="Pong Implementation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty cool! It's a fun game to play, even after all these years. And it was even more fun &lt;strong&gt;figuring out all the little things that made &lt;em&gt;Pong&lt;/em&gt; so compelling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this post, I'll share some of the steps I took to adapt the &lt;em&gt;Pong&lt;/em&gt; implementation into &lt;em&gt;Breakout&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sbKdgy6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ilz66klx0y73h2ajc447.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sbKdgy6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ilz66klx0y73h2ajc447.gif" alt="Breakout Implementation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The original goal for these blog posts was to share step-by-step tutorials of how to recreate classic games. But &lt;strong&gt;the intent has evolved into sharing some interesting notes, ideas, and takeaways about the process of building these games&lt;/strong&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  ⏳ tl;dr
&lt;/h2&gt;

&lt;p&gt;In the last blog post, I buried the links to the playable demo and the source code all the way at the bottom of the post. It was my devious intention to force everyone to take hours of their precious time to scroll through my &lt;del&gt;shoddy&lt;/del&gt; writing. This time, I'll link to them here in case you want to try the game out before reading on.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🕹 &lt;a href="https://create-with-games.herokuapp.com/breakout"&gt;&lt;strong&gt;Playable Demo&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;💻 &lt;a href="https://github.com/create-with/games/blob/master/assets/elm/src/Breakout.elm"&gt;&lt;strong&gt;Source Code on GitHub&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-breakout" class="anchor"&gt;
  &lt;/a&gt;
  🛸 Why Breakout?
&lt;/h2&gt;

&lt;p&gt;After working on &lt;em&gt;Pong&lt;/em&gt; for a while, I was dying to move on to a different game genre. I've always wanted to learn how to create platform games like &lt;em&gt;Super Mario Bros.&lt;/em&gt; and adventure games like &lt;em&gt;The Legend of Zelda&lt;/em&gt;. But I decided to try &lt;em&gt;Breakout&lt;/em&gt; for a couple reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Breakout&lt;/em&gt; was my favorite Atari game. I grew up during the &lt;a href="https://en.wikipedia.org/wiki/History_of_video_games"&gt;Nintendo era of video game history&lt;/a&gt;, so the Atari 2600 console was a little before my time. &lt;strong&gt;But games like &lt;em&gt;Breakout&lt;/em&gt; felt timeless in their appeal&lt;/strong&gt;. I also remember being blown away by some sort of "fancy" &lt;em&gt;Breakout&lt;/em&gt; version in the arcade. I only recently found out that was a game called &lt;a href="https://en.wikipedia.org/wiki/Arkanoid"&gt;&lt;em&gt;Arkanoid&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I already had most of the core components of the game figured out like the ball, paddle, and game window. &lt;strong&gt;With the basic mechanics in place, I'd be able to focus on other fun features like particle effects, pixel art, animation, music, etc.)&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-interesting-about-breakout" class="anchor"&gt;
  &lt;/a&gt;
  🤔 What's Interesting About Breakout?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Breakout&lt;/em&gt; consists of similar elements we saw last time like a game window, a paddle, and a ball. While &lt;em&gt;Pong&lt;/em&gt; was meant as a two-player game, &lt;em&gt;Breakout&lt;/em&gt; could be played solo since the objective was to break through the rows of stationary bricks at the top of the screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tr8bMP-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5vuowpu46lnzzz7plmag.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tr8bMP-s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5vuowpu46lnzzz7plmag.jpg" alt="Breakout Sketch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beyond the gameplay itself, &lt;em&gt;Breakout&lt;/em&gt; has an interesting history. &lt;strong&gt;Before &lt;a href="https://en.wikipedia.org/wiki/Steve_Jobs"&gt;Steve Jobs&lt;/a&gt; went on to found some company called Apple, he worked on &lt;em&gt;Breakout&lt;/em&gt; at Atari&lt;/strong&gt;. The story goes that he would invite his friend Steve Wozniak, who worked at Hewlett-Packard, to help him design and build the game. I find it fascinating to think that &lt;em&gt;Breakout&lt;/em&gt; had some influence on the design of the &lt;a href="https://en.wikipedia.org/wiki/Apple_II"&gt;Apple II&lt;/a&gt; computer, given its place in the history of computing.&lt;/p&gt;

&lt;p&gt;If you're interested in reading more about this, the &lt;a href="https://en.wikipedia.org/wiki/Breakout_(video_game)"&gt;Breakout Wikipedia entry&lt;/a&gt; is a great place to start. And there are some fun videos on YouTube like &lt;a href="https://www.youtube.com/watch?v=p5IaCTJdVuM&amp;amp;t"&gt;&lt;em&gt;Before Apple: Steve Jobs at Atari&lt;/em&gt;&lt;/a&gt; from Gaming Historian.&lt;/p&gt;

&lt;p&gt;But what's most interesting to me about Breakout is how &lt;strong&gt;we can layer features and "game feel" elements on top of the simple core mechanics&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#game-feel-and-juice" class="anchor"&gt;
  &lt;/a&gt;
  🤯 Game Feel and "Juice"
&lt;/h2&gt;

&lt;p&gt;When I started working on a &lt;em&gt;Breakout&lt;/em&gt; implementation, I knew I already had most of the features I needed for the game window and the paddle and the ball. You can see &lt;a href="https://dev.to/bijanbwb/recreating-pong-for-the-web-with-elm-2bi8"&gt;my previous blog post&lt;/a&gt; for an overview of how I implemented those features.&lt;/p&gt;

&lt;p&gt;I knew I'd have to figure out how to implement the rows of breakable bricks at the top of the screen, but &lt;strong&gt;one of the first things I wanted to do was add a "screen shake" feature&lt;/strong&gt;. When the ball hit one of the bricks, I wanted the window to shake to give the &lt;em&gt;feeling&lt;/em&gt; that it was an impactful collision.&lt;/p&gt;

&lt;p&gt;A screen shake is &lt;strong&gt;one of those features where you kind of don't notice it's there, but you can "feel" it when you play&lt;/strong&gt;. It's used commonly in games, but proved surprisingly hard to find for browser games.&lt;/p&gt;

&lt;p&gt;While looking for resources about how to accomplish this, I stumbled on this talk called &lt;a href="https://www.youtube.com/watch?v=AJdEqssNZ-U"&gt;&lt;em&gt;The Art of Screenshake&lt;/em&gt;&lt;/a&gt;, and I became fascinated by this idea of adding seemingly small details to a game that add up to a lot in terms of game feel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lvLWdydZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ut0h7y7cs62bzwyl7q0t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lvLWdydZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ut0h7y7cs62bzwyl7q0t.png" alt="The Art of Screenshake"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Just fill your game with love and tiny details."&lt;br&gt;
Jan Willem Nijman&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This guided a lot of the work I ended up putting into building &lt;em&gt;Breakout&lt;/em&gt;. In addition to the core game mechanics and a screen shake, I added things particle effects, pixel art, and music to make the game more fun and appealing.&lt;/p&gt;

&lt;p&gt;For more on the topic of Game Feel, there's also a great video from Game Maker's Toolkit called &lt;a href="https://www.youtube.com/watch?v=216_5nu4aVQ"&gt;&lt;em&gt;Secrets of Game Feel and Juice&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-a-screenshake" class="anchor"&gt;
  &lt;/a&gt;
  🔄 Implementing a Screenshake
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;So how does a screenshake work?&lt;/strong&gt; Thankfully we're working with a simple 2D game (as opposed to 3D or VR), so we only need to worry about moving the game window and then putting it back to restore its original position.&lt;/p&gt;

&lt;p&gt;We start with our rectangular game window that's rendered with SVG. I've been working with the Elm programming language for these games, so I started with a type and set some initial values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;Window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;backgroundColor&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;initialWindow&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Window&lt;/span&gt;
&lt;span class="n"&gt;initialWindow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black"&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;800.0&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;600.0&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; represent the top left position of the game window. What we need to do is shift the &lt;code&gt;x&lt;/code&gt; value to move the window left and right, and shift the &lt;code&gt;y&lt;/code&gt; value to move the window up and down.&lt;/p&gt;

&lt;p&gt;Then, after we shift the game window out of place, we restore its position back to the original position at &lt;code&gt;(0, 0)&lt;/code&gt;. Its kind of subtle if you don't know to look for it, but obvious once you see it. Here's what it looks like with the game elements in place so the window shake is visible:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVdZZS6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rb8xlpldetyw1oyael12.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVdZZS6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rb8xlpldetyw1oyael12.gif" alt="Screen Shake"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you go &lt;a href="https://create-with-games.herokuapp.com/breakout"&gt;play the game in the production environment&lt;/a&gt;, you can actually click anywhere in the game window to simulate the screen shake feature.&lt;/p&gt;

&lt;p&gt;I used a random number generator (which can be surprisingly hard to work with in Elm) so the screen shake didn't seem so predictable or jarring. And it does add a lot when the ball collides with a brick to trigger a screen shake.&lt;/p&gt;

&lt;p&gt;If you're interested in learning more about screen shakes and more involved implementations, there's an amazing series of talks from the Game Developer's Conference called &lt;em&gt;Math for Game Programmers&lt;/em&gt;. One of the talks is called &lt;a href="https://www.youtube.com/watch?v=tu-Qe66AvtY"&gt;&lt;em&gt;Juicing Your Cameras With Math&lt;/em&gt;&lt;/a&gt; and it's really fun to see the code you can use to implement your own amazing screen shake features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#particle-effects" class="anchor"&gt;
  &lt;/a&gt;
  🎉 Particle Effects
&lt;/h2&gt;

&lt;p&gt;Next, I wanted to add some particle effects to the game. Particles are usually things like fireworks, explosions, smoke, etc. I already had the screen shake working, but &lt;strong&gt;I thought it would be cool to create an explosion of particles when the ball collided with a brick&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I can't take credit for how awesome this feature looks, because I used an existing Elm package that makes these kinds of particles easy to work with. &lt;a href="https://package.elm-lang.org/packages/BrianHicks/elm-particle/latest/"&gt;&lt;code&gt;elm-particle&lt;/code&gt;&lt;/a&gt; is a package from &lt;a href="https://github.com/BrianHicks"&gt;Brian Hicks&lt;/a&gt;, who not only organizes the yearly Elm conference called &lt;a href="https://elm-conf.com/"&gt;elm-conf&lt;/a&gt;, but is also the nicest person you'll ever meet.&lt;/p&gt;

&lt;p&gt;Here's an animation that shows what the particles look like during gameplay:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sbKdgy6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ilz66klx0y73h2ajc447.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sbKdgy6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ilz66klx0y73h2ajc447.gif" alt="Particles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can tinker with all sorts of settings for the particles. I ended up spawning ten small particles from the top left of the ball whenever it collides with a brick. In addition to the position, you can also tinker with things like how gravity affects the particles, how quickly they move and rotate, and how long they last before going away.&lt;/p&gt;

&lt;p&gt;If you're interested in seeing more of the specifics of how the particle effects are implemented, check out the &lt;a href="https://github.com/create-with/games/blob/master/assets/elm/src/Breakout.elm"&gt;&lt;code&gt;Breakout.elm&lt;/code&gt; file&lt;/a&gt; in the source code. The &lt;code&gt;elm-particle&lt;/code&gt; package documentation also has some fun examples of how to use it for fun things like water and fireworks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#assets-and-pixel-art" class="anchor"&gt;
  &lt;/a&gt;
  🎨 Assets and Pixel Art
&lt;/h2&gt;

&lt;p&gt;For the &lt;em&gt;Pong&lt;/em&gt; game I worked on, all the elements of the game were just based on simple shapes. So SVG rectangles were sufficient to represent things like the game window and the paddles and the ball.&lt;/p&gt;

&lt;p&gt;But for &lt;em&gt;Breakout&lt;/em&gt;, &lt;strong&gt;I wanted to incorporate some pixel art assets into the game to make it look a little nicer&lt;/strong&gt;. I ended up using an iPad App called &lt;a href="https://apps.apple.com/gb/app/pixel-studio-for-pixel-art/id1404203859#?platform=ipad"&gt;Pixel Studio&lt;/a&gt; to create the assets, but you might also want to check out &lt;a href="https://www.aseprite.org/"&gt;Aseprite&lt;/a&gt; if you're interested in creating pixel art.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DLL4X3im--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t8cg3n6afn7ykr15vvvi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DLL4X3im--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t8cg3n6afn7ykr15vvvi.png" alt="Pixel Art Paddle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So instead of using &lt;code&gt;Svg.rect&lt;/code&gt; to create a rectangle, I used &lt;code&gt;Svg.image&lt;/code&gt; and linked to &lt;a href="https://github.com/create-with/games/tree/master/assets/static/images"&gt;the static assets in the repository&lt;/a&gt;. The &lt;code&gt;viewBall&lt;/code&gt; and &lt;code&gt;viewPaddle&lt;/code&gt; functions use familiar attributes for the size and position, and also use the &lt;code&gt;xlinkHref&lt;/code&gt; attribute to pull in the pixel art images.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="n"&gt;viewBall&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Ball&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;
&lt;span class="n"&gt;viewBall&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlinkHref&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/images/pixel-ball.png"&lt;/span&gt;
        &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromFloat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;Util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Vector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getX&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;
        &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromFloat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;Util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Vector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getY&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;
        &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromFloat&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;
        &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromFloat&lt;/span&gt; &lt;span class="n"&gt;ball&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="n"&gt;viewPaddle&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Paddle&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;
&lt;span class="n"&gt;viewPaddle&lt;/span&gt; &lt;span class="n"&gt;paddle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlinkHref&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/images/pixel-paddle.png"&lt;/span&gt;
        &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromFloat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;Util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Vector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getX&lt;/span&gt; &lt;span class="n"&gt;paddle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;
        &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromFloat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;Util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Vector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getY&lt;/span&gt; &lt;span class="n"&gt;paddle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;
        &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromFloat&lt;/span&gt; &lt;span class="n"&gt;paddle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;
        &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Svg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromFloat&lt;/span&gt; &lt;span class="n"&gt;paddle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Mozilla's Developer Network (MDN) is great for looking up how to work with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG"&gt;SVG elements and attributes&lt;/a&gt;. And then it's just a matter of translating it into Elm using the &lt;a href="https://package.elm-lang.org/packages/elm/svg/latest"&gt;&lt;code&gt;elm/svg&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#updating-the-game-platform" class="anchor"&gt;
  &lt;/a&gt;
  🎮 Updating the Game Platform
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;I ended up spending some time creating a new back-end for this project as well&lt;/strong&gt;. I had originally built &lt;em&gt;Pong&lt;/em&gt; and used a tool called &lt;a href="https://parceljs.org/"&gt;Parcel&lt;/a&gt; to bundle the project. But I ended up running into trouble as soon as I started working with static assets, so I replaced it with the &lt;a href="https://www.phoenixframework.org/"&gt;Phoenix Framework&lt;/a&gt;, which is way more familiar to me.&lt;/p&gt;

&lt;p&gt;It may be overkill to use Phoenix to serve a couple of small image files, but it also gives me some freedom to add back-end features like tracking scores as I build more games. I've also been playing with Phoenix's LiveView capability and love working with it:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BXSpLwQm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1296919463670013952/pu/img/GToElPEbVzbE9pUU.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLdXkL5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/800460740670980096/GcWs_chH_normal.jpg" alt="Bijan Boustani profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Bijan Boustani
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/bijanbwb"&gt;@bijanbwb&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🤯 I've been having so much fun learning &lt;a href="https://twitter.com/elixirlang"&gt;@elixirlang&lt;/a&gt; and OTP and LiveView while building this little terminal code runner demo. Still lots of rough edges, but it's cool to see it actually working! &lt;a href="https://twitter.com/hashtag/myelixirstatus"&gt;#myelixirstatus&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:18 PM - 21 Aug 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1296919592237969409" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1296919592237969409" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      15
      &lt;a href="https://twitter.com/intent/like?tweet_id=1296919592237969409" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      73
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Given that I was going from one game to multiple games, I wanted to add an index page to serve as a game selection screen. I also added some simple routing features to navigate between the different games. And I imported the &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt; framework to start with a simple design and add a footer area with some helpful links.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BJebv_Vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gabatg0ilu9ilz31tvmx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BJebv_Vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gabatg0ilu9ilz31tvmx.png" alt="Game Platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#music" class="anchor"&gt;
  &lt;/a&gt;
  🎼 Music
&lt;/h2&gt;

&lt;p&gt;For &lt;em&gt;Pong&lt;/em&gt;, I had a couple of files called &lt;code&gt;beep.wav&lt;/code&gt; and &lt;code&gt;boop.wav&lt;/code&gt; that I was using for simple sound effects. I left those out of &lt;em&gt;Breakout&lt;/em&gt;, but I wanted to add some background music.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2GsZ0GVE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1131530155787264001/pu/img/VNlyeR2EIWGRCoS_.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLdXkL5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/800460740670980096/GcWs_chH_normal.jpg" alt="Bijan Boustani profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Bijan Boustani
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/bijanbwb"&gt;@bijanbwb&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🎶 I had fun writing some custom "chiptune" style music with Bosca Ceoil and importing it into the &lt;a href="https://twitter.com/elmlang"&gt;@elmlang&lt;/a&gt; minigame I've been working on using ports and howler.js. I also added a little text overlay for interacting with containers. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:01 PM - 23 May 2019
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1131530464727064577" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1131530464727064577" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      0
      &lt;a href="https://twitter.com/intent/like?tweet_id=1131530464727064577" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      10
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;In the past, I had tinkered with creating some custom "chiptune" style music using programs like &lt;a href="https://www.lexaloffle.com/pico-8.php"&gt;PICO-8&lt;/a&gt; and &lt;a href="https://boscaceoil.net"&gt;Bosca Ceoil&lt;/a&gt;. They can be fun to play with, but my &lt;em&gt;Breakout&lt;/em&gt; implementation was already getting complicated enough, so I tried finding existing music online.&lt;/p&gt;

&lt;p&gt;After Googling a bit, I came across &lt;a href="https://playonloop.com"&gt;PlayOnLoop.com&lt;/a&gt; and found a royalty-free, upbeat song I liked and created a new &lt;a href="https://github.com/create-with/games/blob/master/CREDITS.md"&gt;&lt;code&gt;CREDITS.md&lt;/code&gt; file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To play the music, I use the &lt;a href="https://howlerjs.com/"&gt;howler.js&lt;/a&gt; JavaScript library. It required using &lt;a href="https://guide.elm-lang.org/interop/ports.html"&gt;Elm ports&lt;/a&gt; to sync up the JavaScript and Elm code, but howler.js has some great features that I'll likely continue to use as I create more games. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-the-bricks-finally" class="anchor"&gt;
  &lt;/a&gt;
  🧱 Implementing the Bricks (Finally)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bp3XUEka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cpq9242dl4zmjy9btuua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bp3XUEka--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cpq9242dl4zmjy9btuua.png" alt="Bricks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The rows of breakable bricks at the top of the screen were the most important feature&lt;/strong&gt;, so naturally I procrastinated on implementing them.&lt;/p&gt;

&lt;p&gt;Somewhere in the commit history on GitHub, there was a range of commits where I used various combinations of several data structures (&lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Dict&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;) in hopes of finding something that felt right to work with. I won't bore you with the details, but I can at least share how some of the fun parts work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%F0%9F%8F%97-individual-bricks" class="anchor"&gt;
  &lt;/a&gt;
  🏗 Individual Bricks
&lt;/h3&gt;

&lt;p&gt;This is what the fields look like for the &lt;code&gt;Brick&lt;/code&gt; type along with the data for a default brick:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;Brick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hitCount&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hitThreshold&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Vector&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strokeColor&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="n"&gt;defaultBrick&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Brick&lt;/span&gt;
&lt;span class="n"&gt;defaultBrick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white"&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hitCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hitThreshold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strokeColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black"&lt;/span&gt;
    &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;One of the first things that might stand out is the &lt;code&gt;position&lt;/code&gt;. For &lt;em&gt;Pong&lt;/em&gt;, I was using separate &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; fields to store &lt;code&gt;Float&lt;/code&gt; values. But I've been working towards learning Linear Algebra a little better for the next games that I plan to work on.&lt;/p&gt;

&lt;p&gt;For &lt;em&gt;Breakout&lt;/em&gt;, I used a custom &lt;code&gt;Vector&lt;/code&gt; type, but for the next games I work with I'll likely use the &lt;a href="https://package.elm-lang.org/packages/elm-explorations/linear-algebra/latest/Math-Vector2"&gt;&lt;code&gt;elm-explorations/linear-algebra&lt;/code&gt;&lt;/a&gt; package. Khan Academy also has great lessons on &lt;a href="https://www.khanacademy.org/math/linear-algebra"&gt;Linear Algebra&lt;/a&gt; if you're looking to learn more.&lt;/p&gt;

&lt;p&gt;The other thing you might have noticed is that I added &lt;code&gt;hitCount&lt;/code&gt; and &lt;code&gt;hitThreshold&lt;/code&gt; fields. This allows for setting some breaks as "hard" bricks that take multiple hits to break.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-structures" class="anchor"&gt;
  &lt;/a&gt;
  🤔 Data Structures
&lt;/h3&gt;

&lt;p&gt;After some initial thrashing about which data structure to use, I settled on using a Dictionary because it would allow for identifying bricks by their row and column. In this type alias, we create a &lt;code&gt;Dict&lt;/code&gt; of bricks where the two &lt;code&gt;Int&lt;/code&gt; types represent the row number and column number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;alias&lt;/span&gt; &lt;span class="kt"&gt;Bricks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;Dict&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;Brick&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The implementation for the bricks may have ended up somewhat complicated, and it's possible a normal &lt;code&gt;List&lt;/code&gt; would have sufficed. But I knew I wanted to adjust things like the &lt;code&gt;hitCount&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt; for specific rows or bricks, and using a &lt;code&gt;Dict&lt;/code&gt; made that a little easier.&lt;/p&gt;

&lt;p&gt;Here are some of the important functions I used for constructing the rows of bricks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elm"&gt;&lt;code&gt;&lt;span class="n"&gt;buildRow&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bricks&lt;/span&gt;
&lt;span class="n"&gt;buildRow&lt;/span&gt; &lt;span class="n"&gt;rowNumber&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="n"&gt;strokeColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;range&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foldr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;insertBrick&lt;/span&gt; &lt;span class="n"&gt;rowNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;Dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;setRowColors&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="n"&gt;strokeColor&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;setRowPosition&lt;/span&gt;


&lt;span class="n"&gt;insertBrick&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Bricks&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bricks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;insertBrick&lt;/span&gt; &lt;span class="n"&gt;rowNumber&lt;/span&gt; &lt;span class="n"&gt;columnNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;Dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rowNumber&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columnNumber&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;defaultBrick&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I'm glossing over the details, but definitely check out the &lt;a href="https://github.com/create-with/games/blob/master/assets/elm/src/Breakout/Brick.elm"&gt;&lt;code&gt;Breakout.Brick&lt;/code&gt; module&lt;/a&gt; if you want to see how it all comes together.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styles-and-animation" class="anchor"&gt;
  &lt;/a&gt;
  🎨 Styles and Animation
&lt;/h3&gt;

&lt;p&gt;For the brick colors, I used the &lt;a href="https://tailwindcss.com/docs/background-color"&gt;color palette from Tailwind CSS&lt;/a&gt; and looked up the corresponding hex values to create a &lt;a href="https://en.wikipedia.org/wiki/ROYGBIV"&gt;"ROYGBIV"&lt;/a&gt; rainbow for the rows.&lt;/p&gt;

&lt;p&gt;The "hard" row of bricks at the top takes multiple hits to break. So it has a different stroke color as a visual indicator that there's something different about those bricks, even if it's not obvious until the ball hits them.&lt;/p&gt;

&lt;p&gt;Another cool feature that isn't obvious is that the opacity of each brick is calculated as the percentage of hits remaining to break the brick. In other words, if we made a brick that took ten hits to break, the brick would start out opaque and subtract 10% of its opacity after each hit. If we were to create new levels, this would be a great feature to consider.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gsOHahnC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pfgb1h8vrw57h1uymbem.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gsOHahnC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pfgb1h8vrw57h1uymbem.gif" alt="Brick Animation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One of the most fun features to add was the drop-in animation for the bricks&lt;/strong&gt; when the game first loads. The &lt;a href="https://animate.style"&gt;Animate.css&lt;/a&gt; library has tons of amazing examples for this kind of thing.&lt;/p&gt;

&lt;p&gt;I used those examples to create a "bounceInDown" animation that you can find in the &lt;a href="https://github.com/create-with/games/blob/master/assets/css/animations.scss"&gt;&lt;code&gt;assets/css/animations.scss&lt;/code&gt; file&lt;/a&gt;. Then, in the Elm code, I added that &lt;code&gt;bounce-in-down&lt;/code&gt; class to the bricks to get the animation working.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wishlist" class="anchor"&gt;
  &lt;/a&gt;
  ✨ Wishlist
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;It's amazing how many cool features you can add to a small game like &lt;em&gt;Breakout&lt;/em&gt;&lt;/strong&gt;. But I wanted to find a good stopping point and move on to a new game. One of the big takeaways from this project was how distracted I can get while trying to finish something. I actually finished writing the code for the game months before I was able to publish this blog post.&lt;/p&gt;

&lt;p&gt;But there are some known bugs and wishlist items that would be great to add to the game:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create Multiple Levels&lt;/li&gt;
&lt;li&gt;Improve Collisions&lt;/li&gt;
&lt;li&gt;Add Sound Effects&lt;/li&gt;
&lt;li&gt;Incorporate Randomness&lt;/li&gt;
&lt;li&gt;Save High Scores&lt;/li&gt;
&lt;li&gt;Expand Particle Effects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're looking for inspiration and more features to think about, here are some other great places to look:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Arkanoid"&gt;Arkanoid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLea8cjCua_P0qjjiG8G5FBgqwpqMU7rBk"&gt;LazyDevs PICO-8 Breakout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#whats-next" class="anchor"&gt;
  &lt;/a&gt;
  📈 What's Next?
&lt;/h2&gt;

&lt;p&gt;I've been having fun building a little arcade cabinet lately. At some point, I'd love to see one of the games I build running on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EbGpqASr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lxmnrrczipihu1ewpt5p.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EbGpqASr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lxmnrrczipihu1ewpt5p.jpg" alt="Arcade Cabinet Front"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yZrybcN6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5gwobppi020e1rl4xq5s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yZrybcN6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5gwobppi020e1rl4xq5s.jpg" alt="Arcade Cabinet Rear"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've also loved getting to explore things like WebGL and Unity recently. But the next game I'm going to focus on building is the classic game &lt;a href="https://en.wikipedia.org/wiki/Adventure_(1980_video_game)"&gt;&lt;em&gt;Adventure&lt;/em&gt;&lt;/a&gt;. And my plan is to &lt;em&gt;hopefully&lt;/em&gt; incorporate both 2D &lt;em&gt;and&lt;/em&gt; 3D features if I can get it all figured out.&lt;/p&gt;

&lt;p&gt;If you're learning functional programming and game development, feel free to &lt;a href="https://bijanbwb.github.io"&gt;get in touch with me&lt;/a&gt; and I'd be happy to hear from you. You can also &lt;a href="https://twitter.com/bijanbwb"&gt;find me on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And here are links to the game and the source code!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🕹 &lt;a href="https://create-with-games.herokuapp.com/breakout"&gt;&lt;strong&gt;Play the Game!&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;💻 &lt;a href="https://github.com/create-with/games"&gt;&lt;strong&gt;View the Source Code on GitHub&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>elm</category>
      <category>functional</category>
      <category>elixir</category>
    </item>
    <item>
      <title>How to find an impostor binary search implementation in Python! :-)</title>
      <author>Anurag Pandey</author>
      <pubDate>Mon, 23 Nov 2020 14:38:57 +0000</pubDate>
      <link>https://dev.to/geekypandey/how-to-find-an-impostor-binary-search-implementation-in-python-56d0</link>
      <guid>https://dev.to/geekypandey/how-to-find-an-impostor-binary-search-implementation-in-python-56d0</guid>
      <description>&lt;p&gt;Recently I have been working on writing STL algorithms of C++ in Python (&lt;a href="https://github.com/geekypandey/PythonAlogrithmsTemplate"&gt;here&lt;/a&gt;). I came across a typical problem, which was how to test the implementation of binary search algorithm? Let us write some tests first.&lt;br&gt;
You can write tests using any Python testing framework like &lt;code&gt;pytest&lt;/code&gt; , &lt;code&gt;unittest&lt;/code&gt; etc, here I am using &lt;code&gt;unittest&lt;/code&gt; which is part of Python Standard Library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;binary_search&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;binary_search&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BinarySearchTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_false&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_on_random_list_false&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The testcases are divided as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Searching for any element in an empty list should result &lt;em&gt;False&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Searching for an element present in the list should result &lt;em&gt;True&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Searching for an element not present in the list should result &lt;em&gt;False&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above testcases seem reasonable. To be more robust about writing the testcases we should use &lt;a href="https://hypothesis.readthedocs.io/en/latest/"&gt;&lt;em&gt;hypothesis&lt;/em&gt;&lt;/a&gt; library which is the Python port of &lt;a href="https://hackage.haskell.org/package/QuickCheck"&gt;&lt;em&gt;QuickCheck&lt;/em&gt;&lt;/a&gt; library in Haskell. You can simply install it using &lt;code&gt;pip install hypothesis&lt;/code&gt;.&lt;br&gt;
The tests using hypothesis are as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;hypothesis&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hypothesis.strategies&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;binary_search&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;binary_search&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BinarySearchTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;min_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_binary_search_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;min_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_binary_search_false&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 test.py 





&lt;p&gt;Hypothesis automatically generates different testcases given the specification, which in this case is a list of integers.&lt;/p&gt;

&lt;p&gt;Now the fun part is the binary search code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
binary_search.py





&lt;p&gt;Let us run the test now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python test.py
...
----------------------------------------------------------------------
Ran 3 tests in 0.380s

OK
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above code is no where near the binary search implementation, but passes all the tests! The linear search algorithm passes the binary search testcases! What?? Now how can we rule out this impostor code?&lt;/p&gt;

&lt;p&gt;The problem with these tests are that it doesn't use any of the &lt;em&gt;property of binary search algorithm&lt;/em&gt;, it just checks the property of a searching algorithm.&lt;/p&gt;

&lt;p&gt;We know one property of binary search that at maximum &lt;strong&gt;log2(n) + 1&lt;/strong&gt; items will be seen, as it discards half the search space at every iteration.&lt;br&gt;
Here &lt;code&gt;n&lt;/code&gt; is the total number of elements in the array.&lt;/p&gt;

&lt;p&gt;So we write a class which behaves like a list, by implementing &lt;code&gt;__iter__&lt;/code&gt; and &lt;code&gt;__getitem__&lt;/code&gt; special methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We now have a &lt;code&gt;Node&lt;/code&gt; class which is similar to &lt;code&gt;list&lt;/code&gt; class but additionally has a count variable, which increments every time an element is accessed. This will help to keep track of how many elements the binary search code checks.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Python, there is a saying, if something walks like a duck, quacks like a duck, it is a duck.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We add this extra testcase using the above &lt;code&gt;Node&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;min_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_binary_search_with_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;max_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; 
    &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;max_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let us run the tests again now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python test.py
..Falsifying example: test_binary_search_with_node(
    self=&amp;lt;__main__.BinarySearchTestCase testMethod=test_binary_search_with_node&amp;gt;,
    arr=[0, 0, 1],
)
F.
======================================================================
FAIL: test_binary_search_with_node (__main__.BinarySearchTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "code.py", line 48, in test_binary_search_with_node
    def test_binary_search_with_node(self, arr):
  File "/home/tmp/venv/lib/python3.6/site-packages/hypothesis/core.py", line 1162, in wrapped_test
    raise the_error_hypothesis_found
  File "code.py", line 54, in test_binary_search_with_node
    self.assertTrue(arr.count &amp;lt;= math.log2(len(arr)) + 1)
AssertionError: False is not true

----------------------------------------------------------------------
Ran 4 tests in 0.435s

FAILED (failures=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This code fails because each and every element will be checked once, which is not true for binary search. It discards half the search space at every iteration. &lt;em&gt;Hypothesis&lt;/em&gt; also provides the minimum testcase which failed the test, which in this case is an array of size 3.&lt;br&gt;
&lt;strong&gt;Impostor code found!&lt;/strong&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#complete-test-code" class="anchor"&gt;
  &lt;/a&gt;
  Complete test code
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;hypothesis&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hypothesis.strategies&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;binary_search&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;binary_search&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BinarySearchTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;min_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_binary_search_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;min_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_binary_search_false&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;min_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_binary_search_with_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;max_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;max_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt; test.py &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-go-from-here" class="anchor"&gt;
  &lt;/a&gt;
  Where to go from here?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Check out this awesome &lt;a href="https://www.youtube.com/watch?v=zi0rHwfiX1Q"&gt;talk&lt;/a&gt; by John Huges on &lt;em&gt;Testing the hard stuff and staying sane&lt;/em&gt;, where he talks about how he used &lt;code&gt;QuickCheck&lt;/code&gt; for finding and fixing bugs for different companies.&lt;/li&gt;
&lt;li&gt;Check out this &lt;a href="https://www.youtube.com/watch?v=KcyGUVzL7HA"&gt;talk&lt;/a&gt; on &lt;code&gt;hypothesis&lt;/code&gt;, the port of &lt;code&gt;QuickCheck&lt;/code&gt; in Python by ZacHatfield-Dodds.&lt;/li&gt;
&lt;li&gt;Read more on &lt;code&gt;unittest&lt;/code&gt; framework &lt;a href="https://docs.python.org/3/library/unittest.html"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy learning!&lt;/p&gt;

</description>
      <category>python</category>
      <category>testing</category>
      <category>fun</category>
      <category>python3</category>
    </item>
    <item>
      <title>Introduction to React-Bootstrap</title>
      <author>NJOKU SAMSON EBERE</author>
      <pubDate>Mon, 23 Nov 2020 12:05:54 +0000</pubDate>
      <link>https://dev.to/ebereplenty/introduction-to-react-bootstrap-20ik</link>
      <guid>https://dev.to/ebereplenty/introduction-to-react-bootstrap-20ik</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; has stolen the heart of many developers over the years. This is understandable because it helps developers write shorter and cleaner codes, it saves time and is sophisticated enough to handle a lot of developers concerns especially when it comes to those who do not like writing CSS.&lt;/p&gt;

&lt;p&gt;We also have &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; which has become one of the most popular frontend framework. It has a very large community by it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Well, there is more good news.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To ensure even easier and faster development with React, Bootstrap has gone ahead to develop a new code base called &lt;a href="https://react-bootstrap.netlify.app/"&gt;React-Bootstrap&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://react-bootstrap.netlify.app/"&gt;React-Bootstrap&lt;/a&gt; is still Bootstrap but it has been designed to fit in properly to React. This ensures that there is little or no bug while building your application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-reactbootstrap-instead-of-bootstrap" class="anchor"&gt;
  &lt;/a&gt;
  Why Use &lt;strong&gt;React-Bootstrap&lt;/strong&gt; instead of &lt;strong&gt;Bootstrap&lt;/strong&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;React-Bootstrap has been built and tailored to React applications. This means that it is more compatible and less buggy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React-Bootstrap codes are generally shorter than Bootstrap codes. For example, if you want to create a 3-grid column in one row, you will do it the following ways&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Bootstrap
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;row&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;col-sm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;One&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;three&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;col-sm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;two&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;three&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;col-sm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;three&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;three&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;React-Bootstrap
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Row&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Col&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;One&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;three&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Col&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Col&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;two&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;three&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Col&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Col&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;three&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;three&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Col&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Row&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Container&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-use-reactbootstrap" class="anchor"&gt;
  &lt;/a&gt;
  How to Use React-Bootstrap
&lt;/h2&gt;

&lt;p&gt;I want to walk you through the steps to create a simple form in React using React-Bootstrap. &lt;/p&gt;

&lt;p&gt;Let's get to it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-our-project" class="anchor"&gt;
  &lt;/a&gt;
  Setting Up Our Project
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a React project and name it &lt;code&gt;react-auth&lt;/code&gt;. &lt;em&gt;There will be a continuation of this article as &lt;code&gt;React Authentication&lt;/code&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Open the project in a terminal and navigate into the project folder. &lt;em&gt;I will be using VS Code&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install React-Bootstrap
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;bootstrap&lt;/span&gt; &lt;span class="nx"&gt;bootstrap&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Import bootstrap CSS file in the &lt;code&gt;index.js&lt;/code&gt; file
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bootstrap/dist/css/bootstrap.min.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-a-form" class="anchor"&gt;
  &lt;/a&gt;
  Creating a form
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a new file in the &lt;code&gt;src&lt;/code&gt; folder. Name it: &lt;code&gt;Register.js&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the file, start with the following code&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;

        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Enter the following code in the &lt;code&gt;return&lt;/code&gt; statement
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Register&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* email */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Group&lt;/span&gt; &lt;span class="nx"&gt;controlId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;formBasicEmail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Label&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Email&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Form.Label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Control&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Form.Group&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* password */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Group&lt;/span&gt; &lt;span class="nx"&gt;controlId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;formBasicPassword&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Label&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Password&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Form.Label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Control&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Form.Group&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* submit button */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Submit&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now, we have to inform bootstrap that we want to use the &lt;code&gt;Form&lt;/code&gt; and &lt;code&gt;Button&lt;/code&gt; components. So we import them at the top like so:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-bootstrap&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;You can also choose to do it individually like so:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-bootstrap/Form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-bootstrap/Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now let's show our Register component on our page. First, replace the code in the &lt;code&gt;App.js&lt;/code&gt; file with the following code
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Row&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-bootstrap&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Row&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Row&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Container&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In the &lt;code&gt;Row&lt;/code&gt; component, enter the following
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Col&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;md&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;lg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Col&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Col&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;md&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;lg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Col&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;This will ensure that there are two columns in large and medium devices while there will be one column on each row on small and extra small devices&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the first column, Add the &lt;code&gt;Register&lt;/code&gt; Component we created and import it at the top of the file. Our &lt;code&gt;App.js&lt;/code&gt; file will look like this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Row&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-bootstrap&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Register&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Register&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Row&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Col&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;md&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;lg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Register&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Col&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Col&lt;/span&gt; &lt;span class="nx"&gt;xs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;md&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;lg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Col&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Row&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Container&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;npm start&lt;/code&gt; in the terminal and see the output on the browser. This is mine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HFvI-Srb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lml6u4qdyq936ld3w72j.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HFvI-Srb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lml6u4qdyq936ld3w72j.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You will notice that only one column is taken. Now your job is to create a LOGIN component with the same code as in the REGISTER component. The add it in the second column. Checkout my output below:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QhJpaPaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pic57grbm1tjcz6fcrre.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QhJpaPaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pic57grbm1tjcz6fcrre.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Checkout the codes &lt;a href="https://github.com/EBEREGIT/react-auth/tree/React-Bootstrap-tutorial"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Walah!!! You can now create React applications faster leveraging on React-Bootstrap.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We have so far seen the usefulness of React-Bootstrap over Bootstrap. We have also seen how to use it.&lt;/p&gt;

&lt;p&gt;I urge you to take time and look into the documentation. There is a lot of hidden gems there. Only practice can help you dig out the awesome gems in React-Bootstrap.&lt;/p&gt;

&lt;p&gt;We will be diving into an Authentication series for react soon. It will be a continuation of this article. Stick around.&lt;/p&gt;

&lt;p&gt;Thank you for reading...&lt;/p&gt;

</description>
      <category>react</category>
      <category>bootstrap</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Writing custom TypeScript ESLint rules: How I learned to love the AST
</title>
      <author>Alexandre Gomes</author>
      <pubDate>Mon, 23 Nov 2020 11:48:25 +0000</pubDate>
      <link>https://dev.to/alexgomesdev/writing-custom-typescript-eslint-rules-how-i-learned-to-love-the-ast-15pn</link>
      <guid>https://dev.to/alexgomesdev/writing-custom-typescript-eslint-rules-how-i-learned-to-love-the-ast-15pn</guid>
      <description>&lt;p&gt;In this blog post, we’re going to learn how to write a custom ESLint plugin to help you with otherwise manual tasks that would take you days.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mYX1jiOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1400/0%2A3PpSvUWc2fW5E-3u.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mYX1jiOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1400/0%2A3PpSvUWc2fW5E-3u.gif" alt="The task? An eslint rule that adds generic to enzyme shallow calls, so we avoid type errors about our components during tests."&gt;&lt;/a&gt;&lt;em&gt;The task? An eslint rule that adds generic to enzyme shallow calls, so we avoid type errors about our components during tests.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s dive into the world of ASTs: They’re not as scary as they seem!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-writing-your-own-eslint-plugins-and-rules-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why writing your own eslint plugins and rules ?&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It’s fun to write and helps you learn more about JS/TS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It can help enforce company-specific styles and patterns&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It can save you days of work 😃&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are already plenty of rules out there, ranging from &lt;a href="https://eslint.org/docs/rules/brace-style"&gt;how to style your curly braces&lt;/a&gt;, to &lt;a href="https://eslint.org/docs/rules/no-return-await"&gt;not returning an await expression from async functions&lt;/a&gt; or &lt;a href="https://eslint.org/docs/rules/no-undef-init"&gt;even not initializing variables with undefined&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The thing is, lint rules are virtually infinite. In fact, we regularly see new plugins popping up for certain libraries, frameworks or use cases. So why not write yours? It’s not so scary, I promise!&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-not-so-imaginary-problem-were-solving" class="anchor"&gt;
  &lt;/a&gt;
  The (not so) imaginary problem we’re solving
&lt;/h1&gt;

&lt;p&gt;Tutorials often use foo,bar and baz or similar abstract notions to teach you something. Why not solve a real problem instead? A problem we encountered in a team while trying to solve some TypeScript type errors after the conversion to TypeScript.&lt;/p&gt;

&lt;p&gt;If you’ve used enzyme to test a TypeScript React codebase, you probably know that shallow calls accept a generic, your component. e.g &lt;code&gt;shallow&amp;lt;User&amp;gt;(&amp;lt;User {...props})&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iKi2J8AD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3476/1%2AxcmChHCMNLZAB1BCwE5g0Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iKi2J8AD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3476/1%2AxcmChHCMNLZAB1BCwE5g0Q.png" alt="enzyme’s shallow type definition from DefinitelyTyped"&gt;&lt;/a&gt;&lt;em&gt;enzyme’s shallow type definition from DefinitelyTyped&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What if you don’t pass it? It might be “fine”, but as soon as you’ll try to access a component’s props or methods, you’ll have type errors because TypeScript thinks your component is a generic react component, with no props, state, or methods.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wDWdDOty--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3804/1%2Ad-QA0ZlJJ3KV6Wi5Sk-wCA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wDWdDOty--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3804/1%2Ad-QA0ZlJJ3KV6Wi5Sk-wCA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course if you’re writing new tests from scratch, you’d catch it instantly with your IDE or TypeScript tsc command and add the generic. But you might need to add it in 1, 100, or even 1000 tests, for instance because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You migrated a whole project from JS to TS, with no typings at all&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You migrated a whole project from flow to TS, with missing typings for some libraries&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You’re a new contributor to a TS project using enzyme to test react components, and aren’t familiar with generics&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In fact, that’s a problem I’ve experienced in a team, and the same eslint rule we’ll write today saved us a lot of time by fixing this in our whole project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-eslint-work-the-magic-of-asts" class="anchor"&gt;
  &lt;/a&gt;
  How does ESLint work? The magic of ASTs
&lt;/h2&gt;

&lt;p&gt;Before we start digging into creating ESLint rules, we need to understand what are ASTs and why they’re so useful to use as developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ASTs&lt;/strong&gt;, or Abstract Syntax Trees, are representations of your code as a tree that the computer can read and manipulate.&lt;/p&gt;

&lt;p&gt;We write code for computers in high-level, human-understandable languages like C, Java, JavaScript, Elixir, Python, Rust… but the computer is not a human: in other words, it has no way of knowing the meaning of what we write. We need a way for the computer to &lt;strong&gt;parse&lt;/strong&gt; your code, to understand that &lt;code&gt;const&lt;/code&gt; is a variable declaration, &lt;code&gt;{}&lt;/code&gt; marks the beginning of an object expression sometimes, of a function in others… etc. This is a needed, yet obligatory step.&lt;/p&gt;

&lt;p&gt;Once it understands it, we can do many things with it: &lt;strong&gt;execute&lt;/strong&gt; it by passing it to an engine, &lt;strong&gt;lint&lt;/strong&gt; it... or even generate new code by doing the same process the other way around.&lt;/p&gt;

&lt;p&gt;To quote &lt;a href="https://twitter.com/jason_williams"&gt;Jason Williams&lt;/a&gt; that authored the &lt;a href="https://github.com/boa-dev/boa/"&gt;boa&lt;/a&gt; JS engine in Rust, a basic architecture for generating ASTs can be:&lt;/p&gt;

&lt;blockquote&gt;
&lt;h1&gt;
  &lt;a href="#we-break-down-our-code-into-various-tokens-with-semantic-meaning-aka-lexical-analyzertokenizer-group-them-and-send-them-as-groups-of-characters-to-a-parser-that-will-generate-expressions-that-can-hold-other-expressions" class="anchor"&gt;
  &lt;/a&gt;
  We break down our code into various tokens with semantic meaning (a.k.a lexical analyzer/tokenizer), group them and send them as groups of characters to a parser that will generate expressions, that can hold other expressions.
&lt;/h1&gt;
&lt;/blockquote&gt;

&lt;p&gt;Such tree sounds familiar? This is very similar to the way your HTML code will be parsed into a tree of &lt;strong&gt;DOM&lt;/strong&gt; nodes. In fact, we can generate abstract representations of any language as long as there’s a parser for it.&lt;/p&gt;

&lt;p&gt;Let’s take a simple JS example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;unique-id-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It can be represented like this with an AST:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HvNyR3qw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2736/1%2AQmVwolqBgrOPesaw0RwG3A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HvNyR3qw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2736/1%2AQmVwolqBgrOPesaw0RwG3A.png" alt="Abstract representation of our JS code in AST Explorer"&gt;&lt;/a&gt;&lt;em&gt;Abstract representation of our JS code in AST Explorer&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To visualize it, we use one excellent tool: &lt;a href="https://astexplorer.net/"&gt;https://astexplorer.net&lt;/a&gt;. It allows us to visualize syntax trees for many languages. I recommend pasting different bits of JS and TS code there and exploring the tool a little bit, as we will use it later!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Make sure to select the language of the code you’re pasting to get the right AST for it!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#creating-a-ts-project-to-lint" class="anchor"&gt;
  &lt;/a&gt;
  Creating a TS project to lint
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;If you already have a TS + React + Jest project, feel free to skip to the next section, or pick just what you need from this one!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s create a dummy React + TypeScript + Jest + Enzyme project, that will suffer from the typing issue we’ve seen earlier.&lt;/p&gt;

&lt;p&gt;Conceptually, parsing TypeScript code is no different than JS code, we need a way to to parse the TS code into a tree. Thankfully, the typescript-eslint plugin already ships with &lt;a href="https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/parser"&gt;its own TS parser&lt;/a&gt;. So let’s start!&lt;/p&gt;

&lt;p&gt;Create an &lt;code&gt;ast-learning&lt;/code&gt; folder and add a package.json file containing react, jest, enzyme, eslint, and all type definitions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ast-learning"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Learn ASTs by writing your first ESLint plugin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src/index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"17.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"react-dom"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"17.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"react-scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"3.4.3"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"[@babel/preset-env](http://twitter.com/babel/preset-env)"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.12.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"[@babel/preset-react](http://twitter.com/babel/preset-react)"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.12.5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"[@types/enzyme](http://twitter.com/types/enzyme)"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^3.10.8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"[@types/enzyme-adapter-react-16](http://twitter.com/types/enzyme-adapter-react-16)"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.0.6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"[@types/jest](http://twitter.com/types/jest)"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^26.0.15"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"[@types/react](http://twitter.com/types/react)"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^16.9.56"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"[@types/react-dom](http://twitter.com/types/react-dom)"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^16.9.9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"[@typescript](http://twitter.com/typescript)-eslint/eslint-plugin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.8.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"[@typescript](http://twitter.com/typescript)-eslint/parser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.8.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"babel-jest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^26.6.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"enzyme"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"3.11.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"enzyme-adapter-react-16"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.15.5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"eslint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.13.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"jest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^26.6.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;    
        &lt;/span&gt;&lt;span class="nl"&gt;"react-test-renderer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^17.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ts-jest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^26.4.4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"typescript"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"3.8.3"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint ./*.tsx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jest index.test.tsx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"tsc"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tsc index.tsx index.test.tsx --noEmit true --jsx react"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let’s also create a minimal &lt;code&gt;tsconfig.json&lt;/code&gt; file to make TypeScript compiler happy :).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"allowSyntheticDefaultImports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"esnext"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"lib"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"es6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dom"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"jsx"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"moduleResolution"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"exclude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"node_modules"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As a last configuration step to our project, let’s add &lt;code&gt;.eslintrc.js&lt;/code&gt; with empty rules for now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;parser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[@typescript](http://twitter.com/typescript)-eslint/parser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;parserOptions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ecmaVersion&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sourceType&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
     &lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;plugins&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[@typescript](http://twitter.com/typescript)-eslint&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ast-learning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="p"&gt;],&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rules&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now that our project has all the config ready, let’s create our index.tsx containing a &lt;code&gt;User&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="nx"&gt;toggleIsActive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"user"&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggleIsActive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            User is &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inactive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And a test file called &lt;code&gt;index.test.tsx&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Adapter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;enzyme-adapter-react-16&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;enzyme&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;enzyme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;shallow&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;enzyme&lt;/span&gt;

    &lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should change state field on toggleIsActive call&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;shallow&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;
     &lt;span class="c1"&gt;// @ts-ignore&lt;/span&gt;
        &lt;span class="nx"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toggleIsActive&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="c1"&gt;// @ts-ignore&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should change state field on div click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;shallow&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;simulate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="c1"&gt;// @ts-ignore&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now run &lt;code&gt;npm i &amp;amp;&amp;amp; npx ts-jest config:init &amp;amp;&amp;amp; npm run test&lt;/code&gt;. We can see that the TSX compiles fine due to the &lt;code&gt;// @ts-ignore&lt;/code&gt; directive comments.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@ts-ignore&lt;/code&gt; directive comments instruct the TypeScript compiler to ignore the type errors on the next line. So, it compiles and tests run fine, all is good?Nope! &lt;strong&gt;Let’s remove the &lt;code&gt;@ts-ignore&lt;/code&gt; directive comments and see what happens.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;❌❌ Now the tests don’t even run, and we have 3 TypeScript errors in our tests.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Oh no 😞! As seen in the intro, we &lt;strong&gt;could&lt;/strong&gt; fix it by &lt;strong&gt;adding the generic to all our shallow calls manually.&lt;/strong&gt;&lt;br&gt;
Could, but probably shouldn’t.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;shallow&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt; &lt;span class="c1"&gt;// here, added User generic type&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The pattern is very simple here, we need to get the argument that &lt;code&gt;shallow&lt;/code&gt; is called with, then pass it as a &lt;strong&gt;type argument&lt;/strong&gt; (a.k.a generic). &lt;br&gt;
Surely we can have the computer generate this for us? If there is a pattern, there is automation.&lt;/p&gt;

&lt;p&gt;Yay, that’s our use-case for a lint rule! Let’s write code that will fix our code for us 🤯&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#if-theres-a-pattern-theres-automation" class="anchor"&gt;
  &lt;/a&gt;
  If there’s a pattern, there’s automation
&lt;/h1&gt;

&lt;p&gt;If you can find patterns in your code that could be done by your computer to analyze, warn you, block you from doing certain things, or even write code for you, there’s magic to be done with AST. In such cases, you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Write an ESLint rule, either: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;with autofix, to prevent errors and help with conventions, with auto- generated code&lt;/li&gt;
&lt;li&gt;without autofix, to hint developer of what he should do&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write a &lt;strong&gt;codemod&lt;/strong&gt;. A different concept, also achieved thanks to ASTs, but made to be ran across big batches of file, and with even more control over traversing and manipulating ASTs. Running them across your codebase is an heavier operation, not to be ran on each keystroke as with eslint.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you’ve guessed, we’ll write an eslint rule/plugin. Let’s start!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#initializing-our-eslint-plugin-project" class="anchor"&gt;
  &lt;/a&gt;
  Initializing our eslint plugin project
&lt;/h1&gt;

&lt;p&gt;Now that we have a project to write a rule for, let’s initialize our eslint plugin by creating another project folder called &lt;code&gt;eslint-plugin-ast-learning&lt;/code&gt; next to &lt;code&gt;ast-learning&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠️ ️eslint plugins follow the convention &lt;code&gt;eslint-plugin-your-plugin-name&lt;/code&gt; !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s start by creating a &lt;code&gt;package.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint-plugin-ast-learning"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Our first ESLint plugin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And an &lt;code&gt;index.js&lt;/code&gt; containing all of our plugin’s rules, in our case just one, require-enzyme-generic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;require-enzyme-generic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="na"&gt;fixable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;code&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;problem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Each rule contain two properties: &lt;code&gt;meta&lt;/code&gt; and &lt;code&gt;create&lt;/code&gt;.You can read the documentation &lt;a href="https://eslint.org/docs/developer-guide/working-with-rules"&gt;here&lt;/a&gt; but the tl;dr is that&lt;/p&gt;

&lt;p&gt;the &lt;code&gt;meta&lt;/code&gt; object will contain all informations about your rule to be used by eslint, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In a few words, what does it do?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is it autofixable?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Does it cause errors and is high priority to solve, or is it just stylistic&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What’s the link of the full docs?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the &lt;code&gt;create&lt;/code&gt; function will contain the &lt;em&gt;logic&lt;/em&gt; of your rule. It’s called with acontext object, that contains many useful properties documented &lt;a href="https://eslint.org/docs/developer-guide/working-with-rules#the-context-object"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It returns an object where keys can be any of the &lt;code&gt;tokens&lt;/code&gt; that exist in the AST you’re currently parsing. For each of these tokens, eslint will let you &lt;strong&gt;write a method declaration with the logic for this specific token&lt;/strong&gt;. Example of tokens include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CallExpression&lt;/strong&gt;: a function call expression, e.g:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;shallow()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;VariableDeclaration&lt;/strong&gt;: a variable declaration (without the preceding var/let/const keyword) e.g:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;SomeComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hey&lt;/span&gt; &lt;span class="nx"&gt;there&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;StringLiteral&lt;/strong&gt;: a string literal e.g &lt;code&gt;'test'&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best way to understand what’s what, is to paste your code in ASTExplorer (while making sure to select the right parser for your language) and explore the different tokens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-the-criteria-for-the-lint-error-to-kick-in" class="anchor"&gt;
  &lt;/a&gt;
  Defining the criteria for the lint error to kick in
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vKKAbRdw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3104/1%2AiNogB5dChK8arvi9tYy0vw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vKKAbRdw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3104/1%2AiNogB5dChK8arvi9tYy0vw.png" alt="ASTExplorer output for our code"&gt;&lt;/a&gt;&lt;em&gt;ASTExplorer output for our code&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Go to the left pane of AST explorer and select our shallow() call (or hover over the corresponding property on the right pane): you’ll see that it is of type &lt;strong&gt;CallExpression&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So let’s add the &lt;code&gt;CallExpression&lt;/code&gt; property to the object returned by our &lt;code&gt;create&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;CallExpression&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="c1"&gt;// TODO: Magic 🎉&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Each method that you will declare will be called back by ESLint with the corresponding &lt;code&gt;node&lt;/code&gt; when encountered.&lt;br&gt;
If we look at babel (the AST format that the TS parser uses) docs, we can see that the node for &lt;code&gt;CallExpression&lt;/code&gt; contains a &lt;code&gt;callee&lt;/code&gt; property, which is an &lt;code&gt;Expression&lt;/code&gt;. An &lt;code&gt;Expression&lt;/code&gt; has a &lt;code&gt;name&lt;/code&gt; property, so let’s create a check inside our &lt;code&gt;CallExpression&lt;/code&gt; method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;CallExpression&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;shallow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// run lint logic on shallow calls&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We also want to make sure that we only target the shallow calls &lt;strong&gt;without a generic already there&lt;/strong&gt;. Back to AST Explorer, we can see there is an entry called typeArguments, which babel AST calls &lt;code&gt;typeParameters&lt;/code&gt;, which is an array containing the type argument(s) of our function call. So let’s make sure it’s &lt;code&gt;undefined&lt;/code&gt; (no generic e.g &lt;code&gt;shallow()&lt;/code&gt; or empty generic e.g &lt;code&gt;shallow&amp;lt;&amp;gt;&lt;/code&gt;) or is an empty array (meaning we have a generic with nothing inside).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;shallow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;typeParameters&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cuWvXKXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3140/1%2AxFKfvshcT4QhMKrY5lMujg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cuWvXKXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3140/1%2AxFKfvshcT4QhMKrY5lMujg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we go! We found the condition in which we should report an error.&lt;/p&gt;

&lt;p&gt;The next step is now to use &lt;code&gt;context.report&lt;/code&gt; method. Looking at the ESLint docs, we can see that this method is used to report a warning/error, as well as providing an autofix method:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The main method you’ll use is &lt;code&gt;context.report()&lt;/code&gt;, which publishes a warning or error (depending on the configuration being used). This method accepts a single argument, which is an object containing the following properties: (&lt;a href="https://eslint.org/docs/developer-guide/working-with-rules#contextreport"&gt;Read more in ESLint docs&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will output 3 properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;node&lt;/code&gt; (the current node). It serves two purposes: telling eslint &lt;strong&gt;where&lt;/strong&gt; the error happened so the user sees the line info when running eslint / highlighted in his IDE with eslint plugin. But also &lt;strong&gt;what&lt;/strong&gt; is the node so we can manipulate it or insert text before/after&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;message&lt;/code&gt; : The message that will be reported by eslint for this error&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;fix&lt;/code&gt; : The method for autofixing this node&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;CallExpression&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;shallow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;typeParameters&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;typeParameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;report&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// shallow&lt;/span&gt;
            &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`enzyme.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; calls should be preceded by their component as generic. `&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;If this doesn't remove type errors, you can replace it with &amp;lt;any&amp;gt;, or any custom type.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;fix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fixer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="c1"&gt;// TODO&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
           &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We managed to output an error. But we would like to go one step further and fix the code automatically, either with &lt;code&gt;eslint --fix&lt;/code&gt; flag, or with our IDE eslint plugin. &lt;br&gt;
Let’s write that fix method!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#writing-the-raw-fix-endraw-method" class="anchor"&gt;
  &lt;/a&gt;
  Writing the &lt;code&gt;fix&lt;/code&gt; method
&lt;/h2&gt;

&lt;p&gt;First, let’s write an early return that will insert &lt;code&gt;&amp;lt;any&amp;gt;&lt;/code&gt; after our shallow keyword in case we’re not calling shallow() with some JSX Element.&lt;/p&gt;

&lt;p&gt;To insert after a node or token, we use the &lt;code&gt;insertTextAfter&lt;/code&gt; method.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;insertTextAfter(nodeOrToken, text) - inserts text after the given node or token&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasJsxArgument&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JSXElement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;hasJsxArgument&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fixer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertTextAfter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;any&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After that early return, we know that we have a JSX Element as first argument. If this is the first argument (and it should, &lt;code&gt;shallow()&lt;/code&gt; only accepts a &lt;code&gt;JSXElement&lt;/code&gt; as first argument as we’ve seen in its &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/enzyme/index.d.ts#L708"&gt;typings&lt;/a&gt;), let’s grab it and insert it as generic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;expressionName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;openingElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fixer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertTextAfter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;expressionName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That’s it! We’ve captured the name of the JSX expression shallow() is called with, and inserted it after the shallow keyword as a generic.&lt;/p&gt;

&lt;p&gt;Let’s now use our rule in the project we’ve created before!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-our-custom-plugin" class="anchor"&gt;
  &lt;/a&gt;
  Using our custom plugin
&lt;/h2&gt;

&lt;p&gt;Back to our ast-learning project, let’s install our eslint plugin npm package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm &lt;span class="nb"&gt;install&lt;/span&gt; ../eslint-plugin-ast-learning
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So far if we lint our file that shouldn’t pass ling by running &lt;code&gt;npm run lint&lt;/code&gt;, or open &lt;code&gt;index.test.tsx&lt;/code&gt; with our editor if it has an eslint plugin installed, we’ll see no errors as we didn’t add the plugin and rule yet. &lt;/p&gt;

&lt;p&gt;Let’s add them to our &lt;code&gt;.eslintrc.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;parser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[@typescript](http://twitter.com/typescript)-eslint/parser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;parserOptions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ecmaVersion&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sourceType&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
     &lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;plugins&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[@typescript](http://twitter.com/typescript)-eslint&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ast-learning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// eslint-plugin-ast-learning&lt;/span&gt;
     &lt;span class="p"&gt;],&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rules&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ast-learning/require-enzyme-generic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you run &lt;code&gt;npm run lint&lt;/code&gt; again or go to the file with your IDE that has eslint plugin, you should now see errors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    /Users/alexandre.gomes/Sites/ast-learning/index.test.tsx
      12:21  error  enzyme.shallow calls should be preceeded by their component as generic. If this doesn't remove type errors, you can replace it
     with &amp;lt;any&amp;gt;, or any custom type  ast-learning/require-enzyme-generic
      20:21  error  enzyme.shallow calls should be preceeded by their component as generic. If this doesn't remove type errors, you can replace it
     with &amp;lt;any&amp;gt;, or any custom type  ast-learning/require-enzyme-generic

    ✖ 2 problems (2 errors, 0 warnings)
      2 errors and 0 warnings potentially fixable with the `--fix` option.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;They can be fixed automatically, interesting! Why don’t we try?&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;❯ npm run lint -- --fix
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qx9Y1fTA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2A58oeG6ZpFe3ATRb-.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qx9Y1fTA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2A58oeG6ZpFe3ATRb-.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Woohoo! Our files now have the generic in them. Now imagine it running in 1000s of files. The power of code generation!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#going-further" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Going further&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;If you want to learn more about ESLint custom plugins, you’ll need to read through the ESLint docs that are very complete.&lt;/p&gt;

&lt;p&gt;You’ll also want to add &lt;em&gt;extensive&lt;/em&gt; tests for your rules, as from experience, eslint autofixes (and jscodeshift codemods, the topic of another post) have a lot of edge cases that could break your codebase. Not only are tests sine qua non to your rules being reliable, but also to contributing an official rule 😉&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>testing</category>
      <category>react</category>
    </item>
    <item>
      <title>How to benchmark your python program?</title>
      <author>theroyakash</author>
      <pubDate>Mon, 23 Nov 2020 10:48:39 +0000</pubDate>
      <link>https://dev.to/theroyakash/how-to-benchmark-your-python-program-1oom</link>
      <guid>https://dev.to/theroyakash/how-to-benchmark-your-python-program-1oom</guid>
      <description>&lt;p&gt;Let's say you have a really slow program and you want to benchmark where your program is taking most of the time to run. If you can find that you can just optimize that part of the program to run faster.&lt;/p&gt;

&lt;p&gt;There is couple of way of doing this going through this manually or using some kind of library like cProfile to generate a report on the function's workings.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#generating-reports" class="anchor"&gt;
  &lt;/a&gt;
  Generating reports
&lt;/h1&gt;

&lt;p&gt;I've written all necessary code to run this in my package &lt;code&gt;AKDSFramework&lt;/code&gt;.&lt;br&gt;
AKDSFramework can be found  &lt;a href="https://github.com/theroyakash/AKDSFramework"&gt;here.&lt;/a&gt; You can pretty much use this on any python function as you like, small-big-has other dependency anything.&lt;/p&gt;

&lt;p&gt;If you install it you can get the benchmarking and implementation of several data structures and algorithms using best practices in it.&lt;/p&gt;

&lt;p&gt;If you don't wish to use my package at the end of the blog I'll paste the source code for &lt;code&gt;@benchmark&lt;/code&gt; decorator.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#example-implementation" class="anchor"&gt;
  &lt;/a&gt;
  Example implementation
&lt;/h1&gt;

&lt;p&gt;We gonna see an example of implementation of benchmarking by building a max heap and adding 2 numbers to the heap and again building it.&lt;/p&gt;

&lt;p&gt;To make max heaps I'll use AKDSFramework, let's create a heap and build it now with around 600 elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;AKDSFramework.applications.decorators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;benchmark&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;AKDSFramework.structure&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MaxHeap&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;benchmark&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;buildHeap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MaxHeap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;buildHeap&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;601&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Notice the &lt;code&gt;@benchmark&lt;/code&gt; decorator at the beginning of the declaration of the function, that calls cProfile to start calculating what taking what.&lt;/p&gt;

&lt;p&gt;Now running the code will output a report in the console like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;       3597 &lt;span class="k"&gt;function &lt;/span&gt;calls &lt;span class="o"&gt;(&lt;/span&gt;3003 primitive calls&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in &lt;/span&gt;0.002 seconds

   Ordered by: cumulative &lt;span class="nb"&gt;time

   &lt;/span&gt;ncalls  tottime  percall  cumtime  percall filename:lineno&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        1    0.000    0.000    0.002    0.002 &amp;lt;ipython-input-18-1d08ee399432&amp;gt;:4&lt;span class="o"&gt;(&lt;/span&gt;buildHeap&lt;span class="o"&gt;)&lt;/span&gt;
        2    0.000    0.000    0.002    0.001 /opt/venv/lib/python3.7/site-packages/AKDSFramework/structure/heap.py:136&lt;span class="o"&gt;(&lt;/span&gt;build&lt;span class="o"&gt;)&lt;/span&gt;
 1195/601    0.001    0.000    0.001    0.000 /opt/venv/lib/python3.7/site-packages/AKDSFramework/structure/heap.py:153&lt;span class="o"&gt;(&lt;/span&gt;heapify&lt;span class="o"&gt;)&lt;/span&gt;
     1195    0.000    0.000    0.000    0.000 /opt/venv/lib/python3.7/site-packages/AKDSFramework/structure/heap.py:67&lt;span class="o"&gt;(&lt;/span&gt;get_left_child&lt;span class="o"&gt;)&lt;/span&gt;
     1195    0.000    0.000    0.000    0.000 /opt/venv/lib/python3.7/site-packages/AKDSFramework/structure/heap.py:53&lt;span class="o"&gt;(&lt;/span&gt;get_right_child&lt;span class="o"&gt;)&lt;/span&gt;
        2    0.000    0.000    0.000    0.000 /opt/venv/lib/python3.7/site-packages/AKDSFramework/structure/heap.py:26&lt;span class="o"&gt;(&lt;/span&gt;add&lt;span class="o"&gt;)&lt;/span&gt;
        1    0.000    0.000    0.000    0.000 /opt/venv/lib/python3.7/site-packages/AKDSFramework/structure/heap.py:128&lt;span class="o"&gt;(&lt;/span&gt;__init__&lt;span class="o"&gt;)&lt;/span&gt;
        1    0.000    0.000    0.000    0.000 /opt/venv/lib/python3.7/site-packages/AKDSFramework/structure/heap.py:21&lt;span class="o"&gt;(&lt;/span&gt;__init__&lt;span class="o"&gt;)&lt;/span&gt;
        1    0.000    0.000    0.000    0.000 &lt;span class="o"&gt;{&lt;/span&gt;method &lt;span class="s1"&gt;'disable'&lt;/span&gt; of &lt;span class="s1"&gt;'_lsprof.Profiler'&lt;/span&gt; objects&lt;span class="o"&gt;}&lt;/span&gt;
        2    0.000    0.000    0.000    0.000 &lt;span class="o"&gt;{&lt;/span&gt;method &lt;span class="s1"&gt;'append'&lt;/span&gt; of &lt;span class="s1"&gt;'list'&lt;/span&gt; objects&lt;span class="o"&gt;}&lt;/span&gt;
        2    0.000    0.000    0.000    0.000 &lt;span class="o"&gt;{&lt;/span&gt;built-in method builtins.len&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This has all the call's report and how much time it's taking. If you see the second last function call &lt;code&gt;{method 'append' of 'list' objects}&lt;/code&gt; see that's called 2 times total as we are appending 2 elements.&lt;/p&gt;

&lt;p&gt;So this way you can see how much each function taking time and how many times they are called. If you wish you can reduce the number of calls or use a different approach to solve the part where it's slow.&lt;/p&gt;

&lt;p&gt;AKDSFramework's all implementations of data structures and algorithms are super optimized so you can't find any bottle neck when using &lt;code&gt;@benchmark&lt;/code&gt; on our function calls.&lt;/p&gt;

&lt;p&gt;If you don't wish to install AKDSFramework here is the &lt;code&gt;@benchmark&lt;/code&gt; decorator source code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cProfile&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pstats&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;benchmark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    AKDSFramework default benchmark profiler. Implemented with cProfile and pstats.
    """&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;profiler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;profiler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cProfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;profiler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;returnvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;profiler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;stringIO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;ps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pstats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profiler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;stringIO&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;sort_stats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cumulative"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_stats&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stringIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;returnvalue&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;profiler&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>python</category>
      <category>beginners</category>
      <category>programming</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Understanding Docker: part 17 – Dockerfile Tips: CMD - string vs JSON syntax</title>
      <author>Aurélie Vache</author>
      <pubDate>Mon, 23 Nov 2020 08:52:40 +0000</pubDate>
      <link>https://dev.to/aurelievache/understanding-docker-part-17-dockerfile-tips-cmd-string-vs-json-syntax-53a4</link>
      <guid>https://dev.to/aurelievache/understanding-docker-part-17-dockerfile-tips-cmd-string-vs-json-syntax-53a4</guid>
      <description>&lt;p&gt;Understanding Docker can be difficult or time-consuming. In order to spread knowledge about Cloud technologies I started to create sketchnotes about Docker. I think it could be a good way, more visual, to explain Docker (and other technologies like Kubernetes and Istio).&lt;/p&gt;

&lt;p&gt;We continue the series of Docker sketchnotes with tips about Dockerfile: the difference in CMD instruction between string and JSON syntax.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XDDz9GBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sd0mi3u2o1ey6ra2px02.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XDDz9GBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sd0mi3u2o1ey6ra2px02.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VVNatlPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k03ef73gtbdb0avlp2vi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VVNatlPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k03ef73gtbdb0avlp2vi.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As usual, if you like theses sketchnotes, you can follow me, and tell me what do you think. I will publish others sketchs shortly :-).&lt;/p&gt;

&lt;p&gt;If you are interested, I published all the sketchnotes on Kubernetes (and new ones!) to make a "book" of 120 pages: ["Understanding Kubernetes in a visual way"] and a sketchbook about Istio (&lt;a href="https://gumroad.com/aurelievache#uCxcr"&gt;https://gumroad.com/aurelievache#uCxcr&lt;/a&gt;).&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>beginners</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Functional Component in React</title>
      <author>Olena Drugalya</author>
      <pubDate>Mon, 23 Nov 2020 08:30:12 +0000</pubDate>
      <link>https://dev.to/olenadrugalya/functional-component-in-react-1e9c</link>
      <guid>https://dev.to/olenadrugalya/functional-component-in-react-1e9c</guid>
      <description>&lt;p&gt;This blogpost continues series of posts exploring &lt;em&gt;React components&lt;/em&gt;. It describes &lt;strong&gt;Functional Component&lt;/strong&gt; - one of building blocks in React application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#purpose-of-functional-component" class="anchor"&gt;
  &lt;/a&gt;
  Purpose of Functional Component
&lt;/h2&gt;

&lt;p&gt;It is a building block of every React application, a reusable and independent piece of code written to perform a particular task. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-functional-component" class="anchor"&gt;
  &lt;/a&gt;
  Creating Functional Component
&lt;/h2&gt;

&lt;p&gt;This component is called &lt;strong&gt;functional&lt;/strong&gt; because its a JavaScript function. &lt;/p&gt;

&lt;p&gt;We create functional component in 2 ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Normal JavaScript function&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;keyword &lt;strong&gt;function&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;name of component - should be capital letter&lt;/li&gt;
&lt;li&gt;parameters - accepts &lt;strong&gt;props&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;return&lt;/strong&gt; - returns React element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Some &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;2.Arrow ES6 function&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;keyword &lt;strong&gt;const&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;name of component - should be capital letter&lt;/li&gt;
&lt;li&gt;parameters - accepts &lt;strong&gt;props&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;return&lt;/strong&gt; - returns React element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Some &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage-of-functional-component" class="anchor"&gt;
  &lt;/a&gt;
  Usage of Functional Component
&lt;/h2&gt;

&lt;p&gt;Before &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;React hooks&lt;/a&gt;, &lt;strong&gt;functional&lt;/strong&gt; components have been called &lt;em&gt;stateless&lt;/em&gt; because the &lt;strong&gt;state&lt;/strong&gt; was only declared in &lt;strong&gt;class-based&lt;/strong&gt; components (we will explore them in my next blogpost). Also there were some &lt;em&gt;lifecycle methods&lt;/em&gt; available only in &lt;strong&gt;class-based&lt;/strong&gt; components.&lt;/p&gt;

&lt;p&gt;With the release of hooks we can use &lt;strong&gt;functional&lt;/strong&gt; component anywhere we want, we just need to know which hook to use and where. &lt;/p&gt;

&lt;p&gt;Why it's a good thing to use &lt;strong&gt;functional&lt;/strong&gt; components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;they are easy to construct and understand&lt;/li&gt;
&lt;li&gt;they are easy to test and debug&lt;/li&gt;
&lt;li&gt;they are highly reusable&lt;/li&gt;
&lt;li&gt;and they don't have THIS! :)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to connect on &lt;a href="https://www.linkedin.com/in/olenadrugalya/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/OlenaDrugalya"&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/J3J42JOOA"&gt;&lt;img height="12" width="30%" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS7c42cU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi1.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>11 Reasons I love Linux, and 1 why I don't</title>
      <author>Aaron Wolf</author>
      <pubDate>Mon, 23 Nov 2020 08:00:02 +0000</pubDate>
      <link>https://dev.to/wolfmath/11-reasons-i-love-linux-and-1-why-i-don-t-m1f</link>
      <guid>https://dev.to/wolfmath/11-reasons-i-love-linux-and-1-why-i-don-t-m1f</guid>
      <description>&lt;h1&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro
&lt;/h1&gt;

&lt;p&gt;I got started with Linux in 2013 because of the disaster that was Windows 8. I grew to love it for more reasons than "it's not Windows" trope. Here are the top 10 reasons I love Linux in no particular order.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-terminal" class="anchor"&gt;
  &lt;/a&gt;
  1. The Terminal
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hZ04U59w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5adftka2nzzcg3qbcngg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hZ04U59w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5adftka2nzzcg3qbcngg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Mac and Windows both also have terminals it's true, but they're not as integrated into the user experience as with Linux. Using the terminal is a lot easier than using a GUI for many tasks. That doesn't mean that you &lt;em&gt;must&lt;/em&gt; use the terminal if you use Linux, but it's generally good to be able to do simple things with it. You can also customize your terminal with different colors and themes because Linux is very...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-customizable" class="anchor"&gt;
  &lt;/a&gt;
  2. Customizable
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i5ASctOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6pei7eks3hc80v0w2n35.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i5ASctOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6pei7eks3hc80v0w2n35.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
There are so many ways to make Linux your own, and I don't just mean getting that perfect wallpaper. You want a dark theme? Light theme? Bright purple theme? You can probably find it. Map hotkeys the way you want them, put as many custom toolbars on your screen where ever you want them. &lt;/p&gt;

&lt;p&gt;If you just want a stock experience you still have your choice of desktop environments that suit you. &lt;a href="https://www.gnome.org/"&gt;Gnome&lt;/a&gt; (what Ubuntu uses), &lt;a href="https://cinnamon-spices.linuxmint.com/"&gt;Cinnamon&lt;/a&gt;, and &lt;a href="https://kde.org/"&gt;KDE&lt;/a&gt; will give you great out-of-the-box experiences, while &lt;a href="https://xfce.org/"&gt;XFCE&lt;/a&gt;, &lt;a href="https://mate-desktop.org/"&gt;Mate&lt;/a&gt;, &lt;a href="https://www.lxde.org/"&gt;LXDE&lt;/a&gt;, and others will be a little more lightweight and customizable. Some desktop environments are more performant than others. It all depends on what you want and need.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-ease-of-installation" class="anchor"&gt;
  &lt;/a&gt;
  3. Ease of installation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AMA5SxjZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wcgs3gmvh78ybt8h4wd8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AMA5SxjZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wcgs3gmvh78ybt8h4wd8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.archlinux.org/"&gt;Some Linux distros&lt;/a&gt; are notoriously difficult to install; it's a method of gatekeeping their userbase. For the rest of us there's the Linux installer. It's so easy to get up and running. After a few questions it will install your system automatically. If you want to dual boot with Windows it will take care of that for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-security" class="anchor"&gt;
  &lt;/a&gt;
  4. Security
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dy0ceEJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/le8uaol4tcjqg0x90f62.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dy0ceEJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/le8uaol4tcjqg0x90f62.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Maybe it's because of Linux's small market share or maybe it's because Linux is designed better, but there really aren't any viruses for Linux. Also the way permissions are set up it makes it difficult for a malicious program to do too much. Even if there was a security flaw in Linux it would get dealt with quickly because...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-its-open-source" class="anchor"&gt;
  &lt;/a&gt;
  5. It's Open Source
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1kCccZWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w4vf4h41m0e53y3tt6um.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1kCccZWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w4vf4h41m0e53y3tt6um.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Anyone can take the Linux source code and edit it to suit their needs. Open source software is also generally more secure since more people are able to review the source code. Due to the fact that so many people can see this code they tend to make their own versions. This is why there are a huge...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-variety-flavors" class="anchor"&gt;
  &lt;/a&gt;
  6. Variety flavors
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7SkwOCR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rjvlcdypy9povuztih5n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7SkwOCR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rjvlcdypy9povuztih5n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
There are literally hundreds of Linux distributions. While this can make a very complicated landscape, and many distros do exactly the same things, it also provides the user with anything they might want. Do you need a good all rounder? Use Ubuntu. How about something for privacy? Tails Linux is for you. Are you a hacker? Kali Linux has the tools you need. If you want to tell everyone that you use Arch Linux you should install Arch Linux btw.&lt;/p&gt;

&lt;p&gt;My distro of choice for desktop computing is &lt;a href="https://linuxmint.com/download.php"&gt;Linux Mint Cinnamon Edition&lt;/a&gt;. It just works and it does everything I need it to, because, let's be honest, I'm a developer and 90% of what I do is still on the browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-its-free" class="anchor"&gt;
  &lt;/a&gt;
  7. It's Free
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ABNXfqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4bsz8fb64mn87iau6vsz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ABNXfqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4bsz8fb64mn87iau6vsz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
What can I say? Everyone loves free stuff. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-it-can-run-on-almost-any-hardware" class="anchor"&gt;
  &lt;/a&gt;
  8. It can run on almost any hardware
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f7pb87ZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8xttwc8hro548dps1xhe.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f7pb87ZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8xttwc8hro548dps1xhe.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Linux is very lightweight. It takes much less resources on a PC than Windows. Linux is also known for working well on very old machines. I've personally taken old Windows laptops that were ready for the trash compactor and installed Linux on them, breathing into them new life and functionality. That's not to say Linux is only good for old machines! Most super computers nowadays run Linux because it's lightweight and fast.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-great-for-development" class="anchor"&gt;
  &lt;/a&gt;
  9. Great for Development
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7igJTCFd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q3k7ibshb4roy8um5ffa.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7igJTCFd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q3k7ibshb4roy8um5ffa.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
With the exception of the browser (and unfortunately in these Corona times, Zoom), the program I probably use most is VSCode. Yeah, VSCode works in Linux as well as ATOM, all of JetBrains stuff, and a lot more. There are tons of IDEs and compilers available on Linux. Since I was already used to using the terminal before I started my path towards software development it made running servers and doing general backend stuff feel more natural. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-lots-of-software" class="anchor"&gt;
  &lt;/a&gt;
  10. Lots of Software
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iaGI4-tT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v6fv9yhbswkufxbq2qyn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaGI4-tT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v6fv9yhbswkufxbq2qyn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Software is readily available and super easy to install. You can install right from the terminal or most big distros have an AppStore-like software manager that allows you to install software from the GUI. There's tons of games, productivity apps, and more. Some of it is great and some of it kinda sucks, but you have the choice!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-gaming" class="anchor"&gt;
  &lt;/a&gt;
  11. Gaming
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Co6FePZoNgE"&gt;What if I told you that there's a way out from under the iron grip of the bloated legacy of Billy G?&lt;/a&gt; Gaming on Linux is becoming very popular. Steam runs beautifully on Linux with most of their games available for Linux as well. There are also other methods of getting your games on Linux too (watch the link above), and Anthony from Linus Tech Tips thinks that Linux is the future of gaming! Gaming hardware also works very nicely on Linux. I've been thinking about doing some gaming on Linux but I'll stick to my Nintendo Switch for now.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#where-linux-is-lacking" class="anchor"&gt;
  &lt;/a&gt;
  Where Linux is Lacking
&lt;/h1&gt;

&lt;p&gt;The only place where Linux is truly lacking is in the availability of specific software. More high level "creator" software like Photoshop and audio and video editing software tend to be unavailable on Linux. There are usually Linux alternatives but my understanding is that they don't compare to the originals. This doesn't personally affect me much since I don't do that, but I understand the pain of someone who wants software like this &lt;em&gt;and&lt;/em&gt; wants to run Linux.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Linux is a much more robust operating system than it was even 5 years ago. As it continues to develop I wonder if more and more people will end up adopting it as their daily driver operating system. Yes, it has its drawbacks, but every OS does, not to mention Linux is always improving.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>ubuntu</category>
      <category>opensource</category>
      <category>terminal</category>
    </item>
    <item>
      <title>My Top Angular Interview Questions</title>
      <author>Michael Hoffmann</author>
      <pubDate>Mon, 23 Nov 2020 07:59:25 +0000</pubDate>
      <link>https://dev.to/mokkapps/my-top-angular-interview-questions-237h</link>
      <guid>https://dev.to/mokkapps/my-top-angular-interview-questions-237h</guid>
      <description>&lt;p&gt;This article summarizes a list of Angular interview questions which I would ask candidates and that I get often asked in interviews.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of Contents&lt;a href="#table-of-contents"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-what-is-angular-what-is-the-difference-between-angular-and-vuejs--react"&gt;1. What is Angular? What is the difference between Angular and Vue.js / React?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-whats-new-in-angular"&gt;2. What’s new in Angular?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-what-are-angulars-main-concepts"&gt;3. What are Angular’s main concepts?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-what-is-dependency-injection"&gt;4. What is Dependency Injection?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-what-are-observables"&gt;5. What are Observables?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-what-is-the-difference-between-promise-and-observable"&gt;6. What is the difference between Promise and Observable?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-can-you-explain-various-ways-of-component-communication-in-angular"&gt;7. Can you explain various ways of component communication in Angular?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8-how-can-you-bind-data-to-templates"&gt;8. How can you bind data to templates?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#9-what-do-you-understand-by-services"&gt;9. What do you understand by services?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#10-what-do-you-understand-by-directives"&gt;10. What do you understand by directives?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#11-jit-vs-aot"&gt;11. JIT vs AOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#12-what-do-you-understand-by-lazy-loading"&gt;12. What do you understand by lazy loading?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#13-can-you-explain-angular-components-lifecycle-hooks"&gt;13. Can you explain Angular Components Lifecycle Hooks?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#14-what-is-difference-between-viewchild-and-contentchild"&gt;14. What is difference between ViewChild and ContentChild?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#15-what-is-the-difference-between-an-angular-module-and-a-javascript-module"&gt;15. What is the difference between an Angular module and a JavaScript module?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#16-what-is-hostbinding-and-hostlistener"&gt;16. What is @HostBinding and @HostListener?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#17-what-is-difference-between-onpush-and-default-change-detection"&gt;17. What is difference between OnPush and default change detection?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#links"&gt;Links&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-what-is-angular-what-is-the-difference-between-angular-and-vuejs-react" class="anchor"&gt;
  &lt;/a&gt;
  1. What is Angular? What is the difference between Angular and Vue.js / React?&lt;a href="#1-what-is-angular-what-is-the-difference-between-angular-and-vuejs--react"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://angular.io"&gt;Angular&lt;/a&gt; is an application design framework and development platform for creating efficient and sophisticated single-page apps. Angular is built entirely in TypeScript and uses it as a primary language. As it is a framework it has many useful built-in features like routing, forms, HTTP client, Internationalization (i18n), animations, and many more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vuejs.org/"&gt;Vue.js&lt;/a&gt; and &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; are no application frameworks but JavaScript libraries to build user interfaces.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-whats-new-in-angular" class="anchor"&gt;
  &lt;/a&gt;
  2. What’s new in Angular?&lt;a href="#2-whats-new-in-angular"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Check the &lt;a href="https://blog.angular.io"&gt;Angular blog&lt;/a&gt; for latest release notes, for example, the &lt;a href="https://blog.angular.io/version-11-of-angular-now-available-74721b7952f7"&gt;Angular 11 release&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-what-are-angulars-main-concepts" class="anchor"&gt;
  &lt;/a&gt;
  3. What are Angular’s main concepts?&lt;a href="#3-what-are-angulars-main-concepts"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Component&lt;/strong&gt; : The basic building block of an Angular application and is used to control HTML views.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Modules&lt;/strong&gt; : An Angular module contains basic building blocks like components, services, directives, etc. Using modules you can split your application into logical pieces where each piece performs a single task and is called a “module”.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Templates&lt;/strong&gt; : A template represents the view of an Angular application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Services&lt;/strong&gt; : Services are used to create components that can be shared across the entire application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Metadata&lt;/strong&gt; : Metadata is used to add more data to an Angular class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="///static/1c605805105b268458a4355189e354d6/29d31/angular-architecture.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MiOKw6t2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mokkapps.de/static/1c605805105b268458a4355189e354d6/15ec7/angular-architecture.jpg" alt="Angular architecture" title="Angular architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-what-is-dependency-injection" class="anchor"&gt;
  &lt;/a&gt;
  4. What is Dependency Injection?&lt;a href="#4-what-is-dependency-injection"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Dependency Injection (DI) is an important design pattern in which a class does not create dependencies itself but requests them from external sources. Dependencies are services or objects that a class needs to perform its function. Angular uses its own DI framework for resolving dependencies. The DI framework provides declared dependencies to a class when that class is instantiated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-what-are-observables" class="anchor"&gt;
  &lt;/a&gt;
  5. What are Observables?&lt;a href="#5-what-are-observables"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Angular heavily relies on &lt;a href="https://rxjs.dev/"&gt;RxJS&lt;/a&gt;, a library for composing asynchronous and callback-based code in a functional, reactive style using Observables. RxJS introduces Observables, a new Push system for JavaScript where an Observable is a producer of multiple values, “pushing” them to Observers (Consumers).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-what-is-the-difference-between-promise-and-observable" class="anchor"&gt;
  &lt;/a&gt;
  6. What is the difference between Promise and Observable?&lt;a href="#6-what-is-the-difference-between-promise-and-observable"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Observable&lt;/th&gt;
&lt;th&gt;Promise&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;They can be run whenever the result is needed as they do not start until subscription&lt;/td&gt;
&lt;td&gt;Execute immediately on creation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Provides multiple values over time&lt;/td&gt;
&lt;td&gt;Provides only one value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Subscribe method is used for error handling which makes centralized and predictable error handling&lt;/td&gt;
&lt;td&gt;Push errors to the child promises&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Provides chaining and subscription to handle complex applications&lt;/td&gt;
&lt;td&gt;Uses only .then() clause&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#7-can-you-explain-various-ways-of-component-communication-in-angular" class="anchor"&gt;
  &lt;/a&gt;
  7. Can you explain various ways of component communication in Angular?&lt;a href="#7-can-you-explain-various-ways-of-component-communication-in-angular"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Data sharing between parent and one or more child components using the &lt;code&gt;@Input()&lt;/code&gt; and &lt;code&gt;@Output()&lt;/code&gt; directives.&lt;/li&gt;
&lt;li&gt;Data sharing using an Angular service&lt;/li&gt;
&lt;li&gt;Using state management, like &lt;a href="https://ngrx.io/"&gt;NgRx&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Read and write data to local storage&lt;/li&gt;
&lt;li&gt;Pass data via URL parameters&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#8-how-can-you-bind-data-to-templates" class="anchor"&gt;
  &lt;/a&gt;
  8. How can you bind data to templates?&lt;a href="#8-how-can-you-bind-data-to-templates"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Property binding&lt;/strong&gt; : Property binding in Angular helps you set values for properties of HTML elements or directives
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;[src]=&lt;/span&gt;&lt;span class="s"&gt;"itemImageUrl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Event binding&lt;/strong&gt; : Event binding allows you to listen for and respond to user actions such as keystrokes, mouse movements, clicks, and touches.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;(click)=&lt;/span&gt;&lt;span class="s"&gt;"onSave()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Save&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Two-way binding&lt;/strong&gt; : Two-way binding gives components in your application a way to share data. Use two-way binding binding to listen for events and update values simultaneously between parent and child components.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;app-sizer&lt;/span&gt; &lt;span class="na"&gt;[(size)]=&lt;/span&gt;&lt;span class="s"&gt;"fontSizePx"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/app-sizer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9-what-do-you-understand-by-services" class="anchor"&gt;
  &lt;/a&gt;
  9. What do you understand by services?&lt;a href="#9-what-do-you-understand-by-services"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Service is a broad category encompassing any value, function, or feature that an app needs. A service is typically a class with a narrow, well-defined purpose. It should do something specific and do it well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An Angular component should focus on presenting data and enabling the user experience. It should mediate between the application logic (data model) and the view (rendered by the template).&lt;/p&gt;

&lt;p&gt;Angular services help us to separate non-view-related functionality to keep component classes lean and efficient.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-you-provide-a-service" class="anchor"&gt;
  &lt;/a&gt;
  How do you provide a service?&lt;a href="#how-do-you-provide-a-service"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;You must register at least one provider of any service you are going to use. A service can be provided for specific modules or components or it can be made available everywhere in your application.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#provide-at-root-level" class="anchor"&gt;
  &lt;/a&gt;
  Provide at root level&lt;a href="#provide-at-root-level"&gt;&lt;/a&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
 &lt;span class="na"&gt;providedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Angular creates a single, shared instance if a service is provided at root level. This shared instance is injected into any class that asks for it. By using the &lt;code&gt;@Injectable()&lt;/code&gt; metadata, Angular can remove the service from the compiled app if it isn’t used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#provide-with-a-specific-ngmodule" class="anchor"&gt;
  &lt;/a&gt;
  Provide with a specific NgModule&lt;a href="#provide-with-a-specific-ngmodule"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Registering a provider with a specific NgModule will return the same instance of a service to all components in that NgModule if they ask for it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="nx"&gt;BackendService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Logger&lt;/span&gt;
 &lt;span class="p"&gt;],&lt;/span&gt;
 &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#provide-at-component-level" class="anchor"&gt;
  &lt;/a&gt;
  Provide at component level&lt;a href="#provide-at-component-level"&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;A new instance of a service is generated for each new instance of the component if you register the provider at component level.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-hero-list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./hero-list.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;HeroService&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#10-what-do-you-understand-by-directives" class="anchor"&gt;
  &lt;/a&gt;
  10. What do you understand by directives?&lt;a href="#10-what-do-you-understand-by-directives"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Directives add behavior to an existing DOM element or an existing component instance. The basic difference between a component and a directive is that a component has a template, whereas an attribute or structural directive does not have a template and only one component can be instantiated per an element in a template.&lt;/p&gt;

&lt;p&gt;We can differentiate between three types of directives:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Components&lt;/strong&gt; : These directives have a template.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Structural directives&lt;/strong&gt; : These directives change the DOM layout by adding and removing DOM elements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Attribute directives&lt;/strong&gt; : These directives change the appearance or behavior of an element, component, or another directive.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#11-jit-vs-aot" class="anchor"&gt;
  &lt;/a&gt;
  11. JIT vs AOT&lt;a href="#11-jit-vs-aot"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Angular provides two ways to compile your app. The compilation step is needed as Angular templates and components cannot be understood by the browser therefore the HTML and TypeScript code is converted into efficient JavaScript code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#justintime-jit" class="anchor"&gt;
  &lt;/a&gt;
  Just-in-Time (JIT)&lt;a href="#just-in-time-jit"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;JIT compiles your app in the browser at runtime. JIT compilation is the default when you run the ng build (build only) or ng serve (build and serve locally) CLI commands. i.e, the below commands used for JIT compilation,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aheadoftime-aot" class="anchor"&gt;
  &lt;/a&gt;
  Ahead-of-Time (AOT)&lt;a href="#ahead-of-time-aot"&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;AOT compiles your app at build time. For AOT compilation, include the `—aot option with the ng build or ng serve command as below,&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-are-the-advantages-of-aot" class="anchor"&gt;
  &lt;/a&gt;
  What are the advantages of AOT?&lt;a href="#what-are-the-advantages-of-aot"&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The application can be rendered without compiling the app because the browser downloads a pre-compiled version of the application.&lt;/li&gt;
&lt;li&gt;External CSS style sheets and HTML templates are included within the application JavaScript code. This way, a lot of AJAX requests can be saved.&lt;/li&gt;
&lt;li&gt;It is not necessary to download the Angular compiler which reduces the application payload.&lt;/li&gt;
&lt;li&gt;Template binding errors can be detected and reported during the build step itself&lt;/li&gt;
&lt;li&gt;No injection attacks as HTML templates and components are compiled into JavaScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#12-what-do-you-understand-by-lazy-loading" class="anchor"&gt;
  &lt;/a&gt;
  12. What do you understand by lazy loading?&lt;a href="#12-what-do-you-understand-by-lazy-loading"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;By default, NgModules are eagerly loaded, which means that as soon as the app loads, so do all the NgModules, whether or not they are immediately necessary. For large apps with lots of routes, consider lazy loading—a design pattern that loads NgModules as needed. Lazy loading helps keep initial bundle sizes smaller, which in turn helps decrease load times.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-can-you-explain-angular-components-lifecycle-hooks" class="anchor"&gt;
  &lt;/a&gt;
  13. Can you explain Angular Components Lifecycle Hooks?&lt;a href="#13-can-you-explain-angular-components-lifecycle-hooks"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;After your application instantiates a component or directive by calling its constructor, Angular calls the hook methods you have implemented at the appropriate point in the lifecycle of that instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="///static/bc0816918b30687ab1bb05a145ce7ae3/ce9b1/hooks-in-sequence.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q-aH1PBw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mokkapps.de/static/bc0816918b30687ab1bb05a145ce7ae3/ce9b1/hooks-in-sequence.png" alt="Lifecycle Hooks" title="Lifecycle Hooks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Angular calls these hook methods in the following order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;ngOnChanges&lt;/strong&gt; : Is called, when an input/output binding value changes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ngOnInit&lt;/strong&gt; : Is called after the first ngOnChanges.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ngDoCheck&lt;/strong&gt; : Is called, if we as developer triggered a custom change detection.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ngAfterContentInit&lt;/strong&gt; : Is called after the content of a component is initialized.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ngAfterContentChecked&lt;/strong&gt; : Is called after every check of the component’s content.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ngAfterViewInit&lt;/strong&gt; : Is called after a component’s views are initialized.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ngAfterViewChecked&lt;/strong&gt; : Is called after every check of a component’s views.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ngOnDestroy&lt;/strong&gt; : Is called just before the directive is destroyed.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#14-what-is-the-difference-between-viewchild-and-contentchild" class="anchor"&gt;
  &lt;/a&gt;
  14. What is the difference between ViewChild and ContentChild?&lt;a href="#14-what-is-the-difference-between-viewchild-and-contentchild"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;ViewChild and ContentChild are used for component communication in Angular, for example, if a parent component wants access to one or multiple child components.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A ViewChild is any component, directive, or element which is part of a template.&lt;/li&gt;
&lt;li&gt;A ContentChild is any component or element which is projected in the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Angular exist two different DOMs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Content DOM&lt;/strong&gt; which has only knowledge of the template provided by the component at hand or content injected via &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;View DOM&lt;/strong&gt; which has only knowledge of the encapsulated and the descending components.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#15-what-is-the-difference-between-an-angular-module-and-a-javascript-module" class="anchor"&gt;
  &lt;/a&gt;
  15. What is the difference between an Angular module and a JavaScript module?&lt;a href="#15-what-is-the-difference-between-an-angular-module-and-a-javascript-module"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Both types of modules can help to modularize code and Angular relies on both kinds of modules but they are very different.&lt;/p&gt;

&lt;p&gt;A JavaScript module is an individual file with JavaScript code, usually containing a class or a library of functions for a specific purpose within your app.&lt;/p&gt;

&lt;p&gt;NgModules are specific to Angular and a NgModule is a class marked by the &lt;code&gt;@NgModule&lt;/code&gt; decorator with a metadata object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#16-what-are-hostbinding-and-hostlistener" class="anchor"&gt;
  &lt;/a&gt;
  16. What are @HostBinding and @HostListener?&lt;a href="#16-what-are-hostbinding-and-hostlistener"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;@HostListener()&lt;/code&gt; function decorator allows you to handle events of the host element in the directive class. For example, it can be used to change the color of the host element if you hover over the host element with the mouse.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@HostBinding()&lt;/code&gt; function decorator allows you to set the properties of the host element from the directive class. In this directive class, we can change any style property like height, width, color, margin, border, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#17-what-is-the-difference-between-onpush-and-default-change-detection" class="anchor"&gt;
  &lt;/a&gt;
  17. What is the difference between OnPush and default change detection?&lt;a href="#17-what-is-the-difference-between-onpush-and-default-change-detection"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Please read my article &lt;a href="https://www.mokkapps.de/blog/the-last-guide-for-angular-change-detection-you-will-ever-need/"&gt;The Last Guide For Angular Change Detection You’ll Ever Need&lt;/a&gt; for a detailed explanation. ￼&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion&lt;a href="#conclusion"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I hope this list of Angular interview questions will help you to get your next Angular position. Leave me a comment if you know any other important Angular interview questions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links" class="anchor"&gt;
  &lt;/a&gt;
  Links&lt;a href="#links"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://angular.io/docs"&gt;Angular Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sudheerj/angular-interview-questions"&gt;250+ Angular Interview Questions &amp;amp; Answers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>angular</category>
      <category>interview</category>
      <category>career</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Use console.log() like a pro</title>
      <author>Marko Denic</author>
      <pubDate>Mon, 23 Nov 2020 06:13:05 +0000</pubDate>
      <link>https://dev.to/denicmarko/use-console-log-like-a-pro-3h6o</link>
      <guid>https://dev.to/denicmarko/use-console-log-like-a-pro-3h6o</guid>
      <description>&lt;p&gt;Using &lt;code&gt;console.log()&lt;/code&gt; for JavaScript debugging is the most common practice among developers. But, there is more...&lt;/p&gt;

&lt;p&gt;The console object provides access to the browser’s debugging console. The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-most-common-console-methods" class="anchor"&gt;
  &lt;/a&gt;
  The most common Console methods:
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;console.log()&lt;/code&gt; – For general output of logging information.&lt;br&gt;
&lt;code&gt;console.info()&lt;/code&gt; – Informative logging of information.&lt;br&gt;
&lt;code&gt;console.debug()&lt;/code&gt; – Outputs a message to the console with the log level debug.&lt;br&gt;
&lt;code&gt;console.warn()&lt;/code&gt; – Outputs a warning message.&lt;br&gt;
&lt;code&gt;console.error()&lt;/code&gt; – Outputs an error message.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GF6xhSeL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bigab0doaj4g83coh4qj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GF6xhSeL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bigab0doaj4g83coh4qj.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-css-styles-for-a-consolelog" class="anchor"&gt;
  &lt;/a&gt;
  Custom CSS styles for a console.log()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;console.log&lt;/code&gt; output can be styled in DevTools using the CSS format specifier.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kuY7Uh4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6uwc3fntea5bc8ofbbqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kuY7Uh4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6uwc3fntea5bc8ofbbqw.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#string-substitutions" class="anchor"&gt;
  &lt;/a&gt;
  String substitutions
&lt;/h2&gt;

&lt;p&gt;When passing a string to one of the console object’s methods that accept a string (such as log()), you may use these substitution strings:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;%s&lt;/code&gt; – &lt;code&gt;string&lt;/code&gt;&lt;br&gt;
&lt;code&gt;%i&lt;/code&gt; or &lt;code&gt;%d&lt;/code&gt; – &lt;code&gt;integer&lt;/code&gt;&lt;br&gt;
&lt;code&gt;%o&lt;/code&gt; or &lt;code&gt;%0&lt;/code&gt; – &lt;code&gt;object&lt;/code&gt;&lt;br&gt;
&lt;code&gt;%f&lt;/code&gt; – &lt;code&gt;float&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H3r7BZaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g4iw28vguze8bhbm4u4d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3r7BZaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g4iw28vguze8bhbm4u4d.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consoleassert-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.assert()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Log a message and stack trace to console if the first argument is false.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h379C17f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zgjl6o5avcec2udjrxmt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h379C17f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zgjl6o5avcec2udjrxmt.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consoleclear-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.clear()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Clear the console.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SOOHt-Zt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gt16umfrcdq54g0lcyfx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOOHt-Zt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gt16umfrcdq54g0lcyfx.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consolecount-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.count()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Log the number of times this line has been called with the given label.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--imeCt7I6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b050f6ae9zv2g6xxszbr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imeCt7I6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b050f6ae9zv2g6xxszbr.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consoledir-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.dir()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Displays an interactive list of the properties of the specified JavaScript object.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M37fHhXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gziekeanyicibnqzss5s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M37fHhXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gziekeanyicibnqzss5s.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consolegroup-endraw-and-raw-consolegroupend-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.group()&lt;/code&gt; and &lt;code&gt;console.groupEnd()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Creates a new inline group, indenting all following output by another level. To move back out a level, call &lt;code&gt;groupEnd()&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bFEZ1aNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/whkb5d3amdsx5guj59fv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bFEZ1aNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/whkb5d3amdsx5guj59fv.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-elements-in-the-console" class="anchor"&gt;
  &lt;/a&gt;
  HTML elements in the console
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zgmwhsh5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7recngvjuawmnpsddpmr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zgmwhsh5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7recngvjuawmnpsddpmr.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consolememory-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.memory&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The memory property can be used to check out the heap size status&lt;/p&gt;

&lt;p&gt;Note: memory is a property and not a method.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v3pNN7xL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6zuzeuokgwzhryw6napk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v3pNN7xL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6zuzeuokgwzhryw6napk.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consoletable-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.table()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Displays tabular data as a table.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ASbw_jCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ubm6wel1oxogwkhtdd4n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ASbw_jCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ubm6wel1oxogwkhtdd4n.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consoletime-endraw-and-raw-consoletimeend-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.time()&lt;/code&gt; and &lt;code&gt;console.timeEnd()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;console.time()&lt;/code&gt; – Starts a timer with a name specified as an input parameter. Up to 10,000 simultaneous timers can run on a given page.&lt;br&gt;
&lt;code&gt;console.timeEnd()&lt;/code&gt; – Stops the specified timer and logs the elapsed time in seconds since it started.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B0schP9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ahjfy3qjyh27dyss0lye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B0schP9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ahjfy3qjyh27dyss0lye.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consoletrace-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.trace()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Outputs a stack trace.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wi1DvePC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tg975vima3lraytrjmul.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wi1DvePC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tg975vima3lraytrjmul.png" alt="Alt Text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;If you like this article, chances are you'd like what I tweet as well. Consider following me on &lt;a href="https://twitter.com/denicmarko"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to decide on programming language for a project</title>
      <author>Shantun Parmar</author>
      <pubDate>Mon, 23 Nov 2020 05:08:15 +0000</pubDate>
      <link>https://dev.to/parmarshantun/how-to-decide-on-programming-language-for-a-project-2fp2</link>
      <guid>https://dev.to/parmarshantun/how-to-decide-on-programming-language-for-a-project-2fp2</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xLz3pIVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.andersenlab.com/wp-content/uploads/2019/05/How-to-Decide-on-Programming-Language-for-a-Project-1024x528.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xLz3pIVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.andersenlab.com/wp-content/uploads/2019/05/How-to-Decide-on-Programming-Language-for-a-Project-1024x528.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Before starting work on any project, whether it be a small “domestic” application or a high-profile Enterprise solution, the people who initiate the development start have the question: “In what language will we write?”. It may seem rather easy to answer, but not everyone knows that the first question should be “What will we write?”.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This question is not idle, as the answer to it should be much more specifics than it might seem at first glance. It is often the case that the decision about how to start development, at the level of a medium-sized company, is taken by people who are far from this exact development. Of course, most often there is a technical director who takes on the whole burden of determining a particular development course, but what if there is no such person? An outside auditor in the person of an experienced developer will not read the tea leaves to understand what you want to receive in the end. You will receive either a denial of assistance or incomplete answer, and it won’t be wrong of them: as the question, so the answer.&lt;/p&gt;

&lt;p&gt;In this article, we will discuss the focal points of choosing development technologies and the mistakes that leaders and managers make, as well as why a changeable fashion should not be followed.&lt;/p&gt;

&lt;p&gt;Let’s suppose you already have a clear picture of a project and its technical specification. Now, in order not to slip up while choosing the development technologies, you should have at least a basic idea of the difference between programming languages. There are a lot of answers to this question, but now we are talking about fundamental differences and areas of application. Only if you understand these differences, you can ask a crucial question: “What are the pros and cons of the X programming language?” and get a clear answer to it that can be applied to the requirements of your project.&lt;/p&gt;

&lt;p&gt;We will not use professional terms and divide languages into high-level, low-level, object-oriented, and so on. In our case, we need a short list of five items, each of which is simply and transparently related to any technical specification:&lt;/p&gt;

&lt;p&gt;1. Platform (application area of a language)&lt;br&gt;
2. Language flexibility&lt;br&gt;
3. Development time and “life” of the project.&lt;br&gt;
4. Performance&lt;br&gt;
5. Language community&lt;/p&gt;

&lt;p&gt;Answers to these five questions can be given by any qualified specialist. In addition, they are simple enough to understand, transparent, and, what is more important, clearly show whether we can use a given language for the development or not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Different languages – different areas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The best way to define a programming language and a primary vector for development is to use the experience of the community. At the same time, it is not necessary to be a developer in order to make the right decision – just look at which programming languages are popular in the required field and get through their characteristics in accordance with the list attached above.&lt;/p&gt;

&lt;p&gt;Each of the programming languages has advantages and disadvantages.&lt;/p&gt;

&lt;p&gt;Let’s take Python as an example. This programming language is like a Swiss knife with another small Swiss knife inside – in theory, anything can be written in it if you do not have requirements for memory consumption and speed of the final product, of course. Besides, Python has a very low learning curve, so finding Python developers (and even training your own during the project development) will not be a problem, and a huge number of open libraries significantly simplifies the life of programmers. However, as soon as you need the application to be not only simple but also fast in terms of operation, with severe restrictions on the consumption of system resources, you’d better forget about Python. Same if you need a multithreaded application: the implementation of the Python language does not support multithreading.&lt;/p&gt;

&lt;p&gt;Let’s go back to our list of factors and consider Python through it:&lt;/p&gt;

&lt;p&gt;1. Application area: almost everything and everywhere&lt;br&gt;
2. Flexibility: impressive&lt;br&gt;
3. Development time: fast&lt;br&gt;
4. Performance: available only if you have significant or unlimited computing power.&lt;br&gt;
5. Language community: a vast army of developers of all levels.&lt;/p&gt;

&lt;p&gt;As you see, the main problem of Python that was taken as an example is its gluttony. If we make a web application that will revolve somewhere on Google servers, then we can afford the development in this language. But if it is about a mobile or even desktop application, when the target device can be of low power, forget about Python.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;And most importantly: such nuances can be found in any programming language. Some of them may not be important to you, while others will be fatal. And in order to understand clearly what will affect the project and what will not, you need to know what exactly you will get after the development, and who will use it.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s consider another one language, let it be C++. Its learning curve is higher than this of Python, but it has a number of advantages that Python is deprived of. For instance, C++ allows controlling the resource consumption by our software, which makes it an excellent choice for writing efficient applications that are to work in a limited environment. Thus, C ++ is widely used in the gaming industry, where a team needs to “embed” a logic that is very solid in complexity and size into a limited space of the final user configuration, which is far from the server in terms of power. Here we can also include mobile applications and games which have to be content with low-power processors and a very modest amount of RAM, which, among other things, will need to be shared with other “residents” of the device.&lt;/p&gt;

&lt;p&gt;On the other hand, you need to understand that C ++ is like a sword consisting entirely of a blade, without a handle. An experienced developer will manage it masterfully, but a weak team will create an application that won’t differ much from the project in a more gluttonous Python, but at the same time will be slower to build. Also, C ++ doesn’t have managed development environment that exists in more “architectural” young languages, it means the software development process itself will be long and painful, and the result obtained at the output may not be a joy.&lt;/p&gt;

&lt;p&gt;As an outcome, let’s go through our list of factors, now in the application to C ++:&lt;/p&gt;

&lt;p&gt;1. Application area: apps that require fast speed and work in a limited environment.&lt;br&gt;
2. Flexibility: low&lt;br&gt;
3. Development time: longer than average&lt;br&gt;
4. Performance: this language is about the effective use of every megabyte of memory. It is used to create the most efficient applications in terms of power consumption.&lt;br&gt;
5. Language community: a vast army of developers, but some of them are “pests” since the learning curve of the language is very high.&lt;/p&gt;

&lt;p&gt;The examples mentioned above are a bit exaggerated but very indicative, and most importantly, they dismiss ultimatum statements like “the X language is the best” or “the X language is suitable for anything.” As you see, &lt;em&gt;&lt;strong&gt;there is no universal language&lt;/strong&gt;&lt;/em&gt;. Each of them has a number of noticeable differences that will either make your project wildly successful or bury it under endless cycles of corrections and improvements.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;New-fashioned programming languages and their danger&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In addition to the popular programming languages which are on everyone’s lips, there are also new-fashioned ones in the truest sense of the word. Most often these are some novelties that offer advanced features other languages don’t have, or they have some specific syntax. In fact, this is not so important. What is really important is that choosing a new-fashioned programming language instead of the merely popular one is most likely a direct path to abyss.&lt;/p&gt;

&lt;p&gt;All new-fashioned programming languages have one thing in common: their communities involve very few truly experienced developers and even fewer manuals, documentation, and expertise.&lt;/p&gt;

&lt;p&gt;In fact, this means that the developers have not found or developed the optimal ways to solve various problems using this language yet, and hence, are experimenting. But experiments are acceptable on domestic projects, and when it comes to commercial development, such surprises are not a good idea, because business loves predictability and specifics.&lt;/p&gt;

&lt;p&gt;It also happens that you already have an experienced developer of some new-fashioned language, and according to the list of factors, it suits you perfectly, so why not start the development?&lt;/p&gt;

&lt;p&gt;The problem is that along with development, the application is often needed to be maintained for a sufficiently long time, and this requires human resources. Fortunately or not, exotic/new-fashioned programming languages are rarely spread out enough for their community to grow to really noticeable dimensions. This means that if you need a second, third, or tenth one developer in your team, then you will try to close the vacancy for months, if ever. Most often, the future of projects in new-fashioned languages is either to be supported by people who have mastered this very language right in the workplace or to be rewritten for something more commonly used and understandable. Both options cost extra time, money, and nerve cells of leaders.&lt;/p&gt;

&lt;p&gt;Here is an example. Only 3-4 years ago, hundreds of companies and projects were looking for Ruby developers specifically familiar with the Ruby on Rails framework, instead of PHP or JavaScript developers. “Rails” were so popular and its developers so highly-paid, that the representatives of this community allowed themselves statements like:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;“Ruby on Rails and PHP are like Apple Macintosh and PC. We are few, but we are the elite. Ruby on Rails and PHP is a culture against chaos. ”&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It seemed that RoR was a future, but the fashion implicated in technical necessity was over: several new libraries that covered the need for Ruby on Rails functionality in development were released for steadily developing JavaScript, and the popularity of the Ruby language and its framework began to fade. Yes, Ruby on Rails is still used on many projects, experienced RoR developers are in demand in the market, but the number of vacancies is fewer than several years ago. This happened, first of all, because the programming languages competing with Ruby on Rails also did not stand still, and due to the updates, the creation of new frameworks and libraries, an urgent need for RoR eventually disappeared.&lt;/p&gt;

&lt;p&gt;Once in a few years, some language or framework “shoots”, and a small community is built around it very quickly. For example, Rust or Golang are popular now. And no one knows whether these languages will find a lodgement or will be replaced by more stable and matured “old-timers”. Generally speaking, getting into development relying on a new-fashioned language or technology is very risky, since in the future there may be severe problems with support, which we will discuss in detail below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Areas of application, terms, and support&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is crucial to understand which area the project is being developed in because there are no universal programming languages – they all live and develop in their own specialized niches. At the same time, languages and technologies are segmented not only by area (web, mobile, desktop, and so on) of the development but also by a sphere of application. For example, the same web development can be conditionally divided into client front-end and server back-end. And for both these parts of one and the same web project, languages and technologies will be different. It means that in order to create a web project, hiring a team of JavaScript or PHP-developers who will make you the front-end part is not enough: you will also need back-end experts. This evident nuance often eludes people who are far from programming, which leads to an expansion of estimates at best, or to waste of time and budget losses at worst.&lt;/p&gt;

&lt;p&gt;Another aspect that is often ignored is the life cycle of the project. Often the customer builds solely from the development timeframe from the moment of receiving the technical specification to the delivery of a working project. The peculiarity of the dev-sphere is that after the stage of active development, a less intensive but vitally important period of support begins. And this further support is what a large number of companies stumble on.&lt;/p&gt;

&lt;p&gt;The classic scenario is as follows: ignoring the necessity for future support and expert advice, the customer chooses the fastest and cheapest option on the most unsuitable technology. Wrong choice and tight deadlines result in the poor quality of code and work on the principle “we will insert a crutch here because we don’t have time”. In the future, the support of such code, the introduction of new features, and improvements will cost way more. At the same time, the project without at least minimal support is doomed to decline and stagnation in a year or two: the IT sphere is continuously evolving, offering more and more new solutions to old problems that instantly become the standard. It is not necessary to search far for examples – just open any site which was launched a decade ago and hasn’t been supported and updated since that moment, and see what web development solutions were in use during that period. At least they cause an ironical smile, and more often – resentment and dissatisfaction.&lt;/p&gt;

&lt;p&gt;This simple and absolutely transparent way of checking described by us is needed in order to avoid situations when you are persuaded to create something in a language that is “convenient” for the executor or advisor. For example, if somebody persuades you to write a mobile game for Android in Python or convinces you that instead of transparent and understandable JavaScript or PHP, you definitely should introduce a little outdated Ruby on Rails, which is expensive in terms of salaries, or try the currently new-fashioned language.&lt;/p&gt;

&lt;p&gt;The opinion of experts and experienced developers still should be listened, as this is their territory, but a simple list of factors “area, flexibility, time, performance, community” will help either identify an attempt of an unashamed cheat, or prevent a gross error by ignoring the opinion of professionals.&lt;/p&gt;

&lt;p&gt;Be careful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urJBRQKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://secure.gravatar.com/avatar/c09de36bd46989a788c19d25ae0e2940%3Fs%3D80%26d%3Dblank%26r%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urJBRQKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://secure.gravatar.com/avatar/c09de36bd46989a788c19d25ae0e2940%3Fs%3D80%26d%3Dblank%26r%3Dg" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Article You may like&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.coodingdessign.com/more/steps-to-develop-best-administration-of-it-product-project-management/"&gt;Steps to develop best administration of IT Product (Project Management)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#author-shantun-parmar" class="anchor"&gt;
  &lt;/a&gt;
  Author: &lt;span&gt;&lt;a href="http://www.shantunparmar.in"&gt;Shantun Parmar&lt;/a&gt;&lt;/span&gt;
&lt;/h4&gt;

</description>
      <category>javascript</category>
      <category>100daysofcode</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
