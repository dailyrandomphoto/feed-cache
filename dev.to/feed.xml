<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Generate all kinds of permutations and combinations using backtracking </title>
      <author>dhavalraj007</author>
      <pubDate>Thu, 19 Aug 2021 10:12:57 +0000</pubDate>
      <link>https://dev.to/dhavalraj007/generate-all-kinds-of-permutations-and-combinations-using-backtracking-41he</link>
      <guid>https://dev.to/dhavalraj007/generate-all-kinds-of-permutations-and-combinations-using-backtracking-41he</guid>
      <description>&lt;p&gt;There are four kinds of permutations or combinations possible based on whether repetition is allowed or not and whether order matters or not.&lt;br&gt;
All four of them are summarized and explained by example in the below figure.&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GLdrTwen--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfdo2t30tlhouasjamqm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GLdrTwen--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfdo2t30tlhouasjamqm.png" alt="permutations and combinations chart"&gt;&lt;/a&gt;&lt;br&gt;
To generate them using recursion we make the recursion tree.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_g18_kLF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11533r8qae9qjoef3cma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_g18_kLF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11533r8qae9qjoef3cma.png" alt="perm and comb tree"&gt;&lt;/a&gt;&lt;br&gt;
All the combinations in this tree are the first type of permutations(n^r). if the repetitions are not allowed but the order matters then you just skip the blue ones. the point to not here is that we skipped those items here which are same as the parent node like for 2's children we skipped when 2 2 came, for 3's children we skipped when 3 3 came. So this will take care of the repetitions thing. now if the order does not matter then we cant take both 1 2 and 2 1.In the figure we skip green ones. Notice here that we only skip the children elements who are less then the parent or you can say we take elements starting from the parent itself. for example, for 1's children we start taking elements from 1 , like 1 1 ,1 2 ,1 3 for 2's children we start taking elements from 2 , like 2 2, 2 3 and for 3's children we start taking elements from 3,like 3 3.&lt;br&gt;
Based on following observations here is the &lt;code&gt;Cpp code&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;vector&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;permComb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;==-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;permComb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop_back&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;permComb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let me know in the comments if you have any doubts.👋&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>computerscience</category>
      <category>recursion</category>
      <category>backtracking</category>
    </item>
    <item>
      <title>The most popular Ruby Gems in 2021</title>
      <author>Monika Ambrozowicz</author>
      <pubDate>Thu, 19 Aug 2021 09:37:29 +0000</pubDate>
      <link>https://dev.to/monikaambrozowicz/the-most-popular-ruby-gems-in-2021-17il</link>
      <guid>https://dev.to/monikaambrozowicz/the-most-popular-ruby-gems-in-2021-17il</guid>
      <description>&lt;p&gt;&lt;strong&gt;Are you a Ruby on Rails developer looking for the best and the most popular Ruby Gems to accelerate the launch of your app? This article gathers the most popular Ruby Gems in 2021. Let’s get started!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As you most likely already know, Ruby Gems are package managers developed in ruby that facilitate and accelerate processes like app creation, deployment, library support, API connection, etc.&lt;/p&gt;

&lt;p&gt;Ruby Gems are open source, and you can find them on &lt;a href="https://rubygems.org/"&gt;RubyGems.org.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#authentication-and-authorization"&gt;
  &lt;/a&gt;
  Authentication and Authorization
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Devise&lt;/strong&gt; is one of the most widely used gems, downloaded almost 105 million times. It is a library that offers authentication services, and it owns its popularity to the simplicity of use and good support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pundit&lt;/strong&gt; helps to define authorization systems that ensure that users are allowed access they are supposed to have or to perform an action they are supposed to perform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Devise Invitable&lt;/strong&gt; is an add-on gem that allows users to invite others to the application. It is commonly used in SaaS products.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OmniAuth&lt;/strong&gt; is another highly popular gem among developers building SaaS applications as it allows users to log in using their Facebook or LinkedIn accounts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging"&gt;
  &lt;/a&gt;
  Debugging
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Pry-byebug&lt;/strong&gt; combines Pry and Byebug gems and extends the functionalities of both. Thanks to this popular Ruby gem, you can set console breakpoints and implement step-by-step code debugging of each piece of code between these breakpoints.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Better_errors&lt;/strong&gt; provides an alternative error page for Rails Applications. It also includes the source code inspection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ndcnOHJs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/08/FA-article-RubyApp-1-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ndcnOHJs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/08/FA-article-RubyApp-1-.png" alt="A visual presenting Forest Admin UI and some code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#forms-and-search"&gt;
  &lt;/a&gt;
  Forms and Search
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ransack&lt;/strong&gt; is a popular gem, the successor to the MetaSearch gem, that allows for creating simple but robust search forms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; is another gem that implements simple and easy to use DSL for building forms, which saves time that otherwise would be spent on writing forms in HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Elasticsearch&lt;/strong&gt; gem is often the first choice for developers who want to include a built-in search functionality. It is particularly appreciated in e-commerce as it allows for indexing catalogs of products, storing transaction information, and facilitating data analysis with dashboards.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#payments"&gt;
  &lt;/a&gt;
  Payments
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Active Merchant&lt;/strong&gt;, created and maintained by engineers from Shopify, allows for integrating 145 (!) payment gateways thanks to a centralized API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stripe&lt;/strong&gt; gem interacts with Stripe.com — one of the most popular payment gateways, heavily used by e-commerce businesses. Forest Admin has a Stripe integration as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;BrakeMan&lt;/strong&gt; is a security analysis tool that scans the application for security anomalies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bundler&lt;/strong&gt; reduces an application’s dependencies by tracking and installing the exact gems and versions that are necessary. It also helps to make sure that gems are present in development, staging, and production environments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lockbox&lt;/strong&gt; is a gem that provides modern encryption. Lots of Ruby on Rails developers are choosing it thanks to its many integrations and zero dependencies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;RSpec&lt;/strong&gt; is commonly used to create tests, especially in BDD and TDD environments. Users like its effectiveness, clear syntax, and being able to write tests as closely to “human” language as possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Capybara&lt;/strong&gt; automates a user’s interactions in a browser, such as filing a form, finalizing a purchase, clicking on buttons, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Faker&lt;/strong&gt; is another useful gem that generates fake names, phone numbers, addresses, and other data. Thanks to this, you can quickly build and test an application before filling it with real data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#admin-panel-and-other-internal-tools"&gt;
  &lt;/a&gt;
  Admin Panel and other Internal Tools
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Active Admin&lt;/strong&gt; is a popular admin panel solution for customer-facing Rails applications. It is a reliable and 100% free option for smaller projects that require a high level of customization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.forestadmin.com/?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic"&gt;Forest Admin&lt;/a&gt;&lt;/strong&gt; is a highly secure Active Admin alternative that is designed to scale. It offers similar functionalities (managing the website, search, data visualization and analytics, permission management, etc.) but much more flexibility thanks to Smart Actions and the powerful UI. With Forest Admin, even non-technical teams, like sales or customer support, can easily adapt the internal tool to their needs and business logic. Developers, on the other hand, are not restricted by the tool but they’re able to implement even very complex and unique features.&lt;br&gt;
A dashboard in the editor mode of the Forest Admin UI&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hGX866oz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/08/forest-admin-dashboard-editor-mode-copy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hGX866oz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/08/forest-admin-dashboard-editor-mode-copy.png" alt="A screenshot from Forest Admin presenting dashboards"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/forest-admin/forest-admin-vs-active-admin-the-complete-comparison-4cfcfbfee74c"&gt;Read the detailed comparison of Active Admin and Forest Admin.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.forestadmin.com/how-raspberry-pi-uses-forest-admin-to-manage-resellers/?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic"&gt;Read how Raspberry Pi uses Forest Admin on top of their Rails application.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-most-popular-ruby-gems-conclusion"&gt;
  &lt;/a&gt;
  The most popular Ruby Gems: Conclusion
&lt;/h2&gt;

&lt;p&gt;Ruby on Rails developers would struggle a lot without gems. They accelerate software development and also play a vital role in solving common problems like authentication and authorization, testing, debugging, and ensuring high security. Gems are not a silver bullet and they won’t replace skilled developers, however, in most cases where there is no need to reinvent the wheel, as gems make software development faster and more efficient on their own.&lt;/p&gt;

&lt;p&gt;🌲🌲🌲&lt;br&gt;
If you are looking for an internal tool solution for your Ruby on Rails application,&lt;a href="https://app.forestadmin.com/signup?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic"&gt;try Forest Admin for free&lt;/a&gt; as an Active Admin alternative. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Yield Return Explained !</title>
      <author>Ahmed Adel</author>
      <pubDate>Thu, 19 Aug 2021 09:06:34 +0000</pubDate>
      <link>https://dev.to/ahmedadel/yield-return-explained-262d</link>
      <guid>https://dev.to/ahmedadel/yield-return-explained-262d</guid>
      <description>&lt;p&gt;&lt;strong&gt;Yield keyword&lt;/strong&gt; has always been a highly misunderstood keyword in &lt;code&gt;C#&lt;/code&gt;, so I will try to explain it with a simple example so hopefully you can understand it as it will help you to get a better performance for your app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%9E%BDcreate-the-console-app"&gt;
  &lt;/a&gt;
  ➽Create the Console App
&lt;/h2&gt;

&lt;p&gt;☞Let's first assume that we have a simple &lt;code&gt;.Net Core 3.1&lt;/code&gt; Console application that handles a list of students.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Student Class&lt;/code&gt; will have the following structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Seems simple right ? don't worry, it will keep that way 😉&lt;/p&gt;

&lt;p&gt;☞Next step, create a list of Students in the &lt;code&gt;main&lt;/code&gt; method of the console app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;CreateStudents&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;☞So we have a simple function called &lt;code&gt;CreateStudents&lt;/code&gt; which takes 1 parameter &lt;em&gt;(Number of students to be created)&lt;/em&gt;, this function will create students and if the &lt;code&gt;student ID&lt;/code&gt; is less than &lt;strong&gt;1000&lt;/strong&gt;, then it will type it to the screen :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;CreateStudents&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetStudents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"Id: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, Name: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetStudents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;$"Student Number &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;☞&lt;code&gt;GetStudents&lt;/code&gt; function just creates a new student list and then fill it with new students and return it.&lt;/p&gt;

&lt;p&gt;☞let's run the application and see how it behaves and remember again that we want to type only students with ID less than &lt;strong&gt;1000&lt;/strong&gt; ...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4OT56jy7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr0853gfddnybm8p89so.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4OT56jy7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr0853gfddnybm8p89so.jpg" alt="Create Function Method image - no yield"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;☞By setting a breakpoint 🔴 after calling &lt;code&gt;GetStudents&lt;/code&gt; function, notice that a Million students are created then the &lt;code&gt;foreach&lt;/code&gt; loop is entered to print the first 1000 only, so Do we really need to create a million student to print only 1000 😖 ? &lt;br&gt;
Of course not ..&lt;/p&gt;

&lt;p&gt;➥What we want is to prevent creating all million records and adding them to a list and returning that list fully hydrated with a million records, instead would it be great if we could &lt;strong&gt;just only return what we want&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#%E2%9E%BDapply-yield-return"&gt;
  &lt;/a&gt;
  ➽Apply Yield Return
&lt;/h2&gt;

&lt;p&gt;So let's apply some modifications to &lt;code&gt;CreateStudents&lt;/code&gt; function ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetStudents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;$"Student Number &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;☞let's run the application now with the same breakpoint set and see what will happen ..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KyvamUWO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3o9iv2xxlnsftdgivauo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KyvamUWO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3o9iv2xxlnsftdgivauo.jpg" alt="Breakpoint debugging"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;☞We now hit the &lt;code&gt;foreach&lt;/code&gt; loop with Zero students created !!&lt;/p&gt;

&lt;p&gt;☞let's set another breakpoint in the &lt;code&gt;yield return&lt;/code&gt; line inside &lt;code&gt;GetStudents&lt;/code&gt; function to see what is really going on and hit &lt;strong&gt;Step Over (F10)&lt;/strong&gt; in Visual Studio to continue the debugging process ...&lt;/p&gt;

&lt;p&gt;☞The debugger will go over (&lt;strong&gt;students&lt;/strong&gt;) in the &lt;code&gt;foreach&lt;/code&gt; loop then over the (&lt;strong&gt;in&lt;/strong&gt;) keyword then it jumps to the &lt;code&gt;return yield&lt;/code&gt; line in &lt;code&gt;GetStudents&lt;/code&gt; function without stepping into the &lt;code&gt;foreach&lt;/code&gt; in &lt;code&gt;CreateStudents&lt;/code&gt; function ...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iPSEzSzu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygtjl8lw54n4votubi8a.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iPSEzSzu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygtjl8lw54n4votubi8a.jpg" alt="Debugging Steps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;☞After that we are inside the &lt;code&gt;foreach&lt;/code&gt; loop then we enter the if statement and data of the first Student is printed in console ...&lt;/p&gt;

&lt;p&gt;☞Continue stepping over using F10 ... you will hit the keyword &lt;code&gt;**in**&lt;/code&gt; in the &lt;code&gt;foreach&lt;/code&gt; then enter the &lt;code&gt;return yield&lt;/code&gt; again ...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%9E%BDso-what-are-we-really-doing-here-"&gt;
  &lt;/a&gt;
  ➽So what are we really doing here ?
&lt;/h2&gt;

&lt;p&gt;☞Actually we are &lt;strong&gt;lazily iterating&lt;/strong&gt; over the collection of students, we are only requesting one student at a time.&lt;/p&gt;

&lt;p&gt;☞In both ways we are getting the same result, which is printing 1000 student on the screen like that&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7HjJK-AD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g2rvnezfdwqrlfpnnr7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7HjJK-AD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g2rvnezfdwqrlfpnnr7.png" alt="Console app result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;☞The difference between them is that &lt;code&gt;yield return&lt;/code&gt; made a huge improve of &lt;em&gt;performance&lt;/em&gt; and &lt;em&gt;memory usage&lt;/em&gt; that we will see later..&lt;/p&gt;

&lt;p&gt;☞Actually, We are basically &lt;strong&gt;creating an iterator&lt;/strong&gt; which iterates through our collection.&lt;br&gt;
Our &lt;code&gt;foreach&lt;/code&gt; loop is just a syntactical sugar for a statement like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;studentesEnumerator&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetEnumerator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;studentesEnumerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MoveNext&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;studentesEnumerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this is kind of what it compiles down to roughly.&lt;/p&gt;

&lt;p&gt;➥So, by not having to iterate over the entire collection, we didn't have to actually create a million student in the list, we actually looped through and only created the first 1000 &lt;br&gt;
because using &lt;code&gt;yield&lt;/code&gt; when we came into this this loop makes students creation one at a time.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#%E2%9E%BDtest-the-difference-using-benchmarkdotnet-"&gt;
  &lt;/a&gt;
  ➽Test the difference using BenchmarkDotNet :
&lt;/h2&gt;

&lt;p&gt;● Now, let's test and diagnose the application performance to see if that is really making a difference.. &lt;/p&gt;

&lt;p&gt;● In this test we will use &lt;strong&gt;BenchmarkDotNet Nuget&lt;/strong&gt; Package to do that, you can download it from here &lt;a href="https://www.nuget.org/packages/BenchmarkDotNet/"&gt;BenchmarkDotNet Nuget&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● We will just make simple edits to our code to be able to apply benchmark statistics ...&lt;br&gt;
● We will create a class and let's call it &lt;code&gt;YieldBenchmarks&lt;/code&gt;, this class will contain the old version of our functions and the new version using yield return , the class will be decorated with &lt;strong&gt;[MemoryDiagnoser]&lt;/strong&gt; Attribute and the old and new version of &lt;code&gt;CreateStudent&lt;/code&gt; functions will be decorated with &lt;strong&gt;[Benchmark]&lt;/strong&gt; Attribute, the code will be as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MemoryDiagnoser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;YieldBenchmarks&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Benchmark&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;CreateStudents&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetStudents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"Id: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, Name: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetStudents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;$"Student Number &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Benchmark&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;CreateStudentsYield&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetStudentsYield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"Id: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, Name: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetStudentsYield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;$"Student Number &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the &lt;code&gt;main&lt;/code&gt; function will be like :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BenchmarkRunner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;YieldBenchmarks&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;● Now let's run the application in &lt;strong&gt;Release&lt;/strong&gt; mode ...&lt;br&gt;
● Notice that the &lt;code&gt;BenchmarkRunner&lt;/code&gt; will run each function multiple time to be able to perform its diagnostics and the result will be like :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6x8SVzGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aljzm328v1ttvxih7kv1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6x8SVzGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aljzm328v1ttvxih7kv1.png" alt="After sepeartion of code to use benchmark"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● Now Notice the large difference in time elapsed, also notice the huge difference in memory usage, it's &lt;strong&gt;133.5 MB&lt;/strong&gt; vs &lt;strong&gt;220 KB&lt;/strong&gt; !! &lt;/p&gt;

&lt;p&gt;This was just a simple clarification for the &lt;code&gt;yield&lt;/code&gt; keyword, next , we will go with &lt;strong&gt;Async Yield&lt;/strong&gt; .. Wait for it :)&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>The new magical Redux land.</title>
      <author>Geraldo dos Santos</author>
      <pubDate>Thu, 19 Aug 2021 08:17:48 +0000</pubDate>
      <link>https://dev.to/geraldosantos/the-new-magical-redux-land-5ef9</link>
      <guid>https://dev.to/geraldosantos/the-new-magical-redux-land-5ef9</guid>
      <description>&lt;p&gt;This post assumes you have worked somewhat with Redux before, so apologies in advance if the syntax/explanations make little sense to you. 🖖&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-the-beginning"&gt;
  &lt;/a&gt;
  In the beginning...
&lt;/h2&gt;

&lt;p&gt;...back in the age of class components, a fair amount of tutorials out there would always teach React + Redux together, like they were necessarily part of each other.&lt;/p&gt;

&lt;p&gt;What often happened is the steep learning curve of those two put together would make people have not so positive feelings towards one or the other (but very likely Redux was the one liked the least).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oMUQRwbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gatherer.wizards.com/Handlers/Image.ashx%3Fmultiverseid%3D489739%26type%3Dcard" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oMUQRwbs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gatherer.wizards.com/Handlers/Image.ashx%3Fmultiverseid%3D489739%26type%3Dcard" alt="Knowledge"&gt;&lt;/a&gt;&lt;/p&gt;
Dispatch, reducers, action creators, containers...



&lt;p&gt;I mean, looking back, I can understand the feeling very well. &lt;/p&gt;

&lt;p&gt;What I experienced:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Having your container components (the ones that do the Redux magic)  &lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;mapStateToProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Pass the global state down as you want it&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Bind your action creators and have your components accessing them&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapStateToProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;MyContainerComponent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then wrap all the components under your container component and go to Redux town. Now you are able to update and read the global state in your application. &lt;/p&gt;

&lt;p&gt;Oh and don't forget your reducers!&lt;/p&gt;

&lt;p&gt;I remember when our team back then was going through all that and often feeling overwhelmed, because of so many layers, so many moving parts. Little did I know what the future would hold.&lt;/p&gt;

&lt;p&gt;But I ended up not using redux for nearly two years because of my new job. We didn't need it, so I never heard of it again, until...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D9olEG46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gatherer.wizards.com/Handlers/Image.ashx%3Fmultiverseid%3D522205%26type%3Dcard" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D9olEG46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gatherer.wizards.com/Handlers/Image.ashx%3Fmultiverseid%3D522205%26type%3Dcard" alt="Tomorrow"&gt;&lt;/a&gt;&lt;/p&gt;
Fast forward 2 years.



&lt;h2&gt;
  &lt;a href="#another-day-another-side-project"&gt;
  &lt;/a&gt;
  Another day, another side project
&lt;/h2&gt;

&lt;p&gt;Recently, during a random talk with a good colleague of mine, he mentioned being enthusiastic about Redux and that sparked my curiosity, so I decided to check it out, and oh boy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P-jILtzG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gatherer.wizards.com/Handlers/Image.ashx%3Fmultiverseid%3D426765%26type%3Dcard" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P-jILtzG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gatherer.wizards.com/Handlers/Image.ashx%3Fmultiverseid%3D426765%26type%3Dcard" alt="New perspectives"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can build something cool with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-fetch-magic-the-gathering-cards"&gt;
  &lt;/a&gt;
  Let's fetch Magic The Gathering cards.
&lt;/h2&gt;

&lt;p&gt;In order to get started, we need a store.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/store/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;configureStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;configureStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. &lt;a href="https://redux-toolkit.js.org/usage/usage-guide"&gt;In their docs&lt;/a&gt; you can check how it was before, and the pleasants surprises didn't stop there.&lt;/p&gt;

&lt;p&gt;Now we need reducers.&lt;/p&gt;

&lt;p&gt;Redux Toolkit has &lt;code&gt;reducer slices&lt;/code&gt;, and &lt;code&gt;what are those&lt;/code&gt;? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;slice reducer: a reducer that is being used to handle updates to one specific slice of the state tree, usually done by passing it to combineReducers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(&lt;a href="https://redux.js.org/usage/structuring-reducers/splitting-reducer-logic"&gt;from their docs&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Basically, it's a more focused reducer, it's easier to split the state changing logic instead of having one gigantic reducer that does a lot.&lt;/p&gt;

&lt;p&gt;This is how you create a slice:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/features/search/searchSlice.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;searchString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;searchSlice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;search&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;searchCard&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Redux Toolkit allows us to write "mutating" logic in reducers. It&lt;/span&gt;
      &lt;span class="c1"&gt;// doesn't actually mutate the state because it uses the Immer library,&lt;/span&gt;
      &lt;span class="c1"&gt;// which detects changes to a "draft state" and produces a brand new&lt;/span&gt;
      &lt;span class="c1"&gt;// immutable state based off those changes&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Action creators are generated for each case reducer function&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;searchCard&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;searchSlice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;searchSlice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like it's mentioned in the code and their docs, there's no need for spreading objects over and over again. Redux Toolkit already takes care of the immutability for you, so feel free to assign the value to the state directly. Never again overwriting the state by accident!&lt;/p&gt;

&lt;p&gt;Notice how we didn't have to create any actions? &lt;code&gt;createSlice&lt;/code&gt; already does it for you, combined with a reducer. But if you want to create those by hand, feel free to check the &lt;code&gt;createReducer&lt;/code&gt; on their API. &lt;/p&gt;

&lt;p&gt;Cool, our slice is ready. We can finally connect it to the store:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/store/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;configureStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;searchReducer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../features/search/searchSlice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;configureStore&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;search&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;searchReducer&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we're ready to use it in our components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interacting-with-our-components"&gt;
  &lt;/a&gt;
  Interacting with our components
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xGyo1Jhe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gatherer.wizards.com/Handlers/Image.ashx%3Fmultiverseid%3D513544%26type%3Dcard" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xGyo1Jhe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gatherer.wizards.com/Handlers/Image.ashx%3Fmultiverseid%3D513544%26type%3Dcard" alt="Past"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember &lt;code&gt;connect&lt;/code&gt;, &lt;code&gt;mapStateToProps&lt;/code&gt; and &lt;code&gt;mapDispatchToProps&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;This is them now, feel old?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;useSelector&lt;/code&gt; is how we tap into the global state shared by your store. &lt;/p&gt;

&lt;p&gt;And &lt;code&gt;useDispatch&lt;/code&gt; allows us to dispatch our actions. But where do we get our actions from? &lt;/p&gt;

&lt;p&gt;From the slice! 🤩&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./features/search/searchSlice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Putting it all together:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/App.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;searchCard&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./features/search/searchSlice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useUpdateEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-use&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;searchState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;card&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCard&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;searchString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`https://api.scryfall.com/cards/named?fuzzy=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;encodeURI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchString&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;jsonResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonResponse&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;setCard&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useUpdateEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;searchState&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Would&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;like&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;magic&lt;/span&gt; &lt;span class="nx"&gt;card&lt;/span&gt;&lt;span class="p"&gt;?{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="err"&gt;🃏&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;marginBottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2rem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card-search&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt; &lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;
          &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card-seard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchCard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/option&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lightning bolt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Lightning&lt;/span&gt; &lt;span class="nx"&gt;bolt&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/option&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ancestral recall&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Ancestral&lt;/span&gt; &lt;span class="nx"&gt;Recall&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/option&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/select&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;card&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;image_uris&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
            &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image_uris&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;300px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;



&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'll leave the running sandbox here:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/romantic-best-potato-kpk92"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Despite this being a simple example to add Redux on, I wanted to share how much easier it is to get started on it. Something I plan to write about later is their &lt;a href="https://redux-toolkit.js.org/rtk-query/overview"&gt;RTK (Redux Toolkit) Query&lt;/a&gt;. Adding on this post would make it too convoluted. &lt;/p&gt;

&lt;p&gt;I was completely blown away from what it can do and I definitely recommend checking it out. &lt;/p&gt;

&lt;p&gt;After playing around with all for a bit, I ended up creating this fun side project, take a look if you're into tabletop RPGs: &lt;a href="http://www.yougotaquest.com"&gt;www.yougotaquest.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>redux</category>
      <category>react</category>
      <category>magicthegathering</category>
    </item>
    <item>
      <title>Refactoring Legacy - Intro</title>
      <author>Andrei Dascalu</author>
      <pubDate>Thu, 19 Aug 2021 07:58:05 +0000</pubDate>
      <link>https://dev.to/andreidascalu/refactoring-legacy-intro-1f1k</link>
      <guid>https://dev.to/andreidascalu/refactoring-legacy-intro-1f1k</guid>
      <description>&lt;p&gt;This post is a summary of a couple of years spent battling a legacy application. This is not (necessarily) a how-to because I have yet to declare a "mission accomplished" here and whether it's a success or not, it's too soon to call. &lt;/p&gt;

&lt;p&gt;While this represents a particular set of circumstances, I believe it can help you ask the right questions in the beginning, take into account a variety of paths and also give the benefit of the doubt to those whose mess you've inherited (they were doing their best at the time).&lt;/p&gt;

&lt;p&gt;The application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;legacy PHP, started with early 5.x versions and patched just enough so that it runs on 7.2&lt;/li&gt;
&lt;li&gt;really old-school: html is formed by echo-ing stuff in random scripts that are "require'd" in the right order. Warnings are totally silenced, nobody cared about a missing array item when fetching a deeper array entry.&lt;/li&gt;
&lt;li&gt;evidence that someone tried to MVC the whole thing, but not by introducing, say, Symfony components but by creating scripts that act like views (just echo stuff, but without buffering it into a final string - echo wherever/whenever) and some classes - but missing a proper service layer&lt;/li&gt;
&lt;li&gt;database access done via a class that mysqli_connects, no caching of any kind &lt;/li&gt;
&lt;li&gt;some models carry state but still choke-full of static methods that bring fresh data, as if someone wanted to go more like Doctrine-style but someone else later wanted a poor man's Eloquent Active Record &lt;/li&gt;
&lt;li&gt;sometimes the same query ended up being done against the DB 10s of times during a request (well, 29 was the top I've seen myself)&lt;/li&gt;
&lt;li&gt;running on manually maintained VMs, deploy manually via "git pull" then clear some local static files then restart Apache&lt;/li&gt;
&lt;li&gt;the whole thing was becoming multi-tenant&lt;/li&gt;
&lt;li&gt;the application was heavily dependent on data fetched from remote APIs and had to push data back to the same APIs (some where REST, some SOAP)&lt;/li&gt;
&lt;li&gt;non-existent error handling, WARNING were silent, catching was used to ignore Errors (for the most part), virtually no logging.&lt;/li&gt;
&lt;li&gt;objects were used for data models only for the DB, for SOAP/REST(JSON) only arryas/stdClass were used to serialise/deserialise (always assuming that some item exists via the developer's knowledge of the structure of a given request).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Challenges:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;migrate to a cloud provider and add scalability (automatic, preferably)&lt;/li&gt;
&lt;li&gt;create a layered system of environments for each tenant with automatic deployment on a QA environment and manual promotion for local (our) acceptance then customer acceptance then prod.&lt;/li&gt;
&lt;li&gt;tackle a number of bugs in the code. Right off the bat it was clear most were linked to the hidden warnings, where the code would for example expect &lt;code&gt;$array['level1']['level2']&lt;/code&gt; but 'level2' may be missing due to some buggy change yet that fact was hidden from developers since warnings were silenced.&lt;/li&gt;
&lt;li&gt;create a system of aggregated structure logging&lt;/li&gt;
&lt;li&gt;integrate more external APIs&lt;/li&gt;
&lt;li&gt;tackle an existing feature backlog&lt;/li&gt;
&lt;li&gt;improve performance&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's explore them, as part of the series!&lt;/p&gt;

</description>
      <category>php</category>
      <category>refactoring</category>
      <category>legacy</category>
      <category>development</category>
    </item>
    <item>
      <title>Designing Solutions for Healthcare: How to Make Users of Your App Satisfied?</title>
      <author>Emerline</author>
      <pubDate>Thu, 19 Aug 2021 07:44:01 +0000</pubDate>
      <link>https://dev.to/emerlinedev/designing-solutions-for-healthcare-how-to-make-users-of-your-app-satisfied-4nli</link>
      <guid>https://dev.to/emerlinedev/designing-solutions-for-healthcare-how-to-make-users-of-your-app-satisfied-4nli</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SgvgtYgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4j9lc0eo7lq2mkahev7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SgvgtYgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4j9lc0eo7lq2mkahev7.png" alt="Screenshot 2021-08-19 102125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every product owner places a great emphasis on its functionality, and for good reason. When a product is incapable of delivery, it’s a waste of money. Still, it’s not just about functionality. The thing is that all functions have to be presented in the way to be easily understood and utilized by end-users — and this is achieved through sound design. &lt;/p&gt;

&lt;p&gt;When it comes to healthcare apps, design plays one of the major roles in lead generation, customer loyalty, and retention rates. Any successful healthcare app has to be built in a way to highlight the most essential elements of the product, gently guide users through its features and functions, give advice on the next step to take, and in this way lead to necessary actions. When it does, the app can serve a company as its main product and pay for investments. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This post aims at sharing key steps that need to be taken for the creation of a worthy healthcare app. All of them derive from our development expertise that covers the creation of solutions for companies operating in the healthcare industry. Furthermore, the article features information about the recent development of a migraine app, so make sure to learn about the benefits offered to a client after the work done by our team, and see how our services can contribute to your product success and increased profits.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#designing-mobile-apps-for-healthcare-key-steps-to-take"&gt;
  &lt;/a&gt;
  Designing mobile apps for healthcare: key steps to take
&lt;/h1&gt;

&lt;p&gt;It’s true that the competitiveness in the healthcare app market is severe, so deficiencies are unacceptable. In case your users, whether these are your employees or clients, face some difficulties when they interact with your solution, you’re in trouble: productivity of your workers will decrease, and you will lose your customers who’ll find another, more satisfying solution. To help you avoid such situations, we provide you with initial steps to take for the creation of a sound healthcare app design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step #1: Research&lt;/strong&gt;&lt;br&gt;
Before prototyping an app interface, you need to define your target audience: their geographical, socio-demographic, psychological characteristics, etc. — anything that is correlinked with your product goal. Remember that there’s no product that can fit everyone. And while interests and capabilities of users play significant roles in how your users will interact with the application, start with answering the following questions:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ztaMXZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78dhtv7dntqqfwva099h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ztaMXZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78dhtv7dntqqfwva099h.png" alt="Screenshot 2021-08-19 102150"&gt;&lt;/a&gt; Also, you have to think about whether your app will be used by patients, their doctors, or both. This will allow you to make smart decisions about functionality and UI. &lt;/p&gt;

&lt;p&gt;When it comes to medical personnel, your app should provide them with the ability to find data quickly. These could be electronic health records, medication specifications and recipes, therapeutic and medication recommendations, etc. &lt;/p&gt;

&lt;p&gt;In contrast, when developing a healthcare app for patients, it is wise to include as little information as it is possible and provide it in the convenience of an easily understandable, highly intuitive UI, especially if your targeted audience is elderly people. In case it does, don't hesitate to conduct research and adhere to all the A11Y(accessibility) rules.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step #2: Simplicity&lt;/strong&gt;&lt;br&gt;
Once again, healthcare apps for patients should not contain too many details. Otherwise, your users will get frustrated. Make it as simple as possible. &lt;/p&gt;

&lt;p&gt;One more point here is that doctors will also appreciate the simplicity. So when it comes to UI, it's always better to focus on minimalistic and clear design. In this way, you can ensure that user discovery of the app will be joyful and pleasant. Also, consider adding such features as passive inputs and autocomplete. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step #3: Features and Functionality&lt;/strong&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--laos9HQS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42lvu47jtfcqtnxatztr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--laos9HQS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42lvu47jtfcqtnxatztr.png" alt="Screenshot 2021-08-19 102215"&gt;&lt;/a&gt; If you want your app to be successful, one of the most important things is to ensure that design and functionality work together. They have to solve the problems of your users and address their pain points.&lt;/p&gt;

&lt;p&gt;Depending on your targeted audience, think about functionality to include. So if you create an app for medical organizations such as medical centers, hospitals, etc., make sure that patients will have access to their records (visits, recommendations, appointments, and so on). When developing telemedicine apps, it's initial to add video-conferencing features. Medication apps are useless without a notification system. &lt;/p&gt;

&lt;p&gt;Still, mind that even if your app offers a bunch of useful features, only the main ones can be placed on the home screen. Otherwise, lots of clutter will lead to frustration and choice upon a more simple app. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step #4: Navigation&lt;/strong&gt;&lt;br&gt;
If you want your app to be widely adopted, clear navigation is a must. It should speed up the process of discovery and use. For example, a survey conducted on behalf of Stanford Medicine states that 62% of the time devoted by a doctor to each patient is being spent in the EHR. You can address this issue, offering doctors a more convenient, faster way of accessing and dealing with health or medical records. We did that for a recently developed Uber-like app for doctors, so you are welcome to read about it here. &lt;/p&gt;

&lt;p&gt;The key point here is that your app has to be quick enough and have a clear navigation structure. So make sure that all the important information is on the surface, and your users won't lose their precious time looking for what they need for hours. To do so, adhere to the 3-click rule, which states that any information in your app should be accessible in three transitions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step #5: Colors&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LSZLGwDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf1xyafzv874d2354475.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LSZLGwDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf1xyafzv874d2354475.png" alt="Screenshot 2021-08-19 102240"&gt;&lt;/a&gt; In the majority of cases, colors used in healthcare apps are neutral. These could be light shades of blue, green, grey, etc. When it comes to the background, the choice is usually upon white. It is so because the app should not look too vivid, irritating the user. For this reason, the choice of such colors as red and yellow is really rare. &lt;/p&gt;

&lt;p&gt;Still, when looking at the diversity of healthcare apps, we can see that there are no restrictions at all. The only rule to adhere to is to create a positive, sometimes calming impression, as we did in the migraine app described below. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step #6: Personalization&lt;/strong&gt;&lt;br&gt;
In recent years, the personalization of mobile apps has become one of the key drivers for their success. And this fact is proven by statistics showing that 33% of customers will abandon business relationships because of insufficient personalization. But what does personalization mean?&lt;/p&gt;

&lt;p&gt;In terms of medical apps, it implies the provision of suggestions on the next action to take, gently guiding a user to the accomplishment of the desired goal and even further. To make your app personalized, research with identification and analysis of patterns in user behaviors is of the highest value.  &lt;/p&gt;

&lt;p&gt;Also, personalization can be presented through customization options, whether these are color themes (that was our case with a further discussed migraine app), interactive elements, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step #7: Accessibility&lt;/strong&gt;&lt;br&gt;
Adherence to accessibility rules is important in the creation of any type of app, but when it comes to healthcare ones, the importance is even of higher value. The thing is that healthcare solutions are more likely to be used by people with different impairments. Also, quite often these apps have elderly people among targeted users, so it is initial to address different visual and hearing abilities, as well as physical and psychological characteristics. &lt;/p&gt;

&lt;p&gt;All this means that both app owners and developers need to take into account limitations their users might face and build the solution in a way to minimize the negative impact of these limitations. To do so, it is wise to rely on WC3’s Web Content Accessibility Guidelines, adhere to design accessibility rules, and use color blindness simulators.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#development-for-a-migraine-app-at-emerline"&gt;
  &lt;/a&gt;
  Development for a migraine app at Emerline
&lt;/h1&gt;

&lt;p&gt;Recently, our team has taken part in the development of an app that helps people who are prone to migraine. The idea behind the app was to offer a user a migraine-free life or to minimize the possibility for its occurrence through the analysis of three types of data: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Environmental (weather — barometric pressure change, bright sunlight, and other traceable triggers)&lt;/li&gt;
&lt;li&gt;Behavioral (data provided by the user on a diet, sleep, activity, etc.)&lt;/li&gt;
&lt;li&gt;Personal (gender, age, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Taking advantage of Kotlin and Swift, our experts rebuilt the existing mobile app for iOS and developed the one for Android. &lt;strong&gt;We also worked on the creation of custom themes to allow the client the possibility for setting different color themes for the app and changing the branding elements.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After 3 month of hands-on work on UI, our team delivered to the client easy-to-use, pleasantly looking, intuitive apps for iOS and Android, each offering opportunities for fast and easy customization. Thanks to our work, the client gained a lot of business benefits, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to resell the app to any third-party service provider, with an opportunity to implement their branding elements and set a color theme accordingly.&lt;/li&gt;
&lt;li&gt;Provision of users with the solution that looks good and is easy and pleasant to interact with.&lt;/li&gt;
&lt;li&gt;A precious opportunity to reach a wider audience by offering versions for two major platforms: iOS and Android.&lt;/li&gt;
&lt;li&gt;Confidence in the fault-free operation of the version for iOS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You have to agree, getting all these business advantages in a short period of time is a really good thing you can do for your business, and for sure, we are always here to help you with that. Feel free to contact us for more information, free consultation, and let’s make your brightest ideas come to life together!&lt;/p&gt;

&lt;p&gt;Originally published at &lt;a href="https://emerline.com"&gt;https://emerline.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>startup</category>
      <category>softwaredevelopment</category>
      <category>design</category>
      <category>healthcare</category>
    </item>
    <item>
      <title>React-query series Part 1: Basic react-query setup</title>
      <author>Emmanuel Chinonye Nnajiofor</author>
      <pubDate>Thu, 19 Aug 2021 07:31:59 +0000</pubDate>
      <link>https://dev.to/nnajiforemma10/react-query-series-part-1-basic-react-query-setup-12g4</link>
      <guid>https://dev.to/nnajiforemma10/react-query-series-part-1-basic-react-query-setup-12g4</guid>
      <description>&lt;p&gt;Hey guys!&lt;/p&gt;

&lt;p&gt;So after a few years as a frontend developer, I have decided to&lt;br&gt;
write my first article. You have no idea the fear I had to&lt;br&gt;
conquer (or maybe you do), 😟 but there is no point hiding in your shell right ?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sections"&gt;
  &lt;/a&gt;
  Sections
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#chapter-0"&gt;Intro&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#chapter-1"&gt;Prerequisite&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#chapter-2"&gt;Bootstrap our project&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#chapter-3"&gt;Setup react-query&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#chapter-4"&gt;Credits&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://react-query.tanstack.com/"&gt;React-query&lt;/a&gt; is a superlight library for fetching, updating and synchronizing and updating server state. With react-query, you don't have to write your &lt;br&gt;
data-fetching logic (Who likes all that setting of loading, error and data state huh ? 🤷‍♀️ ), You&lt;br&gt;
don't also do not need global store libraries like redux or &lt;br&gt;
zustand to make your server state global or persistent. Even if a&lt;br&gt;
global store is used in your application, it is restricted to only&lt;br&gt;
client state like user settings etc, thereby reducing your&lt;br&gt;
code size by a ton.&lt;br&gt;
Although this library has a wonderful documentation, I have found that it can be daunting for beginners and thus, a need for a no-nonsense simple series to get beginners quickly setup to using react-query.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic knowledge of react and hooks in react&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#bootstrap-our-project"&gt;
  &lt;/a&gt;
  Bootstrap our project &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We bootstrap a basic react app by running &lt;code&gt;npx create-react-app project-name&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app react-query-setup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also install react-query library to our react app by running&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i react-query&lt;/code&gt;. At the time of writing, &lt;a href="https://www.npmjs.com/package/react-query"&gt;react-query&lt;/a&gt; version is at 3.19.6&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-query
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setup-reactquery"&gt;
  &lt;/a&gt;
  Setup react-query &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;To setup react-query, we need the &lt;code&gt;QueryClientProvider&lt;/code&gt;. The &lt;br&gt;
&lt;code&gt;QueryClientProvider&lt;/code&gt; component is used to connect and provide a &lt;br&gt;
&lt;code&gt;QueryClient&lt;/code&gt; to your application; more or less, connect our &lt;br&gt;
application to features react-query provides.&lt;br&gt;
The &lt;code&gt;QueryClientProvider&lt;/code&gt; component takes in a "client" prop. This &lt;br&gt;
prop is in turn, supplied the &lt;code&gt;queryClient&lt;/code&gt; instance. You can supply &lt;br&gt;
the &lt;code&gt;queryClient&lt;/code&gt; instance a custom config object as a &lt;code&gt;param&lt;/code&gt; if &lt;br&gt;
you'd like to set your own defaults. You can read about some &lt;br&gt;
important defaults that comes with react-query &lt;a href="https://react-query.tanstack.com/guides/important-defaults"&gt;here.&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*create and use a custom config object.Normally, I'd put this in another file and export
*/&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClientConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;refetchOnMount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;refetchOnWindowFocus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;refetchOnReconnect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;cacheTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//30 seconds&lt;/span&gt;
        &lt;span class="na"&gt;refetchInterval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//30 seconds&lt;/span&gt;
        &lt;span class="na"&gt;refetchIntervalInBackground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;suspense&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;staleTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryClientConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/QueryClientProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionally, you can add the &lt;a href="https://react-query.tanstack.com/devtools"&gt;&lt;code&gt;ReactQueryDevTools&lt;/code&gt;&lt;/a&gt; component to debug and visualize your queries on your development environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactQueryDevtools&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query/devtools&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*create and use a custom config object.Normally, I'd put this in another file and export
*/&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClientConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;refetchOnMount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;refetchOnWindowFocus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;refetchOnReconnect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;cacheTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//30 seconds&lt;/span&gt;
        &lt;span class="na"&gt;refetchInterval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//30 seconds&lt;/span&gt;
        &lt;span class="na"&gt;refetchIntervalInBackground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;suspense&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;staleTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryClientConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* The rest of your application */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReactQueryDevtools&lt;/span&gt; &lt;span class="nx"&gt;initialIsOpen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/QueryClientProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the next part of this series, we will talk about how to start fetching data and we will also look at what each key-value in the &lt;code&gt;queryClientConfig&lt;/code&gt; object does for queries.&lt;/p&gt;

&lt;p&gt;If the article has helped you, I wouldn't mind a 💖&lt;br&gt;
Thank you !&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/NnajioforEmma10"&gt;twitter @NnajioforEmma10&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Image: &lt;a href="https://blog.logrocket.com/whats-new-in-react-query-3/"&gt;Logrocket: What is new in react-query 3 by Lawrence Eagles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://react-query.tanstack.com"&gt;React-query documentation&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>hooks</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 11, Random numbers</title>
      <author>Aatmaj</author>
      <pubDate>Thu, 19 Aug 2021 07:18:15 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-11-random-numbers-5cnj</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-11-random-numbers-5cnj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-we-will-cover-the-random-module-in-python"&gt;
  &lt;/a&gt;
  Today we will cover the random module in Python.
&lt;/h2&gt;




&lt;p&gt;Just like the math and cmath modules, the 'random' module is built in into Python, so we do not need to take any extra efforts to download or install it.😊&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generating-a-random-number"&gt;
  &lt;/a&gt;
  Generating a random number
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;random()&lt;/code&gt; method in random module generates a floating point number between 0 and 1. Note that Python is case sensitive, hence &lt;code&gt;random()&lt;/code&gt; and &lt;code&gt;Random()&lt;/code&gt; are different!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="c1"&gt;#import the random module
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0.8231210971019169
0.7495851490827552
0.1910088487916375
0.7611387314935155
0.17622975226933524
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;But many times we want a number in between a specific range of numbers. This is where the &lt;code&gt;randint()&lt;/code&gt; method comes handy. The &lt;code&gt;randint()&lt;/code&gt; method generates a integer between a given range of numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;7
4
3
6
7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the input parameters of the &lt;code&gt;randint()&lt;/code&gt; gives must be in ascending order only. For example this won't work&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; 
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Traceback (most recent call last):
  File "main.py", line 3, in &amp;lt;module&amp;gt;
    n = random.randint(10,7)
  File "/usr/lib/python3.4/random.py", line 218, in randint
    return self.randrange(a, b+1)
  File "/usr/lib/python3.4/random.py", line 196, in randrange
    raise ValueError("empty range for randrange() (%d,%d, %d)" % (istart, istop, width))
ValueError: empty range for randrange() (10,8, -2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;random()&lt;/code&gt; method is often used in data science and statistical operations to obtain random numbers between 0 to 1. For other applications, in most cases the &lt;code&gt;randint()&lt;/code&gt; function becomes useful&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Typing 'random' every time is just a waste right? We can shorten up the code by replacing random with a short keyword, whoch we can use everytime. The syntax for the following is &lt;/p&gt;

&lt;p&gt;&lt;code&gt;import random as rd&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;SO now every time instead of writing &lt;code&gt;random&lt;/code&gt;, we can just write &lt;code&gt;rd&lt;/code&gt;&lt;br&gt;
Example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;5
1
2
9
9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#list-of-random-numbers"&gt;
  &lt;/a&gt;
  List of random numbers.
&lt;/h3&gt;

&lt;p&gt;Many times, we require to have a list of random numbers. &lt;/p&gt;

&lt;p&gt;One way to do that is appending random numbers to the list. We first create an empty list and then append the random numbers one by one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;
&lt;span class="n"&gt;randomlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;randomlist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randomlist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[23, 15, 26, 26, 18]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another way is by using the method &lt;code&gt;sample()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sample()&lt;/code&gt; method takes two arguments. One is the list of numbers to choose random numbers from, and the other is the number of random numbers to choose. The examples below will make things clear.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;
&lt;span class="n"&gt;randomlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randomlist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[28, 24, 15, 26, 19]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;range()&lt;/code&gt; function returns a list of values from the start to the end.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;
&lt;span class="n"&gt;randomlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;#Here the sample returns a random number from the list of prime numbers provided.
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randomlist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[7, 5, 2, 3, 17]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨&lt;/p&gt;

&lt;p&gt;😎 Your suggestions motivate me, so please please please let me know in the comment section if you this part or not. 🧐 And don't forget to like the post if you did. 😍&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Setting up Windows virtual test environments with Vagrant</title>
      <author>Edoardo Sanna</author>
      <pubDate>Thu, 19 Aug 2021 07:12:43 +0000</pubDate>
      <link>https://dev.to/sannae/setting-up-windows-virtual-test-environments-with-vagrant-4k1b</link>
      <guid>https://dev.to/sannae/setting-up-windows-virtual-test-environments-with-vagrant-4k1b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#intro"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#install"&gt;Install and setup Vagrant&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#create"&gt;Creating a new project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vagrantup"&gt;Your first &lt;code&gt;vagrant up&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#customize"&gt;Customizing your VM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#provisioning"&gt;Provisioning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction-why-and-what"&gt;
  &lt;/a&gt;
  Introduction: why and what &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Recently we've been trying to implement a Continuous Delivery pipeline for our in-house .NET applications suite - you can't imagine how long and painful it is to install and configure a multi-tier application by hand 😓 ! Being a demanding task (a &lt;em&gt;looot&lt;/em&gt; of scripting required!), we needed to be able to quickly provision and destroy several test environments (where 'environment', containers not being supported yet, is a whole Windows Virtual Machine). &lt;/p&gt;

&lt;p&gt;The main idea was to create an easy, repeatable and trackable procedure. The best practices mentioned by &lt;a href="https://cloud.google.com/architecture/devops/devops-tech-deployment-automation"&gt;Google's DevOps capabilities&lt;/a&gt; persuaded us to use &lt;strong&gt;Infrastructure as Code (IaC)&lt;/strong&gt;. IaC is basically code - therefore version-controlled with &lt;code&gt;git&lt;/code&gt; - made of creation and configuration scripts to be fed to a proper virtualization engine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.virtualbox.org/manual/ch08.html"&gt;Virtualbox&lt;/a&gt;, &lt;a href="https://www.vmware.com/support/ws5/doc/ws_learning_cli_vmrun.html"&gt;VMWare&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/try-hyper-v-powershell"&gt;Hyper-V&lt;/a&gt; all offer their own CLIs, but we'd like to use a provider-neutral tool. Hence we decided for &lt;a href="https://www.vagrantup.com"&gt;Hashicorp's Vagrant&lt;/a&gt;, an &lt;a href="https://github.com/hashicorp/vagrant"&gt;open-source&lt;/a&gt; CLI-based VM manager already equipped with providers integrated with the main hypervisors. &lt;/p&gt;

&lt;p&gt; 
  &lt;a href="https://www.vagrantup.com"&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mil9lv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.vagrantup.com/img/logo-hashicorp.svg"&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article is a quick start guide to create your first test environments using Vagrant. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#install-and-setup-vagrant"&gt;
  &lt;/a&gt;
  Install and setup Vagrant &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You can download Vagrant from the &lt;a href="https://www.vagrantup.com/downloads"&gt;download page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once the installation is complete, you can verify it by opening your favorite shell (recommending Microsoft's open-source &lt;a href="https://github.com/microsoft/terminal"&gt;Windows Terminal&lt;/a&gt;), and running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--version&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-a-new-project"&gt;
  &lt;/a&gt;
  Creating a new project &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Vagrant depends on a specific location on your workstation to store all the configuration files of your project and the virtualized disks: therefore, you need to create your own &lt;code&gt;MyVagrant\&lt;/code&gt; folder and &lt;code&gt;cd&lt;/code&gt; into it.&lt;/p&gt;

&lt;p&gt;Once you're in it, run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--minimal&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to &lt;a href="https://www.vagrantup.com/docs/cli/init"&gt;initialize&lt;/a&gt; your Vagrant project in the local folder. It will create a minimal configuration file called &lt;a href="https://www.vagrantup.com/docs/vagrantfile"&gt;Vagrantfile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Vagrantfile is a Ruby-based script containing the instructions Vagrant will use to interact with the various virtualization providers in order to create the described infrastructure.&lt;/p&gt;

&lt;p&gt;The minimal Vagrantfile created with the &lt;code&gt;init&lt;/code&gt; command is pretty simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"base"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Vagrant.configure&lt;/code&gt; block sets a specific &lt;a href="https://www.vagrantup.com/docs/vagrantfile/version"&gt;"configurator" version&lt;/a&gt;: all the next instructions will need to be included in this block.&lt;/p&gt;

&lt;p&gt;The central command (&lt;code&gt;config.vm.box&lt;/code&gt;) specifies the "box" used to create your Virtual Machine. A &lt;a href="https://www.vagrantup.com/docs/boxes"&gt;"box"&lt;/a&gt;) is a VM image - pretty much similar to the concept of &lt;a href="https://docs.docker.com/get-started/overview/#docker-objects"&gt;Docker images&lt;/a&gt; - exportable from already created VMs or downloadable from the community's &lt;a href="https://app.vagrantup.com/boxes/search"&gt;Vagrant Cloud repository&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-first-raw-vagrant-up-endraw-"&gt;
  &lt;/a&gt;
  Your first &lt;code&gt;Vagrant up&lt;/code&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you try to spin up your VM with the initial Vagrantfile, Vagrant will return an error because it doesn't know any &lt;code&gt;"base"&lt;/code&gt; box. You may replace that value with any box name available: in our example, we will try to boot a Windows Server machine, therefore we'll use the publicly available &lt;a href="https://app.vagrantup.com/StefanScherer/boxes/windows_2019"&gt;Stefan Scherer's Windows Server 2019 box&lt;/a&gt; to have a 180-days trial version of Windows Server 2019 Eval with Desktop.&lt;/p&gt;

&lt;p&gt;In case you don't have a local copy of the box, Vagrant will automatically download it from the Vagrant Cloud before creating the VM.&lt;/p&gt;

&lt;p&gt;To boot your VM, just run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;up&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we didn't specify any virtualization provider, Vagrant will use &lt;a href="https://www.virtualbox.org/"&gt;Virtualbox&lt;/a&gt; as default: if you have a different hypervisor, make sure you edit the Vagrantfile with the &lt;a href="https://www.vagrantup.com/docs/providers/configuration"&gt;appropriate settings&lt;/a&gt;. Remember then to add the &lt;code&gt;--provider=PROVIDER_NAME&lt;/code&gt; (where PROVIDER_NAME is &lt;code&gt;vmware_fusion&lt;/code&gt;, &lt;code&gt;hyperv&lt;/code&gt;, &lt;code&gt;vmware_desktop&lt;/code&gt;, &lt;code&gt;docker&lt;/code&gt;, etc) to your &lt;code&gt;vagrant up&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Vagrant will take some minutes to download the image and boot up the VM, depending on the chosen OS. If your output includes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Timed out while waiting for the machine to boot. This means that
Vagrant was unable to communicate with the guest machine within
the configured ("config.vm.boot_timeout" value) time period.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The VM has correctly started on Virtualbox nonetheless, but Vagrant won't be able to communicate with it and proceed with the following instructions, such as &lt;a href="#provisioning"&gt;provisioning&lt;/a&gt; software. Therefore, we need to add in the first part of the Vagrantfile the following properties about the &lt;a href="https://www.vagrantup.com/docs/vagrantfile/machine_settings#config-vm-communicator"&gt;communicator&lt;/a&gt; (i.e. &lt;a href="https://www.vagrantup.com/docs/vagrantfile/winrm_settings"&gt;WinRM&lt;/a&gt;) that Vagrant will use to connect to our Windows operating system:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="c1"&gt;# Additional parameters to communicate with Windows&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;boot_timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;communicator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"winrm"&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;winrm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55985&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By opening the Virtualbox GUI you may find your new VM in the list: notice that, with a Vagrantfile as minimal as the one we provided, the Virtual Machine will have a combination of the provider's and Vagrant's default properties, such as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The default VM name chosen by Vagrant follows the format &lt;code&gt;PROJECT-FOLDER_default_TIMESTAMP&lt;/code&gt;; you may want to customize it with a more descriptive hostname, such as &lt;code&gt;web&lt;/code&gt; or &lt;code&gt;db&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;==&amp;gt; default: Setting the name of the VM: MyVagrant_default_1629122422277_92221
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The VM will have a main network adapter ("Adapter 1") connected via NAT to the host:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;==&amp;gt; default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The network TCP port 22 on the host is mapped to TCP port 2222 on the guest:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;==&amp;gt; default: Forwarding ports...
    default: 22 (guest) =&amp;gt; 2222 (host) (adapter 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll see how to change the properties above in the following section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#customizing-your-vm"&gt;
  &lt;/a&gt;
  Customizing your VM &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Customizing our newborn Virtual Machine requires a little bit of &lt;a href="https://www.vagrantup.com/docs/providers/virtualbox/configuration"&gt;additional configuration&lt;/a&gt; in the Vagrantfile: some settings needs to be added in the  &lt;code&gt;config.vm&lt;/code&gt; namespace of the Vagrantfile. &lt;/p&gt;

&lt;p&gt;All the code described below must be added inside the &lt;code&gt;Vagrant.configure("2") do |config|&lt;/code&gt; section.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Some properties can be changed by configuring the &lt;code&gt;provider&lt;/code&gt;, such as the &lt;a href="https://www.vagrantup.com/docs/providers/virtualbox/configuration#virtual-machine-name"&gt;VM's name&lt;/a&gt; or the &lt;a href="https://www.vagrantup.com/docs/providers/virtualbox/configuration#gui-vs-headless"&gt;hypervisor's GUI&lt;/a&gt;. Notice that some settings don't have a specific shortcut and they will need the &lt;a href="https://www.vagrantup.com/docs/providers/virtualbox/configuration#vboxmanage-customizations"&gt;&lt;code&gt;customize&lt;/code&gt;&lt;/a&gt; property:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Customization&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;provider&lt;/span&gt; &lt;span class="s2"&gt;"virtualbox"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"my_vm"&lt;/span&gt;    &lt;span class="c1"&gt;# Sets the new VM's name&lt;/span&gt;
  &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gui&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;        &lt;span class="c1"&gt;# Enables the hypervisor's GUI&lt;/span&gt;
  &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;memory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt;     &lt;span class="c1"&gt;# Sets the VM's RAM&lt;/span&gt;
  &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;customize&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"modifyvm"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"--draganddrop"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"hosttoguest"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# Enables drag-and-drop between host and guest&lt;/span&gt;
  &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;customize&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"modifyvm"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"--clipboard"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"bidirectional"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# Enables a bidirectional clipboard between host and guest&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Additional ports can be mapped between host and guest with the &lt;code&gt;config.vm.network&lt;/code&gt; settings (additional details on networking can be found &lt;a href="https://www.vagrantup.com/docs/networking"&gt;here&lt;/a&gt;)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="c1"&gt;# Customization&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;network&lt;/span&gt; &lt;span class="ss"&gt;:forwarded_port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;guest: &lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;host: &lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="s2"&gt;"http"&lt;/span&gt;  &lt;span class="c1"&gt;# Map host's port 8080 to guest's port 80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;By default, Vagrant will share (or &lt;a href="https://www.vagrantup.com/docs/synced-folders"&gt;"sync"&lt;/a&gt;) your project directory - i.e. the directory with the Vagrantfile - to &lt;code&gt;/vagrant&lt;/code&gt; on the guest. You can set additional synced folders with:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="c1"&gt;# Customization&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;synced_folder&lt;/span&gt; &lt;span class="s2"&gt;"app/wwwroot"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"src/"&lt;/span&gt;  &lt;span class="c1"&gt;# Map the host's "src/" folder to the guest's "/app/wwwroot"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And many more!&lt;/p&gt;

&lt;p&gt;After each change, remember to run &lt;code&gt;vagrant validate&lt;/code&gt; to check the Vagrantfile for any syntax error.&lt;/p&gt;

&lt;p&gt;If the validation is successful, run &lt;code&gt;vagrant reload&lt;/code&gt; to reboot your VM and apply all the changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#provisioning"&gt;
  &lt;/a&gt;
  Provisioning &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;So now we have a ready VM, but what if we need to also install software or change the configuration during the boot process? This practice is called &lt;a href="https://www.vagrantup.com/docs/provisioning"&gt;provisioning&lt;/a&gt; and it can be attached to the &lt;code&gt;vagrant up&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;There are several provisioners integrated with Vagrant, such as &lt;a href="https://www.vagrantup.com/docs/provisioning/ansible"&gt;Ansible&lt;/a&gt;, &lt;a href="https://www.vagrantup.com/docs/provisioning/puppet_apply"&gt;Puppet&lt;/a&gt;, &lt;a href="https://www.vagrantup.com/docs/provisioning/docker"&gt;Docker&lt;/a&gt; and even simply uploading &lt;a href="https://www.vagrantup.com/docs/provisioning/file"&gt;files&lt;/a&gt; to the VM.&lt;/p&gt;

&lt;p&gt;In our case, let's try to set up a development environment by installing a package manager (in our case &lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt;) and then an IDE (what's better than &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;?), and let's try to do it with the &lt;a href="https://www.vagrantup.com/docs/provisioning/shell"&gt;shell&lt;/a&gt; provisioner, i.e. uploading and running a shell script.&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;scripts/&lt;/code&gt; folder in your project and add the &lt;code&gt;InstallChocolatey.ps1&lt;/code&gt; PowerShell script (you may find it on the official &lt;a href="https://chocolatey.org/install#individual"&gt;Chocolatey install page&lt;/a&gt;, please be sure to read Chocolatey's disclaimer about downloading scripts from the Internet ❗) in it:&lt;/p&gt;

&lt;p&gt;In the config block of your Vagrantfile, add&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="c1"&gt;# Provisioning&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;provision&lt;/span&gt; &lt;span class="s2"&gt;"shell"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;path: &lt;/span&gt;&lt;span class="s2"&gt;"scripts/InstallChocolatey.ps1"&lt;/span&gt;  &lt;span class="c1"&gt;# Run the external script to install Chocolatey&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;provision&lt;/span&gt; &lt;span class="s2"&gt;"shell"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;inline: &lt;/span&gt;&lt;span class="s2"&gt;"choco install vscode --yes"&lt;/span&gt;   &lt;span class="c1"&gt;# Run the inline script to install VSCode via Chocolatey&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you &lt;code&gt;vagrant reload&lt;/code&gt; your VM, the provisioning will be performed at the end of the boot. The first shell script (called from an external file whose &lt;code&gt;path&lt;/code&gt; is provided) will download and install Chocolatey, the second &lt;code&gt;inline&lt;/code&gt; script will force the download and installation of the &lt;a href="https://community.chocolatey.org/packages/vscode"&gt;Visual Studio Code's choco package&lt;/a&gt; from the Chocolatey community repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In just a few minutes, we were able to spin up a Virtual Machine with our desired operating system and with some software installed (a package manager and an IDE) and now we're ready to write code and start some tests! 🎉 🎊&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4BwWhve9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f9yrgyjabqn9nhpc8fg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4BwWhve9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f9yrgyjabqn9nhpc8fg.jpg" alt="Our new virtual test environment!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Plus, our IaC files (i.e. the Vagrantfile and the corresponding PowerShell scripts) now can be stored in a &lt;code&gt;git&lt;/code&gt; repository, thus taking advantage of all the source control features: basically we have a &lt;strong&gt;versioned infrastructure&lt;/strong&gt;, repeatable and exportable in any settings. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/sannae/07cd210478336f6f8aa571636f33b06b"&gt;Here&lt;/a&gt; you can find the code mentioned in this post.&lt;/p&gt;

&lt;p&gt;See you next time! 👋&lt;/p&gt;

</description>
      <category>vagrant</category>
      <category>windows</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Building A Motivating Discord Bot In Node.js</title>
      <author>Chris Bongers</author>
      <pubDate>Thu, 19 Aug 2021 07:11:22 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/building-a-motivating-discord-bot-in-node-js-2jc9</link>
      <guid>https://dev.to/dailydevtips1/building-a-motivating-discord-bot-in-node-js-2jc9</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article is originally posted on the &lt;a href="https://adevait.com/nodejs/building-motivating-discord-bot-nodejs"&gt;Adeva blog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Teams making it their own, gamers living there online, friends doing their online hangouts. Yes, we're talking about Discord, the communication tool with more than a quarter-billion users.&lt;/p&gt;

&lt;p&gt;No wonder you see many people talking about it, making tools work with it, and notice integrations pop up everywhere.&lt;/p&gt;

&lt;p&gt;And we're going to be a part of that because today, we'll learn how to make our very first Discord bot!&lt;/p&gt;

&lt;p&gt;And not any bot, a motivating bot for when we feel down. Because developer happiness is very important ❤️.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To get started with this project, you will need the following knowledge and tools.&lt;/p&gt;

&lt;p&gt;Using the command line&lt;br&gt;
Discord client setup and ready to go&lt;br&gt;
Basic knowledge of Node.js applications&lt;br&gt;
Don't worry, it's not too technical and explained step-by-step for you.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-a-discord-bot"&gt;
  &lt;/a&gt;
  Setting Up a Discord Bot
&lt;/h2&gt;

&lt;p&gt;Let's start with the configuration side. We'll be setting up a Discord bot, but let's make our test server for our new bot before we get there.&lt;/p&gt;

&lt;p&gt;Open your Discord client and click the plus icon:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EjppVx8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297672863/pNWnAq6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EjppVx8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297672863/pNWnAq6z8.png" alt="new Discord client"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please fill out the details as to what server you'll be creating. For this article, it doesn't matter what you choose.&lt;/p&gt;

&lt;p&gt;Once that is done, and your server is up and running. Then we can head over to the &lt;a href="https://discord.com/login?redirect_to=%2Fdevelopers%2Fapplications"&gt;Discord Developer Portal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Click on the New application button on the top right of the screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mzGZoW6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297717612/0vLaw6B6k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mzGZoW6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297717612/0vLaw6B6k.png" alt="New Discord application"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the pop-up, fill out whatever your app should be named. I used &lt;code&gt;discord-test-bot&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the left menu, click on the &lt;code&gt;Bot&lt;/code&gt; item, and click the &lt;code&gt;Add Bot&lt;/code&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RUsUPaPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297757770/jl9El4h-k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RUsUPaPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297757770/jl9El4h-k.png" alt="Discord new bot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can then give this bot an image and name, making it friendly and personal!&lt;/p&gt;

&lt;p&gt;Another critical step is to make sure we give the app and our bot the correct rights.&lt;br&gt;
To manage the rights, head over to the Oauth2 section.&lt;/p&gt;

&lt;p&gt;For scopes, turn on the &lt;code&gt;Bot&lt;/code&gt; scope. Then scroll down and select &lt;code&gt;Send Messages&lt;/code&gt; and &lt;code&gt;Read Message History&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--abS51d8T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297794141/FvKi6NMGi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--abS51d8T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297794141/FvKi6NMGi.png" alt="Bot access rights"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we need to add this bot to the server we just created. We can do this by copying the link under the scopes section and opening that in a separate window.&lt;/p&gt;

&lt;p&gt;It will pop up a select, where you can choose what server you like to add the bot to:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NflBdynK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297820949/Mle_UnH7M.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NflBdynK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297820949/Mle_UnH7M.png" alt="Add bot to Discord channel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last thing we need from the developer portal is the token. We can head back to the Bot menu item and click the copy button on the token part:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GBjaJbg7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297849052/Ma4ecsjjF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GBjaJbg7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629297849052/Ma4ecsjjF.png" alt="Copy Discord bot token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll use this token to give our bot access to do something.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-nodejs-discord-script"&gt;
  &lt;/a&gt;
  Creating the Node.js Discord Script
&lt;/h2&gt;

&lt;p&gt;Alright, now that this admin part is done, let's start on our Node.js script.&lt;/p&gt;

&lt;p&gt;Open your favorite terminal and create a new project directory and initialize node.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;discord-bot &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;discord-bot
npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: The -y parameter answers all questions of the CLI with yes (saves us some enters).&lt;/p&gt;

&lt;p&gt;Next, we'll be using a couple of NPM packages, so let's install those using our terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;axios discord.js dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will install the following packages, which we'll use for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;axios&lt;/code&gt;: Making http requests to the quotes API&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;discord.js&lt;/code&gt;: The Discord NPM package&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dotenv&lt;/code&gt;: Enables environmental config files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this in place, let's create our &lt;code&gt;.env&lt;/code&gt; file first. This file will hold the Discord bot token we just copied.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;YOUR_TOKEN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: Replace YOUR_TOKEN with the actual token you got from the bot setup.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, create an &lt;code&gt;index.js&lt;/code&gt; file in your editor. The first thing we'll add is all our config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Discord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;discord.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TOKEN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Discord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As mentioned, we won't make an ordinary bot. Our bot will be responding to people who seem to be sad on Discord.&lt;/p&gt;

&lt;p&gt;For this, we'll create an array of words that sound sad. You can, of course, enhance this list to your wish.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sad&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;angry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;unhappy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;miserable&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;down&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The idea is that when a user uses any of those words, we lift them with a quote.&lt;/p&gt;

&lt;p&gt;The next part will be to log in to the bot. This is something the Discord NPM package handles for us, so we have to call the following line of code.&lt;/p&gt;

&lt;p&gt;In this line, we call the login function of the bot and pass our token to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TOKEN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can also see if our bot is connected by executing the following script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Logged in as &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But more importantly, we want to listen to messages being sent on the Discord server and react to those.&lt;/p&gt;

&lt;p&gt;To listen to messages, we use the following function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Execute code&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to add a check to see if the message was not by any bot. Else we might create an infinite loop 👀.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That line will stop the function when a bot posts a message.&lt;/p&gt;

&lt;p&gt;The next part will be to see if the user used any of our target words.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foundWord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foundWord&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Found the word &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;foundWord&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A quick recap for what's going on, we use the JavaScript array method “find“ to loop over each of our target words. When the message includes that word, it breaks the find method and will return that word.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User types message: "I'm angry and sad at the same time"&lt;/li&gt;
&lt;li&gt;We'll loop over our targets&lt;/li&gt;
&lt;li&gt;The first hit is sad&lt;/li&gt;
&lt;li&gt;We found the word sad&lt;/li&gt;
&lt;li&gt;Console logs: "Found the word sad"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is enough for now, we could check the other way around, but this is the more efficient solution.&lt;/p&gt;

&lt;p&gt;The next step is to query a quotes API and return a random quote to uplift the person.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://type.fit/api/quotes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// API response inside response object&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an array, so let's try and get a random item from this array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomQuote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bear with me here. We define a new variable and call the response.data array, we then pass the number of the item we want to retrieve.&lt;/p&gt;

&lt;p&gt;As the variable, we send the Math where we get a random number with a max of all items in the object.&lt;/p&gt;

&lt;p&gt;The last thing we need to do is respond to this user with a nice message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;`Don't be &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;foundWord&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;randomQuote&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;once said:\n&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;randomQuote&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, let's run the script and test it out!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ND5J9jq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629298149918/INSrPbX1Z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ND5J9jq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629298149918/INSrPbX1Z.png" alt="Discord chatbot responding with uplifting messages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And there we go! Our Discord bot is responding with an uplifting message. The message will change every time someone mentions one of our trigger words. If you're looking for the source code, I hosted the code on &lt;a href="https://github.com/rebelchris/node-discord-bot"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Weekly web development resources #85</title>
      <author>Vincent Will</author>
      <pubDate>Thu, 19 Aug 2021 06:46:57 +0000</pubDate>
      <link>https://dev.to/vincenius/weekly-web-development-resources-85-1ebd</link>
      <guid>https://dev.to/vincenius/weekly-web-development-resources-85-1ebd</guid>
      <description>

&lt;h2&gt;
  &lt;a href="#blokada"&gt;
  &lt;/a&gt;
  &lt;a href="https://blokada.org/"&gt;Blokada&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://blokada.org/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OMq0o8mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/85/blokada.jpg" alt="Blokada"&gt;&lt;/a&gt;&lt;br&gt;
A free, open-source app to block ads and trackers on Android and iOS.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#css-modules"&gt;
  &lt;/a&gt;
  &lt;a href="https://css-tricks.com/css-modules-the-native-ones/"&gt;CSS Modules&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/css-modules-the-native-ones/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b6KtlFBe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/85/css-modules.jpg" alt="CSS Modules"&gt;&lt;/a&gt;&lt;br&gt;
An article about the native browser feature CSS Module Scripts.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-state-of-mobile-first-and-desktop-first"&gt;
  &lt;/a&gt;
  &lt;a href="https://ishadeed.com/article/the-state-of-mobile-first-and-desktop-first/"&gt;The State Of Mobile First and Desktop First&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://ishadeed.com/article/the-state-of-mobile-first-and-desktop-first/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FjfsMvZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/85/mobile-first.jpg" alt="The State Of Mobile First and Desktop First"&gt;&lt;/a&gt;&lt;br&gt;
A nice article by Ahmad Shadeed.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#openbydesign"&gt;
  &lt;/a&gt;
  &lt;a href="https://openby.design/"&gt;Openby.design&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://openby.design/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dt1DwAPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/85/openbydesign.jpg" alt="Openby.design"&gt;&lt;/a&gt;&lt;br&gt;
A website for free and open-source design assets.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#progressive-tooling"&gt;
  &lt;/a&gt;
  &lt;a href="https://progressivetooling.com/"&gt;Progressive Tooling&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://progressivetooling.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6F7M0vSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/85/progressive-tooling.jpg" alt="Progressive Tooling"&gt;&lt;/a&gt;&lt;br&gt;
A list of community-built, third-party tools that can be used to improve page performance.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#psst"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/jpochyla/psst"&gt;psst&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/jpochyla/psst"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gyV_UaL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/85/psst.jpg" alt="psst"&gt;&lt;/a&gt;&lt;br&gt;
Fast and multi-platform Spotify client with native GUI.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#daisyui"&gt;
  &lt;/a&gt;
  &lt;a href="https://daisyui.com/"&gt;daisyUI&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://daisyui.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PqgLBZl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/85/daisyUi.jpg" alt="daisyUI"&gt;&lt;/a&gt;&lt;br&gt;
A collection of Tailwind CSS components, which are customizable and themeable.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#imba"&gt;
  &lt;/a&gt;
  &lt;a href="https://imba.io/"&gt;Imba&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://imba.io/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y8OcYN7E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/85/imba.jpg" alt="Imba"&gt;&lt;/a&gt;&lt;br&gt;
A programming language for building web applications with great performance.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#100-underlineoverlay-animations"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/afif/adding-100-underline-overlay-animations-the-impressive-css-collection-1a93"&gt;100 underline/overlay animations&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/afif/adding-100-underline-overlay-animations-the-impressive-css-collection-1a93"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fdaSPO9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/85/hover.jpg" alt="100 underline/overlay animations"&gt;&lt;/a&gt;&lt;br&gt;
A nice CSS collection of animations without SVG, JavaScript and keyframes.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#view-source-on-mobile"&gt;
  &lt;/a&gt;
  &lt;a href="https://css-tricks.com/view-source-on-mobile/"&gt;View Source (on Mobile)&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/view-source-on-mobile/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jmlwm-jl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/85/view-source-mobile.jpg" alt="View Source (on Mobile)"&gt;&lt;/a&gt;&lt;br&gt;
An article on how to see the  HTML source while using a mobile browser.&lt;/p&gt;




&lt;p&gt;To see all the weeklies check: &lt;a href="https://wweb.dev/weekly"&gt;wweb.dev/weekly&lt;/a&gt;&lt;/p&gt;

</description>
      <category>weekly</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Getting Started with Systems Programming with Rust (Part 2)</title>
      <author>Beka Modebadze</author>
      <pubDate>Thu, 19 Aug 2021 06:39:14 +0000</pubDate>
      <link>https://dev.to/bexxmodd/getting-started-with-systems-programming-with-rust-part-2-2lei</link>
      <guid>https://dev.to/bexxmodd/getting-started-with-systems-programming-with-rust-part-2-2lei</guid>
      <description>&lt;h2&gt; Building a Mini-Shell &lt;/h2&gt;



&lt;p&gt;
    In the introductory Part 1, we discussed what system processes are, how to spawn them, and how to pass commands and execute them. If you want to review this material first you can 
    &lt;a href="https://bexxmodd.herokuapp.com/post/1/"&gt;click here.&lt;/a&gt;
&lt;/p&gt;



&lt;p&gt;
    In this section we’ll learn:

    &lt;/p&gt;
&lt;ul&gt;- What are system signals and how to handle them.&lt;/ul&gt;
    &lt;ul&gt;- What are stdout, stdin, and stderr, and how to use them efficiently.&lt;/ul&gt;
    &lt;ul&gt;- Writing to stdout and reading from stdin, instead of printing and what’s the advantage of doing so.&lt;/ul&gt;
    &lt;ul&gt;- Managing parent and child processes and their execution order.&lt;/ul&gt;




&lt;p&gt;
    To demonstrate the above-listed topics in practice, we’ll be building a UNIX mini-shell, which will be able to take commands from a user in the terminal and execute them. The program will also handle some invalid commands and deal with stuck programs gracefully.
&lt;/p&gt;



&lt;h2&gt;stdin, stdout, and stderr&lt;/h2&gt;

&lt;p&gt;
    Probably you are familiar with what streams are in computing, if not just like water streams, it refers to the flow of data from source to an endpoint. Streams allow connecting commands, processes, files, etc. There are three special streams:
&lt;/p&gt;




&lt;ul&gt;- stdin (Standard Input): which takes text as an input.&lt;/ul&gt;
    &lt;ul&gt;- stdout (Standard Output): stores text output in the stdout stream.&lt;/ul&gt;
    &lt;ul&gt;- stderr (Standard Error): When an error occurs during a stream the error message is stored in this stream.&lt;/ul&gt;




&lt;p&gt;
The Linux system is file-oriented. This means nearly all streams are treated as files, and those streams are processed based on the unique identifier code that each file type has. For stdio (collection of standard output, input, and error) assigned values are 0 for stdin, 1 for stdout, and 2 for stderr. If we want to read a stream of text from the command line, in C we use the function &lt;code&gt;read()&lt;/code&gt; and supply code 0 as one of the arguments for stdin (Figure 1-a).
&lt;/p&gt;




&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BUHx0iu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2400/1%2Ay3_tArgpKbZp1CiR5MpKeg.png" alt="centered image"&gt;&lt;p&gt;Figure 1-a. Stdin Stdout &amp;amp; Stderr diagram&lt;/p&gt;
&lt;/center&gt;



&lt;p&gt;
    Reading and writing from &lt;code&gt;stdio&lt;/code&gt; is a little bit different in Rust, but fundamentals remain the same. To better demonstrate their use we’ll start writing code for our mini-shell program. Initially, we’ll create a loop that will be asking the user to type in a command that the system will execute. The first two functionalities we need to create are writing to stdout and reading from stdin.
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c"&gt;/// flushes text buffer to the stdout&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;write_to_stdout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="nf"&gt;.as_ref&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;// flush to the terminal&lt;/span&gt;
    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;
    We’ll use a standard &lt;code&gt;io&lt;/code&gt;&amp;gt; module to write to the terminal. Instead of passing &lt;code&gt;String&lt;/code&gt; by copy, the function &lt;code&gt;write_to_stdout()&lt;/code&gt; takes a reference to a string slice as an argument. The &lt;code&gt;str&lt;/code&gt; is different from &lt;code&gt;String&lt;/code&gt;. It’s what Rust refers to as a slice, is a reference to a part of a &lt;code&gt;String&lt;/code&gt;. If you want to better understand the difference between those two, I’d recommend reading &lt;a href="https://doc.rust-lang.org/nightly/book/ch04-01-what-is-ownership.html"&gt;chapter 4 from Rust's official book.&lt;/a&gt;
&lt;/p&gt;



&lt;p&gt;
    The &lt;code&gt;write_to_stdout()&lt;/code&gt; function returns &lt;code&gt;Result&lt;/code&gt; object which can be &lt;code&gt;Ok&lt;/code&gt; or &lt;code&gt;Err&lt;/code&gt;. As those names suggest if everything goes as planned we’ll return &lt;code&gt;Ok&lt;/code&gt; otherwise &lt;code&gt;Err&lt;/code&gt; is returned. This procedure is so common in Rust that to return &lt;code&gt;Err&lt;/code&gt; we have a special symbol &lt;code&gt;?&lt;/code&gt; at the end of the function call that can end up in error.
&lt;/p&gt;



&lt;p&gt;
    Inside the function, we call a &lt;code&gt;write()&lt;/code&gt; function that fills the text buffer of the &lt;code&gt;stdout&lt;/code&gt; and then we flush text on the screen. Inside &lt;code&gt;write()&lt;/code&gt; we usa &lt;code&gt;as_ref()&lt;/code&gt; method which converts string slice into an ASCII byte literal, as this is what the above-mentioned function expects as an argument.
&lt;/p&gt;



&lt;p&gt;
    Next, we need to build a function that will read the user inputted command, and process it. For this, we’ll write a custom function &lt;code&gt;get_user_command()&lt;/code&gt; that returns &lt;code&gt;String&lt;/code&gt;.
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;/// fetch the user inputted command from terminal&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_user_command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.read_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c"&gt;// not receommended&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="nf"&gt;.ends_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="nf"&gt;.pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c"&gt;// remove last char&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;input&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;
    The function reads a full line from the terminal and copies a value into an &lt;code&gt;input&lt;/code&gt; variable. The &lt;code&gt;read_line()&lt;/code&gt; takes mutable reference of the input &lt;code&gt;String&lt;/code&gt; variable, dereferences inside the function call, writes user-supplied command, and returns &lt;code&gt;Result&lt;/code&gt;. When we read a line from stdin it’s EOL (end of line) terminated, which includes the &lt;code&gt;\n&lt;/code&gt; control character at the end and we need to get rid of it before returning input.
&lt;/p&gt;



&lt;p&gt;
    Finally, we glue our input and output functions together with our mini-shell program.
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;run_shell&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;run_shell&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;shellname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"ghost# "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;write_to_stdout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;shellname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;eprintln!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unable to write to stdout : {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nn"&gt;process&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cmnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;get_user_command&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;process&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cmnd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.status&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;eprintln!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}: command not found!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;
    In our &lt;code&gt;main()&lt;/code&gt; function we run a loop that prints the shell name to the terminal screen and waits for the user to input the command. The &lt;code&gt;run_shell()&lt;/code&gt; writes to stdout using previously defined function by us and handles an error if it occurs during printing. If something goes wrong it notifies a user about it and exits the program with error code 1 (Unsuccessful compilation).
&lt;/p&gt;



&lt;p&gt;
    Next, it reads the user-supplied command and passes that command to a newly created process. Then we check the status of the command execution, and if the command was unsuccessful we notify a user that the “command not found” and instead of exiting here, we return to the loop of prompting the user for an input.
&lt;/p&gt;



&lt;p&gt;
    Run the program with &lt;code&gt;cargo run&lt;/code&gt; and we should see output similar to this:
&lt;/p&gt;




&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YXyZywJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2400/1%2ARYlhw2gMUvCkS3eJpvUD3w.png" alt="centered image"&gt;
&lt;/center&gt;



&lt;p&gt;
    A good question to ask here is why we use to read and write functions instead of simply printing to the screen. The reason behind this is that directives like &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt; are what’s called Async-Signal Safe functions, while C's &lt;code&gt;printf&lt;/code&gt; is not. They can be safely called within a signal handler (which we’ll review next).
&lt;/p&gt;



&lt;p&gt;
    The functions that are Async-Signal Safe are guaranteed not to be interrupted or interfered with when some signal is sent. For example, if we are in the middle of &lt;code&gt;println!()&lt;/code&gt; call and a signal occurs whose handler itself calls &lt;code&gt;println!()&lt;/code&gt; can result in undefined behavior. Because in this case, the output of the two &lt;code&gt;println!()&lt;/code&gt; statements would be intertwined.
&lt;/p&gt;



&lt;h2&gt;System Signals&lt;/h2&gt;

&lt;p&gt;
    To improve our mini-shell we have to handle system signals. Signals in the UNIX environment are sort of notifications that are sent by an operating system to a process to notify about a certain event, which usually ends up interrupting the process. Each signal has a unique name and integer value assigned to it. You can check the full list of signals of your system by typing &lt;code&gt;kill -l&lt;/code&gt; in your terminal.
&lt;/p&gt;



&lt;p&gt;
    By default, each signal has its handler defined which is a function that is called when a certain signal arrives. We can modify the handling of those signals (which we’ll do for our mini-shell project). However, some of the signal handlers can’t be modified.
&lt;/p&gt;



&lt;p&gt;
    For our project will take a look at four following signals:
&lt;/p&gt;



&lt;ul&gt;- &lt;code&gt;SIGINT&lt;/code&gt; which is called by pressing &lt;b&gt;Ctrl+C&lt;/b&gt; and causes the system to send a &lt;b&gt;INT&lt;/b&gt; signal to the running process. By default this causes the processes to terminate immediately. The Signal code for &lt;code&gt;SIGINT&lt;/code&gt; is 2.&lt;/ul&gt;

&lt;ul&gt;- &lt;code&gt;SIGQUIT&lt;/code&gt; is called by pressing &lt;b&gt;Ctrl+\&lt;/b&gt; and will send the &lt;b&gt;QUIT&lt;/b&gt; signal to the running process. This also terminates the process but more ungracefully. However, cleanup of absolutely necessary resources that need to be cleaned is performed. The assigned code is 3&lt;/ul&gt;

&lt;ul&gt;
    - &lt;code&gt;SIGALRM&lt;/code&gt; is like an alarm clock with a countdown in seconds. If the seconds' count hits zero, any pending alarm is canceled and the &lt;code&gt;SIGALRM&lt;/code&gt; signal is sent to the process. The alarm code is 14.
&lt;/ul&gt;

&lt;ul&gt;- &lt;code&gt;SIGKILL&lt;/code&gt; is the most forceful signal sent by the system which forces the process to halt. This signal can’t be handled manually by a user but the system will still perform a cleanup after process termination. It has a code 9.&lt;/ul&gt;



&lt;p&gt;
    Now, it’s time to check how we’ll be handling the above-listed signals in Rust (except &lt;code&gt;SIGKILL&lt;/code&gt; for which we can’t change default behavior). For example, if you run &lt;code&gt;cat&lt;/code&gt; command in the Linux terminal without a file argument it will get stuck in an infinite loop. When this happens in our mini-shell we’ll rewire the &lt;code&gt;SIGINT&lt;/code&gt; signal so it will forward the interrupt signal to the child process. This will only terminate the running loop but will keep our shell program running.
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;signal_hook&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;consts&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;error&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;nix&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Signal&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c"&gt;/// Registers UNIX system signals&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;register_signal_handlers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Signals&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// signal execution is forwarded to the child process&lt;/span&gt;
    &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="nf"&gt;.forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;SIGINT&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nd"&gt;assert_ne!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c"&gt;// assert that the signal is sent&lt;/span&gt;
                &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;
    First, we create an iterator of signals which stores a vector of signal references. Here we indicate which signals are expected to be handled. Next, we need to forward the signal to the child process, the one which is actively running, and perform desired behavior on it. This is done by spawning a new thread that returns a &lt;code&gt;JoinHandler&lt;/code&gt;.
&lt;/p&gt;



&lt;p&gt;
    This handler will detach a child process after being dropped. This means when &lt;code&gt;SIGINT&lt;/code&gt; arrives at the child's process, that process will be separated from the parent and it will only interrupt whatever the child process is doing, while the parent process will continue running. If there is no child process in execution it will do nothing.
&lt;/p&gt;



&lt;p&gt;
    We use &lt;code&gt;forever()&lt;/code&gt; function on signals iterator which returns an infinite loop over arriving signals. As soon as the signal arrives it will be evaluated with a match-case and if it matches &lt;code&gt;SIGINT&lt;/code&gt; it will assert that signal was sent successfully. For any other signal, the iterator will continue to wait for the next signal.
&lt;/p&gt;



&lt;p&gt;
    Since we rewired the &lt;code&gt;SIGINT&lt;/code&gt; signal to only handle child processes, what if we want to exit the program completely? We’ll handle a different signal and let it print “Goodbye” to the stdout and exit graciously. For this one, we’ll use the &lt;code&gt;SIGQUIT&lt;/code&gt; signal, which can be sent from the keyboard by pressing &lt;b&gt;Ctrl + \&lt;/b&gt;.
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;signal_hook&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;consts&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SIGQUIT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;// .. previous function introduction and matching ..&lt;/span&gt;

        &lt;span class="n"&gt;SIGQUIT&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;write_to_stdout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Goodbye!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nn"&gt;process&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;

&lt;span class="c"&gt;// .. rest of the function ..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;
    When the &lt;code&gt;SIGQUIT&lt;/code&gt; signal is called it’s matched in our iterator and this calls our &lt;code&gt;write_to_stdout()&lt;/code&gt; function. Then program exits with code 0, which in Linux stands for a successful compilation. Notice we are importing &lt;code&gt;SIGNAL&lt;/code&gt; consts from &lt;code&gt;signal_hook&lt;/code&gt; library, which is a library for easier Unix signal handling.
&lt;/p&gt;



&lt;p&gt;
    Finally, we’ll add a small feature to our program. The user will supply an integer at the program's start. This number will be used as a countdown for the program’s execution time. For example, if a user supplies 5, this will invoke &lt;code&gt;alarm(5)&lt;/code&gt; when the child process is started. If a function isn’t complete when the countdown ends, our manually defined &lt;code&gt;SIGALRM&lt;/code&gt; signal will kill it and return the program to the initial state.
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;signal_hook&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;consts&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SIGALRM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;nix&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Signal&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;nix&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;unistd&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;alarm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pid&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c"&gt;/// alarm will be called from `execute_shell(timeout: u32)`&lt;/span&gt;
&lt;span class="c"&gt;/// after function collects user input it calls `alarm::set(timeout)`&lt;/span&gt;

&lt;span class="c"&gt;// .. beginning of the register_signal_handlers function ..&lt;/span&gt;

        &lt;span class="n"&gt;SIGALRM&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;write_to_stdout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This's taking too long...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="c"&gt;// when alarm goes off it kills child process&lt;/span&gt;
            &lt;span class="nn"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Pid&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nn"&gt;Signal&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;

&lt;span class="c"&gt;// .. rest of the function ..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;
    When &lt;code&gt;SIGALRM&lt;/code&gt; is matched, first, it will write to the stdout, and next, it does a very interesting thing. It will use the &lt;code&gt;signal::kill()&lt;/code&gt; function to send the &lt;code&gt;SIGINT&lt;/code&gt; signal on a process it operates. But since the same function handles &lt;code&gt;SIGINT&lt;/code&gt; by forwarding it to a child process it will only kill the child process and return back to the main program of running mini-shell. Full function:
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;signal_hook&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;consts&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGALRM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGQUIT&lt;/span&gt;&lt;span class="p"&gt;}};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;error&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;nix&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Signal&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;nix&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;unistd&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;alarm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pid&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c"&gt;/// Register UNIX system signals&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;register_signal_handlers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Signals&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGALRM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGQUIT&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;// signal execution is forwarded to the child process&lt;/span&gt;
    &lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="nf"&gt;.forever&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;SIGALRM&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nf"&gt;write_to_stdout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This's taking too long...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                    &lt;span class="c"&gt;// when alarm goes off it kills child process&lt;/span&gt;
                    &lt;span class="nn"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Pid&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nn"&gt;Signal&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="n"&gt;SIGQUIT&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nf"&gt;write_to_stdout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Good bye!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c"&gt;// not safe&lt;/span&gt;
                    &lt;span class="nn"&gt;process&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="n"&gt;SIGINT&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nd"&gt;assert_ne!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c"&gt;// assert that the signal is sent&lt;/span&gt;
                &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;
    These should be an expected outcome if you run our mini-shell through the terminal:
&lt;/p&gt;




&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ImOGYa19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2400/1%2Apn1CzSKuvPAH2MJtg115ZA.png" alt="centered image"&gt;
&lt;/center&gt;



&lt;p&gt;
    You can find a full code of the mini-shell, which includes some additional features besides covered here, in &lt;a href="https://github.com/bexxmodd/systems-with-rust/blob/master/src/main.rs"&gt;this GitHub repository&lt;/a&gt;.
&lt;/p&gt;



&lt;h2&gt;Summary&lt;/h2&gt;



&lt;p&gt;
    Today we learned what are stdin, stdout, and stderr, and how to use them properly. We looked at the common UNIX system signals and manually handled three of them to fit the needs of our mini-shell program. The combined knowledge from &lt;a href="https://bexxmodd.herokuapp.com/post/1/"&gt;Part 1&lt;/a&gt; allowed us to build a program that executes system commands and handles system signals safely and fast thanks to the Rust language.
&lt;/p&gt;



&lt;p&gt;
    In the upcoming parts, we’ll take a look at communicating between processes between pipes and review concurrency. We’ll demonstrate why Rust can be the best choice for this.
&lt;/p&gt;





&lt;center&gt;...&lt;/center&gt;

</description>
      <category>rust</category>
      <category>linux</category>
      <category>systems</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
