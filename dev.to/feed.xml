<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The meaning of .this</title>
      <author>Oscar Ore</author>
      <pubDate>Mon, 29 Nov 2021 01:27:03 +0000</pubDate>
      <link>https://dev.to/oscarore007/the-meaning-of-this-h4i</link>
      <guid>https://dev.to/oscarore007/the-meaning-of-this-h4i</guid>
      <description>&lt;p&gt;Let's talk about this. &lt;em&gt;This&lt;/em&gt; is determined by the object that it belongs to.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#contexts-in-which-the-this-keyword-can-be-used"&gt;
  &lt;/a&gt;
  Contexts in which the 'this' keyword can be used
&lt;/h1&gt;

&lt;p&gt;The definition of this as the property of an execution context is much more accurate because depending on how it is called at runtime, 'this' can refer to many things. Let's dive deeper.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;this&lt;/em&gt; in the method of an object&lt;br&gt;
First, a method is used to refer to a function that is a member of an object. All methods are functions, but not all functions are methods. Now, when the 'this' keyword is used inside a method, it refers to the owner of the method it is used in. Let's use the example defined above to take a deeper look at 'this' in this context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;greet : function() {
return "Hi! I am " + this.firstName + " " + this.  lastName + ", a bell boy and I am at your service";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, this which is used inside the greet() method refers to the bellBoy object, which is the owner of that greet() method.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;this&lt;/em&gt; in the Global Context&lt;br&gt;
When the 'this' keyword is used alone, not inside any function or better referred to as being used in the global context, the keyword refers to the global object. The global object refers to the owner of the 'this' keyword in this case. When it is in a browser window, this global object refers to the window object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let y = this
console.log(y)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;this&lt;/em&gt; in the global context.&lt;/p&gt;

&lt;p&gt;Since that is true, if you make a strict comparison between the value of &lt;em&gt;this&lt;/em&gt; and the window object, we get the boolean value of true.&lt;/p&gt;

&lt;p&gt;If you run this javascript file inside your computer using a tool like node, &lt;em&gt;this&lt;/em&gt; keyword refers to an object of type of object.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;this&lt;/em&gt; in a function&lt;br&gt;
Note, we are talking about what the keyword 'this' refers to when it is used in an ordinary function, one not affiliated with any object. Just a function is standing on its own. In such a javascript object, the default value of 'this' is the owner of the function. If the code is not in strict mode and it is not been set to a member of an object, then this defaults to the global object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function function1() {
return this
}
function1() === window
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, the value of the this keyword as used inside this function refers to the window object. This is why the output of the string comparison between function1 and the window object will equal to true because they hold the exact same value.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;this&lt;/em&gt; in a function (Strict Mode)&lt;br&gt;
When in strict mode however, Javascript does not permit default binding, and because of that, it is undefined. Put simply strict mode prevents sloppy code. Thinking it from a programmers' point of view, there is most likely no good reason to want to access the value of this in a function since it will return the window object. In most cases, we access the this keyword because we want to get some other properties from its owner. Strict mode enforces this. So when in this mode, 'this' is undefined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"use  strict"
function function1() {
return this
}
function1() === window

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As can be seen in the above example, in the strict mode, the value of this inside a function is undefined.&lt;/p&gt;

&lt;p&gt;There are other ways &lt;em&gt;this&lt;/em&gt; is used in JavaScript, here are some more options: &lt;br&gt;
&lt;em&gt;this&lt;/em&gt; in classes&lt;br&gt;
&lt;em&gt;this&lt;/em&gt; as a constructor&lt;br&gt;
&lt;em&gt;this&lt;/em&gt; with a getter or setter method&lt;br&gt;
&lt;em&gt;this&lt;/em&gt; on an object's prototype chain&lt;br&gt;
&lt;em&gt;this&lt;/em&gt; in arrow functions&lt;/p&gt;

&lt;p&gt;Happy Coding! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Aprendendo em público: blockchain e criptomoedas</title>
      <author>Weiglas</author>
      <pubDate>Mon, 29 Nov 2021 01:12:13 +0000</pubDate>
      <link>https://dev.to/mrsaxobeat/aprendendo-em-publico-blockchain-e-criptomoedas-19ll</link>
      <guid>https://dev.to/mrsaxobeat/aprendendo-em-publico-blockchain-e-criptomoedas-19ll</guid>
      <description>&lt;p&gt;Tenho ouvido em todas minhas bolhas sociais sobre criptomoedas, bitcoin e NFT, mas não entendo nada do assunto. E penso que eu que trabalho com programação deveria ter um bom entendimento. Então já é hora de acabar com isso! Aqui neste primeiro post eu vou registrar minhas perguntas e respostas que for encontrando, tentando documentar a minha linha de raciocínio durante meu aprendizado.&lt;/p&gt;

&lt;p&gt;As perguntas iniciais que tenho em mente são:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O que é e como funciona a blockchain?&lt;/li&gt;
&lt;li&gt;O que é criptomoeda e bitcoin?&lt;/li&gt;
&lt;li&gt;Por que criptomoeda tem valor?&lt;/li&gt;
&lt;li&gt;Por que o valor das criptomoedas variam tanto?&lt;/li&gt;
&lt;li&gt;Por que hoje as criptomoedas estão valendo muito?&lt;/li&gt;
&lt;li&gt;O que é NFT?&lt;/li&gt;
&lt;li&gt;Criptomoeda é realmente a moeda do futuro ou existe outra solução?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Então vamos começar entendendo o que é blockchain.&lt;/p&gt;

&lt;p&gt;Bom, depois de ler alguns artigos[1][2] e assistir alguns vídeos[3], o que tenho a dizer com minhas palavras é que blockchain é uma base de dados que registra o histórico de transações e que armazena esses dados de forma descentralizada, ou seja, esses históricos não ficam armazenados em apenas um computador, mas sim em todos os computadores que utilizam esse banco de dados.&lt;/p&gt;

&lt;p&gt;Aqui vai minha primeira epifania: o blockchain é uma tecnologia inicialmente independente do bitcoin ou qualquer criptomoeda.&lt;/p&gt;

&lt;p&gt;Vou dar um exemplo prático: Joana tem um carro e ela vai vendê-lo para Maria. Para isso, após o negócio fechado entre as duas, Joana deve fazer todo o processo de transferência de titularidade do veículo no Departamento Estadual de Trânsito (DETRANs), que detem um banco de dados nacional onde tem o registro de que Joana é a atual proprietária do carro. Ao fazer a transferência, vai ficar registrado no histórico do veículo que “Joana vendeu o carro para Maria”.&lt;/p&gt;

&lt;p&gt;Perceba uma coisa: o banco de dados é de propriedade do DETRAN e só ele pode verificar que seus dados não foram corrompidos. E se Paulo, um hacker muito talentoso, quisesse passar o carro de Joana para seu próprio nome? Ele simplesmente invadiria o sistema do DETRAN e trocaria o registro para seu nome e pronto, ninguém contestaria os dados.&lt;/p&gt;

&lt;p&gt;O blockchain resolve esses dois principais problemas: a centralização e a corrupção dos dados.&lt;/p&gt;

&lt;p&gt;Vamos entender como o blockchain descentraliza o armazenamento dos dados.&lt;/p&gt;

&lt;p&gt;Funcionaria assim: cada pessoa teria uma cópia completa do banco de dados em seu computador e cada mudança que acontecesse seria refletida no computador de todo mundo através da internet. Então no exemplo acima, a Joana, ao invés de ir no DETRAN, simplesmente abriria o seu computador, entraria com sua conta e senha no sistema e alteraria a titularidade do seu carro para Maria e essa transação surtiria efeito no computador de todo mundo.&lt;/p&gt;

&lt;p&gt;Por que a descentralização é uma coisa boa?&lt;br&gt;
Geralmente, a descentralização sempre é bom pois assim o controle não fica na mão de apenas uma instituição ou pessoa. No caso de um banco de dados, também há o fato de que se este fosse armazenado num único servidor do DETRAN ele estaria sujeito a perda de todos os seus registros caso acontecesse algum acidente corrompendo seus dados. Mas tendo uma cópia completa em cada computador, a corrupção dos dados teria que ocorrer em todos os computadores.&lt;/p&gt;

&lt;p&gt;E sobre a corrupção dos dados?&lt;br&gt;
Blockchain significa corrente de blocos e, assim como em uma corrente, a quebra de um único nó compromete a corrente inteira. &lt;/p&gt;

&lt;p&gt;O que são esses blocos de dados?&lt;br&gt;
Cada bloco de dados da blockchain é composto por três fatores:&lt;br&gt;
Os seus dados: as transações, como por exemplo “Joana vendeu o carro para Maria”.&lt;br&gt;
A sua impressão digital, que em computação é chamada de hash.&lt;br&gt;
E a impressão digital (hash) do bloco anterior.&lt;/p&gt;

&lt;p&gt;Sendo assim, a corrente é formada pela ligação que cada bloco tem com o bloco anterior.&lt;br&gt;
Aí você me pergunta: tá, mas o que é esse tal de hash? Pois bem, o hash é uma cadeia de 64 letras e números que é formada a partir de um dado. No nosso caso, estamos usando o dado “Joana vendeu o carro para Maria”. O hash para o nosso dado é o seguinte (gerado aqui):&lt;/p&gt;

&lt;p&gt;1d4140f617daa6fca841970bc05654f99a8e4ff37cda82acfb6331c5d54ae383&lt;/p&gt;

&lt;p&gt;Bem doido, né? O que faz o hash ser tão especial é que existe um único para cada dado, seja ele qual for. Isso é calculado através de um algoritmo chamado SHA256, que eu ainda não sei como funciona, mas qualquer dia vou querer dar uma olhada mais a fundo.&lt;/p&gt;

&lt;p&gt;Então voltando à cadeia: se um bloco tem o seu hash e o do bloco anterior, caso haja alguma alteração no bloco anterior, todos os blocos posteriores vão acusar que tem coisa errada ali. Por isso a segurança contra corrupção.&lt;/p&gt;

&lt;p&gt;Se você for neste &lt;a href="https://andersbrownworth.com/blockchain/hash"&gt;link&lt;/a&gt;, pode ver qual o hash gerado para o dado que escrever.&lt;/p&gt;

&lt;p&gt;Vou experimentar mais um pouco: meu primeiro bloco de dados vai ter as seguintes informações:&lt;br&gt;
O seu dado: “Joana comprou um carro”;&lt;br&gt;
O hash do bloco anterior vai ser “00000” pois não existe bloco anterior.&lt;br&gt;
Seu próprio hash: 6dece74df8d16ac04568a4f6374daa7e0647a25662813d99bd7eb47c7689a1b7&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T27egQ4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/410py7l0h3a0a7spfge0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T27egQ4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/410py7l0h3a0a7spfge0.png" alt="Print do bloco um" width="607" height="259"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora meu segundo bloco vai ter as seguintes informações:&lt;br&gt;
Joana vendeu seu carro para Maria&lt;br&gt;
Hash anterior: 6dece74df8d16ac04568a4f6374daa7e0647a25662813d99bd7eb47c7689a1b7&lt;br&gt;
Seu Hash: 0a3353754007af8414bfb31ad4aca356120151453686e517fdd2e82d09c3d278&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lzpG2VFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u53lljfqpze3f7uj8doe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lzpG2VFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u53lljfqpze3f7uj8doe.png" alt="Print do bloco 2" width="607" height="261"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se o primeiro bloco tiver qualquer alteração, o seu hash vai mudar. E como o segundo bloco tem registrado o hash original do primeiro bloco, ele vai comparar com o hash alterado e vai acusar que tem informação alterada ali!&lt;br&gt;
Então dessa forma a cadeia de blocos garante que seus dados não foram corrompidos.&lt;/p&gt;

&lt;p&gt;Navegando por este site de demonstração de blockchain[4], você pode encontrar as páginas que demonstram melhor e também os vídeos de explicação, que eu achei ótimos vale dar uma olhada.&lt;/p&gt;

&lt;p&gt;Ao assistir os vídeos que falei ali em cima, me deparei com alguns outros conceitos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A assinatura de bloco&lt;/li&gt;
&lt;li&gt;O número Nonce&lt;/li&gt;
&lt;li&gt;E a mineração de um bloco&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esses três conceitos são interligados, então serão explicados juntos.&lt;/p&gt;

&lt;p&gt;Sabemos que uma rede blockchain não depende de um único servidor, sendo assim, qualquer um com acesso a rede pode gravar dados na blockchain. É claro que cada um deve ter sua conta e senha para fazer qualquer operação, mas mesmo assim, usuários maliciosos podem fazer uma coisa chamada ataque de negação de serviço (também conhecido como DoS Attack, um acrônimo em inglês para Denial of Service). Esse tipo de ataque consiste em enviar vários dados para a rede fazendo com que esta se sobrecarregue e então “trave” ou pare de responder. E para prevenir este ataque a blockchain requer que quem quer enviar dados à rede tenha um trabalho computacional. Aqui nos deparamos com o conceito de “Prova de trabalho”.&lt;/p&gt;

&lt;p&gt;Essa prova de trabalho consiste em encontrar um número que, ao ser adicionado ao corpo do bloco a ser criado, gere um hash específico.&lt;/p&gt;

&lt;p&gt;Este “número mágico” é chamado de nonce[5], acrônimo para number once, ou “número único”, pois ele realmente é o único número que pode satisfazer uma condição.&lt;/p&gt;

&lt;p&gt;E o ato de procurar esse número é chamado de mineração.&lt;/p&gt;

&lt;p&gt;Vamos voltar ao exemplo de Joana vendendo seu carro.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PVYv2qed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtu6m7zzibiiuxasjd2e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PVYv2qed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtu6m7zzibiiuxasjd2e.png" alt="Image description" width="603" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Na imagem acima, que é do site já citado para demonstrações de blockchain, Temos um bloco que tem número 1, tem o nonce 72608, o dado “Joana vendeu seu carro para Maria” e o seu hash. O bloco está vermelho pois o seu hash não satisfaz a condição, que no caso é que “o hash deve começar com quatro dígitos zeros”. Essa condição varia com o tempo para dificultar ou facilitar a prova de trabalho.&lt;br&gt;
Então, para chegar ao hash que satisfaça a condição, o computador vai testando vários números que, junto com o dado e o número do bloco, vão gerar um hash que inicie com quatro zeros.&lt;/p&gt;

&lt;p&gt;Ao clicar no botão “mine”, vamos minerar e chegar ao resultado correto.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I3so8r_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rrpdcxtybbst7y7ndvfc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I3so8r_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rrpdcxtybbst7y7ndvfc.png" alt="Image description" width="606" height="418"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora nosso bloco está verde, indicando que foi validado, ou assinado, e o seu nonce é 62449, fazendo com que o seu hash inicie com 4 dígitos zeros.&lt;/p&gt;

&lt;p&gt;Se você for no site e testar, verá que ao clicar em “Mine” demora pelo menos um segundo para chegar ao resultado correto, ou seja, não é um número fácil de ser calculado e isso impede que alguém com más intenções tente publicar milhares de blocos de uma só vez na rede.&lt;/p&gt;

&lt;p&gt;E aqui me veio um esclarecimento bem grande: a mineração é necessária apenas por causa da camada de segurança. O que eu quero dizer é que, a “lógica base” da blockchain, que é registra dados em cadeia, não precisa encontrar um número que satisfaça uma condição. Isso era uma coisa que me deixava beem confuso esse conceito de minerar bitcoin. Olha só, na real o que é minerado é o nonce!&lt;/p&gt;

&lt;p&gt;Bom, acredito que aqui já cheguei num novo nível de entendimento sobre a blockchain e com novas perguntas que tentarei entender no próximo post:&lt;br&gt;
Se o que é minerado é o nonce, por que existe a confusão de “minerar bitcoin”?&lt;br&gt;
O que acontece se dois computadores descobrirem o noce ao mesmo tempo?&lt;/p&gt;

&lt;p&gt;Fico por aqui e até o próximo post!&lt;/p&gt;

&lt;p&gt;[1] &lt;a href="https://pt.wikipedia.org/wiki/Blockchain"&gt;https://pt.wikipedia.org/wiki/Blockchain&lt;/a&gt;&lt;br&gt;
[2] &lt;a href="https://blog.nubank.com.br/o-que-e-blockchain/"&gt;https://blog.nubank.com.br/o-que-e-blockchain/&lt;/a&gt;&lt;br&gt;
[3] &lt;a href="https://www.youtube.com/watch?v=dkElPTevoR4"&gt;https://www.youtube.com/watch?v=dkElPTevoR4&lt;/a&gt;&lt;br&gt;
[4] &lt;a href="https://andersbrownworth.com/blockchain/"&gt;https://andersbrownworth.com/blockchain/&lt;/a&gt;&lt;br&gt;
[5] &lt;a href="https://youtu.be/rZaGbEcs7ag"&gt;https://youtu.be/rZaGbEcs7ag&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>criptocurrency</category>
      <category>bitcoin</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>Moving Objects in Unity The Right Way</title>
      <author>EliteSalad</author>
      <pubDate>Sun, 28 Nov 2021 23:05:40 +0000</pubDate>
      <link>https://dev.to/xavieroliver/moving-objects-in-unity-the-right-way-3jkb</link>
      <guid>https://dev.to/xavieroliver/moving-objects-in-unity-the-right-way-3jkb</guid>
      <description>&lt;p&gt;Physics based&lt;/p&gt;

&lt;p&gt;Rigidbody SetVelocity&lt;br&gt;
rb.velocity = transform.forward;&lt;br&gt;
Once velocity is set provided there is no drag object will maintain pace until collision.&lt;br&gt;
Great for launching an object with a speed independent of its mass&lt;/p&gt;

&lt;p&gt;Rigidbody MovePosition&lt;br&gt;
rb.MovePosition(transform.position + (transform.forward * Time.deltaTime));&lt;br&gt;
Only physics based way to move a kinematic object&lt;br&gt;
Stable Way to move a rigidbody object without manipulating the physics of the object just the position.&lt;/p&gt;

&lt;p&gt;Rigidbody AddForce&lt;br&gt;
rb.AddForce(transform.foward * Time.deltaTime );&lt;br&gt;
Every frame force will be added leading to acceleration up to infinity provided drag is 0.&lt;br&gt;
Allows for specific force modes to be inserted such as Start, Impulse, Acceleration, Force, and Velocity Change. These can all change the behavior of how that particular force is applied to the object.&lt;/p&gt;

&lt;p&gt;Position Based&lt;/p&gt;

&lt;p&gt;Transform Translate&lt;br&gt;
transform.Translate(Vector3.foward * Time.deltaTime);&lt;br&gt;
Gives an amount of space to move each frame&lt;br&gt;
Great for animating &lt;br&gt;
Can move kinematic objects&lt;/p&gt;

&lt;p&gt;Transform Set Position&lt;br&gt;
transform.position += transform.forward * Time.deltaTime;&lt;br&gt;
Giving new position to move every frame&lt;br&gt;
Great for animating &lt;br&gt;
Can move kinematic objects&lt;/p&gt;

&lt;p&gt;Because movement operations through transform happen asynchronously when moving through or next to an object with a collider on the object may bounce or stutter as it tries to continue in the desired direction. This is because it successfully moves before being rejected back out by the physics of the collider. Because of this using these functions on an object that is meant to touch another object in some way is not recommended. &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>unity3d</category>
      <category>physics</category>
    </item>
    <item>
      <title>Accessibility Auditing My Portfolio Site - Part 6</title>
      <author>Abbey Perini</author>
      <pubDate>Sun, 28 Nov 2021 22:21:56 +0000</pubDate>
      <link>https://dev.to/abbeyperini/accessibility-auditing-my-portfolio-site-part-6-254l</link>
      <guid>https://dev.to/abbeyperini/accessibility-auditing-my-portfolio-site-part-6-254l</guid>
      <description>&lt;p&gt;Read &lt;a href="https://dev.to/abbeyperini/accessibility-auditing-my-portfolio-site-part-1-2k8k"&gt;Part 1 - The Audit&lt;/a&gt;, &lt;a href="https://dev.to/abbeyperini/accessibility-auditing-my-portfolio-site-part-2-36p1"&gt;Part 2 - Quick Fixes&lt;/a&gt;, &lt;a href="https://dev.to/abbeyperini/an-accessible-dark-mode-toggle-in-react-aop"&gt;Part 3 - Dark Mode Toggle&lt;/a&gt;, &lt;a href="https://dev.to/abbeyperini/accessibility-auditing-my-portfolio-site-part-4-omb"&gt;Part 4 - Blog Preview Component&lt;/a&gt; and &lt;a href="https://dev.to/abbeyperini/blog-page-accessibility-deep-dive-1hbl"&gt;Part 5 - Blog Page Deep Dive&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We've finally reached the end. If you've read multiple articles in this series, I want to thank you, especially. It was quite a dense journey.&lt;/p&gt;

&lt;p&gt;I'm going to finish up with a &lt;a href="#final-testing"&gt;final round of testing&lt;/a&gt;, a &lt;a href="#final-fix"&gt;final fix&lt;/a&gt;, a brief mention of &lt;a href="#things-to-revisit"&gt;things I'd like to revisit&lt;/a&gt;, some &lt;a href="#main-takeaways"&gt;main takeaways&lt;/a&gt;, and my &lt;a href="#final-thoughts"&gt;final thoughts on this series&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-testing"&gt;
  &lt;/a&gt;
  Final Testing
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#automated-tools"&gt;
  &lt;/a&gt;
  Automated Tools
&lt;/h3&gt;

&lt;p&gt;In &lt;a href="https://dev.to/abbeyperini/accessibility-auditing-my-portfolio-site-part-1-2k8k"&gt;Part 1&lt;/a&gt;, I used 6 of the tools Todd used: &lt;a href="https://chrome.google.com/webstore/detail/wave-evaluation-tool/jbbplnpkjmmeebjpijfedlgcdilocofh"&gt;WAVE browser extension&lt;/a&gt;, Firefox's accessibility dev tools tab, &lt;a href="https://chrome.google.com/webstore/detail/axe-devtools-web-accessib/lhdoppojpmngadmnindnejefpokejbdd?hl=en-US"&gt;AXE DevTools extension&lt;/a&gt;, &lt;a href="https://chrome.google.com/webstore/detail/arc-toolkit/chdkkkccnlfncngelccgbgfmjebmkmce"&gt;ARC dev toolkit for chrome dev tools&lt;/a&gt;, &lt;a href="https://chrome.google.com/webstore/detail/ibm-equal-access-accessib/lkcagbfjnkomcinoddgooolagloogehp?hl=en-US"&gt;IBM Equal Access Accessibility checker&lt;/a&gt;, and &lt;a href="https://chrome.google.com/webstore/detail/accessibility-insights-fo/pbjjkligggfmakdaogkfomddhfmpjeni"&gt;Microsoft Accessibility Insights&lt;/a&gt;. So let's go through that list again and see what we find.&lt;/p&gt;

&lt;p&gt;Most of the tools returned an error about not having an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, because I want it to be visually hidden, I'll be fixing that when I get to &lt;a href="https://github.com/abbeyperini/Portfolio2.0/issues/3"&gt;this Github issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;WAVE mostly returned errors I had already vetted. It did actually catch one of the many broken links that I'll be fixing in &lt;a href="https://github.com/abbeyperini/Portfolio2.0/issues/11"&gt;this Github issue&lt;/a&gt;. It returned 27 long alt-text warnings on my blog page, but they're all less than 150 characters. I also got false positive contrast errors for my visually hidden skip links.&lt;/p&gt;

&lt;p&gt;ARC is down to primarily false positives. There were a couple I had to look up to make sure they were ok, like buttons with transparent backgrounds and using images with alt-text or an &lt;code&gt;aria-label&lt;/code&gt; instead of text in links.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b5afoI3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98a38yneddsszyrj0vl5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b5afoI3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98a38yneddsszyrj0vl5.png" alt="ARC dev toolkit after scanning the blog page on abbeyperini.dev" width="880" height="556"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The IBM Equal Access Accessibility checker just stopped working. It refused to scan even after I restarted Chrome,  uninstalled and reinstalled it in Chrome, and installed it in Firefox. I saw something about the ruleset being undefined, so hopefully they fix that soon. Luckily, I ran it multiple times in &lt;a href="https://dev.to/abbeyperini/blog-page-accessibility-deep-dive-1hbl"&gt;Part 5&lt;/a&gt; so I'm comfortable with moving on.&lt;/p&gt;

&lt;p&gt;The Microsoft Accessibility Insights Fast Pass didn't find anything that wasn't already on my radar, but I will be using the Assessment option as a guide for my manual testing again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#manual-testing"&gt;
  &lt;/a&gt;
  Manual Testing
&lt;/h3&gt;

&lt;p&gt;The Microsoft Accessibility Insights Assessment is such a great testing resource. Many of the tabs break down exactly what information is returned by the relevant elements on the page and others tell you what to look for when you're manually testing with a keyboard or screen reader. Some of them have a visual helper toggle that will highlight relevant elements or apply the relevant settings so you can test. It's a very long list of tests, but luckily there are many tabs I know I can skip because they either don't apply or I haven't changed any code related to them since the last time I checked. Ultimately, these tests don't return anything I didn't already know about.&lt;/p&gt;

&lt;p&gt;Not a single automated tool returned a warning or error about the contrast of the toggle itself, but based on reader feedback, I want to manually check it has sufficient color contrast in light mode. The Microsoft Accessibility Insights Assessment repeatedly suggested using the &lt;a href="https://www.tpgi.com/color-contrast-checker/"&gt;Color Contrast Checker&lt;/a&gt; on a Mac, so I went ahead and installed it. It didn't work very well, so I took the hex color codes from my CSS and plugged them into my go to contrast checker from &lt;a href="https://webaim.org/resources/contrastchecker/"&gt;WebAIM&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I need a &lt;a href="https://www.w3.org/WAI/WCAG21/Understanding/non-text-contrast.html"&gt;3:1 contrast ratio&lt;/a&gt;, and the border of the toggle (#72CCE3) only comes in at 1.44:1 on the light mode background (#DBE7E4). Next, I head to &lt;a href="https://coolors.co"&gt;coolors&lt;/a&gt; and start looking at shades that might get me up to 3 without straying too far from the original color scheme. It involves a lot of hex code typing and using saturation and brightness sliders, but the coolors tools make it way easier. I consistently find the shade that meets minimum contrast and looks the most blue is a color coolors calls "Blue Munsell" (#108DAD). While we're here, I go ahead and test the dark mode contrast and find it fails as well. The border color (#5d6baa) looks fine lightened to "Cool Grey" (#808CBC) and that makes a minimum 3:1 contrast, so I update my CSS variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/** sunny side **/&lt;/span&gt;
    &lt;span class="py"&gt;--blue-background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#c2e9f6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--blue-border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#108DAD&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--blue-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#96dcee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--yellow-background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fffaa8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--yellow-border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f5eb71&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/** dark side **/&lt;/span&gt;
    &lt;span class="py"&gt;--indigo-background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#808fc7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--indigo-border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#808CBC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--indigo-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#6b7abb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--gray-border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e8e8ea&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--gray-dots&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e8e8ea&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another thing about the toggle I said I'd look into again was whether the animated focus outline has sufficient contrast from the start. While I know the contrast is sufficient down to small text, it needs to be obvious right when the user focuses on it. I like it and can see it immediately, but I also don't have vision problems and am very good at differentiating colors. (If you too like looking at hues of colors, check out the &lt;a href="http://i-love-hue.com/"&gt;I Love Hue mobile game&lt;/a&gt;.) After playing around with it, I add this &lt;code&gt;transition&lt;/code&gt; rule to my &lt;code&gt;:focus&lt;/code&gt; ruleset:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.toggle--checkbox&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.toggle--label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--button-border&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;outline&lt;/span&gt; &lt;span class="m"&gt;100ms&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This cancels out the &lt;code&gt;transition: all 350ms ease-in;&lt;/code&gt; rule in my regular &lt;code&gt;.toggle--label&lt;/code&gt; ruleset, and the outline is easier to see right when the toggle is focused.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-screen-readers"&gt;
  &lt;/a&gt;
  Multiple Screen readers
&lt;/h3&gt;

&lt;p&gt;There were a couple warnings from tools about multiple labels being used on components. I applied &lt;code&gt;aria-label&lt;/code&gt;s liberally based on what I was hearing from the screen reader. Now that the bulk of the work is done, I want to go back through with multiple screen readers and find the optimal balance. Specifically, I want to make sure a screen reader says "dark mode toggle, on" or "dark mode toggle, off" when the toggle is selected and that things like buttons in headings don't have redundant labels read.&lt;/p&gt;

&lt;p&gt;I've been working with VoiceOver, so I'm going to switch to &lt;a href="https://www.nvaccess.org/download/"&gt;NVDA for Windows&lt;/a&gt; first. After that, I'll try &lt;a href="https://github.com/tspivey/tdsr"&gt;tdsr&lt;/a&gt;. All the other screen readers I researched involved paying a sizable sum, installing Linux on one of my machines, or were no longer available.&lt;/p&gt;

&lt;p&gt;The first thing I notice about NVDA is it starts making noise as soon as you open the &lt;code&gt;.exe&lt;/code&gt; and it has way fewer instructions pop ups. Then I'm struck by the excellent sound effects. The interesting thing is NVDA navigation doesn't trigger focus. It is hard to tell where you are in the page. My buttons, headings, and regions are being read very similarly to the way VoiceOver reads them. Initially, I thought my dark mode toggle wasn't being read correctly, but then I realized instead of "on" and "off" it was saying "checked" and "unchecked." If &lt;code&gt;role="switch"&lt;/code&gt; wasn't working like I expected, it would be saying "unchecked" while the site was in dark mode, which would be extremely confusing for a screen reader user.&lt;/p&gt;

&lt;p&gt;Finally, I try to get tdsr working and my homebrew python installation is broken. I try a few different versions of uninstalling and reinstalling and linking and unlinking before giving up. I'll get a 3rd screen reader working when I come back to those Github issues.&lt;/p&gt;

&lt;p&gt;I'm leaving my &lt;code&gt;aria-labels&lt;/code&gt; the way they are because I added them in response to VoiceOver not providing enough information. The NVDA experience is very similar and the tool are returning warnings to try and prevent lots of redundant text from being read to the user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crossbrowser-testing"&gt;
  &lt;/a&gt;
  Cross-browser Testing
&lt;/h3&gt;

&lt;p&gt;In the spirit of completing testing I should have done a long time ago, I want to click through my site in multiple browsers and verify nothing's broken. I try and make sure to check MDN's browser support table for pretty much everything, but it never hurts to verify in the browser itself.&lt;/p&gt;

&lt;p&gt;The Firefox dev tools accessibility tab didn't return any errors, but I took the opportunity to click around while I had it open, and everything's looking good.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8TQbe9Zw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgwatjweeaa3w5rt7nky.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8TQbe9Zw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgwatjweeaa3w5rt7nky.png" alt="blog preview component on abbeyperini.dev in Safari with a scroll bar with corners" width="880" height="361"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Safari, my blog preview component has square edges around the scrollbar I was able to prevent in Chrome and Firefox. I mess around with it for a little bit, but my solution is the recommended solution and none of the CSS I tried in dev tools affected it. Everything else looks fine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-fix"&gt;
  &lt;/a&gt;
  Final Fix
&lt;/h2&gt;

&lt;p&gt;I wanted to sift through all my blogs to make sure I'm not using words like "above" and "below" where they wouldn't make sense without visual context. The warnings came from the IBM Equal Access Accessibility checker, so while that's broken, I'm relegated to using ctrl + F to find "above", "below", "left", and "right." Lo and behold, I've already used "above" a couple times since I fixed the instances of "below" on my main page! This is a hard habit to break.&lt;/p&gt;

&lt;p&gt;For the most part, I can just remove the word without issue. In some places, I replace "above" with "before" and "below" with "following." I quickly find I sure do love a good "comment below."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-to-revisit"&gt;
  &lt;/a&gt;
  Things to Revisit
&lt;/h2&gt;

&lt;p&gt;I opened &lt;a href="https://github.com/abbeyperini/Portfolio2.0/issues"&gt;5 issues on Github&lt;/a&gt; over the course of this series. #3, #9, and #11 are easily large enough accessibility projects to deserve standalone blog posts. &lt;/p&gt;

&lt;p&gt;Updating my skills section is just something I need to keep on top of as I grow as a developer. Moving my CSS away from dozens of margins will make it much easier to add to my site in the future. Similarly, I need to come up with a solution for my local lambda server &lt;a href="https://dev.to/abbeyperini/a-walkthrough-of-updating-my-portfolio-site-with-netlify-functions-and-the-dev-to-api-dd2#:~:text=While%20trying%20to%20get%20to%20sleep%2C"&gt;environment variables&lt;/a&gt; that doesn't involve hardcoded links and pasting in my DEV API key.&lt;/p&gt;

&lt;p&gt;I also need to transfer changes I've made to blogs on DEV to Hashnode and maybe Medium. If I changed words, I made sure to make changes everywhere. I didn't transfer the heading and formatting changes because they often vary across sites and the last blog was a slog. Plus, I'm in the middle of cross posting everything to &lt;a href="https://tealfeed.com/abbeyperini"&gt;Tealfeed&lt;/a&gt; and reformatting &lt;a href="https://dev.to/abbeyperini/blog-page-accessibility-deep-dive-1hbl"&gt;Part 5&lt;/a&gt; for Medium was a nightmare, so I may be ditching Medium. I need to make some decisions before I spend time on this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QkRcGHoM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqppt7buo1yewbd4svyy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QkRcGHoM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqppt7buo1yewbd4svyy.jpg" alt="Frodo on Mount Doom &amp;quot;It's done. It's over now.&amp;quot;" width="640" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-takeaways"&gt;
  &lt;/a&gt;
  Main Takeaways
&lt;/h2&gt;

&lt;p&gt;Running ARC Toolkit on my blog page now vs when I started is like night and day. I got a huge amount of errors back in &lt;a href="https://dev.to/abbeyperini/accessibility-auditing-my-portfolio-site-part-1-2k8k"&gt;Part 1&lt;/a&gt;, but now it's all warnings and two things I'm going to fix in those Github issues. On the flip side, I don't think IBM Equal Access Accessibility checker's % of components without issues metric moved during this entire series. I'm pretty sure I saw 93% the whole time. &lt;/p&gt;

&lt;p&gt;Quite a few of these things get harder to maintain the more blogs I write. I feel like I could use an editorial team for making sure I stick to one way of doing things in my blog text already (e.g. do I capitalize "Part" and link to the blog every time I refer to another part of this series?). Similarly, I'm not sure I'm applying the recommended approach the same way across the board for some of the errors and warnings I tried to fix, like using &lt;code&gt;&amp;lt;q&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;quoteblocks&amp;gt;&lt;/code&gt;. I went through and made sure that what I have won't leave a screen reader user without required context, but in the case of &lt;code&gt;&amp;lt;q&amp;gt;&lt;/code&gt;s, I use quotes stylistically a lot, so they're not really conveying meaning, but are still triggering automated tool warnings.&lt;/p&gt;

&lt;p&gt;Honestly, if I only had the bandwidth to do one thing, I would manually test with a screen reader and just aim for making that navigation more straightforward. It was shocking how easy it was to take screen reader navigation from hot garbage to fairly sensical. A close second/fairly intertwined task would be doing the same with a keyboard.&lt;/p&gt;

&lt;p&gt;Just like learning a new language or technology, a lot of these things need practice. Alt-text and color contrast are great examples of this. I encourage you to look at websites you visit and think about what the experience would be like for a disabled user while you browse. You should definitely be writing alt-text or captions for every image you use in your social media posts both for other users and for your own practice. My alt-text writing has improved significantly in the last 8 months just from tweeting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;I want to emphasize that if you want to improve your site's accessibility, an audit and fix process this intense right off the bat is not necessary. &lt;/p&gt;

&lt;p&gt;In code, like in life, it is nigh impossible to reach 100% perfection and you certainly cannot do it quickly. &lt;a href="https://dev.to/abbeyperini/accessibility-auditing-my-portfolio-site-part-2-36p1"&gt;Part 2&lt;/a&gt; demonstrates that starting with small, simple fixes can still make a decent improvement. Had I not literally heard Todd say "No site is 100% accessible, especially as you update it, but we can aim to get close," I may have given in to the pressure to strive for perfection and never finished.&lt;/p&gt;

&lt;p&gt;All of the tools I used gave me a ginormous list of things to check. That was after I knew I could ignore quite a few of the warnings. When I was watching &lt;a href="https://www.youtube.com/watch?v=BhUtMZtv-DQ"&gt;Todd's Lunch and Learn&lt;/a&gt;, I was struck by how many of the rules he knew off the top of his head. If you had to research whether each and every false positive, warning, and recommendation was pertinent, it would get very overwhelming very fast.&lt;/p&gt;

&lt;p&gt;The topic of accessibility is huge and not black and white. What may work in one screen reader in one browser may not work in others. You can't know every disability your users will have. Plus, if you've ever posted anything that got remotely popular on the internet, you know that you can never please every user. All you can do is aim to improve the experience for as many users as possible and be open to feedback.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>JavaScript MaxChar Algorithm </title>
      <author>Natalie Taktachev</author>
      <pubDate>Sun, 28 Nov 2021 21:30:56 +0000</pubDate>
      <link>https://dev.to/stuxnat/javascript-maxchar-algorithm-20op</link>
      <guid>https://dev.to/stuxnat/javascript-maxchar-algorithm-20op</guid>
      <description>&lt;p&gt;In my last few posts I've written about common interview questions I've come across. Today, another: MaxChar. This problem asks of a given string, to return the character that appears most frequently in the string. &lt;/p&gt;

&lt;p&gt;To start, write a function that takes in a string, with a variable set to an empty string to keep track of the letter which appears the most. Another thing we will want to have is an object to keep track of all characters in a string, along with the number of times it appears:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function maxChar(string){
     let chars = {}
     let maxChar = ''
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next thing to do is to iterate through the string using a for loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function maxChar(string){
     let chars = {}
     let maxChar = ''

     for (let char of string){
      let current = char 
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the char variable is used keep track of the current character in the iteration. Next, we'll want to increase the numerical value by 1 if the character is already included in the chars object. If it is not, it will be set to 1 if it is a new character.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function maxChar(string){
     let chars = {}
     let maxChar = ''

     for (let char of string){
      let current = char 
      char[current] = char[current] + 1 || 1 
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last step of this requires comparing current with maxChar to determine which one appears most often.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function maxChar(string){
     let chars = {}
     let maxChar = ''

     for (let char of string){
      let current = char 
      char[current] = char[current] + 1 || 1 
      if (maxChar === '' || chars[current] &amp;gt; chars[maxChar]) {
maxChar = current}
  }
return maxChar
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Creating a website using Golang and Svelte.js together</title>
      <author>Kaan Kuscu</author>
      <pubDate>Sun, 28 Nov 2021 21:15:11 +0000</pubDate>
      <link>https://dev.to/ksckaan1/creating-a-website-using-golang-and-sveltejs-together-55g8</link>
      <guid>https://dev.to/ksckaan1/creating-a-website-using-golang-and-sveltejs-together-55g8</guid>
      <description>&lt;p&gt;Hello Gophers,&lt;/p&gt;

&lt;p&gt;Sometimes, we need to use dynamic or single pages on our websites. For this, We can develop with reactive javascript programming tools (or frameworks) etc... in this case.&lt;/p&gt;

&lt;p&gt;In this post, i'm gonna show you, how to use &lt;code&gt;Svelte.js&lt;/code&gt; over our server, written in Go.&lt;/p&gt;

&lt;p&gt;For this example, i preferred &lt;code&gt;gofiber&lt;/code&gt; package as webserver package.&lt;/p&gt;

&lt;p&gt;Lets start!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-basic-gofiber-webserver"&gt;
  &lt;/a&gt;
  Creating Basic Gofiber Webserver
&lt;/h2&gt;

&lt;p&gt;Project structure for Go side will be like bellow.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---j8agBWX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8r7uret55uy6lm3fk896.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---j8agBWX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8r7uret55uy6lm3fk896.png" alt="project-structure" width="748" height="325"&gt;&lt;/a&gt;&lt;br&gt;
First, we have to init &lt;code&gt;go.mod&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;As step two, we can create &lt;code&gt;main.go&lt;/code&gt; file like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/gofiber/fiber/v2"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/public"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"./public"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mainPage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":3000"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;mainPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;//This function will be see different soon&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hellö"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will change Go side, after created &lt;strong&gt;Svelte&lt;/strong&gt; project.&lt;/p&gt;

&lt;p&gt;Lets create simple &lt;strong&gt;Svelte&lt;/strong&gt; project over this &lt;strong&gt;Go&lt;/strong&gt; project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-basic-svelte-project"&gt;
  &lt;/a&gt;
  Creating Basic Svelte Project
&lt;/h2&gt;

&lt;p&gt;This way,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx degit sveltejs/template . --force&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We are using &lt;code&gt;--force&lt;/code&gt; flag because this project folder is not empty.&lt;/p&gt;

&lt;p&gt;After,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;for installing all dependencies.&lt;/p&gt;

&lt;p&gt;For testing, we can run &lt;code&gt;npm run dev&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;If it's working, we can go to next step.&lt;/p&gt;

&lt;p&gt;Thus, we have filled *&lt;em&gt;public&lt;/em&gt; folder with some files.&lt;/p&gt;

&lt;p&gt;For using &lt;strong&gt;Svelte&lt;/strong&gt; with &lt;strong&gt;Go&lt;/strong&gt;, we have to change some setting over Svelte side.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step1"&gt;
  &lt;/a&gt;
  Step.1
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rollup.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;svelte(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="err"&gt;compilerOptions:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;run-time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;checks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;when&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;production&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="err"&gt;dev:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;!production&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="err"&gt;customElement:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;),&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have to add &lt;code&gt;customElement: true,&lt;/code&gt; line.&lt;br&gt;
This addition helps splitting element from base project.&lt;br&gt;
Thus, we can add component using element name like &lt;code&gt;&amp;lt;App/&amp;gt;&lt;/code&gt; to our Go Templates.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step2"&gt;
  &lt;/a&gt;
  Step.2
&lt;/h3&gt;

&lt;p&gt;Editing &lt;code&gt;./src/main.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;This file will look like bellow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will use only line of &lt;code&gt;import&lt;/code&gt;.&lt;br&gt;
In this code, we imported a component as App but this name is not important. First of all, we will specify the component tag from the component's file.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step3"&gt;
  &lt;/a&gt;
  Step.3
&lt;/h3&gt;

&lt;p&gt;Editing &lt;code&gt;./src/App.svelte&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// It can be empty for this example&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;svelte:options&lt;/span&gt; &lt;span class="na"&gt;tag=&lt;/span&gt;&lt;span class="s"&gt;"my-app"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My App&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;/* It can be empty :) */&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this processes, we can use &lt;strong&gt;App component&lt;/strong&gt; as &lt;code&gt;&amp;lt;my-app/&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;We are complete &lt;code&gt;Svelte.js&lt;/code&gt; side. Now we can go Golang side.&lt;/p&gt;

&lt;p&gt;First of all, we are going to define template render engine.&lt;/p&gt;

&lt;p&gt;Edit &lt;code&gt;main.go&lt;/code&gt; file like bellow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/gofiber/fiber/v2"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/gofiber/template/html"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;//template render engine&lt;/span&gt;
    &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./templates"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;".html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Views&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;//set as render engine&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/public"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"./public"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mainPage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":3000"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Don't forget run &lt;code&gt;go mod tidy&lt;/code&gt; command :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now We are going to change &lt;code&gt;mainpage&lt;/code&gt; function like bellow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;mainPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mainpage"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and change &lt;code&gt;./templates/mainpage.html&lt;/code&gt; like bellow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My Page&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;'stylesheet'&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;'/public/global.css'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;'/public/build/bundle.js'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;my-app/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can call &lt;code&gt;App&lt;/code&gt; component as &lt;code&gt;my-app&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#last-step"&gt;
  &lt;/a&gt;
  Last Step
&lt;/h2&gt;

&lt;p&gt;We can run app with this commands.&lt;br&gt;
&lt;code&gt;npm run build&lt;/code&gt; builds bundled &lt;code&gt;js&lt;/code&gt; file.&lt;br&gt;
&lt;code&gt;go run .&lt;/code&gt; starts web server.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#tips"&gt;
  &lt;/a&gt;
  Tips
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;We can run server easy way, creating &lt;code&gt;makefile&lt;/code&gt;.&lt;br&gt;
Create &lt;code&gt;makefile&lt;/code&gt; in project directory.&lt;br&gt;
This way,&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;run:
    npm run build
    go run .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;and from terminal, run &lt;code&gt;make run&lt;/code&gt; command. &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>go</category>
      <category>svelte</category>
      <category>webdev</category>
    </item>
    <item>
      <title>CRUD OPERATIONS IN NODE JS WITH EXPRESS AND FIREBASE</title>
      <author>Raphael Otuya</author>
      <pubDate>Sun, 28 Nov 2021 21:04:35 +0000</pubDate>
      <link>https://dev.to/slickdev_raphael/crud-operations-in-node-js-with-express-and-firebase-526e</link>
      <guid>https://dev.to/slickdev_raphael/crud-operations-in-node-js-with-express-and-firebase-526e</guid>
      <description>&lt;p&gt;Create, Read, Update and Delete are what is referred to as CRUD.&lt;br&gt;
CRUD operations are present in almost every web app. In this tutorial I will explain how to perform CRUD operations in Node JS and Firebase.&lt;br&gt;
I will assume that you have a project set up and ready.&lt;/p&gt;

&lt;p&gt;CREATE OPERATION:&lt;br&gt;
Let’s create a hypothetical user to demonstrate how to create and save data to the database&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.post('/create-user', (req, res) =&amp;gt; {
    const {name, email, password, phoneno, location } = req.body;
    const auth = firebase.auth();
    auth.createUserWithEmailAndPassword(email, password)
        .then((user) =&amp;gt; {
            firebase.firestore().collection("users").doc().set({
                "name": name,
                "email": email,
                "phoneno": phoneno,
                "location": location,
            })
            .then(() =&amp;gt; {
                res.send('User created successfully');
            });
        })
        .catch(err =&amp;gt; {
            res.send(err);
        });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code we are getting the user information ie name, email, password and location, from the request body, we then call the firebase auth method and use this auth method to authenticate the user profile using the user’s email and password&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.then((user) =&amp;gt; {
            firebase.firestore().collection("users").doc().set({
                "name": name,
                "email": email,
                "phoneno": phoneno,
                "location": location,
            })
            .then(() =&amp;gt; {
                res.send('User created successfully');
            });
        })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we call an instance of Cloud firestore and save the user data in a document. The “.set()” method overwrites an existing document, if the document does not exist, it will create it with the data provided.&lt;/p&gt;

&lt;p&gt;READ:&lt;br&gt;
We will create a route that logs the user in;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.post('/login', async(req, res) =&amp;gt; {
    try {
        const {email, password} = req.body;
        await firebase.auth().signInWithEmailAndPassword(email, password)
        .then((user) =&amp;gt; {
            firebase.firestore()
                .collection('customers')
                .where('email', '==', email)
                .get()
            .then((users) =&amp;gt; {
                let value = users.docs[0].data();
                res.json(value);
            });
        });
    } catch (err) {
        return res.status(400).send({ message: err.message });
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we call the firebase auth method to authenticate the data provided in the request body, if the data is authenticated successfully, we then go on to find the user document in our cloud firestore using the user email.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;            .then((users) =&amp;gt; {
                let value = users.docs[0].data();
                res.json(value);
            });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then call the docs method on the result returned from the firebase query to get the result as a list and the pick the first document (should only contain one document) and return it.&lt;/p&gt;

&lt;p&gt;FIND ONE DOCUMENT&lt;br&gt;
Here we are going to query the cloud firestore collection “users” for one document using the email provided and return the first document&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.get('/find-user', async(req, res) =&amp;gt; {
    const {email} = req.body;
    await firebase.firestore()
        .collection('users')
        .where('email', '==', email)
        .get()
    .then((users) =&amp;gt; {
        let value = users.docs[0].data();
        res.send(value);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;FIRLTER DOCUMENTS BY MORE THAN ONE FIELD&lt;br&gt;
We are going to query our cloud firestore and filter the data by more than one field in the document. Assume we want to find users in a particular location, that are also verified and also currently online.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.post('/find-user', async (req, res) =&amp;gt; {
    let location = req.body.location;
    let query = await firebase.firestore()
        .collection('users')
        .where('location', '==', location);

        if(query != "") {
            query = await query.where('verified', '==', "true");
        }
        if(query != "") {
            query.where('status', '==', 'online')
            .get()
            .then(snapshots =&amp;gt; {
                if(snapshots.empty) {
                return null;
                }
                let results = snapshots.docs.map(doc =&amp;gt; doc.data());
                return res.json(results[0]);
            });
        }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The “.where” method returns a collection query which we first check to see if it is not empty, if it’s not, we then filter by other fields, then we loop through the results and return the data of the first document.&lt;/p&gt;

&lt;p&gt;UPDATE:&lt;br&gt;
We will use the “.update” method to update an existing document in the cloud firestore. It only works if the document already exists before calling the update method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.post('/update-user', async(req, res) =&amp;gt; {
    const {name, email, phoneno, location } = req.body;
    try{
        if(!req.body){
            return res
                .status(400)
                .send({ message : "Data to update can not be empty"});
        }
        await firebase.firestore().collection('users')
        .where('email', "==", email)
        .update({
            name : name,
            description : req.body.description,
            phoneno : phoneno,
            location : location,
        }).then((ref) =&amp;gt; {
            res.json(ref.data());
        });
    }
    catch(err){res.status(500).send({ message : err.message || "Error Occurred while updating" });
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DELETE: &lt;/p&gt;

&lt;p&gt;Delete operation is pretty straightforward, call the “.delete” method on the document you want to remove&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.post('/delete-user', async(req, res) =&amp;gt; {
    const {email} = req.body;
    await firebase.firestore()
    .collection('users')
    .where('email', "==", email)
    .delete()
    .then((ref) =&amp;gt; {
        res.json(ref.data());
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DELETE VALUE FROM ARRAY:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.post('/delete-value', async(req, res) =&amp;gt; {
    const {email, value} = req.body;
    try{
        await firebase.firestore().collection('users').doc(email).update({
            [value] : firebase.firestore.FieldValue.delete()
        });
        res.json('successful operation');
    }
    catch(err){res.status(500).send({ message : err.message || "Error Occurred while deleting value" });
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>firebase</category>
      <category>node</category>
    </item>
    <item>
      <title>Accessing Elements in 2D Arrays in Java</title>
      <author>Edwin Torres</author>
      <pubDate>Sun, 28 Nov 2021 20:45:05 +0000</pubDate>
      <link>https://dev.to/realedwintorres/accessing-elements-in-2d-arrays-in-java-1o7i</link>
      <guid>https://dev.to/realedwintorres/accessing-elements-in-2d-arrays-in-java-1o7i</guid>
      <description>&lt;p&gt;The two-dimensional (2D) array is a useful data structure. Like one-dimensional arrays, 2D arrays work well with &lt;code&gt;for&lt;/code&gt; loops.&lt;/p&gt;

&lt;p&gt;Here is a 2D array in Java:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;int[][]&lt;/code&gt; declaration means that &lt;code&gt;arr&lt;/code&gt; is a 2D array of &lt;code&gt;int&lt;/code&gt; values. Since there are two pairs of &lt;code&gt;[]&lt;/code&gt;, the array has two dimensions.&lt;/p&gt;

&lt;p&gt;Look at this 2D array. It is actually an &lt;em&gt;array of arrays&lt;/em&gt;. The array &lt;code&gt;arr&lt;/code&gt; has a length of &lt;code&gt;3&lt;/code&gt;. It has three elements, or &lt;em&gt;rows&lt;/em&gt;.  Each row is an array of length &lt;code&gt;5&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first array is &lt;code&gt;arr[0]&lt;/code&gt;. The second and third arrays are &lt;code&gt;arr[1]&lt;/code&gt; and &lt;code&gt;arr[2]&lt;/code&gt; respectively. A &lt;code&gt;for&lt;/code&gt; loop can access each of these arrays using an index:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
  &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;0, 1, 2, 3, 4]
&lt;span class="o"&gt;[&lt;/span&gt;5, 6, 7, 8, 9]
&lt;span class="o"&gt;[&lt;/span&gt;10, 11, 12, 13, 14]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; loop accesses each row. Since the row is also an array, an inner &lt;code&gt;for&lt;/code&gt; loop can access each of its elements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;","&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;": "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;0,0: 0
0,1: 1
0,2: 2
0,3: 3
0,4: 4
1,0: 5
1,1: 6
1,2: 7
1,3: 8
1,4: 9
2,0: 10
2,1: 11
2,2: 12
2,3: 13
2,4: 14
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the output, the first number is the row index. The second number is the column index. The third number is the element at that position of the 2D array.&lt;/p&gt;

&lt;p&gt;Note how two indexes are required when accessing a single element of the 2D array. For example, &lt;code&gt;arr[1][3]&lt;/code&gt; contains the &lt;code&gt;int&lt;/code&gt; value &lt;code&gt;8&lt;/code&gt;. The &lt;code&gt;for&lt;/code&gt; loop accesses each row in order. Once it has a row, then it uses an inner &lt;code&gt;for&lt;/code&gt; loop to access its &lt;code&gt;int&lt;/code&gt; values in order.&lt;/p&gt;

&lt;p&gt;Here is a complete example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Example&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
      &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt;
      &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;","&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;": "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When using 2D arrays, use two indexes. The first index is for the row. The second index is for the column. In other words, each element of a 2D array is an array. The first index accesses an array element. Then use a second index to access the elements in that array. To facilitate this, use a &lt;code&gt;for&lt;/code&gt; loop with an inner &lt;code&gt;for&lt;/code&gt; loop to provide the row and column indexes.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;Follow me on Twitter &lt;a href="https://twitter.com/realEdwinTorres"&gt;&lt;code&gt;@realEdwinTorres&lt;/code&gt;&lt;/a&gt; for more programming tips. 😀&lt;/p&gt;

</description>
      <category>java</category>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>10 Good Practices For HTML Forms</title>
      <author>Gemini392</author>
      <pubDate>Sun, 28 Nov 2021 20:39:04 +0000</pubDate>
      <link>https://dev.to/gemini392/10-good-practices-for-html-forms-2djk</link>
      <guid>https://dev.to/gemini392/10-good-practices-for-html-forms-2djk</guid>
      <description>&lt;p&gt;If you are a web developer, then you've probably come across forms more times than you can imagine. Creating forms is great, everybody feels accomplished when they start doing it. But there is a better way to everything, and that's what we want to see today in this article.&lt;/p&gt;

&lt;p&gt;These tips are not only going to make you learned when it comes to creating forms, you'll see that your forms also become responsive, and even 'interesting' for the user.&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;Labels&lt;/strong&gt;&lt;br&gt;
Well, you simply can't emphasize enough on this one. Ignore the placeholder for a minute, and think of forms without labels. Imagine filling a form like that. Placeholders are great and all, but they need the user to remember what the input field is for, because they disappear the instant they start typing. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DY-rWjn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/au4avdgg0hf0wqfjzoj2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DY-rWjn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/au4avdgg0hf0wqfjzoj2.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Use more labels for your forms, since it helps the user. You could use both labels and placeholders simultaneously, if the field requires some extra description.&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;Keep Labels short&lt;/strong&gt;&lt;br&gt;
Now, when I said help the user, I didn't mean a full blown sentence. Keep it short, and easy to catch on to. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mUgD0W5R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mq7d0y6yhfryl0ayeh8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mUgD0W5R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mq7d0y6yhfryl0ayeh8v.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
A label is just a word that prompts the user to input something in the field. If you want to expatiate, then let a placeholder do that for you.&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;Avoid all caps&lt;/strong&gt;&lt;br&gt;
You've noted the fact that labels are essentially a nice touch for forms. But there is one last thing about labels. Don't go all caps on your forms, because it makes the labels harder to read.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-NkckYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht2j8slveozkszpi201a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-NkckYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht2j8slveozkszpi201a.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your aim to help the user input accurate information. You should probably start by making the prompts easier to read, and therefore, easier to follow. If you need username, just use 'username' as a label.&lt;/p&gt;

&lt;p&gt;4) &lt;strong&gt;Require only information you need&lt;/strong&gt;&lt;br&gt;
The first thing users see when they open your website will most probably be your form. It is both boring and time consuming to fill in information that is not useful to the site you are creating. Say you created a social media web app, but on the sign in, you require users to input username, password, email, date of birth, gender, country, zip code... this is already an overwhelming lot for the user, and for the backend database of your web app. Store what you need.&lt;/p&gt;

&lt;p&gt;5.) &lt;strong&gt;Set up correct HTML input type&lt;/strong&gt;&lt;br&gt;
This is a critical factor for users who will access your site from their mobile phones. Setting up the right input types for fields like email, password, and numerical related data makes it easier for them to input the right data into the form.&lt;/p&gt;

&lt;p&gt;6.) &lt;strong&gt;Validation for data that is being input.&lt;/strong&gt;&lt;br&gt;
You can never fully trust users when it comes to data collection. That is why you must prompt them to input the right kind of data. There is no better way to do this than to use simple validation techniques. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZE-tOE5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6nq8qem93t1wtp7hxha.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZE-tOE5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6nq8qem93t1wtp7hxha.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Plain HTML alone performs this to a certain level. Some users make errors when typing, so displaying these validation prompts helps you to collect the right data for your database.&lt;/p&gt;

&lt;p&gt;7.) &lt;strong&gt;Provide a way to see the password&lt;/strong&gt;&lt;br&gt;
'I am very sure of what I typed as the password, but I can't use it for login, because apparently, it's incorrect'&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cbOGaWaQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nj04agvvpe0fcaaxtyxw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cbOGaWaQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nj04agvvpe0fcaaxtyxw.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Provide a way to see passwords on your form, so that users who make typos when typing can see them. &lt;/p&gt;

&lt;p&gt;8.) &lt;strong&gt;Group related fields&lt;/strong&gt;&lt;br&gt;
Your forms should be organised in logical order. Fields that are logically related should be put together. It's not very good practice to for example, start with a field for first name, the next for email, and then followed by last name. First name and email are not logically related, so email should come after last name. This is same for groups of fields that are logically related.&lt;/p&gt;

&lt;p&gt;9.) &lt;strong&gt;Don't erase email/password after unsuccessful attempts.&lt;/strong&gt;&lt;br&gt;
This practice is good because it saves the users time, and makes the form less tedious to fill out. If after a number of attempts the user cannot sign in, then do not erase the data that they input correctly. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fbkeEZQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dq3q68ldmfl51kvoh64s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fbkeEZQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dq3q68ldmfl51kvoh64s.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Let the user only reenter what he did not get right.&lt;/p&gt;

&lt;p&gt;10) &lt;strong&gt;Submit button should match action it performs&lt;/strong&gt;&lt;br&gt;
If you create a login form, then let the submit button say 'login', or 'sign in'. Same goes for sign up, and any other action. Let the submit button match the action it performs, as it makes it easier for the user to see what hitting that button would do.&lt;/p&gt;

&lt;p&gt;Hope this article was of help to you. Connect with me on twitter for more developer tips.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Become A JavaScript Console Expert</title>
      <author>The Dev Drawer</author>
      <pubDate>Sun, 28 Nov 2021 19:56:34 +0000</pubDate>
      <link>https://dev.to/thedevdrawer/become-a-javascript-console-expert-3j81</link>
      <guid>https://dev.to/thedevdrawer/become-a-javascript-console-expert-3j81</guid>
      <description>&lt;p&gt;I used to use the console.log a lot. I still do, but I used to, too. However, my usage of the console.log has changed quite a bit over the years as I became more familiar with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#view-this-on-youtube"&gt;
  &lt;/a&gt;
  View This On YouTube
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://youtu.be/K0xB5Y8KxnI"&gt;https://youtu.be/K0xB5Y8KxnI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have ever used the console.log to validate or view your Javascript, you may be familiar with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// this will produce 100 and 100 in your console&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...but it can do so much more than just printing variables. Let's dive into how to properly use more advanced features within your console.log.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-name-value-pairs"&gt;
  &lt;/a&gt;
  Show Name Value Pairs
&lt;/h2&gt;

&lt;p&gt;Using the example above, you can see it does not give you a lot of information. It prints what you tell it to, but if you are working with dozens of variables, you may not know what each value represents. This is where name-value pairs come in. Try the same code above but with it as an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// this will produce {width: 100} and {height:100} so it is more easy to read&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// this will produce an object containing your objects: {width: 100} {height: 100}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#specific-console-messages"&gt;
  &lt;/a&gt;
  Specific Console Messages
&lt;/h2&gt;

&lt;p&gt;Sometimes, you need to show a specific type of console message. You may need to just display data or you may need to record a visual error message. This is pretty easy to accomplish just by changing what type of console you are using.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is a message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//standard display&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is information&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// another way to do a standard display&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is an error message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// highlight the message in red and flag it as an error&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is a warning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// highlight the message in orange and flag it as a warning&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will help you keep track of how you are using your messages. You can easily look at the console log and see what may be potentially breaking your application. The colors really help you wrap your head around how your application is interacting with your JavaScript code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#errors-and-assertions"&gt;
  &lt;/a&gt;
  Errors and Assertions
&lt;/h2&gt;

&lt;p&gt;The console.assert() method writes an error message to the console if the assertion is false. If the assertion is true, nothing happens. This can help you quickly troubleshoot true vs false and display specific error messages when your assertions do not happen as expected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// if no variable has been added, it will fail and show a console error message&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Message is not defined&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="c1"&gt;// the backticks are important for the message display since this assertions takes the input and displays it back to the script&lt;/span&gt;
                &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`"&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is not over 5 characters"`&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// will fail since there is no message&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;msg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// will fail since the message is less than 5 characters&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// will pass and not display a message&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#trace"&gt;
  &lt;/a&gt;
  Trace
&lt;/h2&gt;

&lt;p&gt;One of my favorite console abilities is the trace function. This function allows you to see what functions or methods were used to get to where you are. This is especially helpful when you are troubleshooting your code. You can add a trace in the function that is breaking to see how it got there to find out what is missing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="c1"&gt;// call our second dummy function&lt;/span&gt;
        &lt;span class="nx"&gt;two&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;two&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="c1"&gt;// write a trace here to see that this function was called from function one()&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// call our initial function that then calls our trace function&lt;/span&gt;
&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#grouping"&gt;
  &lt;/a&gt;
  Grouping
&lt;/h2&gt;

&lt;p&gt;Grouping can be helpful if you want to see your console.log grouped by specific preset sections. You can even collapse certain sections if needed to make it cleaner. They can always be expanded if needed but you can show one section at a time if you like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//create our group objects&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;groups&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Group One&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;One&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Group Two&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Four&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Five&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//loop through our groups automatically using JavaScript&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// loop through our groups manually&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Group One&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;One&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// collapse all groups within the Collapsed name&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupCollapsed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Collapsed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Four&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Five&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// end our groups&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Collapsed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Group One&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tables"&gt;
  &lt;/a&gt;
  Tables
&lt;/h2&gt;

&lt;p&gt;Another really cool thing you can do with the console is tables. This gives you the ability to write tabular data to the console so you can view it as it would be as an HTML table. Also, keep in mind that you can copy the tabular data and paste it into Excel and it will keep its structure. This is a pretty neat trick if you want to see how your data is rendered and how you can control that rendered data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// define our tabluar objects&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Test 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test1@example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123-456-7890&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Test 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test2@example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123-456-7890&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Test 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test3@example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123-456-7890&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// display the entire table&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// display only the name and email objects from our table data&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the previous console.log functions, you can view and manipulate your JavaScript data easily in the browser. You can create and modify your types of messages and create traces for you to troubleshoot better. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugger"&gt;
  &lt;/a&gt;
  Debugger
&lt;/h2&gt;

&lt;p&gt;So, having said that, there is a function we can use that can work with all of this and give you a pausable interface that allows you to set break points and skip or go into those breakpoints. This is the JavaScript function debugger. It is easy to set up and use and will help you debug your code the same way you do within VS Code if you use a debugger.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;debugger&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. Run that code before your other code to run through the browser's debugger interface as if you are debugging server-side code. It took me way too long to learn this simple command but it is an important part of my code arsenal now and is used on almost a daily basis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope these console.log tips help you in your next project. They are great to know and can help you speed up your JavaScript development time as well as reduce errors or at least give you a way to better troubleshoot those errors.  If you want to watch my videos when they premier, don't forget to &lt;a href="https://www.youtube.com/c/devdrawer"&gt;subscribe to Dev Drawer on YouTube&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>React Tailwindcss TypeScript Vite Starter Template</title>
      <author>Rohidul Islam</author>
      <pubDate>Sun, 28 Nov 2021 19:55:24 +0000</pubDate>
      <link>https://dev.to/rohidhub/react-tailwindcss-typescript-vite-starter-template-13f5</link>
      <guid>https://dev.to/rohidhub/react-tailwindcss-typescript-vite-starter-template-13f5</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5qyi0DJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rohid-hub/react-tailwindcss-typescript-vite-template/raw/main/public/react-tailwindcss-typescript-vite-template.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5qyi0DJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rohid-hub/react-tailwindcss-typescript-vite-template/raw/main/public/react-tailwindcss-typescript-vite-template.png" alt="React + Tailwindcss + TypeScript + Vite Starter Template File Structure" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a starter template for React + Tailwindcss + TypeScript + Vite.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project Structure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J6-vEv06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rohid-hub/react-tailwindcss-typescript-vite-template/raw/main/public/Files.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J6-vEv06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rohid-hub/react-tailwindcss-typescript-vite-template/raw/main/public/Files.png" alt="React + Tailwindcss + TypeScript + Vite Starter Template File Structure" width="404" height="730"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-this-template"&gt;
  &lt;/a&gt;
  How to use this template?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#use-templete"&gt;
  &lt;/a&gt;
  Use Templete
&lt;/h3&gt;

&lt;p&gt;You can use this template by just creating a new repo with this template by clicking on the "Use this template" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8LZQIYYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rohid-hub/react-tailwindcss-typescript-vite-template/raw/main/public/Use-Template-Screenshot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8LZQIYYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rohid-hub/react-tailwindcss-typescript-vite-template/raw/main/public/Use-Template-Screenshot.png" alt="Use-Template-Screenshot" width="691" height="368"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clone-this-repo"&gt;
  &lt;/a&gt;
  Clone this repo
&lt;/h3&gt;

&lt;p&gt;You can also clone this repo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/rohid-hub/react-tailwindcss-typescript-vite-template.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;After cloning the repo go to the directory and run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run the dev server by running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this go to &lt;code&gt;htpp://localhost:3000&lt;/code&gt; and you should see this screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5qyi0DJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rohid-hub/react-tailwindcss-typescript-vite-template/raw/main/public/react-tailwindcss-typescript-vite-template.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5qyi0DJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rohid-hub/react-tailwindcss-typescript-vite-template/raw/main/public/react-tailwindcss-typescript-vite-template.png" alt="React + Tailwindcss + TypeScript + Vite Starter Template" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If this template helps you then please don't forget to give this repo a star ☺️&lt;/p&gt;

&lt;p&gt;Thank you&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rohid-hub/react-tailwindcss-typescript-vite-template"&gt;Github Repo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>tailwindcss</category>
      <category>typescript</category>
      <category>vite</category>
    </item>
    <item>
      <title>Git and GitHub for beginners</title>
      <author>Ericawanja</author>
      <pubDate>Sun, 28 Nov 2021 19:37:25 +0000</pubDate>
      <link>https://dev.to/ericawanja/git-and-github-for-beginners-33a0</link>
      <guid>https://dev.to/ericawanja/git-and-github-for-beginners-33a0</guid>
      <description>&lt;p&gt;&lt;strong&gt;Topics covered&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Introduction to version control systems&lt;/li&gt;
&lt;li&gt;Git and GitHub&lt;/li&gt;
&lt;li&gt;Branching and merging&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ericawanja/how-to-contribute-on-github-2p18/edit"&gt;How to contribute to open source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ericawanja/how-to-contribute-on-github-2p18/edit"&gt;How to sync your Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Git and GitHub are must-learn tools for every software developer. These tools not only make it easy to track changes in your personal projects, but they also make it seamless to contribute and coordinate team projects. This guide is to help every beginner to harness their skills and have an easy time learning and using these tools. Let’s get into it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-a-version-control-system"&gt;
  &lt;/a&gt;
  What is a version control system?
&lt;/h1&gt;

&lt;p&gt;Version control systems are tools that are used by software developers to track and manage changes in a project. These tools keep track of the change made, who made and the time it was made. Thus, making it easy to turn back to the previous versions of a document and identify errors if they occur.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#types-of-version-control-systems"&gt;
  &lt;/a&gt;
  Types of version control systems
&lt;/h4&gt;

&lt;p&gt;There are three main types of VCS, namely;&lt;br&gt;
• Local version control system&lt;br&gt;
• Centralized version control system&lt;br&gt;
• Distributed version control system&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A local version&lt;/em&gt; control system is a type of VCs that uses the local database in your computer to store the changes made. It stores them as a patch where every patch contains the changes made to the file since the previous versions and not the entire file. Consequently, to see how the file appeared at any instance, you have to add all the relevant patches to come up with the document.&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4vcIA-bl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9z6317zxcmucgl9kozv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4vcIA-bl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9z6317zxcmucgl9kozv.png" alt="lvcs" width="677" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A centralized version&lt;/em&gt; control system uses a central server to store the repository. Thus every developer must be connected to the central server to access the repository and make the changes. Even though it is quite easy to maintain a single repository in the server, in case the central server crashes, you may risk losing the data which is a major drawback. An example of centralized VCS is &lt;a href="https://subversion.apache.org/"&gt;Apache Subversion&lt;/a&gt; which is abbreviated SVN.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ESVuaCBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dl9fhu1r5dmhvoj4layx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESVuaCBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dl9fhu1r5dmhvoj4layx.png" alt="cvcs" width="735" height="475"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#distributed-vcs"&gt;
  &lt;/a&gt;
  Distributed VCS
&lt;/h2&gt;

&lt;p&gt;Unlike the centralized VCS, every contributor has their own local copy of the main repository. Thus they can change, update and commit to their local repository without interfering with the main repository. The contributors copy the main repository by cloning it. Also, they have to stage, commit and push the changes to make them available for other contributors to see.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jjVDDl_b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yopqorgos3tno6v0sjh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jjVDDl_b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yopqorgos3tno6v0sjh.png" alt="dvcs" width="417" height="321"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After knowing what a version control system let is us dive into GIT&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-is-git"&gt;
  &lt;/a&gt;
  What is git?
&lt;/h1&gt;

&lt;p&gt;Git is an open-source distributed version control software that was created in 2005 by Linus Torvalds for the Linux kernel. It allows a team of developers to work on a project where each of them has a copy of their main repository which is located in the central server.&lt;/p&gt;

&lt;p&gt;Features of Git&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Free and open-source- you don’t have to pay anything to use Git. Also, its source code is available openly, hence you can modify it to your preference.&lt;/li&gt;
&lt;li&gt; Distributed development- Git supports cloning where the contributors can store a local copy of the  main repository&lt;/li&gt;
&lt;li&gt; Supports non-linear development – git supports independent lines of code known as branches, which can be staged, committed, and updated independently of the main codebase. Hence, branching gives a developer a safe space to implement and test something new without interfering with the codebase. The branches can later be merged into the codebase.&lt;/li&gt;
&lt;li&gt; Scalable- Git is quite scalable making it easy to handle an increase in the number of collaborators.&lt;/li&gt;
&lt;li&gt; Secure – this tool uses the secure hash function (SHA1) for naming and identifying objects in a repository. Hence every change is well monitored making it impossible to make changes without being noticed.
##What is GitHub?
&lt;em&gt;GitHub&lt;/em&gt; is a hosting company that was founded in 2008 that provides a platform for developers to host and share their projects. it provides access control and management features for every hosted project. Basically, it offers source code management among other features of git.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are many alternatives to GitHub such as GitLab and bitbucket. Consequently, you do not necessarily need GitHub to use git, but you require git to use GitHub.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#getting-started-with-git"&gt;
  &lt;/a&gt;
  Getting started with GIT
&lt;/h1&gt;

&lt;p&gt;You need to install git on your operating system. This &lt;a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"&gt;guide here&lt;/a&gt; will help you. &lt;br&gt;
Also, create a GitHub account, and let’s move on.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-git-github-woks-and-its-commands"&gt;
  &lt;/a&gt;
  How git GitHub woks and its commands
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yoL9DyvK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2ul8z2eou71kyiiw4w2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yoL9DyvK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2ul8z2eou71kyiiw4w2.jpg" alt="github" width="880" height="625"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's discuss the diagram briefly;&lt;br&gt;
After the user makes changes on the working file, git takes notice of the recently modified files. the user can check the modified files using &lt;strong&gt;git status&lt;/strong&gt; command. &lt;/p&gt;

&lt;p&gt;The modified files are &lt;strong&gt;added&lt;/strong&gt; to a staging area which acts as the temporary location for the files.&lt;/p&gt;

&lt;p&gt;All the staged files are ready to be &lt;strong&gt;committed/moved&lt;/strong&gt; to a local repository. Up to this point the changes are only visible on the developer’s local machine and cannot be accessed by other contributors online.&lt;br&gt;
To make the file available online, you need to host on an online hosting service such as GitHub. So, you need to &lt;strong&gt;push&lt;/strong&gt; the local repository to sync it with the remote repository.&lt;/p&gt;

&lt;p&gt;Take, an instance that the other contributors have pushed changes to the remote repository. You must sync your local repository with the remote repository to be up-to-date with the changes done. To do that you use &lt;strong&gt;Git Pull&lt;/strong&gt; command which will sync your local repository.&lt;br&gt;
Let’s now look at the git commands&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-git-status"&gt;
  &lt;/a&gt;
  1. Git status
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;git status&lt;/strong&gt; command lists all the files that have been modified recently and has not been added to the local repository. In the below case the Two Sum.md file has not yet been added to the local repository&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PS C:\Users\ERICA WANJA\Desktop\coding problems&amp;gt; git status
On branch main
Your branch is up to date with 'origin/main'.

Untracked files:
  (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)
        leetcode/Two Sum.md

nothing added to commit but untracked files present (use "git add" to track)
PS C:\Users\ERICA WANJA\Desktop\coding problems&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-git-add"&gt;
  &lt;/a&gt;
  2. Git add
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;git add&lt;/strong&gt; command is used to move the files to the staging area for committing. To stage your files use the commands below;&lt;br&gt;
&lt;strong&gt;git add filename&lt;/strong&gt;- to add a specific file&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add -all&lt;/code&gt; which is shortened to &lt;code&gt;git add -A&lt;/code&gt;  stages all the files, that is the new, modified and deleted files. On the other hand the &lt;code&gt;git add .&lt;/code&gt; command stages only the new and modified files excluding the deleted files.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-git-commit"&gt;
  &lt;/a&gt;
  3. Git commit
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt; moves the repository from the staging area to the local repository. In other words, it stores the snapshots of the changes made to the local repository instead of blindly copying the entire repository one more time. &lt;br&gt;
Every time you are making a commit you must give a brief message explaining the changes made.&lt;br&gt;
For example;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit –m “solved the two sum problem”
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-git-pull"&gt;
  &lt;/a&gt;
  4. Git pull
&lt;/h3&gt;

&lt;p&gt;The pull command helps to keep your local repo up-to-date with the remote repository. It up streams any change made by another contributor in the remote repository to your local repository.&lt;br&gt;
To pull the changes, you need to set the origin or parent remote repository&lt;br&gt;
Command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add origin LinkToTheRemoteRepo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After setting the origin remote repository, you can now pull the changes using the below command;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git pull origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*&lt;em&gt;Note: *&lt;/em&gt; it is a good practice that you pull the changes before the push command when working on a team’s project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-git-push"&gt;
  &lt;/a&gt;
  5. Git push
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git push&lt;/code&gt; command transfers the commits changes from the local repository to the remote repository(GitHub). Thus, the changes you have made will be published on the central repository and made available online. &lt;br&gt;
Commands&lt;br&gt;
&lt;code&gt;git push  origin main&lt;/code&gt; pushes the commits to the main or the master branch&lt;br&gt;
&lt;code&gt;git push origin branchName&lt;/code&gt; pushes the commits to the named branch.(you will learn about branches shortly)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#branching-and-merging-on-github"&gt;
  &lt;/a&gt;
  Branching and merging on GitHub
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Branching&lt;/strong&gt; simply means creating a different line of development (branch) where you can test and experiment new things before implementing them into the main codebase. Thus practicing branching will save you from messing up with production codebase.&lt;/p&gt;

&lt;p&gt;After testing the new changes on the branch, you can later on integrate them with the main line of development. This act of integrating the branches to the main line of development is known as &lt;strong&gt;merging.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#git-branch-commands"&gt;
  &lt;/a&gt;
  Git branch commands
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git branch branchname&lt;/code&gt; command is used to create a new branch&lt;br&gt;
&lt;code&gt;git checkout  branchname&lt;/code&gt; command is used to move to the specified branch. After checking out to the branch you can now commit and push the changes.&lt;br&gt;
&lt;code&gt;git checkout-b branchname&lt;/code&gt; command is the short form of the above two commands. It creates a new branch and moves (checks out) to it at the same time.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-remote-branches"&gt;
  &lt;/a&gt;
  Creating remote branches
&lt;/h2&gt;

&lt;p&gt;A locally created branch is only available on your device and not available to the other team members. You can push this local branch to make it available remotely using the below command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="err"&gt;–&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deleting-branches"&gt;
  &lt;/a&gt;
  Deleting branches
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git branch –d branchname&lt;/code&gt; command is used to delete branches after merging the changes.&lt;br&gt;
In some cases git may refuse to delete the branch if it has changes which have not been merged with the main branch which is a safety mechanism to prevent accidental loss of data. &lt;/p&gt;

&lt;p&gt;However, if you are sure you want top delete the branch with uncommitted changes, you can use the command below;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch –D branchname
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, you use the following command to delete a remote repository;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin --delete branchname
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I greatly appreciate that you stopped by. I hope the article has been of help. You can also this &lt;a href="https://dev.to/ericawanja/how-to-contribute-on-github-2p18/edit"&gt;article&lt;/a&gt; on how to contribute on GitHub and how to sync your repository.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>git</category>
      <category>github</category>
    </item>
  </channel>
</rss>
