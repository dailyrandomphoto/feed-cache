<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to create a taxi app like Uber, Grab in 2021? [Cost + Technology + Features]
</title>
      <author>Mohamed</author>
      <pubDate>Sat, 22 May 2021 07:10:34 +0000</pubDate>
      <link>https://dev.to/flutterappdev/how-to-create-a-taxi-app-like-uber-grab-in-2021-cost-technology-features-2d</link>
      <guid>https://dev.to/flutterappdev/how-to-create-a-taxi-app-like-uber-grab-in-2021-cost-technology-features-2d</guid>
      <description>&lt;p&gt;We often hear these questions from our potential customers [Entrepreneurs] - How can we create a ridesharing app like Uber, Grab? and how much does it cost to create one? &lt;/p&gt;

&lt;p&gt;And we thought you guys must have these questions on your mind too. &lt;/p&gt;

&lt;p&gt;So we decided to create an article answering all their queries. &lt;/p&gt;

&lt;p&gt;Why wait? Let's get started. &lt;/p&gt;

&lt;p&gt;So first things first. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-you-want-to-create-a-taxi-app-now"&gt;
  &lt;/a&gt;
  Why do you want to create a taxi app now?
&lt;/h2&gt;

&lt;p&gt;The answer is - People love getting services instantly, and they don't have much time waiting to get their needs done. &lt;/p&gt;

&lt;p&gt;Consider Uber - The Ridesharing Market Giant. &lt;/p&gt;

&lt;p&gt;Uber had total bookings of $57 billion in the year 2020 alone. It is real-time evidence of the success of instant / on-demand taxi services. &lt;/p&gt;

&lt;p&gt;But, Uber is a big company, how can I be successful? - You may ask.&lt;/p&gt;

&lt;p&gt;Here's a thing - "All great things are done by taking that first step." &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-simple-steps-to-be-successful-in-your-taxi-business"&gt;
  &lt;/a&gt;
  5 Simple steps to be successful in your taxi business
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Have a clear business plan&lt;/li&gt;
&lt;li&gt;Identify your market&lt;/li&gt;
&lt;li&gt;Analyze your customers paint points&lt;/li&gt;
&lt;li&gt;Provide exceptional customer service&lt;/li&gt;
&lt;li&gt;Then, scale your business&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You'll be successful in any business if you are passionate and patient. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-you-create-an-app-like-uber-grab-or-lyft"&gt;
  &lt;/a&gt;
  How can you create an app like Uber, Grab, or Lyft?
&lt;/h2&gt;

&lt;p&gt;Before diving into the taxi app development process, let's discuss some basics. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How many applications do you need to start and manage your business? &lt;/li&gt;
&lt;li&gt;Features to be incorporated&lt;/li&gt;
&lt;li&gt;5 Uber-like app development stages&lt;/li&gt;
&lt;li&gt;Finally, cost and a perfect solution to create an app like Uber, Grab. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#i-how-many-applications-your-taxi-business-need"&gt;
  &lt;/a&gt;
  I. How many applications your taxi business need?
&lt;/h3&gt;

&lt;p&gt;2 Mobile applications + an Admin panel. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Customers app [iOS and Android] &lt;/li&gt;
&lt;li&gt;Drivers app [iOS and Android] &lt;/li&gt;
&lt;li&gt;Admin panel [Web] &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Admin panel is for you [the owner of the platform] to manage the business operations at ease. &lt;/p&gt;

&lt;p&gt;Okay, now you know the basic details, let's get it to the features you need in your Uber-like app. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-to-be-incorporated-into-your-taxi-applications"&gt;
  &lt;/a&gt;
  Features to be incorporated into your taxi applications
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#customers-app"&gt;
  &lt;/a&gt;
  Customers app:
&lt;/h4&gt;

&lt;p&gt;Here're some of the crucial features that should be present in your customers' app,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple registration process&lt;/li&gt;
&lt;li&gt;Ride fare estimation&lt;/li&gt;
&lt;li&gt;Secure transaction&lt;/li&gt;
&lt;li&gt;SOS assistance&lt;/li&gt;
&lt;li&gt;Ride scheduling&lt;/li&gt;
&lt;li&gt;In-app chat&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#drivers-app"&gt;
  &lt;/a&gt;
  Drivers app:
&lt;/h4&gt;

&lt;p&gt;Here're some of the best features that your drivers can use in your application, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy registration&lt;/li&gt;
&lt;li&gt;Document verification &lt;/li&gt;
&lt;li&gt;Payout addition&lt;/li&gt;
&lt;li&gt;Route optimization &lt;/li&gt;
&lt;li&gt;Active/Inactive status&lt;/li&gt;
&lt;li&gt;In-app chat&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#admin-panel"&gt;
  &lt;/a&gt;
  Admin panel:
&lt;/h4&gt;

&lt;p&gt;Features of the admin panel help you manage the business operations effectively. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sub-admins management&lt;/li&gt;
&lt;li&gt;Driver and customers management&lt;/li&gt;
&lt;li&gt;Transactions management&lt;/li&gt;
&lt;li&gt;Geo-fencing&lt;/li&gt;
&lt;li&gt;Bookings management&lt;/li&gt;
&lt;li&gt;Vehicle category addition and removal&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#6-uberlike-app-development-stages"&gt;
  &lt;/a&gt;
  6 Uber-like app development stages
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Identify your target market and create a strong business plan. &lt;/li&gt;
&lt;li&gt;Choose the best taxi app development company.&lt;/li&gt;
&lt;li&gt;Choose a technology on which you want to create your app. &lt;/li&gt;
&lt;li&gt;Share your idea and sign an NDA. &lt;/li&gt;
&lt;li&gt;Develop and test your taxi app. &lt;/li&gt;
&lt;li&gt;Publish your app on App Store and Play Store. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We've seen the application count, the features, the development stages, etc. &lt;/p&gt;

&lt;p&gt;Now's the time to get into the real development process of Uber, Grab-like taxi apps. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-perfect-solution-and-the-cost-to-create-an-app-like-uber-grab"&gt;
  &lt;/a&gt;
  A perfect solution and the cost to create an app like Uber, Grab.
&lt;/h2&gt;

&lt;p&gt;Developing an app like Uber from scratch takes up to 5 to 6 months, and it'll cost you around 50 to 70 thousand dollars. &lt;/p&gt;

&lt;p&gt;So much money, right? &lt;/p&gt;

&lt;p&gt;But can you believe when I say that you can create an app just like Uber within 5000$? &lt;/p&gt;

&lt;p&gt;Yesss, it's possible. &lt;/p&gt;

&lt;p&gt;Right now, I'm going to show exactly how you can create your own Uber or Grab-like app using a solution that costs you way less than other options available. &lt;/p&gt;

&lt;p&gt;We offer a &lt;a href="https://www.rentallscript.com/uber-clone/"&gt;Uber clone app solution&lt;/a&gt; - Wooberly that can help you create an app like Uber, Grab, or Lyft with advanced technology like Flutter. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>I built this cool GitHub UI based DEV Portfolio</title>
      <author>Himanshu</author>
      <pubDate>Sat, 22 May 2021 06:58:56 +0000</pubDate>
      <link>https://dev.to/hima_khaitan/i-built-this-cool-github-ui-based-dev-portfolio-1n6f</link>
      <guid>https://dev.to/hima_khaitan/i-built-this-cool-github-ui-based-dev-portfolio-1n6f</guid>
      <description>&lt;h3&gt;
  &lt;a href="#the-design-idea"&gt;
  &lt;/a&gt;
  The Design Idea
&lt;/h3&gt;

&lt;p&gt;Spitting the truth, I really came across 1000s of dev portfolio üíª websites among which some inspired ü§ì too but that inspiration and design faded until I saw this amazing  üíØ &lt;a href="http://vscode-portfolio.vercel.app/"&gt;VS-Code Themed Portfolio Website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The designs I came across before this, only confused me and made me hop on one to another but this react app gave me the idea for &lt;a href="https://github-portfolio.vercel.app/"&gt;My Dev Portfolio&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I really was excited to built this when I first got this idea. And on the future part I am yet excited to flood it with cool features and functionality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-themed-dev-portfolio"&gt;
  &lt;/a&gt;
  GitHub Themed Dev Portfolio
&lt;/h3&gt;

&lt;p&gt;If you're interested in exploring the project yourself, there's the link to it üëâüèª &lt;a href="https://github-portfolio.vercel.app/"&gt;github-portfolio.vercel.app/&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/himakhaitan"&gt;
        himakhaitan
      &lt;/a&gt; / &lt;a href="https://github.com/himakhaitan/github-portfolio"&gt;
        github-portfolio
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h3&gt;
GitHub Themed Dev Portfolio&lt;/h3&gt;
&lt;p&gt;A GitHub themed developer portfolio website built with React.js and deployed on Vercel.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/github-portfolio/blob/main/public/a.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kz2kdbmy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/github-portfolio/raw/main/public/a.png" alt="Dev Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
Feature Roadmap&lt;/h3&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Themes and customizations
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Default Light&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Dark Dimmed&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Default Dark (default)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Interactive custom pages and tabs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For other features and themes suggestions, please open an issue.&lt;/p&gt;

&lt;h3&gt;
Running the Project&lt;/h3&gt;
&lt;p&gt;In the project directory, you can run:&lt;/p&gt;
&lt;h5&gt;
&lt;code&gt;npm start&lt;/code&gt;
&lt;/h5&gt;
&lt;p&gt;Runs the app in the development mode.&lt;br&gt;
Open &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; to view it in the browser.&lt;/p&gt;
&lt;p&gt;The page will reload if you make edits.&lt;br&gt;
You will also see any lint errors in the console.&lt;/p&gt;
&lt;h5&gt;
&lt;code&gt;npm run build&lt;/code&gt;
&lt;/h5&gt;
&lt;p&gt;Builds the app for production to the &lt;code&gt;build&lt;/code&gt; folder.&lt;br&gt;
It correctly bundles React in production mode and optimizes the build for the best performance.&lt;/p&gt;
&lt;p&gt;The build is minified and the filenames include the hashes.&lt;br&gt;
Your app is ready to be deployed!&lt;/p&gt;

&lt;h3&gt;
Editing the Code&lt;/h3&gt;
&lt;p&gt;All Github related components can be found in the &lt;code&gt;Components&lt;/code&gt; folder. To change the‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/himakhaitan/github-portfolio"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This is a React Application which will of course have a backend in future and will lately be converted into a MERN Stack Project. üë©‚Äçüíª&lt;/p&gt;

&lt;p&gt;From Layout to Experience I have been working on to make this look and feel like the GitHub. I will be adding cool stuffs to it like themes, timeline and many more. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-need-a-help"&gt;
  &lt;/a&gt;
  I Need A Help
&lt;/h3&gt;

&lt;p&gt;As you can see that some of the pages have dummy content in it and also the application is not at all responsive at the stage when it comes to Mobile viewing.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hima_khaitan" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6pp9-sSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HqJ6F18c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/629989/94e5c19e-ce31-4a7d-a20b-603def943e7d.jpeg" alt="hima_khaitan image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hima_khaitan/i-built-this-dark-ui-25ej" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I Built this Dark UI&lt;/h2&gt;
      &lt;h3&gt;Himanshu „Éª May 15 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#uiweekly&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;What other features would you like to see in this project? I would highly appreciate if you leave a feedback, criticism or suggestion of any kind. üôåüèª&lt;/p&gt;

&lt;p&gt;You can always fork this repo and the project is yet not complete. You can give a new accent to the project by applying your ideas onto it. ü§ùüèª&lt;/p&gt;

&lt;p&gt;I hope you find it interesting to contribute as the project is truly Open-Source. You may star this repo for future references. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Happily turning coffee into code ‚úÖ&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>react</category>
      <category>githunt</category>
    </item>
    <item>
      <title>A guide to planning a programming project.</title>
      <author>Siddharth</author>
      <pubDate>Sat, 22 May 2021 06:57:12 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/a-guide-to-planning-a-programming-project-3287</link>
      <guid>https://dev.to/siddharthshyniben/a-guide-to-planning-a-programming-project-3287</guid>
      <description>&lt;p&gt;In this post, I am going to explain how I plan my programming projects. Planning a project can make it easier for you to keep away from feature creep and recognize what to do next. Take some time to research this vital skill and you may see your productivity thrust upwards.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;‚Äé‚ÄéGood projects need a robust foundation, a dependable and reusable schema which can help you and potential contributors know what to do and what not to do, and when to do it.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Now let's get right into it!&lt;/p&gt;

&lt;p&gt;
  Table of Contents
  &lt;ul&gt;
&lt;li&gt;&lt;a href="#before-you-read"&gt;Before you read...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#sandboxing"&gt;Sandboxing&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-0-forget-everything-else"&gt;Step 0: Forget everything else&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-1-identify-the-pain-points"&gt;Step 1: Identify the Pain Points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-2-plan-your-features"&gt;Step 2: Plan your features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#listing"&gt;Listing&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-0-dump"&gt;Step 0: Dump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-1-create-a-bunch-of-sections"&gt;Step 1: Create a bunch of sections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-2-sort"&gt;Step 2: Sort!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-3-prioritize-and-add-dates"&gt;Step 3: Prioritize and add dates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#future"&gt;Future&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#before-you-read"&gt;
  &lt;/a&gt;
  Before you read...
&lt;/h2&gt;

&lt;p&gt;For this tutorial, we are going to plan the building of a Notes app as an example.&lt;/p&gt;

&lt;p&gt;I like to divide the planning into two parts: &lt;strong&gt;Sandboxing&lt;/strong&gt; and &lt;strong&gt;Listing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sandboxing&lt;/strong&gt; is the part where we &lt;strong&gt;determine all the possible features&lt;/strong&gt; your app will have. This will involve &lt;strong&gt;drawing a mind map&lt;/strong&gt;. I will use an online tool in this example, but only because my drawing is really bad üòÖ. Feel free to use any tool (paper works best).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listing&lt;/strong&gt; is the part where we &lt;strong&gt;take the sandboxed mind map and convert it into an actionable, prioritized todo list&lt;/strong&gt;. Once again, feel free to use any tools you like.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sandboxing"&gt;
  &lt;/a&gt;
  Sandboxing
&lt;/h2&gt;

&lt;p&gt;Before we start, create a mind map. The name of the root of the chart should be the name of whatever you are building. It should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0lf9SxHg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asryan5jxqpdqu3x8eln.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0lf9SxHg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asryan5jxqpdqu3x8eln.png" alt="root"&gt;&lt;/a&gt; &lt;/p&gt;
The base



&lt;h3&gt;
  &lt;a href="#step-0-forget-everything-else"&gt;
  &lt;/a&gt;
  Step 0: Forget everything else
&lt;/h3&gt;

&lt;p&gt;You may have some great piecemeal ideas which you want to add. For now, &lt;strong&gt;forget them&lt;/strong&gt; or write them down somewhere.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-identify-the-pain-points"&gt;
  &lt;/a&gt;
  Step 1: Identify the Pain Points
&lt;/h3&gt;

&lt;p&gt;First, draw a branch for Pain Points:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tVbqx9SF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z9g1f8bxqej5ilukfxo2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tVbqx9SF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z9g1f8bxqej5ilukfxo2.png" alt="pain points branch"&gt;&lt;/a&gt;&lt;/p&gt;
The pain points branch


 

&lt;p&gt;Pain points are the "problems" that your project solves. Usually, projects have a single pain point but you can come up with more. For example, Netflix removed the "pain" of traditional movie rentals. Make a new branch for each pain point you make.&lt;/p&gt;

&lt;p&gt;You can think of this as the base of the outline. It is the central focus of everything, so put some thought into this.&lt;/p&gt;

&lt;p&gt;One way of coming up with pain points is to compare it with other ways of doing what your project does. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Note: When you are starting out, don't compare your project with other projects, just compare it with what someone would do if there were no other projects like this. When you have a working project, you can think of comparisons.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;For our example, let's compare our Notes app with a piece of paper and make some pain points: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8SttFOx7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4t7l2hojwkgcujae9tl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8SttFOx7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4t7l2hojwkgcujae9tl.png" alt="pain points"&gt;&lt;/a&gt; &lt;/p&gt;
Basic pain points



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;If you just want to build something that you think is awesome, that‚Äôs superb, and don't let something like finding 'pain points' stop you. However, each piece of software must have a central focus. So locate that earlier before you start building anything! You can even add your piecemeal ideas mentioned in &lt;a href="#step-0-forget-everything-else"&gt;Step 0&lt;/a&gt;!&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#step-2-plan-your-features"&gt;
  &lt;/a&gt;
  Step 2: Plan your features
&lt;/h3&gt;

&lt;p&gt;Now, we can start planning features which our software will offer. &lt;/p&gt;

&lt;p&gt;Keeping our pain point(s) in mind, we can start to think of what cool features we want our software to have. As we create this primary "layer" of features, we should constantly be asking ourselves, "Is this feature going to help solve our paint point?" If not, it‚Äôs probably a waste of our time to code it. This should keep feature creep in check.&lt;/p&gt;

&lt;p&gt;On your mind map, add a new branch for features. Then, add sub branches to list every feature you want. You can also link each branch to it's pain point.&lt;/p&gt;

&lt;p&gt;Depending on your project, you might want to add sub features. The more layers the better, because it helps to have small actionable tasks rather than big ones. Keep going until you feel that a component is small enough that you can build it easily. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Note: You can even add your piecemeal ideas mentioned in &lt;a href="#step-0-forget-everything-else"&gt;Step 0&lt;/a&gt;!&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;For our example, let's list our features of our note taking app: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ZPnDVEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fh40zj2c9we1y33krl87.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ZPnDVEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fh40zj2c9we1y33krl87.png" alt="features branch"&gt;&lt;/a&gt;&lt;/p&gt;
Now this is getting interesting.



&lt;p&gt;That's about it for the &lt;strong&gt;Sandboxing&lt;/strong&gt; part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#listing"&gt;
  &lt;/a&gt;
  Listing
&lt;/h2&gt;

&lt;p&gt;Now, we have to create a Todo list of stuff to do. I'll be using an app, but you can choose anything.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ns53c2bg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zetvpta8oimxc4lqdsiq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ns53c2bg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zetvpta8oimxc4lqdsiq.png" alt="The base"&gt;&lt;/a&gt;&lt;/p&gt;
The todo list


 

&lt;h3&gt;
  &lt;a href="#step-0-dump"&gt;
  &lt;/a&gt;
  Step 0: Dump
&lt;/h3&gt;

&lt;p&gt;List everything in the features branch of your mind map into your todo list in a new section called &lt;strong&gt;Dump&lt;/strong&gt; or &lt;strong&gt;Icebox&lt;/strong&gt;. Don't mind sorting or prioritizing ‚Äì just dump. The only important thing is that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;All features have been accounted for&lt;/li&gt;
&lt;li&gt;The features are detailed enough for you to understand&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's how it looks like for the example notes app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eNKLEjKh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1fk3te2bovqijigvq24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eNKLEjKh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1fk3te2bovqijigvq24.png" alt="Example"&gt;&lt;/a&gt;&lt;/p&gt;
There's more... too much to show



&lt;h3&gt;
  &lt;a href="#step-1-create-a-bunch-of-sections"&gt;
  &lt;/a&gt;
  Step 1: Create a bunch of sections
&lt;/h3&gt;

&lt;p&gt;Create some sections which will help you prioritize tasks. The sections may vary with projects, but I like to make 3 sections: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Basic&lt;/strong&gt; (the bare minimum features)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Useful&lt;/strong&gt; (the stuff which differentiates your software from basic alternatives)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bonus&lt;/strong&gt; (the stuff which differentiates your software from other similar software)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kqKz5Tnb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0481d9js6chm51unz9mg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kqKz5Tnb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0481d9js6chm51unz9mg.png" alt="Screen Shot"&gt;&lt;/a&gt;&lt;/p&gt;
After creating sections

 

&lt;h3&gt;
  &lt;a href="#step-2-sort"&gt;
  &lt;/a&gt;
  Step 2: Sort!
&lt;/h3&gt;

&lt;p&gt;Now, you can take your tasks from the &lt;strong&gt;dump&lt;/strong&gt; and place them into their own sections. Put the bare minimum tasks into the basic section, and so on.&lt;/p&gt;

&lt;p&gt;Here's how it looks like for the notes app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xzlEK_d---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xas0lnx7szddsn9evzgg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xzlEK_d---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xas0lnx7szddsn9evzgg.png" alt="Screen Shot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-prioritize-and-add-dates"&gt;
  &lt;/a&gt;
  Step 3: Prioritize and add dates
&lt;/h3&gt;

&lt;p&gt;Even in the sections some tasks have a higher importance. For example, creating notes has a higher priority than deleting them and so on. Now you have to prioritize your tasks based on importance. &lt;/p&gt;

&lt;p&gt;Here's how it looks like for the notes app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bnzex1zC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7exm3mkav6epf9hd8lf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bnzex1zC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7exm3mkav6epf9hd8lf.png" alt="Screen Shot"&gt;&lt;/a&gt;&lt;/p&gt;
Color represents priority



&lt;p&gt;The next thing to do is add due dates to each task. You have to guess how long a feature takes and add a date accordingly. If you are unsure of how long tasks take, just double your estimates. &lt;/p&gt;

&lt;p&gt;If you are starting right away, you might add "today" as the date for the first tasks in the basic section, "tomorrow" for the second and third tasks,  and so on.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;You might want to make similar functionality on the same day, and that's totally ok. For example you might want to make the note tagging and note coloring feature on the same day because they are easy to do together, and you can do that&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Here's how it looks for the notes app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---uX2JH5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t75zr9vit1cn90axgil4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---uX2JH5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t75zr9vit1cn90axgil4.png" alt="Screen Shot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it! Now you got a actionable todo list and you can start on your project!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future"&gt;
  &lt;/a&gt;
  Future
&lt;/h2&gt;

&lt;p&gt;Now that you've made a todo list, you can do these things to further improve your workflow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can create an &lt;strong&gt;issues&lt;/strong&gt; and a &lt;strong&gt;pull requests&lt;/strong&gt; section, and add all new issues and PRs to your todo. You could even automate! (Tell me in the comments if you want a tutorial for that)&lt;/li&gt;
&lt;li&gt;You could create a &lt;strong&gt;in progress&lt;/strong&gt;, an &lt;strong&gt;up next&lt;/strong&gt; and an &lt;strong&gt;in review&lt;/strong&gt; section which will really be useful for teams&lt;/li&gt;
&lt;li&gt;Instead of checking off tasks, you could create a &lt;strong&gt;done&lt;/strong&gt; section so you can stay motivated.&lt;/li&gt;
&lt;li&gt;Whenever an idea pops up, add it to the &lt;strong&gt;dump&lt;/strong&gt; section. Once you've really thought about the feature and are sure that it is useful, you could add it to one of the sections&lt;/li&gt;
&lt;li&gt;And much more! It all depends on &lt;strong&gt;you&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>productivity</category>
      <category>planning</category>
    </item>
    <item>
      <title>5 Vs code extension's to increase your developer productivity</title>
      <author>Ratul</author>
      <pubDate>Sat, 22 May 2021 06:50:52 +0000</pubDate>
      <link>https://dev.to/ratuloss/5-vs-code-extension-s-to-increase-your-developer-productivity-52f0</link>
      <guid>https://dev.to/ratuloss/5-vs-code-extension-s-to-increase-your-developer-productivity-52f0</guid>
      <description>&lt;p&gt;Hey there developers. How is it going. Today in this blog, I will be showing you 5 useful vs code extension's which will increase your developer productivity. So if you are interested, continue reading...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-bookmarks"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks"&gt;Bookmarks&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I use this extension all the time when I am working on any project. Basically this extension allows you to add bookmarks in specific lines in a file. You can also add a note why you have added this bookmark. And you can also explore the bookmarks in the bookmarks tab. Which will show you all the bookmarks in a particular project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QGrSZHN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oas92hj28yxqe6nd5qhi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QGrSZHN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oas92hj28yxqe6nd5qhi.jpg" alt="Vs Code extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-better-comments"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments"&gt;Better Comments&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This extension is super helpful if you want to improve code commenting. By default the comments have a dimmed color. By using this extension. You can make them colorful for any specific purpose. Like if there is something todo, you can use the TODO tag before writing the comment. Like so - &lt;code&gt;// TODO: what to do&lt;/code&gt;. For more information's about usage, please check out the better comments documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GDO1uSra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vl61n8t8hpid0iagbjyk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GDO1uSra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vl61n8t8hpid0iagbjyk.jpg" alt="Vs code extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-code-spell-checker"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker"&gt;Code Spell Checker&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you misspell any word in vs code, by default it doesn't shows any warning if the spelling is not correct. By using this extension, You can will get a warning message in the problems tab if any of the word is not spelled correctly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RQ_Lv6dE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/in8s228attz72h6s6jwh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RQ_Lv6dE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/in8s228attz72h6s6jwh.jpg" alt="Vs Code Extensions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-prettier"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This extension formats your unformatted code. So you don't need to focus on formatting you code. Prettier will do it for you. To start formatting your code with prettier, make sure you add these settings in your &lt;code&gt;settings.json&lt;/code&gt; after installing it. And you will be good to go.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"editor.formatOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.defaultFormatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"esbenp.prettier-vscode"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-thunder-client"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client"&gt;Thunder Client&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Are you still using Postman for api testing? Well that's fine. Postman does this duty just perfectly. But for me, when I am working on any project in vs code, I do like to be in vs code. I don't like to open any other external application, it effects on my productivity. So I use this cool Vs code extension. It works same as postman. Nothing new, you can send request to any kind of api from vs code. It really helps me to increase my developer productivity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GbCsFHej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8urq2g0b2hzh8gpexq8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GbCsFHej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8urq2g0b2hzh8gpexq8.jpg" alt="Vs code Extensions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These are the productivity vs code extension's, Which I use all the time and wanted to share with you guys. Now I wanted to know what are your productivity extension's? Let me know in the discussions. And make sure you follow me for all the cool article just like that.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  :)
&lt;/h1&gt;

&lt;p&gt;Get Me on -&amp;gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ratul-devr"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Ratul_devR"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/developer-ratul-407352211/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/minhazurrahaman.ratul/"&gt;Facebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vscode</category>
      <category>programming</category>
      <category>productivity</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Appwrite VS Code extension</title>
      <author>Alex Weininger</author>
      <pubDate>Sat, 22 May 2021 06:28:08 +0000</pubDate>
      <link>https://dev.to/streamlux/appwrite-vs-code-extension-1356</link>
      <guid>https://dev.to/streamlux/appwrite-vs-code-extension-1356</guid>
      <description>&lt;p&gt;In my very first post to dev.to I'll be talking about the Appwrite for VS Code extension, what you can use it for, and some features I hope to include in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;The team at Streamlux chose to utilize &lt;a href="https://appwrite.io/"&gt;Appwrite&lt;/a&gt; for many good reasons. One of my favorite reasons was that with Appwrite being relatively new, we'd have a great opportunity to contribute to the open source Appwrite community.&lt;/p&gt;

&lt;p&gt;To quickly summarize what Appwrite is, from their website:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Appwrite is an open-source, self-hosted Backend-as-a-Service that aims to make app development &lt;strong&gt;easier&lt;/strong&gt; with SDKs available in a variety of programming languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, after a few weeks after using Appwrite, our first contribution to the Appwrite community is the Appwrite extension for Visual Studio Code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/streamlux/vscode-appwrite"&gt;View Appwrite for VS Code on GitHub&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://marketplace.visualstudio.com/items?itemName=Streamlux.vscode-appwrite"&gt;View on the Visual Studio Marketplace&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#current-features"&gt;
  &lt;/a&gt;
  Current features
&lt;/h1&gt;

&lt;p&gt;Here are the features we've built so far! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiproject-support"&gt;
  &lt;/a&gt;
  Multi-project support
&lt;/h3&gt;

&lt;p&gt;If you happen to be working with more than one Appwrite project, then the extension has you covered! Easily switch between as many projects as you'd like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SisJQIWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d38off1f69l8xg7nixmb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SisJQIWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d38off1f69l8xg7nixmb.gif" alt="Multi project gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;VS Code theme: &lt;a href="https://marketplace.visualstudio.com/items?itemName=wesbos.theme-cobalt2"&gt;Cobalt2&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h3&gt;

&lt;p&gt;The comprehensive and robust database features that Appwrite &lt;br&gt;
 provides were one of the things that ultimately led to the team and I choosing it to power Streamlux.&lt;/p&gt;

&lt;p&gt;With the extension, you can manage databases, collections, and documents.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7mk2LiX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3629ya0lt79c9tup03uh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7mk2LiX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3629ya0lt79c9tup03uh.png" alt="Delete document image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also add, edit, and remove rules and permissions right from VS Code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xsTt3nbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53ez5bl6du3srp5mrag4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xsTt3nbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53ez5bl6du3srp5mrag4.png" alt="Database permissions image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#users"&gt;
  &lt;/a&gt;
  Users
&lt;/h3&gt;

&lt;p&gt;Another feature that makes using Appwrite so simple are the features surrounding users. From authentication, to managing user sessions and preferences, Appwrite makes it a breeze.&lt;/p&gt;

&lt;p&gt;And we strive to match this experience in the extension. Easily view project users, as well as create new ones.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--psDnsybg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqcdtfuvtybcn7mazgon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--psDnsybg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqcdtfuvtybcn7mazgon.png" alt="Users image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#health"&gt;
  &lt;/a&gt;
  Health
&lt;/h3&gt;

&lt;p&gt;And last but not least, you can monitor the health and status of all the services that make up your Appwrite project to make sure everything is running properly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---4t9Hprf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0myqf9lhiefych25xh7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---4t9Hprf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0myqf9lhiefych25xh7.png" alt="Health image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-features"&gt;
  &lt;/a&gt;
  Future features
&lt;/h2&gt;

&lt;p&gt;One of the recently added features to Appwrite that also might be the best feature is &lt;a href="https://appwrite.io/docs/functions"&gt;Appwrite Functions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We think we can provide a great experience for creating and debugging Appwrite Functions in VS Code. And so the next large feature we want to add is functions support.&lt;/p&gt;

&lt;p&gt;If you've made it this far through my first dev.to post, thank you for reading!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/streamlux/vscode-appwrite"&gt;View Appwrite for VS Code on GitHub&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://marketplace.visualstudio.com/items?itemName=Streamlux.vscode-appwrite"&gt;View on the Visual Studio Marketplace&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, I must mention it because the Appwrite team members provide absolute top tier support in their amazing &lt;a href="https://appwrite.io/discord"&gt;Discord&lt;/a&gt;. If you're interested in Appwrite or already use Appwrite I highly recommend joining :)&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>30daysofappwrite</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Appwrite 0.8: ARM Support</title>
      <author>kodumbeats</author>
      <pubDate>Sat, 22 May 2021 06:27:38 +0000</pubDate>
      <link>https://dev.to/appwrite/appwrite-0-8-arm-support-59bc</link>
      <guid>https://dev.to/appwrite/appwrite-0-8-arm-support-59bc</guid>
      <description>&lt;p&gt;Appwrite 0.8 brings support for ARM64 processors - you can now install Appwrite on Amazon's &lt;strong&gt;Graviton2&lt;/strong&gt; instances, &lt;strong&gt;Apple M1&lt;/strong&gt; systems (without Rosetta 2), Raspberry Pi 4 SoCs, or any other 64-bit ARM device! To appreciate ARM's position in today's computing, let's take a brief tour of the history of CPU architectures. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Appwrite is an open-source, self-hosted Backend-as-a-Service that aims to make app development &lt;strong&gt;easier&lt;/strong&gt; with SDKs available in a variety of programming languages. We love chatting about Appwrite, Aliens üëΩ or Unicorns ü¶Ñ over at &lt;a href="https://appwrite.io/discord"&gt;Discord&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#beginning-with-the-8086"&gt;
  &lt;/a&gt;
  Beginning with the 8086
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gcp5Os70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvn9jvevyf2tp96hq4nc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gcp5Os70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvn9jvevyf2tp96hq4nc.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by Thomas Nguyen - &lt;a href="https://commons.wikimedia.org/w/index.php?curid=46809082"&gt;Own work&lt;/a&gt;, CC BY-SA 4.0, &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Intel 8086 processor was released in 1978 and was carried into households with the widespread success of the IBM 5150 Personal Computer, &lt;strong&gt;the&lt;/strong&gt; PC. Intel then built on the success of the 8086 with following processors: the 80286, 80386, 80486, and more, all the way through Pentium and beyond. The set of instructions used to command these processors, known now as "x86", is still supported on chips today - any assembly program written for the 8086 will run out-of-the-box on modern Intel processors, albeit much, &lt;em&gt;much&lt;/em&gt;, &lt;strong&gt;much&lt;/strong&gt; faster.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ever wonder how AMD is able to make x86-compatible processors without lawsuits from Intel? The legal landscape around the x86 architecture is fascinating - check out &lt;a href="https://jolt.law.harvard.edu/digest/intel-and-the-x86-architecture-a-legal-perspective"&gt;this commentary&lt;/a&gt; from Harvard Law to learn more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first "x86" instruction sets supported very basic processor-level operations: reading/writing from memory, basic arithmetic, and control flow logic, to name a few. To meet ever-growing computing demands, Intel needed to expand the x86 instruction set to handle more complex operations like handling memory in chunks, complicated maths like square root, logarithms, and trigonometry, and more. While the instruction set grew, so too did the power requirements. The computing industry was fine with power consumption, so long as their computers ran faster, that is, until power consumption mattered - the era of smartphones.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-tale-of-two-arms"&gt;
  &lt;/a&gt;
  The Tale of Two ARMs
&lt;/h2&gt;

&lt;p&gt;Smartphones require a specific balance of power consumption and performance, and x86 processors didn't fit the bill - the complex x86 instructions required extra electricity, logic gates, and silicon surface area, and mobile computing had opposite requirements. RISC (Reduced Instruction Set Computers) processors took a more specialized approach: only include the basic instructions required for a modern computer, and make those instructions &lt;em&gt;highly optimized&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;ARM, an English semiconductor company, designs RISC instruction sets and licenses them to manufacturers to handle production.You probably recognize a few of these manufactors: Samsung, Broadcom, Qualcomm, and NVidia, to name a few. These companies handle the manufacturing and distribution of ARM-based systems, including smartphones, tablets, smart TVs, washing machines, cars, printers, and so much more. &lt;/p&gt;

&lt;p&gt;Low-power processors aren't just for mobile/IoT devices anymore, nor are they less capable than x86 computers. Most notably, the Apple M1 (ARM-based) has made a big splash with ARM now powering iPads, Macbooks, Mac Minis, and now iMacs, with other manufacturers set to follow in their footsteps. Amazon has also been a pioneer of ARM in the datacenter - Amazon employs a 64-core(!) Neoverse N1 ARM processor in their &lt;a href="https://aws.amazon.com/ec2/graviton/"&gt;Graviton2&lt;/a&gt; virtual servers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's Next?
&lt;/h2&gt;

&lt;p&gt;You can get started with your favorite 64-bit ARM device now - follow the &lt;a href="https://appwrite.io/docs/installation"&gt;installation instructions&lt;/a&gt; to get started. The Appwrite community is very excited about Appwrite apps which are now possible thanks to Appwrite on RPi (especially me), and we've installed it on a variety of operating systems: PiOS, Ubuntu, and BalenaOS. You can see Appwrite running on a Raspberry Pi 4 2GB with Ubuntu 20.04:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3kS5LB9C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/md3tuuj5xehlsps14bhu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3kS5LB9C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/md3tuuj5xehlsps14bhu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What are you most excited to build? Do you have any homelab projects which just became easier thanks to Appwrite on ARM? Let us know on &lt;a href="https://appwrite.io/discord"&gt;Discord&lt;/a&gt;, &lt;a href="https://twitter.com/appwrite_io"&gt;Twitter&lt;/a&gt;, &lt;a href="https://dev.to/appwrite"&gt;Dev.to&lt;/a&gt;, or anywhere you find a friendly Appwriter. :) Also, the &lt;a href="https://github.com/appwrite/awesome-appwrite"&gt;awesome-appwrite&lt;/a&gt; repo keeps growing with new tutorials, demos, videos, and more!&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>raspberrypi</category>
      <category>serverless</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Applying Code Linting in Test Automation Frameworks</title>
      <author>Raghwendra Sonu</author>
      <pubDate>Sat, 22 May 2021 05:52:48 +0000</pubDate>
      <link>https://dev.to/raghwendrasonu/applying-code-linting-in-test-automation-frameworks-9am</link>
      <guid>https://dev.to/raghwendrasonu/applying-code-linting-in-test-automation-frameworks-9am</guid>
      <description>&lt;p&gt;The QA team should use one of the linter e.g. checkstyle to apply a coding standard in the Automation framework.&lt;/p&gt;

&lt;p&gt;This helps us keep the code clean and consistent, make pull requests shorter and easier, overall saving us time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to run the linter&lt;/strong&gt;&lt;br&gt;
You can run the linter at any time with mvn checkstyle:checkstyle. This will log any errors. It will also generate a html report in the project folder which is at /target/site/checkstyle.html.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use the git hook&lt;/strong&gt;&lt;br&gt;
To use this you need to run this command - git config core.hooksPath .githooks so that git looks in the .githooks folder in the project for hooks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/raghwendra-sonu/GitHooks"&gt;https://github.com/raghwendra-sonu/GitHooks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you run this, from then on the linter will run automatically before a commit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Optional Intellij plugin&lt;/strong&gt;&lt;br&gt;
There is an Intellij plugin for checkstyle too.&lt;br&gt;
Add it by clicking Preferences ‚Üí Plugins , search for ‚Äúcheckstyle‚Äù and install CheckStyle-IDEA plugin&lt;br&gt;
Once it‚Äôs installed you need to configure it - Preferences ‚Üí Tools ‚Üí Checkstyle. Select our custom checkstyle.xml file [The xml file is in the root of the project]:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1h3FlR7g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/baedyfzwgdbcawywyn9a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1h3FlR7g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/baedyfzwgdbcawywyn9a.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you will have a checkstyle tool window at the bottom of your IDE.&lt;/p&gt;

&lt;p&gt;Use the checkstyle file as a formatter scheme&lt;br&gt;
This is another optional but helpful step.&lt;/p&gt;

&lt;p&gt;You can avoid any linter errors by importing our checkstyle file as a scheme in Intellij‚Äôs code formatter. &lt;/p&gt;

&lt;p&gt;To use it click Preferences ‚Üí Editor ‚Üí Code Style ‚Üí Java&lt;/p&gt;

&lt;p&gt;Click the cog button then Import Scheme ‚Üí Checkstyle Configuration then select the checkstyle.xml file:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--skCwtkf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzgtepbwn7tlsbkdqse2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--skCwtkf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzgtepbwn7tlsbkdqse2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now when you generate new code or format existing code it will apply the linter rules to it. To format your code just select the code/files then click Code ‚Üí Reformat Code.&lt;/p&gt;

</description>
      <category>api</category>
      <category>automation</category>
      <category>linting</category>
    </item>
    <item>
      <title>How to use Flipper for Mobile UI element identification</title>
      <author>Raghwendra Sonu</author>
      <pubDate>Sat, 22 May 2021 05:39:05 +0000</pubDate>
      <link>https://dev.to/raghwendrasonu/how-to-use-flipper-for-mobile-ui-element-identification-53oo</link>
      <guid>https://dev.to/raghwendrasonu/how-to-use-flipper-for-mobile-ui-element-identification-53oo</guid>
      <description>&lt;p&gt;&lt;strong&gt;Download&lt;/strong&gt;&lt;br&gt;
Download from: &lt;a href="https://fbflipper.com/"&gt;https://fbflipper.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AUT:&lt;/strong&gt; Woolworths Shopping App&lt;/p&gt;

&lt;p&gt;Find Activity and element Id&lt;br&gt;
Connect your device to your Mac and open the app&lt;/p&gt;

&lt;p&gt;Open Flipper&lt;br&gt;
In the ‚ÄúWOOLWORTHS‚Äù panel (on the left hand side), tap ‚ÄúLayout‚Äù to enable it&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qyT6SHoT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cv5nm9v9s9nkwfmunhjo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qyT6SHoT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cv5nm9v9s9nkwfmunhjo.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To find the Activity that launches a screen, open the app and navigate to that same screen&lt;/p&gt;

&lt;p&gt;Flipper should now show you the name of the Activity&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v8ySY47V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rl9tdix5i1lpg7j8tqk1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v8ySY47V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rl9tdix5i1lpg7j8tqk1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To find an Element Id, open the app and navigate to the screen &lt;/p&gt;

&lt;p&gt;Once on the screen return to Flipper&lt;/p&gt;

&lt;p&gt;You can now use the arrow keys to navigate through each element until the correct one&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AuDy6q_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5874k161v6ompzm9ozre.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AuDy6q_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5874k161v6ompzm9ozre.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;View Shared Preference details&lt;br&gt;
Connect your device to your Mac and open the app&lt;/p&gt;

&lt;p&gt;Open Flipper&lt;br&gt;
In the ‚ÄúWOOLWORTHS‚Äù panel (on the left hand side), tap ‚ÄúShared Preference Viewer‚Äù to enable it&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--22Dk8J8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqnxg5gfmu4gpl9gcit6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--22Dk8J8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqnxg5gfmu4gpl9gcit6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select any dropdown you want to see the different values stored in the app&lt;/p&gt;

&lt;p&gt;If you want to see the user details saved in the app, select ‚ÄúaccountPrefs‚Äú from the dropdown&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pe-2sZAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gy1uq4vtjznrxx78zfvi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pe-2sZAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gy1uq4vtjznrxx78zfvi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flipper</category>
      <category>ui</category>
      <category>testing</category>
      <category>android</category>
    </item>
    <item>
      <title>The Ember Times - Issue No. 180</title>
      <author>The Ember Times</author>
      <pubDate>Sat, 22 May 2021 05:28:06 +0000</pubDate>
      <link>https://dev.to/embertimes/the-ember-times-issue-no-180-jo</link>
      <guid>https://dev.to/embertimes/the-ember-times-issue-no-180-jo</guid>
      <description>&lt;p&gt;üëã Emberistas! üêπ&lt;/p&gt;

&lt;p&gt;Ember's 10 year anniversary, Prettier for Handlebars support, Embroider in 3.5 weeks, GAAD pledge, quickstart to authentication, built with Ember: Fleetbase, and new and shiny add-ons ‚ú®&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#happy-10-year-anniversary-emberjs"&gt;
  &lt;/a&gt;
  Happy 10 year anniversary, Ember.js! üéâ
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dxVHVZT8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E1XJGCKXEAAn5kY.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Hn_Adxc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1158999373658951680/deOa-COd_normal.jpg" alt="Natasha Fel profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Natasha Fel
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @natalifel
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      We‚Äôre ready!!! &lt;a href="https://twitter.com/hashtag/emberjs"&gt;#emberjs&lt;/a&gt; 10YO anniversary 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:24 PM - 14 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1393240918258499589" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1393240918258499589" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1393240918258499589" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Many thanks to &lt;a href="https://twitter.com/NataliFel"&gt;Natasha Fel&lt;/a&gt; and &lt;a href="https://github.com/andreyfel"&gt;Andrey Fel (@andreyfel)&lt;/a&gt; for sharing their photos from &lt;a href="https://emberjs-nn.timepad.ru/event/1618665/"&gt;Ember Nizhny Novgorod's Meetup&lt;/a&gt;, which featured a celebratory Nizhny Novgorod Tomster cake for Ember's big anniversary! Check out more photos from the meetup &lt;a href="https://vk.com/album-183353390_279540779"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#prettier-for-handlebars-support"&gt;
  &lt;/a&gt;
  &lt;a href="https://prettier.io/blog/2021/05/09/2.3.0.html#ember--handlebars"&gt;Prettier for Handlebars support üôå&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Prettier can now officially format HTML templates with Handlebars (HBS) in the newly released &lt;a href="https://prettier.io/blog/2021/05/09/2.3.0.html#ember--handlebars"&gt;version 2.3.0&lt;/a&gt;. Thank you to &lt;a href="https://github.com/dcyriller"&gt;Cyrille David (@dcyriller)&lt;/a&gt; for pushing this initiative, which started in 2017, through the finish line.&lt;/p&gt;

&lt;p&gt;Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and reprinting it with its own rules that take the maximum line length into account, wrapping code when necessary. This removes all bikeshedding on what rules we should have or shouldn‚Äôt have and instead provides one standard for everyone to use by default.&lt;/p&gt;

&lt;p&gt;In order to keep your project aligned with Prettier‚Äôs formatting we can use the Ember Template Lint plugin: &lt;a href="https://github.com/ember-template-lint/ember-template-lint-plugin-prettier"&gt;ember-template-lint-plugin-prettier&lt;/a&gt;. This plugin defines a &lt;em&gt;single rule&lt;/em&gt; that rule will compare your code with Prettier's output.&lt;/p&gt;

&lt;p&gt;So try it out today by using the &lt;strong&gt;glimmer parser&lt;/strong&gt; for Prettier!  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#embroider-from-zero-to-route-splitting-in-35-weeks"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/bendemboski/embroider-from-zero-to-route-splitting-in-3-5-weeks-5abo"&gt;Embroider: from zero to route splitting in 3.5 weeks üìù&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you have been part of the Ember community for a while now and have read &lt;a href="https://blog.emberjs.com/the-ember-times-issue-179#toc_readers-question-what%E2%80%99s-the-current-status-of-the-embroider-project-%F0%9F%A7%B5"&gt;The Ember Times' last issue&lt;/a&gt;, you have probably heard about &lt;a href="https://github.com/embroider-build/embroider"&gt;Embroider&lt;/a&gt;. This project is currently at version 0.41.0 and usable in Ember projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bendemboski"&gt;Ben Demboski (@bendemboski)&lt;/a&gt; wrote this &lt;a href="https://dev.to/bendemboski/embroider-from-zero-to-route-splitting-in-3-5-weeks-5abo"&gt;blog&lt;/a&gt; about how he implemented Embroider in a commercial, &lt;a href="https://ember-electron.js.org"&gt;&lt;code&gt;ember-electron&lt;/code&gt;&lt;/a&gt; app.&lt;/p&gt;

&lt;p&gt;Ben's &lt;a href="https://dev.to/bendemboski/embroider-from-zero-to-route-splitting-in-3-5-weeks-5abo"&gt;blog post&lt;/a&gt; explains in detail the app and the process used to make the app use Embroider. All the hard things he ran into, such as ES6 module compliance and third-party add-ons. Luckily, after 3.5 weeks, Ben achieved &lt;strong&gt;tree-shaking&lt;/strong&gt; and &lt;strong&gt;code splitting across routes&lt;/strong&gt;. So if you want to start taking advantage of what Embroider has to offer, this post is a great place to start.&lt;/p&gt;

&lt;p&gt;If you read the blog, start with this project yourself and look for a place to get more help, check out the &lt;code&gt;#dev-embroider&lt;/code&gt; channel on &lt;a href="https://discord.gg/emberjs"&gt;Ember.JS Discord&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ember-takes-the-gaad-pledge"&gt;
  &lt;/a&gt;
  &lt;a href="https://blog.emberjs.com/gaad-2021"&gt;Ember takes the GAAD Pledge üòç&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/MelSumner"&gt;Melanie Sumner (@MelSumner)&lt;/a&gt; authored a blog post in conjuction with this week's &lt;a href="https://globalaccessibilityawarenessday.org/"&gt;Global Accessibility Awareness Day&lt;/a&gt; (GAAD) to announce that Ember has taken the GAAD pledge &lt;strong&gt;to make accessibility a core value of our framework&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Be sure to read the &lt;a href="https://blog.emberjs.com/gaad-2021"&gt;post&lt;/a&gt; to learn more about what Ember has done so far in its efforts for ‚Äúaccessibility by default‚Äù , what accessibilty-related work is in the pipeline, and how you can get involved if you're interesting in contributing to Ember a11y efforts!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ember-simple-auth-video-%F0%9F%93%BD"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=bSWN4_EbTPI"&gt;Ember Simple Auth video üìΩ&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Are you looking for a friendly, step by step guide to adding authentication to your Ember app? Look no further than the Ember Simple Auth &lt;a href="https://www.youtube.com/watch?v=bSWN4_EbTPI"&gt;Quickstart video&lt;/a&gt; published by &lt;a href="https://simplabs.com/"&gt;Simplabs&lt;/a&gt;. This video provides helpful introduction to this popular authentication/authorization &lt;a href="https://ember-simple-auth.com/"&gt;Ember addon&lt;/a&gt;. &lt;a href="https://github.com/marcoow"&gt;Marco Otte-Witte (@marcoow)&lt;/a&gt; explains this tricky part of app development using the latest Ember Octane syntax.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#built-with-ember-fleetbase"&gt;
  &lt;/a&gt;
  &lt;a href="https://fleetbase.io/"&gt;Built with Ember: Fleetbase üöÄ&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://fleetbase.io/"&gt;Fleetbase&lt;/a&gt; is a new logistics platform built with Ember by co-founders &lt;a href="https://github.com/roncodes"&gt;Ronald A. Richardson (@roncodes)&lt;/a&gt; and &lt;a href="https://github.com/shivthakker"&gt;Shiv Thakker (@shivthakker)&lt;/a&gt;. Fleetbase is an API-first logistics platform for developers and businesses. Customers can design, build, customize and control their logistics operations and experience using their APIs and console. Based in Singapore, Fleetbase has a mission to &lt;strong&gt;tech enable&lt;/strong&gt; traditional businesses.&lt;/p&gt;

&lt;p&gt;Check out Fleetbase on &lt;a href="https://www.producthunt.com/posts/fleetbase"&gt;ProductHunt&lt;/a&gt;!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#new-shiny-addons"&gt;
  &lt;/a&gt;
  New shiny addons ‚ú®
&lt;/h2&gt;

&lt;p&gt;The Ember addon ecosystem is always expanding and we love to keep you up to date with all of them. So here is a summarized list of the latest addons made by the community for the community.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/retailnext/ember-bem-helpers"&gt;ember-bem-helpers&lt;/a&gt;: BEM helpers for Ember.js applications&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Windvis/ember-breadcrumb-trail"&gt;ember-breadcrumb-trail&lt;/a&gt;: Minimalistic but very flexible breadcrumb management solution for Ember applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/CrowdStrike/ember-url-hash-polyfill"&gt;ember-url-hash-polyfill&lt;/a&gt;: Support for in/inter page linking / scrolling with hashes in EmberJS&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/onehilltech/ember-cli-custom-properties"&gt;ember-cli-custom-properties&lt;/a&gt;: Adds support for CSS custom properties (variables) to components&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NullVoxPopuli/ember-statechart-component"&gt;ember-statechart-component&lt;/a&gt;: Statecharts as components. No classes. Pure declarative state transitions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gossi/ember-command"&gt;ember-command&lt;/a&gt;: An implementation of the command design pattern for #emberjs&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#contributors-corner"&gt;
  &lt;/a&gt;
  &lt;a href="https://guides.emberjs.com/release/contributing/repositories/"&gt;Contributors' corner üëè&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This week we'd like to thank &lt;a href="https://github.com/pzuraq" rel="noopener noreferrer"&gt;Chris Garrett (@pzuraq)&lt;/a&gt;, &lt;a href="https://github.com/bmish" rel="noopener noreferrer"&gt;Bryan Mishkin (@bmish)&lt;/a&gt;, &lt;a href="https://github.com/lin-ll" rel="noopener noreferrer"&gt;Lucy Lin (@lin-ll)&lt;/a&gt;, &lt;a href="https://github.com/rwjblue" rel="noopener noreferrer"&gt;Robert Jackson (@rwjblue)&lt;/a&gt;, &lt;a href="https://github.com/bgantzler" rel="noopener noreferrer"&gt;@bgantzler&lt;/a&gt;, &lt;a href="https://github.com/amk221" rel="noopener noreferrer"&gt;Andrew Kirwin (@amk221)&lt;/a&gt;, &lt;a href="https://github.com/fozy81" rel="noopener noreferrer"&gt;Tim (@fozy81)&lt;/a&gt;, &lt;a href="https://github.com/runnerboy22" rel="noopener noreferrer"&gt;Tyler (@runnerboy22)&lt;/a&gt;, &lt;a href="https://github.com/thomascchen" rel="noopener noreferrer"&gt;Tom Chen (@thomascchen)&lt;/a&gt;, &lt;a href="https://github.com/prasannavijayan" rel="noopener noreferrer"&gt;_pvy (@prasannavijayan)&lt;/a&gt;, &lt;a href="https://github.com/spham92" rel="noopener noreferrer"&gt;Steven Pham (@spham92)&lt;/a&gt;, &lt;a href="https://github.com/mansona" rel="noopener noreferrer"&gt;Chris Manson (@mansona)&lt;/a&gt;, &lt;a href="https://github.com/locks" rel="noopener noreferrer"&gt;Ricardo Mendes (@locks)&lt;/a&gt;, &lt;a href="https://github.com/chrisrng" rel="noopener noreferrer"&gt;Chris Ng (@chrisrng)&lt;/a&gt;, &lt;a href="https://github.com/jenweber" rel="noopener noreferrer"&gt;Jen Weber (@jenweber)&lt;/a&gt;, &lt;a href="https://github.com/dmuneras" rel="noopener noreferrer"&gt;Daniel M√∫nera S√°nchez (@dmuneras)&lt;/a&gt;, &lt;a href="https://github.com/hannakim91" rel="noopener noreferrer"&gt;Hanna (she/her) (@hannakim91)&lt;/a&gt;, &lt;a href="https://github.com/snewcomer" rel="noopener noreferrer"&gt;Scott Newcomer (@snewcomer)&lt;/a&gt;, &lt;a href="https://github.com/amyrlam" rel="noopener noreferrer"&gt;Amy Lam (@amyrlam)&lt;/a&gt;, &lt;a href="https://github.com/rwwagner90" rel="noopener noreferrer"&gt;Robert Wagner (@rwwagner90)&lt;/a&gt;, &lt;a href="https://github.com/MelSumner" rel="noopener noreferrer"&gt;Melanie Sumner (@MelSumner)&lt;/a&gt;, &lt;a href="https://github.com/nlfurniss" rel="noopener noreferrer"&gt;Nathaniel Furniss (@nlfurniss)&lt;/a&gt;, &lt;a href="https://github.com/chiragpat" rel="noopener noreferrer"&gt;Chirag Patel (@chiragpat)&lt;/a&gt;, &lt;a href="https://github.com/lukemelia" rel="noopener noreferrer"&gt;Luke Melia (@lukemelia)&lt;/a&gt;, &lt;a href="https://github.com/acorncom" rel="noopener noreferrer"&gt;David Baker (@acorncom)&lt;/a&gt;, &lt;a href="https://github.com/chancancode" rel="noopener noreferrer"&gt;Godfrey Chan (@chancancode)&lt;/a&gt;, &lt;a href="https://github.com/ombr" rel="noopener noreferrer"&gt;Luc Boissaye (@ombr)&lt;/a&gt;, &lt;a href="https://github.com/brendenpalmer" rel="noopener noreferrer"&gt;Brenden Palmer (@brendenpalmer)&lt;/a&gt;, &lt;a href="https://github.com/ijlee2" rel="noopener noreferrer"&gt;Isaac Lee (@ijlee2)&lt;/a&gt;, &lt;a href="https://github.com/runspired" rel="noopener noreferrer"&gt;Chris Thoburn (@runspired)&lt;/a&gt;, &lt;a href="https://github.com/sly7-7" rel="noopener noreferrer"&gt;Sylvain MINA (@sly7-7)&lt;/a&gt;, &lt;a href="https://github.com/MinThaMie" rel="noopener noreferrer"&gt;Anne-Greeth van Herwijnen (@MinThaMie)&lt;/a&gt;, &lt;a href="https://github.com/igorT" rel="noopener noreferrer"&gt;Igor Terzic (@igorT)&lt;/a&gt;, &lt;a href="https://github.com/scalvert" rel="noopener noreferrer"&gt;Steve Calvert (@scalvert)&lt;/a&gt;, &lt;a href="https://github.com/danielpunkass" rel="noopener noreferrer"&gt;Daniel Jalkut (@danielpunkass)&lt;/a&gt;, &lt;a href="https://github.com/wise-introvert" rel="noopener noreferrer"&gt;Fardeen Panjwani (@wise-introvert)&lt;/a&gt;, and &lt;a href="https://github.com/anehx" rel="noopener noreferrer"&gt;Jonas Metzener (@anehx)&lt;/a&gt; for their contributions to Ember and related repositories! üíñ&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#connect-with-us"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLScqu7Lw_9cIkRtAiXKitgkAo4xX_pV1pdCfMJgIr6Py1V-9Og/viewform"&gt;Connect with us ü§ì&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--90_zyYI9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6k14sk621r1zp5y5prz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--90_zyYI9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6k14sk621r1zp5y5prz.png" alt="Ember Office Hours Tomster mascot"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Wondering about something related to Ember, Ember Data, Glimmer, or addons in the Ember ecosystem, but don't know where to ask? Readers‚Äô Questions are just for you!&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Submit your own&lt;/strong&gt; short and sweet &lt;strong&gt;question&lt;/strong&gt; under &lt;a href="https://bit.ly/ask-ember-core"&gt;bit.ly/ask-ember-core&lt;/a&gt;. And don‚Äôt worry, there are no silly questions, we appreciate them all - promise! ü§û&lt;/p&gt;


&lt;p&gt;Want to write for the Ember Times? Have a suggestion for next week's issue? Join us at &lt;a href="https://discordapp.com/channels/480462759797063690/485450546887786506"&gt;#support-ember-times&lt;/a&gt; on the &lt;a href="https://discord.gg/emberjs"&gt;Ember Community Discord&lt;/a&gt; or ping us &lt;a href="https://twitter.com/embertimes"&gt;@embertimes&lt;/a&gt; on Twitter.&lt;/p&gt;


&lt;p&gt;Keep on top of what's been going on in Emberland this week by subscribing to our &lt;a href="https://embertimes.substack.com/"&gt;e-mail newsletter&lt;/a&gt;! You can also find our posts on the &lt;a href="https://blog.emberjs.com/tag/newsletter"&gt;Ember blog&lt;/a&gt;. See you in two weeks!&lt;/p&gt;
&lt;br&gt;




&lt;p&gt;That's another wrap! ‚ú®&lt;/p&gt;

&lt;p&gt;Be kind,&lt;/p&gt;

&lt;p&gt;Tim Foster, Chris Ng, Anne-Greeth van Herwijnen, Amy Lam, and the Learning Team&lt;/p&gt;

</description>
      <category>ember</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>a11y</category>
    </item>
    <item>
      <title>The Sublime Text 4 | The editor that can make you quit VSCode</title>
      <author>Volt</author>
      <pubDate>Sat, 22 May 2021 05:21:17 +0000</pubDate>
      <link>https://dev.to/voltagex007/the-sublime-text-4-the-editor-that-can-make-you-quit-vscode-1pae</link>
      <guid>https://dev.to/voltagex007/the-sublime-text-4-the-editor-that-can-make-you-quit-vscode-1pae</guid>
      <description>&lt;h1&gt;
  &lt;a href="#the-brand-new-sublime-text-4"&gt;
  &lt;/a&gt;
  The brand new Sublime Text 4
&lt;/h1&gt;

&lt;p&gt;I was inside the pit of Web Dev for the past month or 2. Then I wanted to have some fun with my old buddy - "Python". As well as I was interested in making some complex algorithmic simulations (Inspired by Sebastian Lague) using pygame and pyglet and some few other OpenGL and SDL2 related stuffs and found to have some minimalism whist using Python. So I installed Sublime Text again after a loooooong time period. Then configured a lot and then was ready to go. The next day, I saw my updater app showing me 3 updates (which usually shows 2 updates, and those two are the updates that I ignore for a different reason). I was like 'hmmmmm, okay let's update it though' and then &lt;strong&gt;boom&lt;/strong&gt; saw sublime text wanted an update, the app shows what is the newer version and it told "4107". I was confused and quickly opened sublime text website and the website was updated and sublime text 4 was released. I was very sad that ST3 is dumb but I really wanted to fiddle with it (IDK why it was dumb though, I think I was overwhelmed with VSCode). But when I saw it I was really happy and quickly refereed the "Whats new" page and was thinking to go back. And the newer update and the newer look made me quit VSCode [ Because I like ST now :) ]. But still I will be using VSCode as well as Sublime Text. Whats wrong in using two text editors configured in different unique ways to use in different places.&lt;/p&gt;

&lt;p&gt;Okay, The Great Sweet Nice ST team explained What's New the amazing Sublime Text. What am I doing here. Well I'm going to tell about my Experience, Feedback, and how I configured it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Apart from this topic: I'm back in action on creating new posts.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#experience"&gt;
  &lt;/a&gt;
  Experience
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Answer in one word&lt;/strong&gt; : I'm speechless&lt;br&gt;
&lt;strong&gt;Answer in large&lt;/strong&gt; : Well, I'm really impressed with the defaults. Its like Way better than any of the other text editor's default. I thing the Team has understood what most of the people love to have the look of the Text Editor should be like. Though VSCode also has the same level of look. Can't compare though. Both of the editors are equal for me. One is better than the other in their own unique way and that's true for everything. Cows have horns whilst Humans doesn't. Humans have a better brain to go and invent newer things whilst Cows have that power in very low level.(Don't ask me which text editor is that Cow)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#feedback"&gt;
  &lt;/a&gt;
  Feedback
&lt;/h2&gt;

&lt;p&gt;The only thing which I want to tell the Team is to have a good Auto Completion like the IntelliSense in VSCode.&lt;/p&gt;

&lt;p&gt;And some few extra features like Git Integration, Inbuilt console and The ease of use in running or starting a debug process like in VSCode. In VSCode you can simply open the Command line and you can tell it to run the file, whilst you can also switch and select which interpreter to use. Also it has inbuilt Terminal, and I wish ST has the same option but with the support for color schemes for Terminal (Basically I use a Terminal Color Scheme which I don't know how to get it work inside VSCode)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#about-my-st-config"&gt;
  &lt;/a&gt;
  About my ST Config
&lt;/h2&gt;

&lt;p&gt;I installed some good  plugins, themes and color schemes to make ST a lot better&lt;/p&gt;

&lt;p&gt;I installed Sublime Text Profiles plugin and created some profiles like &lt;strong&gt;Python Dev&lt;/strong&gt; &lt;strong&gt;Web Dev&lt;/strong&gt; &lt;strong&gt;Writer&lt;/strong&gt;, etc.&lt;/p&gt;

&lt;p&gt;Writer profile is what I use to write articles.&lt;/p&gt;

&lt;p&gt;Basically Profiles are just to make it much easier to switch between a set of configuration to another. For example In writer profile I use &lt;strong&gt;Material&lt;/strong&gt; Color scheme, which I typed in the settings JSON file, and then saved it to my Profile. I also changed some other things like font, font size, gutter, line numbers, etc and saved them all. Whilst I can create a new Profile and edit the JSON file to make it better to write Python Code which enabled a different Theme and set of plugins and disabled unwanted plugins required by other Profiles like the Writer scheme and JavaScript Plugins.&lt;/p&gt;

&lt;p&gt;Okay let's enter my Python profile:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python Dev:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I normally use &lt;em&gt;IBM Plex Mono&lt;/em&gt; font with the size of 11 or 12. And I use the &lt;strong&gt;Material Theme&lt;/strong&gt; and &lt;strong&gt;Facebook Material Theme&lt;/strong&gt; both made by "equinusocio" as Color Schemes. And for the Theme I use &lt;strong&gt;Adaptive&lt;/strong&gt; which is a nice feature in ST. I disable JavaScript packages in this profile using the "Ignore" in JSON Settings file. Then I make some minor changes like the mini map outlines and I change the Tab style to "angled".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web Dev:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I use &lt;em&gt;JetBrains Mono&lt;/em&gt; font with font size 12 for Web Dev. And I use the same &lt;strong&gt;Material Theme&lt;/strong&gt; and its &lt;strong&gt;Facebook&lt;/strong&gt; variant for Web Dev. This time I disable Python plugins and make the tab style to Rounded.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Writer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I use &lt;em&gt;Writer&lt;/em&gt; font made my Tonsky - The creator of Fira Code with 13 as my Font Size. With the same &lt;strong&gt;Facebook Material&lt;/strong&gt; theme. I disabled most of the features that are required while coding rather than typing texts and markdowns. And I enable the the Distraction Free mode. Making it look like &lt;em&gt;IA Writer&lt;/em&gt; in Mac.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#then-more-about-the-color-scheme"&gt;
  &lt;/a&gt;
  Then, more about the Color Scheme
&lt;/h3&gt;

&lt;p&gt;I use the &lt;strong&gt;Darker&lt;/strong&gt; variant of the Material Theme. But I might change my Color scheme if I find something nice, and I will post an article about the Color Scheme and the Theme, and if the Theme provides File Icons, the that also will be included. Also If you can, recommend me some Sublime text plugins and Themes and Configurations and etc.&lt;/p&gt;

&lt;p&gt;Also recommend me a good Font, I will try it and post it in that future article.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#outro"&gt;
  &lt;/a&gt;
  Outro:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Bi&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>python</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to use Junit Annotation in Android UI Framework- Kotlin &amp; Espresso based</title>
      <author>Raghwendra Sonu</author>
      <pubDate>Sat, 22 May 2021 05:16:02 +0000</pubDate>
      <link>https://dev.to/raghwendrasonu/how-to-use-junit-annotation-in-android-ui-framework-2m4g</link>
      <guid>https://dev.to/raghwendrasonu/how-to-use-junit-annotation-in-android-ui-framework-2m4g</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problem Statement:&lt;/strong&gt;&lt;br&gt;
We need to add a capability in the framework, where they can Create and use JUnit tags to filter/group and run tests. e.g.&lt;/p&gt;

&lt;p&gt;@Sanity&lt;br&gt;
@Regression&lt;br&gt;
@MyAnnotation&lt;/p&gt;

&lt;p&gt;So, basically we will Run specific Android Espresso tests by creating custom annotations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;br&gt;
Step 1) Create a custom annotation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import java.lang.annotation.Retention
import java.lang.annotation.RetentionPolicy

//Create Annotation Class- Step3
@Target(
    AnnotationTarget.FUNCTION,
    AnnotationTarget.PROPERTY_GETTER,
    AnnotationTarget.PROPERTY_SETTER,
    AnnotationTarget.ANNOTATION_CLASS,
    AnnotationTarget.CLASS
)
@Retention(
    RetentionPolicy.RUNTIME
)
annotation class MyAnnotation\
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;@Target specifies the possible kinds of elements which can be annotated with the annotation (classes, functions, properties, expressions etc.)&lt;/p&gt;

&lt;p&gt;We used it for annotate some functions, so we use AnnotationTarget.FUNCTION&lt;/p&gt;

&lt;p&gt;@Retention specifies whether the annotation is stored in the compiled class files and whether it‚Äôs visible through reflection at runtime (by default, both are true).&lt;/p&gt;

&lt;p&gt;AnnotationRetention.RUNTIME makes sure that the Rat annotation is visible to the test runner during the runtime.&lt;/p&gt;

&lt;p&gt;Step 2) Annotate @MyAnnotation on the tests you want to run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Test @MyAnnotation
fun AddTaskToDoListTestAndMarkDone() {
   ......
   ......
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 3) Use gradlew to run only MyAnnotation tests&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./gradlew connectedAndroidTest -P android.testInstrumentationRunnerArguments.annotation=com.example.todolist.app.MyAnnotation

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>android</category>
      <category>framework</category>
      <category>kotlin</category>
      <category>espresso</category>
    </item>
    <item>
      <title>Why Indentation is more important than coding?</title>
      <author>Sanjay Singh Rajpoot</author>
      <pubDate>Sat, 22 May 2021 05:03:36 +0000</pubDate>
      <link>https://dev.to/sanjaysinghrajpoot/why-indentation-is-more-important-than-coding-4fn1</link>
      <guid>https://dev.to/sanjaysinghrajpoot/why-indentation-is-more-important-than-coding-4fn1</guid>
      <description>&lt;p&gt;As a beginner, I always thought that working of code is more important than how well it's indented. After write code for about a year now I realised how important it is to write good code. Good code here not only means indentation but how your code looks to other people. This will include how you name a variable, where you add comments and more. Let's begin with Indentation.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-indentation"&gt;
  &lt;/a&gt;
  What is Indentation?
&lt;/h1&gt;

&lt;p&gt;In computer programming languages, indentation is used to format program source code to improve readability. Indentation is generally only of use to programmers; compilers and interpreters rarely care how much whitespace is present in between programming statements. However, certain programming languages rely on the use of indentation to demarcate programming structure, often using a variation of the off-side rule. The Haskell, Occam, and Python programming languages rely on an indentation in this way.&lt;/p&gt;

&lt;p&gt;Let's look at a pseudo-code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;main() {
variable declaration;
for loop {
another for loop {
yet another for loop {
some work to be done;
another work;
}
again some work;
}
damn some more work;
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Seems horrible? Huh? Thinking that who really code like this in real life? And it hurts. The more you see the more it hurts. Now let's have look at his indented brother :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;main() {
    variable declaration;
    for loop {
        another for loop {
            yet another for loop {
                some work to be done;
                another work;
            }
        again some work;
        }
    damn some more work;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we look at this code, we can clearly see that inside our main(), we have a nested for loop. It certainly is more readable, and understandable than his illiterate/ mismanaged brother. So now you got what I am talking about.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-use-good-indentation-in-your-code"&gt;
  &lt;/a&gt;
  How to use good indentation in your code?
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#1-spacing"&gt;
  &lt;/a&gt;
  1. Spacing
&lt;/h2&gt;

&lt;p&gt;Spacing forms the most important part of code indentation and formatting. It also makes the code more readable if properly maintained. So we should follow proper spacing throughout our coding and it should be consistent.&lt;/p&gt;

&lt;p&gt;Few tips :&lt;/p&gt;

&lt;p&gt;All array names should be immediately followed by a left square bracket.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// NOT Recommended
    arr [0];  

// Recommended
    arr[0];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All binary operators should maintain space on either side of the operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// NOT Recommended
    a=b-c;          
    a = b-c;        
    a=b - c;        

// Recommended
    a = b - c;      // NOT Recommended
    z = 6*x + 9*y;         

// Recommended
    z = 6 * x + 9 * y;     
    z = (7 * x) + (9 * y);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All casts must be written without any space&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// NOT Recommended
    (ClassA) m.get(3);  
    ( ClassA )m.get(3); 

// Recommended
    (ClassA)m.get(3);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-maximum-line-length"&gt;
  &lt;/a&gt;
  2. Maximum Line Length
&lt;/h2&gt;

&lt;p&gt;Try to fix a maximum line length for your code. The maximum line length should not exceed 120 characters. If it needs to be increased then put it in a different line. The reason behind it is due to the capability of editors and printing facilities. In general, normal editors and printers can handle 120 characters comfortably. So if it exceeds the limit then it‚Äôs become a problem to handle for the code editor itself. Try to get the lines of code to a near equal length. This will make the code look symmetric and organised.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-self-documenting-code"&gt;
  &lt;/a&gt;
  3. Self Documenting Code:
&lt;/h2&gt;

&lt;p&gt;Many a times we have heard that each and every piece of code should be documented properly so that it is easily understandable. And we start writing details of the method on top of it. But this is not the best practice. Because the code might be changed in future and the programmer forgot to change the documentation. So the best practice is to write the code in a way so that it can explain itself without any comment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// NOT recommended
    if ( (a == Good) &amp;amp;&amp;amp; ( (b == better) || (b == best) ) )// Recommended
    boolean isbetterbest = ( (b == better) || (b == best) );
    if ( (a == Good) &amp;amp;&amp;amp; isbetterbest )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-using-comments"&gt;
  &lt;/a&gt;
  4. Using Comments
&lt;/h2&gt;

&lt;p&gt;Try to explain your logic in simple words for other people to read it comfortably. With the help of comments, you will have fewer queries regarding your code and logic. One-line comments added in the above snippets are the best examples to convey to the reader what your code is about.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#some-rocksolid-reasons-to-use-indentation"&gt;
  &lt;/a&gt;
  Some rock-solid reasons to use indentation.
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;It shows levels of nesting, nested if statements, for loops, etc :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As shown above, indenting your code tell you when and what is nested inside what. Confusing? For example, you‚Äôve asked WAP that takes the input of all elements of a 2D array. So simplest logic says, you‚Äôll use a for/ while loop and inside that another for/while loop. So writing the code w/ proper indentation helps you in identifying the nesting level.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It shows scope :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It‚Äôs clear that if everything is indented you know the scope of variables. As in the above example, if the code‚Äôs indented, you can easily understand which variables are available where. And it also shows that where a specific block is starting and where it‚Äôs ending.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anyone reading your code can tell whats executing inside of what :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obviously, you‚Äôll not use your own code in an isolated chamber for the lifetime, don‚Äôt say you will. You‚Äôll obviously share your code (until you‚Äôre Windows/ Apple fanboy), and others will read it and may want to modify it. And in order to be able to modify, one must be able to understand the flow of execution of the program, which is possible only if the code is correctly formatted, commented and indented.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easier to read :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don‚Äôt think I need to explain this point. If you still want an explanation, read the above two examples again.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;From the above points, it is very clear that while writing even a 20 lines program, indentation saves a lot of time that one might waste in reading and understanding again. It also increases readability to others and well as the programmer. We have also understood the importance of writing good code with the best indentation and formatting practices. We need to remember that a proper indentation rule must be followed while coding so that the program is easily readable and maintainable in future. So we can conclude that indentation and formatting is an important part of programming practice and developers should follow It from the starting of their programming career.&lt;/p&gt;

&lt;p&gt;Nameste üôè&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>syntex</category>
      <category>productivity</category>
      <category>pro</category>
    </item>
  </channel>
</rss>
