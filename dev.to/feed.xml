<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>8 Websites You Should Visit To Learn Web Development  A Thread üßµ</title>
      <author>Manitej ‚ö°</author>
      <pubDate>Tue, 29 Jun 2021 03:03:44 +0000</pubDate>
      <link>https://dev.to/manitej/8-websites-you-should-visit-to-learn-web-development-a-thread-40lh</link>
      <guid>https://dev.to/manitej/8-websites-you-should-visit-to-learn-web-development-a-thread-40lh</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;this article is generated using (give a ‚≠ê) &lt;br&gt;
 &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Manitej66"&gt;
        Manitej66
      &lt;/a&gt; / &lt;a href="https://github.com/Manitej66/twlog"&gt;
        twlog
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This is a web app that converts Twitter threads into blogs in a single click üî•
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
twlog&lt;/h1&gt;
&lt;p&gt;This is a webapp which convert twitter threads into dev.to blogs in a single click&lt;/p&gt;
&lt;h2&gt;
Acknowledgements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/FeedHive/twitter-api-client"&gt;twitter api client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Manitej66/twlog"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
 &lt;br&gt;
 &lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbV2dlOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1388824183866490882/d0_IVyWr_normal.jpg" alt="Avni Gupta profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Avni Gupta
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @avnigupta_
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      8 Websites You Should Visit To Learn Web Development&lt;br&gt;&lt;br&gt;A Thread üßµ
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:24 PM - 28 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409518155626545157" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409518155626545157" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409518155626545157" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbV2dlOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1388824183866490882/d0_IVyWr_normal.jpg" alt="Avni Gupta profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Avni Gupta
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @avnigupta_
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      1. FreeCodeCamp (FREE) &lt;br&gt;&lt;br&gt;FreeCodeCamp is probably one of the best free resources on the internet to learn web development. It covers every topic you need to learn: HTML, CSS (Flexbox, Bootstrap, Sass, and Grid) and Javascript (Jquery, React). &lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/zjG5Vuywi9"&gt;freecodecamp.org&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:24 PM - 28 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409518157409112064" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409518157409112064" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409518157409112064" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbV2dlOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1388824183866490882/d0_IVyWr_normal.jpg" alt="Avni Gupta profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Avni Gupta
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @avnigupta_
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      2. Udemy (PAID)&lt;br&gt;&lt;br&gt;Udemy is an online learning platform covering every topic you can think of. Right now, it has over 80,000 courses ready to teach you to code. Its main advantage is that the courses are most of the time heavily discounted.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/1YLgcgJA7s"&gt;udemy.com/courses/develo‚Ä¶&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:24 PM - 28 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409518159397146626" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409518159397146626" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409518159397146626" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbV2dlOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1388824183866490882/d0_IVyWr_normal.jpg" alt="Avni Gupta profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Avni Gupta
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @avnigupta_
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      3. Coursera (FREE)&lt;br&gt;&lt;br&gt;Like Udemy, Coursera is a popular online learning platform where all the courses are free (Payment required for graded assignments). It was founded by Stanford professors Daphne Koller and Andrew Ng. &lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/MKk7WJF5jb"&gt;coursera.org&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:24 PM - 28 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409518161804726275" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409518161804726275" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409518161804726275" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbV2dlOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1388824183866490882/d0_IVyWr_normal.jpg" alt="Avni Gupta profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Avni Gupta
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @avnigupta_
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      4. Treehouse (Paid)&lt;br&gt;&lt;br&gt;Treehouse is a very well known online learning platform in web development. It has over 1000 quality videos covering topics like web development, web design, and entrepreneurship.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/gPjH1zHthT"&gt;teamtreehouse.com&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:24 PM - 28 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409518163922853894" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409518163922853894" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409518163922853894" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbV2dlOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1388824183866490882/d0_IVyWr_normal.jpg" alt="Avni Gupta profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Avni Gupta
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @avnigupta_
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      5. Codecademy (Free and Paid Version)&lt;br&gt;&lt;br&gt;Codeacademy is one of the most popular coding websites on the internet. It has taught more than 45 million users to code. Its main advantage is that it has many free courses.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/HTHENZoxig"&gt;codecademy.com&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:24 PM - 28 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409518166078758915" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409518166078758915" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409518166078758915" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbV2dlOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1388824183866490882/d0_IVyWr_normal.jpg" alt="Avni Gupta profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Avni Gupta
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @avnigupta_
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      6. W3Schools (Free)&lt;br&gt;&lt;br&gt;Very Similar to FreeCodeCamp, W3Schools is a website where you can learn all about programming and web development. You‚Äôll be able to learn the three core technologies of the web, HTML, CSS, and Javascript, Sass, Bootstrap, and React.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/0o8JSTRCXm"&gt;w3schools.com&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:24 PM - 28 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409518168024834049" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409518168024834049" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409518168024834049" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;br&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Django vs React</title>
      <author>Zach</author>
      <pubDate>Tue, 29 Jun 2021 01:51:19 +0000</pubDate>
      <link>https://dev.to/zbretz/django-vs-react-3067</link>
      <guid>https://dev.to/zbretz/django-vs-react-3067</guid>
      <description>&lt;p&gt;Developing apps with frameworks. Yes! This is what I've been waiting for.&lt;/p&gt;

&lt;p&gt;Today is the start of Week 3 and while I know the foundational material we've been covering is critical -- and it has been helpful and rewarding (esp. the pair programming) -- I feel like we're just now getting into what I signed up for.&lt;/p&gt;

&lt;p&gt;Well after hearing so much about how great React is as a framework - it's intuitive and flexible, and I think our learning materials called it fun, and it'll make you breakfast in bed and so on, well my first hands-on experience landed like a sack of bricks.&lt;/p&gt;

&lt;p&gt;My app-building experience to date comes from learning and using Django, a MVC web-building framework for Python. Django felt intuitive. Now maybe I'm looking back on it through a time-distorted lens. Maybe I only remember the good times, when code was flying, my apps were growing, and I'm forgetting the growing pains.&lt;/p&gt;

&lt;p&gt;What's more, I'm not sure what I like about Python is directly comparable to what I find disorienting about React. I don't know React enough to say, and I may be comparing apples to french fries.&lt;/p&gt;

&lt;p&gt;But here's what I've seen on the front end from each. Take this with a grain of salt, I'm only a few hours deep with React.&lt;/p&gt;

&lt;p&gt;React works like this.&lt;/p&gt;

&lt;p&gt;Take a component that you want to build (like a grocery list). Populate it with data (bananas, etc), and wrap it up in some html-like syntax.&lt;/p&gt;

&lt;p&gt;First we have to create those grocery items (here they bold themselves when they're hovered over):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;GroceryListItem&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;onListItemClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onMouseOver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onListItemClick&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not cute.&lt;/p&gt;

&lt;p&gt;Okay, back to our list. It might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;GroceryList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GroceryListItem&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Map iterates over our items and generates those list elements complete with our grocery items.&lt;/p&gt;

&lt;p&gt;Wait, first, let's get those items, and attach our grocery list to our html document (in the #app div):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GroceryList&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cereal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Broccoli&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Olive Oil&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React has props, states, and other lingo that makes sense when I'm reading it, but somehow clears itself from my memory when I move to the next section of the docs.&lt;/p&gt;

&lt;p&gt;There's a lot to learn to implement the front-end.&lt;/p&gt;




&lt;p&gt;Django, I think, makes it more intuitive. Its front-end framework has you essentially writing normal html code, in an html document (a template) with some pythonic logic embedded.&lt;/p&gt;

&lt;p&gt;The above code might look something like this in a Django template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'app'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    {% for item in groceries %}
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; item &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    {% endfor %}
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This just &lt;em&gt;looks&lt;/em&gt; like html and makes it easy to visualize and understand the structure. Not appending things to other things, but nesting elements as they will be in our rendered template.&lt;/p&gt;

&lt;p&gt;Alright, I'm leaving out a lot. What's 'groceries' and where does it come from? Well it comes from the model. But we're not talking about the rest of the framework, I'm talking about how data is presented.&lt;/p&gt;

&lt;p&gt;Loops, conditional statements, formatting options, those are all available and stackable/nestable/etc within the html page itself. It feels like writing python. It feels intuitive.&lt;/p&gt;

&lt;p&gt;Learning is fun - but it's not fun when you're stubborn. And I feel like I'm stubbornly clinging to another way of doing something - the Django way. I'm going to embrace React and hope that over time, and with repetition, it becomes as intuitive to me as Django.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Introduction to styled-components (CSS-in-JS) in React</title>
      <author>Michael Burrows</author>
      <pubDate>Tue, 29 Jun 2021 00:58:51 +0000</pubDate>
      <link>https://dev.to/michaelburrows/introduction-to-styled-components-css-in-js-in-react-2dd6</link>
      <guid>https://dev.to/michaelburrows/introduction-to-styled-components-css-in-js-in-react-2dd6</guid>
      <description>&lt;p&gt;&lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt; provides a way to write CSS-in-JS. It was created to enhance the way CSS is written when styling React components. This tutorial will provide an introduction to styled-components so you can decide if it‚Äôs an approach you would like to use in future or existing React applications.&lt;/p&gt;

&lt;p&gt;For the purposes of this tutorial we‚Äôll create a simple component with some text and buttons like the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rxQ2oydY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7nva0hf1bbhu2jmwkwt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rxQ2oydY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7nva0hf1bbhu2jmwkwt.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here‚Äôs how the markup for this component would be structured with traditional HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"welcome"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Accusantium enim placeat aperiam asperiores non earum. Sit rerum nihil
    omnis in velit voluptatem. Vero amet exercitationem aut. Praesentium
    sequi quisquam ducimus.
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Impedit iste fuga architecto. Blanditiis maiores labore sint qui fuga
    nemo id blanditiis. Iusto officia maxime consequatur est voluptatum
    voluptatem aut.
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-light"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;More Info&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-dark"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Get Started&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the CSS would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.welcome&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;480px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.4em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.75em&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.btn-light&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.btn-dark&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;darkblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs now go through the process of converting this HTML and CSS into a styled-component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;The styled-components framework can be installed using either NPM or Yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install styled-components
yarn add styled-components
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then imported into React as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-components"&gt;
  &lt;/a&gt;
  Creating components
&lt;/h3&gt;

&lt;p&gt;First thing we need to do is convert the HTML markup into component based markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Welcome&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Heading&amp;gt;&lt;/span&gt;Hello World!&lt;span class="nt"&gt;&amp;lt;/Heading&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Paragraph&amp;gt;&lt;/span&gt;
    Accusantium enim placeat aperiam asperiores non earum. Sit rerum nihil
    omnis in velit voluptatem. Vero amet exercitationem aut. Praesentium
    sequi quisquam ducimus.
  &lt;span class="nt"&gt;&amp;lt;/Paragraph&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Paragraph&amp;gt;&lt;/span&gt;
    Impedit iste fuga architecto. Blanditiis maiores labore sint qui fuga
    nemo id blanditiis. Iusto officia maxime consequatur est voluptatum
    voluptatem aut.
  &lt;span class="nt"&gt;&amp;lt;/Paragraph&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt; &lt;span class="na"&gt;light&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;More Info&lt;span class="nt"&gt;&amp;lt;/Button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt; &lt;span class="na"&gt;dark&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Get Started&lt;span class="nt"&gt;&amp;lt;/Button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Welcome&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#styling-components"&gt;
  &lt;/a&gt;
  Styling components
&lt;/h3&gt;

&lt;p&gt;styled-components utilises tagged template literals to style components. So in order to style our components we need to declare a variable that matches the component name and define what type of HTML element to render (div, h1, p, or button):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`  
  margin: auto;
  max-width: 480px;  
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="s2"&gt;`
  margin-top: 0;
  font-size: 2.5em;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Paragraph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="s2"&gt;`
  line-height: 1.4em;
  font-size: 1.2em;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
  border: none;
  border-radius: 3px;
  color: white;
  font-size: 1em;
  font-weight: bold;
  margin: 1em 1em 0 0;
  padding: 0.75em 1em;  
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adjusting-styling-using-props"&gt;
  &lt;/a&gt;
  Adjusting styling using props
&lt;/h3&gt;

&lt;p&gt;You may have noticed the buttons have a light &amp;amp; dark property attached to them. You can pass a function to a styled component‚Äôs template literal to modify the styling based on the property provided. We‚Äôll change the background color to be light or dark:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
  ...
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;light&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;darkblue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;CSS-in-JS was one of those things I was reluctant to use at first but after spending some time working with styled-components it‚Äôs something I‚Äôve grown to enjoy. If you‚Äôre interested in learning more about styled-components the full documentation can be found &lt;a href="https://styled-components.com/docs"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Core Concepts behind Java OOP</title>
      <author>Patricia Nicole</author>
      <pubDate>Tue, 29 Jun 2021 00:43:25 +0000</pubDate>
      <link>https://dev.to/pat_the99/core-concepts-behind-java-oop-2dom</link>
      <guid>https://dev.to/pat_the99/core-concepts-behind-java-oop-2dom</guid>
      <description>&lt;h2&gt;
  &lt;a href="#java-wilthinking1"&gt;
  &lt;/a&gt;
  [Java WILü§î#1]
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I am reviewing for an Oracle Java Certification exam and decided to run through the documentation of Java's Nuts and Bolts. Check out the github repository for other &lt;a href="https://github.com/fatrixienicolieopetina/java-1z0819"&gt;review bullet points&lt;/a&gt;. Here are my notes for the core concepts behind Java's object-oriented programming (OOP).&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-are-objects"&gt;
  &lt;/a&gt;
  üìå What are Objects
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;An object is a software bundle of related state and behavior. Software objects are often used to model real-world objects found in everyday life&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Real world observations all translate into the world of object-oriented programming. Real-world objects share two characteristics, they all have &lt;strong&gt;&lt;em&gt;state&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;behavior&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Software objects are conceptually similar to real-world objects; they too, consist of state and related behavior. An object stores its state in &lt;strong&gt;fields&lt;/strong&gt; and exposes its behavior through &lt;strong&gt;methods&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Methods&lt;/strong&gt; operate on an object's internal state and serve as the primary mechanism for object-to-object communication.&lt;/li&gt;
&lt;li&gt;Hiding internal state and requiring all interaction to be performed through an object's method is known as &lt;strong&gt;data ecapsulation&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;By attributing state and providing methods for changing that state, the object remains in control of how the outside world is allowed to use it.&lt;/li&gt;
&lt;li&gt;Building code into individual software objects provide a number of benefits, including:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Modularity&lt;/strong&gt; : The source code for an object can be written and maintained independently of the source code for other projects. Once created, an object can be easily passed around inside the system.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Information Hiding&lt;/strong&gt;. By interacting only with an object's methods, the details of its internal implementaion remain hidden from the outside world.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code reuse&lt;/strong&gt; : If an object already exists (might have been written by another programmer), that can be used in the program. This allows specialists to implement/test/debug complex, task-specific objects, which can then be trusted in your own code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pluggability and Debugging Ease&lt;/strong&gt; . If a particular object turns out to be problematic, it can simply be removed from the application and plug in a different object as a replacement. Similar to fixing a mechanical problem in the real world, if a bolt breaks, it can be replaced, but not the entire machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#what-are-classes"&gt;
  &lt;/a&gt;
  üìå What are Classes
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A class is a blueprint or prototype from which objects are created.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;In real world, many individual objects have the same kind, i.e. they are built from the same set of blueprints and therefore contains the same components.&lt;/li&gt;
&lt;li&gt;In object-oriented terms, a &lt;code&gt;class&lt;/code&gt; is the blueprint from which individual objects are created.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#what-is-inheritance"&gt;
  &lt;/a&gt;
  üìå What is Inheritance
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Inheritance provides a powerful and natural mechanism for organizing and structuring software.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Different kinds of objects often have a certain amount in common with each other. Yet, each also defines additional features that make them different. &lt;/li&gt;
&lt;li&gt;OOP allows classes to inherit commonly used state and behavior from other classes. &lt;/li&gt;
&lt;li&gt;In Java, each class is allowed to have &lt;strong&gt;one direct superclass&lt;/strong&gt; and each superclass has the potential for an &lt;strong&gt;unlimited number of subclasses&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#what-are-interfaces"&gt;
  &lt;/a&gt;
  üìå What are Interfaces
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;An interface is a contract between a class and the outside world. When a class implements an interface, it promises to provide the behavior published by that interface.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Methods form the object's interface with the outside world. &lt;/li&gt;
&lt;li&gt;In its most common form, an interface is a group of related methods with empty bodies.&lt;/li&gt;
&lt;li&gt;Implementing an interface allows a class to become more formal about the behavior it promises to provide. &lt;/li&gt;
&lt;li&gt;Interfaces form a &lt;strong&gt;contract&lt;/strong&gt; between the class and the outside world and this contract is enforced at &lt;strong&gt;build time by the compiler&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If the class claims to implement an interface, all methods defined by that interface must appear in its source code before the class will successfully compile.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#what-are-packages"&gt;
  &lt;/a&gt;
  üìå What are Packages
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A package is a namespace for organizing classes and interfaces in a logical manner. Placing code into packages makes large software projects easier to manage.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;A package is a namespace that organizes a set of related classes and interfaces. Conceptually they are similar to folders in a computer. &lt;/li&gt;
&lt;li&gt;Because the program might be composed of hundreds and thousands of individual classes, it makes sense to keep things organized by placing related classes and interfaces into packages.&lt;/li&gt;
&lt;li&gt;The Java platform provides an enormous class library (a set of packages) suitable for use in applications. This library is known as the &lt;strong&gt;"Application Programming Interface (API)"&lt;/strong&gt;. Its packages represent tasks most commonly associated with general-purpose programming. The &lt;a href="https://docs.oracle.com/javase/8/docs/api/index.html"&gt;Java Platform API Specification&lt;/a&gt; contains the complete listing for all packages, interfaces, classes, fields and methods supplied by the Java SE plaform.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#question-quiz-time"&gt;
  &lt;/a&gt;
  ‚ùì Quiz Time
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;  &lt;em&gt;These questions are the review questions in the &lt;a href="https://docs.oracle.com/javase/tutorial/java/concepts/QandE/questions.html"&gt;Java documentation&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
  Real-world objects contain ‚ùì and ‚ùì.
  &lt;em&gt;Real-world objects contain &lt;strong&gt;states&lt;/strong&gt; and &lt;strong&gt;behaviors&lt;/strong&gt;.&lt;/em&gt; 


  A software object's state is stored in ‚ùì.
  &lt;em&gt;A software object's state is stored in &lt;strong&gt;fields&lt;/strong&gt;.&lt;/em&gt; 


  A software object's behavior is exposed through ‚ùì.
  &lt;em&gt;A software object's behavior is exposed through &lt;strong&gt;methods&lt;/strong&gt;.&lt;/em&gt; 


  Hiding internal data from the outside world, and accessing it only through publicly exposed methods is known as ‚ùì.
  &lt;em&gt;Hiding internal data from the outside world, and accessing it only through publicly exposed methods is known as &lt;strong&gt;data encapsulation&lt;/strong&gt;.&lt;/em&gt; 


  A blueprint for a software object is called a ‚ùì.
  &lt;em&gt;A blueprint for a software object is called a &lt;strong&gt;class&lt;/strong&gt;.&lt;/em&gt; 


  Common behavior can be defined in a ‚ùì and inherited into a ‚ùì using the ‚ùì keyword.
  &lt;em&gt;Common behavior can be defined in a &lt;strong&gt;superclass&lt;/strong&gt; and inherited into a &lt;strong&gt;subclass&lt;/strong&gt; using the &lt;strong&gt;&lt;code&gt;extends&lt;/code&gt;&lt;/strong&gt; keyword.&lt;/em&gt; 


  A collection of methods with no implementation is called an ‚ùì.
  &lt;em&gt;A collection of methods with no implementation is called an &lt;strong&gt;interface&lt;/strong&gt;.&lt;/em&gt; 


  A namespace that organizes classes and interfaces by functionality is called a ‚ùì.
  &lt;em&gt;A namespace that organizes classes and interfaces by functionality is called a &lt;strong&gt;package&lt;/strong&gt;.&lt;/em&gt; 


  The term API stands for ‚ùì ?
  &lt;em&gt;The term API stands for &lt;strong&gt;Application Programming Interface&lt;/strong&gt;.&lt;/em&gt; 

&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  [REFERENCES]
&lt;/h3&gt;

&lt;p&gt;[1] &lt;a href="https://docs.oracle.com/javase/tutorial/java/concepts/index.html"&gt;Java OOP Concepts&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>oop</category>
      <category>codenewbie</category>
      <category>todayisearched</category>
    </item>
    <item>
      <title>Test ActionMailer `deliver_later` in RSpec Controller Tests</title>
      <author>Josh Branchaud</author>
      <pubDate>Tue, 29 Jun 2021 00:16:17 +0000</pubDate>
      <link>https://dev.to/jbranchaud/test-actionmailer-deliverlater-in-rspec-controller-tests-44h7</link>
      <guid>https://dev.to/jbranchaud/test-actionmailer-deliverlater-in-rspec-controller-tests-44h7</guid>
      <description>&lt;p&gt;A lot can happen when a Rails controller action gets called. This includes transactional emails getting queued up for delivery. To ensure our controller's behavior stays consistent as our app evolves we can write RSpec tests.&lt;/p&gt;

&lt;p&gt;Among other things these tests can ensure that transactional emails get queued for delivery at the appropriate times.&lt;/p&gt;

&lt;p&gt;This post documents a couple different methods I've used for those tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-actionmailerbasedeliveries-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;ActionMailer::Base.deliveries&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;If you have your &lt;code&gt;queue_adapter&lt;/code&gt; set to &lt;a href="https://api.rubyonrails.org/classes/ActiveJob/QueueAdapters/InlineAdapter.html"&gt;&lt;code&gt;:inline&lt;/code&gt;&lt;/a&gt;, then a &lt;code&gt;deliver_later&lt;/code&gt; will happen synchronously. So, the email will immediately end up in the &lt;code&gt;deliveries&lt;/code&gt; box.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'#welcome'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'sends the welcome email to the user'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;valid_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;user_id: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:invite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;valid_params&lt;/span&gt;
    &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;ActionMailer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;deliveries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point you could even write an additional test to look at properties of the email that was sent, like who it was sent to and what the subject line said.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-haveenqueuedjob-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;have_enqueued_job&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The behavior is a bit different if your &lt;code&gt;queue_adapter&lt;/code&gt; is set to something like &lt;a href="https://api.rubyonrails.org/classes/ActiveJob/QueueAdapters/TestAdapter.html"&gt;&lt;code&gt;:test&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;async&lt;/code&gt;. In this case, the email is going to be queued in the app's job queue. Since it is not immediately being sent, the expectation will have to be about the job queue instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'#welcome'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'sends the welcome email to the user'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;valid_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;user_id: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:invite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;valid_params&lt;/span&gt;
    &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_enqueued_job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ActionMailer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DeliveryJob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can even dig into more specifics about what mailer class and method were invoked, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'#welcome'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'sends the welcome email to the user'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;valid_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;user_id: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:invite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;valid_params&lt;/span&gt;
    &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_enqueued_job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ActionMailer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;DeliveryJob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'UserMailer'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'welcome'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'deliver_now'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://relishapp.com/rspec-staging/rspec-rails/docs/matchers/have-enqueued-mail-matcher"&gt;docs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#receive-block-and-mail-double"&gt;
  &lt;/a&gt;
  Receive Block and Mail Double
&lt;/h2&gt;

&lt;p&gt;This approach mocks the mailer so that we can test that &lt;code&gt;deliver_later&lt;/code&gt; gets called. We take things a step further with the &lt;code&gt;receive&lt;/code&gt; method by using its &lt;code&gt;&amp;amp;block&lt;/code&gt; argument to make assertions about the values passed to the mailer method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'#welcome'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'sends the welcome email to the user'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;mail_double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_double&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:deliver_later&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;UserMailer&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:welcome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;valid_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;user_id: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:invite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;valid_params&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#actionmailer-rspec-matcher"&gt;
  &lt;/a&gt;
  ActionMailer RSpec Matcher
&lt;/h2&gt;

&lt;p&gt;The previous approach requires a bit of boilerplate setup. If There is a way to go the (instance) double route, without duplicating this setup over and over. That can be achieved with a custom RSpec matcher. I've used some version of the following on many Rails projects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# spec/support/mailer_matcher.rb&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"rspec/expectations"&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Matchers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define&lt;/span&gt; &lt;span class="ss"&gt;:send_email&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;mailer_action&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;mailer_class&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;message_delivery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;instance_double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ActionMailer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MessageDelivery&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mailer_class&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mailer_action&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message_delivery&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message_delivery&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:deliver_later&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming the spec helper requires support files, this custom matcher will be available in your specs. Here is how to use it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'#welcome'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'sends the welcome email to the user'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;UserMailer&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;send_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:welcome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;valid_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;user_id: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:invite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;valid_params&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are the approaches I know about and use. If I'm missing an approach to testing ActionMailer, drop a note. I'd love to see how you're doing it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you enjoy my writing, consider &lt;a href="https://crafty-builder-6996.ck.page/e169c61186"&gt;joining my newsletter&lt;/a&gt; or following me on &lt;a href="https://twitter.com/jbrancha"&gt;twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jbranchaud/til/blob/master/rails/test-if-deliver-later-is-called-for-a-mailer.md"&gt;Test If deliver_later Is Called For A Mailer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/27647749/how-to-test-actionmailer-deliver-later-with-rspec"&gt;Related StackOverflow Question&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://api.rubyonrails.org/v6.0.3.6/classes/ActionMailer/TestHelper.html"&gt;&lt;code&gt;ActionMailer::TestHelper&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/@timothyeberly?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Timothy Eberly&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/mail?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>testing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>üáßüá∑ | Produtividade com styled-components</title>
      <author>Diego Silva</author>
      <pubDate>Tue, 29 Jun 2021 00:04:26 +0000</pubDate>
      <link>https://dev.to/coderamos/produtividade-com-styled-components-67e</link>
      <guid>https://dev.to/coderamos/produtividade-com-styled-components-67e</guid>
      <description>&lt;p&gt;&lt;em&gt;Duas boas pr√°ticas para melhorar o seu projeto com essa biblioteca fenomenal&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;styled-components&lt;/strong&gt; √© uma biblioteca para estilizar a sua aplica√ß√£o atrav√©s do JavaScript e √© utilizada principalmente na estiliza√ß√£o de projetos React e React Native.&lt;/p&gt;

&lt;p&gt;Quando pensamos em estilizar algo, tamb√©m dever√≠amos estar pensando em como organizar esses estilos, e para quem est√° come√ßando no mundo do desenvolvimento front end, essas duas pr√°ticas s√£o fundamentais para a escrita e manuten√ß√£o de um bom c√≥digo:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crie-estilos-isolados"&gt;
  &lt;/a&gt;
  Crie estilos isolados
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Sempre que poss√≠vel, crie estilos isolados.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Atrav√©s dessa pr√°tica temos acesso aos estilos do seu componente de forma mais r√°pida e isso gera mais produtividade e torna a manutenibilidade seus estilos muito mais f√°cil.&lt;/p&gt;

&lt;p&gt;Uma pr√°tica muito utilizada no mercado √© criar o arquivo de estilos juntamente com o arquivo principal (&lt;code&gt;index.js&lt;/code&gt;) do seu componente / p√°gina.&lt;/p&gt;

&lt;p&gt;Nomear o seu arquivo como &lt;code&gt;styles.js&lt;/code&gt; ou &lt;code&gt;styled.js&lt;/code&gt; tamb√©m √© uma boa pr√°tica. Esses dois nomes s√£o muito utilizados.&lt;/p&gt;

&lt;p&gt;Como exemplo, essa √© a estrutura dos arquivos de estilo que utilizei em um template para React, no meu GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HyN5gUEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4lt44meb4ywjrbpi6zd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HyN5gUEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4lt44meb4ywjrbpi6zd.png" alt="files structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crie-estilos-sem%C3%A2nticos"&gt;
  &lt;/a&gt;
  Crie estilos sem√¢nticos
&lt;/h3&gt;

&lt;p&gt;Apesar do styled-components ser muito conhecido e adotado, √© comum vermos muitos componentes de agrupamento e que deveriam possui escopo sem√¢ntico, sendo criados como uma simples &lt;code&gt;div&lt;/code&gt;. √â extremamente importante n√£o esquecermos de utilizar as tags de forma correta  e consciente.&lt;/p&gt;

&lt;p&gt;Esse √© um exemplo de como criamos e exportamos um componente estilizado com styled-components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponentContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;``&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Podemos acessar todas as outras tags como propriedades do styled, como &lt;code&gt;styled.header&lt;/code&gt;, &lt;code&gt;styled.nav&lt;/code&gt;, &lt;code&gt;styled.section&lt;/code&gt;, &lt;code&gt;styled.article&lt;/code&gt;, &lt;code&gt;styled.aside&lt;/code&gt;, &lt;code&gt;styled.footer&lt;/code&gt;, dentre outras.&lt;/p&gt;




&lt;p&gt;Voc√™ pode acessar o template mencionado acima clicando &lt;a href="https://github.com/coderamos/template-reactjs"&gt;aqui&lt;/a&gt;. Baixe o projeto ai e me diga o que achou!&lt;/p&gt;

</description>
      <category>css</category>
      <category>react</category>
      <category>translated</category>
      <category>beginners</category>
    </item>
    <item>
      <title>part 4: insertion, search in binary search tree0</title>
      <author>Aya Bouchiha</author>
      <pubDate>Mon, 28 Jun 2021 23:43:41 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/part-4-insertion-search-in-binary-search-tree-4h44</link>
      <guid>https://dev.to/ayabouchiha/part-4-insertion-search-in-binary-search-tree-4h44</guid>
      <description>&lt;p&gt;hi, this is part 4 of the tree data structure we'll explain binary search tree operations with their implementation such as insertion, and search.&lt;br&gt;
In the next post, we will talk about the deletion.&lt;br&gt;
#day_16&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#insertion-in-the-binary-search-tree"&gt;
  &lt;/a&gt;
  Insertion in the binary search tree
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Let's say we want to insert 17 in this binary search tree.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        20
      /    \
    12      23
  /   \    /  \
7     15  21   35
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Since 17 &amp;lt; 20, we will go to the left sub-tree.&lt;/li&gt;
&lt;li&gt;17 &amp;gt; 12, we will go the right.&lt;/li&gt;
&lt;li&gt;17 &amp;gt; 15 and the no more child in the right's why we will go to the right and insert it.
so this binary search tree above will be like this:
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        20
      /     \
    12       23
  /   \     /  \
7     15   21   35
        \
         17
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#the-insert-approach"&gt;
  &lt;/a&gt;
  The insert approach
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;We need to know that the inserted node will be always one of the binary search tree leaves.&lt;/li&gt;
&lt;li&gt;while the root is None(&lt;em&gt;null&lt;/em&gt;) store the previous root in a variable 

&lt;ol&gt;
&lt;li&gt;if the previousRoot is less than the elementToInsert moves to the root of the right sub-tree &lt;code&gt;root = root. right&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;else (&lt;em&gt;that means the previousRoot is greater than or equal the elementToInsert&lt;/em&gt;) move to the root of the left sub-tree &lt;code&gt;root = root. left&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;When the loop break (&lt;em&gt;stop&lt;/em&gt;), the previous root will be:

&lt;ol&gt;
&lt;li&gt;case 1:  &lt;code&gt;previousRoot = None&lt;/code&gt; if the binary search tree is empty. so the previousRoot will be the new Node &lt;code&gt;previousRoot = Node(elementToInsert)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;case 2:  &lt;code&gt;previousRoot &amp;lt; elementToInsert&lt;/code&gt; if the previousRoot is less than the elementToInsert, so the node will be the right child of the previousRoot &lt;code&gt;previousRoot.right = elementToInsert&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;case 3: &lt;code&gt;previousRoot &amp;gt;= elementToInsert&lt;/code&gt; if the previousRoot is greater than or equal the elementToInsert, so the node will be the left child of the previousRoot &lt;code&gt;previousRoot.left = elementToInsert&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#implementation-of-insert-using-python"&gt;
  &lt;/a&gt;
  Implementation of insert using python
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elementToInsert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# new node
&lt;/span&gt;    &lt;span class="n"&gt;TheNewNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elementToInsert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;previousRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;previousRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
        &lt;span class="c1"&gt;# if the root's value is less than elementToInsert
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;elementToInsert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# the root variable will be the root of the right sub-tree
&lt;/span&gt;            &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;
        &lt;span class="c1"&gt;# if the root value is greater than or equal elementToInsert
&lt;/span&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# the root variable will be the root of the left sub-tree
&lt;/span&gt;            &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="c1"&gt;# if the binary search tree is empty
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;previousRoot&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;previousRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TheNewNode&lt;/span&gt;
    &lt;span class="c1"&gt;# if the previous root value is greater than or equal the elementToInsert
&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;previousRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;elementToInsert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# the new node will be its left child
&lt;/span&gt;        &lt;span class="n"&gt;previousRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TheNewNode&lt;/span&gt;
    &lt;span class="c1"&gt;# if the previous root value is less than the elementToInsert
&lt;/span&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="c1"&gt;# the new node will be its right child
&lt;/span&gt;        &lt;span class="n"&gt;previousRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TheNewNode&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TheNewNode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#search-in-the-binary-search-tree"&gt;
  &lt;/a&gt;
  Search in the binary search tree
&lt;/h2&gt;

&lt;p&gt;We want to search for example the number 21&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        20
      /    \
    12      23
  /   \    /  \
7     15  21   35
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;start from the root and compare its value with the wanted number (20 &amp;lt; 21), so we will go to the right sub-tree and compare its root with the wanted element.&lt;/li&gt;
&lt;li&gt;(23 &amp;gt; 21), that's why we will go to the left sub-tree and compare its root with the wanted element.&lt;/li&gt;
&lt;li&gt;since (21 == 21), will return the node&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-search-approach"&gt;
  &lt;/a&gt;
  the search approach
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;compare the root value with the wanted element. 

&lt;ul&gt;
&lt;li&gt;If the root is None (null) &lt;em&gt;that means the element is not found&lt;/em&gt; return False. &lt;/li&gt;
&lt;li&gt;Else If the root is equal to the wanted element return the root.&lt;/li&gt;
&lt;li&gt;Else If the root is greater than it, return the same function with these arguments:(root of the left sub-tree, wanted element)&lt;/li&gt;
&lt;li&gt;Else (that means the root is less than the wanted element)  return the same function with these arguments:(root of the right sub-tree, wanted element)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#implementation-of-the-search-algorithm-in-the-binary-search-tree"&gt;
  &lt;/a&gt;
  implementation of the search algorithm in the binary search tree
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="c1"&gt;# If there are no more nodes.
&lt;/span&gt;    &lt;span class="c1"&gt;# that means the node value will be None(null)
&lt;/span&gt;    &lt;span class="c1"&gt;# that means the wanted element doesn't exist
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# the wanted element is not found so return False
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="c1"&gt;# if the root value is equal to the wanted element
&lt;/span&gt;    &lt;span class="c1"&gt;# that means the wanted element is found
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;wantedElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# return the node
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
    &lt;span class="c1"&gt;# if the root value is smaller than  the wanted element
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;wantedElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# return the same function with the root of the right sub-tree
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;wantedElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# if the root value is greater than or equal the wanted element
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;wantedElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# return the same function with the root of the left sub-tree
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;wantedElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happy coding! see you next post (&lt;em&gt;we will discuss deletion&lt;/em&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/insert-a-node-in-binary-search-tree-iteratively/"&gt;https://www.geeksforgeeks.org/insert-a-node-in-binary-search-tree-iteratively/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/binary-search-tree-data-structure/"&gt;https://www.geeksforgeeks.org/binary-search-tree-data-structure/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.javatpoint.com/insertion-in-binary-search-tree"&gt;https://www.javatpoint.com/insertion-in-binary-search-tree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>algorithms</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Conviction to Code</title>
      <author>commdao</author>
      <pubDate>Mon, 28 Jun 2021 23:40:58 +0000</pubDate>
      <link>https://dev.to/commdao/conviction-to-code-1fph</link>
      <guid>https://dev.to/commdao/conviction-to-code-1fph</guid>
      <description>&lt;p&gt;I reached a &lt;em&gt;great&lt;/em&gt; milestone moment in this coding journey recently. &lt;/p&gt;

&lt;p&gt;For the past month and a half I've tried to buckle down on my routine and study habits. I know it's repeated often (and with good reason) to make your own projects. Don't &lt;em&gt;only&lt;/em&gt; follow along in a tutorial. And I've been trying to stick to that. I've also started writing some of the code with pen and paper, hoping to have it be better ingrained.&lt;/p&gt;

&lt;p&gt;But with coding being so different from most of the things I've done before, progress &lt;em&gt;felt&lt;/em&gt; stagnant still. A little different from imposter syndrome, but I'd get frustrated and just wonder &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;am I really ever going to be able to learn this coding stuff?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And then I remember, this feeling isn't so different at all. &lt;/p&gt;

&lt;p&gt;Well, I didn't come to that realization on my own. &lt;a href="https://youtu.be/vP2MNhC_Igw"&gt;WebDevSimplified has a video about not needing to memorize code.&lt;/a&gt; My mentor introduced a "simplified" function that really intimidating:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4qKN3C28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11he8l4ltx5cqdz4ifxb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4qKN3C28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11he8l4ltx5cqdz4ifxb.jpg" alt="Blurred Because Mentor Shame"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But he reminded me that the important thing isn't knowing every single component, and instead, simply being able to think through the process.&lt;/p&gt;

&lt;p&gt;And that's an experience that is very familiar. I had it when learning Japanese (a language very different from Spanish or French). Learning the writing system is a daunting task, but I excelled at speaking because I knew how to think through a conversation. &lt;/p&gt;

&lt;p&gt;I had it when starting my fitness journey. In the beginning, you might not know all the exercises and machines, but you probably have an idea of what you're hoping to work. And that small sense, even if completely misguided, can separate those who are feeling iffy on what they're doing vs. those who absolutely have no idea what they're doing.&lt;/p&gt;

&lt;p&gt;You don't have to know everything. And when you hit that moment where you don't know something-- yeah it can still suck. But knowing that you don't know something in particular, that's still an advantage.&lt;/p&gt;

&lt;p&gt;In fighting games I get overwhelmed by all the options available constantly. &lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PKR6G-FG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1407913151077650434/pu/img/J5iMq13ykrToIY_2.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgmpAdeo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1393392228358369282/CQNKDTkT_normal.jpg" alt="Jon Dao profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jon Dao
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/commdao"&gt;@commdao&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Found a &lt;a href="https://twitter.com/hashtag/BBCF"&gt;#BBCF&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/NintendoSwitch"&gt;#NintendoSwitch&lt;/a&gt; ranked match! I get bodied as expected... 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      04:07 AM - 24 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1407913201312833539" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1407913201312833539" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1407913201312833539" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;It's a very pulverizing genre, and it makes total sense why a lot of people would rather play something else. But it's super helpful for those who want to stick with it to know that's part of the process. You can't know all the options when you're new.&lt;/p&gt;

&lt;p&gt;Doing well doesn't even really show you how much you've learned. It's encountering the problem (again and again sometimes), and finding out how to get out of it... that's what it's all about.&lt;/p&gt;

&lt;p&gt;And eventually, all these options that used to feel overwhelming? They're going to feel pretty damn freeing when you can flex them. üí™&lt;/p&gt;




&lt;p&gt;I titled this post the way I did because of the plot from Dragon Zakura. One of the core themes is drawing out the sense of conviction, and I like that word a lot since "sense of belief" and "motivation" have been overtaken by toxic positivity.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2FJjwBv5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/BrA1uuiCIAEymvJ.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgmpAdeo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1393392228358369282/CQNKDTkT_normal.jpg" alt="Jon Dao profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jon Dao
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/commdao"&gt;@commdao&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      "On a test, there's always one right answer. If you don't find that right answer, you fail..." &lt;a href="https://twitter.com/hashtag/Quotes"&gt;#Quotes&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DragonZakura"&gt;#DragonZakura&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      23:37 PM - 25 Jun 2014
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=481944238616494080" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=481944238616494080" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=481944238616494080" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;It's nice to be inspired. It's nice to have reminders for your self-esteem. Yet, those can be fleeting.&lt;/p&gt;

&lt;p&gt;With conviction, it's set. &lt;/p&gt;

&lt;p&gt;For now, after feeling pretty directionless for some time, I know I want to keep coding!  &lt;/p&gt;

</description>
      <category>motivation</category>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Netflix Clone using ReactJS, Python (Flask), and TMDB API</title>
      <author>Srinandan Komanduri</author>
      <pubDate>Mon, 28 Jun 2021 23:33:22 +0000</pubDate>
      <link>https://dev.to/keidakira/netflix-clone-using-reactjs-python-flask-and-tmdb-api-3c52</link>
      <guid>https://dev.to/keidakira/netflix-clone-using-reactjs-python-flask-and-tmdb-api-3c52</guid>
      <description>&lt;p&gt;Well, one day I was recommended by YouTube a video named "Build Netflix Clone in React" and I was like.... that's a cool idea. And that is how I spent four days non-stop building a Netflix clone. And here is the  &lt;a href="https://my-watchlist-eba0a.web.app/"&gt;demo&lt;/a&gt; :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WNVmztOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624921448789/H64jPqpMy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WNVmztOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624921448789/H64jPqpMy.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I built the front-end in ReactJS and hosted it on firebase.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For the back-end, I used Python with Flask since I needed some web-scraping work to be done.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As for getting the info about movies, I used &lt;a href="https://developers.themoviedb.org/3/getting-started/introduction"&gt;TMDB&lt;/a&gt; API along with JustWatch for getting the sources where we can stream movies/shows/anime, as shown below for the anime Jujutsu Kaisen:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s42TaHPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624922736286/XJr5ZWn8x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s42TaHPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624922736286/XJr5ZWn8x.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are interested in the code, you can get the repo &lt;a href="https://github.com/keidakira/my-watchlist"&gt;here&lt;/a&gt;, if any of you are interested to know how I built it, then I'll definitely write a tutorial on it!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>python</category>
    </item>
    <item>
      <title>EVERYTHING About the Azure Pipelines Scale Set Agents (VMSS)</title>
      <author>Davide 'CoderDave' Benvegn√π</author>
      <pubDate>Mon, 28 Jun 2021 23:29:32 +0000</pubDate>
      <link>https://dev.to/n3wt0n/everything-about-the-azure-pipelines-scale-set-agents-vmss-cp2</link>
      <guid>https://dev.to/n3wt0n/everything-about-the-azure-pipelines-scale-set-agents-vmss-cp2</guid>
      <description>&lt;p&gt;Today we are going to cover everything you need to know about the Scale Set Agents in Azure Pipelines, and how to use them to make your builds more elastic and flexible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3oILIG4i71g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/3oILIG4i71g"&gt;Link to the video: https://youtu.be/3oILIG4i71g&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;So, Scale Set Agents in Azure Pipelines.&lt;/p&gt;

&lt;p&gt;As the name says those are agents that you can install and run in Azure Virtual Machine Scale Sets, or VMSS.&lt;/p&gt;

&lt;p&gt;As such, they can be scaled horizontally automatically, to make your build faster, more elastic, and eventually more flexible.&lt;/p&gt;

&lt;p&gt;But Dave, I hear you asking, why would I bother to install my self-host agent in VMSS rather than using the Azure DevOps hosted agents instead? Can't I achieve the same flexibility just adding more hosted agents?&lt;/p&gt;

&lt;p&gt;The answers to these questions are not so obvious. Let me explain.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-scale-set-agents"&gt;
  &lt;/a&gt;
  Why Scale Set Agents?
&lt;/h3&gt;

&lt;p&gt;First of all, unlike Microsoft-hosted agents, you have flexibility over the size and the image of the machines on which agents run. When you use the hosted agents in fact, you depend on what Azure DevOps provides for you.&lt;/p&gt;

&lt;p&gt;What if you need more resources, like more CPU power or RAM for the operations you have to perform? Or what if you need to install some software or library in order to build your application?&lt;/p&gt;

&lt;p&gt;On the hosted agents you can't quite do it, can you?&lt;/p&gt;

&lt;p&gt;And apart from that, there may be situations in which even if you are ok with what the hosted agents provide you can use them because of the environment you operate in.&lt;/p&gt;

&lt;p&gt;Perhaps you depend on services or servers that are in a private network and therefore not reachable from internet. Or yet you may want to restrict network connectivity of agent machines and allow them to reach only approved sites.&lt;/p&gt;

&lt;p&gt;In all of these scenarios you could install the normal self-hosted agents and scale them manually. But as we will see in a moment the Scale Set Agents are a much better solution.&lt;/p&gt;

&lt;p&gt;Of course, this is if you are in Azure or you have an Azure Subscription. Let me know in the comment section below if you use other providers like GCP or AWS and would like to see how to scale your agents of those platforms as well.&lt;/p&gt;

&lt;p&gt;Alright, let's see now how to set Scale Set Agents up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-virtual-machine-scale-set-with-proper-configuration"&gt;
  &lt;/a&gt;
  Create a Virtual Machine Scale Set with Proper Configuration
&lt;/h3&gt;

&lt;p&gt;First thing to do is, of course, to create a VMSS cluster that Pipelines can use.&lt;/p&gt;

&lt;p&gt;The virtual machine scale set must have the Azure's autoscaling disabled so that Azure Pipelines can determine how to perform scaling based on number of incoming pipeline jobs.&lt;/p&gt;

&lt;p&gt;To do it, you can use this script from Azure CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;az vmss create &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--name&lt;/span&gt; YOUR_POOL_NAME &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--resource-group&lt;/span&gt; RES_GROUP &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--image&lt;/span&gt; UbuntuLTS &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--vm-sku&lt;/span&gt; Standard_D2_v3 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--storage-sku&lt;/span&gt; StandardSSD_LRS &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--authentication-type&lt;/span&gt; SSH &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--instance-count&lt;/span&gt; 2 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--disable-overprovision&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--upgrade-policy-mode&lt;/span&gt; manual &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--single-placement-group&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--platform-fault-domain-count&lt;/span&gt; 1 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--load-balancer&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make sure this works properly, remember that &lt;code&gt;--disable-overprovision&lt;/code&gt; and &lt;code&gt;--upgrade-policy-mode manual&lt;/code&gt; are required.&lt;/p&gt;

&lt;p&gt;About &lt;code&gt;--load-balancer ""&lt;/code&gt;, Azure Pipelines doesn't require a load balancer to route jobs to the agents in the scale set agent pool, but configuring a load balancer is one way to get an IP address for your scale set agents that you could use for firewall rules.&lt;/p&gt;

&lt;p&gt;In the example I've created the scale set with a standard image, but most likely you would want to use an image with all the tools you need already installed. Good news, since this is a normal VMSS you can use any image you want.&lt;/p&gt;

&lt;p&gt;And the same is true for updating an image, you can use the usual tools and commands for upgrading your images and when done all the new agents will be created with the new image. Let me know in the comment section below if you want me to create a video to explain how to work with Azure Virtual Machine Scale Set&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-an-agent-pool-for-scale-set-in-azure-devops"&gt;
  &lt;/a&gt;
  Create an Agent Pool for Scale Set in Azure DevOps
&lt;/h3&gt;

&lt;p&gt;Alright, now that we have the Scale Set properly set, it's time to create an Agents Pool in Azure DevOps.&lt;/p&gt;

&lt;p&gt;To do so, just go to the Project (or Organization) settings, then Agent Pools, and then click on "Add Pool"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GyUoHWen--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxuov76uxmttnsj2a9nw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GyUoHWen--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxuov76uxmttnsj2a9nw.png" alt="Agent Pool"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In there, select &lt;em&gt;__Azure virtual machine scale set&lt;/em&gt;_ for the pool type. Then select the Azure subscription that contains the scale set, choose &lt;em&gt;Authorize&lt;/em&gt;, and choose the desired virtual machine scale set from that subscription. If you have an existing service connection you can choose that from the list instead of the subscription.&lt;/p&gt;

&lt;p&gt;There are there a number of options you can specify, which will influence how your Scale Set Agents will be scaled in and out. Check &lt;a href="https://youtu.be/3oILIG4i71g?t=316"&gt;this section of the video&lt;/a&gt; for a full explanation of those setting&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To configure a scale set agent pool, you must have either &lt;strong&gt;Owner&lt;/strong&gt; or &lt;strong&gt;User Access Administrator&lt;/strong&gt; permissions on the Azure selected subscription. If you have one of these permissions but get an error when you choose Authorize, it could be due to the fact that your user has only guest permission in the directory, or that it is not authorized to add applications in the directory. Either way, talk to your AAD admin.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please note that the only service connection currently supported is using ARM with a service principal key. If you try to use an ARM service connection based either on a certificate credential or a Managed Identity, the process will fail with an error like this one:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Invalid Service Endpoint with Id &amp;lt;guid&amp;gt; and Scope &amp;lt;guid&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-an-agent-from-the-scale-set-agent-pool"&gt;
  &lt;/a&gt;
  Use an Agent from the Scale Set Agent Pool
&lt;/h3&gt;

&lt;p&gt;Using a scale set agent pool is similar to any other agent pool. You can use it in classic build, release, or YAML pipelines. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#classic-build-pipelines"&gt;
  &lt;/a&gt;
  Classic Build Pipelines
&lt;/h4&gt;

&lt;p&gt;Just change the pool in the Run options:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uSGwu_3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq31hieqhunx3r0mqph3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uSGwu_3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq31hieqhunx3r0mqph3.png" alt="Classic Build"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#classic-release-pipelines"&gt;
  &lt;/a&gt;
  Classic Release Pipelines
&lt;/h4&gt;

&lt;p&gt;Change the pool in the Agent options:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S-CQjHEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c1a8p3803jqgfzf08cb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S-CQjHEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c1a8p3803jqgfzf08cb.png" alt="Classic Release"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#yaml-pipelines"&gt;
  &lt;/a&gt;
  YAML Pipelines
&lt;/h4&gt;

&lt;p&gt;Change the YAML section in the Pipeline, Stage, or Job:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oeTBvDhl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86mxloigkndvdv2y16f5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oeTBvDhl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86mxloigkndvdv2y16f5.png" alt="YAML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;User permissions, pipeline permissions, approvals, and all other checks work the same way as in any other agent pool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scaling-in-and-out"&gt;
  &lt;/a&gt;
  Scaling in and out
&lt;/h3&gt;

&lt;p&gt;Ok, last thing I want to talk about is how Azure Pipelines manage the scale set and the agents in it. First, some theory.&lt;/p&gt;

&lt;p&gt;Azure Pipelines samples the state of the agents in the pool and virtual machines in the scale set every 5 minutes. The decision to scale in or out is based on the number of idle agents at that time. Fairly enough, an agent is considered idle if it is online and is not running a job.&lt;/p&gt;

&lt;p&gt;When needed, Azure Pipelines performs a scale out operation if either of the following conditions is satisfied:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The number of idle agents is lower than the number of standby agents you specify&lt;/li&gt;
&lt;li&gt;There are pipeline jobs waiting in the queue and no agents is in the idle state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If one of these conditions is met, Azure Pipelines grows the number of VMs incrementally.&lt;/p&gt;

&lt;p&gt;Talking about scaling in, instead, Azure Pipelines scales in the agents when the number of idle agents exceeds the standby count for more than 30 minutes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ljc3VYpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yld9gst5ydc1xg3s23t2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ljc3VYpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yld9gst5ydc1xg3s23t2.png" alt="Delay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To see a &lt;strong&gt;Complete Demo&lt;/strong&gt; of scaling agents in and out, check &lt;a href="https://youtu.be/3oILIG4i71g?t=608"&gt;this section of the video&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#limitations"&gt;
  &lt;/a&gt;
  Limitations
&lt;/h3&gt;

&lt;p&gt;At the time of writing, if you create a VMSS using Linux only Ubuntu is supported as OS for the Scale Set Agents. RedHad and Debian are not supported.&lt;/p&gt;

&lt;p&gt;And if you are using Windows 10 client, it does not support running the pipeline agent as a local user and therefore the agent cannot interact with the UI. The agent will run as Local Service instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Let me know in the comments below if you are using or going to use the Scale Set agents in Azure Pipelines and what kind of problem they solve for you.&lt;/p&gt;

&lt;p&gt;You may also want to watch &lt;a href="https://youtu.be/rO-VKProMp8"&gt;this video here&lt;/a&gt;, in which I explain how to containerize your Azure Pipelines Agents for more flexibility.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üöÄ for more content:&lt;/p&gt;

&lt;p&gt;üìΩ &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
‚òï &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
üíñ &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
üåê &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
üëï &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
üë¶üèª &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
üê±‚Äçüíª &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
üë≤üèª &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
üë¥üèª &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
üîâ &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3oILIG4i71g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>azuredevops</category>
      <category>azure</category>
      <category>devops</category>
      <category>cicd</category>
    </item>
    <item>
      <title>How to record an HTML canvas element and make a GIF</title>
      <author>ndesmic</author>
      <pubDate>Mon, 28 Jun 2021 23:25:28 +0000</pubDate>
      <link>https://dev.to/ndesmic/how-to-record-a-canvas-element-and-make-a-gif-4852</link>
      <guid>https://dev.to/ndesmic/how-to-record-a-canvas-element-and-make-a-gif-4852</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ndesmic/embed/yLMrOqa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This sort of slipped into my recent post on doing the camera for my WebGL project because I needed something to make visual samples to post with the article.  As of this writing, Chromium browsers will work, Firefox should work with a couple tweaks (noted below, but not present in the demo), Safari will not.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#get-your-canvas"&gt;
  &lt;/a&gt;
  Get your canvas
&lt;/h1&gt;

&lt;p&gt;The canvas can have anything, WebGL, normal 2d stuff, WebGPU it doesn't matter.  You can also do &lt;code&gt;video&lt;/code&gt; and &lt;code&gt;audio&lt;/code&gt; elements too.&lt;/p&gt;

&lt;p&gt;In my code I have canvas that cycles through colors.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;canvas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;recordBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;recording&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mediaRecorder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;recordedChunks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;recordBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;recording&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;recording&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;recording&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;recordBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Stop&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;captureStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;mediaRecorder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MediaRecorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;mimeType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;video/webm;codecs=vp9&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                                &lt;span class="na"&gt;ignoreMutedMedia&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="nx"&gt;recordedChunks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
            &lt;span class="nx"&gt;mediaRecorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ondataavailable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                    &lt;span class="nx"&gt;recordedChunks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="nx"&gt;mediaRecorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;recordBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Record&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;mediaRecorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Blob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;recordedChunks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video/webm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="p"&gt;});&lt;/span&gt;
                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;download&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;recording.webm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;revokeObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we get a stream from the canvas &lt;code&gt;canvas.captureStream(25)&lt;/code&gt;.  The parameter is the max framerate, you can change less but if it animates more than that you'll drop frames.&lt;/p&gt;

&lt;p&gt;Next we create a &lt;code&gt;MediaRecorder&lt;/code&gt;.  This takes two parameters a stream, which comes from the canvas (or &lt;code&gt;video&lt;/code&gt;, &lt;code&gt;audio&lt;/code&gt; etc) and some options which include the bitrate and which codec you want to use.  The list of options can be found on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder"&gt;MDN&lt;/a&gt; but I use 2:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ignoreMutedMedia: true.  This is because we don't have an audio track so we don't need to waste size with silence.&lt;/li&gt;
&lt;li&gt;mimeType: 'video/webm;codecs=vp9'.  This one is a bit odd but we can provide the MIME type for WEBM.  It also includes the codec as we can use VP8 or VP9.  WEBM with VP9 will probably get you the best compression to quality ratio but you can play around with it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we have to keep track of the "chunks".  In many cases this is a misnomer as you'll probably only get one chunk, it's not really streaming in the way you think.  The media recorder has a &lt;code&gt;dataavailable&lt;/code&gt; event that triggers every time the stream has a new chunk for you.  So we inspect &lt;code&gt;size&lt;/code&gt; to make sure it has something and then append it to the array with our other chunks.  To start this whole process we use &lt;code&gt;start()&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#note-for-firefox-users"&gt;
  &lt;/a&gt;
  Note for Firefox users
&lt;/h2&gt;

&lt;p&gt;You'll need to remove &lt;code&gt;ignoreMutedMedia&lt;/code&gt; as it doesn't seem to work in Firefox and will just cause the whole canvas to not produce chunks.  You'll also need to use the VP8 codec &lt;code&gt;video/webm;codecs=vp8&lt;/code&gt; as Firefox doesn't yet support VP9.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stopping-and-downloading"&gt;
  &lt;/a&gt;
  Stopping and downloading
&lt;/h2&gt;

&lt;p&gt;If we were already recording then we use the other block which stops and downloads the recording.  We call stop on the media recorder to stop.  This will cause the buffer to flush and you'll get a chunk in ondataavailable.  The sucky part is that this doesn't happen synchronously so I wrap the next part in a setTimeout 0 to make sure it happens after the flush.  There are slightly more accurate ways to do this but this is fine for most real cases.&lt;/p&gt;

&lt;p&gt;Using the blob constructor we capture the array of chunks and turn it into a blob with the MIME type &lt;code&gt;video/webm&lt;/code&gt;.  If you use a different codec that is not webm you need to change it. &lt;/p&gt;

&lt;p&gt;Then we have the canonical way to download something in a web app.  You need to create an object URL for the blob.  Create a link (you don't need to attach it to the DOM), set the &lt;code&gt;href&lt;/code&gt; to the object URL, add a &lt;code&gt;download&lt;/code&gt; attribute so that the browser triggers downloading with the filename suggestion and then programmatically click it.  After that clean up the object URL otherwise you'll have a memory leak.&lt;/p&gt;

&lt;p&gt;And there we have a WEBM of whatever you were doing.  If all media and blog platforms were nice this would be all we need.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#converting-to-gif"&gt;
  &lt;/a&gt;
  Converting to GIF
&lt;/h1&gt;

&lt;p&gt;Some platforms are less good than others.  Despite the fact that WEBMs take up a fraction of the size they often aren't accepted but GIFs usually are and this seems to include dev.to.  So sadly, we need to bloat our video with a crappy image codec that looks bad and is much bigger.  This part is also less easy.  The simplest way I've found is to use FFMPEG which is a basically an industry standard, open-source, CLI swiss army knife of video conversion.&lt;/p&gt;

&lt;p&gt;You can find a download for it here:&lt;br&gt;
&lt;a href="https://ffmpeg.org/"&gt;https://ffmpeg.org/&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ffmpeg &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; input.webm &lt;span class="nt"&gt;-vf&lt;/span&gt; palettegen palette.png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(For Powershell you need to use &lt;code&gt;./ffmpeg.exe&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;First run this.  This extracts a pallet as a PNG file for the gif as without it we'll get worse looking results.  The &lt;code&gt;-y&lt;/code&gt; says to overwrite the output file without asking. &lt;code&gt;-i&lt;/code&gt; marks an input and &lt;code&gt;-vf&lt;/code&gt; means to export a filtergraph (I don't exactly know but it has something to do with pallets)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ffmpeg &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; input.webm &lt;span class="nt"&gt;-i&lt;/span&gt; palette.png &lt;span class="nt"&gt;-filter_complex&lt;/span&gt; paletteuse &lt;span class="nt"&gt;-r&lt;/span&gt; 10 output.gif
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This converts the WEBM to a GIF.  We're also providing the filtergraph we made in the last step.  We use the &lt;code&gt;-filter_complex palettuse&lt;/code&gt; option which is again some filtergraph thing I don't fully understand but seems to amount to "use the pallet."  The last parameter &lt;code&gt;-r&lt;/code&gt; is the framerate.  You can match the video for better results or lower it for reduced file size.&lt;/p&gt;

&lt;p&gt;You can also add the &lt;code&gt;-loop&lt;/code&gt; parameter.  By default it is 0 which means loop forever but you can have it stop as well.&lt;/p&gt;

&lt;p&gt;Here's what it produces:&lt;/p&gt;

&lt;p&gt;Without generating a pallet:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uW8IjUFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3iqkfe4mxr4mz1e8yteq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uW8IjUFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3iqkfe4mxr4mz1e8yteq.gif" alt="output0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pallet at 10 FPS:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ij-MHFPC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl2xvv8wfy21bzbe4mur.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ij-MHFPC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl2xvv8wfy21bzbe4mur.gif" alt="output1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pallet at 25FPS (native recording fps):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b87tKy4X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ur2uihidefe19oy22o4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b87tKy4X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ur2uihidefe19oy22o4.gif" alt="output2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Size-wise:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;webm: 5kb&lt;/li&gt;
&lt;li&gt;gif (no pallet, 10fps): 28.0kb&lt;/li&gt;
&lt;li&gt;gif (pallet, 10fps): 12.0kb&lt;/li&gt;
&lt;li&gt;gif (pallet, 25fps): 24.0kb&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using the pallet seems to improve file size as well.&lt;/p&gt;

&lt;p&gt;If it doesn't exist already perhaps the next step is to convert FFMPEG to WASM so we can run this all in the browser without dealing with the command line.  But this is a quick and dirty way to get an example for dev.to.&lt;/p&gt;

&lt;p&gt;It's also worth mentioning if you want to dive into the rabbit-hole there are zillions of options with FFMPEG to get better compression, different formats and special features. &lt;a href="http://www.ffmpeg.org/ffmpeg.html"&gt;http://www.ffmpeg.org/ffmpeg.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ffmpeg</category>
      <category>canvas</category>
      <category>vanillajs</category>
    </item>
    <item>
      <title>what i learned last week: under the hood of javascript </title>
      <author>reyes2981</author>
      <pubDate>Mon, 28 Jun 2021 22:53:25 +0000</pubDate>
      <link>https://dev.to/reyes2981/what-i-learned-last-week-under-the-hood-of-javascript-5e37</link>
      <guid>https://dev.to/reyes2981/what-i-learned-last-week-under-the-hood-of-javascript-5e37</guid>
      <description>&lt;p&gt;Lets get to it! &lt;/p&gt;

&lt;p&gt;JavaScript is a single threaded programming language which means it contains the execution of instructions in a single sequence. In other words, one command is processed at a time. &lt;/p&gt;

&lt;p&gt;In a post-pandemic world where everything has gone virtual, JavaScript many not seem impressive or useful, right? Wrong, in this article I'm going to dive &lt;em&gt;under the hood&lt;/em&gt; and attempt to show you why this programming language is dynamic and powerful. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VlnOGvUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9d0l23xm4fd891oe9i9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VlnOGvUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9d0l23xm4fd891oe9i9.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As previously stated, JavaScript, is a single threaded programming language. So what does that mean? It means that it has a single call stack. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3S4JCwn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhjueycar7mavqjq0ntw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3S4JCwn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhjueycar7mavqjq0ntw.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Call_stack"&gt;call stack&lt;/a&gt; is a mechanism for an interpreter (like the JavaScript interpreter in a web browser) to keep track of its place in a script that calls multiple functions ‚Äî what function is currently being run and what functions are called from within that function, etc.&lt;/p&gt;

&lt;p&gt;A more palatable way to think of the call stack is a data structure that records where in the program we are.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;We have declared the &lt;code&gt;reyBear&lt;/code&gt; function which has one&lt;br&gt;
console.log command logging ‚Äòhello from the reybear function‚Äô to the console. Below the newly created function there are two separate console.log commands and the &lt;code&gt;reyBear&lt;/code&gt; function has been called. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nWeM58yp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ky7zqt129jrad6vkqxg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nWeM58yp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ky7zqt129jrad6vkqxg.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note, the function does not log it's message until line five has completed. Why is that? Well, because of the fact that JavaScript, again, has a single call stack. This is where the issues start popping up. &lt;/p&gt;

&lt;p&gt;As technology continues rapidly evolving the demand for a seamless U/I experience continues growing. Alone, JavaScript's inability to work in an asynchronous manner is a huge drawback that can make slow and buggy websites but with modern problems come modern solutions! &lt;/p&gt;

&lt;p&gt;The browser isn't just a runtime environment it also provides web API's. These threads, which you can only make calls too, utilize a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop"&gt;concurrency model&lt;/a&gt; based on an event loop, which is responsible for executing the code, collecting and processing events, and executing queued sub-tasks. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kAamE3N6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhqw700yaisfs54d4neq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kAamE3N6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhqw700yaisfs54d4neq.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To be more specific, once a task has been completed in the web API thread it will be pushed to the task queue. The task will than wait in that thread until the (event loop)[&lt;a href="https://www.educative.io/edpresso/what-is-an-event-loop-in-javascript"&gt;https://www.educative.io/edpresso/what-is-an-event-loop-in-javascript&lt;/a&gt;] pushes it to the call stack and voila! Welcome to asynchronous programming in JavaScript!&lt;/p&gt;

&lt;p&gt;NOTE: the event loop only pushes a task from the task queue to the call stack &lt;strong&gt;if&lt;/strong&gt; the call stack is empty. &lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const response = await fetch(resource, options);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First, we create a variable and inside of it call &lt;code&gt;fetch()&lt;/code&gt; which starts a request and returns a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;promise&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ng-hIQF3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r9vev4npqdp4nyntdpkl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ng-hIQF3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r9vev4npqdp4nyntdpkl.png" alt="https://medium.com/@pravngaur/javascript-promises-66685250d657"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the request completes, the promise is either resolved or rejected. If it is resolved it will do so with a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Response"&gt;response object&lt;/a&gt;. If rejected, a warning will be displayed. &lt;/p&gt;

&lt;p&gt;Example: &lt;/p&gt;

&lt;p&gt;Lets add to the previous example and make a new request to fetch dogs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function fetchDogs() {
  const response = await fetch('/dogs');
  console.log(response);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NOTE: we know this is an asynchronous function due to the &lt;code&gt;async&lt;/code&gt; keyword. &lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
  </channel>
</rss>
