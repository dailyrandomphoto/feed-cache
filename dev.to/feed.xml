<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>UseRef deatailed tutorial</title>
      <author>Saleh Mubashar</author>
      <pubDate>Sat, 06 Nov 2021 09:19:12 +0000</pubDate>
      <link>https://dev.to/salehmubashar/useref-deatailed-tutorial-5933</link>
      <guid>https://dev.to/salehmubashar/useref-deatailed-tutorial-5933</guid>
      <description>&lt;p&gt;Hi guys&lt;br&gt;
My new &lt;a href="https://discover.hubpages.com/technology/useRef"&gt;tutorial&lt;/a&gt; is published at hubpages.&lt;br&gt;
This one is a detailed post about useRef and useRef vs useState.&lt;br&gt;
There also a demo walkthrough as well&lt;br&gt;
I would really appreciate if you check it out.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tutorial-link"&gt;
  &lt;/a&gt;
  &lt;a href="https://discover.hubpages.com/technology/useRef"&gt;Tutorial link&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#my-profile"&gt;
  &lt;/a&gt;
  &lt;a href="https://hubpages.com/@salehmubashar"&gt;My profile&lt;/a&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#create-a-hubpages-account-and-earn-by-writing"&gt;
  &lt;/a&gt;
  &lt;a href="http://hubpages.com/_dev/user/new"&gt;Create a hubpages account&lt;/a&gt; and earn by writing.
&lt;/h4&gt;

&lt;p&gt;Once again, thank you all.&lt;br&gt;
Until next time&lt;br&gt;
Cheers :)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What are SOLID Principles? Explained with OOP Concepts.</title>
      <author>Praveena Thavarajah</author>
      <pubDate>Sat, 06 Nov 2021 09:12:32 +0000</pubDate>
      <link>https://dev.to/praveenat/what-are-solid-principles-explained-with-oop-concepts-1n9o</link>
      <guid>https://dev.to/praveenat/what-are-solid-principles-explained-with-oop-concepts-1n9o</guid>
      <description>&lt;p&gt;Software developers implement codes to meet the users’ requirements and satisfy the clients. Some principles have to follow by software developers to enhance their code writing skills.&lt;/p&gt;

&lt;p&gt;The SOLID principles have considerable responsibility to guide the software developers, to make the software design by improving the code quality.&lt;/p&gt;

&lt;p&gt;An American software engineer named Robert C.Martin created this principle.&lt;/p&gt;

&lt;p&gt;Solid principles have five(5) principles. The name is created by considering the first five letters from each principle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The five principles are&lt;/strong&gt;,&lt;br&gt;
S — Single Responsibility Principle&lt;br&gt;
O — Open Closed Principle.&lt;br&gt;
L — Liskov Substitution Principle.&lt;br&gt;
I — Interface Segregation Principle.&lt;br&gt;
D — Dependency Inversion Principle.&lt;/p&gt;

&lt;p&gt;Let us have a look at each of the principles. Read more at &lt;a href="https://praveena-thavarajah.blogspot.com/2021/11/what-are-solid-principles-oop-concepts.html"&gt;https://praveena-thavarajah.blogspot.com/2021/11/what-are-solid-principles-oop-concepts.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading the blog. I hope you got to know about SOLID principles. For more posts follow me through my social media.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>softwaredevelopment</category>
      <category>beginners</category>
      <category>blog</category>
    </item>
    <item>
      <title>Day 29 of 100 Days of Code &amp; Scrum: 4th Weekly Retrospective, WTF It's Been a Month!?</title>
      <author>Rammina</author>
      <pubDate>Sat, 06 Nov 2021 08:52:23 +0000</pubDate>
      <link>https://dev.to/rammina/day-29-of-100-days-of-code-scrum-4th-weekly-retrospective-wtf-its-been-a-month-1pam</link>
      <guid>https://dev.to/rammina/day-29-of-100-days-of-code-scrum-4th-weekly-retrospective-wtf-its-been-a-month-1pam</guid>
      <description>&lt;p&gt;Guess what, everyone?!&lt;/p&gt;

&lt;p&gt;I've already been blogging daily for a month now! It's my 4th Weekly Retrospective, and I didn't even notice I already got this far. It definitely has been a rough, yet fulfilling journey!&lt;/p&gt;

&lt;p&gt;Thank you to everyone who have followed me so far! A lot of you have encouraged me to keep going through this challenge.&lt;/p&gt;

&lt;p&gt;Special thanks to my wife and editor, May for editing images, sharing ideas for content, and supporting my career and decisions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kcRHHA8n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frhzyxqhljek09eqi5iw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kcRHHA8n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frhzyxqhljek09eqi5iw.png" alt="Finish Line" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anyway, I'm not going to skip my retrospective, so let's move on to my daily report!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weekly-sprint-goals"&gt;
  &lt;/a&gt;
  Weekly Sprint Goals
&lt;/h2&gt;

&lt;p&gt;For reference, here were the Sprint Goals for this week:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;learn and review Next.js.&lt;/li&gt;
&lt;li&gt;lay out my plans for my company's website.&lt;/li&gt;
&lt;li&gt;write user stories for my website, so I can plan ahead and prioritize what features I will really need right away and what might be desirable in the future.&lt;/li&gt;
&lt;li&gt;finish my beginner Scrum guide.&lt;/li&gt;
&lt;li&gt;finish reading &lt;a href="https://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2/"&gt;Scrum and XP from the Trenches&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;continue studying for Professional Scrum Master I (PSM I) certification.&lt;/li&gt;
&lt;li&gt;finish my guides about Scrum.&lt;/li&gt;
&lt;li&gt;continue networking, but allocate less time to this (coding is more important).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...I think I did everything &lt;em&gt;except finishing my beginner Scrum guide&lt;/em&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weekly-review"&gt;
  &lt;/a&gt;
  Weekly Review
&lt;/h2&gt;

&lt;p&gt;I was really close to achieving all of my weekly goals! Here are what I've done:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;finish the official Next.js tutorial.&lt;/li&gt;
&lt;li&gt;finish reading &lt;a href="https://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2/"&gt;Scrum and XP from the Trenches&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;make initial plans for my company's website.&lt;/li&gt;
&lt;li&gt;write user stories for my website.&lt;/li&gt;
&lt;li&gt;created a temporary, prototype company banner.&lt;/li&gt;
&lt;li&gt;continue studying for Professional Scrum Master I (PSM I) certification.&lt;/li&gt;
&lt;li&gt;continue to network, but this time I did not spend as much time on social media!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#weekly-retrospective"&gt;
  &lt;/a&gt;
  Weekly Retrospective
&lt;/h2&gt;

&lt;p&gt;Moving on, let's tackle what I've managed to do well, what my shortcomings are, and what I could do better next time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-went-great"&gt;
  &lt;/a&gt;
  What Went Great
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;finish the official Next.js tutorial.&lt;/li&gt;
&lt;li&gt;finish reading &lt;a href="https://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2/"&gt;Scrum and XP from the Trenches&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;created a temporary, prototype company banner.&lt;/li&gt;
&lt;li&gt;started working on my company's website, built with Next.js.&lt;/li&gt;
&lt;li&gt;reached out to multiple people on different platforms, but without getting too distracted by social media.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#some-mistakes-ive-made"&gt;
  &lt;/a&gt;
  Some Mistakes I've Made
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I couldn't finish my &lt;em&gt;Introduction to Scrum&lt;/em&gt; guide.&lt;/li&gt;
&lt;li&gt;I don't know why I keep forgetting to make the guide.&lt;/li&gt;
&lt;li&gt;AGAIN, forgot to install a website blocker to stop myself from checking off-topic content (subconsciously, I could be avoiding this).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#things-i-could-improve-on"&gt;
  &lt;/a&gt;
  Things I Could Improve On
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;stop procrastinating writing the Scrum guide.&lt;/li&gt;
&lt;li&gt;I should DEFINITELY install something that blocks me from checking certain sites at a specific time.&lt;/li&gt;
&lt;li&gt;prioritize tasks that are more likely to help me meet my weekly goals.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm rejoicing over the fact that I've been keeping this up for a month now.&lt;/p&gt;

&lt;p&gt;Thank you once again, everyone! Have a great weekend!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_oVqbnxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjvzonk4b2rnjw2f98mk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_oVqbnxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjvzonk4b2rnjw2f98mk.png" alt="Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app?utm_source=next-site&amp;amp;utm_medium=nav-cta&amp;amp;utm_campaign=next-website"&gt;Official Next.js tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2/"&gt;Scrum and XP from the Trenches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Flask Black Dashboard - Product Update</title>
      <author>Sm0ke</author>
      <pubDate>Sat, 06 Nov 2021 08:50:42 +0000</pubDate>
      <link>https://dev.to/sm0ke/flask-black-dashboard-product-update-eae</link>
      <guid>https://dev.to/sm0ke/flask-black-dashboard-product-update-eae</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presents &lt;a href="https://appseed.us/admin-dashboards/flask-dashboard-black"&gt;Flask Dashboard Black&lt;/a&gt;, a simple open-source project crafted on top of &lt;strong&gt;Black Dashboard&lt;/strong&gt; BS4 design. The product was recently updated to use the latest Flask stable version, plus a new codebase structure and Gulp tooling for SCSS compilation. For newcomers, &lt;strong&gt;Flask&lt;/strong&gt; is a popular Python web framework actively supported by many open-source enthusiasts. The project might help developers to code faster a new dashboard or simply by beginners for eLearning purposes. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;✨ &lt;a href="https://appseed.us/admin-dashboards/flask-dashboard-black"&gt;Flask Dashboard Black&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://flask-black-dashboard.appseed-srv1.com/"&gt;Flask Dashboard Black&lt;/a&gt; - LIVE deployment&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVqB3jSs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11dknxjg7mw0485fkix6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVqB3jSs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11dknxjg7mw0485fkix6.gif" alt="Flask Dashboard Black - Gif animated presentation." width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#update-summary"&gt;
  &lt;/a&gt;
  Update Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Bump Codebase: Flask Dashboard v2.0.0&lt;/li&gt;
&lt;li&gt;Dependencies update (all packages)&lt;/li&gt;
&lt;li&gt;Flask==2.0.1 (latest stable version)&lt;/li&gt;
&lt;li&gt;Better Code formatting&lt;/li&gt;
&lt;li&gt;Improved Files organization&lt;/li&gt;
&lt;li&gt;Optimized imports&lt;/li&gt;
&lt;li&gt;Docker Scripts Update&lt;/li&gt;
&lt;li&gt;Gulp Tooling (SASS Compilation)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The codebase was updated to a new, more intuitive structure and optimized Docker scripts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt; PROJECT ROOT &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   |
   |-- apps/
   |    |
   |    |-- home/                     &lt;span class="c"&gt;# Serves HTML files&lt;/span&gt;
   |    |-- authentication/           &lt;span class="c"&gt;# Handles auth routes&lt;/span&gt;
   |    |
   |    |-- static/
   |    |    |-- &amp;lt;css, JS, images&amp;gt;    &lt;span class="c"&gt;# CSS files, Javascripts files&lt;/span&gt;
   |    |
   |    |-- templates/                &lt;span class="c"&gt;# Templates used to render pages&lt;/span&gt;
   |    |    |-- includes/            &lt;span class="c"&gt;# HTML chunks and components&lt;/span&gt;
   |    |    |-- layouts/             &lt;span class="c"&gt;# Master pages&lt;/span&gt;
   |    |    |-- accounts/            &lt;span class="c"&gt;# Authentication pages&lt;/span&gt;
   |    |    |-- home/                &lt;span class="c"&gt;# UI Kit Pages&lt;/span&gt;
   |    |         |-- index.html      &lt;span class="c"&gt;# Index page&lt;/span&gt;
   |    |         |-- 404-page.html   &lt;span class="c"&gt;# 404 page&lt;/span&gt;
   |    |         |-- &lt;span class="k"&gt;*&lt;/span&gt;.html          &lt;span class="c"&gt;# All other pages&lt;/span&gt;
   |    |    
   |  config.py                       &lt;span class="c"&gt;# Set up the app&lt;/span&gt;
   |    __init__.py                   &lt;span class="c"&gt;# Initialize the app&lt;/span&gt;
   |
   |-- requirements.txt               &lt;span class="c"&gt;# Development modules&lt;/span&gt;
   |
   |-- Dockerfile                     &lt;span class="c"&gt;# Deployment&lt;/span&gt;
   |-- docker-compose.yml             &lt;span class="c"&gt;# Deployment&lt;/span&gt;
   |-- gunicorn-cfg.py                &lt;span class="c"&gt;# Deployment   &lt;/span&gt;
   |-- nginx                          &lt;span class="c"&gt;# Deployment&lt;/span&gt;
   |    |-- appseed-app.conf          &lt;span class="c"&gt;# Deployment &lt;/span&gt;
   |
   |-- .env                           &lt;span class="c"&gt;# Inject Configuration &lt;/span&gt;
   |-- run.py                         &lt;span class="c"&gt;# Start the app - WSGI gateway&lt;/span&gt;
   |
   |-- &lt;span class="k"&gt;********************************************************&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we get familiar with the structure, we can use the Docker scripts shipped by the product to compile and start the product. Let's go!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone/download sources&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/flask-black-dashboard.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flask-black-dashboard 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Start in Docker&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose pull   &lt;span class="c"&gt;# download modules&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose build  &lt;span class="c"&gt;# local set up&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up     &lt;span class="c"&gt;# start the app  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once all the above commands are executed, we should see &lt;strong&gt;Flask Dashboard Black&lt;/strong&gt; running in the browser &lt;code&gt;http://localhost:85&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oFsNpR_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bacpczfpm90htd1ppf0h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oFsNpR_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bacpczfpm90htd1ppf0h.png" alt="Flask Black Dashboard - Light Mode" width="880" height="488"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Flask Black Dashboard&lt;/strong&gt; - User Profile&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E6byHr6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7588ruiehbwma7pb3za3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E6byHr6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7588ruiehbwma7pb3za3.png" alt="Flask Black Dashboard - User Profile Page." width="880" height="493"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#black-dashboard-design-info"&gt;
  &lt;/a&gt;
  Black Dashboard - Design Info
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Black Dashboard&lt;/strong&gt; is a beautiful Bootstrap 4 Admin Dashboard with a huge number of components built to fit together and look amazing. If you are looking for a tool to manage and visualize data about your business, this dashboard is the thing for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Black Dashboard&lt;/strong&gt; features over 16 individual components, giving you the freedom of choosing and combining. This means that there are thousands of possible combinations. All components can take variations in color, that you can easily modify using SASS files. You will save a lot of time going from prototyping to full-functional code because all elements are implemented.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YBvMHRa6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yd4xnd79yrausm44t8z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YBvMHRa6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yd4xnd79yrausm44t8z.png" alt="Black Dashboard - Official Product Page" width="800" height="600"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;AppSeed for &lt;a href="https://appseed.us/support"&gt;support&lt;/a&gt; and more &lt;a href="https://appseed.us/admin-dashboards/flask"&gt;Flask Dashboards&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/flask-dashboard-black-pro"&gt;Flask Black Dashboard PRO&lt;/a&gt; - for more pages and components &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>flask</category>
      <category>dashboards</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Using iCalendar for semi-predictable but oddball events</title>
      <author>webchick</author>
      <pubDate>Sat, 06 Nov 2021 08:49:06 +0000</pubDate>
      <link>https://dev.to/webchick/using-icalendar-for-semi-predictable-but-oddball-events-20nk</link>
      <guid>https://dev.to/webchick/using-icalendar-for-semi-predictable-but-oddball-events-20nk</guid>
      <description>&lt;p&gt;(RFC reading for fun &lt;em&gt;and&lt;/em&gt; pragmatism!)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;My girlfriend is a nurse, and around these parts that means she works shift work. Her schedule is a block of shifts (sometimes day shifts, sometimes evening shifts) followed by a block of days off (which also varies as to the number of days), and the entire schedule itself repeats every so many weeks. Basically, picture something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oFqMhNla--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hx39j2baaf7ynzf1xabr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oFqMhNla--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hx39j2baaf7ynzf1xabr.png" alt="A grid showing Day and Evening shifts spread throughout a calendar in an unpredictable manner" width="880" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;..and repeat.&lt;/p&gt;

&lt;p&gt;While there &lt;em&gt;is&lt;/em&gt; a pattern to it, it essentially means that without access to a copy of her schedule readily at hand, it is &lt;em&gt;literally impossible&lt;/em&gt; to know if we are free on some random day next month. So obviously, I want an electronic version at the ready for these types of inquiries.&lt;/p&gt;

&lt;p&gt;Unfortunately, it is also &lt;em&gt;incredibly tedious&lt;/em&gt; to enter all of these shifts one by one, by hand, into something like Google Calendar, because it requires manually creating dozens of events (“repeats every other Monday” unfortunately does not cut it here :P), and on each of them, manually selecting “Repeats,” manually selecting “Custom…”, manually selecting “every X weeks”, all without introducing any errors. &lt;em&gt;Ugh.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Fortunately, here to save the day… the iCalendar specification!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-icalendar-specification"&gt;
  &lt;/a&gt;
  What is the iCalendar specification?
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://www.ietf.org/rfc/rfc2445.txt"&gt;iCalendar specification&lt;/a&gt; (as in &lt;a href="https://www.ietf.org/rfc/rfc2445.txt"&gt;RFC 5545&lt;/a&gt;, not to be confused with good ol’ &lt;a href="http://www.apple.com/ical/"&gt;iCal&lt;/a&gt;, now known as Apple’s &lt;a href="https://support.apple.com/en-ca/guide/calendar/welcome/mac"&gt;Calendar&lt;/a&gt; app) is a “data format for representing and exchanging calendaring and scheduling information such as events, to-dos, journal entries, and free/busy information, independent of any particular calendar service or protocol.”&lt;/p&gt;

&lt;p&gt;Basically, it’s a list of rules about how to describe events in computer-friendly language, and if you follow those rules, users can import your events consistently in whatever various calendaring programs they might be using. Glancing through the specification, you’ll see it talks about how to specify all kinds of features you may have seen in various calendaring apps, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Specify a location&lt;/li&gt;
&lt;li&gt;Specify a time zone&lt;/li&gt;
&lt;li&gt;Repeat an event with a certain frequency&lt;/li&gt;
&lt;li&gt;Note whether someone’s an optional or required attendee&lt;/li&gt;
&lt;li&gt;Denote whether it shows up as busy or free time on someone’s calendar&lt;/li&gt;
&lt;li&gt;Send an alert a few minutes before an event happens&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...and much, much more.&lt;/p&gt;

&lt;p&gt;If you’ve ever received an email with a .ics file attached, and when you click it you’re prompted to add an event to your calendar, such as below… Congratulations! You officially have experience with iCalendar! :D&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKdbij23--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1tswavc4g6u0dmihk8j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKdbij23--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1tswavc4g6u0dmihk8j.png" alt="An image of an calendar prompt, asking whether to add a new event to your calendar" width="880" height="350"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s talk about what iCalendar looks like under the hood.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-basics-of-icalendar"&gt;
  &lt;/a&gt;
  The Basics of iCalendar
&lt;/h2&gt;

&lt;p&gt;The “simplest thing that can possibly work” in terms of iCalendar is a text file, with an .ics extension, that contains the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;BEGIN:VCALENDAR … END:VCALENDAR&lt;/code&gt;&lt;/strong&gt;: (required) Marks the beginning and end of the iCalendar object as a whole (similar to how  …  wraps around a web page).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;VERSION&lt;/code&gt;&lt;/strong&gt;: (required) The version number of the specification required (generally, “2.0” unless you’re feeling super retro).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;PRODID&lt;/code&gt;&lt;/strong&gt;: (required) A unique identifier for the product that created the iCalendar object. Some real-world examples are &lt;code&gt;“-//Google Inc//Google Calendar 70.9054//EN”&lt;/code&gt; for Google Calendar and &lt;code&gt;“-//Apple Inc.//Mac OS X 10.14.6//EN”&lt;/code&gt; for Apple Calendar.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;BEGIN:VEVENT … BEGIN:VEVENT&lt;/code&gt;&lt;/strong&gt;: One or more of these pairings mark the beginning and end of an event definition.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;UID&lt;/code&gt;&lt;/strong&gt;: (required) A unique identifier for the event. &lt;code&gt;[buncha-random-chars]&lt;/code&gt; and &lt;code&gt;[buncha-random-chars]@[yourdomain.com]&lt;/code&gt; are both common patterns.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;DTSTAMP&lt;/code&gt;&lt;/strong&gt;: (required) The date/time that the event was created (not to be confused with when it starts, which is the next one).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;DTSTART … DTEND&lt;/code&gt;&lt;/strong&gt;: When the event starts and ends.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s a simple example tying all of that together:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//Example Corp//Example Calendar App 1.0//EN
BEGIN:VEVENT
UID:20210310T001345Z-0242ac130003@example.com
DTSTAMP:20210310T001345Z
DTSTART:19991231T235959
DTEND:20000101T000000
SUMMARY:Party like it’s 1999!
END:VEVENT
END:VCALENDAR
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you save this as “y2k.ics” and import it, you should see a new event appear at the very tail end 1999 that lasts from 11:59:59PM on December 31, 1999 until midnight on January 1, 2020!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-specify-a-datetime"&gt;
  &lt;/a&gt;
  How to specify a date/time?
&lt;/h2&gt;

&lt;p&gt;The RFC gets into this at length, but the basic gist is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If it’s a date only, it’s specified in the format of &lt;code&gt;YYYYMMDD&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If it’s a date and time, it’s specified in the format of &lt;code&gt;YYYYMMDDTHHMMSS&lt;/code&gt; (with &lt;code&gt;HH&lt;/code&gt; in 24-hour time). If it’s a UTC time (see below) it also has a &lt;code&gt;Z&lt;/code&gt; at the end.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are &lt;a href="https://tools.ietf.org/html/rfc5545#section-3.3.5"&gt;three different ways to specify a date and time&lt;/a&gt; such as 11:59:59PM on December 31, 1999:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Date with local time&lt;/strong&gt;: Used when you want an event to be at the same time, regardless of a person’s location.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    DTSTART:19991231T235959
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Date with UTC time&lt;/strong&gt;: Used when you want an event to be at an absolute time across all geographic locations, and disregarding Daylight Savings Time. (Note: &lt;code&gt;DTSTAMP&lt;/code&gt; is always in this format.)
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     DTSTART:19991231T235959Z
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Date with local time and timezone reference&lt;/strong&gt;: A combination of both; it pegs to a specific time, but within a given time zone, so it takes into consideration things like Daylight Savings Time.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     DTSTART;TZID=America/Vancouver:19991231T235959
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we went with the “date with local time” format so that the event would be at the same time regardless of location, since exactly when the “last minute of 1999” is differs across the globe. But for tracking shift schedules, “Date with local time and timezone reference” makes more sense, because if I fly to Europe for work, I don’t want the start times to shift by several hours.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nope, that semi-colon after &lt;code&gt;DTSTART&lt;/code&gt; in the third example is not a typo. “Property parameters” such as &lt;code&gt;TZID&lt;/code&gt; are passed in with a semicolon rather than a colon. (See List and Field Separators) This will also come into play with...&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#repeating-events"&gt;
  &lt;/a&gt;
  Repeating Events
&lt;/h2&gt;

&lt;p&gt;Ok, so we already have enough information to create each shift schedule the first time, but note that it repeats every X weeks. How do we handle &lt;em&gt;that&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="https://tools.ietf.org/html/rfc5545#section-3.8.5.3"&gt;Recurrence Rules (RRULE)&lt;/a&gt;! This property defines a rule or repeating pattern for recurring events. Here are just a few of the &lt;a href="https://tools.ietf.org/html/rfc5545#section-3.3.10"&gt;options&lt;/a&gt; that it supports:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;FREQ&lt;/code&gt;: How often the event occurs. Some examples are &lt;code&gt;WEEKLY&lt;/code&gt;, &lt;code&gt;DAILY&lt;/code&gt;, and even &lt;code&gt;SECONDLY&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;INTERVAL&lt;/code&gt;: How many &lt;code&gt;FREQ&lt;/code&gt;s should there be in between events?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;COUNT&lt;/code&gt;: Repeat the event X times. (Useful if you have a class that runs for 4 weeks, for example)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;UNTIL&lt;/code&gt;: Alternatively, this will repeat the event until a certain date.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;BYDAY&lt;/code&gt;: Allows you to say something only happens on certain days of the week.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The RFC has &lt;a href="https://tools.ietf.org/html/rfc5545#section-3.8.5.3"&gt;all sorts of examples&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it All Together
&lt;/h2&gt;

&lt;p&gt;For our purposes, we need events that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use a &lt;strong&gt;Date with local time and timezone reference&lt;/strong&gt; because I travel frequently (in non-COVID times) and I want the events to be shown at the proper start/end times regardless of where I am in the world.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have a &lt;code&gt;FREQ&lt;/code&gt; of &lt;code&gt;WEEKLY&lt;/code&gt; and an &lt;code&gt;INTERVAL&lt;/code&gt; of 8 since the schedule repeats every 8 weeks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And an &lt;code&gt;UNTIL&lt;/code&gt; date of &lt;code&gt;12/31/2021&lt;/code&gt; because the schedule gets reset every calendar year, and next year will be something different! (Hance my very strong desire to write this process down. ;))&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Put it all together, and you get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//Webchick Inc//Webchick’s Crappy Bash Script 1.0//EN
BEGIN:VEVENT
UID:3231CB09-1E10-4910-BB24-B358629890B7
DTSTAMP:20210314T090733Z
SUMMARY:Day Shift
DTSTART;TZID=America/Vancouver:20210111T080000
DTEND;TZID=America/Vancouver:20210111T180000
RRULE:FREQ=WEEKLY;INTERVAL=8;UNTIL=20211231
END:VEVENT

... (repeat x many more events) ...

BEGIN:VEVENT
UID:F20376E5-FA0F-429D-AB1F-3F0155EE10BA
DTSTAMP:20210314T090734Z
SUMMARY:Evening Shift
DTSTART;TZID=America/Vancouver:20210208T173000
DTEND;TZID=America/Vancouver:20210208T233000
RRULE:FREQ=WEEKLY;INTERVAL=8;UNTIL=20211231
END:VEVENT

... (repeat x many more events) ...

END:VCALENDAR
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And when imported into Apple Calendar:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--py4i9jIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0ocqkx9re064qlr6rpu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--py4i9jIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0ocqkx9re064qlr6rpu.png" alt="Apple Calendar showing a variety of day/evening shifts interspersed" width="880" height="186"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And there you have it!&lt;/p&gt;

&lt;p&gt;So. The next time you get one of those .ics files, try popping it open in a text editor and see how much of it makes sense now!&lt;/p&gt;

&lt;p&gt;PS: If you want to see the bash script I used to generate this, it’s at &lt;a href="https://github.com/webchick/shiftycal"&gt;https://github.com/webchick/shiftycal&lt;/a&gt;. If you want to go it alone, &lt;a href="https://icalendar.org/validator.html"&gt;this handy validator&lt;/a&gt; is your friend!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Cover image: "&lt;a href="https://www.flickr.com/photos/64503524@N00/2319463826"&gt;iCal icon replacement&lt;/a&gt;" by &lt;a href="https://www.flickr.com/photos/64503524@N00"&gt;bertop&lt;/a&gt; is licensed under &lt;a href="https://creativecommons.org/licenses/by-nc-sa/2.0/?ref=ccsearch&amp;amp;atype=rich"&gt;CC BY-NC-SA 2.0&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icalendar</category>
      <category>programming</category>
      <category>productivity</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Introduction To Go Programming</title>
      <author>Samuel K.M</author>
      <pubDate>Sat, 06 Nov 2021 08:16:56 +0000</pubDate>
      <link>https://dev.to/bazeng/introduction-to-go-programming-3l9p</link>
      <guid>https://dev.to/bazeng/introduction-to-go-programming-3l9p</guid>
      <description>&lt;p&gt;The Go programming language is an open source project to make programmers more productive. It is designed at Google by Robert Griesemer, Rob Pike and Ken Thompson. Go is syntactically similar to C, but with memory safety, garbage collection, structural typing and CSP-style concurrency.&lt;/p&gt;

&lt;p&gt;Go is expressive, concise, clean, and efficient. Its concurrency mechanisms make it easy to write programs that get the most out of multicore and networked machines, while its novel type system enables flexible and modular program construction. &lt;/p&gt;

&lt;p&gt;Go compiles quickly to machine code yet has the convenience of garbage collection and the power of run-time reflection. It's a fast, statically typed, compiled language that feels like a dynamically typed, interpreted language.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-did-google-build-go"&gt;
  &lt;/a&gt;
  Why did google build Go?
&lt;/h4&gt;

&lt;p&gt;It is important to understand why google built Go. At the time of Go being built the most popular languages were Python, Java ,C &amp;amp; C++. However this languages had design limitations would be difficult to patch therefore Go was developed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Python&lt;/strong&gt; - easy to use ,but slow&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Java&lt;/strong&gt; - Complex Types&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;C &amp;amp; C++&lt;/strong&gt; - Fast but has Complex Types &amp;amp; Slow Compilation, at the time of their development machines weren't as powerful as today therefore they were built to work with little memory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also at the time of development of this languages, multithreaded systems were rare. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#key-features-of-golang"&gt;
  &lt;/a&gt;
  Key Features Of GoLang
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Strong &amp;amp; Statically Typed&lt;/li&gt;
&lt;li&gt;Simplicity &lt;/li&gt;
&lt;li&gt;Fast Compile Times&lt;/li&gt;
&lt;li&gt;Garbage Collection - you don't have to manage your own memory, the go runtime shall help you manage it.&lt;/li&gt;
&lt;li&gt;Built In Concurrency Primitives&lt;/li&gt;
&lt;li&gt;Go compiles down to standalone binaries&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#how-to-install-go"&gt;
  &lt;/a&gt;
  How to install Go
&lt;/h5&gt;

&lt;p&gt;Follow this &lt;a href="https://golang.org/doc/install"&gt;documentation&lt;/a&gt; to learn how to install&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h5&gt;

&lt;p&gt;To practice coding in the browser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://play.golang.org/"&gt;Playground&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just like other languages, go has different packages that handle different functions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pkg.go.dev/std"&gt;Packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get help&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://golang.org/help"&gt;Help&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#understanding-go-code"&gt;
  &lt;/a&gt;
  Understanding Go Code
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "fmt"
)

func main() {
    fmt.Println("Hello, playground")
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every application is structured into packages, for every file in go you will have to declare which package its part of. The code above, belongs to the &lt;code&gt;main package&lt;/code&gt;. The &lt;code&gt;main package&lt;/code&gt; is a special package as it is going to be the entry of your application.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;import&lt;/strong&gt; statement is what we use to import additional libraries. In the above code we are importing the &lt;code&gt;fmt&lt;/code&gt; library often pronounced as thumped.&lt;/p&gt;

&lt;p&gt;From the &lt;code&gt;fmt&lt;/code&gt; library we use the  &lt;code&gt;Println()&lt;/code&gt; function to print the code&lt;br&gt;
Run this code in the &lt;a href="https://golang.org/doc/install"&gt;Playground&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
    </item>
    <item>
      <title>The Full-Stack Developer Vocabulary (Pt.2, the more advanced)</title>
      <author>Code_Jedi</author>
      <pubDate>Sat, 06 Nov 2021 08:01:16 +0000</pubDate>
      <link>https://dev.to/code_jedi/the-full-stack-developer-vocabulary-pt2-the-more-advanced-33ge</link>
      <guid>https://dev.to/code_jedi/the-full-stack-developer-vocabulary-pt2-the-more-advanced-33ge</guid>
      <description>&lt;h4&gt;
  &lt;a href="#xml-jsx-sudo-jamstack"&gt;
  &lt;/a&gt;
  XML? JSX? Sudo? Jamstack?
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#wtf-is-everyone-talking-about"&gt;
  &lt;/a&gt;
  WTF is everyone talking about???
&lt;/h3&gt;

&lt;p&gt;If you're new to this whole full-stack development thing and get confused by some of the words people use when talking about full-stack development, then stick around because in this 3 part series, I'll be compiling the most common words and phrases related to full-stack development. Of course, it will take much more time to learn the details of each of the things I'll be mentioning in these articles. These articles are just summarizers to give you an idea of these words and phrases so that you can understand what people are referencing with them when talking about certain areas of full-stack development.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#part-2-the-more-advanced"&gt;
  &lt;/a&gt;
  Part 2: The more advanced
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;1. XML&lt;/strong&gt;&lt;br&gt;
XML stands for eXtensible Markup Language. XML plays an important role in many different IT systems and is often used for distributing data over the Internet. Read &lt;a href="https://www.w3schools.com/XML/xml_whatis.asp"&gt;This article&lt;/a&gt; to get a better understanding of XML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. JSX&lt;/strong&gt;&lt;br&gt;
JSX stands for JavaScript XML. JSX allows you to write HTML in ReactJS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. JSON&lt;/strong&gt;&lt;br&gt;
JSON is an acronym for JavaScript Object Notation. It is an open standard format, which is lightweight and text-based, designed explicitly for human-readable data interchange. It is a language-independent data format. It supports almost every kind of language, framework, and library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Firewall&lt;/strong&gt;&lt;br&gt;
A network security system that monitors and controls incoming and outgoing network traffic based on predetermined security rules.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. IP Address&lt;/strong&gt;&lt;br&gt;
An IP address is a unique string of characters that identifies each computer using the Internet Protocol to communicate over a network. IP addresses come in 2 types: IPv4 and IPv6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. IPv4&lt;/strong&gt;&lt;br&gt;
IPv4(IP version 4) addresses are 32-bit integers which will be expressed in decimal notation. Example- 192.0.2.126 could be an IPv4 address. IPv4 addresses are most common.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. IPv6&lt;/strong&gt;&lt;br&gt;
IPv6(IP version 6) is the improved version of IPv4. IPv6 addresses are more unique than IPv4 addresses and therefor offer more address variations. In addition to offering more addresses, IPv6 also implements features not present in IPv4. It simplifies aspects of address configuration, network renumbering, and router announcements when changing network connectivity providers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Proxy Server&lt;/strong&gt;&lt;br&gt;
This is a server that acts as an intermediate between a client and its destination server. A proxy server can let you make web requests through a different IP address. Proxies are most popularly used in VPNs and are useful if you want to hide your location, personal data or your overall identity on the web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. VPN&lt;/strong&gt;&lt;br&gt;
VPN stands for “virtual private network”. VPNs protect your internet connection and privacy online. They create an encrypted tunnel for your data, protect your online identity by hiding your IP address using proxy servers, and allow you to use public Wi-Fi hotspots safely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Nginx&lt;/strong&gt;&lt;br&gt;
Nginx, pronounced like “engine-ex”, is an open-source web server used for processing web requests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. Apache&lt;/strong&gt;&lt;br&gt;
Apache is the most widely used web server software similar to Nginx.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12. Jamstack&lt;/strong&gt;&lt;br&gt;
Jamstack is an architecture designed to make the web faster, more secure, and easier to scale. It builds on many of the tools and workflows which developers love such as ReactJS. The core principles of pre-rendering and decoupling enable sites and applications to be delivered with greater confidence and resilience than ever before.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13. Sudo&lt;/strong&gt;&lt;br&gt;
Sudo, standing for "SuperUser DO" is used to access restricted files and operations. By default, Linux systems restrict access to certain parts of the system preventing sensitive files from being compromised. The sudo command temporarily elevates privileges allowing users to complete sensitive tasks without logging in as the root user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14. Web Scraping&lt;/strong&gt;&lt;br&gt;
Web Scraping is the process of extracting data from external websites. Some of the most popular Web Scraping libraries include: &lt;a href="https://github.com/puppeteer/puppeteer"&gt;Puppeteer&lt;/a&gt;, &lt;a href="https://www.selenium.dev/"&gt;Selenium&lt;/a&gt; and &lt;a href="https://www.crummy.com/software/BeautifulSoup/"&gt;BeautifulSoup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;15. Git&lt;/strong&gt;&lt;br&gt;
Git is used for tracking changes in files and directories. Git is usually used for coordinating work among developers collaboratively developing source code during software development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;16. Cron jobs&lt;/strong&gt;&lt;br&gt;
Cron jobs are jobs scheduled by the backend to run at set intervals. Cron jobs are mostly used for managing back-end jobs created by users through the front-end.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;17. Responsive Web Design&lt;/strong&gt;&lt;br&gt;
Responsive web design, also referenced as RWD design, is a modern web design approach that allows websites to render (or display) on all devices and screen sizes by automatically adapting to the screen, whether it’s a desktop, laptop, tablet, or smartphone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;18. MySQL&lt;/strong&gt;&lt;br&gt;
MySQL is a relational database management system (RDBMS) developed by Oracle that is based on structured query language (SQL). A database is a structured collection of data. It may be anything from a simple shopping list to a picture gallery or a place to hold the vast amounts of information in a corporate network.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;19. NoSQL&lt;/strong&gt;&lt;br&gt;
NoSQL is famous for its high functionality and ease of development with a performance at scale. NoSQL is called a non-relational database. It does not follow the rules of relational database management systems (RDBMS), and hence does not use traditional SQL statements to query data. 2 famous examples of NoSQL systems are &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt; and &lt;a href="https://neo4j.com/"&gt;Neo4J&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;20. Environment variables&lt;/strong&gt;&lt;br&gt;
An environment variable is a variable whose value is set outside a program, typically through the operating system. Environment variables eliminate the need to define and redefine variables through programs.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Stick around for Pt.3(The last part): The languages, tools and frameworks!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I'll be posting the full list on &lt;a href="https://app.gumroad.com/mattnikonorov"&gt;my gumroad&lt;/a&gt; once I've released Part 3. A &lt;a href="https://mattnikonorov.gumroad.com/follow"&gt;follow&lt;/a&gt; there will be much appreciated ;)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>devops</category>
      <category>programming</category>
    </item>
    <item>
      <title>Deep dive into Node.js Architecture</title>
      <author>Altamash Ali</author>
      <pubDate>Sat, 06 Nov 2021 08:01:15 +0000</pubDate>
      <link>https://dev.to/altamashali/deep-dive-into-nodejs-architecture-5190</link>
      <guid>https://dev.to/altamashali/deep-dive-into-nodejs-architecture-5190</guid>
      <description>&lt;p&gt;In this article, we are going to deep dive into Node.js architecture and understand the asynchronous nature of Node.js.&lt;/p&gt;

&lt;p&gt;Let's dive into it.&lt;/p&gt;

&lt;p&gt;Node.js is a &lt;strong&gt;single-threaded&lt;/strong&gt;, &lt;strong&gt;asynchronous&lt;/strong&gt;, &lt;strong&gt;event-driven&lt;/strong&gt; runtime environment for running Javascript code on the server.&lt;/p&gt;

&lt;p&gt;By &lt;strong&gt;Single-threaded&lt;/strong&gt; means Javascript runtime executes only one piece of code( or statement) at any instance of time synchronously. It has only one call stack and one heap memory. But then how does runtime handles multiple asynchronous operations in an efficient way ? Node.js handles it efficiently using its event-driven approach. Don't worry about that now. We will come back to it soon :) .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I/O(input/output)&lt;/strong&gt; is the slowest among the fundamental operations of a computer. It involves accessing data on the disk, reading and writing a file, waiting for user input, doing a network call, performing some database operation etc. It adds a delay between the moment the request is sent to the device and the moment the operation completes.&lt;/p&gt;

&lt;p&gt;In tradition blocking I/O programming, the function call corresponding to an I/O request will block the execution of the thread until the operation completes. So, any web server that is implemented using blocking I/O will not be able to handle multiple connections in the same thread. Solution to this problem is using a separate thread( or process) to handle each concurrent connection.&lt;/p&gt;

&lt;p&gt;Most modern operating systems support another mechanism to access resources which is called &lt;strong&gt;non-blocking I/O&lt;/strong&gt; where the system call always return immediately without waiting for the I/O operation to complete. To handle concurrent non-blocking resources in an efficient way, it uses a mechanism called &lt;strong&gt;synchronous event demultiplexing&lt;/strong&gt; or &lt;strong&gt;event notification interface&lt;/strong&gt;. The synchronous event demultiplexing watches multiple resources and returns a new event (or set of events) when a read or write operation executed over one of those resources completes. The advantage here is that the synchronous event demultiplexer is synchronous so it blocks until there are new events to process.&lt;/p&gt;

&lt;p&gt;Pseudocode of an algorithm that uses a generic synchronous event demultiplexer to read from two different resources:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--suzEmc13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yn9h9uk7xldj47wr0idn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--suzEmc13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yn9h9uk7xldj47wr0idn.png" alt="Image description" width="880" height="702"&gt;&lt;/a&gt;&lt;br&gt;
Let's see what is happening in the above code snippet: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The resources are added to a data structure ( in our case watchedList), associating each one with a specific operation ( e.g. read)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The demultiplexer is set up with the group of resources to be watched. The call to demultiplexer.watch() is synchronous and blocks until any of the watched resources are ready for read. When this occurs, the event demultiplexer returns from the call and a new set of events is available to be processed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each event returned by the event demultiplexer is processed. At this point, the resource associated with each event is guaranteed to be ready to read and to not block during the operation.  When all the events are processed, the flow will block again on the event demultiplexer until new events are again available to be processed. This is called the mysterious &lt;strong&gt;event loop&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You might notice with this pattern that we can handle several I/O operations inside a single thread. Reason we are talking about demultiplexing as using just a single thread, we can deal with multiple resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multithreaded network applications&lt;/strong&gt; handle the network load like this:&lt;/p&gt;

&lt;p&gt;request ---&amp;gt; spawn a thread&lt;br&gt;
               ---&amp;gt; wait for database request&lt;br&gt;
                     ----&amp;gt; answer request&lt;/p&gt;

&lt;p&gt;request ---&amp;gt; spawn a thread&lt;br&gt;
               ---&amp;gt; wait for database request&lt;br&gt;
                     ----&amp;gt; answer request&lt;/p&gt;

&lt;p&gt;request ---&amp;gt; spawn a thread&lt;br&gt;
               ---&amp;gt; wait for database request&lt;br&gt;
                     ----&amp;gt; answer request&lt;/p&gt;

&lt;p&gt;so the thread spend most of their time using 0% CPU waiting for the database to return data. While doing so they have had to allocate memory required for a thread which includes a complete separate program stack for each thread etc. Also they would have to start a thread which while is not as expensive as starting a full process is still not exactly cheap.&lt;/p&gt;

&lt;p&gt;Since, we spend most of our time using 0% CPU, why not run some code when we are not using CPU ? That way, each request will still get the same amount of CPU time as multithreaded applications but we don't need to start a thread. so this is what happens in a single threaded environment:&lt;/p&gt;

&lt;p&gt;request -&amp;gt; make DB req&lt;br&gt;
request -&amp;gt; make DB req&lt;br&gt;
request -&amp;gt; make DB req&lt;br&gt;
DB req complete -&amp;gt; send response&lt;br&gt;
DB req complete -&amp;gt; send response&lt;br&gt;
DB req complete -&amp;gt; send response&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AQXbf-yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1127vuqm2v7j9lsmlqtf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AQXbf-yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1127vuqm2v7j9lsmlqtf.png" alt="Image description" width="638" height="151"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see that using only one thread doesn't impair our ability to run multiple I/O bound tasks concurrently. The tasks are spread over time, instead of being spread across multiple threads.&lt;/p&gt;

&lt;p&gt;Let me now introduce the &lt;strong&gt;reactor pattern&lt;/strong&gt; which is the heart of Node.js. &lt;/p&gt;

&lt;p&gt;The main idea behind the reactor pattern is to have a handler associated with each I/O operation. A handler in Node.js is represented by a callback function.The handler will be invoked as soon as an event is produced and processed by the event loop. So, The reactor pattern handles I/O by blocking until new events are available from a set of observed resources and then reacts by dispatching each event to an associated handler.&lt;/p&gt;

&lt;p&gt;The structure of the reactor pattern is shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5knDB95y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rse82pit8orgu9p29igg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5knDB95y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rse82pit8orgu9p29igg.jpg" alt="Image description" width="802" height="558"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The application generates a new I/O operation and request will be submitted to Event Demultiplexer. The application also specifies a handler, which will be invoked when the operation completes. Submitting a new request to the Event Demultiplexer is a non-blocking operation and it returns control to the application immediately.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When a set of I/O operations completes, the Event Demultiplexer pushes a set of corresponding events into the Event Queue.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After receiving a set of events from Event Demultiplexer, event loop iterates over the items of the Event Queue.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Handler associated with each handler is invoked.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The handler which is part of the application code, gives control back to the Event loop when its execution completes(a).&lt;br&gt;
While the handler execute, it can request new asynchronous operations, which in turn new items are added to the Event Demultiplexer(b).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When all the items in the Event Queue are processed, the Event loop blocks again on the Event Demultiplexer, which then triggers another cycle when a new event is available.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A Node.js application will exit when there are no more pending operations in the event demultiplexer and no more events to be processed inside the event queue.&lt;/p&gt;

&lt;p&gt;Each OS has its own interface for the event demultiplexer and each I/O operation can behave quite differently depending on the type of resource, even within the same OS. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To handle these inconsistencies, Node.js core team created a native library called &lt;strong&gt;libuv&lt;/strong&gt; which is written in C++. &lt;/li&gt;
&lt;li&gt;Libuv represents the low-level I/O engine of Node.js. It is a higher-level abstraction for the OS event demultiplexer, which make Node.js compatible with all the major operation systems and normalise the non-blocking behaviour of the different types of resource. &lt;/li&gt;
&lt;li&gt;It also implements the reactor pattern, thus providing an API for creating event loops, managing event queue, running asynchronous I/O operations and queuing other type of tasks.&lt;/li&gt;
&lt;li&gt;Internally libuv maintains a thread pool for managing I/O operations as well as CPU-intensive operations like crypto and zlib. This is a pool of finite size where I/O operations are allowed to happen. If the pool only contains four threads, then only four files can be read at the same time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The final high level architecture of Nodejs includes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3p_rJCWP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kc8dx6she13uq2f1akyk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3p_rJCWP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kc8dx6she13uq2f1akyk.png" alt="Image description" width="281" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A set of bindings responsible for wrapping and exposing libuv and other low level functionalities to Javascript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;V8, the Javascript engine originally developed by Google for the Chrome browser. This is one of the reason why Node.js is so fast and efficient.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A core Javascript Library that implements the high-level Node.js API.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;br&gt;
Node.js architecture is one of the hot topic for backend interviews. Having a deep understanding of Node.js asynchronous nature is a must for all Node.js devs for writing code efficiently. I really hope you have enjoyed reading this article. I would really recommend Node.js Design patterns book if you want to learn more about Node.js. In the next article, we will talk more about event loop.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Node.js Design Patterns by Mario Casciaro and Luciano Mammino&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/34855352/how-in-general-does-node-js-handle-10-000-concurrent-requests"&gt;Stack-overflow definitely&lt;/a&gt; :) &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;See you guys. Bye :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>architecture</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hello World !</title>
      <author>Arizki Putra Rahman</author>
      <pubDate>Sat, 06 Nov 2021 08:00:47 +0000</pubDate>
      <link>https://dev.to/arizkinewbie/hello-world--54ol</link>
      <guid>https://dev.to/arizkinewbie/hello-world--54ol</guid>
      <description>&lt;p&gt;I am a student from Esa Unggul University in Informatics Engineering. I am looking for full-time opportunities. I'm very insterested for Programming Learning.&lt;/p&gt;

&lt;p&gt;Saya memulai mengenal passion ini (IT) dari 2013 dan menekuninya sejak 2016 (SMP). Dari sana banyak proses yang saya alami, apalagi saya belajar secara OTODIDAK. So, asal ada niat semua bisa. 👍&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mulaiajadulu"&gt;
  &lt;/a&gt;
  MulaiAjaDulu
&lt;/h1&gt;

&lt;p&gt;𝘼𝙧𝙞𝙯𝙠𝙞𝙉𝙚𝙬𝙗𝙞𝙚.&lt;/p&gt;

</description>
      <category>arizkinewbie</category>
      <category>newbieteam</category>
      <category>esaunggul</category>
      <category>mulaiajadulu</category>
    </item>
    <item>
      <title>VS Code: You don't need that extension part 2</title>
      <author>Rob OLeary</author>
      <pubDate>Sat, 06 Nov 2021 07:59:49 +0000</pubDate>
      <link>https://dev.to/robole/vs-code-you-dont-need-that-extension-part-2-52mh</link>
      <guid>https://dev.to/robole/vs-code-you-dont-need-that-extension-part-2-52mh</guid>
      <description>&lt;p&gt;This follows on from the post &lt;a href="https://www.roboleary.net/vscode/2020/08/05/dont-need-extensions.html"&gt;VS Code: You don't need that extension&lt;/a&gt; that I wrote last year.&lt;/p&gt;

&lt;p&gt;There are builtin features and settings that ably do the work of many popular extensions. Perhaps, you do not need that extension!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Our remedies oft in ourselves do lie&lt;/p&gt;

&lt;p&gt;- William Shakespeare&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#1-wrap-selected-html-in-a-tag"&gt;
  &lt;/a&gt;
  1. Wrap selected HTML in a tag
&lt;/h2&gt;

&lt;p&gt;Sometimes, you want to wrap a block of HTML with another element when you are refactoring your HTML. This is awkward to do manually.&lt;/p&gt;

&lt;p&gt;For example, in the code below, to wrap the 3 &lt;code&gt;div&lt;/code&gt; elements in a &lt;code&gt;main&lt;/code&gt; element, we would need to go to line 10 and type out an opening &lt;code&gt;main&lt;/code&gt; tag. If we have auto closing tags setting turned on, we may have to delete this closing tag. Then, we need to go to line 26 and type out the closing &lt;code&gt;main&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fuisfpQs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/wrap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fuisfpQs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/wrap.png" alt="html example" width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It would be nice to just select the block and run a command to wrap it with the &lt;code&gt;main&lt;/code&gt; tags.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=bradgashler.htmltagwrap"&gt;htmltagwrap&lt;/a&gt; (277K installs): "Wraps selected code with HTML tags"&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=hwencc.html-tag-wrapper&amp;amp;ssr=false#overview"&gt;html tag wrapper&lt;/a&gt; (165K installs): "wrap selected html tag by press ctrl+i, you can change the wrapper tag name simply too."&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#feature"&gt;
  &lt;/a&gt;
  Feature
&lt;/h3&gt;

&lt;p&gt;Emmet can do this for you. Select the code you want and run the command &lt;code&gt;Emmet: wrap with abbreviation&lt;/code&gt;. You will be prompted for an abbreviation, you can just type the name of the tag you want. We just type "main" and hit enter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--efpXb5wm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/emmet-wrap.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--efpXb5wm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/emmet-wrap.webp" alt="emmet wrap abbreviation demo" width="600" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you wanted to wrap it with more than one tag and include a class, you can provide an Emmet abbreviation such as &lt;code&gt;main&amp;gt;div.container&lt;/code&gt;, which will give you HTML like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Lorem....&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Animi...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Velit...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-bracket-pair-coloring"&gt;
  &lt;/a&gt;
  2. Bracket pair coloring
&lt;/h2&gt;

&lt;p&gt;Styling of matching brackets pairs can help with identification of scope in your code. In particular, it is very popular for people to color brackets depending on their nesting level.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BAenkHj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/bracketpair-example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BAenkHj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/bracketpair-example.png" alt="bracket colorization example" width="681" height="252"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quite a few extensions have filled this role in some way or another.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;Bracker Pair Colorizer&lt;/a&gt; (6.2M installs): "A customizable extension for colorizing matching brackets." The same author wrote Bracket Pair Colorizer 2 as a replacement with breaking changes and more emphasis on performance.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2"&gt;Bracket Pair Colorizer 2&lt;/a&gt; (3.2M installs): "A customizable extension for colorizing matching brackets." It is now unmaintained.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=2gua.rainbow-brackets"&gt;Rainbow Brackets&lt;/a&gt; (1M installs): "Provide rainbow colors for the round brackets, the square brackets and the squiggly brackets. "&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=vincaslt.highlight-matching-tag"&gt;Highlight Matching Tag&lt;/a&gt; (945K installs): "Highlights matching closing and opening tags".&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=rafamel.subtle-brackets"&gt;Subtle Match Brackets&lt;/a&gt; (88K installs): "Underlined matching brackets and more".&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#feature"&gt;
  &lt;/a&gt;
  Feature
&lt;/h3&gt;

&lt;p&gt;VS Code introduced native bracket pair coloring in v1.6.0 (August 2021). It is much faster than any of the extensions listed. You can read the  &lt;a href="https://code.visualstudio.com/blogs/2021/09/29/bracket-pair-colorization"&gt;"Bracket pair colorization 10,000x faster"&lt;/a&gt; blog for a deep dive.&lt;/p&gt;

&lt;p&gt;Bracket pair coloring can be enabled by setting &lt;code&gt;editor.bracketPairColorization.enabled&lt;/code&gt; to true.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3jDK38x4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/bracketpair.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3jDK38x4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/bracketpair.png" alt="demostration of bracket pair colorization for 6 indented levels" width="591" height="598"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The bracket colors can be declared in a theme, or can be set through the setting &lt;code&gt;workbench.colorCustomizations&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To set the colors for an installed theme through the  &lt;code&gt;workbench.colorCustomizations&lt;/code&gt; setting, you specify the name of the theme in square brackets, and then assign values to the properties as below. The property &lt;code&gt;editorBracketHighlight.foreground1&lt;/code&gt; refers to the first set of brackets, &lt;code&gt;editorBracketHighlight.foreground2&lt;/code&gt; to the second set of brackets, and so on. Also, there is  the &lt;code&gt;editorBracketHighlight.unexpectedBracket.foreground&lt;/code&gt; property for any extra brackets that are unmatched.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bracket-pair-coloring-settings-summary"&gt;
  &lt;/a&gt;
  Bracket pair coloring settings summary
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;editor.bracketPairColorization.enabled"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="s"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;workbench.colorCustomizations"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;[Panda&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Syntax]"&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;editorBracketHighlight.foreground1"&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#E6E6E6"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;editorBracketHighlight.foreground2"&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#FF75B5"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;editorBracketHighlight.foreground3"&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#19f9d8"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;editorBracketHighlight.foreground4"&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#B084EB"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;editorBracketHighlight.foreground5"&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#45A9F9"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;editorBracketHighlight.foreground6"&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#FFB86C"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;editorBracketHighlight.unexpectedBracket.foreground"&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#FF2C6D"&lt;/span&gt;
&lt;span class="pi"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some of the aforementioned extensions enable you to apply more styles to the brackets, such as underlining and borders, currently this is not possible with this feature. However, there is a possibility for this to be added in the future because &lt;a href="https://code.visualstudio.com/blogs/2021/09/29/bracket-pair-colorization#_tokens-to-the-rescue"&gt;the bracket pair algorithm identifies brackets as tokens&lt;/a&gt; similar to how syntax highlighting works. Time will tell if this is something that will be added.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-indentation-guides-colorization"&gt;
  &lt;/a&gt;
  3. Indentation guides colorization
&lt;/h2&gt;

&lt;p&gt;Indentation guides are vertical lines that outline the blocks of your code. They can help guide your eye to see how your code structured. VS Code refers to them as "brackt pair guides".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q122A2xF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/guides-example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q122A2xF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/guides-example.png" alt="colored guides example" width="681" height="252"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow"&gt;Indent Rainbow&lt;/a&gt; (2.4M installs): "This extension colorizes the indentation in front of your text alternating four different colors on each step." Indentation colorization is based on tab size.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#feature"&gt;
  &lt;/a&gt;
  Feature
&lt;/h3&gt;

&lt;p&gt;Since v1.61 (September 2021), the editor supports colors for indentation guides. VS Code refers to them as "bracket pair guides". They use the same colors as the bracket pair coloring feature discussed above by default.&lt;/p&gt;

&lt;p&gt;Bracket pair guides can be enabled by setting &lt;code&gt;editor.guides.bracketPairs&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, it is set to to &lt;code&gt;false&lt;/code&gt; by default. There is a third option &lt;code&gt;active&lt;/code&gt; to only show the indent guide for the active block. This setting should be used instead of the deprecated  &lt;code&gt;editor.renderIndentGuides&lt;/code&gt; setting.&lt;/p&gt;

&lt;p&gt;As you can see from the example below, the guides are quite muted by default. It looks like the colors are destaurated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--evPRu3an--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/guides.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--evPRu3an--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/guides.png" alt="indent guide colorization" width="591" height="598"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can enable highlighting of the indent guide for the current scope by setting &lt;code&gt;editor.guides.highlightActiveIndentation&lt;/code&gt; to true. This should be used instead of the deprecated &lt;code&gt;editor.highlightActiveIndentGuide&lt;/code&gt; setting.&lt;/p&gt;

&lt;p&gt;As you can see from the example below, the active indent guide is shown in a brighter (more saturated) color.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iwb4PjwV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/guides-active.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iwb4PjwV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/guides-active.png" alt="active indent guide" width="591" height="598"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is also a setting &lt;code&gt;editor.guides.bracketPairsHorizontal&lt;/code&gt; that controls if and when to render horizontal lines when a line of code crosses into another indentation level. It defaults to &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GgJE3Y06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/horizontal-guide-line.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GgJE3Y06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/horizontal-guide-line.gif" alt="horiztonal line indent guide" width="600" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similar to bracket pairs, the colors can be declared in a theme, or can be set through the setting &lt;code&gt;workbench.colorCustomizations&lt;/code&gt;. You can change the color of the lines at each indent level through the properties &lt;code&gt;editorBracketPairGuide.background{1,...,6}&lt;/code&gt; and &lt;code&gt;editorBracketPairGuide.activeBackground{1,...,6}&lt;/code&gt; .&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indent-guides-settings-summary"&gt;
  &lt;/a&gt;
  Indent guides settings summary
&lt;/h3&gt;

&lt;p&gt;The relevent settings are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"editor.guides.bracketPairs"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.guides.highlightActiveIndentation"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.guides.bracketPairsHorizontal"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"active"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"workbench.colorCustomizations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"[Panda Syntax]"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.background1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#FFB86C"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.background2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#FF75B5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.background3"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#45A9F9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.background4"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#B084EB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.background5"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#E6E6E6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.background6"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#19f9d8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.activeBackground1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#FFB86C"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.activeBackground2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#FF75B5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.activeBackground3"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#45A9F9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.activeBackground4"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#B084EB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.activeBackground5"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#E6E6E6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"editorBracketPairGuide.activeBackground6"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#19f9d8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-running-and-automating-scripts-npm-gulp-make-and-others"&gt;
  &lt;/a&gt;
  4. Running and automating scripts (NPM, Gulp, Make, and others)
&lt;/h2&gt;

&lt;p&gt;Most projects requires some tasks to be run like linting, testing, building, packaging, and deploying. Depending on the type of project it is, you may use different tools to handle this such as NPM, Grunt, Gulp, Make, and so on. While this is often something you do on the command-line, it can be handy to run some of these actions in the editor without switching context.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=eg2.vscode-npm-script"&gt;NPM&lt;/a&gt; (2.7M installs): "This extension supports running npm scripts defined in the package.json file and validating the installed modules against the dependencies defined in the package.json."&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=nickdodd79.gulptasks"&gt;Gulp Tasks&lt;/a&gt; (39K installs): "A gulp task visualization and execution extension for Visual Studio Code."&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=technosophos.vscode-make"&gt;Make&lt;/a&gt; (31K installs): "Run Make easily."&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#feature"&gt;
  &lt;/a&gt;
  Feature
&lt;/h3&gt;

&lt;p&gt;VS Code has a Tasks feature. Tasks can be configured to run scripts you want inside VS Code through the command palette, you can customise how they are run, you can add a keybinding to them, you can run multiple scripts in a sequence, and you can run them automatically when you open a workspace.&lt;/p&gt;

&lt;p&gt;VS Code can autodetect scripts for Gulp, Grunt, Jake, and npm. You can also run shell scripts, however they are not autodetected.&lt;/p&gt;

&lt;p&gt;I will show you briefly how you can run NPM scripts as tasks. VS Code picks them up from your &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#default-build-task"&gt;
  &lt;/a&gt;
  Default build task
&lt;/h4&gt;

&lt;p&gt;Pressing &lt;code&gt;Ctrl+Shift+B&lt;/code&gt; or running the command &lt;strong&gt;Run Build Task&lt;/strong&gt; will show you a picker of the autodetected tasks. For NPM, it narrows the list down for you:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Un1drFNp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/build-task.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Un1drFNp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/build-task.png" alt="build task command palette" width="734" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Usually, the first option is the correct option.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#running-a-task"&gt;
  &lt;/a&gt;
  Running a task
&lt;/h4&gt;

&lt;p&gt;You can run a task through the &lt;strong&gt;Tasks: Run Task&lt;/strong&gt; command. It will show you a list of the autodetected tasks from your workspace, and any custom tasks you created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--stON-Xe9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/run-task.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--stON-Xe9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/run-task.png" alt="tasks" width="590" height="255"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to be run a task for a particular tool, you can use &lt;strong&gt;Quick Open&lt;/strong&gt;, by pressing &lt;code&gt;Ctrl + P&lt;/code&gt; or through the menu &lt;em&gt;File &amp;gt; Go to File&lt;/em&gt;, you type "task" and hit &lt;code&gt;space&lt;/code&gt;, and then the dropdown will show you the options for the different tools.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GYbXjwx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/tasks.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GYbXjwx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/tasks.jpg" alt="tasks" width="599" height="176"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For my JavaScript project I pick "npm" and I get a list of my npm scripts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bNzxrx2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/npm-tasks.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bNzxrx2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/npm-tasks.jpg" alt="npm tasks" width="598" height="352"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pick one and it will run the script.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#automate-tasks"&gt;
  &lt;/a&gt;
  Automate tasks
&lt;/h4&gt;

&lt;p&gt;You can define custom tasks for your project in &lt;code&gt;&amp;lt;project folder&amp;gt;/.vscode/tasks.json&lt;/code&gt;. You can create the file yourself, or you can run the &lt;strong&gt;Tasks: Configure Task&lt;/strong&gt; command to build a template file for you by picking the option &lt;strong&gt;Create task.json file from template&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uzmlmdg1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/configure-task.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uzmlmdg1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://roboleary.net/assets/img/blog/2021-11-06-vscode-you-dont-need-that-extension2/configure-task.png" alt="configure task command" width="880" height="275"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can configure a task to run when you open a project through the &lt;code&gt;runOptions&lt;/code&gt; property.  I discuss this in another article - &lt;a href="https://www.roboleary.net/vscode/2020/10/19/vscode-task-onstartup.html"&gt;How to run a command automatically in VS Code when you open a project&lt;/a&gt;. I often use this in projects to fire up a dev server whenever I open a project. This is what the &lt;code&gt;tasks.json&lt;/code&gt; look like for that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tasks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Run dev server on startup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shell&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;command&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;npm run dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;windows&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;command&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;npm run dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;presentation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;reveal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;panel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;runOptions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;runOn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;folderOpen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-a-shortcut-for-a-task"&gt;
  &lt;/a&gt;
  Adding a shortcut for a task
&lt;/h3&gt;

&lt;p&gt;If you run a task frequently, you can define a keyboard shortcut for the task.&lt;/p&gt;

&lt;p&gt;For example, to bind &lt;code&gt;Ctrl+R&lt;/code&gt; to the my dev server task, I could add the following to the  &lt;code&gt;keybindings.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ctrl+r"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"workbench.action.tasks.runTask"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Run dev server on startup"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;args&lt;/code&gt; property should match the value of the &lt;code&gt;label&lt;/code&gt; property from the &lt;code&gt;tasks.json&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;You can read the &lt;a href="https://code.visualstudio.com/docs/editor/tasks#vscode"&gt;user guide on Tasks&lt;/a&gt; to learn more about tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-formatting-code"&gt;
  &lt;/a&gt;
  5. Formatting code
&lt;/h2&gt;

&lt;p&gt;Consistent code formatting makes code easier to read, and saves your brain parsing cycles.&lt;/p&gt;

&lt;p&gt;If you use many different languages, you will need some type of extension for formatting, but along the way you still may be using an extension that you actually don't need. It is not as cut and dry as the other items I have discussed, it is dependent on the particular languages you use. Let's get into it more specifically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt; (15M installs): Prettier is a very opinionated formatter with very few configuration options. It supports some languages by default: JavaScript, JSX, Angular, Vue, Flow, TypeScript, CSS, Less,  SCSS, HTML, JSON, GraphQL, Markdown, and YAML. It has a plugin architecture to extend it to more languages.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify"&gt;Beautify&lt;/a&gt; (7.3M installs): Beautify uses &lt;code&gt;js-beautify&lt;/code&gt;, which is a less opinionated formatter.  It supports Javascript, JSON, CSS, Sass, and HTML. You can use a &lt;code&gt;.jsbeautifyrc&lt;/code&gt; file to control the style settings.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=mohd-akram.vscode-html-format"&gt;HTML Format&lt;/a&gt; (300k installs)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=ClemensPeters.format-json"&gt;JSON Formatter&lt;/a&gt; (30K installs)&lt;/li&gt;
&lt;li&gt;Many, many more &lt;a href="https://marketplace.visualstudio.com/search?target=VSCode&amp;amp;category=Formatters&amp;amp;sortBy=Installs."&gt;extensions listed in the "Formatter" category in the VS Code marketplace&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#feature"&gt;
  &lt;/a&gt;
  Feature
&lt;/h3&gt;

&lt;p&gt;VS Code has builtin formatters for HTML, JavaScript, TypeScript, and  JSON. This is a decent basis for frontend developers and JavaScript-oriented backend developers.&lt;/p&gt;

&lt;p&gt;You may be wondering why CSS and CSS-like syntaxes are not on this list, I don't know why. What i do know is that &lt;a href="https://github.com/microsoft/vscode/issues/119877"&gt;the VS Code does not plan to add one in the future&lt;/a&gt;. Like other languages that are not in this list, you will need an extension to provide formatting for that language. While it is tempting, particularly as a frontend developer, just to install Prettier because it covers a number of languages out of the box, there are tradeoffs with this. I will discuss this in the "Other languages" section below.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#settings-for-languages-with-builtin-formatters"&gt;
  &lt;/a&gt;
  Settings for languages with builtin formatters
&lt;/h4&gt;

&lt;p&gt;To use the builtin formatters, you can add the following settings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"[html]"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.defaultFormatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vscode.html-language-features"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"[javascript, javascriptreact, typescript]"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.defaultFormatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vscode.typescript-language-features"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"[json, jsonc]"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.defaultFormatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vscode.json-language-features"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I tried these out for a while and was pleasantly surprised. VS Code uses &lt;a href="https://www.npmjs.com/package/js-beautify/v/1.13.0"&gt;js-beautify&lt;/a&gt; under the hood, which is also used by the &lt;a href="https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify"&gt;Beautify&lt;/a&gt; extension. So, you can expect similar results to that extension. Your mileage may vary for the formating of JSONC, it is asking the JSON Language Features extension to deal with "illegal" comments, but it appears to manage it without issues. I don't use React, so I can't comment how well React is formatted.&lt;/p&gt;

&lt;p&gt;You cannot include a &lt;code&gt;.jsbeautifyrc&lt;/code&gt; file in a project to control the formatting. However, there are equivalent formatting settings available. You will find formatting settings for each language with the naming convention of &lt;code&gt;"&amp;lt;language-name&amp;gt;.format.&amp;lt;property-name&amp;gt;"&lt;/code&gt;. Here are a few examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"html.format.wrapAttributesIndentSize"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"html.format.templating"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nl"&gt;"javascript.format.insertSpaceAfterCommaDelimiter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"javascript.format.semicolons"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"insert"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is an &lt;a href="https://code.visualstudio.com/docs/languages/html#_formatting"&gt;overview of the HTML formatting settings in the docs if you want to delve deeper&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#other-languages"&gt;
  &lt;/a&gt;
  Other languages
&lt;/h4&gt;

&lt;p&gt;The tricky thing with formatters is that they involve considerable work to maintain, it is mosty left to independent devs to create the extensions to fill the gaps. Realistically, people are not able to maintain these as side projects, so the quality varies depending on how popular a language is. This is a weak spot for VS Code.&lt;/p&gt;

&lt;p&gt;For other languages, you have a few different options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Many language support extensions are also formatters e.g. &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python"&gt;Python&lt;/a&gt;, &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.java"&gt;Language Support for Java by Red Hat&lt;/a&gt;, &lt;a href="https://marketplace.visualstudio.com/items?itemName=rebornix.Ruby"&gt;Ruby&lt;/a&gt;, &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml"&gt;YAML&lt;/a&gt;, &lt;a href="https://marketplace.visualstudio.com/items?itemName=DotJoshJohnson.xml"&gt;XML Tools&lt;/a&gt;,  &lt;a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur"&gt;Vetur&lt;/a&gt; for Vue, and &lt;a href="https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode"&gt;Svelte for VS Code&lt;/a&gt; (uses Prettier under the hood). You can use one of these as your formatter.&lt;/li&gt;
&lt;li&gt;You can install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt; extension or the &lt;a href="https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify"&gt;Beautify&lt;/a&gt; extension to cover a few extra languages such as CSS. This is easy to do. However, these extensions are always loaded, regardless of the languages used in a project, because they use the &lt;code&gt;onStartupFinished&lt;/code&gt; &lt;a href="https://code.visualstudio.com/api/references/activation-events"&gt;Activation Event&lt;/a&gt; in their configuration. This is wasteful of system resources, especially if you are working on backend projects that do not use to any of their default languages that these extensions format. Of course, you can disable the extension for a workspace to ensure that they do not load. If you have a decent computer, this may not bother you.&lt;/li&gt;
&lt;li&gt;If you want to use the &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt; extension for a language that is not supported out of the box such as Java, you need to install a Prettier plugin (a node package) as a development dependency for that project. It is awkward to have node packages in a non-JavaScript backend project. If you share a project with others, having 2 or more sets of dev dependencies is a headache.&lt;/li&gt;
&lt;li&gt;You can install a formatter that targets a particular language. You can search in the marketplace for a particular language in the "Formatter" category: &lt;a href="https://marketplace.visualstudio.com/search?target=VSCode&amp;amp;category=Formatters&amp;amp;sortBy=Installs"&gt;https://marketplace.visualstudio.com/search?target=VSCode&amp;amp;category=Formatters&amp;amp;sortBy=Installs&lt;/a&gt;. These are not that common.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are a frontend developer, the big omission from the list of builtin formatters is for CSS and CSS-like syntaxes. The options for this are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can use the &lt;a href="https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint"&gt;stylelint&lt;/a&gt; extension to cover you for both linting and formatting. Stylelint covers all CSS-like syntaxes. You can point to a global stylelint config in the VS Code settings.&lt;/li&gt;
&lt;li&gt;If you use SASS (.sass files), you probably have installed the &lt;a href="https://marketplace.visualstudio.com/items?itemName=Syler.sass-indented"&gt;SASS extension&lt;/a&gt; for language support. This is also a formatter.&lt;/li&gt;
&lt;li&gt;If you use one of the UI frameworks, you probably have installed an extension for language support, which are also formatters e.g. &lt;a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur"&gt;Vetur&lt;/a&gt; for Vue, and &lt;a href="https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode"&gt;Svelte for VS Code&lt;/a&gt; for Svelte.&lt;/li&gt;
&lt;li&gt;There does not seem to be a worthwhile dedicated CSS formatter, there is the &lt;a href="https://marketplace.visualstudio.com/items?itemName=lonefy.vscode-JS-CSS-HTML-formatter&amp;amp;ssr=false#review-details"&gt;JS-CSS-HTML Formatter&lt;/a&gt; but it has a backlog of serious issues.&lt;/li&gt;
&lt;li&gt;If the above does not satisfy you, then maybe installing &lt;a href="https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify"&gt;Beautify&lt;/a&gt; or &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt; is the best option.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For backend languages, you will find that most language support extensions are also formatters. You need to try them out to see if they are satisfactory. Of course, you could choose to use a linter to cover the formatting duties for you for these languages too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Before you reach for an extension, see if VS Code can do it already. It sounds like an obvious move, but we are all probably guilty of doing it at one time or another. VS Code is adding features regularly, so it is worth checking the changelog every so often.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Respecting someone's gender in a Person object.</title>
      <author>Calin Baenen</author>
      <pubDate>Sat, 06 Nov 2021 07:43:21 +0000</pubDate>
      <link>https://dev.to/baenencalin/respecting-someones-gender-in-a-person-object-4fok</link>
      <guid>https://dev.to/baenencalin/respecting-someones-gender-in-a-person-object-4fok</guid>
      <description>&lt;p&gt;Here's how I'd respect someone's gender in TypeScript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
 * A 3-bit number that represents the person's gender.
 * (bits in the order of: MFT.)
 * (MFT stands for "Male Female Trans".)
 * (Special blends:
 *  0x111 = Gender Fluid
 *  0x110 = Bigender
 *  0x001 = Nonbinary
 *  0x000 = Agender
 * )
 * (
 *  Expansion upon this format is welcome. If you want
 *  to add more attributes, for more non-binary genders,
 *  feel free, and tell me your format below!
 * )
*/&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sterilizeGenderId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Gender&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="nx"&gt;Gender&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mb"&gt;0b111&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0b111 = 7.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Gender&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sterilizeGenderId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nl"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Gender&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>lgbtq</category>
      <category>typescript</category>
      <category>watercooler</category>
      <category>programming</category>
    </item>
    <item>
      <title>Infinite Lights with Three.js</title>
      <author>Temp-insta</author>
      <pubDate>Sat, 06 Nov 2021 07:38:05 +0000</pubDate>
      <link>https://dev.to/harryholland/infinite-lights-with-threejs-iko</link>
      <guid>https://dev.to/harryholland/infinite-lights-with-threejs-iko</guid>
      <description>&lt;p&gt;A creative coding exploration into how to recreate the effect of a high-speed light in real-time using Three.js.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hw_e5n1DqPo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Through this article, we’ll use Three.js and learn how to:&lt;br&gt;
instantiate geometries to create thousands (up to millions) of lights&lt;br&gt;
make the lights move in an infinite loop&lt;br&gt;
create frame rate independent animations to keep them consistent on all devices&lt;br&gt;
and finally, create modular distortions to ease the creation of new distortions or changes to existing ones&lt;br&gt;
It’s going to be an intermediate tutorial, and we’re going to skip over the basic Three.js setup. This tutorial assumes that you are familiar with the basics of Three.js.&lt;/p&gt;

&lt;p&gt;Read complete article here:- &lt;a href="https://www.epicprogrammer.com/2021/11/infinite-lights-with-threejs.html"&gt;https://www.epicprogrammer.com/2021/11/infinite-lights-with-threejs.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
