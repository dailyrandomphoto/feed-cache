<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Database Migrations for .NET and Entity Framework with Prisma</title>
      <author>Ruheni Alex</author>
      <pubDate>Thu, 04 Nov 2021 12:51:58 +0000</pubDate>
      <link>https://dev.to/prisma/database-migrations-for-net-and-entity-framework-with-prisma-49e0</link>
      <guid>https://dev.to/prisma/database-migrations-for-net-and-entity-framework-with-prisma-49e0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this article, you will learn how to model your data using &lt;a href="https://www.prisma.io/"&gt;Prisma&lt;/a&gt;, run a migration with Prisma Migrate and then introspect your database with &lt;a href="https://dotnet.microsoft.com/"&gt;.NET&lt;/a&gt; to generate your &lt;a href="https://docs.microsoft.com/en-us/aspnet/entity-framework"&gt;Entity Framework&lt;/a&gt; models. This article will use Azure SQL/ SQL Server. &lt;/p&gt;

&lt;p&gt;This article only offers an alternative data modelling workflow that is succinct and offer a better development experience. Besides .NET and the Entity framework, you can also use Prisma with your tool/ frameworks of choice such as &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Prisma auto-generates migration files in SQL that you can modify before applying them on your database. The workflow following this approach would be:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Model your data&lt;/li&gt;
&lt;li&gt;Run a migration using &lt;a href="https://www.prisma.io/migrate"&gt;Prisma Migrate&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use the Entity Framework to &lt;em&gt;&lt;a href="https://docs.microsoft.com/en-us/ef/core/managing-schemas/scaffolding?tabs=dotnet-core-cli"&gt;reverse engineer&lt;/a&gt;/ scaffold/&lt;/em&gt; introspect your database and generate models and your database context.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-is-prisma"&gt;
  &lt;/a&gt;
  What is Prisma?
&lt;/h2&gt;

&lt;p&gt;Prisma is an object-relational mapper (ORM) that provides a declarative way to define your database models that are easy to read and comprehend. Prisma also provides &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-client"&gt;Prisma Client&lt;/a&gt; – an intuitive and  type-safe query builder based off your schema.&lt;/p&gt;

&lt;p&gt;At the core of Prisma is the &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-schema"&gt;Prisma Schema&lt;/a&gt; – aka &lt;em&gt;schema file&lt;/em&gt;. The schema contains 3 parts: the &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources/"&gt;data sources&lt;/a&gt;, &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-schema/generators"&gt;generators&lt;/a&gt; and your &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-schema/data-model"&gt;data model definition&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To follow along, ensure you have the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Familiarity with .NET and the &lt;a href="https://docs.microsoft.com/en-us/aspnet/entity-framework"&gt;Entity framework&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Installed Node.js v 12.6.x or higher&lt;/li&gt;
&lt;li&gt;Installed .NET locally&lt;/li&gt;
&lt;li&gt;A SQL Server or Azure SQL database&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=Prisma.prisma"&gt;Prisma Extension&lt;/a&gt; for VS Code users&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you're not familiar with setting up SQL Server, check out &lt;a href="https://www.prisma.io/dataguide/mssql/setting-up-a-local-sql-server-database"&gt;Setting up a local SQL Server database&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-a-new-console-application"&gt;
  &lt;/a&gt;
  Step 1: Create a new console application
&lt;/h2&gt;

&lt;p&gt;The first step is to create a new .NET console app in your working directory. This guide uses a console application to keep it simple. However, feel free to create any other type of application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet new console &lt;span class="nt"&gt;--output&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;__app-name__&lt;span class="k"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the command is done, navigate to the project and confirm that your project is running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;__app-name__&lt;span class="k"&gt;*&lt;/span&gt;
dotnet run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the output on the terminal is &lt;code&gt;Hello World!&lt;/code&gt;, everything seems to be running just fine!  🎉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-add-prisma-to-your-project"&gt;
  &lt;/a&gt;
  Step 2: Add Prisma to your project
&lt;/h2&gt;

&lt;p&gt;On a separate terminal window but still within the same project run the following commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;prisma-migrate
&lt;span class="nb"&gt;cd &lt;/span&gt;prisma-migrate
npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The commands create a new directory, navigate to the folder and initializes it as a Node.js project. The &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-cli"&gt;Prisma CLI&lt;/a&gt; is the only dependency for this project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; prisma
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#initialize-prisma"&gt;
  &lt;/a&gt;
  Initialize Prisma
&lt;/h3&gt;

&lt;p&gt;Once the install is done, run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma init &lt;span class="nt"&gt;--database-provider&lt;/span&gt; sqlserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creates a &lt;code&gt;.env&lt;/code&gt; file at the root of the project for storing environment variables&lt;/li&gt;
&lt;li&gt;Creates &lt;code&gt;prisma&lt;/code&gt; folder containing a &lt;code&gt;schema.prisma&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Specifies the database provider as &lt;code&gt;sqlserver&lt;/code&gt; in &lt;code&gt;schema.prisma&lt;/code&gt; file and provides a dummy &lt;code&gt;sqlserver&lt;/code&gt; connection string in &lt;code&gt;.env&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;schema.prisma&lt;/code&gt; file defines the database connection and the Prisma Client generator. This is where you will also define your database models.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="c1"&gt;/// prisma/schema.prisma&lt;/span&gt;
&lt;span class="n"&gt;datasource&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"sqlserver"&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"DATABASE_URL"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"prisma-client-js"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this guide, you can delete &lt;code&gt;generator client&lt;/code&gt; as it is relevant in a TypeScript/ JavaScript project. The &lt;code&gt;generator client&lt;/code&gt; is used to generate the TypeScript definitions for the Prisma Client.&lt;/p&gt;

&lt;p&gt;Update &lt;code&gt;.env&lt;/code&gt; with your database connection string. Refer to &lt;a href="https://www.prisma.io/docs/concepts/database-connectors/sql-server#connection-details"&gt;connection details&lt;/a&gt; for information on how to configure the connection string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# .env&lt;/span&gt;
&lt;span class="nv"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sqlserver://HOST:PORT;database=DATABASE;user=USER;password=PASSWORD;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;
  If you're using a remote database during development like Azure SQL, open this to learn more about how to configure the &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-migrate/shadow-database"&gt;shadow database&lt;/a&gt;.
  &lt;br&gt;
Create a new database which will be the &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-migrate/shadow-database"&gt;shadow database&lt;/a&gt; on Azure. Update your &lt;code&gt;.env&lt;/code&gt; file to include the &lt;code&gt;SHADOW_DATABASE_URL&lt;/code&gt; as well. The shadow database will be used in the data modelling step&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# .env&lt;/span&gt;
&lt;span class="nv"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sqlserver://HOST:PORT;database=DATABASE;user=USER;password=PASSWORD;"&lt;/span&gt;
&lt;span class="nv"&gt;SHADOW_DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sqlserver://HOST:PORT;database=DATABASE;user=USER;password=PASSWORD;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Update your &lt;code&gt;schema.prisma&lt;/code&gt; file with the connection string for the shadow database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="c1"&gt;/// prisma/schema.prisma&lt;/span&gt;
&lt;span class="n"&gt;datasource&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;provider&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"sqlserver"&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt;               &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"DATABASE_URL"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;shadowDatabaseUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SHADOW_DATABASE_URL"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;A shadow database is a second, &lt;em&gt;temporary&lt;/em&gt; database for use in the local development workflow. When running a migration, the secondary database is created and deleted automatically unless you're using a cloud-hosted database.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's an illustration of how the shadow database works:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Voo8aIw2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.prisma.io/docs/static/fa8149049da32d83d8014e3d14d644c0/a6d36/shadow-database.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Voo8aIw2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.prisma.io/docs/static/fa8149049da32d83d8014e3d14d644c0/a6d36/shadow-database.png" alt="https://www.prisma.io/docs/static/fa8149049da32d83d8014e3d14d644c0/a6d36/shadow-database.png" width="650" height="1162"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-modelling"&gt;
  &lt;/a&gt;
  Data modelling
&lt;/h3&gt;

&lt;p&gt;This example will define 2 models: &lt;code&gt;Post&lt;/code&gt; and &lt;code&gt;User&lt;/code&gt;.The relationship between &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Post&lt;/code&gt; is a one-to-many relationship.&lt;/p&gt;

&lt;p&gt;The models defined in &lt;code&gt;schema.prisma&lt;/code&gt; will resemble a GraphQL syntax . The models also map to a table in your database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="c1"&gt;/// prisma/schema.prisma&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;id&lt;/span&gt;        &lt;span class="n"&gt;Int&lt;/span&gt;      &lt;span class="nd"&gt;@id&lt;/span&gt; &lt;span class="nd"&gt;@default&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;autoincrement&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
  &lt;span class="n"&gt;content&lt;/span&gt;   &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
  &lt;span class="n"&gt;title&lt;/span&gt;     &lt;span class="n"&gt;String&lt;/span&gt;
  &lt;span class="n"&gt;createdAt&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="nd"&gt;@default&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
  &lt;span class="n"&gt;author&lt;/span&gt;    &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;    &lt;span class="nd"&gt;@relation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;fields:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;authorId&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="nl"&gt;references:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
  &lt;span class="n"&gt;authorId&lt;/span&gt;  &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;id&lt;/span&gt;    &lt;span class="n"&gt;Int&lt;/span&gt;     &lt;span class="nd"&gt;@id&lt;/span&gt; &lt;span class="nd"&gt;@default&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;autoincrement&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
  &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;  &lt;span class="nd"&gt;@unique&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt;  &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
  &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Refer to the &lt;a href="https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference"&gt;Prisma Schema Reference&lt;/a&gt; for further information on database field types, attributes, conventions and functions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-database-migration"&gt;
  &lt;/a&gt;
  Create a database migration
&lt;/h3&gt;

&lt;p&gt;After modelling your data, it's time to apply the changes to your database. On your terminal window, run &lt;code&gt;npx prisma migrate dev&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma migrate dev &lt;span class="nt"&gt;--name&lt;/span&gt; init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If no database exists, a new database with the database name specified in your &lt;code&gt;.env&lt;/code&gt; file will be created. The command also creates a new database migration that is located in &lt;code&gt;./prisma/migrations&lt;/code&gt; directory. The migration is in SQL and is applied against your database. &lt;code&gt;init&lt;/code&gt; refers to the migration name which you can change to something more semantic.&lt;/p&gt;

&lt;p&gt;If you wish to only create a migration but not apply it to your database, pass the &lt;code&gt;--create-only&lt;/code&gt; option to Prisma Migrate. This will generate the SQL and allow you to customize it before applying it against your database.&lt;/p&gt;

&lt;p&gt;You can confirm that the changes have been applied, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma studio
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N31YC-hG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/de9p51dk06cbmaviv5lt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N31YC-hG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/de9p51dk06cbmaviv5lt.png" alt="Screenshot 2021-10-17 at 19.49.28.png" width="880" height="621"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the Model you would like to view/ edit data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v10O0ukW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tm5gi64m3xeb68utpt5l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v10O0ukW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tm5gi64m3xeb68utpt5l.png" alt="Screenshot 2021-10-17 at 19.51.25.png" width="880" height="621"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Save 1 change&lt;/strong&gt; to apply the changes.&lt;/p&gt;

&lt;p&gt;Navigate to the User model, create a new user, link the post created in the previous step and save the change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--siF3tymG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ph7m5cz8jho4m5p921zw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--siF3tymG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ph7m5cz8jho4m5p921zw.png" alt="Screenshot 2021-10-17 at 19.53.24.png" width="880" height="621"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-introspect-your-database-aka-reverse-engineering"&gt;
  &lt;/a&gt;
  Step 3: Introspect your database aka Reverse Engineering
&lt;/h2&gt;

&lt;p&gt;Entity framework allows you to introspect your database schema and scaffold entity type classes and the database context based off an existing database.&lt;/p&gt;

&lt;p&gt;Navigate out of &lt;code&gt;prisma-migrate&lt;/code&gt; directory to the root of your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ../
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install Entity Framework tools you will require to work with SQL Server in your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet add package Microsoft.EntityFrameworkCore.SqlServer 
dotnet add package Microsoft.EntityFrameworkCore.Tools 
dotnet add package Microsoft.EntityFrameworkCore.Design
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Scaffold entity type classes based on your database schema to your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet ef dbcontext scaffold &lt;span class="s2"&gt;"Server=**HOST**;Database=**DATABASE_NAME**;User Id=**USER**;Password=**PASSWORD**"&lt;/span&gt; Microsoft.EntityFrameworkCore.SqlServer &lt;span class="nt"&gt;--context-dir&lt;/span&gt; DbContext &lt;span class="nt"&gt;--context&lt;/span&gt; BlogExampleContext &lt;span class="nt"&gt;--output-dir&lt;/span&gt; Models
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Microsoft.EntityFrameworkCore.SqlServer&lt;/code&gt; refers to the package to be used to introspect the database.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--context-dir&lt;/code&gt; and &lt;code&gt;--output-dir&lt;/code&gt; refer to the location of the context and the entity type classes after introspection&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--context&lt;/code&gt; refers to the name of your database context&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On a successful run 2 folders with 4 files will be created in your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;*&lt;/span&gt;app-name&lt;span class="k"&gt;*&lt;/span&gt;/
┣ DbContext/
┃ ┗ BlogExampleContext.cs
┣ Models/
┃ ┣ Post.cs
┃ ┗ PrismaMigration.cs
┃ ┗ User.cs
┣ ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you will notice, &lt;code&gt;PrismaMigration.cs&lt;/code&gt; was not defined in &lt;code&gt;schema.prisma&lt;/code&gt;. This is a table created by Prisma to track the migrations that have been created and applied against your database.&lt;/p&gt;

&lt;p&gt;To exclude the &lt;code&gt;PrismaMigrations&lt;/code&gt; table, and re-run the previous command but specify the tables you would like using the &lt;code&gt;--table&lt;/code&gt; and &lt;code&gt;—force&lt;/code&gt; options to overwrite the existing models.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet ef dbcontext scaffold &lt;span class="s2"&gt;"Server=**HOST**;Database=**DATABASE_NAME**;User Id=**USER**;Password=**PASSWORD**"&lt;/span&gt; Microsoft.EntityFrameworkCore.SqlServer &lt;span class="nt"&gt;--context-dir&lt;/span&gt; DbContext &lt;span class="nt"&gt;--context&lt;/span&gt; BlogExampleContext &lt;span class="nt"&gt;--output-dir&lt;/span&gt; Models &lt;span class="nt"&gt;--force&lt;/span&gt; &lt;span class="nt"&gt;--table&lt;/span&gt; User &lt;span class="nt"&gt;--table&lt;/span&gt; Post
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This time, 3 files are generated and the &lt;code&gt;PrismaMigrations.cs&lt;/code&gt; file is excluded when scaffolding.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're interested in migrating to Prisma with an existing database, the Prisma CLI provides &lt;code&gt;db pull&lt;/code&gt; for introspecting the database and populating &lt;code&gt;schema.prisma&lt;/code&gt; with your database models.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations! You have successfully modelled your entities, run a migration with Prisma and scaffolded your models and context with Entity Framework. &lt;/p&gt;

&lt;p&gt;Learn how you can set up and deploy a Prisma based Node.js REST API to Azure Functions together with Azure SQL in &lt;a href="https://www.prisma.io/docs/guides/deployment/deployment-guides/deploying-to-azure-functions"&gt;Deploying to Azure Functions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you would like to learn more about Prisma, check out the &lt;a href="https://www.prisma.io/docs"&gt;documentation&lt;/a&gt; and feel free to create an &lt;a href="https://github.com/prisma/prisma/issues"&gt;issue&lt;/a&gt; or start a &lt;a href="https://github.com/prisma/prisma/discussions"&gt;discussion&lt;/a&gt; on GitHub.&lt;/p&gt;

</description>
      <category>prisma</category>
      <category>database</category>
      <category>backend</category>
      <category>entityframework</category>
    </item>
    <item>
      <title>Beginner’s guide to JavaScript’s map()
</title>
      <author>wgotterer</author>
      <pubDate>Thu, 04 Nov 2021 12:13:03 +0000</pubDate>
      <link>https://dev.to/wgotterer/beginners-guide-to-javascripts-map-1c8f</link>
      <guid>https://dev.to/wgotterer/beginners-guide-to-javascripts-map-1c8f</guid>
      <description>&lt;p&gt;What is a map() function and how do we use it? Let’s use a Spongebob analogy to unpack what it does.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Unb-CfNx4KQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this episode, Spongebob, Patrick, and Mr. Krabs go on an adventure to find the Dutchman’s treasure. The three rely on a map to get to their destination. This is a good start. A regular map outlines the terrain of the real world, gives us a copy of the features that exist, and we can arrive at different end points depending on the path we take. Our map() function takes on similar characteristics, hence, “map”().&lt;br&gt;
W3schools defines a map() as&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-a-method-that-creates-a-new-array-with-the-results-of-calling-a-function-for-every-array-element"&gt;
  &lt;/a&gt;
  — a method that creates a new array with the results of calling a function for every array element
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#-a-method-calls-the-provided-function-once-for-each-element-in-an-array-in-order"&gt;
  &lt;/a&gt;
  — a method calls the provided function once for each element in an array, in order.
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#-a-method-that-does-not-change-the-original-array"&gt;
  &lt;/a&gt;
  — a method that does not change the original array.
&lt;/h4&gt;

&lt;p&gt;Let’s delve into what this means using an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gz-LHfi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/inbuyfn4dfah6vl166uw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gz-LHfi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/inbuyfn4dfah6vl166uw.png" alt="Image description" width="880" height="327"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above example we have an array, “numOfKrabbyPatties”, that shows the amount of Krabby Patties we can imagine Mr. Krabs, Spongebob, and Patrick having at the beginning of their treasure hunt. Next, the variable, “leftoverPattiesArr”, is created to represent what happens to the Krabby Patties of each character after a certain amount of time. In this case 3 are eaten by each character.&lt;/p&gt;

&lt;p&gt;If we take a look at the value of “leftoverPattiesArr” we can see that we are taking our “numOfKrabbyPatties” array and using the map() function on it. The map() function inherently calls on EACH item in the “numOfKrabbyPatties” array, but we need to tell it what we want it to do with the “numOfKrabbyPatties” array. This is where the function “hungryCharacters” play its role. It gives the map() some guidance. Just like our three characters traversing the ocean floor to find the “X” on the treasure map, our “hungryCharacters” function is similar in that it provides the trail the array must follow to get to its new end point.&lt;br&gt;
Taking a closer look at our “hungryCharacters” function, one can notice that a parameter, “patties”, is set. Wrapping my head around what this parameter does was a little challenging at first. Alas, with the help of Spongebob and his friends, anything is possible! Remember that the function is called once for EVERY element in the array.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pCe31f4O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p78u512vbgkhyjh3bxvx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCe31f4O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p78u512vbgkhyjh3bxvx.jpg" alt="Image description" width="629" height="595"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is happing when we invoke “leftoverPattiesArr” is the map takes the first element in “numOfKrabbyPatties” and passes it through our function. In our case 12 Krabby Patties becomes the “patties” placeholders, and the subtraction (12–3) is performed. Again, the inherent property of the map() is to now take the second element of “numOfKrabbyPatties” and follow the same path. The second element is 6, therefore as it moves through the function it, for the time being, replaces the “patties” placeholders. Thus performing (6–3). The same process repeats for the last element in our array as well. Finally, we have a non-destructive process that keeps our old array, “numOfKrabbyPatties”, in tact while providing us with a new, manipulated array, “leftoverPattiesArr”.&lt;/p&gt;

&lt;p&gt;As we navigate with our map, what gets altered is how we exist within that terrain. We are, in other words, making changes to our relationship with our map. One minute we are at point “a” and some time later we are at point “b”. Similarly, in our example the Krabby Patties are being manipulated as they move through their map() terrain. At the so called beginning, point “a”, of the map() they are one way and by the end, point “b”, another.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-dig-a-little-deeper"&gt;
  &lt;/a&gt;
  Let’s dig a little deeper!
&lt;/h1&gt;

&lt;p&gt;We don’t always deal with arrays that are that simple. Let’s take a look at one with some objects inside. If you aren’t familiar with the Spongebob episode being referred to throughout this article, you should know that the three get into a small quarrel regarding the treasure after it’s found. Their commotion wakes the ghost of The Flying Dutchman and he is subsequently angry. For the purpose of this example, let’s say that he takes back his treasure chest and gives each of our characters 1 gold coin.&lt;/p&gt;

&lt;p&gt;We want to express this by creating sentences with the new information we have. Below you will see “characters”, an array of 3 objects containing 2 key:value pairs. Our function “getTreasure” will be invoked for every object in our array. In this case 3. Similarly to our previous example, the parameter, “oneCharacter”, is a place holder for each entire object. For example, the first iteration would take {name : “Mr. Krabs”, treasure: 0} and pass it in as the new temporary placeholder. At this point, between the curly braces “{}”, is where we say what we want to do with this object. In this function we are saying we want ${oneCharacter.name}. “OneCharacter” being the placeholder for each object iteration within the array. We then want to grab the value of “name” to begin our sentence. This is interpolated using back-ticks at the beginning and end of the return statement. Then putting our variables between ${}. This allows us to incorporate stringed elements such as “has” and “piece of gold!”. We interpolate a second time using ${oneCharacter.treasure + 1}. Just like the previous interpolation, our “OneCharacter” is the placeholder for each iteration over the objects. We then grab ahold of the “treasure” key in order to get its value. Finally we add 1 to the value. As a final result one can see that characters.map(getTreasure) gives us a new array of three different strings! Remember, our initial array of “characters” was not changed because map() is non-destructive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fdmicn2x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ki3dbbr6hltinqo4781n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fdmicn2x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ki3dbbr6hltinqo4781n.png" alt="Image description" width="880" height="308"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/jsref/jsref_map.asp"&gt;https://www.w3schools.com/jsref/jsref_map.asp&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Quora vs Medium: Which One is Best for writers?</title>
      <author>Bhavyashah</author>
      <pubDate>Thu, 04 Nov 2021 12:06:54 +0000</pubDate>
      <link>https://dev.to/bhavyashah/quora-vs-medium-which-one-is-best-for-writers-occ</link>
      <guid>https://dev.to/bhavyashah/quora-vs-medium-which-one-is-best-for-writers-occ</guid>
      <description>&lt;p&gt;Image Credit: &lt;a href="https://www.blogtriggers.com"&gt;BlogTriggers.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;People always ask more and more about this “&lt;a href="https://www.blogtriggers.com/2021/05/which-writing-platform-should-i-use-quora-vs-medium.html"&gt;Quora vs Medium&lt;/a&gt;” thing and whether choosing one or another for their blogs, content pieces or online writings is the best choice.&lt;/p&gt;

&lt;p&gt;Quora and Medium both successful. I like Medium because there was a lot of traffic and audience on the main site for articles. Quora was more specific about certain topics, and maybe contains lesser noise overall. &lt;/p&gt;

&lt;p&gt;However, personally, I like the way Medium's interface looks better than Quora's to read quality articles. Both platforms has their differerences, but we can share ideas and thoughts just as much as we want to.&lt;/p&gt;

&lt;p&gt;Medium is best rather than quora for content writers in my view because it has greater credibility in terms of attracting viewers, readers, subscribers when compared to quora. I have observed that when I post an article on Quora it hardly gets any eyeballs when compared to Medium. But when I post the same article on Medium, in fact the same article gets well accepted by the viewers.&lt;/p&gt;

&lt;h3&gt;Final Conclusion of Quora vs Medium&lt;/h3&gt;

&lt;p&gt;If you are a beginner, you should start with quora, because the audience of quora is much bigger than medium. On the other hand, if you are an experienced content writer, go with medium because your content will be seen by more experience people.&lt;/p&gt;

</description>
      <category>knowledge</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Things to Consider While Launching a Website!</title>
      <author>Alsyke Technologies </author>
      <pubDate>Thu, 04 Nov 2021 11:58:21 +0000</pubDate>
      <link>https://dev.to/alsyketech/things-to-consider-while-launching-a-website-cm6</link>
      <guid>https://dev.to/alsyketech/things-to-consider-while-launching-a-website-cm6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R1dHkyo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7tv7ay2irpxc2ravsza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R1dHkyo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7tv7ay2irpxc2ravsza.png" alt="Website for Startups" width="880" height="440"&gt;&lt;/a&gt;&lt;br&gt;
For businesses, launching a new website is an interesting moment. It's important to analyze what must be updated and to concentrate on design adjustments and possible design applications. Because your new website will be the cornerstone of your business and will function as a gateway for representing your company to your customers, it must give the highest level of customer satisfaction. If you’re not prepared a checklist to stay on top of all activities, that could be quite frightening. &lt;br&gt;
Your new website must make it easy for all visitors to figure a way to what they're looking for. Profitable web development services and user experience can include anything from visitors reviewing an article to understand further about your business to signing up and becoming a subscriber.&lt;br&gt;
The main purpose of this blog is to provide you with a strategy for what you should do once you're prepared for launching a new website so that you may prevent some major issues so let’s have a look at the checklist below!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-pay-attention-to-branding"&gt;
  &lt;/a&gt;
  1. Pay Attention to Branding
&lt;/h2&gt;

&lt;p&gt;Before launching a new website, ensure that your business strategy is clearly represented. It shouldn't be up to your customers to figure out what you are providing or marketing. Effective marketing is applied by &lt;a href="https://alsyke.com/web-development/"&gt;leading web development services&lt;/a&gt; suppliers to assist enhance the customer interface and increase your web presence. It must begin with your website customers' initial engagement with you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-is-your-website-easy-to-navigate-for-visitors"&gt;
  &lt;/a&gt;
  2. Is your Website Easy to Navigate for Visitors?
&lt;/h2&gt;

&lt;p&gt;Every new website viewer must be able to understand the presented content without any difficulty. By using a consistent font and structure, and clear graphics, formatting, and color, web development service providers make sure that websites are direct and comprehensive. &lt;/p&gt;

&lt;p&gt;Aside from layout, web developers use subsections, precise paras, and blurbs to assist your user’s breakdown of the page into feasible bits. Admittedly, launching a new website will ultimately be a means of speaking directly with your primary customers, and your website will fail to produce the outcomes your company requires if it fails to engage effectively.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-examine-the-efficiency-of-your-website"&gt;
  &lt;/a&gt;
  3. Examine the Efficiency of your Website
&lt;/h2&gt;

&lt;p&gt;It is undeniable that checking your website might not be an enjoyable task, but you must ensure that every aspect of it functions properly before launching a new website.&lt;br&gt;&lt;br&gt;
If you know how to code, you should think about writing your own test automation, specifically if you've a lot of aspects and browser hardware compatibility. The upfront time and effort commitment can be quite profitable. If you desire that your website should be handled by professionals to accomplish these goals, you can reach to web development service providers with a second thought that will take care of every aspect of your website from developing to managing functionality.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-is-your-website-userfriendly"&gt;
  &lt;/a&gt;
  4. Is your Website User-Friendly?
&lt;/h2&gt;

&lt;p&gt;When launching a new website, web development services providers ensure that it is approachable to people of different origins and backgrounds.  By attracting the widest possible public, they ensure that all customers have accessibility to the website's content, functioning, and services, by incorporating informative alt-text for visuals and creating adaptive forms with clear labels. Your website will give a strong perception of your corporation to a wider set of people by providing multiple options of obtaining information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-employ-triedandtrue-seo-methods"&gt;
  &lt;/a&gt;
  5.    Employ Tried-and-True SEO Methods
&lt;/h2&gt;

&lt;p&gt;If you wish visitors to explore your website, SEO work will enable it. Employ suitable link building tactics for the launching of your website, like creating innovative website headings and meta-headings. Web development service suppliers   might also create a link engagement strategy, which includes suggestions about how to popularize your startup and build hype that will make it succeed. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-mobile-responsive-website"&gt;
  &lt;/a&gt;
  6.    Mobile Responsive Website
&lt;/h2&gt;

&lt;p&gt;Mobile devices like cell phones and iPad are used by most web consumers. When it comes to designing a website for mobile devices, everything like article layout, graphics, and tabs must all fit on a much smaller screen. &lt;br&gt;
Smart phones should be considered while designing &lt;a href="https://alsyke.com/ui-ux-design/"&gt;proper ui ux design for your website&lt;/a&gt;, and it's a good way to check it on as many different browsers as possible before launching your website that usually every good web developer does. It would be much better if they can detect and repair any flaws prior to your site going online than by doing changes or revamps after customers start visiting. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-check-ctas-for-accuracy-and-put-them-to-the-test"&gt;
  &lt;/a&gt;
  7. Check CTAs for Accuracy and Put them to the Test
&lt;/h2&gt;

&lt;p&gt;You will require a CTAs if you want your visitors doing something, such as signup links in an email, make a purchase, or submit a remark. If you would reach to web development services, the developers will make sure that it sticks out and is simple to implement for your customers. You can't demand your site's viewers do what you want if you keep the procedure complex or irritating.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-make-a-backup-process"&gt;
  &lt;/a&gt;
  8. Make a Backup Process
&lt;/h2&gt;

&lt;p&gt;Lastly, before launching a new website, keep in mind to set up security measures and back up your data to avoid data loss, which can also be useful in the event of a computer virus.&lt;br&gt;
As you've observed, there's a whole myriad of factors you can take to guarantee all your site's main crucial elements are operational ahead of launch.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>laravel</category>
    </item>
    <item>
      <title>Deploying an Elixir Release using Docker on Render.com</title>
      <author>Miguel Cobá</author>
      <pubDate>Thu, 04 Nov 2021 11:51:47 +0000</pubDate>
      <link>https://dev.to/miguelcoba/deploying-an-elixir-release-using-docker-on-rendercom-283a</link>
      <guid>https://dev.to/miguelcoba/deploying-an-elixir-release-using-docker-on-rendercom-283a</guid>
      <description>&lt;p&gt;I'm going to show you how to deploy our Elixir Release to render.com. We'll use our  &lt;a href="https://blog.miguelcoba.com/deploying-a-phoenix-16-app-with-docker-and-elixir-releases"&gt;Docker image&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prepare-elixir-release-for-deploying-to-rendercom"&gt;
  &lt;/a&gt;
  Prepare Elixir Release for deploying to render.com
&lt;/h2&gt;

&lt;p&gt;We only need to do a single change to our &lt;code&gt;runtime.exs&lt;/code&gt; file. Add the &lt;code&gt;url:&lt;/code&gt; line to the&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;  &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="ss"&gt;:saturn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;SaturnWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;url:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;host:&lt;/span&gt; &lt;span class="no"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"RENDER_EXTERNAL_HOSTNAME"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;port:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="ss"&gt;http:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="c1"&gt;# Enable IPv6 and bind on all interfaces.&lt;/span&gt;
      &lt;span class="c1"&gt;# Set it to  {0, 0, 0, 0, 0, 0, 0, 1} for local network only access.&lt;/span&gt;
      &lt;span class="c1"&gt;# See the documentation on https://hexdocs.pm/plug_cowboy/Plug.Cowboy.html&lt;/span&gt;
      &lt;span class="c1"&gt;# for details about using IPv6 vs IPv4 and loopback vs public addresses.&lt;/span&gt;
      &lt;span class="ss"&gt;ip:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="ss"&gt;port:&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"PORT"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s2"&gt;"4000"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="ss"&gt;secret_key_base:&lt;/span&gt; &lt;span class="n"&gt;secret_key_base&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am creating a branch named &lt;code&gt;render-deployment&lt;/code&gt; and committing all these changes to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; render-deployment
git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Config for render.com"&lt;/span&gt;
git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin render-deployment
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-and-configure-your-rendercom-account"&gt;
  &lt;/a&gt;
  Create and configure your render.com account
&lt;/h2&gt;

&lt;p&gt;Create an account in render.com and log in. We are going to create two services, one for the database and one for the Elixir Release. We must be sure that both services are created in the &lt;em&gt;same&lt;/em&gt; region so that they share the same private network and can communicate and establish connections using their assigned network names. If we fail to do this, you'll see errors in the logs saying that the database domain name is non-existant (:nxdomain error). &lt;/p&gt;

&lt;p&gt;For this article, I'm going to put both in the &lt;code&gt;Oregon, USA&lt;/code&gt; region. Be sure to use the same one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-database"&gt;
  &lt;/a&gt;
  Create the Database
&lt;/h3&gt;

&lt;p&gt;Create a database service by clicking the &lt;code&gt;New +&lt;/code&gt; button on the dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VrkVcQy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnmvbgymot5h4of8kml1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VrkVcQy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnmvbgymot5h4of8kml1.png" alt="Create a new Database" width="457" height="392"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select one name for this service (I'm using Saturn DB) and ensure the &lt;code&gt;Oregon, USA&lt;/code&gt; region is selected. Leave the other fields to their defaults and select the &lt;code&gt;Free&lt;/code&gt; plan. Then click the &lt;code&gt;Create Database&lt;/code&gt; to provision this service.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--55meqLOP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aol0jtt5l4p26q48lspx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--55meqLOP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aol0jtt5l4p26q48lspx.png" alt="Configure Database" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next page you'll see the details of the database. We need to copy one value from here, the connection string that we'll use for the &lt;code&gt;DATABASE_URL&lt;/code&gt; environment variable when we create the Elixir Release service.&lt;/p&gt;

&lt;p&gt;Click the copy button on the &lt;em&gt;Internal Connection String&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4uh_z5Y8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vozanc9htfb3q10j6dft.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4uh_z5Y8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vozanc9htfb3q10j6dft.png" alt="Copy Internal Connection String" width="868" height="845"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-web-service"&gt;
  &lt;/a&gt;
  Create the Web Service
&lt;/h3&gt;

&lt;p&gt;Let's create a &lt;em&gt;Web Service&lt;/em&gt; with the &lt;code&gt;New +&lt;/code&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bXImYf8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cjmpvkx5qjixkuid9xl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bXImYf8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cjmpvkx5qjixkuid9xl.png" alt="Create a Web Service" width="677" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll need to connect your GitHub or GitLab account:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ebJsLo81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xfpsd11n3qvdbc17r0q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ebJsLo81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xfpsd11n3qvdbc17r0q.png" alt="Connect your GitHub or GitLab account" width="880" height="144"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and select the repository you want to deploy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fsTMkKXF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yekvm89x2nstyejua6r7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fsTMkKXF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yekvm89x2nstyejua6r7.png" alt="Select repository to deploy" width="494" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's configure it. Set a name for your service (I'm using Saturn here). You'll see that the Dockerfile was detected and the Environment is preselected to &lt;code&gt;Docker&lt;/code&gt;. Ensure you're using the &lt;code&gt;Oregon, USA&lt;/code&gt; region, otherwise both services won't be able to connect each other. Select the branch you want to deploy (in my case is &lt;code&gt;render-deployment&lt;/code&gt;) and select the &lt;em&gt;Free&lt;/em&gt; plan.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bbkGUWI0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qe0zcoy3b5kkj014yn93.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bbkGUWI0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qe0zcoy3b5kkj014yn93.png" alt="Configure Web Service" width="880" height="671"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mix phx.gen.secret
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to add a couple of environment variables. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ET7ALdWu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hbwg78l7xdj1wlfaxji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ET7ALdWu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hbwg78l7xdj1wlfaxji.png" alt="Create environment variables" width="880" height="204"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;DATABASE_URL&lt;/code&gt; and paste the value you copied from the &lt;em&gt;Internal Connection String&lt;/em&gt; field in the Database service config page.&lt;/p&gt;

&lt;p&gt;Then add another named &lt;code&gt;SECRET_KEY_BASE&lt;/code&gt;. Run this command on the terminal and use the result as the value for it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mix phx.gen.secret
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GN9C1Gpr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/149pynlmysnvsnpac5tt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GN9C1Gpr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/149pynlmysnvsnpac5tt.png" alt="Environment variables created" width="880" height="277"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now create the Web Service. You'll see the status of the provisioning and when it is ready you'll see a green &lt;code&gt;Live&lt;/code&gt; button and a line on the logs saying that the Endpoint is listening for requests:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--soaRt1z3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nbtuqkwz3il7955cfng8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--soaRt1z3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nbtuqkwz3il7955cfng8.png" alt="Provisioning Web Service" width="880" height="696"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you click on the URL generated for your Web Service you'll see your Elixir Release app running on Render.com infrastructure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--27SDSBd6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zg5zu71vt9hqp6o9osvg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--27SDSBd6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zg5zu71vt9hqp6o9osvg.png" alt="Elixir Release running on render.com" width="880" height="535"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-migrations-and-connecting-to-the-running-instance"&gt;
  &lt;/a&gt;
  Running Migrations and connecting to the running instance
&lt;/h2&gt;

&lt;p&gt;This is something I couldn't do so far. The UI render provides has no way to connect to the running container. One way to run the migrations would be:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build the Elixir Release locally as shown &lt;a href="https://blog.miguelcoba.com/preparing-a-phoenix-16-app-for-deployment-with-elixir-releases"&gt;here&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Copy the &lt;em&gt;External Connection String&lt;/em&gt; from the database configuration page&lt;/li&gt;
&lt;li&gt;Set a DATABASE_URL environment variable to that value&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;_build/prod/rel/saturn/bin/saturn eval "Saturn.Release.migrate"&lt;/code&gt; command&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source code
&lt;/h2&gt;

&lt;p&gt;The  &lt;a href="https://github.com/miguelcoba/saturn/tree/render-deployment"&gt;source code&lt;/a&gt;  for the saturn project is open source under the MIT license. Use the &lt;code&gt;render-deployment&lt;/code&gt; branch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About
&lt;/h2&gt;

&lt;p&gt;I'm &lt;a href="https://miguelcoba.com"&gt;Miguel Cobá&lt;/a&gt;. Follow me on &lt;a href="https://twitter.com/MiguelCoba_"&gt;Twitter&lt;/a&gt;, subscribe to my &lt;a href="https://newsletter.miguelcoba.com"&gt;newsletter&lt;/a&gt;, or read all my &lt;a href="https://blog.miguelcoba.com"&gt;articles&lt;/a&gt; to learn more info about Elixir, Elm, Web Development, or writing eBooks.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@mueen_30?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Mueen Agherdien&lt;/a&gt; on &lt;a href="https://unsplash.com/t/architecture?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>beginners</category>
      <category>docker</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Installing Tailwind CSS in a Meteor project</title>
      <author>Frederico Maia</author>
      <pubDate>Thu, 04 Nov 2021 11:50:27 +0000</pubDate>
      <link>https://dev.to/fredmaiaarantes/installing-tailwind-in-a-meteor-project-2b6h</link>
      <guid>https://dev.to/fredmaiaarantes/installing-tailwind-in-a-meteor-project-2b6h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#creating-your-project"&gt;
  &lt;/a&gt;
  Creating your project
&lt;/h2&gt;

&lt;p&gt;Start by creating a new &lt;a href="https://meteor.com"&gt;Meteor&lt;/a&gt; project if you don’t have one set up already, enter in the project folder and run it to make sure it is all correct.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;meteor create my-project
cd my-project
meteor run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, it uses React and makes a subdirectory named &lt;code&gt;my-project&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-tailwind-via-npm"&gt;
  &lt;/a&gt;
  Install Tailwind via npm
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;meteor npm install tailwindcss@latest postcss@latest postcss-load-config@latest autoprefixer@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is recommended to use &lt;code&gt;meteor npm&lt;/code&gt; command instead of only &lt;code&gt;npm&lt;/code&gt; to use the npm version bundled with Meteor itself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-meteor-package-for-postcss"&gt;
  &lt;/a&gt;
  Install Meteor package for postcss
&lt;/h2&gt;

&lt;p&gt;Install &lt;a href="https://github.com/Meteor-Community-Packages/meteor-postcss"&gt;juliancwirko:postcss&lt;/a&gt; and remove the Meteor standard minifier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;meteor remove standard-minifier-css
meteor add juliancwirko:postcss
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configure-postcss"&gt;
  &lt;/a&gt;
  Configure postcss
&lt;/h2&gt;

&lt;p&gt;Create a file named .postcssrc.js, add tailwindcss and autoprefixer to your PostCSS configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// .postcssrc.js
module.exports = ctx =&amp;gt; {
  // This flag is set when loading configuration by this package
  if (ctx.meteor) {
    const config = {
      plugins: {
        tailwindcss: {},
        autoprefixer: {},
      },
    };

    if (ctx.env === 'production') {
      // "autoprefixer" is reported to be slow,
      // so we use it only in production.
      config.plugins.autoprefixer = {
        overrideBrowserslist: ['defaults'],
      };
    }

    return config;
  } else {
    return {};
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#include-tailwind-in-your-css"&gt;
  &lt;/a&gt;
  Include Tailwind in your CSS
&lt;/h2&gt;

&lt;p&gt;Add Tailwind to your main.css file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// main.css
@tailwind base;
@tailwind components;
@tailwind utilities;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configure-tailwind"&gt;
  &lt;/a&gt;
  Configure Tailwind
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// tailwind.config.js
module.exports = {
  purge: [],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {},
  },
  variants: {},
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-your-css"&gt;
  &lt;/a&gt;
  Building your CSS
&lt;/h2&gt;

&lt;p&gt;When building for production, be sure to configure the purge option to remove any unused classes for the smallest file size:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// tailwind.config.js
module.exports = {
  purge: ['./imports/ui/**/*.{js,jsx,ts,tsx}', './public/*.html'],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {},
  },
  variants: {},
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;References:&lt;br&gt;
&lt;a href="https://tailwindcss.com/docs/installation"&gt;https://tailwindcss.com/docs/installation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/meteor/examples/tree/main/tailwindcss"&gt;https://github.com/meteor/examples/tree/main/tailwindcss&lt;/a&gt;&lt;/p&gt;

</description>
      <category>meteor</category>
      <category>javascript</category>
      <category>tailwindcss</category>
      <category>react</category>
    </item>
    <item>
      <title>GraphQL The Rails Way: Part 1 - Exposing your resources for querying</title>
      <author>Arnaud</author>
      <pubDate>Thu, 04 Nov 2021 11:22:00 +0000</pubDate>
      <link>https://dev.to/alachaum/graphql-the-rails-way-part-1-exposing-your-resources-for-querying-2mkd</link>
      <guid>https://dev.to/alachaum/graphql-the-rails-way-part-1-exposing-your-resources-for-querying-2mkd</guid>
      <description>&lt;p&gt;&lt;strong&gt;TL;DR;&lt;/strong&gt; GraphQL is a good way of making your API more flexible and less resource consuming. But if you think that type-definition is cumbersome then read on. With the modules we provide you'll be able to expose fully functional resources with one line of code.&lt;/p&gt;

&lt;p&gt;For those who haven't followed the GraphQL trend launched by Facebook, it's a fancy way of mixing API and SQL concepts together.&lt;/p&gt;

&lt;p&gt;Instead of making calls to a properly structured endpoint with parameters like with REST APIs, GraphQL makes you build syntactic queries that you send to one endpoint.&lt;/p&gt;

&lt;p&gt;The benefit of GraphQL? A properly defined standard for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Making multiple queries as once&lt;/li&gt;
&lt;li&gt;Forcing consumers to select the fields they need&lt;/li&gt;
&lt;li&gt;Fetching related resources as part of parent resources&lt;/li&gt;
&lt;li&gt;Paginating resources and sub-resources (using relay-style pagination)&lt;/li&gt;
&lt;li&gt;Strongly-typing the resources you expose&lt;/li&gt;
&lt;li&gt;Documenting your API without the immediate need for a separate documentation website&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Couldn't a REST API do the above? Of course it could. But GraphQL has defined a standard for all these and many clients are already out there providing out of the box functionalities for interacting with GraphQL APIs. So...why not give it a try?&lt;/p&gt;

&lt;p&gt;If you need more convincing you can read &lt;a href="https://github.blog/2016-09-14-the-github-graphql-api/"&gt;GitHub's blog article&lt;/a&gt; explaining why they switched.&lt;/p&gt;

&lt;p&gt;When it comes to implementing a GraphQL server in Rails, one can use the excellent &lt;a href="https://graphql-ruby.org/"&gt;GraphQL Ruby gem&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The gem provides all the foundations for building your API. But the implementation is still very much manual, with lots of boilerplate code to provide.&lt;/p&gt;

&lt;p&gt;In this article I will guide you through the steps of bootstrapping GraphQL Ruby then show you how - with a bit of introspection - you can easily expose your resources the Rails Way™ (= with one line of code).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-steps-with-graphqlruby"&gt;
  &lt;/a&gt;
  First steps with graphql-ruby
&lt;/h2&gt;

&lt;p&gt;Let's dive into graphql-ruby and see how we can go from zero to first query.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-graphqlruby"&gt;
  &lt;/a&gt;
  Installing graphql-ruby
&lt;/h3&gt;

&lt;p&gt;First add the graphql gem to your Gemfile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# GraphQL API functionalities&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;"graphql"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"~&amp;gt; 1.12.12"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run the install generator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails generate graphql:install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The generator will create the GraphQL controller, setup the base types and update your routes.&lt;/p&gt;

&lt;p&gt;That's it for the install part. Now let's see how we can expose resources to query.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defining-and-exposing-models"&gt;
  &lt;/a&gt;
  Defining and exposing models
&lt;/h3&gt;

&lt;p&gt;The first important file to look at is the &lt;code&gt;Types::QueryType&lt;/code&gt; file. This class defines all the attributes which can be queried on your GraphQL API.&lt;/p&gt;

&lt;p&gt;For the purpose of demonstrating how records get exposed, let's generate a User and a Book model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Generate a basic user model&lt;/span&gt;
rails g model User email:string name:string

&lt;span class="c"&gt;# Generate a basic book model with an ownership link to our user model&lt;/span&gt;
rails g model Book name:string pages:integer user:references

&lt;span class="c"&gt;# Run the migrations&lt;/span&gt;
rake db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll expose these two classes for querying on our GraphQL API. To do so we need to define their type.&lt;/p&gt;

&lt;p&gt;We'll start by defining a base type for common record attributes. These kind of base classes can help keep your type classes more focused.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/graphql/types/record_type.rb&lt;/span&gt;
&lt;span class="c1"&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Types&lt;/span&gt;
  &lt;span class="c1"&gt;# Define common attributes used by our records&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;RecordType&lt;/span&gt;
    &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;BaseInterface&lt;/span&gt;

    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s1"&gt;'The unique identifier of the resource.'&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:created_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ISO8601DateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s1"&gt;'The date and time that the resource was created.'&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:updated_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ISO8601DateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s1"&gt;'The date and time that the resource was last updated.'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let's define GraphQL types for our models. &lt;/p&gt;

&lt;p&gt;This is the User type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/graphql/types/user_type.rb&lt;/span&gt;
&lt;span class="c1"&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Types&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserType&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;BaseObject&lt;/span&gt;
    &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;RecordType&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="s1"&gt;'A user'&lt;/span&gt;

    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s1"&gt;'The email address of the user.'&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s1"&gt;'The name of the user.'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the Book type. You'll notice that the user field reuses the User type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/graphql/types/book_type.rb&lt;/span&gt;
&lt;span class="c1"&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Types&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookType&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;BaseObject&lt;/span&gt;
    &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;RecordType&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="s1"&gt;'A book'&lt;/span&gt;

    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s1"&gt;'The name of the book.'&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:pages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s1"&gt;'The number of pages in the book'&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;UserType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s1"&gt;'The owner of the book'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have defined our types we need to plug them to the GraphQL Query API. This plumbing happens in the &lt;code&gt;Types::QueryType&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Here is the generated &lt;code&gt;Types::QueryType&lt;/code&gt; class that we have expanded a bit to expose our collections. We use &lt;code&gt;connection_type&lt;/code&gt; instead of arrays on the Book and User types so as to automatically benefit from &lt;a href="https://graphql-ruby.org/pagination/using_connections"&gt;relay-style pagination&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/graphql/types/query_type.rb&lt;/span&gt;
&lt;span class="c1"&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Types&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QueryType&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;BaseObject&lt;/span&gt;
    &lt;span class="c1"&gt;# Add `node(id: ID!) and `nodes(ids: [ID!]!)`&lt;/span&gt;
    &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Relay&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HasNodeField&lt;/span&gt;
    &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Relay&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HasNodesField&lt;/span&gt;

    &lt;span class="c1"&gt;#==============================&lt;/span&gt;
    &lt;span class="c1"&gt;# Fields&lt;/span&gt;
    &lt;span class="c1"&gt;#==============================&lt;/span&gt;
    &lt;span class="c1"&gt;# TODO: Test field. remove me&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:test_field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s2"&gt;"An example field added by the generator"&lt;/span&gt;

    &lt;span class="c1"&gt;# Record fields&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:books&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;BookType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connection_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s2"&gt;"The list of books"&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;UserType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connection_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s2"&gt;"The list of users"&lt;/span&gt;

    &lt;span class="c1"&gt;#==============================&lt;/span&gt;
    &lt;span class="c1"&gt;# Field logic&lt;/span&gt;
    &lt;span class="c1"&gt;#==============================&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_field&lt;/span&gt;
      &lt;span class="s2"&gt;"Hello World!"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;books&lt;/span&gt;
      &lt;span class="no"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:created_at&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;users&lt;/span&gt;
      &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:created_at&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see how we can use our API now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#querying-the-graphql-api"&gt;
  &lt;/a&gt;
  Querying the GraphQL API
&lt;/h3&gt;

&lt;p&gt;The easiest way to query your GraphQL API is to use &lt;a href="https://github.com/graphql/graphiql"&gt;GraphiQL&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Good news though, the GraphQL gem generator automatically adds the &lt;code&gt;graphiql-rails&lt;/code&gt; gem to your gemfile. After running &lt;code&gt;bundle install&lt;/code&gt; you should be able to access GraphiQL on &lt;a href="http://localhost:3000/graphiql"&gt;http://localhost:3000/graphiql&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You might encounter a precompilation error. In that case update your manifest.js and add the GraphiQL assets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// app/assets/config/manifest.js&lt;/span&gt;

&lt;span class="c1"&gt;// GraphiQL assets&lt;/span&gt;
&lt;span class="c1"&gt;//= link graphiql/rails/application.css&lt;/span&gt;
&lt;span class="c1"&gt;//= link graphiql/rails/application.js&lt;/span&gt;

&lt;span class="c1"&gt;// Your assets&lt;/span&gt;
&lt;span class="c1"&gt;//= link_tree ../images&lt;/span&gt;
&lt;span class="c1"&gt;//= link_directory ../stylesheets .css&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you prefer, you can also install GraphiQL as a standalone app. See &lt;a href="https://www.electronjs.org/apps/graphiql"&gt;this link for more info&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When you open GraphiQL, the first thing you should look at is the &lt;code&gt;docs&lt;/code&gt; section. You'll notice that all your models and fields are properly documented there. That's neat.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M3fluR7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/5ebd54899f7ac255cd8e0950/60bf644d173d5d5dfb8fc6ff_01_graphiql_docs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M3fluR7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/5ebd54899f7ac255cd8e0950/60bf644d173d5d5dfb8fc6ff_01_graphiql_docs.png" alt="GraphiQL docs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's create some test records via the Rails console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Create users&lt;/span&gt;
&lt;span class="n"&gt;u1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="s2"&gt;"john.doe@example.net"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"John Doe"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;u2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="s2"&gt;"fanny.blue@example.net"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"Fanny Blue"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Create books&lt;/span&gt;
&lt;span class="no"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"The great story"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;pages: &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;user: &lt;/span&gt;&lt;span class="n"&gt;u1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"The awesome tale"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;pages: &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;user: &lt;/span&gt;&lt;span class="n"&gt;u2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool. Now we can perform our query.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nAp7lcm3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/5ebd54899f7ac255cd8e0950/60bf648516b034395a2716bb_02_graphql_query.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nAp7lcm3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/5ebd54899f7ac255cd8e0950/60bf648516b034395a2716bb_02_graphql_query.png" alt="GraphiQL docs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note how GraphQL allows us to perform multiple queries at once. That's really sweet.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-filtering-attributes-to-your-collections"&gt;
  &lt;/a&gt;
  Adding filtering attributes to your collections
&lt;/h2&gt;

&lt;p&gt;It would be nice to have filters on our collections. The gem allows us to do that via field block definitions.&lt;/p&gt;

&lt;p&gt;Here is a concrete example of adding a filter on page size.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/graphql/types/query_type.rb&lt;/span&gt;
&lt;span class="c1"&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Types&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QueryType&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;BaseObject&lt;/span&gt;
    &lt;span class="c1"&gt;# Add `node(id: ID!) and `nodes(ids: [ID!]!)`&lt;/span&gt;
    &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Relay&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HasNodeField&lt;/span&gt;
    &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Relay&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HasNodesField&lt;/span&gt;

    &lt;span class="c1"&gt;#==============================&lt;/span&gt;
    &lt;span class="c1"&gt;# Fields&lt;/span&gt;
    &lt;span class="c1"&gt;#==============================&lt;/span&gt;
    &lt;span class="c1"&gt;# TODO: Test field. remove me&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:test_field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s2"&gt;"An example field added by the generator"&lt;/span&gt;

    &lt;span class="c1"&gt;# Books&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:books&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;BookType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connection_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; 
      &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="s2"&gt;"The list of books"&lt;/span&gt;

      &lt;span class="c1"&gt;# We define a filter argument on the collection attribute&lt;/span&gt;
      &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="ss"&gt;:size_greater_than&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;required: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Users&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;UserType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connection_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s2"&gt;"The list of users"&lt;/span&gt;

    &lt;span class="c1"&gt;#==============================&lt;/span&gt;
    &lt;span class="c1"&gt;# Field logic&lt;/span&gt;
    &lt;span class="c1"&gt;#==============================&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_field&lt;/span&gt;
      &lt;span class="s2"&gt;"Hello World!"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# The filter argument is passed to our method and conditionally&lt;/span&gt;
    &lt;span class="c1"&gt;# used to refine the query scope.&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;books&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;size_greater_than: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;rel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:created_at&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;rel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"pages &amp;gt;= ?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_greater_than&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;size_greater_than&lt;/span&gt;
      &lt;span class="n"&gt;rel&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;users&lt;/span&gt;
      &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:created_at&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can easily filter on book size.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0fQtD0QH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/5ebd54899f7ac255cd8e0950/60bf64cb154f923b5b79c8ac_03_graphql_size_filter.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0fQtD0QH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/5ebd54899f7ac255cd8e0950/60bf64cb154f923b5b79c8ac_03_graphql_size_filter.png" alt="GraphiQL docs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nice! But I'm used to Rails where everything is inferred out of the box. Right now it looks quite cumbersome to define all these collections and filters. Isn't there a way to automatically generate those?&lt;/p&gt;

&lt;p&gt;Of course there is. Time to use GraphQL custom resolvers with a bit of introspection!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#automatically-defining-resources-and-filters"&gt;
  &lt;/a&gt;
  Automatically defining resources and filters
&lt;/h2&gt;

&lt;p&gt;In order to automatically build resources and their corresponding filters we'll need three things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A GraphQL helper to expose Active Record resources&lt;/li&gt;
&lt;li&gt;A custom resolver authorizing and querying our collections&lt;/li&gt;
&lt;li&gt;An Active Record helper to evaluate the query filters received from GraphQL.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The modules below are configured to use Pundit - if present - to scope access to records. Pundit is really just given as an example - any scoping framework would work, even custom policy classes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#active-record-query-helpers"&gt;
  &lt;/a&gt;
  Active Record query helpers
&lt;/h3&gt;

&lt;p&gt;Let's start with the Active Record helper. &lt;/p&gt;

&lt;p&gt;Add the following concern to your application. This concern allows collections to be filtered using underscore notation (e.g. created_at_gte for created_at &amp;gt;=) and sorting using dot notation (e.g. created_at.desc).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/concerns/graphql_query_scopes.rb&lt;/span&gt;
&lt;span class="c1"&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;GraphqlQueryScopes&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;

  &lt;span class="c1"&gt;# List of SQL operators supported by the with_api_filters scope&lt;/span&gt;
  &lt;span class="no"&gt;SQL_OPERATORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;eq: &lt;/span&gt;&lt;span class="s1"&gt;'= ?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;gt: &lt;/span&gt;&lt;span class="s1"&gt;'&amp;gt; ?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;gte: &lt;/span&gt;&lt;span class="s1"&gt;'&amp;gt;= ?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;lt: &lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt; ?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;lte: &lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;= ?'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;in: &lt;/span&gt;&lt;span class="s1"&gt;'IN (?)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;nin: &lt;/span&gt;&lt;span class="s1"&gt;'NOT IN (?)'&lt;/span&gt;
  &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;

  &lt;span class="n"&gt;class_methods&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# If you use Postgres or any database storing date with millisecond precision&lt;/span&gt;
    &lt;span class="c1"&gt;# then you might want to uncomment the body of this method.&lt;/span&gt;
    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="c1"&gt;# Millisecond precision makes timestamp equality and less than filters almost &lt;/span&gt;
    &lt;span class="c1"&gt;# useless.&lt;/span&gt;
    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="c1"&gt;# Format field for SQL queries. Truncate dates to second precision.&lt;/span&gt;
    &lt;span class="c1"&gt;# Used to build filtering queries based on attributes coming from the API.&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;loose_precision_field_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;table_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

      &lt;span class="c1"&gt;# if columns_hash[field.to_s].type == :datetime&lt;/span&gt;
      &lt;span class="c1"&gt;#   "date_trunc('second', #{table_name}.#{field})"&lt;/span&gt;
      &lt;span class="c1"&gt;# else&lt;/span&gt;
      &lt;span class="c1"&gt;#   "#{table_name}.#{field}"&lt;/span&gt;
      &lt;span class="c1"&gt;# end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# Sort by created_at to have consistent pagination.&lt;/span&gt;
    &lt;span class="c1"&gt;# This is particularly important when using UUID for IDs&lt;/span&gt;
    &lt;span class="n"&gt;default_scope&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;created_at: :asc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;id: :asc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# This scopes aims at being overriden in children models&lt;/span&gt;
    &lt;span class="c1"&gt;# This scope should typically specify eager loaded associations&lt;/span&gt;
    &lt;span class="c1"&gt;# e.g. scope :graphql_scope { includes(:owner, :team) }&lt;/span&gt;
    &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:graphql_scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# Allow sorting using a 'dot' syntax (e.g. name.asc). &lt;/span&gt;
    &lt;span class="c1"&gt;# Supports underscore and camelized attributes. &lt;/span&gt;
    &lt;span class="c1"&gt;# This scope is typically used on the API&lt;/span&gt;
    &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:with_sorting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sort_by&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sort_by&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;blank?&lt;/span&gt;

      &lt;span class="c1"&gt;# Extract attributes&lt;/span&gt;
      &lt;span class="n"&gt;sort_attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sort_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sort_by&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="c1"&gt;# Format attributes&lt;/span&gt;
      &lt;span class="n"&gt;sort_attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sort_attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;underscore&lt;/span&gt;
      &lt;span class="n"&gt;sort_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'asc'&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="sx"&gt;%w[asc desc]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sort_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="c1"&gt;# Order scope or return self if the attribute does not exist&lt;/span&gt;
      &lt;span class="n"&gt;column_names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sort_attr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;unscope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:order&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sort_attr&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sort_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# Allow filtering using attribute-level operators coming from the API.&lt;/span&gt;
    &lt;span class="c1"&gt;# E.g.&lt;/span&gt;
    &lt;span class="c1"&gt;# - created_at_gte =&amp;gt; created_at greater than or equal to value&lt;/span&gt;
    &lt;span class="c1"&gt;# - id_in =&amp;gt; ID in list of values&lt;/span&gt;
    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="c1"&gt;# The list of operators is:&lt;/span&gt;
    &lt;span class="c1"&gt;# *_gt =&amp;gt; strictly greater than&lt;/span&gt;
    &lt;span class="c1"&gt;# *_gte =&amp;gt; greater than or equal&lt;/span&gt;
    &lt;span class="c1"&gt;# *_lt =&amp;gt; strictly less than&lt;/span&gt;
    &lt;span class="c1"&gt;# *_lte =&amp;gt; less than or equal&lt;/span&gt;
    &lt;span class="c1"&gt;# *_in =&amp;gt; value in array&lt;/span&gt;
    &lt;span class="c1"&gt;# *_nin =&amp;gt; value not in array&lt;/span&gt;
    &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:with_api_filters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;args_hash&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="c1"&gt;# Build a SQL fragment for each argument&lt;/span&gt;
      &lt;span class="c1"&gt;# Array is first build as [['table.field1 &amp;gt; ?', 123], [['table.field2 &amp;lt; ?', 400]]]&lt;/span&gt;
      &lt;span class="c1"&gt;# then transposed into [['table.field1 &amp;gt; ?', 'table.field2 &amp;lt; ?'], [[123, 400]]]&lt;/span&gt;
      &lt;span class="n"&gt;sql_fragments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args_hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="c1"&gt;# Capture the field and the operator&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;column_names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;
          &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:eq&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
          &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rpartition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'_'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="c1"&gt;# Sanitize the field and operator&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;StatementInvalid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"invalid operator &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;column_names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="no"&gt;SQL_OPERATORS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="c1"&gt;# Build SQL fragment&lt;/span&gt;
        &lt;span class="n"&gt;field_fragment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;loose_precision_field_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;SQL_OPERATORS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

        &lt;span class="c1"&gt;# Return fragment and value&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;field_fragment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;transpose&lt;/span&gt;

      &lt;span class="c1"&gt;# Combine regular args and SQL fragments to form the final scope&lt;/span&gt;
      &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql_fragments&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' AND '&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use this concern in your ApplicationRecord base class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/application_record.rb&lt;/span&gt;
&lt;span class="c1"&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApplicationRecord&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;GraphqlQueryScopes&lt;/span&gt;

  &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;abstract_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Now you can filter and sort records this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with_api_filters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;pages_gte: &lt;/span&gt;&lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with_sorting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'created.asc'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Book Load (0.4ms)  SELECT "books".* FROM "books" WHERE (books.pages &amp;gt;= 130) ORDER BY "books"."created_at" ASC, "books"."id" ASC LIMIT ?  [["LIMIT", 11]]&lt;/span&gt;
&lt;span class="c1"&gt;#=&amp;gt; #&amp;lt;ActiveRecord::Relation [#&amp;lt;Book id: 2, name: "The awesome tale", pages: 200, user_id: 2, created_at: "2021-06-07 12:50:22.002122000 +0000", updated_at: "2021-06-07 12:50:22.002122000 +0000"&amp;gt;]&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The concern also defines a default &lt;code&gt;graphql_scope&lt;/code&gt;, which is used by our resolvers. This scope can be overridden on each model to define API-specific eager loading strategies.&lt;/p&gt;

&lt;p&gt;Here is an example with our book model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/book.rb&lt;/span&gt;
&lt;span class="c1"&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;

  &lt;span class="c1"&gt;# Always eager load the associated user when books&lt;/span&gt;
  &lt;span class="c1"&gt;# get queried on the API.&lt;/span&gt;
  &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:graphql_scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;eager_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#graphql-custom-resolvers-for-collection-and-find-queries"&gt;
  &lt;/a&gt;
  GraphQL custom resolvers for collection and find queries
&lt;/h3&gt;

&lt;p&gt;Now let's add a custom resolver to dynamically support our collections and corresponding filters. The resolver looks at all the fields defined on the model type and automatically generate filters for fields which are database queriable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/graphql/resolvers/collection_query.rb&lt;/span&gt;
&lt;span class="c1"&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Resolvers&lt;/span&gt;
  &lt;span class="c1"&gt;# Parameterized Class used to generate resolvers finding multiple records via&lt;/span&gt;
  &lt;span class="c1"&gt;# filtering attributes&lt;/span&gt;
  &lt;span class="c1"&gt;#&lt;/span&gt;
  &lt;span class="c1"&gt;# Example:&lt;/span&gt;
  &lt;span class="c1"&gt;# Generate resolver for Types::MyClassType which is assumed to use the 'MyClass'&lt;/span&gt;
  &lt;span class="c1"&gt;# ActiveRecord model under the hood:&lt;/span&gt;
  &lt;span class="c1"&gt;# field :my_class, resolver: CollectionQuery.for(Types::MyClassType)&lt;/span&gt;
  &lt;span class="c1"&gt;#&lt;/span&gt;
  &lt;span class="c1"&gt;# Generate resolver for an association where the association name can be inferred from&lt;/span&gt;
  &lt;span class="c1"&gt;# the type class&lt;/span&gt;
  &lt;span class="c1"&gt;# field :posts, resolver: CollectionQuery.for(Types::PostType)&lt;/span&gt;
  &lt;span class="c1"&gt;#&lt;/span&gt;
  &lt;span class="c1"&gt;# Generate resolver for an association where the association cannot be inferred&lt;/span&gt;
  &lt;span class="c1"&gt;# from the type class passed to the resolver&lt;/span&gt;
  &lt;span class="c1"&gt;# field :published_posts, resolver: CollectionQuery.for(Types::MyClassType, relation: :published_posts)&lt;/span&gt;
  &lt;span class="c1"&gt;#&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CollectionQuery&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Resolver&lt;/span&gt;
    &lt;span class="c1"&gt;# Class insteance variables that can be inherited by child classes&lt;/span&gt;
    &lt;span class="n"&gt;class_attribute&lt;/span&gt; &lt;span class="ss"&gt;:base_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:resolver_opts&lt;/span&gt;

    &lt;span class="c1"&gt;#---------------------------------------&lt;/span&gt;
    &lt;span class="c1"&gt;# Constants&lt;/span&gt;
    &lt;span class="c1"&gt;#---------------------------------------&lt;/span&gt;
    &lt;span class="c1"&gt;# Define the operators accepted for each field type&lt;/span&gt;
    &lt;span class="no"&gt;FILTERING_OPERATORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ID&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="sx"&gt;%i[in nin]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="sx"&gt;%i[in nin]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Enum&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="sx"&gt;%i[in nin]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ISO8601DateTime&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="sx"&gt;%i[gt gte lt lte in nin]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Float&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="sx"&gt;%i[gt gte lt lte in nin]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="sx"&gt;%i[gt gte lt lte in nin]&lt;/span&gt;
    &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;

    &lt;span class="c1"&gt;#---------------------------------------&lt;/span&gt;
    &lt;span class="c1"&gt;# Class Methods&lt;/span&gt;
    &lt;span class="c1"&gt;#---------------------------------------&lt;/span&gt;
    &lt;span class="c1"&gt;# Return a child resolver class configured for the specified entity type&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="no"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Setup method used to configure the class&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;# Configure class&lt;/span&gt;
      &lt;span class="n"&gt;use_base_type&lt;/span&gt; &lt;span class="n"&gt;entity_type&lt;/span&gt;
      &lt;span class="n"&gt;use_resolver_opts&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;

      &lt;span class="c1"&gt;# Set resolver type&lt;/span&gt;
      &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;entity_type&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;

      &lt;span class="c1"&gt;# Define each entity field as a filtering argument&lt;/span&gt;
      &lt;span class="n"&gt;filter_fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field_type&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;required: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="c1"&gt;# Sort field&lt;/span&gt;
      &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="ss"&gt;:sort_by&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;required: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s1"&gt;'Use dot notation to sort by a specific field. E.g. `createdAt.asc` or `createdAt.desc`.'&lt;/span&gt;

      &lt;span class="c1"&gt;# Return class for chaining&lt;/span&gt;
      &lt;span class="nb"&gt;self&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Set the base entity type&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;use_base_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type_klass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;base_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type_klass&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Set the resolver options&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;use_resolver_opts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resolver_opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;HashWithIndifferentAccess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="c1"&gt;# Return all base fields that can be used to generate filters&lt;/span&gt;
    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="c1"&gt;# @return [Hash] A hash of Field Name =&amp;gt; GraphQL Field Type&lt;/span&gt;
    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;queriable_fields&lt;/span&gt;
      &lt;span class="n"&gt;native_queriable_fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;association_queriable_fields&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="c1"&gt;# Return the list of native fields that can be used for filtering&lt;/span&gt;
    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="c1"&gt;# @return [Hash] A hash of field name =&amp;gt; field type&lt;/span&gt;
    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;native_queriable_fields&lt;/span&gt;
      &lt;span class="n"&gt;base_type&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fields&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;model_klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;column_names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;underscore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;input?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;list?&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_h&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="c1"&gt;# Return the list of belongs_to fields that can be used for filtering&lt;/span&gt;
    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="c1"&gt;# @return [Hash] A hash of field name =&amp;gt; field type&lt;/span&gt;
    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;association_queriable_fields&lt;/span&gt;
      &lt;span class="n"&gt;base_type&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fields&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;values&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;object?&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;model_klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reflect_on_all_associations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:belongs_to&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;foreign_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_h&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Return the list of fields accepted as filters (including operators)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;filter_fields&lt;/span&gt;
      &lt;span class="c1"&gt;# Used queriable fields as equality filters&lt;/span&gt;
      &lt;span class="n"&gt;equality_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queriable_fields&lt;/span&gt;

      &lt;span class="c1"&gt;# For each queriable field, find the list of operators applicable for the field class&lt;/span&gt;
      &lt;span class="n"&gt;operator_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;equality_fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field_type&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="c1"&gt;# Find applicable operators by looking up the field type ancestors&lt;/span&gt;
        &lt;span class="n"&gt;operators&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FILTERING_OPERATORS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;klass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;field_type&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;klass&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last&lt;/span&gt;
        &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;operators&lt;/span&gt;

        &lt;span class="c1"&gt;# Generate all operator fields&lt;/span&gt;
        &lt;span class="n"&gt;operators&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
          &lt;span class="n"&gt;arg_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;%i[in nin]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;field_type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;field_type&lt;/span&gt;
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;underscore&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg_type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_h&lt;/span&gt;

      &lt;span class="c1"&gt;# Return equality and operator-based fields&lt;/span&gt;
      &lt;span class="n"&gt;equality_fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator_fields&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Return the underlying ActiveRecord model class&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;model_klass&lt;/span&gt;
      &lt;span class="vi"&gt;@model_klass&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resolver_opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:model_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;base_type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;demodulize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Type$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;constantize&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Return the model Pundit Policy class&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pundit_scope_klass&lt;/span&gt;
      &lt;span class="vi"&gt;@pundit_scope_klass&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;model_klass&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Policy::Scope"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constantize&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;#---------------------------------------&lt;/span&gt;
    &lt;span class="c1"&gt;# Instance Methods&lt;/span&gt;
    &lt;span class="c1"&gt;#---------------------------------------&lt;/span&gt;
    &lt;span class="c1"&gt;# Retrieve the current user from the GraphQL context.&lt;/span&gt;
    &lt;span class="c1"&gt;# This current user must be injected in context inside the GraphqlController.&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;current_user&lt;/span&gt;
      &lt;span class="vi"&gt;@current_user&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:current_user&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Reject request if the user is not authenticated&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authorized?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;super&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;defined?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Pundit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Pundit&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;NotAuthorizedError&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Return the name of the association that should be defined on the parent&lt;/span&gt;
    &lt;span class="c1"&gt;# object&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parent_association_name&lt;/span&gt;
      &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resolver_opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:relation&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
        &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;model_klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;underscore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pluralize&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Return the instantiated resource scope via Pundit&lt;/span&gt;
    &lt;span class="c1"&gt;# If a parent object is defined then it is assumed that the resolver is&lt;/span&gt;
    &lt;span class="c1"&gt;# called within the context of an association&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pundit_scope&lt;/span&gt;
      &lt;span class="n"&gt;base_scope&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent_association_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;model_klass&lt;/span&gt;

      &lt;span class="c1"&gt;# Enforce Pundit control if the gem is present&lt;/span&gt;
      &lt;span class="c1"&gt;# This current user must be injected in context inside the GraphqlController.&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;defined?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Pundit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pundit_scope_klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base_scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;graphql_scope&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;resolve&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;base_scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;graphql_scope&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Actual resolver method performing the ActiveRecord filtering query&lt;/span&gt;
    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="c1"&gt;# The resolver supports filtering via a range of operators:&lt;/span&gt;
    &lt;span class="c1"&gt;# * =&amp;gt; field equal to value&lt;/span&gt;
    &lt;span class="c1"&gt;# *_gt =&amp;gt; strictly greater than&lt;/span&gt;
    &lt;span class="c1"&gt;# *_gte =&amp;gt; greater than or equal&lt;/span&gt;
    &lt;span class="c1"&gt;# *_lt =&amp;gt; strictly less than&lt;/span&gt;
    &lt;span class="c1"&gt;# *_lte =&amp;gt; less than or equal&lt;/span&gt;
    &lt;span class="c1"&gt;# *_in =&amp;gt; value in array&lt;/span&gt;
    &lt;span class="c1"&gt;# *_nin =&amp;gt; value not in array&lt;/span&gt;
    &lt;span class="c1"&gt;# &amp;gt; See ApplicationRecord#with_api_filters for the underlying filtering logic&lt;/span&gt;
    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="c1"&gt;# The resolver supports sorting via 'dot' syntax:&lt;/span&gt;
    &lt;span class="c1"&gt;# sortBy: 'createdAt.desc'&lt;/span&gt;
    &lt;span class="c1"&gt;# &amp;gt; See ApplicationRecord#with_sorting for the underlying sorting logic&lt;/span&gt;
    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;sort_by: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;pundit_scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with_api_filters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with_sorting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sort_by&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's also add a custom resolver to support fetching model by unique attribute. Any field your define as &lt;code&gt;ID&lt;/code&gt; on your model types will be exposed as a primary key for single record fetching purpose.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/graphql/resolvers/record_query.rb&lt;/span&gt;
&lt;span class="c1"&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Resolvers&lt;/span&gt;
  &lt;span class="c1"&gt;# Parameterized Class used to generate resolvers finding a single record&lt;/span&gt;
  &lt;span class="c1"&gt;# using one of its ID keys&lt;/span&gt;
  &lt;span class="c1"&gt;#&lt;/span&gt;
  &lt;span class="c1"&gt;# Example:&lt;/span&gt;
  &lt;span class="c1"&gt;# Generate resolver for Types::MyClassType which is assumed to use the 'MyClass'&lt;/span&gt;
  &lt;span class="c1"&gt;# ActiveRecord model under the hood&lt;/span&gt;
  &lt;span class="c1"&gt;# &amp;gt; RecordQuery.for(Types::MyClassType)&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RecordQuery&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Resolver&lt;/span&gt;
    &lt;span class="c1"&gt;# Class insteance variables that can be inherited by child classes&lt;/span&gt;
    &lt;span class="n"&gt;class_attribute&lt;/span&gt; &lt;span class="ss"&gt;:base_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:resolver_opts&lt;/span&gt;

    &lt;span class="c1"&gt;#---------------------------------------&lt;/span&gt;
    &lt;span class="c1"&gt;# Class Methods&lt;/span&gt;
    &lt;span class="c1"&gt;#---------------------------------------&lt;/span&gt;
    &lt;span class="c1"&gt;# Return a child resolver class configured for the specified entity type&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="no"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Setup method used to configure the class&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;# Set base type&lt;/span&gt;
      &lt;span class="n"&gt;use_base_type&lt;/span&gt; &lt;span class="n"&gt;entity_type&lt;/span&gt;
      &lt;span class="n"&gt;use_resolver_opts&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;

      &lt;span class="c1"&gt;# Set resolver type&lt;/span&gt;
      &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;entity_type&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;

      &lt;span class="c1"&gt;# Define argument for each primary key&lt;/span&gt;
      &lt;span class="n"&gt;id_fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;required: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="c1"&gt;# Return class for chaining&lt;/span&gt;
      &lt;span class="nb"&gt;self&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Set the base entity type&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;use_base_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type_klass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;base_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type_klass&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Set the resolver options&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;use_resolver_opts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resolver_opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;HashWithIndifferentAccess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Return the list of ID fields&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id_fields&lt;/span&gt;
      &lt;span class="n"&gt;base_type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unwrap&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ID&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Return the underlying ActiveRecord model class&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;entity_klass&lt;/span&gt;
      &lt;span class="vi"&gt;@entity_klass&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;base_type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;demodulize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Type$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;constantize&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Return the model Pundit Policy class&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pundit_scope_klass&lt;/span&gt;
      &lt;span class="vi"&gt;@pundit_scope_klass&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;entity_klass&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Policy::Scope"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constantize&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;#---------------------------------------&lt;/span&gt;
    &lt;span class="c1"&gt;# Instance Methods&lt;/span&gt;
    &lt;span class="c1"&gt;#---------------------------------------&lt;/span&gt;
    &lt;span class="c1"&gt;# Retrieve the current user from the GraphQL context.&lt;/span&gt;
    &lt;span class="c1"&gt;# This current user must be injected in context inside the GraphqlController.&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;current_user&lt;/span&gt;
      &lt;span class="vi"&gt;@current_user&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:current_user&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Reject request if the user is not authenticated&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authorized?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;super&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;defined?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Pundit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Pundit&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;NotAuthorizedError&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Return the name of the association that should be defined on the parent&lt;/span&gt;
    &lt;span class="c1"&gt;# object&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parent_association_name&lt;/span&gt;
      &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resolver_opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:relation&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
        &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;entity_klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;underscore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pluralize&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Return the instantiated resource scope via Pundit&lt;/span&gt;
    &lt;span class="c1"&gt;# If a parent object is defined then it is assumed that the resolver is&lt;/span&gt;
    &lt;span class="c1"&gt;# called within the context of an association&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pundit_scope&lt;/span&gt;
      &lt;span class="n"&gt;base_scope&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent_association_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;entity_klass&lt;/span&gt;

      &lt;span class="c1"&gt;# Enforce Pundit control if the gem is present&lt;/span&gt;
      &lt;span class="c1"&gt;# This current user must be injected in context inside the GraphqlController.&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;defined?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Pundit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pundit_scope_klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base_scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;graphql_scope&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;resolve&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;base_scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;graphql_scope&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Actual resolver method performing the ActiveRecord find query&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;# Avoid finding by nil value&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;blank?&lt;/span&gt;

      &lt;span class="n"&gt;pundit_scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args_hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In both resolvers I've made Pundit optional. But I strongly recommend using it or any similar framework. You should read the comments above each &lt;code&gt;pundit_&lt;/code&gt; method in the resolvers and adapt based on your needs.&lt;/p&gt;

&lt;p&gt;For authorization purpose, you can inject a &lt;code&gt;current_user&lt;/code&gt; attribute inside the GraphQL context by modifying your &lt;code&gt;GraphqlController&lt;/code&gt;. Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GraphqlController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;
    &lt;span class="n"&gt;variables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prepare_variables&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:variables&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:query&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;operation_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:operationName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# ==&amp;gt; Specify your GraphQL context here &amp;lt;==&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;current_user: &lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;GraphqlRailsSchema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;variables: &lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;context: &lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;operation_name: &lt;/span&gt;&lt;span class="n"&gt;operation_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;StandardError&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;development?&lt;/span&gt;
    &lt;span class="n"&gt;handle_error_in_development&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;current_user&lt;/span&gt;
    &lt;span class="c1"&gt;# ... Devise or Custom logic for retrieving the current user&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#graphql-base-object-to-define-resources-and-hasmany"&gt;
  &lt;/a&gt;
  GraphQL base object to define resources and has_many
&lt;/h3&gt;

&lt;p&gt;We have custom resolvers to handle the GraphQL query logic and model-level helpers to translate these into database-compatible filters. The last missing piece is a helper allowing us to declare our GraphQL resources.&lt;/p&gt;

&lt;p&gt;To do this, add the following helper methods to your &lt;code&gt;Types::BaseObject&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/graphql/types/base_object.rb&lt;/span&gt;
&lt;span class="c1"&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Types&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseObject&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Object&lt;/span&gt;
    &lt;span class="n"&gt;edge_type_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;BaseEdge&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;connection_type_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;BaseConnection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;field_class&lt;/span&gt; &lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;BaseField&lt;/span&gt;

    &lt;span class="c1"&gt;#--------------------------------------------&lt;/span&gt;
    &lt;span class="c1"&gt;# Helpers&lt;/span&gt;
    &lt;span class="c1"&gt;#--------------------------------------------&lt;/span&gt;
    &lt;span class="c1"&gt;# Automatically generate find and list queries for a given resource&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;entity_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Types::&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;singularize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;classify&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Type"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constantize&lt;/span&gt;
      &lt;span class="n"&gt;record_resolver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:record_resolver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="no"&gt;Resolvers&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;RecordQuery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;collection_resolver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:collection_resolver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="no"&gt;Resolvers&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CollectionQuery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="c1"&gt;# Generate root field for entity find&lt;/span&gt;
      &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;singularize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entity_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;resolver: &lt;/span&gt;&lt;span class="n"&gt;record_resolver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s2"&gt;"Find &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;singularize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;camelize&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;."&lt;/span&gt;

      &lt;span class="c1"&gt;# Generate root field for entity list with filtering&lt;/span&gt;
      &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pluralize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entity_type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connection_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;resolver: &lt;/span&gt;&lt;span class="n"&gt;collection_resolver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s2"&gt;"Query &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pluralize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;camelize&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; with filters."&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Define a has many relationship&lt;/span&gt;
    &lt;span class="c1"&gt;# E.g. inferred type&lt;/span&gt;
    &lt;span class="c1"&gt;# has_many :posts&lt;/span&gt;
    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="c1"&gt;# E.g. explicit type&lt;/span&gt;
    &lt;span class="c1"&gt;# has_many :published_posts, type: Type::PostType&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;has_many&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rel_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;inferred_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rel_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;singularize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;camelize&lt;/span&gt;
      &lt;span class="n"&gt;model_klass_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:model_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;inferred_type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;classify&lt;/span&gt;
      &lt;span class="n"&gt;entity_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s2"&gt;"Types::&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;inferred_type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Type"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constantize&lt;/span&gt;
      &lt;span class="n"&gt;relation_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:relation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;rel_name&lt;/span&gt;
      &lt;span class="n"&gt;resolver_klass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:resolver_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="no"&gt;Resolvers&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CollectionQuery&lt;/span&gt;

      &lt;span class="c1"&gt;# Generate root field for entity list with filtering&lt;/span&gt;
      &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="n"&gt;rel_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entity_type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connection_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;resolver: &lt;/span&gt;&lt;span class="n"&gt;resolver_klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;relation: &lt;/span&gt;&lt;span class="n"&gt;relation_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;model_name: &lt;/span&gt;&lt;span class="n"&gt;model_klass_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s2"&gt;"Query related &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;rel_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pluralize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;camelize&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; with filters."&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These helpers provide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;resource&lt;/code&gt;: a helper to be used inside &lt;code&gt;Types::QueryType&lt;/code&gt; to expose an Active Record model for collection querying and record fetching.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;has_many&lt;/code&gt;: a way to define sub-collections on a type.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can now rewrite your &lt;code&gt;Types::QueryType&lt;/code&gt; class the following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/graphql/types/query_type.rb&lt;/span&gt;
&lt;span class="c1"&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Types&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QueryType&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;BaseObject&lt;/span&gt;
    &lt;span class="c1"&gt;# Add `node(id: ID!) and `nodes(ids: [ID!]!)`&lt;/span&gt;
    &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Relay&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HasNodeField&lt;/span&gt;
    &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;GraphQL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Relay&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HasNodesField&lt;/span&gt;

    &lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="ss"&gt;:books&lt;/span&gt;
    &lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also let's add a &lt;code&gt;has_many books&lt;/code&gt; on our User model and type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Active Record Model&lt;/span&gt;
&lt;span class="c1"&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:books&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# GraphQL type&lt;/span&gt;
&lt;span class="c1"&gt;# app/graphql/types/user_type.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Types&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserType&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;BaseObject&lt;/span&gt;
    &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="no"&gt;Types&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;RecordType&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="s1"&gt;'A book'&lt;/span&gt;

    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s1"&gt;'The email address of the user.'&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;description: &lt;/span&gt;&lt;span class="s1"&gt;'The name of the user.'&lt;/span&gt;

    &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:books&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#querying-our-newly-implemented-resources"&gt;
  &lt;/a&gt;
  Querying our newly implemented resources
&lt;/h3&gt;

&lt;p&gt;We're ready. Let's see how this works now.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--szvbUH80--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/5ebd54899f7ac255cd8e0950/60bf66b8449f51763a7e4bd7_04_graphql_query_filters.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--szvbUH80--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/5ebd54899f7ac255cd8e0950/60bf66b8449f51763a7e4bd7_04_graphql_query_filters.png" alt="GraphiQL docs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see on the right-hand side, all our collection filters are properly generated. We can also fetch records individually by ID field (id or any other ID field on the type). Finally, we can fetch sub-resources on parent records, such as user books.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;A bit of metaprogramming makes the whole GraphQL-Rails experience way easier than it was originally advertised. Now all we need to do is define model types and declare resources in our &lt;code&gt;Types::QueryType&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But there is more we can do. In the next episodes we'll see how to do similar things for mutations (create/update/delete) and subscriptions (via Pusher as a specific example).&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>graphql</category>
      <category>api</category>
    </item>
    <item>
      <title>Choosing Java as your language for a Machine Learning project - Are we crazy???</title>
      <author>Jordi Cabot</author>
      <pubDate>Thu, 04 Nov 2021 11:13:26 +0000</pubDate>
      <link>https://dev.to/jcabot/choosing-java-as-your-language-for-a-machine-learning-project-are-we-crazy-454l</link>
      <guid>https://dev.to/jcabot/choosing-java-as-your-language-for-a-machine-learning-project-are-we-crazy-454l</guid>
      <description>&lt;p&gt;Most people are stunned when they realize that the &lt;a href="https://github.com/xatkit-bot-platform" rel="noopener"&gt;Xatkit bot engine is written in Java.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;True, the vast majority of AI / Machine Learning projects are written in Python. But this doesn't mean that you should go with Python when starting your own project. And don't worry, this is &lt;strong&gt;not a post about language wars&lt;/strong&gt;. I don't pretend to say that Java is better than Python (nor the other way round, for that matter). I'm just explaining our language choice. And suggesting that you should take into account many aspects when choosing the base language for your next project.&lt;/p&gt;

&lt;p&gt;Let's see why Java is a good choice for Machine Learning projects, or at least as good as a choice as many others:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;
&lt;strong&gt;Machine Learning is only a small part of your project&lt;/strong&gt;. Most of your code will NOT be about ML tasks but about data input/output, user interface, interaction with external services,... so the language needs to be good at all these things as well.  This is &lt;a href="https://xatkit.com/the-software-challenges-of-building-smart-chatbots/" rel="noopener"&gt;especially true in the case of chatbots&lt;/a&gt; that, to begin with, need to interact with different user input platforms.&lt;/li&gt;
    &lt;li&gt;
&lt;strong&gt;There are ML libraries available for every language&lt;/strong&gt;. So there is always a way to execute/train your neural networks outside the python world. For instance, in Xatkit, we reuse &lt;a href="https://stanfordnlp.github.io/CoreNLP/usage.html" rel="noopener"&gt;Stanfords' Core NLP&lt;/a&gt; models in some of our &lt;a href="https://github.com/xatkit-bot-platform/xatkit/wiki/Processors" rel="noopener"&gt;language processors&lt;/a&gt;. And, if needed, there is always the option to wrap the ML models code in a Python server (I like the simplicity of &lt;a href="https://palletsprojects.com/p/flask/" rel="noopener"&gt;Flask&lt;/a&gt; for this) and consume them via API calls to this server.&lt;/li&gt;
    &lt;li&gt;
&lt;strong&gt;Java is heavily used in the enterprise world&lt;/strong&gt;. So while core ML fans may frown at our language choice, enterprise users may see Java as a benefit as they already know how to manage and deploy Java-based applications but they could not have the same experience with Python or other languages.&lt;/li&gt;
    &lt;li&gt;
&lt;strong&gt;We are Java "experts"&lt;/strong&gt;. We are much more productive coding in Java than with any other language. Of course, we could become proficient in Python if we put the time but time is precious and it made sense to stick to the language we were already using in other projects&lt;/li&gt;
    &lt;li&gt;
&lt;strong&gt;Xatkit is a model-based tool. &lt;/strong&gt;By model, I refer here to &lt;a href="https://modeling-languages.com/clarifying-concepts-mbe-vs-mde-vs-mdd-vs-mda/" rel="noopener"&gt;software design models&lt;/a&gt;, not ML ones. An in the modeling ecosystem, Java is still the boss. In particular, Xatkit reuses some &lt;a href="https://www.eclipse.org/modeling/emf/" rel="noopener"&gt;EMF&lt;/a&gt; libraries, mostly to do some reflection on the bot definition at runtime. For sure, there are other ways to accomplish the same goal, but you can see this as a legacy decision before &lt;a href="https://xatkit.com/fluent-interface-building-chatbots-bots/" rel="noopener"&gt;Xatkit embraced Fluent APIs&lt;/a&gt; for the bot definition.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, maybe Java should not be your first option when getting started in AI technologies if there is &lt;em&gt;really&lt;/em&gt; no constraint at all on your language choice. Otherwise, the choice of a language is more of a social/team/organization decision that should take into account many other aspects (team knowledge, organization architecture, integration needs,...). We see developers arguing non-stop about why language A is better than language B but for most projects, even those including some kind of intelligent component, any major language will work and that choice will NOT be the core element in the project success at all.&lt;/p&gt;

&lt;p&gt;So, forgive me if &lt;a href="https://xatkit.com/"&gt;we&lt;/a&gt; continue developing bots in Java :-)&lt;/p&gt;

</description>
      <category>java</category>
      <category>chatbot</category>
      <category>machinelearning</category>
      <category>language</category>
    </item>
    <item>
      <title>How to sync EFS and S3 every 5 min in AWS</title>
      <author>Federico Navarrete</author>
      <pubDate>Thu, 04 Nov 2021 11:10:54 +0000</pubDate>
      <link>https://dev.to/fanmixco/how-to-sync-efs-and-s3-every-5-min-in-aws-1712</link>
      <guid>https://dev.to/fanmixco/how-to-sync-efs-and-s3-every-5-min-in-aws-1712</guid>
      <description>&lt;p&gt;&lt;strong&gt;DataSync&lt;/strong&gt; is a powerful tool to move data between different AWS storage options like S3, EFS, and EFx. However, there is a catch, you can only run a scheduled task &lt;a href="https://docs.aws.amazon.com/datasync/latest/userguide/task-scheduling.html"&gt;every hour&lt;/a&gt; (Nov 2021), you cannot create a custom &lt;code&gt;cron&lt;/code&gt; expression for a lower time like &lt;code&gt;*/5 * * * *&lt;/code&gt;. My guessing about this restriction is that this feature was planned for Data Warehousing, not for active synchronization.&lt;/p&gt;

&lt;p&gt;My challenge started when I had to read some XMLs using &lt;em&gt;RDS for SQL Server&lt;/em&gt;. RDS for SQL Server can read the files from &lt;a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/User.SQLServer.Options.S3-integration.html"&gt;S3 natively&lt;/a&gt;, but my files came from several micro-services running in Fargate that have only access to EFS as a volume. These files came from external services at different times of the day and represented several gigas to transfer.&lt;/p&gt;

&lt;p&gt;In the beginning, I was trying to find a way to read the EFS from SQL Server but it didn't work. RDS doesn't have an option to read EFS because it runs in Windows, and there is not a Linux option available yet, which could potentially give us access to EFS.&lt;/p&gt;

&lt;p&gt;However, you cannot do it without a plugin that requires your container to run as privileged and this is &lt;a href="https://github.com/aws/containers-roadmap/issues/1000#issuecomment-920408603"&gt;not authorized&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After several failed attempts, I created a workaround that involves:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A &lt;strong&gt;DataSync&lt;/strong&gt; task for creating the basic task and synchronizing the data.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;Lambda&lt;/strong&gt; function for running the task.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;EventBridge&lt;/strong&gt; rule for triggering the Lambda function every 5 min.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#datasync"&gt;
  &lt;/a&gt;
  DataSync
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Configure your data source (EFS, for instance):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ahchuZx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vcjl3pzlvfku7zj4ybo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ahchuZx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vcjl3pzlvfku7zj4ybo.jpg" alt="Step 1" width="880" height="785"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Choose the destination (S3, for instance):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sj15S0tG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x21vc3cd1c3vilj38tk5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sj15S0tG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x21vc3cd1c3vilj38tk5.jpg" alt="Step 2" width="880" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Configure what you want to move.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Review your new task and create it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lambda"&gt;
  &lt;/a&gt;
  Lambda
&lt;/h2&gt;

&lt;p&gt;This is the Python script that I wrote:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'datasync'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;region_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'YOUR_REGION'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lambda_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_task_execution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;TaskArn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'arn:aws:datasync:YOUR_REGION:YOUR_USER_ID:task/YOUR_TASK_ID'&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;YOUR_REGION&lt;/strong&gt; is the location where you want to run it like &lt;em&gt;eu-west-1&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;YOUR_USER_ID&lt;/strong&gt; is the user that is going to run the task.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;YOUR_TASK_ID&lt;/strong&gt; is the task ID created in the DataSync.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#eventbridge"&gt;
  &lt;/a&gt;
  EventBridge
&lt;/h2&gt;

&lt;p&gt;Create a new rule that runs in your expected schedule.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a new rule:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cYfN9cg---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdiehup6n5ir9yqzxsri.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cYfN9cg---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdiehup6n5ir9yqzxsri.png" alt="New rule" width="488" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Configure your schedule:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IDSqf_vA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86t9q5qs4z0gc26fel8w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IDSqf_vA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86t9q5qs4z0gc26fel8w.png" alt="Step 2" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Choose your lambda function:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Wp0aFog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7imosoub1yqeb51ieka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Wp0aFog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7imosoub1yqeb51ieka.png" alt="Step 3" width="880" height="532"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Review your new rule and create it.&lt;/p&gt;

&lt;p&gt;And that's all. Now, you can run your task DataSync in your required schedule.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>efs</category>
      <category>s3</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>How to build a contact form with Elementor</title>
      <author>CodeWatchers</author>
      <pubDate>Thu, 04 Nov 2021 11:01:46 +0000</pubDate>
      <link>https://dev.to/codewatchers_en/how-to-build-a-contact-form-with-elementor-12po</link>
      <guid>https://dev.to/codewatchers_en/how-to-build-a-contact-form-with-elementor-12po</guid>
      <description>&lt;p&gt;Are you aware that Contact Us Page is currently viewed as underrated on most websites? Most website owners do not understand how important this page is. This is a small place where visitors to your website come to get answers to their questions from you.&lt;/p&gt;

&lt;p&gt;Day after day, no one pays attention to this significant part due to insignificance, as well as the user engagement is less because the placement of the page is not done properly.&lt;/p&gt;

&lt;p&gt;To get rid of this problem, we need to understand how to create a proper contact page. This tutorial will help you learn how to create a beautiful Contact Us page with Elementor Page Builder.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-makes-best-contact-page" class="anchor"&gt;
  &lt;/a&gt;
  What Makes Best Contact Page
&lt;/h2&gt;

&lt;p&gt;Since contact pages play a big role in a website's success, we need to focus on several things to make it happen. Here we will talk about some of the important things that play a major role in creating a good contact page, so you need to know them before creating a contact page through Elementor.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Links to contact pages are a must-have for any Affiliate promoting any program. There should be a link in the footer of every page of a website. If space is available, it is wise to keep a contact form in the header.&lt;/li&gt;
&lt;li&gt;For product-based websites - if you are selling a product or service on your site, it is better to provide a link to a documentation or service FAQ page because many people contact you to know about these things. If you provide these in advance, it will be considered reliable to the visitors.&lt;/li&gt;
&lt;li&gt;Try to add a mobile phone number, email, and mailing address to your website. This makes your contact page more active for your users.&lt;/li&gt;
&lt;li&gt;Try to avoid unnecessary fields from your contact form so that your visitors can understand that it's easier to reach you. There are many good contact form builder such as Gravity and WPforms that works great with WordPress.&lt;/li&gt;
&lt;li&gt;Developers often make a mistake, that is - making a dull contact page. This cannot be done at all, as it reduces visitor engagement on the website. Today we will see how to make a content page attractive through Elementor.&lt;/li&gt;
&lt;li&gt;After pressing the contact form's submit button, it takes the users to a blank page with nothing. This creates a negative impression in the minds of the users that you do not care about them. Always provide a thank you pop-up confirmation so that your users feel valued.&lt;/li&gt;
&lt;li&gt;It's written nowhere that your contact page cant be interactive. You can add all the fields and make it attractive as you want with stunning templates and animation, or maybe you can add some extra things like google map as your location. It completely up to you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your contact form reflects these rules, it will serve as a boost to your website's purpose. Now we will learn how to create a visually pleasing contact page with the help of these elements. We don't need to know any coding for this.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#build-contact-form-with-elementor" class="anchor"&gt;
  &lt;/a&gt;
  Build Contact form with Elementor
&lt;/h2&gt;

&lt;p&gt;We will design our contact page with &lt;a href="https://codewatchers.com/aff/elementor/go"&gt;Elementor Page Builder&lt;/a&gt; and &lt;a href="https://powerpackelements.com/"&gt;Power Pack Add on for Elementor&lt;/a&gt;. Install these plugins and activate them. Now go to your &lt;strong&gt;Dashboard&lt;/strong&gt; and choose &lt;strong&gt;Pages&lt;/strong&gt; from the left options. Now go to your contact page and select &lt;strong&gt;Edit with Elementor.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0PL4oElM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/01/Contact-form-page-from-dashboard.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0PL4oElM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/01/Contact-form-page-from-dashboard.jpg" alt="" width="863" height="449"&gt;&lt;/a&gt;We will start with image addition at the top of the page and title it. To do this, click &lt;strong&gt;“+”&lt;/strong&gt; or &lt;strong&gt;Add a new section&lt;/strong&gt; and then add a single column to your webpage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KW5Pb8Sm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/01/add-new-section.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KW5Pb8Sm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/01/add-new-section.jpg" alt="" width="837" height="239"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2LL1Z422--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/01/single-column-adding.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2LL1Z422--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/01/single-column-adding.jpg" alt="" width="837" height="239"&gt;&lt;/a&gt;Now click on Row Settings and add a background image to Row from the Style tab. To make the image and row more visible, you need to change the row's height from the Layout tab. Height should be at least 600. Now also add another background overlay and make its opacity .57 set from the style tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DLlQn7av--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/01/image-and-overlay.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DLlQn7av--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/01/image-and-overlay.jpg" alt="" width="880" height="782"&gt;&lt;/a&gt;Now from the &lt;strong&gt;PowerPack add-on pack&lt;/strong&gt;, drag a Dual heading widget and drop it on the row. Change the look and design of the text as you need. This is all about your creativity. You can make it as we did or as you like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--234EO7gA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/01/dual-heading-widget.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--234EO7gA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codewatchers.com/secure/wp-content/uploads/2021/01/dual-heading-widget.jpg" alt="" width="866" height="318"&gt;&lt;/a&gt;Now, it's time to use a reliable contact form on this page. Generally, I use Contact Form 7, but you can go with any plugins such as - Gravity Forms, Caldera forms, Ninja forms, or the WPforms. Make sure you install and activate it before going further. You can also install Contact form 7 and refresh our designed page to get this plugin connected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codewatchers.com/en/blog/how-to-build-a-contact-form-with-elementor?utm_campaign=content-trimming&amp;amp;utm_source=dev.to&amp;amp;utm_medium=link"&gt;Read The Full Tutorial.&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top Programming Languages To Create Smart Contracts</title>
      <author>Abdul Maajid</author>
      <pubDate>Thu, 04 Nov 2021 11:00:17 +0000</pubDate>
      <link>https://dev.to/abdulmaajid/top-programming-languages-to-create-smart-contracts-3n3f</link>
      <guid>https://dev.to/abdulmaajid/top-programming-languages-to-create-smart-contracts-3n3f</guid>
      <description>&lt;p&gt;There are many programming languages that allow you to write smart contracts. In this article, we’ll explore some top programming languages used to build smart contracts.&lt;/p&gt;

&lt;p&gt;First Let's understand  what is a smart contract.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#smart-contract"&gt;
  &lt;/a&gt;
  Smart Contract
&lt;/h2&gt;

&lt;p&gt;A smart contract is a computer program that is used to exchange assets including money, property, or shares without the need of any intermediate to function. The code and the agreements are contained therein exist over a distributed, decentralized blockchain network e.g. Ethereum, Solana, Bitcoin, etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For example&lt;/em&gt;, if you want to purchase a piece of land using a smart contract, your land ownership documents will be sent to you immediately after your payment is completed. You don’t need to trust a third-party site to transfer the ownership after making payments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use Cases
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Government Voting&lt;/li&gt;
&lt;li&gt;Supply Chain Management &lt;/li&gt;
&lt;li&gt;Insurance Claim &lt;/li&gt;
&lt;li&gt;Record Storing&lt;/li&gt;
&lt;li&gt;Trading Activities&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, here is a list of top smart contract languages, Let’s get into it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-solidity"&gt;
  &lt;/a&gt;
  1. Solidity
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.soliditylang.org/"&gt;Solidity&lt;/a&gt; is an object-oriented, high-level language for implementing smart contracts. Solidity was first developed by Gavin Wood, Christian Reitwiessner, Yoichi Hirai, and several of Ethereum’s core contributors to enable the development of smart contracts that functioned on Ethereum.&lt;/p&gt;

&lt;p&gt;Influenced by C++, Python, and JavaScript, and is designed to target the Ethereum Virtual Machine (EVM), Solidity is the first blockchain programming language that one must learn. Especially when you want to develop dApps or are looking to get into the ICO development game.&lt;br&gt;
Major platforms that support the Solidity language.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ethereum&lt;/li&gt;
&lt;li&gt;Polkadot&lt;/li&gt;
&lt;li&gt;Binance Smart Chain&lt;/li&gt;
&lt;li&gt;Tron&lt;/li&gt;
&lt;li&gt;Uniswap&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#2-rust"&gt;
  &lt;/a&gt;
  2. RUST
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.near.org/docs/develop/contracts/rust/intro"&gt;Rust&lt;/a&gt; is an ideal smart contract language: It is type-safe, memory safe, and free of undefined behaviors. It generates small binaries because it doesn’t include extra bloat, like a garbage collector, and advanced optimizations and tree shaking remove dead code. Through compiler flags, Rust can automatically protect against integer overflow. In the space-constrained blockchain world size is important. The Rust compiler is a great help for that, since it reorders struct fields in order to make each type as small as possible. Thus Rust data structures are very compact, in many cases even more compact than in C.&lt;/p&gt;

&lt;p&gt;Though a newbie in the Blockchain ecosystem, Rust is also being widely considered for building innovative, immutable, and secure solutions. &lt;/p&gt;

&lt;p&gt;Rust language enables open-source developers to create quick and effective Blockchain frameworks. It also serves them with a highly-capable mechanism of managing mutable states, amazing code optimization, better memory options, and concurrency-based opportunities.&lt;br&gt;
Major platforms that support the RUST language.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Solana&lt;/li&gt;
&lt;li&gt;Polkadot&lt;/li&gt;
&lt;li&gt;OpenEthereum&lt;/li&gt;
&lt;li&gt;Zero-chain&lt;/li&gt;
&lt;li&gt;Bitcoin Cash&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#3-vyper"&gt;
  &lt;/a&gt;
  3. VYPER
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://vyper.readthedocs.io/"&gt;Vyper&lt;/a&gt; is a contract-oriented, pythonic programming language that targets the Ethereum Virtual Machine (EVM).&lt;/p&gt;

&lt;p&gt;It was designed to improve upon Solidity, another smart contract language for Ethereum, by limiting unsafe practices and enhancing readability; Vyper seeks to optimize the security and auditability of smart contracts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vyper-provides-the-following-features"&gt;
  &lt;/a&gt;
  Vyper provides the following features:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Bounds and overflow checking:&lt;/strong&gt; On array accesses and arithmetic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Support for signed integers and decimal fixed-point numbers&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Decidability:&lt;/strong&gt; It is possible to compute a precise upper bound for the gas consumption of any Vyper function call.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Strong typing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Small and understandable compiler code&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Limited support for pure functions:&lt;/strong&gt; Anything marked constant is not allowed to change the state.
Vyper does not strive to be a 100% replacement for everything that can be done in Solidity; it will deliberately forbid things or make things harder if it deems fit to do so for the goal of increasing security.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-javascript"&gt;
  &lt;/a&gt;
  4. JavaScript
&lt;/h2&gt;

&lt;p&gt;JavaScript is a general-purpose programming language, and it’s found a place in the blockchain space. Because JavaScript is an entry-level language, most blockchains tend to create a JavaScript wrapper or library to allow developers to easily jump into the ecosystem.&lt;br&gt;
The popularity of one of the renowned smart contract languages, Solidity, largely rests on its similarities to JavaScript.&lt;br&gt;
The notable value advantages of JavaScript as one of the smart contract programming languages include the following,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript ensures easier and faster entry to the market due to the ease of using solutions based on JavaScript. &lt;/li&gt;
&lt;li&gt;The design of JavaScript allows the benefit of improved scalability which can enhance the functionality of smart contracts effectively.&lt;/li&gt;
&lt;li&gt;Most important of all, JavaScript assures limited hassles in the integration of required resources. &lt;/li&gt;
&lt;li&gt;As a result, JavaScript can be one of the top contenders among the smart contract languages outlined in this list.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-python"&gt;
  &lt;/a&gt;
  5. Python
&lt;/h2&gt;

&lt;p&gt;Blockchain Programming in Python has not only ruled the world of app development, IoT app development, and network servers’ development, but is also proving to be an asset in the Blockchain-as-a-service arena.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Blockchain programming in Python language is easy to learn&lt;/li&gt;
&lt;li&gt;Access to dynamic architecture&lt;/li&gt;
&lt;li&gt;Perfect for both base and scripting approaches,&lt;/li&gt;
&lt;li&gt;Open-source support&lt;/li&gt;
&lt;li&gt;Blockchain coding in python is efficient for prototyping&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python is the 2nd most popular programming language. Some of the popular blockchains developed using Python are Ethereum, Hyperledger Fabric, Steem, and NEO.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-yul"&gt;
  &lt;/a&gt;
  6. Yul
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.soliditylang.org/en/v0.5.3/yul.html"&gt;Yul&lt;/a&gt; is another entry among popular smart contract programming languages. As a matter of fact, it is an intermediate language that you can compile to bytecode for addressing the needs of different backends.&lt;br&gt;
The Solidity compiler has an experimental implementation that uses Yul as an intermediate language. Yul is used in stand-alone mode and for inline assembly inside Solidity.&lt;/p&gt;

&lt;p&gt;Yul bears planned support for EVM and &lt;a href="https://github.com/ewasm"&gt;ewasm&lt;/a&gt; (Ethereum flavored WebAssembly). It is designed to be a usable common denominator of both platforms.&lt;/p&gt;

&lt;p&gt;Yul is a great target for high-level optimization stages that can benefit both EVM and ewasm platforms equally.&lt;br&gt;
Most Ethereum-based projects most likely already use Yul.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-golang"&gt;
  &lt;/a&gt;
  7. Golang
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://golang.org/"&gt;Golang&lt;/a&gt; is an open sourced programming language loosely based on the syntax of the C programming language. Golang is an easy language for developers to learn and current estimates place Golang developers at more than 800,000 worldwide.&lt;/p&gt;

&lt;p&gt;This programming language was created by Google. It is one language that can allow different processes to run at the same time, meaning that it allows for concurrent programming.&lt;/p&gt;

&lt;p&gt;Most of HyperLedger’s chaincode built using HyperLedger Fabrics for smart contracts are being written in Golang. FLETA also supports Golang as a smart contract programming language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-clarity"&gt;
  &lt;/a&gt;
  8. Clarity
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://clarity-lang.org/"&gt;Clarity&lt;/a&gt; is a new language that brings smart contracts to Bitcoin. It is a decidable language, meaning you can know, with certainty, from the code itself what the program will do.&lt;/p&gt;

&lt;p&gt;Clarity is interpreted (not compiled) &amp;amp; the source code is published on the blockchain. Clarity gives developers a safe way to build complex smart contracts. The Clarity open-source project is supported by the &lt;a href="https://blockstack.org/"&gt;Stacks ecosystem&lt;/a&gt;, &lt;a href="https://hiro.so/"&gt;Hiro PBC&lt;/a&gt;, &amp;amp; &lt;a href="https://www.algorand.com/"&gt;Algorand&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Predictable&lt;/strong&gt;: The Clarity language uses precise and unambiguous syntax that allows developers to predict exactly how their contracts will be executed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Secure&lt;/strong&gt;: The Clarity language allows users to supply their conditions for transactions that ensure that a contract may never unexpectedly transfer a token owned by a user.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;No compiler&lt;/strong&gt;: Contracts written in Clarity are broadcasted on the blockchain exactly as they are written by developers.
## Conclusion
So, these were some of the programming languages that can be considered for entering the Blockchain world and making the best of the flourishing opportunity. Which programming language from the above list you should use is dependent on the blockchain you want to work on. For Ethereum blockchain, for example, &lt;em&gt;Solidity&lt;/em&gt; is the top choice for most developers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you found this article useful, if you need any help please let me know in the comment section. Would you like to buy me a coffee, You can do it &lt;a href="https://buymeacoffee.com/abdulmaajid"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's connect on &lt;a href="https://twitter.com/MrAMaajid"&gt;Twitter&lt;/a&gt; and &lt;a href="https://pk.linkedin.com/in/amaajid007"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;👋 Thanks for reading, See you next time&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>smartcontracts</category>
      <category>programming</category>
      <category>web3</category>
    </item>
    <item>
      <title>How to use Github CLI in 7 commands</title>
      <author>thomasvanholder</author>
      <pubDate>Thu, 04 Nov 2021 10:50:45 +0000</pubDate>
      <link>https://dev.to/thomasvanholder/how-to-use-github-cli-in-7-commands-4p4k</link>
      <guid>https://dev.to/thomasvanholder/how-to-use-github-cli-in-7-commands-4p4k</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;a href="#1-open-project-in-github"&gt;Open project in Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-list-all-issues"&gt;List all issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-create-new-issue"&gt;Create new issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-list-all-prs"&gt;List all PRs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-check-pr-status"&gt;Check PR status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-merge-pr-into-main"&gt;Merge PR into main&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-switch-between-branches"&gt;Switch between branches&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;strong&gt;Github CLI installed?&lt;/strong&gt;&lt;br&gt;
Check by running &lt;code&gt;gh version&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or &lt;a href="https://cli.github.com"&gt;install Github CLI&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#1-open-project-in-github"&gt;
  &lt;/a&gt;
  1. Open project in Github
&lt;/h2&gt;

&lt;p&gt;Open the github homepage of the current project in the browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gh browse
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Github CLI's response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Opening github.com/repo/my-repo &lt;span class="k"&gt;in &lt;/span&gt;your browser.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#2-list-all-issues"&gt;
  &lt;/a&gt;
  2. List all issues
&lt;/h2&gt;

&lt;p&gt;Return all outstanding issues in the repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gh issue list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Github CLI's response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Showing 3 of 3 open issues &lt;span class="k"&gt;in &lt;/span&gt;repo/my-repo

&lt;span class="c"&gt;#178  bug when downloading pdf            about 3 minutes ago&lt;/span&gt;
&lt;span class="c"&gt;#166  refactor stripe api call            about 2 days ago&lt;/span&gt;
&lt;span class="c"&gt;#126  depreciate pacakge                  20 days ago&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#3-create-new-issue"&gt;
  &lt;/a&gt;
  3. Create new issue
&lt;/h2&gt;

&lt;p&gt;Did you find a new bug? &lt;br&gt;
Add something as a to-do for later on &lt;a href="https://github.com/features/issues/"&gt;Github Issues&lt;/a&gt;. The CLI will prompt you a few questions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gh issue create
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Github CLI's response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Creating issue &lt;span class="k"&gt;in &lt;/span&gt;repo/my-repo

? Title bug when downloading pdf
? Body &amp;lt;Received&amp;gt;
? What&lt;span class="s1"&gt;'s next? Submit
https://github.com/repo/my-repo/issues/178
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#4-list-all-prs"&gt;
  &lt;/a&gt;
  4. List all PRs
&lt;/h2&gt;

&lt;p&gt;Retrieve an overview of all PR in the repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gh &lt;span class="nb"&gt;pr &lt;/span&gt;list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Github CLI's response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Showing 3 of 3 open pull request &lt;span class="k"&gt;in &lt;/span&gt;repo/my-repo

&lt;span class="c"&gt;#170  feat/stripe-checkout&lt;/span&gt;
&lt;span class="c"&gt;#142  feat/vitally-api&lt;/span&gt;
&lt;span class="c"&gt;#139  bug/profile-responsiveness&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#5-check-pr-status"&gt;
  &lt;/a&gt;
  5. Check PR status
&lt;/h2&gt;

&lt;p&gt;To find out if the PR passed the automated testing suite.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gh pr status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Github CLI's response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Relevant pull requests &lt;span class="k"&gt;in &lt;/span&gt;repo/my-repo

Current branch
  &lt;span class="c"&gt;#177  new-feature [new-feature]&lt;/span&gt;
  ✓ Checks passing
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#6-merge-pr-into-main"&gt;
  &lt;/a&gt;
  6. Merge PR into main
&lt;/h2&gt;

&lt;p&gt;A useful shortcut to easily delete a branch from both Github &lt;strong&gt;and&lt;/strong&gt; your local enviroment.&lt;/p&gt;

&lt;p&gt;2 options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;From the local main branch&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Merge a PR into the main branch by specifying the PR number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gh &lt;span class="nb"&gt;pr &lt;/span&gt;merge 177
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;From the PR branch&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No need to specific the PR number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gh &lt;span class="nb"&gt;pr &lt;/span&gt;merge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Github CLI's response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? What merge method would you like to use? Create a merge commit
? Delete the branch locally and on GitHub? Yes
? What&lt;span class="s1"&gt;'s next? Submit
✓ Merged pull request #177 (new-feature)
✓ Deleted branch new-feature
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#7-switch-between-branches"&gt;
  &lt;/a&gt;
  7. Switch between branches
&lt;/h2&gt;

&lt;p&gt;This CLI command is based upon a popular &lt;a href="https://github.com/mislav/gh-branch"&gt;extension&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Install the extension&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gh extension &lt;span class="nb"&gt;install &lt;/span&gt;mislav/gh-branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the extension.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gh branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Move across branches with up and down arrow. Hit enter to select the branch. &lt;/p&gt;

&lt;p&gt;Github CLI's response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  feat/stripe-checkout             6 weeks ago
  feat/postmark-integration        2 weeks ago
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; new-feature                      25 hours ago
  bug/profile-responsiveness       2 hours ago
  4/4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>github</category>
      <category>productivity</category>
      <category>cli</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
